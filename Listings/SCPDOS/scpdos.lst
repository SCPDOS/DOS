     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs and strucs
     5                                  %include "./Source/Include/driverStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     9                              <1> ; device driver related structures.                     ;
    10                              <1> ;-------------------------------------------------------;
    11                              <1> 
    12                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    13                              <1> 
    14 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    15 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    16 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    17 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    18 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    19                              <1> 
    20                              <1> endstruc
    21                              <1> 
    22                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    23                              <1> 
    24                              <1>     .hdrlen resb 1  ;Length of the request header
    25                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    26                              <1>     .cmdcde resb 1  ;Command code
    27                              <1>     .status resw 1  ;Status word
    28                              <1>     .devptr resq 1  ;Device queue pointer field
    29                              <1> 
    30                              <1> %endmacro
    31                              <1> ;Command Code equates
    32                              <1>     drvINIT         equ 0
    33                              <1>     drvMEDCHK       equ 1
    34                              <1>     drvBUILDBPB     equ 2
    35                              <1>     drvIOCTLREAD    equ 3
    36                              <1>     drvREAD         equ 4
    37                              <1>     drvNONDESTREAD  equ 5
    38                              <1>     drvINSTATUS     equ 6
    39                              <1>     drvFLUSHINBUF   equ 7
    40                              <1>     drvWRITE        equ 8
    41                              <1>     drvWRITEVERIFY  equ 9
    42                              <1>     drvOUTSTATUS    equ 10
    43                              <1>     drvFLUSHOUTBUF  equ 11
    44                              <1>     drvIOCTLWRITE   equ 12
    45                              <1>     drvOPEN         equ 13
    46                              <1>     drvCLOSE        equ 14
    47                              <1>     drvREMMEDCHECK  equ 15
    48                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    49                              <1>     drvIOCTL        equ 19
    50                              <1>     drvGETDRVMAP    equ 23
    51                              <1>     drvSETDRVMAP    equ 24
    52                              <1>     
    53                              <1> ;Driver Error equates 
    54                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    55                              <1>     drvBadUnit      equ 1   ;Unknown unit
    56                              <1>     drvNotReady     equ 2   ;Device not ready
    57                              <1>     drvBadCmd       equ 3   ;Unknown command
    58                              <1>     drvCRCErr       equ 4   ;CRC Error
    59                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    60                              <1>     drvBadSeek      equ 6   ;Seek error
    61                              <1>     drvBadMed       equ 7   ;Unknown media
    62                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    63                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    64                              <1>     drvWriteFault   equ 10  ;Write Fault
    65                              <1>     drvReadFault    equ 11  ;Read Fault
    66                              <1>     drvGenFault     equ 12  ;General Fault
    67                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    68                              <1> 
    69                              <1> ;Drive structures
    70                              <1> struc drvReqHdr
    71                              <1>     drvReqHdrM
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc initReqPkt  ;Init Request Packet
    75                              <1> 
    76                              <1>     drvReqHdrM   ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    77 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    78 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    79 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    80 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    85                              <1> 
    86                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    87 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    88 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    89 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    90                              <1> 
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    94                              <1> 
    95                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    96 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    97 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    98 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    99                              <1> 
   100                              <1> endstruc
   101                              <1> 
   102                              <1> struc ioReqPkt   ;IO Request Packet
   103                              <1> 
   104                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   105 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   106 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   107 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   108 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   109 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   110                              <1> 
   111                              <1> endstruc
   112                              <1> 
   113                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
   114                              <1>     
   115                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   116 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc statusReqPkt   ;Status Request Packet
   121                              <1> 
   122                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   129                              <1>      
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc openReqPkt ;Open Device Request Packet
   133                              <1> 
   134                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   135                              <1>      
   136                              <1> endstruc
   137                              <1> 
   138                              <1> struc closeReqPkt ;Close Device Request Packet
   139                              <1> 
   140                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   141                              <1>      
   142                              <1> endstruc
   143                              <1> 
   144                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   145                              <1> 
   146                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   147                              <1>      
   148                              <1> endstruc
   149                              <1> 
   150                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   151                              <1> 
   152                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   153 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   154 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   155 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   156 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   157 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   162                              <1>     
   163                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   164                              <1> 
   165                              <1> endstruc
   166                              <1> 
   167                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   168                              <1>     
   169                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   170                              <1> 
   171                              <1> endstruc
     6                                  %include "./Source/Include/fatStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous FAT driver   ;
    10                              <1> ; structures. exFAT will have it's own files at a later ;
    11                              <1> ; stage.                                                ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    17                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    18                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    19                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    20                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    21                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    22                              <1> ;-------------------------------------------------------;
    23                              <1> 
    24                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    25                              <1> 
    26 00000000 ??????              <1>     .jmpBoot    resb 3 
    27 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    28 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    29 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    30 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    31 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    32 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    33 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    34 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    35 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    36 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    37 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    38 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    39 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    40                              <1> 
    41 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    42 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    43 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    44 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    45 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    46 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    47                              <1> 
    48                              <1> endstruc
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    51                              <1> 
    52 00000000 ??????              <1>     .jmpBoot    resb 3
    53 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    54 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    55 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    56 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    57 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    58 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    59 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    60 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    61 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    62 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    63 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    64 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    65 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    66                              <1> 
    67 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    68 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    69 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    70 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    71 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    72 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    73 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    74                              <1> 
    75 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    76 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    77 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    78 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    79 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    80 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mbr
    85 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    86 000001B8 ????????            <1>     .diskID     resb 4
    87 000001BC ????                <1>     .reserved   resb 2
    88 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    89 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    90 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    91 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    92 000001FE ????                <1>     .mbrSig     resb 2
    93                              <1> endstruc
    94                              <1> 
    95                              <1> struc mbrEntry
    96 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    97 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    98 00000004 ??                  <1>     .ptnType    resb 1
    99 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   100 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   101 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc ebr
   105 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   106 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   107 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   108 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   109 000001FE ????                <1>     .mbrSig     resb 2
   110                              <1> endstruc
   111                              <1> 
   112                              <1> 
   113                              <1> struc fatDirEntry
   114                              <1> 
   115 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   116 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   121 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   122 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   127                              <1> 
   128                              <1> endstruc
   129                              <1> ;Directory attribute equates
   130                              <1>     dirReadOnly     equ 01h
   131                              <1>     dirHidden       equ 02h
   132                              <1>     dirSystem       equ 04h
   133                              <1>     dirVolumeID     equ 08h
   134                              <1>     dirDirectory    equ 10h
   135                              <1>     dirArchive      equ 20h
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1> 
   138                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   139                              <1> 
   140 00000000 ??????              <1>     .jmpBoot                resb 3 
   141 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   142 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   143 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   144 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   145 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   146 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   147 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   148 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   149 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   150 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   151 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   152 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   153 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   154 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   155 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   156 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   157 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   158 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   159                              <1> 
   160                              <1> endstruc
   161                              <1> 
   162                              <1> struc FSInfo
   163                              <1> 
   164 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   165 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   166 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   167 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   168 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   169 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   170 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   171                              <1> 
   172                              <1> endstruc
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)x
    27 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000005 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000007 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000008 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    32 0000000A ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000E ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000012 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000016 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001A ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000022 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000023 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000024 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002C ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000030 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Flags: Bit 15 set = Network drive
    69                              <1> ;        Bit 14 set = Physical drive
    70                              <1> ;        Bit 13 set = JOIN'ed drive
    71                              <1> ;        Bit 12 set = SUBST'ed drive
    72                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    73                              <1> endstruc
    74                              <1> ;CDS equates
    75                              <1>     cdsNetDrive     equ 8000h
    76                              <1>     cdsPhysDrive    equ 4000h
    77                              <1>     cdsJoinDrive    equ 2000h
    78                              <1>     cdsSubstDrive   equ 1000h
    79                              <1>     cdsRedirDrive   equ 0080h
    80                              <1> ;------------------------------------------------------------------------;
    81                              <1> ; The SFT is a way to allow applications to open file handles to files 
    82                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    83                              <1> ; under the first header, and then a second header will be linked to the 
    84                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    85                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    86                              <1> ; using the FCBS= command. Default FCBS=5.
    87                              <1> ;
    88                              <1> ; A file handle describes the file, and the location within the file that
    89                              <1> ; we are reading. The file handle can be manipulated without the file
    90                              <1> ; being in memory, thus allowing the user to access data without needing 
    91                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    92                              <1> ; accessing devices, by treating them as files with their drivers 
    93                              <1> ; responding and translating the manipulations of the file handle itself.
    94                              <1> ; Neither the driver nor the application should see or use the SFT for
    95                              <1> ; the handle, as it is subject to change (and will change when file 
    96                              <1> ; sharing provisions are included). The DOS will make requests to the 
    97                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    98                              <1> ; track of the information in the SFT entry for that handle. 
    99                              <1> ;
   100                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   101                              <1> ; can point to the same file. It all depends on what the applications 
   102                              <1> ; want to do with the File.
   103                              <1> ;
   104                              <1> ; !!!!IMPORTANT!!!!
   105                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   106                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   107                              <1> ;
   108                              <1> ;Each SFT may look like this:
   109                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   110                              <1> ;            |                |
   111                              <1> ;       wNumFiles*sft    wNumFiles*sft
   112                              <1> ;
   113                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   114                              <1> ; System FCBs.
   115                              <1> ;
   116                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   117                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   118                              <1> ;
   119                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   120                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   121                              <1> ;------------------------------------------------------------------------;
   122                              <1> struc sfth   ;System file table header
   123                              <1> ; This is the SFT header.
   124                              <1> ; This structure comes before the start of the first file in the array/table.
   125 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   126 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc sft
   130                              <1> ;This is the file struc itself
   131 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   132 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   133 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   134 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   135 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   136 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   137 00000013 ????                <1>     .wTime       resw 1    ;File Time
   138 00000015 ????                <1>     .wDate       resw 1    ;File Date
   139 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   140 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   141 0000001F ????                <1>     .wRelSect    resw 1    ;Rel sector in the last cluster accessed
   142 00000021 ????????            <1>     .dDirSect    resd 1    ;Rel number of sector containing directory entry 
   143 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   144 00000026 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   145 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   146 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   147                              <1> endstruc
   148                              <1> ;Open Mode equates
   149                              <1> ;Access modes   Bits[2:0]
   150                              <1>     ReadAccess      equ 0h
   151                              <1>     WriteAccess     equ 1h
   152                              <1>     RWAccess        equ 2h
   153                              <1> ;Bit 3 reserved 0
   154                              <1> ;Sharing modes  Bits[6:4]
   155                              <1>     CompatShare     equ 0h
   156                              <1>     denyRWShare     equ 10h
   157                              <1>     denyWriteShare  equ 20h
   158                              <1>     denyReadShare   equ 30h
   159                              <1>     denyNoneShare   equ 40h
   160                              <1> ;Bit 7 reserved 0
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> ;Critical Error handling
   163                              <1>     critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   164                              <1> ;Buffering on writes
   165                              <1>     noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file?
   167                              <1>     FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1>     readOnlyFile    equ 1h
   170                              <1>     hiddenFile      equ 2h
   171                              <1>     systemFile      equ 4h
   172                              <1>     volumeLabel     equ 8h
   173                              <1>     directoryFile   equ 10h ;Directory entry
   174                              <1>     archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1>     charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1>     charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1>     charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1>     charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1>     charDevFastOut  equ 10h ;If set, device supports INT 49h
   182                              <1>     devBinary       equ 20h ;If set, r/w device in Binary mode!!!
   183                              <1>     charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1>     blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   185                              <1>     devCharDev      equ 80h ;If set, it is a char device!
   186                              <1>     charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1>     devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1>     charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1>     blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   190                              <1>     devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   214                              <1>     .dataarea:             ;Points to the start of the data area
   215                              <1> endstruc
   216                              <1> ;Buffer Flag equates
   217                              <1>     dosBuffer   equ 1h  ;DOS data sector in buffer
   218                              <1>     fatBuffer   equ 2h  ;FAT sector in buffer
   219                              <1>     dirBuffer   equ 4h  ;Directory sector in buffer
   220                              <1>     dataBuffer  equ 8h  ;File Data sector in buffer
   221                              <1>     refBuffer   equ 20h ;Data in buffer referenced by an application
   222                              <1>     dirtyBuffer equ 40h ;Data in buffer modified by an application
   223                              <1> ;------------------------------------------------------------------------;
   224                              <1> ; Memory control block for each memory arena
   225                              <1> ;------------------------------------------------------------------------;
   226                              <1> struc mcb
   227 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   228 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP or 0 for free space
   229 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   230 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   231                              <1>     .program:
   232                              <1> endstruc
   233                              <1> ;MCB equates
   234                              <1> mcbOwnerHole    equ -1  ;Owner = -1 => Memory hole
   235                              <1> mcbOwnerFree    equ 0   ;Owner =  0 => Free and available space
   236                              <1> mcbOwnerDOS     equ 8   ;Owner =  8 => Owned by DOS
   237                              <1> ;Owner = Para aligned address => Owning application PSP
   238                              <1> ;...To consider...
   239                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   240                              <1> 
   241                              <1> ;------------------------------------------------------------------------;
   242                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   243                              <1> ; following order, thus allowing for return values to be placed in the 
   244                              <1> ; registers by accessing the caller register stack frame.
   245                              <1> ;------------------------------------------------------------------------;
   246                              <1> struc callerFrame
   247 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   248 00000008 ????????????????    <1>     .rbx    resq 1    
   249 00000010 ????????????????    <1>     .rcx    resq 1
   250 00000018 ????????????????    <1>     .rdx    resq 1
   251 00000020 ????????????????    <1>     .rsi    resq 1
   252 00000028 ????????????????    <1>     .rdi    resq 1
   253 00000030 ????????????????    <1>     .rbp    resq 1
   254 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   255 00000040 ????????????????    <1>     .r9     resq 1
   256                              <1> ;Pushed by Processor when invoked via Interrupt
   257 00000048 ????????????????    <1>     .rip    resq 1
   258 00000050 ????????????????    <1>     .cs     resq 1
   259 00000058 ????????????????    <1>     .flags  resq 1
   260                              <1> endstruc
   261                              <1> 
   262                              <1> %macro pushDOS 0
   263                              <1>     push r9
   264                              <1>     push r8
   265                              <1>     push rbp
   266                              <1>     push rdi
   267                              <1>     push rsi
   268                              <1>     push rdx
   269                              <1>     push rcx
   270                              <1>     push rbx
   271                              <1>     push rax
   272                              <1> %endmacro
   273                              <1> 
   274                              <1> %macro popDOS 0
   275                              <1>     pop rax
   276                              <1>     pop rbx
   277                              <1>     pop rcx
   278                              <1>     pop rdx
   279                              <1>     pop rsi
   280                              <1>     pop rdi
   281                              <1>     pop rbp
   282                              <1>     pop r8
   283                              <1>     pop r9
   284                              <1> %endmacro
   285                              <1> struc fcb
   286                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   287 00000000 ??                  <1>     .driveNum   resb 1
   288 00000001 ????????????????    <1>     .filename   resb 8
   289 00000009 ??????              <1>     .fileext    resb 3
   290 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   291                              <1> ;One block consists of 128 records, of size denoted in the below
   292 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   293 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   294 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   295 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   296 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   297 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   298 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   299 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   300 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   301                              <1>     ;If record size > 64, high byte is ignored.
   302                              <1>     ;Used for random read and write operations to find the right record
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc psp
   306 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   307 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   308 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   309 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   310 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   311 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   312 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   313 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   314 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   315 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   316 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   317 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   318 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   319                              <1> ;Extra handle arrays are grouped into a linked list
   320                              <1> ;The below are in the same place as in DOS
   321 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   322 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   323                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   324 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   325 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   326                              <1> endstruc
   327                              <1> 
   328                              <1> struc clkStruc
   329 00000000 ????                <1>     .dateWord   resw 1
   330 00000002 ??                  <1>     .minutes    resb 1
   331 00000003 ??                  <1>     .hours      resb 1
   332 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   333 00000005 ??                  <1>     .seconds    resb 1
   334                              <1> endstruc
     8                                  %include "./Source/Debug/debSym.inc"
     9                              <1> ;This file will include the debuging symbols
    10                              <1> 
    11                              <1> %define true 1
    12                              <1> %define false 0
    13                              <1> 
    14                              <1> ;Switch the following to false in production!
    15                              <1> %define DEBUG true
    16                              <1> 
    17                              <1> ;Use this space as the debug stack
    18                              <1> %define debStackTop 80000h
     9                                  Segment .text align=1   ;Init code
    10                                  %include "./Source/Sysinit/sysInit.asm"
    11                              <1> ; We arrive here with the following values in the registers.
    12                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    13                              <1> ; dx  = Int 33h boot device number
    14                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    15                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    16 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    17 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    17 0000000B 909090909090909090- <1>
    17 00000014 909090909090909090- <1>
    17 0000001D 909090909090909090- <1>
    17 00000026 909090909090909090- <1>
    17 0000002F 909090909090909090- <1>
    17 00000038 909090909090909090- <1>
    17 00000041 909090909090909090- <1>
    17 0000004A 909090909090909090- <1>
    17 00000053 909090909090909090- <1>
    17 0000005C 909090909090909090- <1>
    17 00000065 909090909090909090- <1>
    17 0000006E 909090909090909090- <1>
    17 00000077 909090909090909090- <1>
    17 00000080 909090909090909090- <1>
    17 00000089 909090909090909090- <1>
    17 00000092 909090909090909090- <1>
    17 0000009B 909090909090909090- <1>
    17 000000A4 909090909090909090- <1>
    17 000000AD 909090909090909090- <1>
    17 000000B6 909090909090909090- <1>
    17 000000BF 909090909090909090- <1>
    17 000000C8 909090909090909090- <1>
    17 000000D1 909090909090909090- <1>
    17 000000DA 909090909090909090- <1>
    17 000000E3 909090909090909090- <1>
    17 000000EC 909090909090909090- <1>
    17 000000F5 909090909090909090- <1>
    17 000000FE 9090                <1>
    18                              <1> ;First make space for the MCB
    19 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    20 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    21 00000106 0F32                <1>     rdmsr
    22 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    23 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    24 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    25 00000110 4881C710000000      <1>     add rdi, mcb_size   ;Make space for the MCB
    26 00000117 89F8                <1>     mov eax, edi
    27 00000119 4889FA              <1>     mov rdx, rdi
    28 0000011C 48C1EA20            <1>     shr rdx, 20h
    29 00000120 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    30 00000122 5A                  <1>     pop rdx
    31                              <1> ;------------------------------------------------;
    32                              <1> ;              Connect Debugger                  ;
    33                              <1> ;------------------------------------------------;
    34 00000123 B801C50000          <1>     mov eax, 0C501h ;Connect debugger
    35 00000128 CD35                <1>     int 35h
    36                              <1> ;------------------------------------------------;
    37                              <1> ;           Sanitise the data area               ;
    38                              <1> ;------------------------------------------------;
    39 0000012A B9[D4130000]        <1>     mov ecx, dSegLen
    40 0000012F 30C0                <1>     xor al, al
    41 00000131 57                  <1>     push rdi    ;Temp save rdi on the stack
    42 00000132 F3AA                <1>     rep stosb
    43 00000134 5F                  <1>     pop rdi
    44                              <1> 
    45                              <1> ;------------------------------------------------;
    46                              <1> ;          Start saving Basic DOS data           ;
    47                              <1> ;------------------------------------------------;
    48 00000135 64881425[08000000]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    49                              <1> ;Copy DOS to its final resting place
    50 0000013D 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    50 00000142 [00000000]          <1>
    51 00000146 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rdx 
    52 00000149 4881C7[D4130000]    <1>     add rdi, dSegLen ;Move destination past end of data area
    53 00000150 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    54 00000157 B900100000          <1>     mov ecx, 1000h
    55 0000015C F348A5              <1>     rep movsq
    56                              <1> 
    57 0000015F CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    58 00000161 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    59 00000165 664489C0            <1>     mov ax, r8w
    60 00000169 64882425[09000000]  <1>     mov byte fs:[numRemDrv], ah    ;Save number of physical int 33h removable drvs
    61 00000171 64880425[0A000000]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    62 00000179 64C60425[9A000000]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    62 00000181 05                  <1>
    63 00000182 64C60425[0B000000]- <1>     mov byte fs:[numLogDrv], 0     ;Number of logical drives
    63 0000018A 00                  <1>
    64                              <1>     ;If no detected Int 33h devices, halt 
    65 0000018B 49C1E810            <1>     shr r8, 2*8
    66 0000018F 4584C0              <1>     test r8b, r8b
    67 00000192 0F844F050000        <1>     jz errorInit
    68                              <1> ;------------------------------------------------;
    69                              <1> ;          Kernel inits and adjustments          ;
    70                              <1> ;------------------------------------------------;
    71                              <1> ;Adjust Int 41h address table
    72                              <1> adjInt41h:
    73 00000198 B96A000000          <1>     mov ecx, kernelDispatchTableL/8 ;Number of elements in table
    74 0000019D 48BB-               <1>     mov rbx, kernelDispatchTable ;Get EA of table
    74 0000019F [0910000000000000]  <1>
    75 000001A7 488D5C1D00          <1>     lea rbx, qword [rbp + rbx]    ;Point to the start of the relocated table 
    76                              <1> .ai41h:
    77 000001AC 48012B              <1>     add qword [rbx], rbp    ;Add base address value to entry in reloc table
    78 000001AF 4881C308000000      <1>     add rbx, 8              ;Each entry is size 8
    79 000001B6 FFC9                <1>     dec ecx
    80 000001B8 75F2                <1>     jnz .ai41h  ;Keep looping until all entries have been adjusted
    81                              <1> 
    82                              <1> ;Adjust Interrupt Entries Int 40h-49h
    83                              <1> adjInts:
    84 000001BA B340                <1>     mov bl, 40h
    85 000001BC B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
    86 000001C1 CD35                <1>     int 35h
    87 000001C3 B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
    88 000001C8 488D3D7E050000      <1>     lea rdi, intData
    89 000001CF 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
    90                              <1> .ai0:
    91 000001D1 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
    92 000001D6 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
    93 000001D9 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
    94                              <1> .ai1:
    95 000001DC CD35                <1>     int 35h
    96 000001DE 4881C708000000      <1>     add rdi, 8
    97 000001E5 FFC1                <1>     inc ecx
    98 000001E7 81F94A000000        <1>     cmp ecx, 4Ah
    99 000001ED 75E2                <1>     jne .ai0
   100                              <1> 
   101                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   102                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   103                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   104                              <1> 
   105                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   106 000001EF 488D15F1040000      <1>     lea rdx, errorInit ;Get segment start address
   107 000001F6 B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   108 000001FB CD41                <1>     int 41h
   109 000001FD 488D15E3040000      <1>     lea rdx, errorInit ;Get segment start address
   110 00000204 B844250000          <1>     mov eax, 2544h
   111 00000209 CD41                <1>     int 41h
   112                              <1> 
   113                              <1> ;------------------------------------------------;
   114                              <1> ;          Driver Adjustments and inits          ;
   115                              <1> ;------------------------------------------------;
   116                              <1> ;Modify the pointers in nData before putting them in the data area
   117 0000020B 48012D8B050000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   118 00000212 48012D8E050000      <1>     add qword [nData + drvHdr.strPtr], rbp
   119 00000219 48012D8F050000      <1>     add qword [nData + drvHdr.intPtr], rbp
   120                              <1> ;Copy the Null driver to its location in Sysvars
   121 00000220 B922000000          <1>     mov ecx, drvHdr_size
   122 00000225 488D3571050000      <1>     lea rsi, qword [nData]
   123 0000022C 488DBD[A6000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
   124 00000233 F3A4                <1>     rep movsb   
   125                              <1> 
   126                              <1> ;Adjust the addresses in the other driver headers 
   127 00000235 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   127 00000237 [EC15000000000000]  <1>
   128 0000023F B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   129 00000244 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   130                              <1> adjDrivers:
   131 00000248 E887040000          <1>     call adjustDrvHdr
   132 0000024D E2F9                <1>     loop adjDrivers
   133                              <1> 
   134                              <1> ;Open NUL
   135 0000024F 488D9D[0C000000]    <1>     lea rbx, qword [rbp + charReqHdr]
   136 00000256 C6030D              <1>     mov byte [rbx + openReqPkt.hdrlen], openReqPkt_size
   137 00000259 C6430300            <1>     mov byte [rbx + openReqPkt.status], 0
   138 0000025D FF95[B0000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.strPtr]
   139 00000263 FF95[B8000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.intPtr]
   140                              <1> ;Open CON
   141                              <1> conInit:    ;Rather than keeping this resident... do it here
   142                              <1> .ci0:
   143 00000269 B401                <1>     mov ah, 01      ;Get buffer status
   144 0000026B CD36                <1>     int 36h
   145 0000026D 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   146 0000026F 30E4                <1>     xor ah, ah
   147 00000271 CD36                <1>     int 36h ;Read key to flush from buffer
   148 00000273 EBF4                <1>     jmp short .ci0
   149                              <1> .ci1:
   150 00000275 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   151 0000027A CD30                <1>     int 30h
   152 0000027C B402                <1>     mov ah, 02h
   153 0000027E 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   154 00000280 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   155 00000282 CD30                <1>     int 30h
   156 00000284 B707                <1>     mov bh, 07h     ;Grey/Black attribs
   157 00000286 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   158 0000028B CD30                <1>     int 30h
   159                              <1> 
   160                              <1>     ;Save ptr to ConHdr in Sysvars
   161 0000028D 488D85[EC150000]    <1>     lea rax, qword [rbp + conHdr]
   162 00000294 6448890425-         <1>     mov qword fs:[conPtr], rax
   162 00000299 [80000000]          <1>
   163                              <1> 
   164                              <1>     ;Save ptr to ClkHdr in Sysvars
   165 0000029D 488D85[52160000]    <1>     lea rax, qword [rbp + clkHdr]
   166 000002A4 6448890425-         <1>     mov qword fs:[clockPtr], rax
   166 000002A9 [78000000]          <1>
   167                              <1> 
   168                              <1> ;------------------------------------------------;
   169                              <1> ;         Link DOS to temporary Buffer           ;
   170                              <1> ;------------------------------------------------;
   171                              <1> tempBufferInit:
   172 000002AD 488DBD[9A020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   173 000002B4 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   173 000002B9 [8A000000]          <1>
   174 000002BD 31C0                <1>     xor eax, eax
   175 000002BF 48FFC8              <1>     dec rax
   176 000002C2 48AB                <1>     stosq   ;.nextBufPTr, end of list
   177 000002C4 AA                  <1>     stosb   ;.driveNumber, Free entry
   178 000002C5 48FFC0              <1>     inc rax
   179 000002C8 AA                  <1>     stosb   ;.bufferFlags, No flags
   180                              <1> ;------------------------------------------------;
   181                              <1> ;         Init msd driver, create DPB            ;
   182                              <1> ;------------------------------------------------;
   183                              <1> storageInits:
   184                              <1> ;First save dpb pointer in sysvars
   185 000002C9 488D9D[3B010000]    <1>     lea rbx, qword [rbp + firstDPB]
   186 000002D0 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   186 000002D5 [68000000]          <1>
   187                              <1> ;Open Mass Storage
   188                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   189                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   190                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   191                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   192                              <1>     ;mov al, byte fs:[numLogDrv]
   193                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   194                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   195                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   196                              <1>     ;Check if it returned OK first!
   197                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   198                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   199                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   200                              <1>     ;mov byte fs:[numLogDrv], al
   201                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   202                              <1> 
   203                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   204 000002D9 E8E1040000          <1>     call diskInit
   205 000002DE 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   206 000002E1 648A0425[0B000000]  <1>     mov al, byte fs:[numLogDrv]
   207 000002E9 488D95[821F0000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   208 000002F0 30C9                <1>     xor cl, cl  ;Clear counter
   209 000002F2 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   209 000002F7 [68000000]          <1>
   210                              <1> .si0:   
   211 000002FB 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   212 000002FE B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   213 00000300 CD41                <1>     int 41h
   214                              <1> ;Add other data to DPB
   215 00000302 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   216 00000305 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   217 00000308 50                  <1>     push rax
   218 00000309 488D87[74160000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   219 00000310 4889451A            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   220 00000314 58                  <1>     pop rax
   221 00000315 FEC1                <1>     inc cl
   222 00000317 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   223 00000319 7416                <1>     je .si1
   224 0000031B 50                  <1>     push rax
   225 0000031C 488D4534            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   226 00000320 48894524            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   227 00000324 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   228 00000327 58                  <1>     pop rax
   229 00000328 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   230 0000032F EBCA                <1>     jmp short .si0
   231                              <1> .si1:
   232                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   233 00000331 48C74524FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   234 00000339 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   235                              <1> ;------------------------------------------------;
   236                              <1> ;          Find largest sector size              ;
   237                              <1> ;------------------------------------------------;
   238                              <1> sectorSizeSearch:
   239                              <1> ;Done by reading BPB's for each drive
   240 0000033C 6687DB              <1>     xchg bx, bx
   241 0000033F 488D9D[821F0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   242                              <1>     
   243                              <1>     ;Go thru each block individually
   244 00000346 31C0                <1>     xor eax, eax
   245 00000348 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   246                              <1> .findLargest:
   247 0000034B 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   248 0000034F 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   249 00000354 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   250 0000035B 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   251 0000035E 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   252 00000361 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   253 00000363 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   253 00000368 [88000000]          <1>
   254                              <1>     
   255                              <1> ;------------------------------------------------;
   256                              <1> ;                 Temp CDS inits                 ;
   257                              <1> ;------------------------------------------------;
   258                              <1> tempCDS:
   259                              <1> ;Build a temporary CDS for Drive A to use it for booting
   260 0000036C 488DBD[3F020000]    <1>     lea rdi, qword [rbp + initCDS]
   261 00000373 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   261 00000378 [92000000]          <1>
   262 0000037C B943000000          <1>     mov ecx, 67 ;Buffer length
   263 00000381 31C0                <1>     xor eax, eax
   264 00000383 4889FB              <1>     mov rbx, rdi    ;Save CDS pointer in rbx
   265 00000386 F3AA                <1>     rep stosb   ;Zero out the path string
   266 00000388 4889DF              <1>     mov rdi, rbx
   267 0000038B B041                <1>     mov al, "A"
   268 0000038D AA                  <1>     stosb
   269 0000038E B03A                <1>     mov al, ":"
   270 00000390 AA                  <1>     stosb
   271 00000391 B05C                <1>     mov al, "\"
   272 00000393 AA                  <1>     stosb
   273 00000394 4889DF              <1>     mov rdi, rbx
   274 00000397 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   275 0000039D 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   275 000003A2 [68000000]          <1>
   276 000003A6 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   277 000003AA 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   278                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   279                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   280                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   281 000003B0 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax    ;eax was zeroed before
   282                              <1> ;------------------------------------------------;
   283                              <1> ;     Set up general PSP areas and DOS vars      ;
   284                              <1> ;------------------------------------------------;
   285                              <1>     ;Additional DOS Vars init
   286 000003B3 31C0                <1>     xor eax, eax
   287 000003B5 64880425[F2000000]  <1>     mov byte fs:[currentDrv], al ;Current Drive = Drive A
   288 000003BD 64880425[F3000000]  <1>     mov byte fs:[breakFlag], al  ;Break off
   289 000003C5 64880425[F4000000]  <1>     mov byte fs:[verifyFlag], al ;Write only
   290 000003CD 64880425[FD000000]  <1>     mov byte fs:[singleDrv], al  ;Only used on single drive systems
   291 000003D5 64880425[C8000000]  <1>     mov byte fs:[critErrFlag], al   ;Not in critical error
   292 000003DD 64880425[C9000000]  <1>     mov byte fs:[inDOS], al      ;Not in DOS
   293 000003E5 64C60425[CA000000]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   293 000003ED FF                  <1>
   294 000003EE 6466890425-         <1>     mov word fs:[lastRetCode], ax   ;Last return code is 0, no error
   294 000003F3 [F0000000]          <1>
   295                              <1> 
   296                              <1>     ;SYSVARS PSP Init
   297 000003F7 488D1D02FCFFFF      <1>     lea rbx, qword [tempPSP]
   298 000003FE 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   298 00000403 [D8000000]          <1>
   299 00000407 53                  <1>     push rbx
   300 00000408 4881C380000000      <1>     add rbx, psp.dta
   301 0000040F 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   301 00000414 [D0000000]          <1>
   302 00000418 5B                  <1>     pop rbx
   303 00000419 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   304 0000041E C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   305 00000425 48895B02            <1>     mov qword [rbx + psp.startSeg], rbx ;Save start segment of app
   306 00000429 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   307 0000042D 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   308 00000431 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   309 00000435 48B800000001020000- <1>     mov rax, 0000000201000000h  ;Store default handles in JFT
   309 0000043E 00                  <1>
   310 0000043F 48AB                <1>     stosq   ;8 bytes
   311 00000441 31C0                <1>     xor eax, eax
   312 00000443 48AB                <1>     stosq   ;16 bytes
   313 00000445 AB                  <1>     stosd   ;20 bytes
   314 00000446 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   315 0000044E 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   316 00000452 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   317 00000456 4889DA              <1>     mov rdx, rbx
   318 00000459 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   319 0000045E CD41                <1>     int 41h
   320 00000460 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   321 00000464 B843350000          <1>     mov eax, 3543h
   322 00000469 CD41                <1>     int 41h
   323 0000046B 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   324 0000046F B844350000          <1>     mov eax, 3544h
   325 00000474 CD41                <1>     int 41h
   326 00000476 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   327                              <1> 
   328 0000047A B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   329 0000047F 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   330 00000483 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   331                              <1> ;------------------------------------------------;
   332                              <1> ;          Default File Handle Creation          ;
   333                              <1> ;------------------------------------------------;
   334                              <1> defaultFileHandles:
   335                              <1> ;Fill in the default file table entries
   336 00000485 488D9D[00000000]    <1>     lea rbx, qword [rbp + firstSftHeader]
   337 0000048C 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   338 00000493 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   339 00000499 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   339 0000049E [70000000]          <1>
   340                              <1> ;GOTO FIRST FILE 
   341 000004A2 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   342                              <1> ;Write CON
   343 000004A9 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   344 000004AE 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   345 000004B4 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   346 000004B8 C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   347                              <1>     ;No EOF when reading from the device
   348 000004BC 64488B0425-         <1>     mov rax, qword fs:[conPtr]  ;Get pointer to CON device
   348 000004C1 [80000000]          <1>
   349 000004C5 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   350                              <1>     ;Ignore disk related fields and Date/Time of open
   351 000004C9 488D7B26            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   352 000004CD 488D3598000000      <1>     lea rsi, qword [.dfhCon]
   353                              <1>     ;11 chars in 8.3 name
   354 000004D4 48A5                <1>     movsq   ;8 chars
   355 000004D6 66A5                <1>     movsw   ;10 chars
   356 000004D8 A4                  <1>     movsb   ;11 chars
   357 000004D9 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   357 000004DE [D8000000]          <1>
   358 000004E2 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   359                              <1> ;GOTO NEXT ENTRY
   360 000004E6 4881C33D000000      <1>     add rbx, sft_size   ;Goto next SFT
   361                              <1> ;Write AUX
   362 000004ED 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   363 000004F2 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   364 000004F8 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   365 000004FC C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   366                              <1>     ;No EOF when reading from the device
   367 00000500 488B85[0E160000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   368 00000507 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   369                              <1>     ;Ignore disk related fields and Date/Time of open
   370 0000050B 488D7B26            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   371 0000050F 488D3561000000      <1>     lea rsi, qword [.dfhAux]
   372                              <1>     ;11 chars in 8.3 name
   373 00000516 48A5                <1>     movsq   ;8 chars
   374 00000518 66A5                <1>     movsw   ;10 chars
   375 0000051A A4                  <1>     movsb   ;11 chars
   376 0000051B 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   376 00000520 [D8000000]          <1>
   377 00000524 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   378                              <1> ;GOTO NEXT ENTRY
   379 00000528 4881C33D000000      <1>     add rbx, sft_size   ;Goto next SFT
   380                              <1> ;Write PRN
   381 0000052F 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   382 00000534 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   383 0000053A C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   384 0000053E C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   385                              <1>     ;Want EOF when reading from to the device
   386 00000542 488B85[30160000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   387 00000549 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   388                              <1>     ;Ignore disk related fields and Date/Time of open
   389 0000054D 488D7B26            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   390 00000551 488D352A000000      <1>     lea rsi, qword [.dfhPrn]
   391                              <1>     ;11 chars in 8.3 name
   392 00000558 48A5                <1>     movsq   ;8 chars
   393 0000055A 66A5                <1>     movsw   ;10 chars
   394 0000055C A4                  <1>     movsb   ;11 chars
   395 0000055D 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   395 00000562 [D8000000]          <1>
   396 00000566 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   397 0000056A EB21                <1>     jmp short .dfhExit
   398 0000056C 434F4E202020202020- <1> .dfhCon db "CON        "
   398 00000575 2020                <1>
   399 00000577 415558202020202020- <1> .dfhAux db "AUX        "
   399 00000580 2020                <1>
   400 00000582 50524E202020202020- <1> .dfhPrn db "PRN        "
   400 0000058B 2020                <1>
   401                              <1> .dfhExit:
   402                              <1> ;------------------------------------------------;
   403                              <1> ;               Load CONFIG.SYS                  ;
   404                              <1> ;------------------------------------------------;
   405                              <1> ;------------------------------------------------;
   406                              <1> ;              Process CONFIG.SYS                ;
   407                              <1> ;------------------------------------------------;
   408                              <1> ;------------------------------------------------;
   409                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   410                              <1> ;------------------------------------------------;
   411                              <1> ;------------------------------------------------;
   412                              <1> ;   Setup Final Data Areas With Overrides from   ;
   413                              <1> ;                  CONFIG.SYS                    ;
   414                              <1> ;------------------------------------------------;
   415                              <1> ;------------------------------------------------;
   416                              <1> ;                   MCB inits                    ;
   417                              <1> ;------------------------------------------------;
   418                              <1> mcbInit:
   419                              <1> 
   420                              <1> .mcbExit:
   421                              <1> ;------------------------------------------------;
   422                              <1> ;           Load Command interpreter             ;
   423                              <1> ;------------------------------------------------;
   424                              <1>     %if DEBUG
   425                              <1> debugPopUpMsg:
   426                              <1>     debugEnterM
   426          ******************  <1>  warning: label alone on a line without a colon might be in error [-w+label-orphan]
   427 0000058D 488D9D[E4000000]    <1>     lea rbx, qword [debPrintNullString + rbp]
   428 00000594 488D2D04000000      <1>     lea rbp, .msg
   429 0000059B FFD3                <1>     call rbx
   430 0000059D EB50                <1>     jmp short .exit
   431 0000059F 5343502F42494F5320- <1> .msg:   db "SCP/BIOS Boot complete.",0Ah,0Dh
   431 000005A8 426F6F7420636F6D70- <1>
   431 000005B1 6C6574652E0A0D      <1>
   432 000005B8 5343502F444F53204B- <1>         db "SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   432 000005C1 65726E656C20446562- <1>
   432 000005CA 756767657220436F6E- <1>
   432 000005D3 6E6563746564206F6E- <1>
   432 000005DC 20434F4D313A323430- <1>
   432 000005E5 302C6E2C382C310A0D- <1>
   432 000005EE 00                  <1>
   433                              <1> .exit:
   434                              <1>     debugExitM
   434          ******************  <1>  warning: label alone on a line without a colon might be in error [-w+label-orphan]
   435                              <1>     %endif
   436                              <1> 
   437 000005EF 488D1502010000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   438 000005F6 B409                <1>     mov ah, 09h
   439 000005F8 CD41                <1>     int 41h
   440                              <1> l1:
   441 000005FA B401                <1>     mov ah, 01h  ;Write with echo
   442 000005FC CD41                <1>     int 41h
   443 000005FE 3C00                <1>     cmp al, 0
   444 00000600 7402                <1>     je l2
   445 00000602 EBF6                <1>     jmp short l1
   446                              <1> l2:
   447 00000604 B407                <1>     mov ah, 07h
   448 00000606 CD41                <1>     int 41h
   449 00000608 3C42                <1>     cmp al, 42h
   450 0000060A 75EE                <1>     jne l1
   451                              <1> l3:
   452 0000060C 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   452 00000611 [19010000]0000      <1>
   453 00000617 488D9D[0C000000]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   454 0000061E 488D85[19010000]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   455 00000625 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   456 00000628 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   457 0000062C 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   458 00000632 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   459 00000636 C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   460 0000063D FF95[5C160000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   461 00000643 FF95[64160000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr] 
   462                              <1> 
   463 00000649 B403                <1>     mov ah, 03h
   464 0000064B 30FF                <1>     xor bh, bh
   465 0000064D CD30                <1>     int 30h
   466 0000064F 30D2                <1>     xor dl, dl  ;0 column
   467 00000651 B402                <1>     mov ah, 02h
   468 00000653 CD30                <1>     int 30h
   469                              <1> 
   470 00000655 488D9D[19010000]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   471 0000065C 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   472 00000660 E832000000          <1>     call .clkHexToBCD
   473 00000665 B40E                <1>     mov ah, 0Eh
   474 00000667 B03A                <1>     mov al, ":"
   475 00000669 CD30                <1>     int 30h
   476 0000066B 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   477 0000066F E823000000          <1>     call .clkHexToBCD
   478 00000674 B40E                <1>     mov ah, 0Eh
   479 00000676 B03A                <1>     mov al, ":"
   480 00000678 CD30                <1>     int 30h
   481 0000067A 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   482 0000067E E814000000          <1>     call .clkHexToBCD
   483 00000683 B40E                <1>     mov ah, 0Eh
   484 00000685 B02E                <1>     mov al, "."
   485 00000687 CD30                <1>     int 30h
   486 00000689 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   487 0000068D E805000000          <1>     call .clkHexToBCD
   488 00000692 E963FFFFFF          <1>     jmp l1
   489                              <1> .clkHexToBCD:
   490                              <1> ;Converts a Hex byte into two BCD digits
   491                              <1> ;Takes input in each nybble of al
   492 00000697 53                  <1>     push rbx
   493 00000698 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   493 000006A1 00                  <1>
   494 000006A2 31D2                <1>     xor edx, edx
   495 000006A4 48F7F3              <1>     div rbx
   496 000006A7 80C230              <1>     add dl, '0'
   497 000006AA 80FA39              <1>     cmp dl, '9'
   498 000006AD 7603                <1>     jbe .chtb0
   499 000006AF 80C207              <1>     add dl, 'A'-'0'-10
   500                              <1> .chtb0:
   501 000006B2 88D1                <1>     mov cl, dl    ;Save remainder byte
   502 000006B4 31D2                <1>     xor edx, edx
   503 000006B6 48F7F3              <1>     div rbx
   504 000006B9 80C230              <1>     add dl, '0'
   505 000006BC 80FA39              <1>     cmp dl, '9'
   506 000006BF 7603                <1>     jbe .chtb1
   507 000006C1 80C207              <1>     add dl, 'A'-'0'-10
   508                              <1> .chtb1:
   509 000006C4 88D5                <1>     mov ch, dl    ;Save remainder byte
   510                              <1> 
   511 000006C6 88E8                <1>     mov al, ch    ;Get most sig digit into al
   512 000006C8 B40E                <1>     mov ah, 0Eh
   513 000006CA CD30                <1>     int 30h
   514 000006CC 88C8                <1>     mov al, cl    ;Get least sig digit into al
   515 000006CE B40E                <1>     mov ah, 0Eh
   516 000006D0 CD30                <1>     int 30h
   517 000006D2 5B                  <1>     pop rbx
   518 000006D3 C3                  <1>     ret
   519                              <1> ;--------------------------------
   520                              <1> ;       PROCS FOR SYSINIT       :
   521                              <1> ;--------------------------------
   522                              <1> adjustDrvHdr:
   523                              <1> ;Input: rsi = Effective address of driver in DOS segment
   524                              <1> ;       rbp = Ptr to the start of the DOS segment
   525                              <1> ;Output: rsi = EA of next header in DOS segment
   526 000006D4 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   527 000006D7 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   528 000006DB 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   529 000006DF 4881C622000000      <1>     add rsi, drvHdr_size
   530 000006E6 C3                  <1>     ret
   531                              <1> errorInit:
   532                              <1> ;If a critical error occurs during sysinit, fail through here
   533                              <1> ;Int 42h, 43h and 44h point here during sysinit
   534 000006E7 488D2D22000000      <1>     lea rbp, hltmsg
   535 000006EE B804130000          <1>     mov eax, 1304h
   536 000006F3 CD30                <1>     int 30h
   537                              <1>     ;cli ;Clear interrupts
   538                              <1>     ;mov al, -1
   539                              <1>     ;mov dx, 0A1h    ;PIC2 data
   540                              <1>     ;out dx, al      ;Mask all lines
   541                              <1>     ;mov dx, 21h     ;PIC1 data
   542                              <1>     ;out dx, al      ;Mask all lines
   543                              <1> .ei0:
   544 000006F5 F4                  <1>     hlt
   545 000006F6 EBFD                <1>     jmp short .ei0
   546                              <1> ;--------------------------------
   547                              <1> ;       DATA FOR SYSINIT        :
   548                              <1> ;--------------------------------
   549 000006F8 0A0D5374617274696E- <1> strtmsg db 0Ah,0Dh,"Starting SCP/DOS...",0Ah,0Dh,"$"
   549 00000701 67205343502F444F53- <1>
   549 0000070A 2E2E2E0A0D24        <1>
   550 00000710 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   550 00000719 7469616C6973696E67- <1>
   550 00000722 20534350444F532E53- <1>
   550 0000072B 59532E205379737465- <1>
   550 00000734 6D2068616C74696E67- <1>
   550 0000073D 2E2E2E00            <1>
   551 00000741 434F4E00            <1> conName db "CON",0
   552 00000745 41555800            <1> auxName db "AUX",0
   553 00000749 50524E00            <1> prnName db "PRN",0
   554                              <1> intData:
   555 0000074D [ED07000000000000]  <1>     dq terminateProcess ;Int 40h
   556 00000755 [A108000000000000]  <1>     dq functionDispatch ;Int 41h
   557 0000075D [E706000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   558 00000765 [EF07000000000000]  <1>     dq ctrlCHandler     ;Int 43h, ignore any CTRL+C during init
   559 0000076D [E706000000000000]  <1>     dq errorInit        ;Int 44h, If critical error in sysinit, halt system
   560 00000775 [FF07000000000000]  <1>     dq absDiskRead      ;Int 45h
   561 0000077D [F107000000000000]  <1>     dq absDiskWrite     ;Int 46h
   562 00000785 [9308000000000000]  <1>     dq terminateResident    ;Int 47h
   563 0000078D [9308000000000000]  <1>     dq inDosHandler     ;Int 48h
   564 00000795 [9508000000000000]  <1>     dq fastOutput       ;Int 49h
   565                              <1> nData:
   566 0000079D [EC15000000000000]  <1>     dq conHdr
   567 000007A5 0480                <1>     dw 08004h
   568 000007A7 [9417000000000000]  <1>     dq nulStrat
   569 000007AF [9A17000000000000]  <1>     dq nulIntr
   570 000007B7 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   571                              <1> 
   572                              <1> diskInit:
   573                              <1>     ;We create a function to deal with BPB parsing etc
   574                              <1>     ;Start with the first primary partition on each hard disk (until max)
   575                              <1>     ;   They dont have to be bootable
   576                              <1>     ;Then go back and look for other partitions partitions. 
   577                              <1>     ;   Add each other primary or logical ptn (until max)
   578                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   579                              <1>     ;Use r8 as device counter
   580 000007BF 488DBD[AA1F0000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
   581 000007C6 64803C25[0A000000]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
   581 000007CE 00                  <1>
   582 000007CF 0F84C6000000        <1>     jz .remInit ;No? Go to removables
   583 000007D5 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   583 000007DE 00                  <1>
   584 000007DF B280                <1>     mov dl, 80h ;Start with HDD 0
   585                              <1> .primary:
   586 000007E1 64803C25[0B000000]- <1>     cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
   586 000007E9 03                  <1>
   587 000007EA 0F84AB000000        <1>     je .remInit
   588 000007F0 31C9                <1>     xor ecx, ecx    ;Sector 0
   589 000007F2 E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   590 000007F7 0F8289000000        <1>     jc .primaryEpilog
   591                              <1>     ;Here, check MBR or BPB
   592 000007FD 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   593 00000806 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   594                              <1>     ;Now check if BPB or MBR
   595 00000808 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   596 0000080A 8A6302              <1>     mov ah, byte [rbx + 2]
   597 0000080D 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   598 00000811 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   599                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   600                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   601 00000813 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   602 0000081A B104                <1>     mov cl, 4
   603                              <1> .checkPrimary:
   604 0000081C 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   605 0000081F 3C01                <1>     cmp al, 01
   606 00000821 7421                <1>     je .primaryFound
   607 00000823 3C04                <1>     cmp al, 04
   608 00000825 741D                <1>     je .primaryFound
   609 00000827 3C06                <1>     cmp al, 06
   610 00000829 7419                <1>     je .primaryFound
   611 0000082B 3C0B                <1>     cmp al, 0Bh
   612 0000082D 7415                <1>     je .primaryFound
   613 0000082F 3C0C                <1>     cmp al, 0Ch
   614 00000831 7411                <1>     je .primaryFound
   615 00000833 3C0E                <1>     cmp al, 0Eh
   616 00000835 740D                <1>     je .primaryFound
   617 00000837 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   618 0000083E FEC9                <1>     dec cl
   619 00000840 7444                <1>     jz .primaryEpilog
   620 00000842 EBD8                <1>     jmp short .checkPrimary
   621                              <1> .primaryFound:
   622                              <1>     ;Copy the first sector of this partition into memory
   623 00000844 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   624 00000847 E8E9000000          <1>     call .initReadSector
   625 0000084C 7238                <1>     jc .primaryEpilog
   626                              <1>     ;Now verify this is a BPB
   627 0000084E 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   628 00000850 8A6302              <1>     mov ah, byte [rbx + 2]
   629 00000853 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   630 00000857 752D                <1>     jne .primaryEpilog   ;If not, skip
   631                              <1>     ;Now copy data to internal tables
   632 00000859 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   633 0000085C B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   634 00000861 57                  <1>     push rdi
   635 00000862 F348A5              <1>     rep movsq   ;Copy the BPB
   636 00000865 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
   637                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   638 00000866 4A8D9C05[781F0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
   639                              <1>     ;Add device count to rbx to point to correct entry
   640 0000086E 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   641 00000870 4A8D9CC5[821F0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
   642 00000878 488933              <1>     mov qword [rbx], rsi
   643 0000087B 49FFC0              <1>     inc r8  ;Goto next logical drive
   644 0000087E 64FE0425[0B000000]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have
   645                              <1> .primaryEpilog:
   646 00000886 FEC2                <1>     inc dl  ;Goto next BIOS drive
   647 00000888 88D6                <1>     mov dh, dl
   648 0000088A 80E67F              <1>     and dh, 7Fh ;Clear bit 7
   649 0000088D 643A3425[0A000000]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
   650 00000895 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
   651                              <1> .extended:
   652                              <1> ;We have gone through all the devices once
   653                              <1>     ;cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
   654                              <1>     ;je .remInit ;If yes, get removable devices
   655                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
   656                              <1>     ;xor ecx, ecx    ;Get MBR back
   657                              <1>     ;call .initReadSector
   658                              <1>     ;Now we eventually search MBR for a FAT extended partition
   659                              <1> .remInit:
   660                              <1> ;Now handle removable devices, at least 2 rem. devs.
   661 0000089B 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
   662 0000089E 30D2                <1>     xor dl, dl  ;Start with removable device 0
   663 000008A0 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
   664                              <1>     ;rdi points to the space for the subsequent bpb's
   665                              <1> .removables:
   666 000008A3 31C9                <1>     xor ecx, ecx    ;Read sector 0
   667 000008A5 E88B000000          <1>     call .initReadSector
   668 000008AA 7238                <1>     jc .removableEpilogue   ;Goto next device
   669                              <1>     ;Now verify this is a BPB
   670 000008AC 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   671 000008AE 8A6302              <1>     mov ah, byte [rbx + 2]
   672 000008B1 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   673 000008B5 752D                <1>     jne .removableEpilogue   ;If not, skip
   674                              <1>     ;Now copy data to internal tables
   675 000008B7 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   676 000008BA B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   677 000008BF 57                  <1>     push rdi
   678 000008C0 F348A5              <1>     rep movsq   ;Copy the BPB
   679 000008C3 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
   680                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   681 000008C4 4A8D9C05[781F0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
   682                              <1>     ;Add device count to rbx to point to correct entry
   683 000008CC 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   684 000008CE 4A8D9CC5[821F0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
   685 000008D6 488933              <1>     mov qword [rbx], rsi
   686 000008D9 49FFC0              <1>     inc r8  ;Goto next logical drive
   687 000008DC 64FE0425[0B000000]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have    
   688                              <1> .removableEpilogue:
   689 000008E4 FEC2                <1>     inc dl  ;Goto next BIOS device now
   690 000008E6 643A1425[09000000]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
   691 000008EE 7412                <1>     je .end
   692 000008F0 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
   693 000008F7 7403                <1>     je .re0
   694 000008F9 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
   695                              <1> .re0:
   696 000008FC 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
   697 00000900 72A1                <1>     jb .removables
   698                              <1> .end:
   699 00000902 64803C25[09000000]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
   699 0000090A 01                  <1>
   700 0000090B 7401                <1>     je .singleRemDev
   701 0000090D C3                  <1>     ret
   702                              <1> .singleRemDev:
   703                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
   704 0000090E 488D9D[781F0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
   705 00000915 8A95[781F0000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
   706 0000091B 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
   707 0000091E 488D9D[821F0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
   708 00000925 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
   709 00000928 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
   710 0000092C 64FE0425[0B000000]  <1>     inc byte fs:[numLogDrv] ;Gotta register the phantom drive!
   711 00000934 C3                  <1>     ret
   712                              <1> .initReadSector:
   713                              <1> ;Called with sector number in rcx and BIOS device number in dl
   714 00000935 B482                <1>     mov ah, 82h ;Read
   715 00000937 B001                <1>     mov al, 1   ;One sector
   716 00000939 488D9D[BA020000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
   717 00000940 CD33                <1>     int 33h
   718 00000942 C3                  <1>     ret
    11                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    12                                  %include "./Source/BSS/dosSeg.asm"
    13                              <1> ;This file contains the main DOS data segment
    14                              <1> 
    15 00000000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    16 00000008 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    17 00000009 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    18 0000000A ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    19 0000000B ??                  <1>     numLogDrv   resb 1    ;Number of logical drives in system x
    20 0000000C <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    21 00000036 <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    22                              <1>     ;The device driver header with space for the largest possible packet
    23 00000060 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    24                              <1> sysVarsPtr:
    25 00000068 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    26 00000070 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    27 00000078 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    28                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    29 00000080 ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    30                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    31 00000088 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    32 0000008A ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    33 00000092 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    34 0000009A ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    35 0000009B ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    36 000000A3 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    37 000000A5 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    38 000000A6 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    39                              <1> 
    40                              <1> ;Start of Swappable Data Area, this bit can remain static
    41 000000C8 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    42 000000C9 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    43 000000CA ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    44 000000CB ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    45 000000CC ????                <1>     errorExt    resw 1  ;Extended Error Code
    46 000000CE ??                  <1>     errorAction resb 1  ;Suggested action for error  
    47 000000CF ??                  <1>     errorClass  resb 1  ;Error Class
    48                              <1> 
    49 000000D0 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    50 000000D8 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
    51 000000E0 ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error (could make this di)
    52 000000E8 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    53 000000F0 ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch x
    54 000000F2 ??                  <1>     currentDrv  resb 1  ;Default drive x
    55 000000F3 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
    56 000000F4 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    57                              <1> ;SDA, needs to be replaced between processes
    58 000000F5 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    59                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    60 000000FD ??                  <1>     singleDrv   resb 1  ;Set if last drive accessed was drive B x
    61                              <1> ;This is done to allow for DOS to give the user a change to swap devices
    62                              <1> 
    63 000000FE ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    64 000000FF ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    65 00000100 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    66 00000101 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    67 00000109 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    68 00000111 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    69                              <1> ;Time stuff
    70 00000119 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    71 0000011F ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    72 00000120 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    73 00000121 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    74 00000122 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    75 00000124 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    76                              <1> ;String Stuff
    77 00000125 <res FFh>           <1>     asciiBuffer resb 255    ;Have a 255 char buffer for the ascii terminal
    78                              <1> ;Stacks
    79 00000224 <res 528h>          <1>     critStack   resq 165
    80 0000074C ????????????????    <1>     critStakTop resq 1
    81 00000754 <res 638h>          <1>     IOStack     resq 199
    82 00000D8C ????????????????    <1>     IOStakTop   resq 1
    83 00000D94 <res 638h>          <1>     DiskStack   resq 199
    84 000013CC ????????????????    <1>     DiskStakTop resq 1
    85                              <1>     dSegLen     equ     $
    13                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    14                                  %include "./Source/Data/staticData.asm"
    15                              <1> 
    16                              <1> ;-----------------------------------:
    17                              <1> ;           Static Data             :
    18                              <1> ;-----------------------------------:
    19 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    20 00000001 01                  <1> dosMinor    db 01h      ;.01
    21 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    21 0000000B 535953              <1>
    22 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    22 00000017 535953              <1>
    23 0000001A 2F                  <1> switchchar  db "/" ;Editable by the Int 41h/ah=37h
    15                                  %include "./Source/Debug/debug.asm"
    16                              <1> ;This file contains debugging macros, procs and strings
    17                              <1> ; that we can use to output to COM1 bypassing the operating system.
    18                              <1> ;A serial terminal must be connected for this to work.
    19                              <1> 
    20                              <1> ;Variables and equates
    21                              <1> 
    22 0000001B 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    23                              <1> debDigitStringLen equ 20
    24 00000023 000000000000000000- <1> debDigitString db debDigitStringLen dup(0)
    24 0000002C 000000000000000000- <1>
    24 00000035 0000                <1>
    25                              <1> 
    26                              <1> ;Common procedures
    27                              <1> 
    28                              <1> debPrintHexByte:
    29                              <1> ;Print the hex byte in al as a hex value
    30 00000037 52                  <1>     push rdx
    31 00000038 53                  <1>     push rbx
    32 00000039 50                  <1>     push rax
    33                              <1> 
    34 0000003A 88C2                <1>     mov dl, al           ;save byte in dl
    35 0000003C 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    36 00000040 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    37 00000045 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    38 00000049 E80C000000          <1>     call .wrchar
    39 0000004E 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    40 00000051 E804000000          <1>     call .wrchar
    41                              <1> 
    42 00000056 58                  <1>     pop rax
    43 00000057 5B                  <1>     pop rbx
    44 00000058 5A                  <1>     pop rdx
    45 00000059 C3                  <1>     ret
    46                              <1> .wrchar:
    47 0000005A 488D1D06000000      <1>     lea rbx, .wrascii
    48 00000061 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    49 00000062 B401                <1>     mov ah, 01h
    50 00000064 CD30                <1>     int 30h  ;print char
    51 00000066 C3                  <1>     ret
    52 00000067 303132333435363738- <1> .wrascii:    db    '0123456789ABCDEF'
    52 00000070 39414243444546      <1>
    53                              <1> 
    54                              <1> debPrintHexQword:
    55                              <1> ;Print the hexadecimal qword in rax as a hex value
    56 00000077 50                  <1>     push rax
    57 00000078 51                  <1>     push rcx
    58 00000079 B108                <1>     mov cl, 8
    59                              <1> .printChar:
    60 0000007B E8B7FFFFFF          <1>     call debPrintHexByte
    61 00000080 48C1E808            <1>     shr rax, 8
    62 00000084 FEC9                <1>     dec cl
    63 00000086 75F3                <1>     jnz .printChar
    64 00000088 59                  <1>     pop rcx
    65 00000089 58                  <1>     pop rax
    66 0000008A C3                  <1>     ret
    67                              <1> debPrintDecQword:
    68                              <1> ;Print the hexadecimal qword in rax in decimal
    69 0000008B 50                  <1>     push rax
    70 0000008C 53                  <1>     push rbx
    71 0000008D 488D3D8FFFFFFF      <1>     lea rdi, debDigitString   ;Use the default line as a buffer
    72                              <1>     ;Sanitise the digit buffer
    73 00000094 57                  <1>     push rdi
    74 00000095 51                  <1>     push rcx
    75 00000096 50                  <1>     push rax
    76 00000097 31C0                <1>     xor eax, eax
    77 00000099 B902000000          <1>     mov ecx, debDigitStringLen/8
    78 0000009E F348AB              <1>     rep stosq
    79 000000A1 58                  <1>     pop rax
    80 000000A2 59                  <1>     pop rcx
    81 000000A3 5F                  <1>     pop rdi
    82                              <1> 
    83 000000A4 4881C713000000      <1>     add rdi, debDigitStringLen - 1 ;Go to the end of the buffer
    84 000000AB FD                  <1>     std ;Reverse string ops
    85 000000AC 50                  <1>     push rax
    86 000000AD 30C0                <1>     xor al, al  ;Place delimiter
    87 000000AF AA                  <1>     stosb
    88 000000B0 58                  <1>     pop rax
    89 000000B1 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
    89 000000BA 00                  <1>
    90                              <1> .pdw0:
    91 000000BB 31D2                <1>     xor edx, edx
    92 000000BD 48F7F3              <1>     div rbx
    93 000000C0 80C230              <1>     add dl, '0'
    94 000000C3 80FA39              <1>     cmp dl, '9'
    95 000000C6 7603                <1>     jbe .pdw1
    96 000000C8 80C207              <1>     add dl, 'A'-'0'-10
    97                              <1> .pdw1:
    98 000000CB 50                  <1>     push rax
    99 000000CC 88D0                <1>     mov al, dl    ;Save remainder byte
   100 000000CE AA                  <1>     stosb   ;Store the byte and add one to rdi
   101 000000CF 58                  <1>     pop rax
   102 000000D0 4885C0              <1>     test rax, rax
   103 000000D3 75E6                <1>     jnz .pdw0
   104 000000D5 FC                  <1>     cld ;Return string ops to normal
   105 000000D6 48FFC7              <1>     inc rdi ;Skip the extra 0 that was inserted
   106 000000D9 4889FD              <1>     mov rbp, rdi    ;Point rbp to the head of the string
   107 000000DC E803000000          <1>     call debPrintNullString
   108 000000E1 5B                  <1>     pop rbx
   109 000000E2 58                  <1>     pop rax
   110 000000E3 C3                  <1>     ret
   111                              <1> 
   112                              <1> debPrintNullString:
   113                              <1> ;Print a null terminated string pointed to by rbp
   114 000000E4 56                  <1>     push rsi
   115 000000E5 50                  <1>     push rax
   116 000000E6 52                  <1>     push rdx
   117 000000E7 31D2                <1>     xor edx, edx    ;Select COM1
   118 000000E9 4889EE              <1>     mov rsi, rbp
   119                              <1> .getChar:
   120 000000EC AC                  <1>     lodsb
   121 000000ED 84C0                <1>     test al, al
   122 000000EF 7406                <1>     jz .exit
   123 000000F1 B401                <1>     mov ah, 01h
   124 000000F3 CD34                <1>     int 34h
   125 000000F5 EBF5                <1>     jmp short .getChar
   126                              <1> .exit:
   127 000000F7 5A                  <1>     pop rdx
   128 000000F8 58                  <1>     pop rax
   129 000000F9 5E                  <1>     pop rsi
   130 000000FA C3                  <1>     ret
   131                              <1> ;----------------:
   132                              <1> ;!!!! MACROS !!!!:
   133                              <1> ;----------------:
   134                              <1> ;Insert macro when entering a debug block
   135                              <1> %macro debugEnterM 0
   136                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   137                              <1>     mov rsp, debStackTop
   138                              <1> ;Push all registers except rsp on stack
   139                              <1>     push rax
   140                              <1>     push rbx
   141                              <1>     push rcx
   142                              <1>     push rdx
   143                              <1>     push rsi
   144                              <1>     push rdi
   145                              <1>     push rbp
   146                              <1>     push r8
   147                              <1>     push r9
   148                              <1>     push r10
   149                              <1>     push r11
   150                              <1>     push r12
   151                              <1>     push r13
   152                              <1>     push r14
   153                              <1>     push r15
   154                              <1>     pushfq
   155                              <1> %endmacro
   156                              <1> ;Insert macro when exiting a debug block
   157                              <1> %macro debugExitM 0
   158                              <1>     popfq
   159                              <1>     pop r15
   160                              <1>     pop r14
   161                              <1>     pop r13
   162                              <1>     pop r12
   163                              <1>     pop r11
   164                              <1>     pop r10
   165                              <1>     pop r9
   166                              <1>     pop r8
   167                              <1>     pop rbp
   168                              <1>     pop rdi
   169                              <1>     pop rsi
   170                              <1>     pop rdx
   171                              <1>     pop rcx
   172                              <1>     pop rbx
   173                              <1>     pop rax
   174                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   175                              <1> %endmacro
    16                                  %include "./Source/Kernel/bufferFunctions.asm"
    17                              <1> ;This file contains miscellaneous disk buffer related functions that
    18                              <1> ; dont fit anywhere else
    19                              <1> 
    20                              <1> readBuffer: ;EXTERNAL LINKAGE
    21                              <1> ;
    22                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
    23                              <1> ;TO CALL!
    24                              <1> ;
    25                              <1> ;This function will return a pointer to the desired data sector OR 
    26                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
    27                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
    28                              <1> ;Entry: rax = Sector to read
    29                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data) 
    30                              <1> ;       rsi = DPB of transacting drive
    31                              <1> ;Exit:  CF = NC : All ok!
    32                              <1> ;       rbx = Pointer to buffer header with valid data in buffer.
    33                              <1> ;       All other registers as before
    34                              <1> ;       CF = CY: Something went wrong, return error code or INT 44h
    35                              <1> ;       ch = 0 -> Data Not Flushed To Disk
    36                              <1> ;       ch = 1 -> Data Not Read From Disk
    37                              <1> ;       rbx = Pointer to buffer containing sector without valid data in buffer ;            (either unflushed or unread)
    38 000000FB 52                  <1>     push rdx
    39 000000FC 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
    40 000000FE E848010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
    41 00000103 4881FBFFFFFFFF      <1>     cmp rbx, -1
    42 0000010A 7403                <1>     je .rbReadNewSector
    43                              <1> .rbExit:
    44 0000010C F8                  <1>     clc
    45                              <1> .rbExitNoFlag:
    46 0000010D 5A                  <1>     pop rdx
    47 0000010E C3                  <1>     ret
    48                              <1> .rbReadNewSector:
    49 0000010F E8C6000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rbx
    50 00000114 4889DD              <1>     mov rbp, rbx
    51 00000117 30ED                <1>     xor ch, ch
    52 00000119 E869000000          <1>     call flushBuffer
    53 0000011E 72ED                <1>     jc .rbExitNoFlag    ;Exit in error
    54                              <1> ;rbp points to bufferHdr that has been appropriately linked to the head of chain
    55 00000120 51                  <1>     push rcx
    56 00000121 885508              <1>     mov byte [rbp + bufferHdr.driveNumber], dl
    57 00000124 884D09              <1>     mov byte [rbp + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
    58 00000127 4889450A            <1>     mov qword [rbp + bufferHdr.bufferLBA], rax
    59 0000012B 80F902              <1>     cmp cl, fatBuffer
    60 0000012E B201                <1>     mov dl, 1   ;Default values if not fat buffer
    61 00000130 B900000000          <1>     mov ecx, 0  ;Ditto!
    62 00000135 7506                <1>     jne .rbNonFATbuffer
    63 00000137 8A5607              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
    64 0000013A 8B4E12              <1>     mov ecx, dword [rsi + dpb.dFATlength]
    65                              <1> .rbNonFATbuffer:
    66 0000013D 885512              <1>     mov byte [rbp + bufferHdr.bufFATcopy], dl
    67 00000140 894D13              <1>     mov dword [rbp + bufferHdr.bufFATsize], ecx
    68 00000143 48897517            <1>     mov qword [rbp + bufferHdr.driveDPBPtr], rsi
    69 00000147 C6451F00            <1>     mov byte [rbp + bufferHdr.reserved], 0
    70 0000014B 59                  <1>     pop rcx
    71 0000014C FEC5                <1>     inc ch  ;If an error occurs, have the signature in ch
    72 0000014E E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
    73 00000153 EBB8                <1>     jmp short .rbExitNoFlag
    74                              <1> 
    75                              <1> readSectorBuffer:
    76                              <1> ;Reads a sector into a built sector buffer
    77                              <1> ;Entry: rbp = Pointer to buffer header
    78                              <1> ;Exit:  CF=NC : Success
    79                              <1> ;       CF=CY : Fail, terminate the request
    80                              <1> ;       rbx pointing to buffer header
    81                              <1> ;First make request to device driver
    82 00000155 50                  <1>     push rax
    83 00000156 53                  <1>     push rbx
    84 00000157 51                  <1>     push rcx
    85 00000158 52                  <1>     push rdx
    86 00000159 56                  <1>     push rsi
    87                              <1> .rsRequest0:
    88 0000015A BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
    89                              <1> .rsRequest1:
    90 0000015F 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
    91 00000162 B901000000          <1>     mov ecx, 1  ;One sector to copy
    92 00000167 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
    93 0000016B 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
    94 0000016F E88B060000          <1>     call absDiskRead    ;Call INT 45h
    95 00000174 7207                <1>     jc .rsFail
    96                              <1> .rsExit:
    97 00000176 F8                  <1>     clc
    98                              <1> .rsExitBad:
    99 00000177 5E                  <1>     pop rsi
   100 00000178 5A                  <1>     pop rdx
   101 00000179 59                  <1>     pop rcx
   102 0000017A 5B                  <1>     pop rbx
   103 0000017B 58                  <1>     pop rax
   104 0000017C C3                  <1>     ret
   105                              <1> .rsFail:
   106                              <1> ;Enter here only if the request failed
   107 0000017D FFCE                <1>     dec esi
   108 0000017F 75DE                <1>     jnz .rsRequest1 ;Try the request again!
   109                              <1> ;Request failed thrice, critical error call
   110 00000181 F9                  <1>     stc
   111 00000182 E9F0FFFFFF          <1>     jmp .rsExitBad  ;Abort
   112                              <1> 
   113                              <1> flushBuffer:
   114                              <1> ;Flushes the data in a sector buffer to disk!
   115                              <1> ;Entry: rbp = Pointer to buffer header for this buffer
   116                              <1> ;Exit:  CF=NC : Success
   117                              <1> ;       CF=CY : Fail, terminate the request
   118                              <1> ;First make request to device driver
   119 00000187 50                  <1>     push rax
   120 00000188 53                  <1>     push rbx
   121 00000189 51                  <1>     push rcx
   122 0000018A 52                  <1>     push rdx
   123 0000018B 56                  <1>     push rsi
   124 0000018C F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   125 00000190 7433                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   126                              <1> .fbRequest0:
   127 00000192 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   128                              <1> .fbRequest1:
   129 00000197 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   130 0000019A B901000000          <1>     mov ecx, 1  ;One sector to copy
   131 0000019F 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
   132 000001A3 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
   133 000001A7 E845060000          <1>     call absDiskWrite    ;Call INT 46h
   134 000001AC 7222                <1>     jc .fbFail
   135                              <1> ;Now check if the buffer was a FAT, to write additional copies
   136 000001AE F6450902            <1>     test byte [rbp + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   137 000001B2 7411                <1>     jz .fbFreeExit  ;If not, exit
   138 000001B4 FE4D12              <1>     dec byte [rbp + bufferHdr.bufFATcopy]
   139 000001B7 740C                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   140 000001B9 8B4513              <1>     mov eax, dword [rbp + bufferHdr.bufFATsize]
   141 000001BC 4801450A            <1>     add qword [rbp + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   142 000001C0 E9CDFFFFFF          <1>     jmp .fbRequest0 ;Make another request
   143                              <1> .fbFreeExit:
   144                              <1> ;Free the buffer if it was flushed successfully
   145 000001C5 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1
   146 000001C9 F8                  <1>     clc
   147                              <1> .fbExitBad:
   148 000001CA 5E                  <1>     pop rsi
   149 000001CB 5A                  <1>     pop rdx
   150 000001CC 59                  <1>     pop rcx
   151 000001CD 5B                  <1>     pop rbx
   152 000001CE 58                  <1>     pop rax
   153 000001CF C3                  <1>     ret
   154                              <1> .fbFail:
   155                              <1> ;Enter here only if the request failed
   156 000001D0 FFCE                <1>     dec esi
   157 000001D2 75C3                <1>     jnz .fbRequest1 ;Try the request again!
   158                              <1> ;Request failed thrice, critical error call
   159 000001D4 F9                  <1>     stc
   160 000001D5 E9F0FFFFFF          <1>     jmp .fbExitBad  ;Abort
   161                              <1>     
   162                              <1> findLRUBuffer: 
   163                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   164                              <1> ; in rbx
   165                              <1> ;Input: Nothing
   166                              <1> ;Output: rbx = Pointer to the buffer hdr to use
   167 000001DA 52                  <1>     push rdx
   168 000001DB 488B1D(8A000000)    <1>     mov rbx, qword [bufHeadPtr]
   169 000001E2 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   170 000001E6 7436                <1>     je .flbExit 
   171 000001E8 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   172 000001EF 742D                <1>     je .flbExit
   173                              <1> .flbWalk:
   174 000001F1 4889DA              <1>     mov rdx, rbx    ;Save a ptr to the previous buffer header
   175 000001F4 488B1A              <1>     mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   176 000001F7 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1
   177 000001FB 7423                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   178 000001FD 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   179 00000204 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   180 00000206 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   181                              <1> .flbHeadLink:
   182 0000020D 488B15(8A000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   183 00000214 48891D(8A000000)    <1>     mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
   184 0000021B 488913              <1>     mov qword [rbx + bufferHdr.nextBufPtr], rdx
   185                              <1> .flbExit:
   186 0000021E 5A                  <1>     pop rdx
   187 0000021F C3                  <1>     ret
   188                              <1> .flbFreeLink:
   189 00000220 51                  <1>     push rcx
   190 00000221 488B0B              <1>     mov rcx, qword [rbx + bufferHdr.nextBufPtr]
   191 00000224 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rbx
   192 00000227 59                  <1>     pop rcx
   193 00000228 EBE3                <1>     jmp short .flbHeadLink
   194                              <1> 
   195                              <1> findDirtyBufferForDrive:    ;EXTERNAL LINKAGE
   196                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   197                              <1> ;Input: dl = Drive number
   198                              <1> ;Output: rbx = Pointer to dirty buffer for drive letter if exists or -1 if not
   199 0000022A 488B1D(8A000000)    <1>     mov rbx, qword [bufHeadPtr]
   200                              <1> .fdbfdCheckBuffer:
   201 00000231 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   202 00000234 7507                <1>     jne .fdbfdGotoNextBuffer
   203 00000236 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   204 0000023A 7401                <1>     jz .fdbfdGotoNextBuffer ;Bit not set, goto next buffer
   205                              <1> .fdbfdExit:
   206 0000023C C3                  <1>     ret
   207                              <1> .fdbfdGotoNextBuffer:
   208 0000023D 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   209 00000240 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   210 00000247 74F3                <1>     je .fdbfdExit
   211 00000249 EBE6                <1>     jmp short .fdbfdCheckBuffer
   212                              <1> 
   213                              <1> findSectorInBuffer:     ;EXTERNAL LINKAGE
   214                              <1> ;Finds the Buffer for a sector
   215                              <1> ;If the sector is not in a buffer, returns with a -1
   216                              <1> ;Input: rax = Sector number
   217                              <1> ;        dl = Drive number
   218                              <1> ;Output: rbx = Buffer hdr pointer or -1
   219 0000024B 488B1D(8A000000)    <1>     mov rbx, qword [bufHeadPtr]
   220                              <1> .fsiCheckBuffer:
   221 00000252 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   222 00000255 7507                <1>     jne .fsiGotoNextBuffer
   223 00000257 4839430A            <1>     cmp qword [rbx + bufferHdr.bufferLBA], rax
   224 0000025B 7501                <1>     jne .fsiGotoNextBuffer
   225                              <1> .fsiExit:
   226 0000025D C3                  <1>     ret
   227                              <1> .fsiGotoNextBuffer:
   228 0000025E 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   229 00000261 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   230 00000268 74F3                <1>     je .fsiExit
   231 0000026A EBE6                <1>     jmp short .fsiCheckBuffer
    17                                  %include "./Source/Kernel/fat.asm"
    18                              <1> ;-----------------------------------:
    19                              <1> ;       File System routines        :
    20                              <1> ;-----------------------------------:
    21                              <1> name2Clust:
    22                              <1> ;Converts a file name to a first cluster number
    23                              <1> ;Entry : rbx = Points to ASCIIZ string to parse for a Cluster number
    24                              <1> ;Exit : rax = Cluster number or -1 if file not found
    25                              <1> ;Three cases:
    26                              <1> ;1) Start with a letter and a : => Full path and Drive specified
    27                              <1> ;2) Start with \ or / => Current Drive and relative path from root
    28                              <1> ;3) Else => File name in Current Dir or a subdir from current dir
    29 0000026C 56                  <1>     push rsi
    30 0000026D 57                  <1>     push rdi
    31 0000026E 51                  <1>     push rcx
    32 0000026F 52                  <1>     push rdx
    33 00000270 4889DF              <1>     mov rdi, rbx    ;Save string ptr in rdi
    34 00000273 807F013A            <1>     cmp byte [rdi + 1], ":" ;Check it is a colon for full path
    35 00000277 7427                <1>     je .fullPath
    36 00000279 803F5C              <1>     cmp byte [rdi], "\"
    37 0000027C 7422                <1>     je .relPath
    38 0000027E 803F2F              <1>     cmp byte [rdi], "/"
    39 00000281 741D                <1>     je .relPath ;Both CPM and UNIX are considered acceptible path separators
    40                              <1>     ;Else search the current dir for an entry
    41 00000283 480FB605(F2000000)  <1>     movzx rax, byte [currentDrv]   ;Get current drive
    42 0000028B E83E050000          <1>     call getCDS
    43 00000290 8B434D              <1>     mov eax, dword [rbx + cds.dStartCluster]    ;Get start cluster
    44 00000293 488B7345            <1>     mov rsi, qword [rbx + cds.qDPBPtr]  ;Get dpb ptr in rsi
    45 00000297 85C0                <1>     test eax, eax
    46 00000299 7505                <1>     jnz .localFileNoRoot
    47                              <1>     ;Here, we deal with Root Directories
    48 0000029B E872000000          <1>     call getFATtype ;rsi points to dpb
    49                              <1>     ;if ecx = 2, then FAT 32 and must treat differently
    50                              <1> 
    51                              <1> .localFileNoRoot:
    52                              <1> .relPath:
    53                              <1> .fullPath:
    54                              <1> .exit:
    55 000002A0 5A                  <1>     pop rdx
    56 000002A1 59                  <1>     pop rcx
    57 000002A2 5F                  <1>     pop rdi
    58 000002A3 5E                  <1>     pop rsi
    59 000002A4 C3                  <1>     ret
    60                              <1> 
    61                              <1> searchDirectorySectorForEntry:
    62                              <1> ;Proc that searches the sector for the string 
    63                              <1> ; UP UNTIL the NULL char or the path separator
    64                              <1> ;If a . is found in file name, skip it
    65                              <1> ;If a sector entry is found to start with 0, return fail
    66                              <1> ;Entry: rdx = Path Section ptr (point to first A/N char)
    67                              <1> ;       rbx = Sector buffer pointer
    68                              <1> ;       rsi = DPB pointer
    69                              <1> ;Exit: CF=NC => Found, CF=CY => Not found
    70                              <1> ;       If CF=CY read char pointed to by rbx.
    71                              <1> ;       If this char is 0, then end of directory reached!
    72 000002A5 50                  <1>     push rax
    73 000002A6 51                  <1>     push rcx
    74                              <1>     ;cl has number of entries per sector
    75 000002A7 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
    76 000002AA 80E905              <1>     sub cl, 5   ;5 is the number of bytes per dir entry shift
    77 000002AD B801000000          <1>     mov eax, 1
    78 000002B2 D3E0                <1>     shl eax, cl ;eax has number of directory entries in sector
    79                              <1>     ;Now search each entry for name
    80                              <1>     ;Use ecx as counter for each entry
    81 000002B4 89C1                <1>     mov ecx, eax
    82                              <1> .searchDir:
    83 000002B6 803B00              <1>     cmp byte [rbx], 0 ;Check if dir empty before proceeding
    84 000002B9 744E                <1>     jz .exitNotOK
    85                              <1>     ;Do string compare here, search for / or \ or 0 to exit
    86 000002BB 52                  <1>     push rdx    ;Push the name pointer 
    87 000002BC 53                  <1>     push rbx    ;Push sector pointer
    88                              <1> .searchLoop:
    89 000002BD 8A02                <1>     mov al, byte [rdx] ;Get char in ASCIIZ buffer
    90 000002BF 3C2E                <1>     cmp al, "." ;Verify if name separator or directory entry
    91 000002C1 742C                <1>     je .dotCase
    92 000002C3 3C05                <1>     cmp al, 05h ;Special Case
    93 000002C5 7424                <1>     je .specialCase
    94 000002C7 3C2F                <1>     cmp al, "/" ;Name Found
    95 000002C9 7442                <1>     je .nameFound
    96 000002CB 3C5C                <1>     cmp al, "\" ;Name Found
    97 000002CD 743E                <1>     je .nameFound
    98 000002CF 3C00                <1>     cmp al, 0   ;End of ASCIIZ string!
    99 000002D1 743A                <1>     je .nameFound
   100                              <1> .specRet:
   101 000002D3 3A03                <1>     cmp al, byte [rbx]  ;Compare to char in sector buffer
   102 000002D5 7520                <1>     jne .nameNotFound
   103 000002D7 48FFC3              <1>     inc rbx
   104                              <1> .skipChar:
   105 000002DA 48FFC2              <1>     inc rdx ;Go to Filename extension
   106 000002DD 5B                  <1>     pop rbx ;Get start of directory entry into rbx
   107 000002DE 53                  <1>     push rbx
   108 000002DF 4881C308000000      <1>     add rbx, 8  ;Go to the extension portion of the Filename
   109 000002E6 E9D2FFFFFF          <1>     jmp .searchLoop
   110                              <1> .specialCase:
   111 000002EB B0E5                <1>     mov al, 0E5h
   112 000002ED EBE4                <1>     jmp short .specRet
   113                              <1> .dotCase:
   114                              <1> ;Check if next char is geq than 'A'. If yes, path separator
   115 000002EF 807A0141            <1>     cmp byte [rdx + 1], 'A'
   116 000002F3 7CDE                <1>     jnge .specRet   ;Not Path Separator
   117 000002F5 EBE3                <1>     jmp short .skipChar
   118                              <1> .nameNotFound:
   119 000002F7 5B                  <1>     pop rbx
   120 000002F8 5A                  <1>     pop rdx
   121 000002F9 4881C320000000      <1>     add rbx, 20h    ;Goto next sector entry
   122 00000300 803B00              <1>     cmp byte [rbx], 0   ;Are we at the end of the Directory?
   123 00000303 7404                <1>     jz .exitNotOK   ;Exit early, end of directory
   124 00000305 FFC9                <1>     dec ecx
   125 00000307 75AD                <1>     jnz .searchDir
   126                              <1> .exitNotOK:
   127 00000309 F9                  <1>     stc
   128                              <1> .exitOk:
   129 0000030A 59                  <1>     pop rcx
   130 0000030B 58                  <1>     pop rax
   131 0000030C C3                  <1>     ret
   132                              <1> .nameFound:
   133 0000030D 5B                  <1>     pop rbx
   134 0000030E 5A                  <1>     pop rdx
   135 0000030F F8                  <1>     clc
   136 00000310 EBF8                <1>     jmp short .exitOk
   137                              <1> getFATtype:
   138                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
   139                              <1> ;Entry: rsi = DPB to ascertain FAT
   140                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
   141 00000312 53                  <1>     push rbx
   142 00000313 8B5E0E              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
   143 00000316 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
   144 0000031B 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
   145 00000321 730F                <1>     jae .exit
   146 00000323 FFC9                <1>     dec ecx     ;FAT 12 marker
   147 00000325 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
   148 0000032B 7205                <1>     jb .exit
   149 0000032D B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
   150                              <1> .exit:
   151 00000332 5B                  <1>     pop rbx
   152 00000333 C3                  <1>     ret
   153                              <1> 
   154                              <1> clust2FATEntry:
   155                              <1> ;Converts a cluster number to a offset in the FAT
   156                              <1> ;Entry:  rsi points to the DPB for the transacting device
   157                              <1> ;        eax = Cluster number to look for
   158                              <1> ;Exit:   eax = Sector on disk of FAT 
   159                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
   160                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
   161 00000334 53                  <1>     push rbx
   162 00000335 8B5E0E              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
   163 00000338 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
   164 0000033E 731E                <1>     jae .fat32
   165 00000340 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
   166 00000346 7209                <1>     jb .fat12
   167                              <1> ;FAT16
   168 00000348 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
   169 0000034A 6801000000          <1>     push qword 1
   170 0000034F EB15                <1>     jmp short .common
   171                              <1> .fat12:
   172 00000351 89C1                <1>     mov ecx, eax    ;ecx = eax
   173 00000353 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
   174 00000355 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
   175 00000357 6800000000          <1>     push qword 0
   176 0000035C EB08                <1>     jmp short .common
   177                              <1> .fat32:
   178 0000035E 6802000000          <1>     push qword 2
   179 00000363 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
   180                              <1> .common:
   181                              <1> ;eax has the FAToffset
   182 00000366 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
   183 00000369 BA01000000          <1>     mov edx, 1
   184 0000036E D3E2                <1>     shl edx, cl    ;Turn edx to number of bytes per sector
   185 00000370 89D1                <1>     mov ecx, edx
   186 00000372 31D2                <1>     xor edx, edx    ;edx = 0
   187 00000374 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
   188 00000376 0FB75E05            <1>     movzx ebx, word [rsi + dpb.wFAToffset]   ;Add the offset to the first FAT
   189 0000037A 01D8                <1>     add eax, ebx
   190 0000037C 59                  <1>     pop rcx ;Pop the FAT type back into rcx
   191 0000037D 5B                  <1>     pop rbx
   192 0000037E C3                  <1>     ret
   193                              <1> getStartSectorOfCluster:
   194                              <1> ;Input: eax = Cluster Number
   195                              <1> ;       r9 = dpb pointer
   196                              <1> ;Output: eax = Starting Sector number for cluster
   197                              <1> ;Gives the data sector we are at in the current cluster
   198                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
   199 0000037F 51                  <1>     push rcx
   200 00000380 2D02000000          <1>     sub eax, 2
   201 00000385 418A4904            <1>     mov cl, byte [r9 + dpb.bSectorsPerClusterShift]
   202 00000389 D3E0                <1>     shl eax, cl
   203 0000038B 4103410A            <1>     add eax, [r9 + dpb.dClusterHeapOffset]
   204                              <1>     ;eax now has the first sector of the current cluster
   205 0000038F 59                  <1>     pop rcx
   206 00000390 C3                  <1>     ret
   207                              <1> getNextSectorOfFile:
   208                              <1> ;This function will read the next sector for a file into a buffer.
   209                              <1> ;If the next sector to be read lives in the next cluster, it will update
   210                              <1> ; the file handle of the file being read/written to the new cluster
   211                              <1> ;
   212                              <1> ;Input: r8 = sft pointer
   213                              <1> ;       r9 = dpb pointer
   214                              <1> ;Output:
   215                              <1> ;       rbx = Pointer to buffer data
   216                              <1> ;       CF = NC, buffer OK to read
   217                              <1> ;       CF = CY, buffer not ok, something went wrong
   218                              <1> ;           ZF = ZE(1), Data not flushed to disk
   219                              <1> ;           ZF = NZ(0), Data no read from disk
   220                              <1>     ;Read next sector. If at last sector in cluster, walk map, get
   221                              <1>     ; next cluster and read first sector 
   222 00000391 50                  <1>     push rax
   223 00000392 51                  <1>     push rcx
   224 00000393 52                  <1>     push rdx
   225 00000394 56                  <1>     push rsi
   226 00000395 57                  <1>     push rdi
   227                              <1>     ;Check if we need to go to next cluster
   228 00000396 66418B401F          <1>     mov ax, word [r8 + sft.wRelSect]    ;Upper byte is ALWAYS 0
   229 0000039B 413A4103            <1>     cmp al, byte [r9 + dpb.bMaxSectorInCluster]
   230 0000039F 745F                <1>     je .gotoNextCluster
   231                              <1>     ;Goto next sector
   232 000003A1 6641FF401F          <1>     inc word [r8 + sft.wRelSect]    ;Goto next sector in cluster
   233                              <1> .getSector:
   234 000003A6 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr] ;Get cluster number
   235 000003AA E8D0FFFFFF          <1>     call getStartSectorOfCluster
   236 000003AF 410FB7581F          <1>     movzx ebx, word [r8 + sft.wRelSect] ;Get relative sector number
   237                              <1>     ;eax now has the correct sector in the cluster
   238 000003B4 01D8                <1>     add eax, ebx    
   239                              <1>     ;Read the sector into a buffer
   240                              <1>     ;The sector read here is either DATA or DOS
   241 000003B6 498D7026            <1>     lea rsi, qword [r8 + sft.sFileName]
   242 000003BA 488D3D41FCFFFF      <1>     lea rdi, dosBIOSName    ;Check if the file being read is the BIOS
   243 000003C1 B90B000000          <1>     mov ecx, 11             ;File name length
   244 000003C6 F3A6                <1>     repe cmpsb
   245 000003C8 742D                <1>     je .OSFile
   246 000003CA 498D7026            <1>     lea rsi, qword [r8 + sft.sFileName]
   247 000003CE 488D3D39FCFFFF      <1>     lea rdi, dosKernName
   248 000003D5 B90B000000          <1>     mov ecx, 11             ;File name length
   249 000003DA F3A6                <1>     repe cmpsb
   250 000003DC 7419                <1>     je .OSFile
   251                              <1>     ;Not an OS file, dataBuffer
   252 000003DE B108                <1>     mov cl, dataBuffer
   253                              <1> .getSectorRead:
   254 000003E0 4C89CE              <1>     mov rsi, r9
   255 000003E3 E813FDFFFF          <1>     call readBuffer
   256 000003E8 7211                <1>     jc .getSectorFailed
   257 000003EA 4881C320000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   258                              <1> .getSectorExit:
   259 000003F1 5F                  <1>     pop rdi
   260 000003F2 5E                  <1>     pop rsi
   261 000003F3 5A                  <1>     pop rdx
   262 000003F4 59                  <1>     pop rcx
   263 000003F5 58                  <1>     pop rax
   264 000003F6 C3                  <1>     ret
   265                              <1> .OSFile:
   266 000003F7 B101                <1>     mov cl, dosBuffer
   267 000003F9 EBE5                <1>     jmp short .getSectorRead
   268                              <1> .getSectorFailed:
   269                              <1>     ;CF = CY => Something went wrong!
   270                              <1>     ;   Set the Zero flag for data not flushed to disk
   271                              <1>     ;   Clear Zero flag for data not read from disk
   272 000003FB 84ED                <1>     test ch, ch ;This sets the zero flag correctly, but mangles CF
   273 000003FD F9                  <1>     stc ;Set the carry flag!
   274 000003FE EBF1                <1>     jmp short .getSectorExit
   275                              <1> 
   276                              <1> .gotoNextCluster:
   277                              <1>     ;Read FAT, find next cluster in cluster map, update SFT entries
   278 00000400 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr] ;Get the current cluster
   279 00000404 4C89CE              <1>     mov rsi, r9 ;Move dpb pointer into rsi, eax has cluster number
   280 00000407 E828FFFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   281 0000040C 410FB75905          <1>     movzx ebx, word [r9 + dpb.wFAToffset]
   282 00000411 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   283 00000413 B102                <1>     mov cl, fatBuffer
   284 00000415 E8E1FCFFFF          <1>     call readBuffer ;Buffer Header in ebx
   285 0000041A 72DF                <1>     jc .getSectorFailed
   286                              <1>     ;Check if FAT 12, 16, 32
   287 0000041C 4885FF              <1>     test rdi, rdi
   288 0000041F 7429                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   289 00000421 48F7C701000000      <1>     test rdi, 1
   290 00000428 7407                <1>     jz .goToNextClusterCommonFat32
   291                              <1>     ;Here we handle FAT16
   292 0000042A 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   293 0000042F EB09                <1>     jmp short .goToNextClusterCommon
   294                              <1> .goToNextClusterCommonFat32:
   295 00000431 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   296 00000435 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   297                              <1> .goToNextClusterCommon:
   298 0000043A 41894039            <1>     mov dword [r8 + sft.dAbsClusr], eax ;Save new cluster number
   299 0000043E 6641C7401F0000      <1>     mov word [r8 + sft.wRelSect], 0 ;First sector in next cluster
   300 00000445 E95CFFFFFF          <1>     jmp .getSector
   301                              <1> .gotoNextClusterFat12:
   302                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   303                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   304 0000044A 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   305 0000044D FFC0                <1>     inc eax ;Get next sector
   306 0000044F E8A7FCFFFF          <1>     call readBuffer ;Buffer Header in ebx
   307 00000454 72A5                <1>     jc .getSectorFailed
   308                              <1>     ;rdi has first buffer header, rbx has second buffer header
   309                              <1>     ;rdx has offset into first header for entry
   310 00000456 41F7403901000000    <1>     test dword [r8 + sft.dAbsClusr], 1  ;Check if cluster is odd
   311 0000045E 7429                <1>     jz .gotoNextClusterFat12Even
   312                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   313 00000460 B801000000          <1>     mov eax, 1
   314 00000465 418A4802            <1>     mov cl, byte [r8 + dpb.bBytesPerSectorShift]
   315 00000469 D3E0                <1>     shl eax, cl
   316 0000046B 29D0                <1>     sub eax, edx
   317 0000046D FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   318 0000046F 750E                <1>     jnz .gotoNextClusterFat12NoCross
   319                              <1>     ;Boundary cross, build entry properly
   320 00000471 31C0                <1>     xor eax, eax
   321 00000473 8A441720            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   322 00000477 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   323 0000047A C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   324 0000047D EBBB                <1>     jmp short .goToNextClusterCommon
   325                              <1> .gotoNextClusterFat12NoCross:
   326 0000047F 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   327 00000484 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   328 00000487 EBB1                <1>     jmp short .goToNextClusterCommon
   329                              <1> .gotoNextClusterFat12Even:
   330                              <1>     ;Here the cluster is even and can't cross a sector boundary
   331 00000489 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   332 0000048E 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   333 00000493 EBA5                <1>     jmp short .goToNextClusterCommon
   334                              <1> ;---------------------------------------------------:
   335                              <1> ;                   KERNEL FUNCTIONS                :
   336                              <1> ;---------------------------------------------------:
   337                              <1> makeDIR:           ;ah = 39h
   338                              <1> removeDIR:         ;ah = 3Ah
   339                              <1> changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
   340                              <1> getCurrentDIR:     ;ah = 47h
   341                              <1> getSetFileDateTime:;ah = 57h
   342                              <1> trueName:          ;ah = 60h, get fully qualified name
   343 00000495 C3                  <1>     ret
    18                                  %include "./Source/Kernel/charFunctions.asm"
    19                              <1> ;Dos default char functions live here
    20                              <1> 
    21                              <1> stdinReadEcho:     ;ah = 01h
    22                              <1> ;Return char that has been read and echoed in al
    23 00000496 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    24 0000049D 488D0566000000      <1>     lea rax, .stdinReadEchoBuffer
    25 000004A4 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    26 000004A7 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    27 000004AB 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    28 000004B1 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    29 000004B5 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    30 000004BC FF1534110000        <1>     call qword [conHdr + drvHdr.strPtr]
    31 000004C2 FF1536110000        <1>     call qword [conHdr + drvHdr.intPtr]
    32 000004C8 803D3B00000000      <1>     cmp byte [.stdinReadEchoBuffer], 00h
    33 000004CF 7432                <1>     jz .stdireexit
    34 000004D1 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    35 000004D8 488D052B000000      <1>     lea rax, .stdinReadEchoBuffer
    36 000004DF C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    37 000004E2 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    38 000004E6 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    39 000004EC 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    40 000004F0 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    41 000004F7 FF15F9100000        <1>     call qword [conHdr + drvHdr.strPtr]
    42 000004FD FF15FB100000        <1>     call qword [conHdr + drvHdr.intPtr]
    43                              <1> .stdireexit:
    44 00000503 8A0501000000        <1>     mov al, byte [.stdinReadEchoBuffer]
    45 00000509 C3                  <1>     ret
    46 0000050A 00                  <1> .stdinReadEchoBuffer    db 0
    47                              <1> stdoutWrite:       ;ah = 02h
    48                              <1> ;Bspace is regular cursor left, does not insert a blank
    49 0000050B 881533000000        <1>     mov byte [.stdoutWriteBuffer], dl
    50 00000511 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    51 00000518 488D1525000000      <1>     lea rdx, .stdoutWriteBuffer
    52 0000051F C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    53 00000522 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    54 00000526 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    55 0000052C 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    56 00000530 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    57 00000537 FF15B9100000        <1>     call qword [conHdr + drvHdr.strPtr]
    58 0000053D FF15BB100000        <1>     call qword [conHdr + drvHdr.intPtr]
    59 00000543 C3                  <1>     ret
    60 00000544 00                  <1> .stdoutWriteBuffer db 0
    61                              <1> stdauxRead:        ;ah = 03h
    62                              <1> stdauxWrite:       ;ah = 04h
    63                              <1> stdprnWrite:       ;ah = 05h
    64                              <1> directCONIO:       ;ah = 06h
    65                              <1> waitDirectInNoEcho:;ah = 07h
    66                              <1> ;Return char in al
    67 00000545 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    68 0000054C 488D052B000000      <1>     lea rax, .function7buffer
    69 00000553 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    70 00000556 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    71 0000055A 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    72 00000560 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    73 00000564 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    74 0000056B FF1585100000        <1>     call qword [conHdr + drvHdr.strPtr]
    75 00000571 FF1587100000        <1>     call qword [conHdr + drvHdr.intPtr]
    76 00000577 8A0501000000        <1>     mov al, byte [.function7buffer]
    77 0000057D C3                  <1>     ret
    78 0000057E 00                  <1> .function7buffer    db 0
    79                              <1> waitStdinNoEcho:   ;ah = 08h
    80 0000057F C3                  <1>     ret
    81                              <1> printString:       ;ah = 09h
    82 00000580 31C9                <1>     xor ecx, ecx    ;Clear char counter
    83 00000582 B824000000          <1>     mov eax, "$"    ;Terminating char
    84 00000587 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
    85                              <1> .ps0:   ;Search for $ to get count of chars
    86 0000058A AE                  <1>     scasb
    87 0000058B 7404                <1>     je .ps1
    88 0000058D FFC1                <1>     inc ecx
    89 0000058F EBF9                <1>     jmp short .ps0
    90                              <1> .ps1:   ;Use handle 
    91 00000591 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    92 00000598 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    93 0000059B C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    94 0000059F 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    95 000005A5 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    96 000005A9 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
    97 000005AC FF1544100000        <1>     call qword [conHdr + drvHdr.strPtr]
    98 000005B2 FF1546100000        <1>     call qword [conHdr + drvHdr.intPtr]
    99                              <1> 
   100 000005B8 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
   101 000005BF 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
   102 000005C1 C3                  <1>     ret
   103                              <1> buffStdinInput:    ;ah = 0Ah
   104                              <1> checkStdinStatus:  ;ah = 0Bh
   105                              <1> clearbuffDoFunc:   ;ah = 0Ch
    19                                  %include "./Source/Kernel/fcbFunctions.asm"
    20                              <1> openFileFCB:       ;ah = 0Fh
    21                              <1> closeFileFCB:      ;ah = 10h
    22                              <1> findFirstFileFCB:  ;ah = 11h
    23                              <1> findNextFileFCB:   ;ah = 12h
    24                              <1> deleteFileFCB:     ;ah = 13h
    25                              <1> sequentialReadFCB: ;ah = 14h
    26                              <1> sequentialWriteFCB:;ah = 15h
    27                              <1> createFileFCB:     ;ah = 16h
    28                              <1> renameFileFCB:     ;ah = 17h
    29 000005C2 C3                  <1>     ret
    30                              <1> setDTA:            ;ah = 1Ah
    31                              <1> ;Called with:
    32                              <1> ;   rdx = Pointer to the new default DTA
    33 000005C3 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
    34 000005CA 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    35 000005CE 488915(D0000000)    <1>     mov qword [currentDTA], rdx
    36 000005D5 C3                  <1>     ret
    37                              <1> randomReadFCB:     ;ah = 21h
    38                              <1> randomWriteFCB:    ;ah = 22h
    39                              <1> getFileSizeFCB:    ;ah = 23h
    40                              <1> setRelRecordFCB:   ;ah = 24h
    41                              <1> randBlockReadFCB:  ;ah = 27h
    42                              <1> randBlockWriteFCB: ;ah = 28h
    43                              <1> parseFilenameFCB:  ;ah = 29h
    44 000005D6 C3                  <1>     ret
    45                              <1> getDTA:            ;ah = 2Fh
    46 000005D7 488B15(09010000)    <1>     mov rdx, qword [oldRSP]
    47 000005DE 488B1D(D0000000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    48 000005E5 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    49 000005E9 C3                  <1>     ret
    20                                  %include "./Source/Kernel/handleFunctions.asm"
    21                              <1> ;-----------------------------------:
    22                              <1> ;    File Handle Kernel routines    :
    23                              <1> ;-----------------------------------:
    24                              <1> 
    25                              <1> createFileHdl:     ;ah = 3Ch, handle function
    26                              <1> openFileHdl:       ;ah = 3Dh, handle function
    27                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    28 000005EA C3                  <1>     ret
    29                              <1> readFileHdl:       ;ah = 3Fh, handle function
    30 000005EB 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
    31 000005F2 E83F000000          <1>     call getSFTPtr
    32 000005F7 722B                <1>     jc .rfhErrorHandle  ;Function can only fail for bad file handle
    33                              <1> ;Here rdi points to the correct SFT 
    34 000005F9 668B4702            <1>     mov ax, word [rdi + sft.wOpenMode]  ;Get open mode
    35 000005FD A802                <1>     test al, RWAccess  ;Check r/w permission
    36 000005FF 7504                <1>     jnz .rfh2   ;Bit set, proceed
    37 00000601 84C0                <1>     test al, al  ;Check read access (it is 0)
    38 00000603 751F                <1>     jnz .rfhNoPermission    ;If not zero then it is write only permission
    39                              <1> .rfh2:
    40                              <1>     ;So now read the number of bytes from the data buffers
    41 00000605 4889FB              <1>     mov rbx, rdi    ;Move SFT pointer into rbx
    42 00000608 F6430520            <1>     test byte [rbx + sft.wDeviceInfo], devBinary
    43 0000060C 7409                <1>     jz .rfhASCII    ;If not set, read in ASCII
    44 0000060E E870000000          <1>     call readBinaryBytesFromFile
    45 00000613 720F                <1>     jc .rfCriticalError
    46 00000615 EB07                <1>     jmp short .rfhExitOK
    47                              <1> .rfhASCII:
    48 00000617 E866000000          <1>     call readASCIIBytesFromFile
    49 0000061C 7206                <1>     jc .rfCriticalError
    50                              <1> .rfhExitOK:
    51 0000061E 88C8                <1>     mov al, cl  ;Get low byte in cl
    52 00000620 894D00              <1>     mov dword [rbp + callerFrame.rax], ecx  ;Save number of bytes transf.
    53 00000623 C3                  <1>     ret
    54                              <1> .rfCriticalError:
    55                              <1>     ;Fail due to driver error. Invoke Int 44h if set to in SFT
    56                              <1> .rfhErrorHandle:
    57                              <1>     ;Fail due to bad file handle provided
    58                              <1> .rfhNoPermission:
    59                              <1>     ;Fail due to bad permissions
    60                              <1> writeFileHdl:      ;ah = 40h, handle function
    61 00000624 E80D000000          <1>     call getSFTPtr
    62 00000629 720A                <1>     jc .wfhErrorHandle  ;Function can only fail for bad file handle
    63 0000062B 668B4702            <1>     mov ax, word [rdi + sft.wOpenMode]  ;Get open mode
    64 0000062F 66A90300            <1>     test ax, 3
    65 00000633 7400                <1>     jz .wfhNoPermission ;Bad permissions! No r/w or w permissions
    66                              <1> .wfCriticalError:
    67                              <1>     ;Fail due to driver error. Invoke Int 44h if set to in SFT
    68                              <1> .wfhErrorHandle:
    69                              <1>     ;Fail due to bad file handle provided
    70                              <1> .wfhNoPermission:
    71                              <1>     ;Fail due to bad permissions
    72                              <1> 
    73                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    74                              <1> movFileReadPtr:    ;ah = 42h, handle function, LSEEK
    75                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
    76                              <1> ioctrl:            ;ah = 44h, handle function
    77                              <1> duplicateHandle:   ;ah = 45h, handle function
    78                              <1> forceDuplicateHdl: ;ah = 46h, handle function
    79                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
    80                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
    81                              <1> renameFile:        ;ah = 56h
    82                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
    83                              <1> createNewFile:     ;ah = 5Bh
    84                              <1> lockUnlockFile:    ;ah = 5Ch
    85                              <1> setHandleCount:    ;ah = 67h
    86                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
    87 00000635 C3                  <1>     ret
    88                              <1> ;-----------------------------------:
    89                              <1> ;        File Handle routines       :
    90                              <1> ;-----------------------------------:
    91                              <1> getSFTPtr:
    92                              <1> ;Gets the SFT pointer for a given file handle from the calling application
    93                              <1> ;On entry:
    94                              <1> ;   bl = File handle
    95                              <1> ;On exit:
    96                              <1> ;   rsi = currentPSP
    97                              <1> ;   rdi = SFT pointer
    98                              <1> ;   rax, rbx trashed
    99 00000636 488B35(D8000000)    <1>     mov rsi, qword [currentPSP]
   100 0000063D 480FB6DB            <1>     movzx rbx, bl
   101 00000641 8A5C1E2A            <1>     mov bl, byte [rsi + psp.jobFileTbl + rbx]   ;Use jft entry to get sft num
   102 00000645 31C0                <1>     xor eax, eax
   103 00000647 488B3D(70000000)    <1>     mov rdi, qword [sftHeadPtr]
   104                              <1> .gsp0:
   105 0000064E 66034708            <1>     add ax, word [rdi + sfth.wNumFiles]
   106 00000652 38D8                <1>     cmp al, bl  ;Check if the file header block contains the entry
   107 00000654 760E                <1>     jbe .gsp1   ;IF bl is below or equal to al then it does
   108 00000656 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of list
   109 0000065D 7421                <1>     je .gspFail   ;If we have a number greater than the last entry, fail
   110 0000065F 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Walk the chain
   111 00000662 EBEA                <1>     jmp short .gsp0 ;Search again
   112                              <1> .gsp1: 
   113                              <1>     ;Now point to the right entry
   114 00000664 28D8                <1>     sub al, bl  ;Subtract the number from the total so far to get offset
   115 00000666 0FB6C0              <1>     movzx eax, al
   116 00000669 4881C70A000000      <1>     add rdi, sfth_size  ;Point to first file in table
   117 00000670 84C0                <1>     test al, al ;Check if rdi points to the first file in this block
   118 00000672 740B                <1>     jz .gsp12   ;Skip walking down the sft blocks
   119                              <1> .gsp11:
   120 00000674 4881C73D000000      <1>     add rdi, sft_size
   121 0000067B FEC8                <1>     dec al
   122 0000067D 75F5                <1>     jnz .gsp11  ;Keep adding one until al is zero
   123                              <1> .gsp12:
   124 0000067F C3                  <1>     ret
   125                              <1> .gspFail:
   126 00000680 F9                  <1>     stc
   127 00000681 C3                  <1>     ret
   128                              <1> 
   129                              <1> readASCIIBytesFromFile:
   130 00000682 C3                  <1>     ret
   131                              <1> readBinaryBytesFromFile:
   132                              <1> ;Reads a byte from a SFT entry, does not translate it. 
   133                              <1> ;Read or RW permissions are checked at the INT 41h level
   134                              <1> ;Entry: rbp = Pointer to the caller stack
   135                              <1> ;       rbx = SFT entry pointer
   136                              <1> ;       On stack:
   137                              <1> ;           rdx = Address of the data buffer to read to
   138                              <1> ;           ecx = Number of bytes to read
   139                              <1> ;Exit: If CF = NC : All ok!
   140                              <1> ;       rbx = SFT entry pointer
   141                              <1> ;       ecx = Number of chars read/written
   142                              <1> ;      If CF = CY : Error!
   143                              <1> ;       rbx = SFT entry pointer
   144                              <1> ;       al = Error code to ret if user returns fail from int 44h or no int 44h
   145                              <1> 
   146 00000683 66F743058000        <1>     test word [rbx + sft.wDeviceInfo], devCharDev
   147 00000689 755C                <1>     jnz .readBinaryBytesFromCharDevice
   148                              <1> .readBinaryBytesFromHardFile:
   149                              <1> ;Disk files are accessed from here
   150                              <1> ;Use the sector buffers if the data is already buffered,
   151                              <1> ; else use the dpb to fill a sector buffer
   152 0000068B 53                  <1>     push rbx
   153 0000068C 4989D8              <1>     mov r8, rbx                     ;Use r8 as sft pointer
   154 0000068F 4D8B4807            <1>     mov r9, qword [r8 + sft.qPtr]   ;Use r9 as dpb pointer
   155                              <1>     ;First compute the number of bytes to read for the current sector
   156                              <1>     ;Compute how many bytes in a sector
   157 00000693 418A4902            <1>     mov cl, byte [r9 + dpb.bBytesPerSectorShift]
   158 00000697 B801000000          <1>     mov eax, 1
   159 0000069C D3E0                <1>     shl eax, cl
   160 0000069E 89C1                <1>     mov ecx, eax    ;ecx has bytes per sector
   161 000006A0 488B4510            <1>     mov rax, qword [rbp + callerFrame.rcx]  ;Get total number of bytes
   162 000006A4 31D2                <1>     xor edx, edx
   163 000006A6 48895510            <1>     mov qword [rbp + callerFrame.rcx], rdx  ;Zero this field
   164 000006AA F7F1                <1>     div ecx ;Divide by number of bytes per sector
   165 000006AC 87CA                <1>     xchg ecx, edx    ;Get "in current sector remainder of bytes" in ecx
   166                              <1>                      ;and bytes per sector in edx
   167 000006AE 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr]  ;Get cluster number
   168 000006B2 E8C8FCFFFF          <1>     call getStartSectorOfCluster
   169 000006B7 410FB7581F          <1>     movzx ebx, word [r8 + sft.wRelSect] ;Add the offset into the cluster
   170 000006BC 01D8                <1>     add eax, ebx    ;eax now has the sector number
   171 000006BE 4C89CE              <1>     mov rsi, r9 ;Move dpb pointer into rsi
   172 000006C1 4831FF              <1>     xor rdi, rdi
   173 000006C4 89CF                <1>     mov edi, ecx    ;Save in current sector remainder of bytes in edi
   174 000006C6 B108                <1>     mov cl, dataBuffer
   175 000006C8 E82EFAFFFF          <1>     call readBuffer ;Read the data
   176 000006CD 7218                <1>     jc .readBinaryBytesFromHardFileError
   177 000006CF 4881C320000000      <1>     add rbx, bufferHdr.dataarea
   178 000006D6 4889DE              <1>     mov rsi, rbx
   179 000006D9 4889F9              <1>     mov rcx, rdi    ;Get the number of bytes to read in this sector to rbx
   180 000006DC 488B7D18            <1>     mov rdi, qword [rbp + callerFrame.rdx]  ;Point to destination
   181 000006E0 48014D10            <1>     add qword [rbp + callerFrame.rcx], rcx
   182 000006E4 F3A4                <1>     rep movsb   ;Move the bytes from this sector
   183                              <1> 
   184 000006E6 5B                  <1>     pop rbx
   185                              <1> .readBinaryBytesFromHardFileError:
   186                              <1> 
   187                              <1> .readBinaryBytesFromCharDevice:
   188                              <1> ;Devices are accessed from here
   189 000006E7 488B6B07            <1>     mov rbp, qword [rbx + sft.qPtr] ;Get device driver header pointer
   190 000006EB 53                  <1>     push rbx
   191 000006EC 488D1D(0C000000)    <1>     lea rbx, charReqHdr
   192 000006F3 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   193 000006F6 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], drvREAD
   194 000006FA 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   195 00000700 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   196 00000704 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   197                              <1> 
   198 00000707 FF550A              <1>     call qword [rbp + drvHdr.strPtr]
   199 0000070A FF5512              <1>     call qword [rbp + drvHdr.intPtr]
   200 0000070D 8B4316              <1>     mov eax, dword [rbx + ioReqPkt.tfrlen] ;Get number of bytes read
   201 00000710 66F743030080        <1>     test word [rbx + ioReqPkt.status], 8000h    ;Test the error bit is set
   202 00000716 5B                  <1>     pop rbx
   203 00000717 7400                <1>     jz .readBinaryBytesExitGood  ;Error bit not set, all good!
   204                              <1> .readBinaryBytesExitGood:
   205 00000719 C3                  <1>     ret
   206                              <1> 
    21                                  %include "./Source/Kernel/memoryFunctions.asm"
    22                              <1> ;Memory related functions
    23                              <1> 
    24                              <1> ;-----------------------------------:
    25                              <1> ;  Memory related Kernel routines   :
    26                              <1> ;-----------------------------------:
    27                              <1> allocateMemory:    ;ah = 48h
    28                              <1> freeMemory:        ;ah = 49h
    29                              <1> reallocMemory:     ;ah = 4Ah
    30                              <1> getsetMallocStrat: ;ah = 58h
    31 0000071A C3                  <1>     ret
    32                              <1> ;-----------------------------------:
    33                              <1> ;      Memory related routines      :
    34                              <1> ;-----------------------------------:
    35                              <1> verifyIntegrityOfMCBChain:
    36 0000071B 488B1D(60000000)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
    37                              <1> .ok:
    38 00000722 803B4D              <1>     cmp byte [rbx + mcb.marker], 'M'
    39 00000725 7406                <1>     je .ok1
    40 00000727 803B5A              <1>     cmp byte [rbx + mcb.marker], "Z"    ;End of the chain?
    41 0000072A 7509                <1>     jne .sysHalt    ;It was not M or Z, fail violently
    42                              <1> .exit:
    43 0000072C C3                  <1>     ret ;We have reached the end of the chain, return all good!
    44                              <1> .ok1:
    45 0000072D 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
    46 00000730 4801C3              <1>     add rbx, rax
    47 00000733 EBED                <1>     jmp short .ok
    48                              <1> .sysHalt:
    49                              <1> ;Only arrive here if the integrity of the system is not verified
    50                              <1> ;Lock the system
    51 00000735 488D1D0E000000      <1>     lea rbx, .sysHltString
    52 0000073C B409                <1>     mov ah, 09h
    53 0000073E CD41                <1>     int 41h
    54 00000740 FA                  <1>     cli ;Halt interrupts
    55 00000741 B0FF                <1>     mov al, 0FFh    ;Mask IRQ lines 
    56 00000743 E6A1                <1>     out 0A1h, al
    57 00000745 E621                <1>     out 021h, al
    58 00000747 F4                  <1>     hlt             ;Halt the system
    59 00000748 EBFB                <1>     jmp short $ - 3 ;Go back far enough to capture the hlt
    60 0000074A 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
    60 00000753 6C6F636174696F6E20- <1>
    60 0000075C 6572726F720D0A      <1>
    61 00000763 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
    61 0000076C 616420434F4D4D414E- <1>
    61 00000775 442C2073797374656D- <1>
    61 0000077E 2068616C74656424    <1>
    22                                  %include "./Source/Kernel/dateTimeFunctions.asm"
    23                              <1> ;Major kernel date time functions and subroutines
    24                              <1> 
    25                              <1> getDate:           ;ah = 2Ah
    26                              <1> setDate:           ;ah = 2Bh
    27                              <1> getTime:           ;ah = 2Ch
    28                              <1> setTime:           ;ah = 2Dh
    29 00000786 C3                  <1>     ret
    23                                  %include "./Source/Kernel/localisation.asm"
    24                              <1> ;Localisation based functions live here
    25                              <1> 
    26                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    27                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    28                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    29                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    30 00000787 C3                  <1>     ret
    24                                  %include "./Source/Kernel/dosKernel.asm"
    25                              <1> ;-----------------------------------:
    26                              <1> ;       Misc System routines        :
    27                              <1> ;-----------------------------------:
    28                              <1> criticalDOSError:
    29                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    30                              <1> ; to the critical error handler.
    31                              <1> ; Called with ax, di and rsi set as required by Int 44h (caller decides)
    32                              <1> ;               AH = Critical Error Bitfield
    33                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    34                              <1> ;               Bit 6 - Reserved
    35                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    36                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    37                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    38                              <1> ;               Bits [2-1] = Affected Disk Error
    39                              <1> ;                     0 0   DOS area
    40                              <1> ;                     0 1   FAT area
    41                              <1> ;                     1 0   Directory area
    42                              <1> ;                     1 1   Data area
    43                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    44                              <1> ;               AL  = Failing drive number if AH[7] = 0
    45                              <1> ;               DIL = Error code for errorMsg
    46                              <1> ;               RSI = EA of Device Header for which device the error occured
    47                              <1> ;Return:
    48                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    49                              <1> ;                  = 1 - Retry the Operation    (Retry)
    50                              <1> ;                  = 2 - Terminate the Program  (Abort)
    51                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    52                              <1> ; Return response from int 44h in al
    53 00000788 FA                  <1>     cli ;Disable Interrupts
    54 00000789 C605(C8000000)01    <1>     mov byte [critErrFlag], 1   ;Set flag for critical error
    55 00000790 488925(F5000000)    <1>     mov qword [xInt44hRSP], rsp
    56 00000797 488B25(09010000)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    57 0000079E CD44                <1>     int 44h ;Call critical error handler
    58 000007A0 488B25(F5000000)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    59 000007A7 C605(C8000000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    60 000007AE FB                  <1>     sti ;Reenable Interrupts
    61 000007AF C3                  <1>     ret
    62                              <1> 
    63                              <1> findDPB:
    64                              <1> ;Finds the DPB for a given drive
    65                              <1> ;Input:  dl = Drive number (0=A, 1=B etc...)
    66                              <1> ;Output: al = 00, rbp = Pointer to the DPB
    67                              <1> ;        al = -1, Failed, no DPB for device, rbx destroyed
    68 000007B0 488B1D(68000000)    <1>     mov rbx, qword [dpbHeadPtr]
    69                              <1> .fd1:
    70 000007B7 30C0                <1>     xor al, al
    71 000007B9 385500              <1>     cmp byte [rbp + dpb.bDriveNumber], dl
    72 000007BC 740F                <1>     je .fd2
    73 000007BE 488B6D24            <1>     mov rbp, qword [rbp + dpb.qNextDPBPtr]
    74 000007C2 B0FF                <1>     mov al, -1
    75 000007C4 4881FDFFFFFFFF      <1>     cmp rbp, -1 ;If rbx followed last item in list, no DPB exists for dl
    76 000007CB 75EA                <1>     jne .fd1
    77                              <1> .fd2:
    78 000007CD C3                  <1>     ret
    79                              <1> getCDS:
    80                              <1>     ;Gets the CDS for the current drive in rax
    81                              <1>     ;Input: rax = Drive number, 0 = A ...
    82                              <1>     ;Output: rbx = Pointer to CDS for drive in rax
    83 000007CE 50                  <1>     push rax
    84 000007CF 51                  <1>     push rcx
    85 000007D0 52                  <1>     push rdx
    86 000007D1 488D1D(92000000)    <1>     lea rbx, qword [cdsHeadPtr] ;Point to cds array
    87 000007D8 48B95B000000000000- <1>     mov rcx, cds_size   
    87 000007E1 00                  <1>
    88 000007E2 31D2                <1>     xor edx, edx
    89 000007E4 F7E1                <1>     mul ecx 
    90 000007E6 4801C3              <1>     add rbx, rax    ;Move rbx to the right offset in the array
    91 000007E9 5A                  <1>     pop rdx
    92 000007EA 59                  <1>     pop rcx
    93 000007EB 58                  <1>     pop rax
    94 000007EC C3                  <1>     ret
    95                              <1> ;-----------------------------------:
    96                              <1> ;        Interrupt routines         :
    97                              <1> ;-----------------------------------:
    98                              <1> terminateProcess:   ;Int 40h
    99 000007ED 48CF                <1>     iretq
   100                              <1> terminateHandler:   ;Int 42h
   101                              <1> ctrlCHandler:       ;Int 43h
   102 000007EF 48CF                <1>     iretq
   103                              <1> absDiskWrite:       ;Int 46h
   104                              <1> ;al = Drive number
   105                              <1> ;rbx = Memory Buffer address to read from
   106                              <1> ;ecx = Number of sectors to write
   107                              <1> ;rdx = Start LBA to write to
   108 000007F1 50                  <1>     push rax
   109 000007F2 53                  <1>     push rbx
   110 000007F3 52                  <1>     push rdx
   111 000007F4 55                  <1>     push rbp
   112 000007F5 B408                <1>     mov ah, drvWRITE
   113 000007F7 0225(F4000000)      <1>     add ah, byte [verifyFlag]   ;Change to Write/Verify if set
   114 000007FD EB06                <1>     jmp short absDiskReadWriteCommon
   115                              <1> absDiskRead:        ;Int 45h
   116                              <1> ;al = Drive number
   117                              <1> ;rbx = Memory Buffer address to write to
   118                              <1> ;ecx = Number of sectors to read
   119                              <1> ;rdx = Start LBA to read from
   120 000007FF 50                  <1>     push rax
   121 00000800 53                  <1>     push rbx
   122 00000801 52                  <1>     push rdx
   123 00000802 55                  <1>     push rbp
   124 00000803 B404                <1>     mov ah, drvREAD
   125                              <1> absDiskReadWriteCommon:
   126                              <1> ;Entered with the appropriate function number in ah
   127 00000805 52                  <1>     push rdx    ;Save start LBA
   128 00000806 50                  <1>     push rax
   129 00000807 88C2                <1>     mov dl, al
   130 00000809 E8A2FFFFFF          <1>     call findDPB   ;Get dpb ptr in rbp
   131 0000080E 58                  <1>     pop rax
   132 0000080F 5A                  <1>     pop rdx
   133                              <1> 
   134 00000810 C605(36000000)2A    <1>     mov byte [diskReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   135 00000817 8805(37000000)      <1>     mov byte [diskReqHdr + ioReqPkt.unitnm], al
   136 0000081D 8825(38000000)      <1>     mov byte [diskReqHdr + ioReqPkt.cmdcde], ah
   137 00000823 66C705(39000000)00- <1>     mov word [diskReqHdr + ioReqPkt.status], 0
   137 0000082B 00                  <1>
   138 0000082C 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   139 0000082F 8805(43000000)      <1>     mov byte [diskReqHdr + ioReqPkt.medesc], al
   140 00000835 48891D(44000000)    <1>     mov qword [diskReqHdr + ioReqPkt.bufptr], rbx
   141 0000083C 488915(50000000)    <1>     mov qword [diskReqHdr + ioReqPkt.strtsc], rdx
   142 00000843 890D(4C000000)      <1>     mov dword [diskReqHdr + ioReqPkt.tfrlen], ecx
   143 00000849 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver pointer
   144                              <1> 
   145 0000084D 488D1D(36000000)    <1>     lea rbx, diskReqHdr
   146 00000854 FF520A              <1>     call qword [rdx + drvHdr.strPtr]  ;Call with ptr to request block in rbx
   147 00000857 FF5212              <1>     call qword [rdx + drvHdr.intPtr]
   148 0000085A 5D                  <1>     pop rbp
   149 0000085B 5A                  <1>     pop rdx
   150 0000085C 5B                  <1>     pop rbx
   151 0000085D 58                  <1>     pop rax
   152 0000085E 66F705(39000000)00- <1>     test word [diskReqHdr + ioReqPkt.status], 8000h
   152 00000866 80                  <1>
   153 00000867 7402                <1>     je .absDiskError
   154 00000869 F8                  <1>     clc
   155 0000086A C3                  <1>     ret
   156                              <1> .absDiskError:
   157 0000086B 8A05(39000000)      <1>     mov al, byte [diskReqHdr + ioReqPkt.status] ;Get low byte into al
   158 00000871 B480                <1>     mov ah, 80h ;Attachment failure
   159 00000873 3C0C                <1>     cmp al, 0Ch ;Gen error
   160 00000875 741A                <1>     je .absExit
   161 00000877 B440                <1>     mov ah, 40h ;Seek error
   162 00000879 3C06                <1>     cmp al, 06h
   163 0000087B 7414                <1>     je .absExit
   164 0000087D B408                <1>     mov ah, 08h ;Bad CRC
   165 0000087F 3C04                <1>     cmp al, 04h
   166 00000881 740E                <1>     je .absExit
   167 00000883 B404                <1>     mov ah, 04h ;Sector not found
   168 00000885 3C08                <1>     cmp al, 08h
   169 00000887 7408                <1>     je .absExit
   170 00000889 30E4                <1>     xor ah, ah  ;Write Protect Violation
   171 0000088B 84C0                <1>     test al, al
   172 0000088D 7402                <1>     je .absExit
   173 0000088F B402                <1>     mov ah, 02h ;Other Error
   174                              <1> .absExit:
   175 00000891 F9                  <1>     stc
   176 00000892 C3                  <1>     ret
   177                              <1> 
   178                              <1> terminateResident:  ;Int 47h
   179                              <1> inDosHandler:       ;Int 48h
   180                              <1> ;Called when DOS idle
   181 00000893 48CF                <1>     iretq
   182                              <1> fastOutput:         ;Int 49h
   183                              <1> ;Called with char to transfer in al
   184 00000895 50                  <1>     push rax
   185 00000896 B40E                <1>     mov ah, 0Eh
   186 00000898 CD30                <1>     int 30h
   187 0000089A 58                  <1>     pop rax
   188 0000089B 48CF                <1>     iretq
   189                              <1> passCommand:        ;Int 4Eh, hooked by COMMAND.COM
   190 0000089D 48CF                <1>     iretq
   191                              <1> multiplex:          ;Int 4Fh, kept as iretq for now
   192 0000089F 48CF                <1>     iretq
   193                              <1> ;-----------------------------------:
   194                              <1> ;        Main Kernel routines       :
   195                              <1> ;-----------------------------------:
   196                              <1> functionDispatch:   ;Int 41h Main function dispatcher
   197                              <1> ;ah = Function number, all other registers have various meanings
   198 000008A1 FA                  <1>     cli ;Halt external interrupts
   199 000008A2 FC                  <1>     cld ;Ensure all string ops occur in the right direction
   200 000008A3 80FC6A              <1>     cmp ah, kernelDispatchTableL/8    ;Number of functions
   201 000008A6 0F871D010000        <1>     ja .fdExitBad
   202                              <1>     ;Cherry pick functions
   203 000008AC 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
   204 000008AF 722C                <1>     jb .fsbegin   ;If below skip these checks
   205 000008B1 0F8447050000        <1>     je ctrlBreakCheck
   206 000008B7 80FC64              <1>     cmp ah, 64h
   207 000008BA 0F8448070000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
   208 000008C0 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
   209 000008C2 80FC51              <1>     cmp ah, 51h
   210 000008C5 0F84ED050000        <1>     je getCurrProcessID    ;This and below are exactly the same
   211 000008CB 80FC62              <1>     cmp ah, 62h
   212 000008CE 0F8421070000        <1>     je getPSPaddr          ;Calls the above function
   213 000008D4 80FC50              <1>     cmp ah, 50h
   214 000008D7 0F84D3050000        <1>     je setCurrProcessID
   215                              <1> .fsbegin:
   216                              <1>     pushDOS ;Push the usual prologue registers
   263 000008DD 4151                <2>  push r9
   264 000008DF 4150                <2>  push r8
   265 000008E1 55                  <2>  push rbp
   266 000008E2 57                  <2>  push rdi
   267 000008E3 56                  <2>  push rsi
   268 000008E4 52                  <2>  push rdx
   269 000008E5 51                  <2>  push rcx
   270 000008E6 53                  <2>  push rbx
   271 000008E7 50                  <2>  push rax
   217 000008E8 488B05(09010000)    <1>     mov rax, qword [oldRSP]
   218 000008EF 488905(01010000)    <1>     mov qword [oldoldRSP], rax
   219 000008F6 FE05(C9000000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
   220 000008FC 488925(09010000)    <1>     mov qword [oldRSP], rsp
   221                              <1> ;Here, we want to save oldRSP in the callers PSP
   222 00000903 803D(C9000000)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
   223 0000090A 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
   224 0000090C 488B05(D8000000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
   225 00000913 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   226                              <1> .fsb1:
   227 00000917 58                  <1>     pop rax     ;Get old rax back
   228 00000918 50                  <1>     push rax    ;and push it back onto the stack
   229 00000919 488D25(4C070000)    <1>     lea rsp, critStakTop
   230 00000920 FB                  <1>     sti         ;Reenable interrupts
   231                              <1> 
   232 00000921 C605(00010000)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   233                              <1> 
   234 00000928 48891D(11010000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   235 0000092F 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
   236 00000932 C1E303              <1>     shl ebx, 3      ;Multiply the function number by 8 for offset into table
   237 00000935 50                  <1>     push rax        ;Push rax onto the stack
   238 00000936 488D05CC060000      <1>     lea rax, qword [kernelDispatchTable]
   239 0000093D 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   240 00000940 58                  <1>     pop rax
   241 00000941 488B1B              <1>     mov rbx, qword [rbx]    ;Get the address from the dispatch table
   242                              <1> 
   243 00000944 84E4                <1>     test ah, ah     ;Simple Terminate function?
   244 00000946 741C                <1>     jz .fddiskOp
   245 00000948 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   246 0000094B 7443                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   247 0000094D 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   248 00000950 7712                <1>     ja .fddiskOp
   249                              <1> ;Char operations here
   250 00000952 F605(C8000000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   251 00000959 7535                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   252 0000095B 488D25(8C0D0000)    <1>     lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   253 00000962 EB2C                <1>     jmp short .fdGoToFunction
   254                              <1> .fddiskOp:
   255                              <1>     ;Disk operations go here
   256                              <1>     ;Clear up error info
   257 00000964 C605(CB000000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   258 0000096B C605(C8000000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   259 00000972 C605(CA000000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   260                              <1> 
   261 00000979 C605(00010000)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   262 00000980 488D25(CC130000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   263 00000987 F605(F3000000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   264 0000098E 7400                <1>     jz .fdGoToFunction
   265                              <1> ; HANDLE CTRL+BREAK HERE!
   266                              <1> .fdGoToFunction:
   267 00000990 48871D(11010000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   268                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   269                              <1>     ;
   270                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   271                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   272                              <1>     ;
   273 00000997 FF15(11010000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   274                              <1> .fdExit:
   275 0000099D FA                  <1>     cli     ;Redisable interrupts
   276                              <1>     ;???
   277 0000099E FE0D(C9000000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   278 000009A4 488B25(09010000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   279 000009AB 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   280 000009AE 488B05(01010000)    <1>     mov rax, qword [oldoldRSP]
   281 000009B5 488905(09010000)    <1>     mov qword [oldRSP], rax
   282                              <1>     popDOS  ;Pop the frame
   275 000009BC 58                  <2>  pop rax
   276 000009BD 5B                  <2>  pop rbx
   277 000009BE 59                  <2>  pop rcx
   278 000009BF 5A                  <2>  pop rdx
   279 000009C0 5E                  <2>  pop rsi
   280 000009C1 5F                  <2>  pop rdi
   281 000009C2 5D                  <2>  pop rbp
   282 000009C3 4158                <2>  pop r8
   283 000009C5 4159                <2>  pop r9
   283 000009C7 48CF                <1>     iretq
   284                              <1> .fdExitBad:
   285 000009C9 B400                <1>     mov ah, 0
   286 000009CB 48CF                <1>     iretq
   287                              <1> 
   288                              <1> ;========================================:
   289                              <1> ;            Kernel Functions            :
   290                              <1> ;========================================:
   291                              <1> simpleTerminate:   ;ah = 00h
   292 000009CD C3                  <1>     ret
   293                              <1> diskReset:         ;ah = 0Dh
   294                              <1> ;Flush all dirty buffers to disk
   295 000009CE 488B2D(8A000000)    <1>     mov rbp, qword [bufHeadPtr]
   296                              <1> .drCheckBuffer:
   297 000009D5 F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   298 000009D9 7407                <1>     jz .drGotoNextBuffer
   299                              <1> .drFlushBuffer:
   300 000009DB E8A7F7FFFF          <1>     call flushBuffer    ;Called with rbp = buffer header
   301 000009E0 720E                <1>     jc .drError
   302                              <1> .drGotoNextBuffer:
   303 000009E2 488B6D00            <1>     mov rbp, qword [rbp + bufferHdr.nextBufPtr]
   304 000009E6 4881FDFFFFFFFF      <1>     cmp rbp, -1     ;If rbp points to -1, exit
   305 000009ED 75E6                <1>     jne .drCheckBuffer
   306 000009EF C3                  <1>     ret
   307                              <1> .drError:
   308                              <1> ;Abort/Retry/Ignore
   309                              <1> ;Abort returns to DOS, 
   310                              <1> ;Retry retries the write on the buffer, 
   311                              <1> ;Ignore marks the buffer as clean and proceeds as normal
   312 000009F0 8A4509              <1>     mov al, byte [rbp + bufferHdr.bufferFlags]
   313 000009F3 240F                <1>     and al, 0Fh ;Clear the upper nybble
   314 000009F5 B431                <1>     mov ah, 31h ;Disk Error, Ignore,Retry and Write operation
   315 000009F7 3C01                <1>     cmp al, dosBuffer
   316 000009F9 740F                <1>     je .drErrorMain
   317 000009FB 80C402              <1>     add ah, 2
   318 000009FE 3C02                <1>     cmp al, fatBuffer
   319 00000A00 7408                <1>     je .drErrorMain
   320 00000A02 80C402              <1>     add ah, 2
   321 00000A05 3C04                <1>     cmp al, dirBuffer
   322 00000A07 80C402              <1>     add ah, 2
   323                              <1> .drErrorMain:
   324 00000A0A 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   325 00000A0D 488B7517            <1>     mov rsi, qword [rbp + bufferHdr.driveDPBPtr]
   326 00000A11 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   327 00000A15 668B3D(39000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]    ;Disk error occured!
   328 00000A1C 6681E7FF00          <1>     and di, 0FFh    ;Only bottom byte
   329 00000A21 66893D(CC000000)    <1>     mov word [errorExt], di     ;Save driver error code
   330 00000A28 668105(CC000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   330 00000A30 00                  <1>
   331 00000A31 8805(CA000000)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   332 00000A37 C605(CB000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   333 00000A3E C605(CF000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad BPB or other) code
   334 00000A45 C605(CE000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   335 00000A4C E837FDFFFF          <1>     call criticalDOSError       ;Critical error handler
   336 00000A51 84C0                <1>     test al, al ;Ignore the troublesome buffer and mark it as free
   337 00000A53 7406                <1>     jz .drIgnore
   338 00000A55 3C01                <1>     cmp al, 1   ;Retry flushing the buffer
   339 00000A57 7482                <1>     je .drFlushBuffer
   340 00000A59 CD43                <1>     int 43h     ;Abort and fail both abort through int 43h
   341                              <1> .drIgnore:
   342 00000A5B C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1  ;Mark buffer as free
   343 00000A5F E97EFFFFFF          <1>     jmp .drGotoNextBuffer
   344                              <1> 
   345                              <1> selectDisk:        ;ah = 0Eh
   346                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   347 00000A64 8A05(0B000000)      <1>     mov al, byte [numLogDrv]        ;Value 1 based
   348 00000A6A 8A1D(9A000000)      <1>     mov bl, byte [lastdrvNum]       ;Value 1 based
   349 00000A70 FEC8                <1>     dec al
   350 00000A72 FECB                <1>     dec bl
   351 00000A74 38C3                <1>     cmp bl, al
   352 00000A76 0F47C3              <1>     cmova eax, ebx    ;If bl > al, move bl to al
   353 00000A79 38C2                <1>     cmp dl, al  ;If dl is bigger than al
   354 00000A7B 7707                <1>     ja .error
   355 00000A7D 8815(F2000000)      <1>     mov byte [currentDrv], dl   ;Only save dl if it is a valid number
   356 00000A83 C3                  <1>     ret ;al = lastdrv as retcode
   357                              <1> .error:
   358 00000A84 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
   359 00000A8B 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   360 00000A93 B80F000000          <1>     mov eax, 15                 ;Invalid drive error
   361 00000A98 668905(CC000000)    <1>     mov word [errorExt], ax     
   362 00000A9F C605(CB000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   363 00000AA6 C605(CF000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   364 00000AAD C605(CE000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   365 00000AB4 C3                  <1>     ret
   366                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   367 00000AB5 8A05(F2000000)      <1>     mov al, byte [currentDrv]
   368 00000ABB C3                  <1>     ret
   369                              <1> FATinfoDefault:    ;ah = 1Bh
   370 00000ABC 30D2                <1>     xor dl, dl
   371                              <1> FATinfoDevice:     ;ah = 1Ch
   372                              <1> ;Return in:
   373                              <1> ;   al = Number of sectors per cluster
   374                              <1> ;   edx = Number of clusters
   375                              <1> ;   cx =  Size of a clsuter
   376 00000ABE 84D2                <1>     test dl, dl
   377 00000AC0 7408                <1>     jz .fidSkipdefault
   378 00000AC2 8A15(F2000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   379 00000AC8 EB02                <1>     jmp short .fidMain
   380                              <1> .fidSkipdefault:
   381 00000ACA FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   382                              <1> .fidMain:
   383                              <1> ;Walk the dpb chain manually
   384 00000ACC E8DFFCFFFF          <1>     call findDPB    ;Get in rbp the dpb pointer for drive dl
   385 00000AD1 84C0                <1>     test al, al
   386 00000AD3 7431                <1>     jz .fidDPBFound
   387                              <1> ;Else, we at an error.
   388                              <1> ;Simply return with CY set and error code in al with extended error info
   389 00000AD5 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
   390 00000ADC 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   391 00000AE4 B80F000000          <1>     mov eax, 15                 ;Invalid drive error
   392 00000AE9 668905(CC000000)    <1>     mov word [errorExt], ax     
   393 00000AF0 C605(CB000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   394 00000AF7 C605(CF000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   395 00000AFE C605(CE000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   396 00000B05 C3                  <1>     ret
   397                              <1> .fidDPBFound:
   398 00000B06 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   399 00000B09 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   400 00000B0B 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   401 00000B0E 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   402 00000B11 BB01000000          <1>     mov ebx, 1
   403 00000B16 D3E3                <1>     shl ebx, cl
   404 00000B18 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   405 00000B1A 488D5D22            <1>     lea rbx, qword [rbp + dpb.bMediaDescriptor]
   406 00000B1E 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
   407 00000B25 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   408 00000B29 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   409 00000B2D 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   410 00000B31 C3                  <1>     ret
   411                              <1> ;===============================
   412                              <1> setIntVector:      ;ah = 25h
   413                              <1> ;Called with:
   414                              <1> ;   rdx = Pointer to interrupt handler
   415                              <1> ;   al = Interrupt number
   416 00000B32 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   417 00000B34 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   418                              <1> ;First call to get default BIOS segement selector and attribute word
   419 00000B3A 88C3                <1>     mov bl, al  ;Set interrupt number 
   420 00000B3C B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   421 00000B41 CD35                <1>     int 35h
   422 00000B43 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   423 00000B45 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   424                              <1> ;dx preserves the attribute word
   425 00000B47 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
   426 00000B4E 488B5D18            <1>     mov rbx, qword [rbp + callerFrame.rdx]  ;Pointer passed in rdx
   427 00000B52 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   428 00000B57 CD35                <1>     int 35h
   429                              <1> 
   430 00000B59 8A4500              <1>     mov al, byte [rbp + callerFrame.rax]    ;Preserve low byte of rax
   431 00000B5C C3                  <1>     ret
   432                              <1> createNewPSP:      ;ah = 26h
   433 00000B5D C3                  <1>     ret
   434                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   435 00000B5E 8805(F4000000)      <1>     mov byte [verifyFlag], al
   436 00000B64 8025(F4000000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   437 00000B6B C3                  <1>     ret
   438                              <1> getDOSversion:     ;ah = 30h
   439 00000B6C 488B15(09010000)    <1>     mov rdx, qword [oldRSP]
   440 00000B73 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   441 00000B75 886209              <1>     mov byte [rdx + callerFrame.rbx + 1], ah    ;Clear bh 
   442 00000B78 668B0581F4FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   443 00000B7F 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save ax
   444 00000B82 C3                  <1>     ret
   445                              <1> terminateStayRes:  ;ah = 31h
   446 00000B83 C3                  <1>     ret
   447                              <1> ;-------------------------------------------
   448                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply calls int 41h ah = 32h with dl = 0
   449 00000B84 30D2                <1>     xor dl, dl
   450                              <1> getDeviceDPBptr:   ;ah = 32h
   451                              <1> ;On entry: dl = Drive number
   452                              <1> ;On exit: rbx = DPB pointer
   453 00000B86 84D2                <1>     test dl, dl
   454 00000B88 7508                <1>     jnz .gddpskipdefault
   455 00000B8A 8A15(F2000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   456 00000B90 EB02                <1>     jmp short .gddpcommon
   457                              <1> .gddpskipdefault:
   458                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   459 00000B92 FECA                <1>     dec dl
   460                              <1> .gddpcommon:
   461 00000B94 E817FCFFFF          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
   462 00000B99 84C0                <1>     test al, al
   463 00000B9B 741F                <1>     jz .gddpMediaCheck
   464                              <1> ;Put in here error info
   465 00000B9D 66C705(CC000000)0F- <1>     mov word [errorExt], 15 ;Invalid drive spec
   465 00000BA5 00                  <1>
   466 00000BA6 C605(CB000000)02    <1>     mov byte [errorLocus], 2    ;Block device driver
   467 00000BAD C605(CF000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   468 00000BB4 C605(CE000000)07    <1>     mov byte [errorAction], 7   ;Retry after intervention
   469 00000BBB C3                  <1>     ret ;Return. al = -1
   470                              <1> .gddpMediaCheck:
   471                              <1> ;Media Check Section
   472 00000BBC C605(36000000)17    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   473 00000BC3 8815(37000000)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.unitnm], dl
   474 00000BC9 C605(38000000)01    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   475 00000BD0 66C705(39000000)00- <1>     mov word [diskReqHdr + mediaCheckReqPkt.status], 0
   475 00000BD8 00                  <1>
   476 00000BD9 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   477 00000BDC 8805(43000000)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.medesc], al
   478 00000BE2 88D0                <1>     mov al, dl  ;Save device number in al
   479 00000BE4 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr]
   480 00000BE8 488D1D(36000000)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   481 00000BEF FF520A              <1>     call [rdx + drvHdr.strPtr]
   482 00000BF2 FF5212              <1>     call [rdx + drvHdr.intPtr]
   483 00000BF5 66F705(39000000)00- <1>     test word [diskReqHdr + mediaCheckReqPkt.status], 8000h
   483 00000BFD 80                  <1>
   484 00000BFE 0F85EA000000        <1>     jnz .gddpError
   485 00000C04 88C2                <1>     mov dl, al
   486 00000C06 803D(44000000)01    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 1 ;Certified no change
   487 00000C0D 0F84B0000000        <1>     je .gddpretdbp
   488 00000C13 803D(44000000)00    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 0
   489 00000C1A 7512                <1>     jne .gddpBuildBPB   ;This means Media changed declared
   490 00000C1C E809F6FFFF          <1>     call findDirtyBufferForDrive
   491 00000C21 48F7C3FFFFFFFF      <1>     test rbx, -1    ;This is the case if no dirty buffers for drive
   492 00000C28 0F8595000000        <1>     jne .gddpretdbp ;If there is a dirty buffer for the drive, dont build bpb
   493                              <1> .gddpBuildBPB:
   494                              <1> ;BPB Build Section, only here if need a new bpb, i.e. sure of a new device
   495 00000C2E E8A7F5FFFF          <1>     call findLRUBuffer  ;Get lru buffer pointer in rbx
   496 00000C33 3A5308              <1>     cmp dl, byte [rbx + bufferHdr.driveNumber]  ;Does buffer belong to old drv?
   497 00000C36 7414                <1>     je .gddpBuildBPBInvalidateBuffer    ;Yes, immediately invalidate data
   498                              <1>     ;If no, flush the data to disk.
   499                              <1> .gddpBuildBPBFlush:
   500 00000C38 4889EE              <1>     mov rsi, rbp    ;Save rbp as pointer to old dl drive dpb
   501 00000C3B 4889DD              <1>     mov rbp, rbx    ;Get buffer header pointer in rbp
   502 00000C3E E844F5FFFF          <1>     call flushBuffer    ;Flush the buffer to disk, rbx preserved
   503 00000C43 4889F5              <1>     mov rbp, rsi    ;Return old drive dpb pointer to rbp
   504 00000C46 0F820F010000        <1>     jc .gddpErrorType2  ;rbx points to buffer header
   505                              <1> .gddpBuildBPBInvalidateBuffer:
   506                              <1>     ;Write new buffer header
   507 00000C4C 885308              <1>     mov byte [rbx + bufferHdr.driveNumber], dl
   508 00000C4F C6430908            <1>     mov byte [rbx + bufferHdr.bufferFlags], dataBuffer
   509 00000C53 48C7430A00000000    <1>     mov qword [rbx + bufferHdr.bufferLBA], 0
   510 00000C5B C6431201            <1>     mov byte [rbx + bufferHdr.bufFATcopy], 1
   511 00000C5F C7431300000000      <1>     mov dword [rbx + bufferHdr.bufFATsize], 0
   512 00000C66 48896B17            <1>     mov qword [rbx + bufferHdr.driveDPBPtr], rbp
   513 00000C6A 488D5B20            <1>     lea rbx, qword [rbx + bufferHdr.dataarea]
   514                              <1>     ;Build BPB request
   515 00000C6E C605(36000000)1E    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   516 00000C75 8815(37000000)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.unitnm], dl
   517 00000C7B C605(38000000)02    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   518 00000C82 66C705(39000000)00- <1>     mov word [diskReqHdr + bpbBuildReqPkt.status], 0 
   518 00000C8A 00                  <1>
   519 00000C8B 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   520 00000C8E 8805(43000000)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.medesc], al
   521 00000C94 48891D(44000000)    <1>     mov qword [diskReqHdr + bpbBuildReqPkt.bufptr], rbx ;Put lru pointer in rbx
   522 00000C9B 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   523 00000C9F 488D1D(36000000)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   524 00000CA6 FF520A              <1>     call [rdx + drvHdr.strPtr]
   525 00000CA9 FF5212              <1>     call [rdx + drvHdr.intPtr]
   526 00000CAC 66F705(39000000)00- <1>     test word [diskReqHdr + bpbBuildReqPkt.status], 8000h
   526 00000CB4 80                  <1>
   527 00000CB5 7537                <1>     jnz .gddpError
   528 00000CB7 488B35(4C000000)    <1>     mov rsi, qword [diskReqHdr + bpbBuildReqPkt.bpbptr]
   529                              <1>     ;rbp points to dpb so we good to go
   530                              <1>     ;Call int 41h ah=53h Build DPB without reentering Int 41h
   531                              <1>     ;Since this function doesnt modify the caller stack, it is safe to do so
   532 00000CBE E81B020000          <1>     call createDPB 
   533                              <1> .gddpretdbp: 
   534 00000CC3 C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Clear access flag
   535 00000CC7 488B15(09010000)    <1>     mov rdx, qword [oldRSP]
   536 00000CCE 48896A08            <1>     mov qword [rdx + callerFrame.rbx], rbp  ;Here, all paths have rbp as dpbptr
   537 00000CD2 30C0                <1>     xor al, al  ;Set al = 0 to indicate rbx=dpb pointer
   538 00000CD4 C3                  <1>     ret
   539                              <1> .gddpretdpbFail:
   540 00000CD5 488B15(09010000)    <1>     mov rdx, qword [oldRSP]
   541 00000CDC 48814A5801000000    <1>     or qword [rdx + callerFrame.flags], 1   ;Set CF=CY
   542 00000CE4 66C705(CC000000)53- <1>     mov word [errorExt], 83 ;Fail on INT 44h error code
   542 00000CEC 00                  <1>
   543 00000CED C3                  <1>     ret
   544                              <1> .gddpError:
   545                              <1> ;Abort, Retry, Ignore are the only acceptible responses
   546                              <1> ;Entered with rbp = dpb for failing drive
   547                              <1> ;             rdx = driver header that caused fault
   548 00000CEE 4889D6              <1>     mov rsi, rdx    ;rdx points to driver header in both cases
   549 00000CF1 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
   550 00000CF8 8A4318              <1>     mov al, byte [rbx + callerFrame.rdx]    ;Get low byte = dl = Drive number
   551 00000CFB 88C2                <1>     mov dl, al  ;Save in dl
   552 00000CFD 84C0                <1>     test al, al
   553 00000CFF 7508                <1>     jnz .gddpE0
   554 00000D01 8A05(F2000000)      <1>     mov al, byte [currentDrv]
   555 00000D07 EB02                <1>     jmp short .gddpE1
   556                              <1> .gddpE0:
   557 00000D09 FEC8                <1>     dec al
   558                              <1> .gddpE1:
   559 00000D0B B436                <1>     mov ah, 36h ;Read operation, data area, abort/retry/ignore, disk error
   560 00000D0D 668B3D(39000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   561 00000D14 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   562 00000D19 66893D(CC000000)    <1>     mov word [errorExt], di     ;Save driver error code
   563 00000D20 668105(CC000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   563 00000D28 00                  <1>
   564 00000D29 8805(CA000000)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   565 00000D2F C605(CB000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   566 00000D36 C605(CF000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad BPB or other) code
   567 00000D3D C605(CE000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   568 00000D44 E83FFAFFFF          <1>     call criticalDOSError   ;Critical error handler
   569 00000D49 84C0                <1>     test al, al
   570 00000D4B 0F8472FFFFFF        <1>     jz .gddpretdbp  ;Ignore error, return, rbp has old dpb pointer
   571 00000D51 3C01                <1>     cmp al, 1
   572 00000D53 0F842DFEFFFF        <1>     je getDeviceDPBptr ;Reenter the function, dl has drive code
   573 00000D59 CD43                <1>     int 43h ;Else, restart DOS
   574                              <1> .gddpErrorType2:
   575                              <1> ;Error flushing the old buffer
   576                              <1> ;   rbx = Buffer header for data transfer
   577 00000D5B B439                <1>     mov ah, 39h ;Write operation, abort/retry/ignore/fail, disk error
   578 00000D5D 807B0901            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dosBuffer
   579 00000D61 7414                <1>     je .gddpErrorType2main
   580 00000D63 80CC02              <1>     or ah, 2h   ;Set bit 1
   581 00000D66 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   582 00000D6A 740B                <1>     je .gddpErrorType2main
   583 00000D6C B43D                <1>     mov ah, 3Dh ;Set bit 2, clear bit 1
   584 00000D6E 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   585 00000D72 7403                <1>     je .gddpErrorType2main
   586 00000D74 80CC02              <1>     or ah, 2h   ;Set bit 2 and 1
   587                              <1> .gddpErrorType2main:    
   588 00000D77 668B3D(39000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   589 00000D7E 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   590 00000D83 66893D(CC000000)    <1>     mov word [errorExt], di     ;Save driver error code
   591 00000D8A 668105(CC000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   591 00000D92 00                  <1>
   592 00000D93 8A4308              <1>     mov al, byte [rbx + bufferHdr.driveNumber]
   593 00000D96 8805(CA000000)      <1>     mov byte [errorDrv], al
   594 00000D9C C605(CB000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   595 00000DA3 C605(CF000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad disk write) code
   596 00000DAA C605(CE000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   597 00000DB1 488B7317            <1>     mov rsi, qword [rbx + bufferHdr.driveDPBPtr]
   598 00000DB5 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get device driver header in rsi
   599 00000DB9 E8CAF9FFFF          <1>     call criticalDOSError   ;Critical error handler
   600 00000DBE 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   601 00000DC2 7420                <1>     je .gddpErrorType2FatDir
   602 00000DC4 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   603 00000DC8 741A                <1>     je .gddpErrorType2FatDir
   604 00000DCA 84C0                <1>     test al, al
   605 00000DCC 0F847AFEFFFF        <1>     jz .gddpBuildBPBInvalidateBuffer ;Ignore error, invalidate data
   606 00000DD2 3C01                <1>     cmp al, 1
   607 00000DD4 0F845EFEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   608 00000DDA 3C03                <1>     cmp al, 3
   609 00000DDC 0F84F3FEFFFF        <1>     je .gddpretdpbFail
   610 00000DE2 CD43                <1>     int 43h ;al = 2, means just abort
   611                              <1> .gddpErrorType2FatDir:
   612 00000DE4 84C0                <1>     test al, al ;Ignore converted to fail
   613 00000DE6 0F84E9FEFFFF        <1>     jz .gddpretdpbFail
   614 00000DEC 3C01                <1>     cmp al, 1
   615 00000DEE 0F8444FEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   616 00000DF4 3C03                <1>     cmp al, 3
   617 00000DF6 0F84D9FEFFFF        <1>     je .gddpretdpbFail
   618 00000DFC CD43                <1>     int 43h ;al = 2, means just abort
   619                              <1> ;-------------------------------------------
   620                              <1> 
   621                              <1> ctrlBreakCheck:    ;ah = 33h
   622 00000DFE 84C0                <1>     test al, al
   623 00000E00 7406                <1>     jz .cbcget  ;Get the state
   624 00000E02 8815(F3000000)      <1>     mov byte [breakFlag], dl    ;Set the state
   625                              <1> .cbcget:
   626 00000E08 8A15(F3000000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   627 00000E0E C3                  <1>     ret
   628                              <1> getInDOSflagPtr:   ;ah = 34h
   629 00000E0F 488D15(C9000000)    <1>     lea rdx, inDOS
   630 00000E16 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
   631 00000E1D 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;save ptr in rbx
   632 00000E21 C3                  <1>     ret
   633                              <1> getIntVector:      ;ah = 35h
   634                              <1> ;Called with:
   635                              <1> ;   al = Interrupt Number
   636                              <1> ;Returns:
   637                              <1> ;   rbx = Pointer to interrupt handler
   638 00000E22 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   639 00000E24 B807F00000          <1>     mov eax, 0F007h
   640 00000E29 CD35                <1>     int 35h
   641 00000E2B 488B15(09010000)    <1>     mov rdx, qword [oldRSP]
   642 00000E32 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx  ;Save pointer in rbx
   643 00000E36 8A02                <1>     mov al, byte [rdx + callerFrame.rax]    ;Get the low byte in al
   644 00000E38 C3                  <1>     ret
   645                              <1> getDiskFreeSpace:  ;ah = 36h
   646 00000E39 84D2                <1>     test dl, dl
   647 00000E3B 7408                <1>     jz .gdfsSkipdefault
   648 00000E3D 8A15(F2000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   649 00000E43 EB02                <1>     jmp short .gdfsMain
   650                              <1> .gdfsSkipdefault:
   651 00000E45 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   652                              <1> .gdfsMain:
   653 00000E47 E864F9FFFF          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
   654 00000E4C 84C0                <1>     test al, al
   655 00000E4E 7434                <1>     jz .gdfsDPBFound
   656                              <1> ;Else, we at an error.
   657                              <1> ;Simply return with CY set and error code in al with extended error info
   658 00000E50 66C705(CC000000)0F- <1>     mov word [errorExt], 15     ;Invalid drive error
   658 00000E58 00                  <1>
   659 00000E59 C605(CB000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   660 00000E60 C605(CF000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   661 00000E67 C605(CE000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   662 00000E6E 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
   663 00000E75 66C74500FFFF        <1>     mov word [rbp + callerFrame.rax], -1    ;Set ax=FFFFh
   664 00000E7B 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set CF=CY
   665 00000E83 C3                  <1>     ret
   666                              <1> .gdfsDPBFound:
   667 00000E84 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   668 00000E87 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   669 00000E89 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   670 00000E8C 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   671 00000E8F BB01000000          <1>     mov ebx, 1
   672 00000E94 D3E3                <1>     shl ebx, cl
   673 00000E96 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   674 00000E98 8B5D30              <1>     mov ebx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   675 00000E9B 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
   676 00000EA2 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   677 00000EA6 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   678 00000EAA 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   679 00000EAE C3                  <1>     ret
   680                              <1> 
   681                              <1> loadExecChild:     ;ah = 4Bh, EXEC
   682                              <1> terminateClean:    ;ah = 4Ch, EXIT
   683                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   684 00000EAF C3                  <1>     ret
   685                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   686 00000EB0 48891D(D8000000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   687 00000EB7 C3                  <1>     ret
   688                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   689 00000EB8 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
   690 00000EBF 488B15(D8000000)    <1>     mov rdx, qword [currentPSP]
   691 00000EC6 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx   ;Set the caller pointer
   692 00000ECA C3                  <1>     ret 
   693                              <1> getSysVarsPtr:     ;ah = 52h
   694 00000ECB 488D15(68000000)    <1>     lea rdx, sysVarsPtr
   695 00000ED2 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
   696 00000ED9 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx
   697 00000EDD C3                  <1>     ret
   698                              <1> createDPB:         ;ah = 53h, generates a DPB from a given BPB
   699                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   700                              <1> ;This is done so that the other fields of the DPB can be recycled
   701                              <1> ;Input: rsi = ptr to the BPB
   702                              <1> ;       rbp = ptr to the DPB
   703                              <1> ;bMediaDescriptor
   704 00000EDE 8A4615              <1>     mov al, byte [rsi + bpb.media]
   705 00000EE1 884522              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   706                              <1> ;bAccessFlag
   707 00000EE4 C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Not accessed
   708                              <1> ;dFirstFreeCluster
   709 00000EE8 C7452C00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   710                              <1> ;dNumberOfFreeClusters
   711 00000EEF C74530FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   712                              <1> ;bBytesPerSectorShift
   713 00000EF6 668B460B            <1>     mov ax, word [rsi + bpb.bytsPerSec]
   714 00000EFA B107                <1>     mov cl, 7   ;Start with 128 byte sectors (not supported, min 512)
   715 00000EFC 66D3E8              <1>     shr ax, cl  ;Shift down
   716                              <1> .cd0:
   717 00000EFF 66D1E8              <1>     shr ax, 1
   718 00000F02 7404                <1>     jz .cd1
   719 00000F04 FEC1                <1>     inc cl
   720 00000F06 EBF7                <1>     jmp short .cd0
   721                              <1> .cd1:
   722 00000F08 884D02              <1>     mov byte [rbp + dpb.bBytesPerSectorShift], cl
   723                              <1> ;bMaxSectorInCluster
   724 00000F0B 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   725 00000F0E FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   726 00000F10 884503              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   727                              <1> ;bSectorsPerClusterShift
   728 00000F13 FEC0                <1>     inc al
   729 00000F15 30C9                <1>     xor cl, cl
   730                              <1> .cd2:
   731 00000F17 D0E8                <1>     shr al, 1
   732 00000F19 7404                <1>     jz .cd3
   733 00000F1B FEC1                <1>     inc cl
   734 00000F1D EBF8                <1>     jmp short .cd2
   735                              <1> .cd3:
   736 00000F1F 884D04              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   737                              <1> ;wFAToffset, number of reserved sectors in partition
   738 00000F22 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   739 00000F26 66894505            <1>     mov word [rbp + dpb.wFAToffset], ax
   740                              <1> ;bNumberOfFATs
   741 00000F2A 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   742 00000F2D 884507              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   743                              <1> ;wNumberRootDirSectors
   744 00000F30 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   745 00000F34 C1E005              <1>     shl eax, 5  ;Multiply by 32
   746 00000F37 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   747 00000F3B FFC9                <1>     dec ecx
   748 00000F3D 01C8                <1>     add eax, ecx
   749 00000F3F 31D2                <1>     xor edx, edx    ;Clear for divide
   750 00000F41 F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   751 00000F43 66894508            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   752                              <1> ;dFATlength, get the FAT length
   753 00000F47 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   754 00000F4B 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   755 00000F4E 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   756 00000F50 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   757 00000F53 894512              <1>     mov dword [rbp + dpb.dFATlength], eax
   758                              <1> ;Complex cases below...
   759                              <1> ;dClusterHeapOffset, start sector of the data area
   760 00000F56 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   761 00000F5A 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   762 00000F5D 85C0                <1>     test eax, eax
   763 00000F5F 0F44C3              <1>     cmovz eax, ebx
   764                              <1> ;eax = FATsz
   765 00000F62 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   766 00000F66 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   767 00000F69 85DB                <1>     test ebx, ebx
   768 00000F6B 0F44D9              <1>     cmovz ebx, ecx 
   769                              <1> ;ebx = TotSec
   770 00000F6E 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   771 00000F71 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   772                              <1> .cd4:
   773 00000F73 01C2                <1>     add edx, eax
   774 00000F75 FEC9                <1>     dec cl
   775 00000F77 75FA                <1>     jnz .cd4
   776 00000F79 89D0                <1>     mov eax, edx    ;Store product in eax
   777 00000F7B 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   778 00000F7F 01D0                <1>     add eax, edx
   779 00000F81 0FB75508            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   780 00000F85 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   781                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   782                              <1>     ;aka eax = Start sector of the data area in volume
   783 00000F87 89450A              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   784                              <1> ;dClusterCount
   785 00000F8A 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   786 00000F8C 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   787 00000F8E 31D2                <1>     xor edx, edx
   788 00000F90 BB01000000          <1>     mov ebx, 1
   789 00000F95 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   790 00000F98 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   791 00000F9A F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   792 00000F9C FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   793 00000F9E 89450E              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   794                              <1> ;dFirstUnitOfRootDir
   795 00000FA1 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   796 00000FA6 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   797 00000FA9 7709                <1>     ja .cd5
   798                              <1>     ;Else, we need to find the first sector of the root directory
   799                              <1>     ;Get the start sector of data area in volume 
   800                              <1>     ; and sub the number of sectors in the root directory
   801 00000FAB 8B450A              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   802 00000FAE 0FB75D08            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   803 00000FB2 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   804                              <1> .cd5:
   805 00000FB4 894516              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   806                              <1> ;Exit epilogue
   807 00000FB7 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
   808 00000FBE 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   809 00000FC0 C3                  <1>     ret
   810                              <1> getVerifySetting:  ;ah = 54h
   811 00000FC1 8A05(F4000000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   812 00000FC7 C3                  <1>     ret
   813                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   814 00000FC8 C3                  <1>     ret
   815                              <1> getExtendedError:  ;ah = 59h
   816 00000FC9 488B15(09010000)    <1>     mov rdx, qword [oldRSP]
   817 00000FD0 668B05(CC000000)    <1>     mov ax, word [errorExt]
   818 00000FD7 8A2D(CB000000)      <1>     mov ch, byte [errorLocus]
   819 00000FDD 8A3D(CF000000)      <1>     mov bh, byte [errorClass]
   820 00000FE3 8A1D(CE000000)      <1>     mov bl, byte [errorAction]
   821 00000FE9 668902              <1>     mov word [rdx + callerFrame.rax], ax
   822 00000FEC 66895A08            <1>     mov word [rdx + callerFrame.rbx], bx
   823 00000FF0 886A11              <1>     mov byte [rdx + callerFrame.rcx + 1], ch
   824 00000FF3 C3                  <1>     ret
   825                              <1> getCritErrorInfo:  ;ah = 5Dh
   826                              <1> networkServices:   ;ah = 5Eh, do nothing
   827                              <1> networkRedirection:;ah = 5Fh, do nothing
   828 00000FF4 C3                  <1>     ret
   829                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   830 00000FF5 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
   831 00000FFC 488B15(D8000000)    <1>     mov rdx, qword [currentPSP]
   832 00001003 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;Save the current psp in rbx
   833 00001007 C3                  <1>     ret
   834                              <1>                     ;ah = 63h, reserved
   835                              <1> setDriverLookahead:;ah = 64h, reserved
   836                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   837                              <1> return:
   838 00001008 C3                  <1>     ret
   839                              <1> 
   840                              <1> kernelDispatchTable:
   841 00001009 [CD09000000000000]  <1>     dq simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   842 00001011 [9604000000000000]  <1>     dq stdinReadEcho       ;AH = 01H, CHAR IO
   843 00001019 [0B05000000000000]  <1>     dq stdoutWrite         ;AH = 02H, CHAR IO
   844 00001021 [4505000000000000]  <1>     dq stdauxRead          ;AH = 03H, CHAR IO
   845 00001029 [4505000000000000]  <1>     dq stdauxWrite         ;AH = 04H, CHAR IO
   846 00001031 [4505000000000000]  <1>     dq stdprnWrite         ;AH = 05H, CHAR IO
   847 00001039 [4505000000000000]  <1>     dq directCONIO         ;AH = 06H, CHAR IO
   848 00001041 [4505000000000000]  <1>     dq waitDirectInNoEcho  ;AH = 07H, CHAR IO
   849 00001049 [7F05000000000000]  <1>     dq waitStdinNoEcho     ;AH = 08H, CHAR IO
   850 00001051 [8005000000000000]  <1>     dq printString         ;AH = 09H, CHAR IO
   851 00001059 [C205000000000000]  <1>     dq buffStdinInput      ;AH = 0AH, CHAR IO
   852 00001061 [C205000000000000]  <1>     dq checkStdinStatus    ;AH = 0BH, CHAR IO
   853 00001069 [C205000000000000]  <1>     dq clearbuffDoFunc     ;AH = 0CH, CHAR IO
   854 00001071 [CE09000000000000]  <1>     dq diskReset           ;AH = 0DH, DISK MANAGEMENT
   855 00001079 [640A000000000000]  <1>     dq selectDisk          ;AH = 0EH, DISK MANAGEMENT
   856 00001081 [C205000000000000]  <1>     dq openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   857 00001089 [C205000000000000]  <1>     dq closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   858 00001091 [C205000000000000]  <1>     dq findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   859 00001099 [C205000000000000]  <1>     dq findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   860 000010A1 [C205000000000000]  <1>     dq deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   861 000010A9 [C205000000000000]  <1>     dq sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   862 000010B1 [C205000000000000]  <1>     dq sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   863 000010B9 [C205000000000000]  <1>     dq createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   864 000010C1 [C205000000000000]  <1>     dq renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   865 000010C9 [0810000000000000]  <1>     dq return              ;AH = 18H, RESERVED
   866 000010D1 [B50A000000000000]  <1>     dq getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   867 000010D9 [C305000000000000]  <1>     dq setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   868 000010E1 [BC0A000000000000]  <1>     dq FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   869 000010E9 [BE0A000000000000]  <1>     dq FATinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   870 000010F1 [0810000000000000]  <1>     dq return              ;AH = 1DH, RESERVED
   871 000010F9 [0810000000000000]  <1>     dq return              ;AH = 1EH, RESERVED
   872 00001101 [840B000000000000]  <1>     dq getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   873 00001109 [0810000000000000]  <1>     dq return              ;AH = 20H, RESERVED
   874 00001111 [D605000000000000]  <1>     dq randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   875 00001119 [D605000000000000]  <1>     dq randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   876 00001121 [D605000000000000]  <1>     dq getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   877 00001129 [D605000000000000]  <1>     dq setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   878 00001131 [320B000000000000]  <1>     dq setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   879 00001139 [5D0B000000000000]  <1>     dq createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   880 00001141 [D605000000000000]  <1>     dq randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   881 00001149 [D605000000000000]  <1>     dq randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   882 00001151 [D605000000000000]  <1>     dq parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   883 00001159 [8607000000000000]  <1>     dq getDate             ;AH = 2AH, TIME AND DATE
   884 00001161 [8607000000000000]  <1>     dq setDate             ;AH = 2BH, TIME AND DATE
   885 00001169 [8607000000000000]  <1>     dq getTime             ;AH = 2CH, TIME AND DATE
   886 00001171 [8607000000000000]  <1>     dq setTime             ;AH = 2DH, TIME AND DATE
   887 00001179 [5E0B000000000000]  <1>     dq setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   888 00001181 [D705000000000000]  <1>     dq getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   889 00001189 [6C0B000000000000]  <1>     dq getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   890 00001191 [830B000000000000]  <1>     dq terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   891 00001199 [860B000000000000]  <1>     dq getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   892 000011A1 [FE0D000000000000]  <1>     dq ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   893 000011A9 [0F0E000000000000]  <1>     dq getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   894 000011B1 [220E000000000000]  <1>     dq getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   895 000011B9 [390E000000000000]  <1>     dq getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   896 000011C1 [8707000000000000]  <1>     dq getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   897 000011C9 [8707000000000000]  <1>     dq getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   898 000011D1 [9504000000000000]  <1>     dq makeDIR             ;AH = 39H, DIRECTORY OPERATION
   899 000011D9 [9504000000000000]  <1>     dq removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   900 000011E1 [9504000000000000]  <1>     dq changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   901 000011E9 [EA05000000000000]  <1>     dq createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   902 000011F1 [EA05000000000000]  <1>     dq openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   903 000011F9 [EA05000000000000]  <1>     dq closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   904 00001201 [EB05000000000000]  <1>     dq readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   905 00001209 [2406000000000000]  <1>     dq writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   906 00001211 [3506000000000000]  <1>     dq deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
   907 00001219 [3506000000000000]  <1>     dq movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
   908 00001221 [3506000000000000]  <1>     dq changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
   909 00001229 [3506000000000000]  <1>     dq ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
   910 00001231 [3506000000000000]  <1>     dq duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
   911 00001239 [3506000000000000]  <1>     dq forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
   912 00001241 [9504000000000000]  <1>     dq getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
   913 00001249 [1A07000000000000]  <1>     dq allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
   914 00001251 [1A07000000000000]  <1>     dq freeMemory          ;AH = 49H, MEMORY MANAGEMENT
   915 00001259 [1A07000000000000]  <1>     dq reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
   916 00001261 [AF0E000000000000]  <1>     dq loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
   917 00001269 [AF0E000000000000]  <1>     dq terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
   918 00001271 [AF0E000000000000]  <1>     dq getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
   919 00001279 [3506000000000000]  <1>     dq findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
   920 00001281 [3506000000000000]  <1>     dq findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
   921 00001289 [B00E000000000000]  <1>     dq setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   922 00001291 [B80E000000000000]  <1>     dq getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   923 00001299 [CB0E000000000000]  <1>     dq getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   924 000012A1 [DE0E000000000000]  <1>     dq createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   925 000012A9 [C10F000000000000]  <1>     dq getVerifySetting    ;AH = 54H, DISK MANAGEMENT
   926 000012B1 [C80F000000000000]  <1>     dq createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   927 000012B9 [3506000000000000]  <1>     dq renameFile          ;AH = 56H, FILE OPERATION       HANDLE
   928 000012C1 [9504000000000000]  <1>     dq getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
   929 000012C9 [1A07000000000000]  <1>     dq getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
   930 000012D1 [C90F000000000000]  <1>     dq getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
   931 000012D9 [3506000000000000]  <1>     dq createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
   932 000012E1 [3506000000000000]  <1>     dq createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
   933 000012E9 [3506000000000000]  <1>     dq lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
   934 000012F1 [F40F000000000000]  <1>     dq getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   935 000012F9 [F40F000000000000]  <1>     dq networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
   936 00001301 [F40F000000000000]  <1>     dq networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
   937 00001309 [9504000000000000]  <1>     dq trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   938 00001311 [0810000000000000]  <1>     dq return              ;AH = 61H, RESERVED
   939 00001319 [F50F000000000000]  <1>     dq getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
   940 00001321 [0810000000000000]  <1>     dq return              ;AH = 63H, RESERVED
   941 00001329 [0810000000000000]  <1>     dq setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   942 00001331 [8707000000000000]  <1>     dq getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
   943 00001339 [8707000000000000]  <1>     dq getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
   944 00001341 [3506000000000000]  <1>     dq setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
   945 00001349 [3506000000000000]  <1>     dq commitFile          ;AH = 68H, FILE OPERATION       HANDLE
   946 00001351 [0810000000000000]  <1>     dq getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   947                              <1> kernelDispatchTableL  equ $ - kernelDispatchTable 
    25                                  %include "./Source/Misc/int44h.asm"
    26                              <1> critErrorHandler:   ;Int 44h
    27                              <1> ;User Stack in usage here, must be swapped to before this is called
    28                              <1> ;Entered with:  
    29                              <1> ;               AH = Critical Error Bitfield
    30                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    31                              <1> ;               Bit 6 - Reserved
    32                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    33                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    34                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    35                              <1> ;               Bits [2-1] = Affected Disk Error
    36                              <1> ;                     0 0   DOS area
    37                              <1> ;                     0 1   FAT area
    38                              <1> ;                     1 0   Directory area
    39                              <1> ;                     1 1   Data area
    40                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    41                              <1> ;               AL  = Failing drive number if AH[7] = 0
    42                              <1> ;               DIL = Error code for errorMsg
    43                              <1> ;               RSI = EA of Device Header for which device the error occured
    44                              <1> ;Return:
    45                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    46                              <1> ;                  = 1 - Retry the Operation    (Retry)
    47                              <1> ;                  = 2 - Terminate the Program  (Abort)
    48                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    49 00001359 53                  <1>     push rbx
    50 0000135A 51                  <1>     push rcx
    51 0000135B 52                  <1>     push rdx
    52 0000135C 57                  <1>     push rdi
    53 0000135D 56                  <1>     push rsi
    54 0000135E FC                  <1>     cld         ;Make String ops go forward
    55                              <1> 
    56 0000135F 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    57 00001362 488D155E020000      <1>     lea rdx, qword [.crlf]
    58 00001369 B409                <1>     mov ah, 09h ;Print String
    59 0000136B CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    60                              <1> 
    61 0000136D 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    62 00001373 B90C000000          <1>     mov ecx, 0Ch
    63 00001378 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    64 0000137A 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    65 0000137D 480FB7FF            <1>     movzx rdi, di
    66 00001381 4889FA              <1>     mov rdx, rdi    ;Copy error code
    67 00001384 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    68 00001388 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    69 0000138B 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    70 0000138E 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    71 00001395 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    72 00001399 B409                <1>     mov ah, 09h ;Print String
    73 0000139B CD41                <1>     int 41h     ;Call DOS to print first part of message
    74                              <1> 
    75 0000139D 488D1505020000      <1>     lea rdx, qword [.readmsg]
    76 000013A4 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    77 000013AB F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    78 000013AE 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    79 000013B2 B409                <1>     mov ah, 09h ;Print String
    80 000013B4 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    81                              <1> 
    82 000013B6 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    83 000013B9 0F85DF000000        <1>     jnz .charError
    84                              <1> ;Disk error continues here
    85 000013BF 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    86 000013C6 B409                <1>     mov ah, 09h
    87 000013C8 CD41                <1>     int 41h
    88 000013CA 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    89 000013CC 80C241              <1>     add dl, "A" ;Add ASCII code
    90 000013CF B402                <1>     mov ah, 02h ;Print char in dl
    91 000013D1 CD41                <1>     int 41h
    92                              <1> .userInput:
    93 000013D3 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
    94 000013DA B409                <1>     mov ah, 09h
    95 000013DC CD41                <1>     int 41h
    96                              <1> ;Abort, Retry, Ignore, Fail is word order
    97                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    98                              <1> .userAbort:
    99                              <1> ;Abort is always an option
   100 000013DE 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   101 000013E5 B409                <1>     mov ah, 09h
   102 000013E7 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   103                              <1> .userRetry:
   104 000013E9 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   105 000013EC 7416                <1>     jz .userIgnore    ;If clear, dont print message
   106 000013EE 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   107 000013F5 B409                <1>     mov ah, 09h
   108 000013F7 CD41                <1>     int 41h
   109 000013F9 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   110 00001400 B409                <1>     mov ah, 09h
   111 00001402 CD41                <1>     int 41h
   112                              <1> .userIgnore:
   113 00001404 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   114 00001407 7416                <1>     jz .userFail
   115 00001409 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   116 00001410 B409                <1>     mov ah, 09h
   117 00001412 CD41                <1>     int 41h
   118 00001414 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   119 0000141B B409                <1>     mov ah, 09h
   120 0000141D CD41                <1>     int 41h
   121                              <1> .userFail:
   122 0000141F F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   123 00001422 7416                <1>     jz .userMsgEnd
   124 00001424 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   125 0000142B B409                <1>     mov ah, 09h
   126 0000142D CD41                <1>     int 41h
   127 0000142F 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   128 00001436 B409                <1>     mov ah, 09h
   129 00001438 CD41                <1>     int 41h
   130                              <1> .userMsgEnd:
   131 0000143A 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   132 00001441 B409                <1>     mov ah, 09h
   133 00001443 CD41                <1>     int 41h
   134                              <1> ;Get user input now 
   135 00001445 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   136 00001447 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   137 0000144E B401                <1>     mov ah, 01h ;STDIN without Console Echo
   138 00001450 CD41                <1>     int 41h ;Get char in al
   139 00001452 3C61                <1>     cmp al, "a" ;Chack if lowercase
   140 00001454 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   141 00001456 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   142                              <1> .uip1:
   143 00001458 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   144 00001459 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   145 0000145B FFC1                <1>     inc ecx
   146 0000145D 81F904000000        <1>     cmp ecx, 4
   147 00001463 75F3                <1>     jne .uip1
   148 00001465 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   149                              <1> .validInput:
   150 0000146A 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   151                              <1> ;Now check if the input is permitted
   152 0000146C 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   153 0000146E 7427                <1>     je .cehExit
   154 00001470 84C0                <1>     test al, al ;Check if 0 => Ignore
   155 00001472 740F                <1>     je .viIgnore
   156 00001474 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   157 00001476 7416                <1>     je .viRetry
   158                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   159 00001478 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   160 0000147B 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   161 00001481 EB14                <1>     jmp short .cehExit
   162                              <1> .viIgnore:
   163 00001483 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   164 00001486 0F8447FFFFFF        <1>     jz .userInput
   165 0000148C EB09                <1>     jmp short .cehExit
   166                              <1> .viRetry:
   167 0000148E F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   168 00001491 0F843CFFFFFF        <1>     jz .userInput
   169                              <1> .cehExit:
   170 00001497 5E                  <1>     pop rsi
   171 00001498 5F                  <1>     pop rdi
   172 00001499 5A                  <1>     pop rdx
   173 0000149A 59                  <1>     pop rcx
   174 0000149B 5B                  <1>     pop rbx
   175 0000149C 48CF                <1>     iretq
   176                              <1> .charError:
   177 0000149E B908000000          <1>     mov ecx, 8  ;8 chars in device name
   178 000014A3 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   179                              <1> .ce1:
   180 000014AA AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   181 000014AB 88C2                <1>     mov dl, al  ;Move char into dl
   182 000014AD B402                <1>     mov ah, 02h
   183 000014AF CD41                <1>     int 41h ;Print char
   184 000014B1 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   185 000014B3 E91BFFFFFF          <1>     jmp .userInput
   186                              <1> 
   187                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   188 000014B8 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   188 000014C1 746563742024202020  <1>
   189 000014CA 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   189 000014D3 6E6974202420202020  <1>
   190 000014DC 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   190 000014E5 202420202020202020  <1>
   191 000014EE 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   191 000014F7 6F6D6D616E64202420  <1>
   192 00001500 446174612024202020- <1>             db "Data $            "       ;Error 4
   192 00001509 202020202020202020  <1>
   193 00001512 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   193 0000151B 737420242020202020  <1>
   194 00001524 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   194 0000152D 202020202020202020  <1>
   195 00001536 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   195 0000153F 656469612024202020  <1>
   196 00001548 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   196 00001551 7420466F756E642024  <1>
   197 0000155A 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   197 00001563 706572202420202020  <1>
   198 0000156C 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   198 00001575 6C7420242020202020  <1>
   199 0000157E 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   199 00001587 742024202020202020  <1>
   200 00001590 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   200 00001599 61696C757265202420  <1>
   201                              <1> 
   202 000015A2 64726976652024      <1> .drive      db "drive $"
   203 000015A9 6572726F7220726561- <1> .readmsg    db "error reading $"
   203 000015B2 64696E672024        <1>
   204 000015B8 6572726F7220777269- <1> .writemsg   db "error writing $"
   204 000015C1 74696E672024        <1>
   205 000015C7 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   206 000015CA 41626F727424        <1> .abortmsg   db "Abort$" 
   207 000015D0 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   208 000015D7 526574727924        <1> .retrymsg   db "Retry$"
   209 000015DD 4661696C24          <1> .failmsg    db "Fail$"
   210 000015E2 2C2024              <1> .betweenMsg db ", $"
   211 000015E5 3F2024              <1> .endMsg     db "? $"
   212 000015E8 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    26                                  %include "./Source/Drivers/drvData.asm"
    27                              <1> ;-----------------------------------:
    28                              <1> ;          Driver routines          :
    29                              <1> ;-----------------------------------:
    30                              <1> drivers:
    31                              <1> conHdr:
    32 000015EC [0E16000000000000]  <1>     dq auxHdr
    33 000015F4 1308                <1>     dw 0813h
    34 000015F6 [8C17000000000000]  <1>     dq commonStrat
    35 000015FE [9B17000000000000]  <1>     dq conDriver
    36 00001606 434F4E2020202020    <1>     db "CON     "
    37                              <1> auxHdr:
    38 0000160E [3016000000000000]  <1>     dq prnHdr
    39 00001616 0080                <1>     dw 08000h
    40 00001618 [8C17000000000000]  <1>     dq commonStrat
    41 00001620 [601A000000000000]  <1>     dq com1Intr
    42 00001628 4155582020202020    <1>     db "AUX     "
    43                              <1> prnHdr:
    44 00001630 [5216000000000000]  <1>     dq clkHdr
    45 00001638 40A0                <1>     dw 0A040h
    46 0000163A [9417000000000000]  <1>     dq nulStrat
    47 00001642 [9A17000000000000]  <1>     dq nulIntr
    48 0000164A 50524E2020202020    <1>     db "PRN     "
    49                              <1> clkHdr:
    50 00001652 [7416000000000000]  <1>     dq msdHdr
    51 0000165A 0880                <1>     dw 08008h
    52 0000165C [8C17000000000000]  <1>     dq commonStrat
    53 00001664 [D318000000000000]  <1>     dq clkDriver
    54 0000166C 434C4F434B242020    <1>     db "CLOCK$  "
    55                              <1> msdHdr:
    56 00001674 [9616000000000000]  <1>     dq com1Hdr
    57 0000167C 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    58 0000167E [8C17000000000000]  <1>     dq commonStrat
    59 00001686 [051C000000000000]  <1>     dq msdDriver
    60 0000168E 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    61                              <1> com1Hdr:
    62 00001696 [B816000000000000]  <1>     dq com2Hdr
    63 0000169E 0080                <1>     dw 08000h
    64 000016A0 [8C17000000000000]  <1>     dq commonStrat
    65 000016A8 [601A000000000000]  <1>     dq com1Intr
    66 000016B0 434F4D3120202020    <1>     db "COM1    "
    67                              <1> com2Hdr:
    68 000016B8 [DA16000000000000]  <1>     dq com3Hdr
    69 000016C0 0080                <1>     dw 08000h
    70 000016C2 [8C17000000000000]  <1>     dq commonStrat
    71 000016CA [691A000000000000]  <1>     dq com2Intr
    72 000016D2 434F4D3220202020    <1>     db "COM2    "
    73                              <1> com3Hdr:
    74 000016DA [FC16000000000000]  <1>     dq com4Hdr
    75 000016E2 0080                <1>     dw 08000h
    76 000016E4 [8C17000000000000]  <1>     dq commonStrat
    77 000016EC [721A000000000000]  <1>     dq com3Intr
    78 000016F4 434F4D3320202020    <1>     db "COM3    "
    79                              <1> com4Hdr:
    80 000016FC [1E17000000000000]  <1>     dq lpt1Hdr
    81 00001704 0080                <1>     dw 08000h
    82 00001706 [8C17000000000000]  <1>     dq commonStrat
    83 0000170E [7B1A000000000000]  <1>     dq com4Intr
    84 00001716 434F4D3420202020    <1>     db "COM4    "
    85                              <1> lpt1Hdr:
    86 0000171E [4017000000000000]  <1>     dq lpt2Hdr
    87 00001726 40A0                <1>     dw 0A040h
    88 00001728 [9417000000000000]  <1>     dq nulStrat
    89 00001730 [9A17000000000000]  <1>     dq nulIntr
    90 00001738 4C50543120202020    <1>     db "LPT1    "
    91                              <1> lpt2Hdr:
    92 00001740 [6217000000000000]  <1>     dq lpt3Hdr
    93 00001748 40A0                <1>     dw 0A040h
    94 0000174A [9417000000000000]  <1>     dq nulStrat
    95 00001752 [9A17000000000000]  <1>     dq nulIntr
    96 0000175A 4C50543220202020    <1>     db "LPT2    "
    97                              <1> lpt3Hdr:
    98 00001762 FFFFFFFFFFFFFFFF    <1>     dq -1
    99 0000176A 40A0                <1>     dw 0A040h
   100 0000176C [9417000000000000]  <1>     dq nulStrat
   101 00001774 [9A17000000000000]  <1>     dq nulIntr
   102 0000177C 4C50543320202020    <1>     dq "LPT3    "
   103 00001784 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    27                                  %include "./Source/Drivers/charDrv.asm"
    28                              <1> commonStrat:
    29                              <1> ;DOS calls this function with rbx=Ptr to request header
    30 0000178C 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    31 00001793 C3                  <1>     ret
    32                              <1> nulStrat:
    33 00001794 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    34                              <1> nulIntr:
    35 0000179A C3                  <1>     ret
    36                              <1> conDriver:
    37 0000179B 50                  <1>     push rax
    38 0000179C 53                  <1>     push rbx
    39 0000179D 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    40 000017A4 B003                <1>     mov al, 03h ;Unknown Command
    41 000017A6 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    42 000017AA 7735                <1>     ja .conWriteErrorCode ;If yes, error!
    43                              <1> 
    44 000017AC 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    45 000017AF 3C04                <1>     cmp al, 4
    46 000017B1 743D                <1>     jz .conRead
    47 000017B3 3C05                <1>     cmp al, 5
    48 000017B5 747F                <1>     jz .conNondestructiveRead
    49 000017B7 3C06                <1>     cmp al, 6
    50 000017B9 0F84A8000000        <1>     jz .conInputStatus
    51 000017BF 3C07                <1>     cmp al, 7
    52 000017C1 0F84B0000000        <1>     jz .conFlushInputBuffers
    53 000017C7 3C08                <1>     cmp al, 8
    54 000017C9 0F84CA000000        <1>     jz .conWrite
    55 000017CF 3C09                <1>     cmp al, 9
    56 000017D1 0F84C2000000        <1>     jz .conWrite
    57 000017D7 3C0A                <1>     cmp al, 0Ah
    58 000017D9 0F84E3000000        <1>     jz .conOutputStatus
    59 000017DF EB06                <1>     jmp short .conExit  ;All other valid functions return done
    60                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    61 000017E1 B480                <1>     mov ah, 80h ;Set error bit
    62 000017E3 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    63                              <1> .conExit:
    64 000017E7 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    65 000017ED 5B                  <1>     pop rbx
    66 000017EE 58                  <1>     pop rax
    67 000017EF C3                  <1>     ret
    68                              <1> .conRead:    ;Function 4
    69 000017F0 B005                <1>     mov al, 05h ;Bad request structure length?
    70 000017F2 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    71 000017F5 75EA                <1>     jne .conWriteErrorCode
    72                              <1> 
    73 000017F7 57                  <1>     push rdi
    74 000017F8 51                  <1>     push rcx
    75 000017F9 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    76 000017FD 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    77                              <1> .cre1:
    78 000017FF 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    79 00001802 741C                <1>     je .cre2
    80 00001804 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    81 0000180B 751A                <1>     jnz .cre3   ;No, get the buffer value
    82 0000180D 31C0                <1>     xor eax, eax
    83 0000180F CD36                <1>     int 36h
    84                              <1> .cre11:
    85 00001811 AA                  <1>     stosb
    86 00001812 84C0                <1>     test al, al ;Was the ascii code 0?
    87 00001814 7506                <1>     jnz .cre12  ;No, skip storing scancode
    88 00001816 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    89                              <1> .cre12:
    90 0000181C FFC1                <1>     inc ecx ;Inc chars stored in buffer
    91 0000181E EBDF                <1>     jmp short .cre1
    92                              <1> .cre2:
    93 00001820 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    94 00001823 59                  <1>     pop rcx
    95 00001824 5F                  <1>     pop rdi
    96 00001825 EBC0                <1>     jmp short .conExit
    97                              <1> .cre3:
    98 00001827 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    99 0000182D C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   100 00001834 EBDB                <1>     jmp short .cre11
   101                              <1> 
   102                              <1> .conNondestructiveRead:  ;Function 5
   103 00001836 B005                <1>     mov al, 05h ;Bad request structure length?
   104 00001838 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   105 0000183B 75A4                <1>     jne .conWriteErrorCode
   106 0000183D 803D8E00000000      <1>     cmp byte [.conBuf], 0
   107 00001844 7519                <1>     jnz .cnr2
   108 00001846 B401                <1>     mov ah, 01h     ;Get key if exists
   109 00001848 CD36                <1>     int 36h
   110 0000184A 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   111                              <1>     ;Keystroke available
   112                              <1> .cnr0:
   113 0000184C 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   114 0000184F E993FFFFFF          <1>     jmp .conExit
   115                              <1> .cnr1: ;No keystroke available
   116 00001854 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   117 0000185A E988FFFFFF          <1>     jmp .conExit
   118                              <1> .cnr2:
   119 0000185F 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   120 00001865 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   121                              <1> 
   122                              <1> .conInputStatus:         ;Function 6
   123 00001867 B005                <1>     mov al, 05h ;Bad request structure length?
   124 00001869 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   125 0000186C 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   126 00001872 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   127                              <1> 
   128                              <1> .conFlushInputBuffers:   ;Function 7
   129 00001877 B005                <1>     mov al, 05h ;Bad request structure length?
   130 00001879 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   131 0000187C 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   132 00001882 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   133                              <1> .cfib0:
   134 00001889 B401                <1>     mov ah, 01      ;Get buffer status
   135 0000188B CD36                <1>     int 36h
   136 0000188D 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   137 00001893 30E4                <1>     xor ah, ah
   138 00001895 CD36                <1>     int 36h ;Read key to flush from buffer
   139 00001897 EBF0                <1>     jmp short .cfib0
   140                              <1> 
   141                              <1> .conWrite:   ;Function 8 and 9
   142 00001899 B005                <1>     mov al, 05h ;Bad request structure length?
   143 0000189B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   144 0000189E 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   145                              <1> 
   146 000018A4 56                  <1>     push rsi
   147 000018A5 51                  <1>     push rcx
   148 000018A6 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   149 000018AA 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   150                              <1> .cw1: 
   151 000018AC 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   152 000018AF 7407                <1>     je .cw2
   153 000018B1 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   154 000018B2 CD49                <1>     int 49h ;Fast print char
   155 000018B4 FFC1                <1>     inc ecx
   156 000018B6 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   157                              <1> .cw2:
   158 000018B8 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   159 000018BB 59                  <1>     pop rcx
   160 000018BC 5E                  <1>     pop rsi
   161 000018BD E925FFFFFF          <1>     jmp .conExit
   162                              <1> .conOutputStatus:   ;Function 0Ah
   163 000018C2 B005                <1>     mov al, 05h ;Bad request structure length?
   164 000018C4 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   165 000018C7 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   166 000018CD E915FFFFFF          <1>     jmp .conExit
   167                              <1> 
   168 000018D2 00                  <1> .conBuf db 0    ;Single byte buffer
   169                              <1> clkDriver:
   170 000018D3 50                  <1>     push rax
   171 000018D4 53                  <1>     push rbx
   172 000018D5 51                  <1>     push rcx
   173 000018D6 52                  <1>     push rdx
   174 000018D7 56                  <1>     push rsi
   175 000018D8 55                  <1>     push rbp
   176 000018D9 488B1DA4FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   177 000018E0 B003                <1>     mov al, 03h ;Unknown Command
   178 000018E2 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   179 000018E6 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   180                              <1> 
   181 000018E8 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   182 000018EB 3C04                <1>     cmp al, 04h
   183 000018ED 7437                <1>     jz .clkRead
   184 000018EF 3C06                <1>     cmp al, 06h
   185 000018F1 0F8494000000        <1>     jz .clkInputStatus
   186 000018F7 3C07                <1>     cmp al, 07h
   187 000018F9 0F8498000000        <1>     jz .clkFlushInputBuffers
   188 000018FF 3C08                <1>     cmp al, 08h
   189 00001901 0F84A0000000        <1>     jz .clkWrite
   190 00001907 3C09                <1>     cmp al, 09h
   191 00001909 0F8498000000        <1>     jz .clkWrite
   192 0000190F EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   193                              <1> .clkNotFunctioning:
   194 00001911 B002                <1>     mov al, 02h ;Device not ready error
   195                              <1> .clkWriteErrorCode:
   196 00001913 B480                <1>     mov ah, 80h ;Set error bit
   197 00001915 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   198                              <1> .clkExit:
   199 00001919 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   200 0000191F 5D                  <1>     pop rbp
   201 00001920 5E                  <1>     pop rsi
   202 00001921 5A                  <1>     pop rdx
   203 00001922 59                  <1>     pop rcx
   204 00001923 5B                  <1>     pop rbx
   205 00001924 58                  <1>     pop rax
   206 00001925 C3                  <1>     ret
   207                              <1> 
   208                              <1> .clkRead:           ;Function 4
   209 00001926 B005                <1>     mov al, 05h ;Bad request structure length?
   210 00001928 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   211 0000192B 75E6                <1>     jne .clkWriteErrorCode
   212                              <1> 
   213 0000192D 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   214 00001930 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   215 00001934 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   216 0000193B 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   217 0000193F 30E4                <1>     xor ah, ah
   218 00001941 CD3A                <1>     int 3Ah         ;Read the system timer
   219 00001943 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   220 00001945 740D                <1>     jz .clkr1       ;Nope, now just time 
   221 00001947 30E4                <1>     xor ah, ah
   222                              <1>     ;This works as al should keep count of the # of days passed since last read
   223 00001949 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   224 0000194D 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   225                              <1> .clkr1:
   226 00001954 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   227 00001957 0FB7D2              <1>     movzx edx, dx
   228 0000195A 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   229 0000195C 89D0                <1>     mov eax, edx
   230 0000195E 31D2                <1>     xor edx, edx
   231 00001960 89D8                <1>     mov eax, ebx
   232 00001962 B944040000          <1>     mov ecx, 1092   
   233 00001967 F7F1                <1>     div ecx
   234 00001969 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   235 0000196C 89D0                <1>     mov eax, edx    ;Get remainder in eax
   236 0000196E 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   237 00001972 31D2                <1>     xor edx, edx
   238 00001974 B95B000000          <1>     mov ecx, 91 ;5*18.2
   239 00001979 F7F1                <1>     div ecx
   240 0000197B 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   241 0000197E 89D0                <1>     mov eax, edx    ;Get remainder in eax
   242                              <1>     ;lea eax, dword [eax + 4*eax]
   243                              <1>     ;add eax, edx    ;Essentially multiply by 6
   244 00001980 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   245 00001983 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   246 00001986 E98EFFFFFF          <1>     jmp .clkExit
   247                              <1> 
   248                              <1> .clkInputStatus:    ;Function 6
   249                              <1> ;Always return ready
   250 0000198B B005                <1>     mov al, 05h ;Bad request structure length?
   251 0000198D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   252 00001990 7581                <1>     jne .clkWriteErrorCode
   253 00001992 E982FFFFFF          <1>     jmp .clkExit
   254                              <1> .clkFlushInputBuffers:  ;Function 7
   255                              <1> ;Always return done immediately
   256 00001997 B005                <1>     mov al, 05h ;Bad request structure length?
   257 00001999 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   258 0000199C 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   259 000019A2 E972FFFFFF          <1>     jmp .clkExit
   260                              <1> 
   261                              <1> .clkWrite:          ;Functions 8 and 9
   262 000019A7 B005                <1>     mov al, 05h ;Bad request structure length?
   263 000019A9 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   264 000019AC 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   265                              <1> 
   266 000019B2 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   267 000019B5 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   268 000019B9 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   269 000019BD 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   270                              <1> 
   271 000019C4 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   272 000019C6 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   273 000019CA B105                <1>     mov cl, 5
   274 000019CC F6F1                <1>     div cl          ;Divide al by 5
   275 000019CE 30E4                <1>     xor ah, ah      ;Remove the remainder
   276 000019D0 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   277                              <1> ;Using the decimal part of this formula for the low count
   278                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   279 000019D2 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   280 000019D5 B912000000          <1>     mov ecx, 18
   281 000019DA F7E1                <1>     mul ecx  
   282 000019DC 01C3                <1>     add ebx, eax
   283                              <1> 
   284 000019DE 31D2                <1>     xor edx, edx
   285 000019E0 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   286 000019E4 B944040000          <1>     mov ecx, 1092
   287 000019E9 F7E1                <1>     mul ecx
   288 000019EB 01C3                <1>     add ebx, eax
   289 000019ED 89DA                <1>     mov edx, ebx    ;edx now has low count
   290 000019EF 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   291 000019F3 B401                <1>     mov ah, 01h     ;Set the system time
   292 000019F5 CD3A                <1>     int 3Ah
   293                              <1> 
   294 000019F7 4889F3              <1>     mov rbx, rsi
   295 000019FA E91AFFFFFF          <1>     jmp .clkExit
   296                              <1> 
   297                              <1> .clkBCDtoHex:
   298                              <1> ;Converts a BCD value to a Hex byte
   299                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   300 000019FF 51                  <1>     push rcx
   301 00001A00 0FB6C0              <1>     movzx eax, al   ;Zero extend
   302 00001A03 89C1                <1>     mov ecx, eax    ;Save al in ecx
   303 00001A05 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   304 00001A0A 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   305 00001A10 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   306                              <1> .cbth0:
   307 00001A13 050A000000          <1>     add eax, 10
   308 00001A18 E2F9                <1>     loop .cbth0
   309 00001A1A 59                  <1>     pop rcx
   310 00001A1B C3                  <1>     ret
   311                              <1> 
   312                              <1> .clkHexToBCD:
   313                              <1> ;Converts a Hex byte into two BCD digits
   314                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   315 00001A1C 51                  <1>     push rcx
   316 00001A1D 0FB6C0              <1>     movzx eax, al   ;Zero extend
   317 00001A20 31C9                <1>     xor ecx, ecx
   318                              <1> .chtb0:
   319 00001A22 3D0A000000          <1>     cmp eax, 10
   320 00001A27 7209                <1>     jb .chtb1
   321 00001A29 2D0A000000          <1>     sub eax, 10
   322 00001A2E FFC1                <1>     inc ecx
   323 00001A30 EBF0                <1>     jmp short .chtb0
   324                              <1> .chtb1:
   325 00001A32 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   326 00001A35 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   327 00001A37 59                  <1>     pop rcx
   328 00001A38 C3                  <1>     ret
   329 00001A39 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   330                              <1> ;When counting the number of days, first compute the number of years since
   331                              <1> ; 1980 and your year. 
   332                              <1> ;Then, using the table below, find the number of leap years between 1980
   333                              <1> ; and (YourYear - 1). 
   334                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   335                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   336                              <1> ;Use the months table to get the number of days in a normal month as leap 
   337                              <1> ; years are added using the previous comment.
   338                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   339                              <1> ; a leap year using the table. If it is, add an extra day.
   340                              <1> .clkLeapYears:
   341 00001A3B 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   341 00001A44 24282C30            <1>
   342 00001A48 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   342 00001A51 585C60              <1>
   343                              <1> .clkMonths:
   344 00001A54 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   344 00001A5D 1F1E1F              <1>
   345                              <1> ;COM Driver headers and main interrupt strat
   346                              <1> com1Intr:
   347 00001A60 C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   348 00001A67 EB19                <1>     jmp short comIntr
   349                              <1> com2Intr:
   350 00001A69 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   351 00001A70 EB10                <1>     jmp short comIntr
   352                              <1> com3Intr:
   353 00001A72 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   354 00001A79 EB07                <1>     jmp short comIntr
   355                              <1> com4Intr:
   356 00001A7B C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   357                              <1> comIntr:
   358 00001A82 50                  <1>     push rax
   359 00001A83 53                  <1>     push rbx
   360 00001A84 51                  <1>     push rcx
   361 00001A85 52                  <1>     push rdx
   362 00001A86 56                  <1>     push rsi
   363 00001A87 57                  <1>     push rdi
   364 00001A88 488B1DF5FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   365 00001A8F B003                <1>     mov al, 03h ;Unknown Command
   366 00001A91 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   367 00001A95 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   368                              <1> 
   369 00001A97 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   370 00001A9A 3C04                <1>     cmp al, 4   ;Read Character(s)
   371 00001A9C 7462                <1>     jz .comRead
   372 00001A9E 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   373 00001AA0 0F849B000000        <1>     jz .comNondestructiveRead   
   374 00001AA6 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   375 00001AA8 0F8484000000        <1>     jz .comReadInputStatus
   376 00001AAE 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   377 00001AB0 0F84B9000000        <1>     jz .comFlushInputBuffers
   378 00001AB6 3C08                <1>     cmp al, 8
   379 00001AB8 0F84DB000000        <1>     jz .comWrite
   380 00001ABE 3C09                <1>     cmp al, 9
   381 00001AC0 0F84D3000000        <1>     jz .comWrite
   382 00001AC6 3C0A                <1>     cmp al, 0Ah
   383 00001AC8 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   384 00001ACE EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   385                              <1> .comErrorNoCount:
   386 00001AD0 B002                <1>     mov al, 02h ;Unknown device
   387 00001AD2 EB19                <1>     jmp short .comWriteErrorCode
   388                              <1> .comReadError:
   389 00001AD4 BA0B000000          <1>     mov edx, 0Bh
   390                              <1> .comWriteError:
   391 00001AD9 BA0A000000          <1>     mov edx, 0Ah
   392                              <1> .comError:
   393 00001ADE 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   394 00001AE1 B902000000          <1>     mov ecx, 02h    ;Unknown device
   395 00001AE6 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   396 00001AE8 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   397 00001AEB 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   398                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   399 00001AED B480                <1>     mov ah, 80h ;Set error bit
   400 00001AEF 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   401                              <1> .comExit:
   402 00001AF3 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   403 00001AF9 5F                  <1>     pop rdi
   404 00001AFA 5E                  <1>     pop rsi
   405 00001AFB 5A                  <1>     pop rdx
   406 00001AFC 59                  <1>     pop rcx
   407 00001AFD 5B                  <1>     pop rbx
   408 00001AFE 58                  <1>     pop rax
   409 00001AFF C3                  <1>     ret
   410                              <1> 
   411                              <1> .comRead:
   412 00001B00 B005                <1>     mov al, 05h ;Bad request structure length?
   413 00001B02 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   414 00001B05 75E6                <1>     jne .comWriteErrorCode
   415                              <1> 
   416 00001B07 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   417 00001B0B 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   418                              <1> .cr1:
   419 00001B0D 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   420 00001B10 741B                <1>     je .cre2
   421                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   422 00001B12 B802000000          <1>     mov eax, 02h    ;Recieve 
   423 00001B17 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   424 00001B1D 6698                <1>     cbw     ;Zero extend to upper byte
   425 00001B1F CD34                <1>     int 34h ;Recieve Char
   426 00001B21 72BB                <1>     jc .comError
   427 00001B23 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   428 00001B26 74EA                <1>     je .cr11
   429 00001B28 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   430 00001B29 FFC1                <1>     inc ecx
   431 00001B2B EBE0                <1>     jmp short .cr1
   432                              <1> .cre2:
   433 00001B2D 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   434 00001B30 EBC1                <1>     jmp short .comExit
   435                              <1> 
   436                              <1> .comReadInputStatus:
   437 00001B32 B005                <1>     mov al, 05h ;Bad request structure length?
   438 00001B34 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   439 00001B37 75B4                <1>     jne .comWriteErrorCode
   440 00001B39 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   441 00001B3F EBB2                <1>     jmp short .comExit
   442                              <1> 
   443                              <1> .comNondestructiveRead:
   444                              <1> ;Acts like a "read one character if there is one" function
   445 00001B41 B005                <1>     mov al, 05h ;Bad request structure length?
   446 00001B43 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   447 00001B46 75A5                <1>     jne .comWriteErrorCode
   448                              <1> .cndr1:
   449 00001B48 B802000000          <1>     mov eax, 02h    ;Recieve 
   450 00001B4D 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   451 00001B53 6698                <1>     cbw     ;Zero extend to upper byte
   452 00001B55 CD34                <1>     int 34h ;Recieve Char
   453 00001B57 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   454 00001B5D 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   455 00001B60 7405                <1>     je .cndr2
   456 00001B62 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   457 00001B65 EB8C                <1>     jmp short .comExit
   458                              <1> .cndr2:
   459 00001B67 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   460 00001B6D EB84                <1>     jmp short .comExit
   461                              <1> 
   462                              <1> .comFlushInputBuffers:
   463 00001B6F B005                <1>     mov al, 05h ;Bad request structure length?
   464 00001B71 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   465 00001B74 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   466                              <1> .cfib0:
   467 00001B7A 8A1584000000        <1>     mov dl, byte [.comDevice]
   468 00001B80 6698                <1>     cbw
   469 00001B82 B802000000          <1>     mov eax, 02h    ;Recieve
   470 00001B87 CD34                <1>     int 34h
   471 00001B89 0F8241FFFFFF        <1>     jc .comErrorNoCount
   472 00001B8F 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   473 00001B92 75E6                <1>     jne .cfib0
   474 00001B94 E95AFFFFFF          <1>     jmp .comExit
   475                              <1> 
   476                              <1> .comWrite:
   477 00001B99 B005                <1>     mov al, 05h ;Bad request structure length?
   478 00001B9B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   479 00001B9E 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   480                              <1> 
   481 00001BA4 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   482 00001BA8 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   483                              <1> .cw1: 
   484 00001BAA 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   485 00001BAD 7417                <1>     je .cw2
   486 00001BAF AC                  <1>     lodsb   ;Get char into al, and inc rsi
   487 00001BB0 B401                <1>     mov ah, 01h ;Move function number into ah
   488 00001BB2 8A154C000000        <1>     mov dl, byte [.comDevice]
   489 00001BB8 6698                <1>     cbw     ;Zero extend to upper byte
   490 00001BBA CD34                <1>     int 34h ;Transmit char
   491 00001BBC 0F821CFFFFFF        <1>     jc .comError
   492 00001BC2 FFC1                <1>     inc ecx
   493 00001BC4 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   494                              <1> .cw2:
   495 00001BC6 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   496 00001BC9 E925FFFFFF          <1>     jmp .comExit
   497                              <1> 
   498                              <1> .comOutputStatus:
   499                              <1> ;Read MODEM status
   500 00001BCE B005                <1>     mov al, 05h ;Bad request structure length?
   501 00001BD0 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   502 00001BD3 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   503                              <1> 
   504 00001BD9 8A1525000000        <1>     mov dl, byte [.comDevice]
   505 00001BDF 6698                <1>     cbw     ;Zero extend to upper byte
   506 00001BE1 B403                <1>     mov ah, 03h     ;Get status
   507 00001BE3 CD34                <1>     int 34h
   508 00001BE5 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   509 00001BEB 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   510 00001BF0 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   511 00001BF3 F7D0                <1>     not eax      ;Bitwise inversion
   512 00001BF5 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   513 00001BFA 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   514 00001BFF E9EFFEFFFF          <1>     jmp .comExit
   515 00001C04 00                  <1> .comDevice   db 0
    28                                  %include "./Source/Drivers/diskDrv.asm"
    29                              <1> msdDriver:
    30 00001C05 50                  <1>     push rax
    31 00001C06 53                  <1>     push rbx
    32 00001C07 51                  <1>     push rcx
    33 00001C08 52                  <1>     push rdx
    34 00001C09 56                  <1>     push rsi
    35 00001C0A 57                  <1>     push rdi
    36 00001C0B 55                  <1>     push rbp
    37 00001C0C 4150                <1>     push r8
    38 00001C0E 488B1D6FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    39 00001C15 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    40 00001C19 B003                <1>     mov al, drvBadCmd
    41 00001C1B 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    42 00001C21 B001                <1>     mov al, drvBadUnit 
    43 00001C23 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    44 00001C27 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    45 00001C2D 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    46 00001C34 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    47 00001C38 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    48 00001C3B 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    49 00001C3F 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    50 00001C43 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    51 00001C45 488D0D9A000000      <1>     lea rcx, .msdTable
    52 00001C4C 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    53 00001C50 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    54 00001C52 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    55 00001C54 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    56 00001C57 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    57                              <1> .msdDriverExit:
    58 00001C59 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    59 00001C5F 4158                <1>     pop r8
    60 00001C61 5D                  <1>     pop rbp
    61 00001C62 5F                  <1>     pop rdi
    62 00001C63 5E                  <1>     pop rsi
    63 00001C64 5A                  <1>     pop rdx
    64 00001C65 59                  <1>     pop rcx
    65 00001C66 5B                  <1>     pop rbx
    66 00001C67 58                  <1>     pop rax
    67 00001C68 C3                  <1>     ret
    68                              <1> 
    69                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    70 00001C69 4889FB              <1>     mov rbx, rdi
    71 00001C6C 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    72 00001C6F 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    73 00001C71 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    74                              <1> ;Now fall through to general error
    75                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    76 00001C74 B401                <1>     mov ah, 01h
    77 00001C76 CD33                <1>     int 33h ;Read status of last operation
    78 00001C78 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    79 00001C7B B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    80 00001C7D 7460                <1>     je .msdWriteErrorCode 
    81 00001C7F B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    82 00001C81 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    83 00001C84 7459                <1>     je .msdWriteErrorCode 
    84 00001C86 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    85 00001C89 7454                <1>     je .msdWriteErrorCode
    86                              <1> ;Device Not Ready
    87 00001C8B B002                <1>     mov al, 02h  ;Device not ready code
    88 00001C8D 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    89 00001C90 744D                <1>     je .msdWriteErrorCode
    90 00001C92 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    91 00001C96 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    92                              <1> ;Write Protected
    93 00001C9A 30C0                <1>     xor al, al
    94 00001C9C 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
    95 00001CA1 743C                <1>     je .msdWriteErrorCode
    96                              <1> ;CRC Error
    97 00001CA3 B004                <1>     mov al, 04h     ;CRC error code
    98 00001CA5 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
    99 00001CAA 7433                <1>     je .msdWriteErrorCode
   100 00001CAC 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   101 00001CB1 742C                <1>     je .msdWriteErrorCode
   102 00001CB3 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   103 00001CB8 7425                <1>     je .msdWriteErrorCode
   104                              <1> ;Seek Error
   105 00001CBA B006                <1>     mov al, 06h     ;Seek error code
   106 00001CBC 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   107 00001CBF 741E                <1>     je .msdWriteErrorCode
   108                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   109                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   110 00001CC1 B007                <1>     mov al, 07h
   111 00001CC3 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   112 00001CC6 7417                <1>     je .msdWriteErrorCode
   113                              <1> ;Sector Not Found
   114 00001CC8 B008                <1>     mov al, 08h     ;Sector not found code
   115 00001CCA 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   116 00001CCD 7410                <1>     je .msdWriteErrorCode
   117                              <1> ;Write faults
   118 00001CCF B00A                <1>     mov al, 0Ah     ;Write fault
   119 00001CD1 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   120 00001CD4 7409                <1>     je .msdWriteErrorCode
   121                              <1> ;Read faults
   122 00001CD6 B00B                <1>     mov al, 0Bh     ;Read fault
   123 00001CD8 80F911              <1>     cmp cl, 11h     ;Read error
   124 00001CDB 7402                <1>     je .msdWriteErrorCode
   125                              <1> ;General Errors
   126 00001CDD B00C                <1>     mov al, 0Ch     ;Everything else is general error
   127                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   128 00001CDF B480                <1>     mov ah, 80h ;Set error bit
   129 00001CE1 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   130 00001CE5 C3                  <1>     ret ;Return to set done bit
   131                              <1> .msdTable:
   132 00001CE6 0000                <1>     dw 0                            ;Function 0
   133 00001CE8 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   134 00001CEA 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   135 00001CEC 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   136 00001CEE 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   137 00001CF0 0000                <1>     dw 0                            ;Function 5
   138 00001CF2 0000                <1>     dw 0                            ;Function 6
   139 00001CF4 0000                <1>     dw 0                            ;Function 7
   140 00001CF6 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   141 00001CF8 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   142 00001CFA 0000                <1>     dw 0                            ;Function 10
   143 00001CFC 0000                <1>     dw 0                            ;Function 11
   144 00001CFE C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   145 00001D00 D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   146 00001D02 ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   147 00001D04 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   148 00001D06 0000                <1>     dw 0                            ;Function 16
   149 00001D08 0000                <1>     dw 0                            ;Function 17
   150 00001D0A 0000                <1>     dw 0                            ;Function 18
   151 00001D0C 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   152 00001D0E 0000                <1>     dw 0                            ;Function 20
   153 00001D10 0000                <1>     dw 0                            ;Function 21
   154 00001D12 0000                <1>     dw 0                            ;Function 22
   155 00001D14 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   156 00001D16 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   157                              <1> 
   158                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   159                              <1> .msdMedChk:          ;Function 1
   160 00001D18 B005                <1>     mov al, 05h ;Bad request structure length
   161 00001D1A 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   162 00001D1D 75C0                <1>     jne .msdWriteErrorCode
   163                              <1> 
   164 00001D1F 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   165 00001D24 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   166 00001D2B 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   167 00001D2E F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   168 00001D31 753F                <1>     jnz .mmcNoChange
   169                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   170 00001D33 B416                <1>     mov ah, 16h 
   171 00001D35 CD33                <1>     int 33h
   172 00001D37 0F8237FFFFFF        <1>     jc .msdGenDiskError
   173 00001D3D 80FC80              <1>     cmp ah, 80h
   174 00001D40 740E                <1>     je .mmcNoChangeLine
   175 00001D42 80FC86              <1>     cmp ah, 86h
   176 00001D45 7409                <1>     je .mmcNoChangeLine
   177 00001D47 84E4                <1>     test ah, ah ;No change?
   178 00001D49 7427                <1>     jz .mmcNoChange
   179 00001D4B F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   180 00001D4E 750D                <1>     jnz .mmcChange
   181                              <1> ;If nothing, fall through and test manually, should never happen though
   182                              <1> .mmcNoChangeLine:
   183                              <1> ;Now we test Media Descriptor
   184 00001D50 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   185 00001D55 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   186 00001D58 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   187 00001D5B 7410                <1>     je .mmcUnsure
   188                              <1> .mmcChange:
   189 00001D5D C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   190 00001D61 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   191 00001D68 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   192                              <1>     ;Check here if there were any open handles on the device when it was changed
   193 00001D6C C3                  <1>     ret
   194                              <1> .mmcUnsure:
   195 00001D6D C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   196 00001D71 C3                  <1>     ret
   197                              <1> .mmcNoChange:
   198 00001D72 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   199 00001D76 C3                  <1>     ret
   200                              <1> 
   201                              <1> 
   202                              <1> .msdBuildBPB:        ;Function 2
   203 00001D77 B005                <1>     mov al, 05h ;Bad request structure length
   204 00001D79 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   205 00001D7C 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   206                              <1> 
   207 00001D82 4889DE              <1>     mov rsi, rbx
   208 00001D85 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   209 00001D8A 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   210 00001D91 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   211 00001D94 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   212 00001D98 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   213 00001D9A 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   214 00001D9D B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   215 00001DA2 CD33                <1>     int 33h
   216 00001DA4 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   217                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   218 00001DAA 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   219 00001DAE 7418                <1>     je .mbbpb0
   220 00001DB0 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   221 00001DB4 7412                <1>     je .mbbpb0
   222 00001DB6 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   223 00001DBA 740C                <1>     je .mbbpb0
   224 00001DBC 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   225 00001DC0 B007                <1>     mov al, 07h ;Unknown media error code
   226 00001DC2 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   227                              <1> .mbbpb0:
   228 00001DC8 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   229 00001DCB 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   230 00001DD0 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   231 00001DD7 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   232 00001DDB 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   233 00001DDE 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   234 00001DE2 B90F000000          <1>     mov ecx, bpbEx_size/8
   235 00001DE7 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   236 00001DEA C3                  <1>     ret
   237                              <1> .msdIOCTLRead:       ;Function 3, returns done
   238 00001DEB B005                <1>     mov al, drvBadDrvReq
   239 00001DED 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   240 00001DF0 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   241 00001DF6 C3                  <1>     ret
   242                              <1> .msdRead:            ;Function 4
   243                              <1> ;Will read one sector at a time.
   244 00001DF7 B005                <1>     mov al, 05h ;Bad request structure length
   245 00001DF9 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   246 00001DFC 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   247                              <1> 
   248 00001E02 4889DF              <1>     mov rdi, rbx
   249 00001E05 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   250                              <1> .msdr0:
   251 00001E07 B682                <1>     mov dh, 82h ;LBA Read Sectors
   252 00001E09 E841010000          <1>     call .msdBlkIOCommon
   253 00001E0E 0F8255FEFFFF        <1>     jc .msdIOError
   254 00001E14 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   255 00001E1C 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   256 00001E24 FFC6                <1>     inc esi
   257 00001E26 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   258 00001E29 75DC                <1>     jne .msdr0
   259 00001E2B 4889FB              <1>     mov rbx, rdi
   260 00001E2E C3                  <1>     ret
   261                              <1> .msdWrite:           ;Function 8
   262                              <1> ;Will write one sector at a time.
   263 00001E2F B005                <1>     mov al, 05h ;Bad request structure length
   264 00001E31 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   265 00001E34 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   266                              <1> 
   267 00001E3A 4889DF              <1>     mov rdi, rbx
   268 00001E3D 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   269                              <1> .msdw0:
   270 00001E3F B683                <1>     mov dh, 83h ;LBA Write Sectors
   271 00001E41 E809010000          <1>     call .msdBlkIOCommon
   272 00001E46 0F821DFEFFFF        <1>     jc .msdIOError
   273 00001E4C 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   274 00001E54 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   275 00001E5C FFC6                <1>     inc esi
   276 00001E5E 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   277 00001E61 75DC                <1>     jne .msdw0
   278 00001E63 4889FB              <1>     mov rbx, rdi
   279 00001E66 C3                  <1>     ret
   280                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   281                              <1> ;Will write one sector at a time and then verify it.
   282 00001E67 B005                <1>     mov al, 05h ;Bad request structure length
   283 00001E69 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   284 00001E6C 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   285                              <1> 
   286 00001E72 4889DF              <1>     mov rdi, rbx
   287 00001E75 31F6                <1>     xor esi, esi  ;Set counter to zero
   288                              <1> .msdwv0:
   289 00001E77 B683                <1>     mov dh, 83h ;LBA Write Sectors
   290 00001E79 E8D1000000          <1>     call .msdBlkIOCommon
   291 00001E7E 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   292 00001E84 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   293 00001E86 E8C4000000          <1>     call .msdBlkIOCommon
   294 00001E8B 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   295 00001E91 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   296 00001E99 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   297 00001EA1 FFC6                <1>     inc esi
   298 00001EA3 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   299 00001EA6 75CF                <1>     jne .msdwv0
   300 00001EA8 4889FB              <1>     mov rbx, rdi
   301 00001EAB C3                  <1>     ret
   302                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   303 00001EAC B005                <1>     mov al, drvBadDrvReq
   304 00001EAE 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   305 00001EB1 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   306                              <1> 
   307 00001EB7 C3                  <1>     ret
   308                              <1> .msdDevOpen:         ;Function 13
   309 00001EB8 B005                <1>     mov al, drvBadDrvReq
   310 00001EBA 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   311 00001EBD 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   312                              <1> 
   313 00001EC3 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   314 00001EC8 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   315 00001ECF FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   316 00001ED2 C3                  <1>     ret
   317                              <1> .msdDevClose:        ;Function 14
   318 00001ED3 B005                <1>     mov al, drvBadDrvReq
   319 00001ED5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   320 00001ED8 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   321                              <1> 
   322 00001EDE 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   323 00001EE3 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   324 00001EEA FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   325 00001EED C3                  <1>     ret
   326                              <1> .msdRemovableMedia:  ;Function 15
   327 00001EEE B005                <1>     mov al, drvBadDrvReq
   328 00001EF0 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   329 00001EF3 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   330                              <1> 
   331 00001EF9 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   332 00001EFE 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   333 00001F05 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   334 00001F08 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   335 00001F0D 31D2                <1>     xor edx, edx    ;Busy bit clear
   336 00001F0F A880                <1>     test al, 80h
   337 00001F11 0F44CA              <1>     cmovz ecx, edx
   338 00001F14 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   339 00001F18 C3                  <1>     ret
   340                              <1> .msdGenericIOCTL:    ;Function 19
   341 00001F19 B005                <1>     mov al, drvBadDrvReq
   342 00001F1B 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   343 00001F1E 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   344                              <1> 
   345 00001F24 C3                  <1>     ret
   346                              <1> .msdGetLogicalDev:   ;Function 23
   347 00001F25 B005                <1>     mov al, drvBadDrvReq
   348 00001F27 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   349 00001F2A 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   350                              <1> 
   351 00001F30 8A0541000000        <1>     mov al, byte [.msdCurDev]
   352 00001F36 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   353 00001F39 C3                  <1>     ret
   354                              <1> .msdSetLogicalDev:   ;Function 24
   355 00001F3A B005                <1>     mov al, drvBadDrvReq
   356 00001F3C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   357 00001F3F 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   358                              <1> 
   359 00001F45 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   360 00001F48 880529000000        <1>     mov byte [.msdCurDev], al
   361 00001F4E C3                  <1>     ret
   362                              <1> 
   363                              <1> .msdBlkIOCommon:  ;Does block IO
   364                              <1> ;Called with rdi containing old rbx value and ah with function number
   365                              <1> ;rbp points to bpb
   366                              <1> ;Error handled by caller
   367                              <1> ;Sector count handled by caller
   368                              <1> ;Called with dh = BIOS function number
   369 00001F4F 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   370 00001F54 8A90[781F0000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   371 00001F5A 31C9                <1>     xor ecx, ecx
   372 00001F5C 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   373 00001F5F 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   374 00001F63 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   375 00001F67 88F4                <1>     mov ah, dh
   376 00001F69 B001                <1>     mov al, 01h ;Do one sector at a time 
   377 00001F6B CD33                <1>     int 33h
   378 00001F6D C3                  <1>     ret
   379                              <1> 
   380 00001F6E 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   381                              <1> ;LASTDRIVE default is 5
   382                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   383                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   384 00001F77 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   385                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   386 00001F78 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   387 00001F7D 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   388 00001F82 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   388 00001F8B 000000000000000000- <1>
   388 00001F94 000000000000000000- <1>
   388 00001F9D 000000000000000000- <1>
   388 00001FA6 00000000            <1>
   389 00001FAA 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   389 00001FB3 000000000000000000- <1>
   389 00001FBC 000000000000000000- <1>
   389 00001FC5 000000000000000000- <1>
   389 00001FCE 000000000000000000- <1>
   389 00001FD7 000000000000000000- <1>
   389 00001FE0 000000000000000000- <1>
   389 00001FE9 000000000000000000- <1>
   389 00001FF2 000000000000000000- <1>
   389 00001FFB 000000000000000000- <1>
   389 00002004 000000000000000000- <1>
   389 0000200D 000000000000000000- <1>
   389 00002016 000000000000000000- <1>
   389 0000201F 000000000000000000- <1>
   389 00002028 000000000000000000- <1>
   389 00002031 000000000000000000- <1>
   389 0000203A 000000000000000000- <1>
   389 00002043 000000000000000000- <1>
   389 0000204C 000000000000000000- <1>
   389 00002055 000000000000000000- <1>
   389 0000205E 000000000000000000- <1>
   389 00002067 000000000000000000- <1>
   389 00002070 000000000000000000- <1>
   389 00002079 000000000000000000- <1>
   389 00002082 000000000000000000- <1>
   389 0000208B 000000000000000000- <1>
   389 00002094 000000000000000000- <1>
   389 0000209D 000000000000000000- <1>
   389 000020A6 000000000000000000- <1>
   389 000020AF 000000000000000000- <1>
   389 000020B8 000000000000000000- <1>
   389 000020C1 000000000000000000- <1>
   389 000020CA 000000000000000000- <1>
   389 000020D3 000000000000000000- <1>
   389 000020DC 000000000000000000- <1>
   389 000020E5 000000000000000000- <1>
   389 000020EE 000000000000000000- <1>
   389 000020F7 000000000000000000- <1>
   389 00002100 000000000000000000- <1>
   389 00002109 000000000000000000- <1>
   389 00002112 000000000000000000- <1>
   389 0000211B 000000000000000000- <1>
   389 00002124 000000000000000000- <1>
   389 0000212D 000000000000000000- <1>
   389 00002136 000000000000000000- <1>
   389 0000213F 000000000000000000- <1>
   389 00002148 000000000000000000- <1>
   389 00002151 000000000000000000- <1>
   389 0000215A 000000000000000000- <1>
   389 00002163 000000000000000000- <1>
   389 0000216C 000000000000000000- <1>
   389 00002175 000000000000000000- <1>
   389 0000217E 000000000000000000- <1>
   389 00002187 000000000000000000- <1>
   389 00002190 000000000000000000- <1>
   389 00002199 000000000000000000- <1>
   389 000021A2 000000000000000000- <1>
   389 000021AB 000000000000000000- <1>
   389 000021B4 000000000000000000- <1>
   389 000021BD 000000000000000000- <1>
   389 000021C6 000000000000000000- <1>
   389 000021CF 000000000000000000- <1>
   389 000021D8 000000000000000000- <1>
   389 000021E1 000000000000000000- <1>
   389 000021EA 000000000000000000- <1>
   389 000021F3 000000000000000000- <1>
   389 000021FC 000000000000        <1>
   390                              <1> 
   391                              <1> endptr equ $
    29                                  Segment dynamicDataArea nobits valign=1 vfollows=resSeg
    30                                  %include "./Source/BSS/dosDynaDataArea.asm"
    31                              <1> ;Create SFT header and corresponding array of five default sft entries
    32 00000000 <res Ah>            <1> firstSftHeader  resb sfth_size
    33 0000000A <res 3Dh>           <1> firstSft        resb sft_size
    34 00000047 <res 3Dh>           <1> secondSft       resb sft_size
    35 00000084 <res 3Dh>           <1> thirdSft        resb sft_size
    36 000000C1 <res 3Dh>           <1> fourthSft       resb sft_size
    37 000000FE <res 3Dh>           <1> fifthSft        resb sft_size
    38                              <1> 
    39                              <1> ;Create DPB chain of first 5 available DPB slots
    40                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    41 0000013B <res 34h>           <1> firstDPB        resb dpb_size
    42 0000016F <res 34h>           <1> secondDPB       resb dpb_size
    43                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    44                              <1> ;Always jettison this space
    45 000001A3 <res 34h>           <1> thirdDPB        resb dpb_size
    46 000001D7 <res 34h>           <1> fourthDPB       resb dpb_size
    47 0000020B <res 34h>           <1> fifthDPB        resb dpb_size 
    48                              <1> 
    49                              <1> ;Create a one drive CDS to keep track of drive A's current dir
    50                              <1> ;Replace once CONFGI.SYS has been read
    51 0000023F <res 5Bh>           <1> initCDS         resb cds_size 
    52                              <1> 
    53                              <1> 
    54 0000029A <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    55 000002BA <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    56                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    57                              <1> dynamicDataAreaLength equ $
