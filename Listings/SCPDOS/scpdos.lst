     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs and strucs
     5                                  %include "./Source/Include/driverStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     9                              <1> ; device driver related structures.                     ;
    10                              <1> ;-------------------------------------------------------;
    11                              <1> 
    12                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    13                              <1> 
    14 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    15 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    16 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    17 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    18 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    19                              <1> 
    20                              <1> endstruc
    21                              <1> 
    22                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    23                              <1> 
    24                              <1>     .hdrlen resb 1  ;Length of the request header
    25                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    26                              <1>     .cmdcde resb 1  ;Command code
    27                              <1>     .status resw 1  ;Status word
    28                              <1>     .devptr resq 1  ;Device queue pointer field
    29                              <1> 
    30                              <1> %endmacro
    31                              <1> ;Command Code equates
    32                              <1>     drvINIT         equ 0
    33                              <1>     drvMEDCHK       equ 1
    34                              <1>     drvBUILDBPB     equ 2
    35                              <1>     drvIOCTLREAD    equ 3
    36                              <1>     drvREAD         equ 4
    37                              <1>     drvNONDESTREAD  equ 5
    38                              <1>     drvINSTATUS     equ 6
    39                              <1>     drvFLUSHINBUF   equ 7
    40                              <1>     drvWRITE        equ 8
    41                              <1>     drvWRITEVERIFY  equ 9
    42                              <1>     drvOUTSTATUS    equ 10
    43                              <1>     drvFLUSHOUTBUF  equ 11
    44                              <1>     drvIOCTLWRITE   equ 12
    45                              <1>     drvOPEN         equ 13
    46                              <1>     drvCLOSE        equ 14
    47                              <1>     drvREMMEDCHECK  equ 15
    48                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    49                              <1>     drvIOCTL        equ 19
    50                              <1>     drvGETDRVMAP    equ 23
    51                              <1>     drvSETDRVMAP    equ 24
    52                              <1>     
    53                              <1> ;Driver Error equates 
    54                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    55                              <1>     drvBadUnit      equ 1   ;Unknown unit
    56                              <1>     drvNotReady     equ 2   ;Device not ready
    57                              <1>     drvBadCmd       equ 3   ;Unknown command
    58                              <1>     drvCRCErr       equ 4   ;CRC Error
    59                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    60                              <1>     drvBadSeek      equ 6   ;Seek error
    61                              <1>     drvBadMed       equ 7   ;Unknown media
    62                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    63                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    64                              <1>     drvWriteFault   equ 10  ;Write Fault
    65                              <1>     drvReadFault    equ 11  ;Read Fault
    66                              <1>     drvGenFault     equ 12  ;General Fault
    67                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    68                              <1> 
    69                              <1> ;Drive structures
    70                              <1> struc drvReqHdr
    71                              <1>     drvReqHdrM
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc initReqPkt  ;Init Request Packet
    75                              <1> 
    76                              <1>     drvReqHdrM   ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    77 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    78 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    79 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    80 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    85                              <1> 
    86                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    87 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    88 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    89 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    90                              <1> 
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    94                              <1> 
    95                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    96 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    97 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    98 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    99                              <1> 
   100                              <1> endstruc
   101                              <1> 
   102                              <1> struc ioReqPkt   ;IO Request Packet
   103                              <1> 
   104                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   105 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   106 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   107 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   108 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   109 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   110                              <1> 
   111                              <1> endstruc
   112                              <1> 
   113                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
   114                              <1>     
   115                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   116 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc statusReqPkt   ;Status Request Packet
   121                              <1> 
   122                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   129                              <1>      
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc openReqPkt ;Open Device Request Packet
   133                              <1> 
   134                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   135                              <1>      
   136                              <1> endstruc
   137                              <1> 
   138                              <1> struc closeReqPkt ;Close Device Request Packet
   139                              <1> 
   140                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   141                              <1>      
   142                              <1> endstruc
   143                              <1> 
   144                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   145                              <1> 
   146                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   147                              <1>      
   148                              <1> endstruc
   149                              <1> 
   150                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   151                              <1> 
   152                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   153 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   154 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   155 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   156 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   157 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   162                              <1>     
   163                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   164                              <1> 
   165                              <1> endstruc
   166                              <1> 
   167                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   168                              <1>     
   169                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   170                              <1> 
   171                              <1> endstruc
     6                                  %include "./Source/Include/fatStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous FAT driver   ;
    10                              <1> ; structures. exFAT will have it's own files at a later ;
    11                              <1> ; stage.                                                ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    17                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    18                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    19                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    20                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    21                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    22                              <1> ;-------------------------------------------------------;
    23                              <1> 
    24                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    25                              <1> 
    26 00000000 ??????              <1>     .jmpBoot    resb 3 
    27 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    28 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    29 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    30 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    31 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    32 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    33 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    34 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    35 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    36 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    37 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    38 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    39 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    40                              <1> 
    41 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    42 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    43 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    44 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    45 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    46 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    47                              <1> 
    48                              <1> endstruc
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    51                              <1> 
    52 00000000 ??????              <1>     .jmpBoot    resb 3
    53 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    54 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    55 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    56 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    57 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    58 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    59 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    60 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    61 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    62 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    63 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    64 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    65 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    66                              <1> 
    67 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    68 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    69 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    70 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    71 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    72 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    73 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    74                              <1> 
    75 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    76 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    77 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    78 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    79 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    80 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mbr
    85 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    86 000001B8 ????????            <1>     .diskID     resb 4
    87 000001BC ????                <1>     .reserved   resb 2
    88 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    89 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    90 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    91 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    92 000001FE ????                <1>     .mbrSig     resb 2
    93                              <1> endstruc
    94                              <1> 
    95                              <1> struc mbrEntry
    96 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    97 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    98 00000004 ??                  <1>     .ptnType    resb 1
    99 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   100 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   101 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc ebr
   105 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   106 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   107 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   108 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   109 000001FE ????                <1>     .mbrSig     resb 2
   110                              <1> endstruc
   111                              <1> 
   112                              <1> 
   113                              <1> struc fatDirEntry
   114                              <1> 
   115 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   116 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   121 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   122 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   127                              <1> 
   128                              <1> endstruc
   129                              <1> ;Directory attribute equates
   130                              <1>     dirReadOnly     equ 01h
   131                              <1>     dirHidden       equ 02h
   132                              <1>     dirSystem       equ 04h
   133                              <1>     dirVolumeID     equ 08h
   134                              <1>     dirDirectory    equ 10h
   135                              <1>     dirArchive      equ 20h
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1> 
   138                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   139                              <1> 
   140 00000000 ??????              <1>     .jmpBoot                resb 3 
   141 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   142 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   143 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   144 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   145 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   146 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   147 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   148 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   149 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   150 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   151 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   152 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   153 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   154 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   155 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   156 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   157 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   158 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   159                              <1> 
   160                              <1> endstruc
   161                              <1> 
   162                              <1> struc FSInfo
   163                              <1> 
   164 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   165 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   166 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   167 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   168 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   169 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   170 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   171                              <1> 
   172                              <1> endstruc
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)x
    27 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000005 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000007 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000008 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    32 0000000A ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000E ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000012 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000016 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001A ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000022 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000023 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000024 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002C ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000030 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Flags: Bit 15 set = Network drive
    69                              <1> ;        Bit 14 set = Physical drive
    70                              <1> ;        Bit 13 set = JOIN'ed drive
    71                              <1> ;        Bit 12 set = SUBST'ed drive
    72                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    73                              <1> endstruc
    74                              <1> ;CDS equates
    75                              <1>     cdsNetDrive     equ 8000h
    76                              <1>     cdsPhysDrive    equ 4000h
    77                              <1>     cdsJoinDrive    equ 2000h
    78                              <1>     cdsSubstDrive   equ 1000h
    79                              <1>     cdsRedirDrive   equ 0080h
    80                              <1> ;------------------------------------------------------------------------;
    81                              <1> ; The SFT is a way to allow applications to open file handles to files 
    82                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    83                              <1> ; under the first header, and then a second header will be linked to the 
    84                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    85                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    86                              <1> ; using the FCBS= command. Default FCBS=5.
    87                              <1> ;
    88                              <1> ; A file handle describes the file, and the location within the file that
    89                              <1> ; we are reading. The file handle can be manipulated without the file
    90                              <1> ; being in memory, thus allowing the user to access data without needing 
    91                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    92                              <1> ; accessing devices, by treating them as files with their drivers 
    93                              <1> ; responding and translating the manipulations of the file handle itself.
    94                              <1> ; Neither the driver nor the application should see or use the SFT for
    95                              <1> ; the handle, as it is subject to change (and will change when file 
    96                              <1> ; sharing provisions are included). The DOS will make requests to the 
    97                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    98                              <1> ; track of the information in the SFT entry for that handle. 
    99                              <1> ;
   100                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   101                              <1> ; can point to the same file. It all depends on what the applications 
   102                              <1> ; want to do with the File.
   103                              <1> ;
   104                              <1> ; !!!!IMPORTANT!!!!
   105                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   106                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   107                              <1> ;
   108                              <1> ;Each SFT may look like this:
   109                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   110                              <1> ;            |                |
   111                              <1> ;       wNumFiles*sft    wNumFiles*sft
   112                              <1> ;
   113                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   114                              <1> ; System FCBs.
   115                              <1> ;
   116                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   117                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   118                              <1> ;
   119                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   120                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   121                              <1> ;------------------------------------------------------------------------;
   122                              <1> struc sfth   ;System file table header
   123                              <1> ; This is the SFT header.
   124                              <1> ; This structure comes before the start of the first file in the array/table.
   125 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   126 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc sft
   130                              <1> ;This is the file struc itself
   131 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   132 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   133 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   134 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   135 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   136 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   137 00000013 ????                <1>     .wTime       resw 1    ;File Time
   138 00000015 ????                <1>     .wDate       resw 1    ;File Date
   139 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   140 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   141 0000001F ????                <1>     .wRelSect    resw 1    ;Rel sector in the last cluster accessed
   142 00000021 ????????            <1>     .dDirSect    resd 1    ;Rel number of sector containing directory entry 
   143 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   144 00000026 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   145 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   146 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   147                              <1> endstruc
   148                              <1> ;Open Mode equates
   149                              <1> ;Access modes   Bits[2:0]
   150                              <1>     ReadAccess      equ 0h
   151                              <1>     WriteAccess     equ 1h
   152                              <1>     RWAccess        equ 2h
   153                              <1> ;Bit 3 reserved 0
   154                              <1> ;Sharing modes  Bits[6:4]
   155                              <1>     CompatShare     equ 0h
   156                              <1>     denyRWShare     equ 10h
   157                              <1>     denyWriteShare  equ 20h
   158                              <1>     denyReadShare   equ 30h
   159                              <1>     denyNoneShare   equ 40h
   160                              <1> ;Bit 7 reserved 0
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> ;Critical Error handling
   163                              <1>     critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   164                              <1> ;Buffering on writes
   165                              <1>     noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file?
   167                              <1>     FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1>     readOnlyFile    equ 1h
   170                              <1>     hiddenFile      equ 2h
   171                              <1>     systemFile      equ 4h
   172                              <1>     volumeLabel     equ 8h
   173                              <1>     directoryFile   equ 10h ;Directory entry
   174                              <1>     archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1>     charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1>     charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1>     charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1>     charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1>     charDevFastOut  equ 10h ;If set, device supports INT 49h
   182                              <1>     devBinary       equ 20h ;If set, r/w device in Binary mode!!!
   183                              <1>     charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1>     blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   185                              <1>     devCharDev      equ 80h ;If set, it is a char device!
   186                              <1>     charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1>     devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1>     charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1>     blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   190                              <1>     devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   214                              <1>     .dataarea:             ;Points to the start of the data area
   215                              <1> endstruc
   216                              <1> ;Buffer Flag equates
   217                              <1>     dosBuffer   equ 1h  ;DOS data sector in buffer
   218                              <1>     fatBuffer   equ 2h  ;FAT sector in buffer
   219                              <1>     dirBuffer   equ 4h  ;Directory sector in buffer
   220                              <1>     dataBuffer  equ 8h  ;File Data sector in buffer
   221                              <1>     refBuffer   equ 20h ;Data in buffer referenced by an application
   222                              <1>     dirtyBuffer equ 40h ;Data in buffer modified by an application
   223                              <1> ;------------------------------------------------------------------------;
   224                              <1> ; Memory control block for each memory arena
   225                              <1> ;------------------------------------------------------------------------;
   226                              <1> struc mcb
   227 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   228 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP or 0 for free space
   229 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   230 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   231                              <1>     .program:
   232                              <1> endstruc
   233                              <1> ;MCB equates
   234                              <1> mcbOwnerHole    equ -1  ;Owner = -1 => Memory hole
   235                              <1> mcbOwnerFree    equ 0   ;Owner =  0 => Free and available space
   236                              <1> mcbOwnerDOS     equ 8   ;Owner =  8 => Owned by DOS
   237                              <1> ;Owner = Para aligned address => Owning application PSP
   238                              <1> ;...To consider...
   239                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   240                              <1> 
   241                              <1> ;------------------------------------------------------------------------;
   242                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   243                              <1> ; following order, thus allowing for return values to be placed in the 
   244                              <1> ; registers by accessing the caller register stack frame.
   245                              <1> ;------------------------------------------------------------------------;
   246                              <1> struc callerFrame
   247 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   248 00000008 ????????????????    <1>     .rbx    resq 1    
   249 00000010 ????????????????    <1>     .rcx    resq 1
   250 00000018 ????????????????    <1>     .rdx    resq 1
   251 00000020 ????????????????    <1>     .rsi    resq 1
   252 00000028 ????????????????    <1>     .rdi    resq 1
   253 00000030 ????????????????    <1>     .rbp    resq 1
   254 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   255 00000040 ????????????????    <1>     .r9     resq 1
   256                              <1> ;Pushed by Processor when invoked via Interrupt
   257 00000048 ????????????????    <1>     .rip    resq 1
   258 00000050 ????????????????    <1>     .cs     resq 1
   259 00000058 ????????????????    <1>     .flags  resq 1
   260                              <1> endstruc
   261                              <1> 
   262                              <1> %macro pushDOS 0
   263                              <1>     push r9
   264                              <1>     push r8
   265                              <1>     push rbp
   266                              <1>     push rdi
   267                              <1>     push rsi
   268                              <1>     push rdx
   269                              <1>     push rcx
   270                              <1>     push rbx
   271                              <1>     push rax
   272                              <1> %endmacro
   273                              <1> 
   274                              <1> %macro popDOS 0
   275                              <1>     pop rax
   276                              <1>     pop rbx
   277                              <1>     pop rcx
   278                              <1>     pop rdx
   279                              <1>     pop rsi
   280                              <1>     pop rdi
   281                              <1>     pop rbp
   282                              <1>     pop r8
   283                              <1>     pop r9
   284                              <1> %endmacro
   285                              <1> struc fcb
   286                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   287 00000000 ??                  <1>     .driveNum   resb 1
   288 00000001 ????????????????    <1>     .filename   resb 8
   289 00000009 ??????              <1>     .fileext    resb 3
   290 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   291                              <1> ;One block consists of 128 records, of size denoted in the below
   292 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   293 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   294 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   295 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   296 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   297 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   298 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   299 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   300 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   301                              <1>     ;If record size > 64, high byte is ignored.
   302                              <1>     ;Used for random read and write operations to find the right record
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc psp
   306 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   307 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   308 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   309 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   310 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   311 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   312 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   313 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   314 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   315 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   316 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   317 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   318 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   319                              <1> ;Extra handle arrays are grouped into a linked list
   320                              <1> ;The below are in the same place as in DOS
   321 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   322 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   323                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   324 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   325 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   326                              <1> endstruc
   327                              <1> 
   328                              <1> struc clkStruc
   329 00000000 ????                <1>     .dateWord   resw 1
   330 00000002 ??                  <1>     .minutes    resb 1
   331 00000003 ??                  <1>     .hours      resb 1
   332 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   333 00000005 ??                  <1>     .seconds    resb 1
   334                              <1> endstruc
     8                                  %include "./Source/Debug/debSym.inc"
     9                              <1> ;This file will include the debuging symbols
    10                              <1> 
    11                              <1> %define true 1
    12                              <1> %define false 0
    13                              <1> 
    14                              <1> ;Switch the DEBUG to false in production!
    15                              <1> %define DEBUG true
    16                              <1> %define DPBINFO false
    17                              <1> %define REGS false
    18                              <1> 
    19                              <1> ;Use this space as the debug stack
    20                              <1> %define debStackTop 80000h
     9                                  Segment .text align=1   ;Init code
    10                                  %include "./Source/Sysinit/sysInit.asm"
    11                              <1> ; We arrive here with the following values in the registers.
    12                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    13                              <1> ; dx  = Int 33h boot device number
    14                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    15                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    16 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    17 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    17 0000000B 909090909090909090- <1>
    17 00000014 909090909090909090- <1>
    17 0000001D 909090909090909090- <1>
    17 00000026 909090909090909090- <1>
    17 0000002F 909090909090909090- <1>
    17 00000038 909090909090909090- <1>
    17 00000041 909090909090909090- <1>
    17 0000004A 909090909090909090- <1>
    17 00000053 909090909090909090- <1>
    17 0000005C 909090909090909090- <1>
    17 00000065 909090909090909090- <1>
    17 0000006E 909090909090909090- <1>
    17 00000077 909090909090909090- <1>
    17 00000080 909090909090909090- <1>
    17 00000089 909090909090909090- <1>
    17 00000092 909090909090909090- <1>
    17 0000009B 909090909090909090- <1>
    17 000000A4 909090909090909090- <1>
    17 000000AD 909090909090909090- <1>
    17 000000B6 909090909090909090- <1>
    17 000000BF 909090909090909090- <1>
    17 000000C8 909090909090909090- <1>
    17 000000D1 909090909090909090- <1>
    17 000000DA 909090909090909090- <1>
    17 000000E3 909090909090909090- <1>
    17 000000EC 909090909090909090- <1>
    17 000000F5 909090909090909090- <1>
    17 000000FE 9090                <1>
    18                              <1> ;First make space for the MCB
    19 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    20 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    21 00000106 0F32                <1>     rdmsr
    22 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    23 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    24 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    25 00000110 4881C710000000      <1>     add rdi, mcb_size   ;Make space for the MCB
    26 00000117 89F8                <1>     mov eax, edi
    27 00000119 4889FA              <1>     mov rdx, rdi
    28 0000011C 48C1EA20            <1>     shr rdx, 20h
    29 00000120 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    30 00000122 5A                  <1>     pop rdx
    31                              <1> ;------------------------------------------------;
    32                              <1> ;              Connect Debugger                  ;
    33                              <1> ;------------------------------------------------;
    34                              <1> %if DEBUG
    35                              <1> ;Only connect if in debug mode
    36 00000123 B801C50000          <1>     mov eax, 0C501h ;Connect debugger
    37 00000128 CD35                <1>     int 35h
    38                              <1> %endif
    39                              <1> ;------------------------------------------------;
    40                              <1> ;           Sanitise the data area               ;
    41                              <1> ;------------------------------------------------;
    42 0000012A B9[D4130000]        <1>     mov ecx, dSegLen
    43 0000012F 30C0                <1>     xor al, al
    44 00000131 57                  <1>     push rdi    ;Temp save rdi on the stack
    45 00000132 F3AA                <1>     rep stosb
    46 00000134 5F                  <1>     pop rdi
    47                              <1> 
    48                              <1> ;------------------------------------------------;
    49                              <1> ;          Start saving Basic DOS data           ;
    50                              <1> ;------------------------------------------------;
    51 00000135 64881425[08000000]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    52                              <1> ;Copy DOS to its final resting place
    53 0000013D 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    53 00000142 [00000000]          <1>
    54 00000146 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rdx 
    55 00000149 4881C7[D4130000]    <1>     add rdi, dSegLen ;Move destination past end of data area
    56 00000150 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    57 00000157 B900100000          <1>     mov ecx, 1000h
    58 0000015C F348A5              <1>     rep movsq
    59                              <1> 
    60 0000015F CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    61 00000161 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    62 00000165 664489C0            <1>     mov ax, r8w
    63 00000169 64882425[09000000]  <1>     mov byte fs:[numRemDrv], ah    ;Save number of physical int 33h removable drvs
    64 00000171 64880425[0A000000]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    65 00000179 64C60425[9A000000]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    65 00000181 05                  <1>
    66 00000182 64C60425[0B000000]- <1>     mov byte fs:[numLogDrv], 0     ;Number of logical drives
    66 0000018A 00                  <1>
    67                              <1>     ;If no detected Int 33h devices, halt 
    68 0000018B 49C1E810            <1>     shr r8, 2*8
    69 0000018F 4584C0              <1>     test r8b, r8b
    70 00000192 0F848B070000        <1>     jz errorInit
    71                              <1> ;------------------------------------------------;
    72                              <1> ;          Kernel inits and adjustments          ;
    73                              <1> ;------------------------------------------------;
    74                              <1> ;Adjust Int 41h address table
    75                              <1> adjInt41h:
    76 00000198 B96A000000          <1>     mov ecx, kernelDispatchTableL/8 ;Number of elements in table
    77 0000019D 48BB-               <1>     mov rbx, kernelDispatchTable ;Get EA of table
    77 0000019F [4518000000000000]  <1>
    78 000001A7 488D5C1D00          <1>     lea rbx, qword [rbp + rbx]    ;Point to the start of the relocated table 
    79                              <1> .ai41h:
    80 000001AC 48012B              <1>     add qword [rbx], rbp    ;Add base address value to entry in reloc table
    81 000001AF 4881C308000000      <1>     add rbx, 8              ;Each entry is size 8
    82 000001B6 FFC9                <1>     dec ecx
    83 000001B8 75F2                <1>     jnz .ai41h  ;Keep looping until all entries have been adjusted
    84                              <1> 
    85                              <1> ;Adjust Interrupt Entries Int 40h-49h
    86                              <1> adjInts:
    87 000001BA B340                <1>     mov bl, 40h
    88 000001BC B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
    89 000001C1 CD35                <1>     int 35h
    90 000001C3 B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
    91 000001C8 488D3DB8070000      <1>     lea rdi, intData
    92 000001CF 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
    93                              <1> .ai0:
    94 000001D1 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
    95 000001D6 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
    96 000001D9 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
    97                              <1> .ai1:
    98 000001DC CD35                <1>     int 35h
    99 000001DE 4881C708000000      <1>     add rdi, 8
   100 000001E5 FFC1                <1>     inc ecx
   101 000001E7 81F94A000000        <1>     cmp ecx, 4Ah
   102 000001ED 75E2                <1>     jne .ai0
   103                              <1> 
   104                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   105                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   106                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   107                              <1>     %if DEBUG
   108                              <1> debugPopUpMsg:
   109 000001EF 53                  <1>     push rbx
   110 000001F0 55                  <1>     push rbp
   111 000001F1 488D9D[70010000]    <1>     lea rbx, qword [debPrintNullString + rbp]
   112 000001F8 488D2D04000000      <1>     lea rbp, .msg
   113 000001FF FFD3                <1>     call rbx
   114 00000201 EB52                <1>     jmp short .exit
   115 00000203 0A0D5343502F42494F- <1> .msg:   db 0Ah,0Dh,"SCP/BIOS Boot complete.",0Ah,0Dh
   115 0000020C 5320426F6F7420636F- <1>
   115 00000215 6D706C6574652E0A0D  <1>
   116 0000021E 5343502F444F53204B- <1>         db "SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   116 00000227 65726E656C20446562- <1>
   116 00000230 756767657220436F6E- <1>
   116 00000239 6E6563746564206F6E- <1>
   116 00000242 20434F4D313A323430- <1>
   116 0000024B 302C6E2C382C310A0D- <1>
   116 00000254 00                  <1>
   117                              <1> .exit:
   118 00000255 5D                  <1>     pop rbp
   119 00000256 5B                  <1>     pop rbx
   120                              <1>     %endif
   121                              <1> 
   122                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   123 00000257 488D15C5060000      <1>     lea rdx, errorInit ;Get segment start address
   124 0000025E B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   125 00000263 CD41                <1>     int 41h
   126 00000265 488D15B7060000      <1>     lea rdx, errorInit ;Get segment start address
   127 0000026C B844250000          <1>     mov eax, 2544h
   128 00000271 CD41                <1>     int 41h
   129                              <1> 
   130                              <1> ;------------------------------------------------;
   131                              <1> ;          Driver Adjustments and inits          ;
   132                              <1> ;------------------------------------------------;
   133                              <1> ;Modify the pointers in nData before putting them in the data area
   134 00000273 48012D5D070000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   135 0000027A 48012D60070000      <1>     add qword [nData + drvHdr.strPtr], rbp
   136 00000281 48012D61070000      <1>     add qword [nData + drvHdr.intPtr], rbp
   137                              <1> ;Copy the Null driver to its location in Sysvars
   138 00000288 B922000000          <1>     mov ecx, drvHdr_size
   139 0000028D 488D3543070000      <1>     lea rsi, qword [nData]
   140 00000294 488DBD[A6000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
   141 0000029B F3A4                <1>     rep movsb   
   142                              <1> 
   143                              <1> ;Adjust the addresses in the other driver headers 
   144 0000029D 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   144 0000029F [281E000000000000]  <1>
   145 000002A7 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   146 000002AC 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   147                              <1> adjDrivers:
   148 000002B0 E85B060000          <1>     call adjustDrvHdr
   149 000002B5 E2F9                <1>     loop adjDrivers
   150                              <1> 
   151                              <1> ;Open NUL
   152 000002B7 488D9D[0C000000]    <1>     lea rbx, qword [rbp + charReqHdr]
   153 000002BE C6030D              <1>     mov byte [rbx + openReqPkt.hdrlen], openReqPkt_size
   154 000002C1 C6430300            <1>     mov byte [rbx + openReqPkt.status], 0
   155 000002C5 FF95[B0000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.strPtr]
   156 000002CB FF95[B8000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.intPtr]
   157                              <1> ;Open CON
   158                              <1> conInit:    ;Rather than keeping this resident... do it here
   159                              <1> .ci0:
   160 000002D1 B401                <1>     mov ah, 01      ;Get buffer status
   161 000002D3 CD36                <1>     int 36h
   162 000002D5 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   163 000002D7 30E4                <1>     xor ah, ah
   164 000002D9 CD36                <1>     int 36h ;Read key to flush from buffer
   165 000002DB EBF4                <1>     jmp short .ci0
   166                              <1> .ci1:
   167 000002DD B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   168 000002E2 CD30                <1>     int 30h
   169 000002E4 B402                <1>     mov ah, 02h
   170 000002E6 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   171 000002E8 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   172 000002EA CD30                <1>     int 30h
   173 000002EC B707                <1>     mov bh, 07h     ;Grey/Black attribs
   174 000002EE B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   175 000002F3 CD30                <1>     int 30h
   176                              <1> 
   177                              <1>     ;Save ptr to ConHdr in Sysvars
   178 000002F5 488D85[281E0000]    <1>     lea rax, qword [rbp + conHdr]
   179 000002FC 6448890425-         <1>     mov qword fs:[conPtr], rax
   179 00000301 [80000000]          <1>
   180                              <1> 
   181                              <1>     ;Save ptr to ClkHdr in Sysvars
   182 00000305 488D85[8E1E0000]    <1>     lea rax, qword [rbp + clkHdr]
   183 0000030C 6448890425-         <1>     mov qword fs:[clockPtr], rax
   183 00000311 [78000000]          <1>
   184                              <1> 
   185                              <1> ;------------------------------------------------;
   186                              <1> ;         Link DOS to temporary Buffer           ;
   187                              <1> ;------------------------------------------------;
   188                              <1> tempBufferInit:
   189 00000315 488DBD[9A020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   190 0000031C 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   190 00000321 [8A000000]          <1>
   191 00000325 31C0                <1>     xor eax, eax
   192 00000327 48FFC8              <1>     dec rax
   193 0000032A 48AB                <1>     stosq   ;.nextBufPTr, end of list
   194 0000032C AA                  <1>     stosb   ;.driveNumber, Free entry
   195 0000032D 48FFC0              <1>     inc rax
   196 00000330 AA                  <1>     stosb   ;.bufferFlags, No flags
   197                              <1> ;------------------------------------------------;
   198                              <1> ;         Init msd driver, create DPB            ;
   199                              <1> ;------------------------------------------------;
   200                              <1> storageInits:
   201                              <1> ;First save dpb pointer in sysvars
   202 00000331 488D9D[3B010000]    <1>     lea rbx, qword [rbp + firstDPB]
   203 00000338 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   203 0000033D [68000000]          <1>
   204                              <1> ;Open Mass Storage
   205                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   206                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   207                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   208                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   209                              <1>     ;mov al, byte fs:[numLogDrv]
   210                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   211                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   212                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   213                              <1>     ;Check if it returned OK first!
   214                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   215                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   216                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   217                              <1>     ;mov byte fs:[numLogDrv], al
   218                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   219                              <1> 
   220                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   221 00000341 E8B3060000          <1>     call diskInit
   222 00000346 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   223 00000349 648A0425[0B000000]  <1>     mov al, byte fs:[numLogDrv]
   224 00000351 488D95[BE270000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   225 00000358 30C9                <1>     xor cl, cl  ;Clear counter
   226 0000035A 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   226 0000035F [68000000]          <1>
   227                              <1> .si0:   
   228 00000363 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   229 00000366 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   230 00000368 CD41                <1>     int 41h
   231                              <1> ;Add other data to DPB
   232 0000036A 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   233 0000036D 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   234 00000370 50                  <1>     push rax
   235 00000371 488D87[B01E0000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   236 00000378 4889451A            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   237 0000037C 58                  <1>     pop rax
   238 0000037D FEC1                <1>     inc cl
   239 0000037F 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   240 00000381 7416                <1>     je .si1
   241 00000383 50                  <1>     push rax
   242 00000384 488D4534            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   243 00000388 48894524            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   244 0000038C 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   245 0000038F 58                  <1>     pop rax
   246 00000390 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   247 00000397 EBCA                <1>     jmp short .si0
   248                              <1> .si1:
   249                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   250 00000399 48C74524FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   251 000003A1 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   252                              <1> ;------------------------------------------------;
   253                              <1> ;          Find largest sector size              ;
   254                              <1> ;------------------------------------------------;
   255                              <1> sectorSizeSearch:
   256                              <1> ;Done by reading BPB's for each drive
   257                              <1>     ;xchg bx, bx
   258 000003A4 488D9D[BE270000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   259                              <1>     
   260                              <1>     ;Go thru each block individually
   261 000003AB 31C0                <1>     xor eax, eax
   262 000003AD 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   263                              <1> .findLargest:
   264 000003B0 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   265 000003B4 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   266 000003B9 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   267 000003C0 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   268 000003C3 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   269 000003C6 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   270 000003C8 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   270 000003CD [88000000]          <1>
   271                              <1>     
   272                              <1> ;------------------------------------------------;
   273                              <1> ;                 Temp CDS inits                 ;
   274                              <1> ;------------------------------------------------;
   275                              <1> tempCDS:
   276                              <1> ;Build a temporary CDS for Drive A to use it for booting
   277 000003D1 488DBD[3F020000]    <1>     lea rdi, qword [rbp + initCDS]
   278 000003D8 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   278 000003DD [92000000]          <1>
   279 000003E1 B943000000          <1>     mov ecx, 67 ;Buffer length
   280 000003E6 31C0                <1>     xor eax, eax
   281 000003E8 4889FB              <1>     mov rbx, rdi    ;Save CDS pointer in rbx
   282 000003EB F3AA                <1>     rep stosb   ;Zero out the path string
   283 000003ED 4889DF              <1>     mov rdi, rbx
   284 000003F0 B041                <1>     mov al, "A"
   285 000003F2 AA                  <1>     stosb
   286 000003F3 B03A                <1>     mov al, ":"
   287 000003F5 AA                  <1>     stosb
   288 000003F6 B05C                <1>     mov al, "\"
   289 000003F8 AA                  <1>     stosb
   290 000003F9 4889DF              <1>     mov rdi, rbx
   291 000003FC 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   292 00000402 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   292 00000407 [68000000]          <1>
   293 0000040B 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   294 0000040F 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   295                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   296                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   297                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   298 00000415 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax    ;eax was zeroed before
   299                              <1> ;------------------------------------------------;
   300                              <1> ;     Set up general PSP areas and DOS vars      ;
   301                              <1> ;------------------------------------------------;
   302                              <1>     ;Additional DOS Vars init
   303 00000418 31C0                <1>     xor eax, eax
   304 0000041A 64880425[F2000000]  <1>     mov byte fs:[currentDrv], al ;Current Drive = Drive A
   305 00000422 64880425[F3000000]  <1>     mov byte fs:[breakFlag], al  ;Break off
   306 0000042A 64880425[F4000000]  <1>     mov byte fs:[verifyFlag], al ;Write only
   307 00000432 64880425[FD000000]  <1>     mov byte fs:[singleDrv], al  ;Only used on single drive systems
   308 0000043A 64880425[C8000000]  <1>     mov byte fs:[critErrFlag], al   ;Not in critical error
   309 00000442 64880425[C9000000]  <1>     mov byte fs:[inDOS], al      ;Not in DOS
   310 0000044A 64C60425[CA000000]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   310 00000452 FF                  <1>
   311 00000453 6466890425-         <1>     mov word fs:[lastRetCode], ax   ;Last return code is 0, no error
   311 00000458 [F0000000]          <1>
   312                              <1> 
   313                              <1>     ;SYSVARS PSP Init
   314 0000045C 488D1D9DFBFFFF      <1>     lea rbx, qword [tempPSP]
   315 00000463 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   315 00000468 [D8000000]          <1>
   316 0000046C 53                  <1>     push rbx
   317 0000046D 4881C380000000      <1>     add rbx, psp.dta
   318 00000474 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   318 00000479 [D0000000]          <1>
   319 0000047D 5B                  <1>     pop rbx
   320 0000047E 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   321 00000483 C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   322 0000048A 48895B02            <1>     mov qword [rbx + psp.startSeg], rbx ;Save start segment of app
   323 0000048E 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   324 00000492 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   325 00000496 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   326 0000049A 48B800000001020000- <1>     mov rax, 0000000201000000h  ;Store default handles in JFT
   326 000004A3 00                  <1>
   327 000004A4 48AB                <1>     stosq   ;8 bytes
   328 000004A6 31C0                <1>     xor eax, eax
   329 000004A8 48AB                <1>     stosq   ;16 bytes
   330 000004AA AB                  <1>     stosd   ;20 bytes
   331 000004AB 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   332 000004B3 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   333 000004B7 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   334 000004BB 4889DA              <1>     mov rdx, rbx
   335 000004BE B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   336 000004C3 CD41                <1>     int 41h
   337 000004C5 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   338 000004C9 B843350000          <1>     mov eax, 3543h
   339 000004CE CD41                <1>     int 41h
   340 000004D0 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   341 000004D4 B844350000          <1>     mov eax, 3544h
   342 000004D9 CD41                <1>     int 41h
   343 000004DB 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   344                              <1> 
   345 000004DF B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   346 000004E4 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   347 000004E8 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   348                              <1> ;------------------------------------------------;
   349                              <1> ;          Default File Handle Creation          ;
   350                              <1> ;------------------------------------------------;
   351                              <1> defaultFileHandles:
   352                              <1> ;Fill in the default file table entries
   353 000004EA 488D9D[00000000]    <1>     lea rbx, qword [rbp + firstSftHeader]
   354 000004F1 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   355 000004F8 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   356 000004FE 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   356 00000503 [70000000]          <1>
   357                              <1> ;GOTO FIRST FILE 
   358 00000507 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   359                              <1> ;Write CON
   360 0000050E 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   361 00000513 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   362 00000519 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   363 0000051D C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   364                              <1>     ;No EOF when reading from the device
   365 00000521 64488B0425-         <1>     mov rax, qword fs:[conPtr]  ;Get pointer to CON device
   365 00000526 [80000000]          <1>
   366 0000052A 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   367                              <1>     ;Ignore disk related fields and Date/Time of open
   368 0000052E 488D7B26            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   369 00000532 488D3598000000      <1>     lea rsi, qword [.dfhCon]
   370                              <1>     ;11 chars in 8.3 name
   371 00000539 48A5                <1>     movsq   ;8 chars
   372 0000053B 66A5                <1>     movsw   ;10 chars
   373 0000053D A4                  <1>     movsb   ;11 chars
   374 0000053E 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   374 00000543 [D8000000]          <1>
   375 00000547 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   376                              <1> ;GOTO NEXT ENTRY
   377 0000054B 4881C33D000000      <1>     add rbx, sft_size   ;Goto next SFT
   378                              <1> ;Write AUX
   379 00000552 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   380 00000557 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   381 0000055D C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   382 00000561 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   383                              <1>     ;No EOF when reading from the device
   384 00000565 488B85[4A1E0000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   385 0000056C 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   386                              <1>     ;Ignore disk related fields and Date/Time of open
   387 00000570 488D7B26            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   388 00000574 488D3561000000      <1>     lea rsi, qword [.dfhAux]
   389                              <1>     ;11 chars in 8.3 name
   390 0000057B 48A5                <1>     movsq   ;8 chars
   391 0000057D 66A5                <1>     movsw   ;10 chars
   392 0000057F A4                  <1>     movsb   ;11 chars
   393 00000580 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   393 00000585 [D8000000]          <1>
   394 00000589 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   395                              <1> ;GOTO NEXT ENTRY
   396 0000058D 4881C33D000000      <1>     add rbx, sft_size   ;Goto next SFT
   397                              <1> ;Write PRN
   398 00000594 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   399 00000599 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   400 0000059F C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   401 000005A3 C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   402                              <1>     ;Want EOF when reading from to the device
   403 000005A7 488B85[6C1E0000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   404 000005AE 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   405                              <1>     ;Ignore disk related fields and Date/Time of open
   406 000005B2 488D7B26            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   407 000005B6 488D352A000000      <1>     lea rsi, qword [.dfhPrn]
   408                              <1>     ;11 chars in 8.3 name
   409 000005BD 48A5                <1>     movsq   ;8 chars
   410 000005BF 66A5                <1>     movsw   ;10 chars
   411 000005C1 A4                  <1>     movsb   ;11 chars
   412 000005C2 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   412 000005C7 [D8000000]          <1>
   413 000005CB 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   414 000005CF EB21                <1>     jmp short .dfhExit
   415 000005D1 434F4E202020202020- <1> .dfhCon db "CON        "
   415 000005DA 2020                <1>
   416 000005DC 415558202020202020- <1> .dfhAux db "AUX        "
   416 000005E5 2020                <1>
   417 000005E7 50524E202020202020- <1> .dfhPrn db "PRN        "
   417 000005F0 2020                <1>
   418                              <1> .dfhExit:
   419                              <1> ;------------------------------------------------;
   420                              <1> ;               Load CONFIG.SYS                  ;
   421                              <1> ;------------------------------------------------;
   422                              <1> ;------------------------------------------------;
   423                              <1> ;              Process CONFIG.SYS                ;
   424                              <1> ;------------------------------------------------;
   425                              <1> ;------------------------------------------------;
   426                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   427                              <1> ;------------------------------------------------;
   428                              <1> ;------------------------------------------------;
   429                              <1> ;   Setup Final Data Areas With Overrides from   ;
   430                              <1> ;                  CONFIG.SYS                    ;
   431                              <1> ;------------------------------------------------;
   432                              <1> ;------------------------------------------------;
   433                              <1> ;                   MCB inits                    ;
   434                              <1> ;------------------------------------------------;
   435                              <1> mcbInit:
   436                              <1> 
   437                              <1> .mcbExit:
   438                              <1> ;------------------------------------------------;
   439                              <1> ;           Load Command interpreter             ;
   440                              <1> ;------------------------------------------------;
   441 000005F2 488D153B030000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   442 000005F9 B409                <1>     mov ah, 09h
   443 000005FB CD41                <1>     int 41h
   444                              <1>     %if DEBUG
   445                              <1> debugFinal:
   446                              <1>     ;Print system state
   447 000005FD 55                  <1>     push rbp    ;Only rbp really matters here
   448 000005FE 4989E8              <1>     mov r8, rbp
   449                              <1> 
   450 00000601 488D2D16020000      <1>     lea rbp, .msg2
   451 00000608 4D8D88[70010000]    <1>     lea r9, qword [r8 + debPrintNullString]
   452 0000060F 41FFD1              <1>     call r9
   453                              <1> 
   454 00000612 488D1DE8000000      <1>     lea rbx, qword [.msg + 8]
   455 00000619 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   455 0000061E [00000000]          <1>
   456                              <1> 
   457 00000622 4D8D88[91060000]    <1>     lea r9, qword [r8 + overlayQword]
   458 00000629 41FFD1              <1>     call r9
   459                              <1> 
   460 0000062C 4881C31B000000      <1>     add rbx, 19+8
   461 00000633 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   461 00000638 [60000000]          <1>
   462 0000063C 41FFD1              <1>     call r9
   463                              <1> 
   464 0000063F 4881C31B000000      <1>     add rbx, 19+8
   465 00000646 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   465 0000064B [68000000]          <1>
   466 0000064F 41FFD1              <1>     call r9
   467                              <1> 
   468 00000652 4881C31B000000      <1>     add rbx, 19+8
   469 00000659 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   469 0000065E [70000000]          <1>
   470 00000662 41FFD1              <1>     call r9
   471                              <1> 
   472 00000665 4881C31B000000      <1>     add rbx, 19+8
   473 0000066C 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   473 00000671 [8A000000]          <1>
   474 00000675 41FFD1              <1>     call r9
   475                              <1> 
   476 00000678 4881C31B000000      <1>     add rbx, 19+8
   477 0000067F 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   477 00000684 [92000000]          <1>
   478 00000688 41FFD1              <1>     call r9
   479                              <1> 
   480 0000068B 4D8D88[DC050000]    <1>     lea r9, qword [r8 + overlayByte]
   481                              <1> 
   482 00000692 4881C32C000000      <1>     add rbx, 25+19
   483 00000699 64480FB60425-       <1>     movzx rax, byte fs:[numLogDrv]
   483 0000069F [0B000000]          <1>
   484 000006A3 41FFD1              <1>     call r9
   485                              <1> 
   486 000006A6 4881C31E000000      <1>     add rbx, 30
   487 000006AD 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   487 000006B3 [0A000000]          <1>
   488 000006B7 41FFD1              <1>     call r9
   489                              <1> 
   490 000006BA 4881C31E000000      <1>     add rbx, 30
   491 000006C1 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   491 000006C7 [09000000]          <1>
   492 000006CB 41FFD1              <1>     call r9
   493                              <1> 
   494 000006CE 4881C310000000      <1>     add rbx, 16
   495 000006D5 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   495 000006DB [08000000]          <1>
   496 000006DF 41FFD1              <1>     call r9
   497                              <1> 
   498 000006E2 488D2D10000000      <1>     lea rbp, .msg
   499 000006E9 4D8D88[70010000]    <1>     lea r9, qword [r8 + debPrintNullString]
   500 000006F0 41FFD1              <1>     call r9
   501 000006F3 5D                  <1>     pop rbp
   502 000006F4 E93D010000          <1>     jmp l1
   503 000006F9 444F53205365672046- <1> .msg:   db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   503 00000702 464646464646464646- <1>
   503 0000070B 464646464646680A0D  <1>
   504 00000714 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   504 0000071D 464646464646464646- <1>
   504 00000726 464646464646680A0D  <1>
   505 0000072F 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   505 00000738 464646464646464646- <1>
   505 00000741 464646464646680A0D  <1>
   506 0000074A 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   506 00000753 464646464646464646- <1>
   506 0000075C 464646464646680A0D  <1>
   507 00000765 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   507 0000076E 464646464646464646- <1>
   507 00000777 464646464646680A0D  <1>
   508 00000780 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   508 00000789 464646464646464646- <1>
   508 00000792 464646464646680A0D  <1>
   509 0000079B 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   509 000007A4 204C6F676963616C20- <1>
   509 000007AD 447269766573204646- <1>
   509 000007B6 680A0D              <1>
   510 000007B9 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   510 000007C2 204669786564204472- <1>
   510 000007CB 697665732020204646- <1>
   510 000007D4 680A0D              <1>
   511 000007D7 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   511 000007E0 2052656D6F7661626C- <1>
   511 000007E9 652044727673204646- <1>
   511 000007F2 680A0D              <1>
   512 000007F5 426F6F742064726976- <1>         db "Boot drive FFh",0Ah,0Dh
   512 000007FE 65204646680A0D      <1>
   513 00000805 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   513 0000080E 4F4D4D414E442E434F- <1>
   513 00000817 4D2E2E2E0A0D00      <1>
   514 0000081E 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   514 00000827 626F6F742073756D6D- <1>
   514 00000830 6172790A0D00        <1>
   515                              <1>     %endif
   516                              <1> l1:
   517 00000836 B401                <1>     mov ah, 01h  ;Write with echo
   518 00000838 CD41                <1>     int 41h
   519 0000083A 3C00                <1>     cmp al, 0
   520 0000083C 7402                <1>     je l2
   521 0000083E EBF6                <1>     jmp short l1
   522                              <1> l2:
   523 00000840 B407                <1>     mov ah, 07h
   524 00000842 CD41                <1>     int 41h
   525 00000844 3C42                <1>     cmp al, 42h
   526 00000846 75EE                <1>     jne l1
   527                              <1> l3:
   528 00000848 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   528 0000084D [19010000]0000      <1>
   529 00000853 488D9D[0C000000]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   530 0000085A 488D85[19010000]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   531 00000861 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   532 00000864 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   533 00000868 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   534 0000086E 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   535 00000872 C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   536 00000879 FF95[981E0000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   537 0000087F FF95[A01E0000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr] 
   538                              <1> 
   539 00000885 B403                <1>     mov ah, 03h
   540 00000887 30FF                <1>     xor bh, bh
   541 00000889 CD30                <1>     int 30h
   542 0000088B 30D2                <1>     xor dl, dl  ;0 column
   543 0000088D B402                <1>     mov ah, 02h
   544 0000088F CD30                <1>     int 30h
   545                              <1> 
   546 00000891 488D9D[19010000]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   547 00000898 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   548 0000089C E832000000          <1>     call .clkHexToBCD
   549 000008A1 B40E                <1>     mov ah, 0Eh
   550 000008A3 B03A                <1>     mov al, ":"
   551 000008A5 CD30                <1>     int 30h
   552 000008A7 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   553 000008AB E823000000          <1>     call .clkHexToBCD
   554 000008B0 B40E                <1>     mov ah, 0Eh
   555 000008B2 B03A                <1>     mov al, ":"
   556 000008B4 CD30                <1>     int 30h
   557 000008B6 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   558 000008BA E814000000          <1>     call .clkHexToBCD
   559 000008BF B40E                <1>     mov ah, 0Eh
   560 000008C1 B02E                <1>     mov al, "."
   561 000008C3 CD30                <1>     int 30h
   562 000008C5 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   563 000008C9 E805000000          <1>     call .clkHexToBCD
   564 000008CE E963FFFFFF          <1>     jmp l1
   565                              <1> .clkHexToBCD:
   566                              <1> ;Converts a Hex byte into two BCD digits
   567                              <1> ;Takes input in each nybble of al
   568 000008D3 53                  <1>     push rbx
   569 000008D4 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   569 000008DD 00                  <1>
   570 000008DE 31D2                <1>     xor edx, edx
   571 000008E0 48F7F3              <1>     div rbx
   572 000008E3 80C230              <1>     add dl, '0'
   573 000008E6 80FA39              <1>     cmp dl, '9'
   574 000008E9 7603                <1>     jbe .chtb0
   575 000008EB 80C207              <1>     add dl, 'A'-'0'-10
   576                              <1> .chtb0:
   577 000008EE 88D1                <1>     mov cl, dl    ;Save remainder byte
   578 000008F0 31D2                <1>     xor edx, edx
   579 000008F2 48F7F3              <1>     div rbx
   580 000008F5 80C230              <1>     add dl, '0'
   581 000008F8 80FA39              <1>     cmp dl, '9'
   582 000008FB 7603                <1>     jbe .chtb1
   583 000008FD 80C207              <1>     add dl, 'A'-'0'-10
   584                              <1> .chtb1:
   585 00000900 88D5                <1>     mov ch, dl    ;Save remainder byte
   586                              <1> 
   587 00000902 88E8                <1>     mov al, ch    ;Get most sig digit into al
   588 00000904 B40E                <1>     mov ah, 0Eh
   589 00000906 CD30                <1>     int 30h
   590 00000908 88C8                <1>     mov al, cl    ;Get least sig digit into al
   591 0000090A B40E                <1>     mov ah, 0Eh
   592 0000090C CD30                <1>     int 30h
   593 0000090E 5B                  <1>     pop rbx
   594 0000090F C3                  <1>     ret
   595                              <1> ;--------------------------------
   596                              <1> ;       PROCS FOR SYSINIT       :
   597                              <1> ;--------------------------------
   598                              <1> adjustDrvHdr:
   599                              <1> ;Input: rsi = Effective address of driver in DOS segment
   600                              <1> ;       rbp = Ptr to the start of the DOS segment
   601                              <1> ;Output: rsi = EA of next header in DOS segment
   602 00000910 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   603 00000913 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   604 00000917 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   605 0000091B 4881C622000000      <1>     add rsi, drvHdr_size
   606 00000922 C3                  <1>     ret
   607                              <1> errorInit:
   608                              <1> ;If a critical error occurs during sysinit, fail through here
   609                              <1> ;Int 42h, 43h and 44h point here during sysinit
   610 00000923 488D2D20000000      <1>     lea rbp, hltmsg
   611 0000092A B804130000          <1>     mov eax, 1304h
   612 0000092F CD30                <1>     int 30h
   613                              <1>     ;cli ;Clear interrupts
   614                              <1>     ;mov al, -1
   615                              <1>     ;mov dx, 0A1h    ;PIC2 data
   616                              <1>     ;out dx, al      ;Mask all lines
   617                              <1>     ;mov dx, 21h     ;PIC1 data
   618                              <1>     ;out dx, al      ;Mask all lines
   619                              <1> .ei0:
   620 00000931 F4                  <1>     hlt
   621 00000932 EBFD                <1>     jmp short .ei0
   622                              <1> ;--------------------------------
   623                              <1> ;       DATA FOR SYSINIT        :
   624                              <1> ;--------------------------------
   625 00000934 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   625 0000093D 5343502F444F532E2E- <1>
   625 00000946 2E0A0D24            <1>
   626 0000094A 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   626 00000953 7469616C6973696E67- <1>
   626 0000095C 20534350444F532E53- <1>
   626 00000965 59532E205379737465- <1>
   626 0000096E 6D2068616C74696E67- <1>
   626 00000977 2E2E2E00            <1>
   627 0000097B 434F4E00            <1> conName db "CON",0
   628 0000097F 41555800            <1> auxName db "AUX",0
   629 00000983 50524E00            <1> prnName db "PRN",0
   630                              <1> intData:
   631 00000987 [880E000000000000]  <1>     dq terminateProcess ;Int 40h
   632 0000098F [0E10000000000000]  <1>     dq functionDispatch ;Int 41h
   633 00000997 [2309000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   634 0000099F [8A0E000000000000]  <1>     dq ctrlCHandler     ;Int 43h, ignore any CTRL+C during init
   635 000009A7 [2309000000000000]  <1>     dq errorInit        ;Int 44h, If critical error in sysinit, halt system
   636 000009AF [030F000000000000]  <1>     dq absDiskRead      ;Int 45h
   637 000009B7 [8C0E000000000000]  <1>     dq absDiskWrite     ;Int 46h
   638 000009BF [0010000000000000]  <1>     dq terminateResident    ;Int 47h
   639 000009C7 [0010000000000000]  <1>     dq inDosHandler     ;Int 48h
   640 000009CF [0210000000000000]  <1>     dq fastOutput       ;Int 49h
   641                              <1> nData:
   642 000009D7 [281E000000000000]  <1>     dq conHdr
   643 000009DF 0480                <1>     dw 08004h
   644 000009E1 [D01F000000000000]  <1>     dq nulStrat
   645 000009E9 [D61F000000000000]  <1>     dq nulIntr
   646 000009F1 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   647                              <1> 
   648                              <1> diskInit:
   649                              <1>     ;We create a function to deal with BPB parsing etc
   650                              <1>     ;Start with the first primary partition on each hard disk (until max)
   651                              <1>     ;   They dont have to be bootable
   652                              <1>     ;Then go back and look for other partitions partitions. 
   653                              <1>     ;   Add each other primary or logical ptn (until max)
   654                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   655                              <1>     ;Use r8 as device counter
   656 000009F9 488DBD[E6270000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
   657 00000A00 64803C25[0A000000]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
   657 00000A08 00                  <1>
   658 00000A09 0F84C6000000        <1>     jz .remInit ;No? Go to removables
   659 00000A0F 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   659 00000A18 00                  <1>
   660 00000A19 B280                <1>     mov dl, 80h ;Start with HDD 0
   661                              <1> .primary:
   662 00000A1B 64803C25[0B000000]- <1>     cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
   662 00000A23 03                  <1>
   663 00000A24 0F84AB000000        <1>     je .remInit
   664 00000A2A 31C9                <1>     xor ecx, ecx    ;Sector 0
   665 00000A2C E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   666 00000A31 0F8289000000        <1>     jc .primaryEpilog
   667                              <1>     ;Here, check MBR or BPB
   668 00000A37 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   669 00000A40 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   670                              <1>     ;Now check if BPB or MBR
   671 00000A42 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   672 00000A44 8A6302              <1>     mov ah, byte [rbx + 2]
   673 00000A47 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   674 00000A4B 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   675                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   676                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   677 00000A4D 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   678 00000A54 B104                <1>     mov cl, 4
   679                              <1> .checkPrimary:
   680 00000A56 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   681 00000A59 3C01                <1>     cmp al, 01
   682 00000A5B 7421                <1>     je .primaryFound
   683 00000A5D 3C04                <1>     cmp al, 04
   684 00000A5F 741D                <1>     je .primaryFound
   685 00000A61 3C06                <1>     cmp al, 06
   686 00000A63 7419                <1>     je .primaryFound
   687 00000A65 3C0B                <1>     cmp al, 0Bh
   688 00000A67 7415                <1>     je .primaryFound
   689 00000A69 3C0C                <1>     cmp al, 0Ch
   690 00000A6B 7411                <1>     je .primaryFound
   691 00000A6D 3C0E                <1>     cmp al, 0Eh
   692 00000A6F 740D                <1>     je .primaryFound
   693 00000A71 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   694 00000A78 FEC9                <1>     dec cl
   695 00000A7A 7444                <1>     jz .primaryEpilog
   696 00000A7C EBD8                <1>     jmp short .checkPrimary
   697                              <1> .primaryFound:
   698                              <1>     ;Copy the first sector of this partition into memory
   699 00000A7E 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   700 00000A81 E8E9000000          <1>     call .initReadSector
   701 00000A86 7238                <1>     jc .primaryEpilog
   702                              <1>     ;Now verify this is a BPB
   703 00000A88 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   704 00000A8A 8A6302              <1>     mov ah, byte [rbx + 2]
   705 00000A8D 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   706 00000A91 752D                <1>     jne .primaryEpilog   ;If not, skip
   707                              <1>     ;Now copy data to internal tables
   708 00000A93 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   709 00000A96 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   710 00000A9B 57                  <1>     push rdi
   711 00000A9C F348A5              <1>     rep movsq   ;Copy the BPB
   712 00000A9F 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
   713                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   714 00000AA0 4A8D9C05[B4270000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
   715                              <1>     ;Add device count to rbx to point to correct entry
   716 00000AA8 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   717 00000AAA 4A8D9CC5[BE270000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
   718 00000AB2 488933              <1>     mov qword [rbx], rsi
   719 00000AB5 49FFC0              <1>     inc r8  ;Goto next logical drive
   720 00000AB8 64FE0425[0B000000]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have
   721                              <1> .primaryEpilog:
   722 00000AC0 FEC2                <1>     inc dl  ;Goto next BIOS drive
   723 00000AC2 88D6                <1>     mov dh, dl
   724 00000AC4 80E67F              <1>     and dh, 7Fh ;Clear bit 7
   725 00000AC7 643A3425[0A000000]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
   726 00000ACF 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
   727                              <1> .extended:
   728                              <1> ;We have gone through all the devices once
   729                              <1>     ;cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
   730                              <1>     ;je .remInit ;If yes, get removable devices
   731                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
   732                              <1>     ;xor ecx, ecx    ;Get MBR back
   733                              <1>     ;call .initReadSector
   734                              <1>     ;Now we eventually search MBR for a FAT extended partition
   735                              <1> .remInit:
   736                              <1> ;Now handle removable devices, at least 2 rem. devs.
   737 00000AD5 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
   738 00000AD8 30D2                <1>     xor dl, dl  ;Start with removable device 0
   739 00000ADA 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
   740                              <1>     ;rdi points to the space for the subsequent bpb's
   741                              <1> .removables:
   742 00000ADD 31C9                <1>     xor ecx, ecx    ;Read sector 0
   743 00000ADF E88B000000          <1>     call .initReadSector
   744 00000AE4 7238                <1>     jc .removableEpilogue   ;Goto next device
   745                              <1>     ;Now verify this is a BPB
   746 00000AE6 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   747 00000AE8 8A6302              <1>     mov ah, byte [rbx + 2]
   748 00000AEB 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   749 00000AEF 752D                <1>     jne .removableEpilogue   ;If not, skip
   750                              <1>     ;Now copy data to internal tables
   751 00000AF1 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   752 00000AF4 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   753 00000AF9 57                  <1>     push rdi
   754 00000AFA F348A5              <1>     rep movsq   ;Copy the BPB
   755 00000AFD 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
   756                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   757 00000AFE 4A8D9C05[B4270000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
   758                              <1>     ;Add device count to rbx to point to correct entry
   759 00000B06 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   760 00000B08 4A8D9CC5[BE270000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
   761 00000B10 488933              <1>     mov qword [rbx], rsi
   762 00000B13 49FFC0              <1>     inc r8  ;Goto next logical drive
   763 00000B16 64FE0425[0B000000]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have    
   764                              <1> .removableEpilogue:
   765 00000B1E FEC2                <1>     inc dl  ;Goto next BIOS device now
   766 00000B20 643A1425[09000000]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
   767 00000B28 7412                <1>     je .end
   768 00000B2A 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
   769 00000B31 7403                <1>     je .re0
   770 00000B33 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
   771                              <1> .re0:
   772 00000B36 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
   773 00000B3A 72A1                <1>     jb .removables
   774                              <1> .end:
   775 00000B3C 64803C25[09000000]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
   775 00000B44 01                  <1>
   776 00000B45 7401                <1>     je .singleRemDev
   777 00000B47 C3                  <1>     ret
   778                              <1> .singleRemDev:
   779                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
   780 00000B48 488D9D[B4270000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
   781 00000B4F 8A95[B4270000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
   782 00000B55 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
   783 00000B58 488D9D[BE270000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
   784 00000B5F 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
   785 00000B62 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
   786 00000B66 64FE0425[0B000000]  <1>     inc byte fs:[numLogDrv] ;Gotta register the phantom drive!
   787 00000B6E C3                  <1>     ret
   788                              <1> .initReadSector:
   789                              <1> ;Called with sector number in rcx and BIOS device number in dl
   790 00000B6F B482                <1>     mov ah, 82h ;Read
   791 00000B71 B001                <1>     mov al, 1   ;One sector
   792 00000B73 488D9D[BA020000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
   793 00000B7A CD33                <1>     int 33h
   794 00000B7C C3                  <1>     ret
    11                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    12                                  %include "./Source/BSS/dosSeg.asm"
    13                              <1> ;This file contains the main DOS data segment
    14                              <1> 
    15 00000000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    16 00000008 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    17 00000009 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    18 0000000A ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    19 0000000B ??                  <1>     numLogDrv   resb 1    ;Number of logical drives in system x
    20 0000000C <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    21 00000036 <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    22                              <1>     ;The device driver header with space for the largest possible packet
    23 00000060 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    24                              <1> sysVarsPtr:
    25 00000068 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    26 00000070 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    27 00000078 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    28                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    29 00000080 ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    30                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    31 00000088 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    32 0000008A ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    33 00000092 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    34 0000009A ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    35 0000009B ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    36 000000A3 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    37 000000A5 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    38 000000A6 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    39                              <1> 
    40                              <1> ;Start of Swappable Data Area, this bit can remain static
    41 000000C8 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    42 000000C9 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    43 000000CA ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    44 000000CB ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    45 000000CC ????                <1>     errorExt    resw 1  ;Extended Error Code
    46 000000CE ??                  <1>     errorAction resb 1  ;Suggested action for error  
    47 000000CF ??                  <1>     errorClass  resb 1  ;Error Class
    48                              <1> 
    49 000000D0 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    50 000000D8 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
    51 000000E0 ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error (could make this di)
    52 000000E8 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    53 000000F0 ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch x
    54 000000F2 ??                  <1>     currentDrv  resb 1  ;Default drive x
    55 000000F3 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
    56 000000F4 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    57                              <1> ;SDA, needs to be replaced between processes
    58 000000F5 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    59                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    60 000000FD ??                  <1>     singleDrv   resb 1  ;Set if last drive accessed was drive B x
    61                              <1> ;This is done to allow for DOS to give the user a change to swap devices
    62                              <1> 
    63 000000FE ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    64 000000FF ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    65 00000100 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    66 00000101 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    67 00000109 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    68 00000111 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    69                              <1> ;Time stuff
    70 00000119 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    71 0000011F ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    72 00000120 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    73 00000121 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    74 00000122 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    75 00000124 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    76                              <1> ;String Stuff
    77 00000125 <res FFh>           <1>     asciiBuffer resb 255    ;Have a 255 char buffer for the ascii terminal
    78                              <1> ;Stacks
    79 00000224 <res 528h>          <1>     critStack   resq 165
    80 0000074C ????????????????    <1>     critStakTop resq 1
    81 00000754 <res 638h>          <1>     IOStack     resq 199
    82 00000D8C ????????????????    <1>     IOStakTop   resq 1
    83 00000D94 <res 638h>          <1>     DiskStack   resq 199
    84 000013CC ????????????????    <1>     DiskStakTop resq 1
    85                              <1>     dSegLen     equ     $
    13                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    14                                  %include "./Source/Data/staticData.asm"
    15                              <1> 
    16                              <1> ;-----------------------------------:
    17                              <1> ;           Static Data             :
    18                              <1> ;-----------------------------------:
    19 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    20 00000001 01                  <1> dosMinor    db 01h      ;.01
    21 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    21 0000000B 535953              <1>
    22 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    22 00000017 535953              <1>
    23 0000001A 2F                  <1> switchchar  db "/" ;Editable by the Int 41h/ah=37h
    15                                  %include "./Source/Debug/debug.asm"
    16                              <1> ;This file contains debugging macros, procs and strings
    17                              <1> ; that we can use to output to COM1 bypassing the operating system.
    18                              <1> ;A serial terminal must be connected for this to work.
    19                              <1> 
    20                              <1> ;Variables and equates
    21                              <1> 
    22 0000001B 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    23                              <1> debDigitStringLen equ 20
    24 00000023 000000000000000000- <1> debDigitString db debDigitStringLen dup(0)
    24 0000002C 000000000000000000- <1>
    24 00000035 0000                <1>
    25 00000037 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    25 00000040 39414243444546      <1>
    26                              <1> ;Common procedures
    27                              <1> debMakeDebuggerRespond:
    28 00000047 488D2D26000000      <1>     lea rbp, .msg
    29 0000004E E81D010000          <1>     call debPrintNullString
    30 00000053 B900001000          <1>     mov ecx, 100000h
    31                              <1> .waiting:
    32 00000058 FFC9                <1>     dec ecx
    33 0000005A 740C                <1>     jz .timeout
    34 0000005C B402                <1>     mov ah, 02h ;Blocking recieve!
    35 0000005E 31D2                <1>     xor edx, edx
    36 00000060 CD34                <1>     int 34h
    37 00000062 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    38 00000065 75F1                <1>     jnz .waiting
    39 00000067 C3                  <1>     ret
    40                              <1> .timeout:
    41 00000068 488D2D47000000      <1>     lea rbp, .msg2
    42 0000006F E9FC000000          <1>     jmp debPrintNullString
    43 00000074 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    43 0000007D 6B6579206174207468- <1>
    43 00000086 65207465726D696E61- <1>
    43 0000008F 6C20746F20636F6E74- <1>
    43 00000098 696E7565206F722077- <1>
    43 000000A1 61697420666F722074- <1>
    43 000000AA 696D656F75742E2E2E- <1>
    43 000000B3 0A0D00              <1>
    44 000000B6 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    44 000000BF 436F6E74696E75696E- <1>
    44 000000C8 672E2E2E0A0D00      <1>
    45                              <1> debPrintHexByte:
    46                              <1> ;Print the hex byte in al as a hex value
    47 000000CF 52                  <1>     push rdx
    48 000000D0 53                  <1>     push rbx
    49 000000D1 50                  <1>     push rax
    50                              <1> 
    51 000000D2 88C2                <1>     mov dl, al           ;save byte in dl
    52 000000D4 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    53 000000D8 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    54 000000DD 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    55 000000E1 E80C000000          <1>     call .wrchar
    56 000000E6 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    57 000000E9 E804000000          <1>     call .wrchar
    58                              <1> 
    59 000000EE 58                  <1>     pop rax
    60 000000EF 5B                  <1>     pop rbx
    61 000000F0 5A                  <1>     pop rdx
    62 000000F1 C3                  <1>     ret
    63                              <1> .wrchar:
    64 000000F2 6687DB              <1>     xchg bx, bx
    65 000000F5 488D1D3BFFFFFF      <1>     lea rbx, debascii
    66 000000FC D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    67 000000FD B401                <1>     mov ah, 01h
    68 000000FF CD34                <1>     int 34h  ;print char
    69 00000101 C3                  <1>     ret
    70                              <1> 
    71                              <1> debPrintHexQword:
    72                              <1> ;Print the hexadecimal qword in rax as a hex value
    73 00000102 50                  <1>     push rax
    74 00000103 51                  <1>     push rcx
    75 00000104 B908000000          <1>     mov ecx, 8
    76                              <1> .printChar:
    77 00000109 E8C1FFFFFF          <1>     call debPrintHexByte
    78 0000010E 48C1E808            <1>     shr rax, 8
    79 00000112 E2F5                <1>     loop .printChar
    80 00000114 59                  <1>     pop rcx
    81 00000115 58                  <1>     pop rax
    82 00000116 C3                  <1>     ret
    83                              <1> debPrintDecQword:
    84                              <1> ;Print the hexadecimal qword in rax in decimal
    85 00000117 50                  <1>     push rax
    86 00000118 53                  <1>     push rbx
    87 00000119 488D3D03FFFFFF      <1>     lea rdi, debDigitString   ;Use the default line as a buffer
    88                              <1>     ;Sanitise the digit buffer
    89 00000120 57                  <1>     push rdi
    90 00000121 51                  <1>     push rcx
    91 00000122 50                  <1>     push rax
    92 00000123 31C0                <1>     xor eax, eax
    93 00000125 B902000000          <1>     mov ecx, debDigitStringLen/8
    94 0000012A F348AB              <1>     rep stosq
    95 0000012D 58                  <1>     pop rax
    96 0000012E 59                  <1>     pop rcx
    97 0000012F 5F                  <1>     pop rdi
    98                              <1> 
    99 00000130 4881C713000000      <1>     add rdi, debDigitStringLen - 1 ;Go to the end of the buffer
   100 00000137 FD                  <1>     std ;Reverse string ops
   101 00000138 50                  <1>     push rax
   102 00000139 30C0                <1>     xor al, al  ;Place delimiter
   103 0000013B AA                  <1>     stosb
   104 0000013C 58                  <1>     pop rax
   105 0000013D 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   105 00000146 00                  <1>
   106                              <1> .pdw0:
   107 00000147 31D2                <1>     xor edx, edx
   108 00000149 48F7F3              <1>     div rbx
   109 0000014C 80C230              <1>     add dl, '0'
   110 0000014F 80FA39              <1>     cmp dl, '9'
   111 00000152 7603                <1>     jbe .pdw1
   112 00000154 80C207              <1>     add dl, 'A'-'0'-10
   113                              <1> .pdw1:
   114 00000157 50                  <1>     push rax
   115 00000158 88D0                <1>     mov al, dl    ;Save remainder byte
   116 0000015A AA                  <1>     stosb   ;Store the byte and add one to rdi
   117 0000015B 58                  <1>     pop rax
   118 0000015C 4885C0              <1>     test rax, rax
   119 0000015F 75E6                <1>     jnz .pdw0
   120 00000161 FC                  <1>     cld ;Return string ops to normal
   121 00000162 48FFC7              <1>     inc rdi ;Skip the extra 0 that was inserted
   122 00000165 4889FD              <1>     mov rbp, rdi    ;Point rbp to the head of the string
   123 00000168 E803000000          <1>     call debPrintNullString
   124 0000016D 5B                  <1>     pop rbx
   125 0000016E 58                  <1>     pop rax
   126 0000016F C3                  <1>     ret
   127                              <1> 
   128                              <1> debPrintNullString:
   129                              <1> ;Print a null terminated string pointed to by rbp
   130 00000170 56                  <1>     push rsi
   131 00000171 50                  <1>     push rax
   132 00000172 52                  <1>     push rdx
   133 00000173 31D2                <1>     xor edx, edx    ;Select COM1
   134 00000175 4889EE              <1>     mov rsi, rbp
   135                              <1> .getChar:
   136 00000178 AC                  <1>     lodsb
   137 00000179 84C0                <1>     test al, al
   138 0000017B 7406                <1>     jz .exit
   139 0000017D B401                <1>     mov ah, 01h
   140 0000017F CD34                <1>     int 34h
   141 00000181 EBF5                <1>     jmp short .getChar
   142                              <1> .exit:
   143 00000183 5A                  <1>     pop rdx
   144 00000184 58                  <1>     pop rax
   145 00000185 5E                  <1>     pop rsi
   146 00000186 C3                  <1>     ret
   147                              <1> 
   148                              <1> debPrintDOSStack:
   149                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
   150                              <1> ;Shows me which function, and parameters passed and returned
   151 00000187 488D2DA5010000      <1>     lea rbp, .a1
   152 0000018E E8DDFFFFFF          <1>     call debPrintNullString
   153 00000193 488B15(09010000)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
   154 0000019A 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
   155 000001A1 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   156 000001A4 E8E8040000          <1>     call overlayQword
   157 000001A9 4881C316000000      <1>     add rbx, 22
   158 000001B0 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   159 000001B4 E8D8040000          <1>     call overlayQword
   160 000001B9 4881C316000000      <1>     add rbx, 22
   161 000001C0 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   162 000001C4 E8C8040000          <1>     call overlayQword
   163 000001C9 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   164 000001D0 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   165 000001D4 E8B8040000          <1>     call overlayQword
   166 000001D9 4881C316000000      <1>     add rbx, 22 
   167 000001E0 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   168 000001E4 E8A8040000          <1>     call overlayQword
   169 000001E9 4881C316000000      <1>     add rbx, 22
   170 000001F0 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   171 000001F4 E898040000          <1>     call overlayQword
   172 000001F9 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   173 00000200 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   174 00000204 E888040000          <1>     call overlayQword
   175 00000209 4881C316000000      <1>     add rbx, 22
   176 00000210 488B05(09010000)    <1>     mov rax, qword [oldRSP]
   177 00000217 480560000000        <1>     add rax, callerFrame_size
   178 0000021D E86F040000          <1>     call overlayQword
   179 00000222 4881C316000000      <1>     add rbx, 22
   180 00000229 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   181 0000022D E85F040000          <1>     call overlayQword
   182 00000232 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   183 00000239 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   184 0000023D E84F040000          <1>     call overlayQword
   185 00000242 488D2D06000000      <1>     lea rbp, .a0
   186 00000249 E822FFFFFF          <1>     call debPrintNullString
   187 0000024E C3                  <1>     ret
   188                              <1> 
   189 0000024F 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   189 00000258 303030303030303030- <1>
   189 00000261 30306820            <1>
   190 00000265 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   190 0000026E 303030303030303030- <1>
   190 00000277 30306820            <1>
   191 0000027B 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   191 00000284 303030303030303030- <1>
   191 0000028D 30306820            <1>
   192 00000291 0A0D                <1>     db  0Ah,0Dh
   193 00000293 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   193 0000029C 303030303030303030- <1>
   193 000002A5 30306820            <1>
   194 000002A9 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   194 000002B2 303030303030303030- <1>
   194 000002BB 30306820            <1>
   195 000002BF 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   195 000002C8 303030303030303030- <1>
   195 000002D1 30306820            <1>
   196 000002D5 0A0D                <1>     db 0Ah, 0Dh
   197 000002D7 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   197 000002E0 303030303030303030- <1>
   197 000002E9 30306820            <1>
   198 000002ED 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   198 000002F6 303030303030303030- <1>
   198 000002FF 30306820            <1>
   199 00000303 7269703D3030303030- <1>     db "rip=0000000000000000h"
   199 0000030C 303030303030303030- <1>
   199 00000315 303068              <1>
   200 00000318 0A0D                <1>     db 0Ah, 0Dh
   201 0000031A 666C673D3030303030- <1>     db "flg=0000000000000000h "
   201 00000323 303030303030303030- <1>
   201 0000032C 30306820            <1>
   202 00000330 0A0D00              <1>     db 0Ah,0Dh,0
   203 00000333 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   203 0000033C 206F6E20496E742034- <1>
   203 00000345 316820737461636B0A- <1>
   203 0000034E 0D00                <1>
   204                              <1> 
   205                              <1> debPrintDeviceDPB:
   206                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   207 00000350 4881FDFFFFFFFF      <1>     cmp rbp, -1
   208 00000357 0F8431010000        <1>     je .bad
   209 0000035D 488D1D51010000      <1>     lea rbx, qword [.dpb + 8]   ;Goto first number
   210 00000364 480FB64500          <1>     movzx rax, byte [rbp + dpb.bDriveNumber]
   211 00000369 E86E020000          <1>     call overlayByte
   212 0000036E 4881C30D000000      <1>     add rbx, 5+8
   213 00000375 480FB64501          <1>     movzx rax, byte [rbp + dpb.bUnitNumber]
   214 0000037A E85D020000          <1>     call overlayByte
   215 0000037F 4881C30D000000      <1>     add rbx, 5+8
   216 00000386 480FB64502          <1>     movzx rax, byte [rbp + dpb.bBytesPerSectorShift]
   217 0000038B E84C020000          <1>     call overlayByte
   218 00000390 4881C30D000000      <1>     add rbx, 5+8
   219 00000397 480FB64503          <1>     movzx rax, byte [rbp + dpb.bMaxSectorInCluster]
   220 0000039C E83B020000          <1>     call overlayByte
   221 000003A1 4881C30D000000      <1>     add rbx, 5+8
   222 000003A8 480FB64504          <1>     movzx rax, byte [rbp + dpb.bSectorsPerClusterShift]
   223 000003AD E82A020000          <1>     call overlayByte
   224 000003B2 4881C30D000000      <1>     add rbx, 5+8
   225 000003B9 480FB74505          <1>     movzx rax, word [rbp + dpb.wFAToffset]
   226 000003BE E848020000          <1>     call overlayWord
   227 000003C3 4881C30F000000      <1>     add rbx, 7+8
   228 000003CA 480FB64507          <1>     movzx rax, byte [rbp + dpb.bNumberOfFATs]
   229 000003CF E808020000          <1>     call overlayByte
   230 000003D4 4881C30D000000      <1>     add rbx, 5+8
   231 000003DB 480FB74508          <1>     movzx rax, word [rbp + dpb.wNumberRootDirSectors]
   232 000003E0 E826020000          <1>     call overlayWord
   233 000003E5 4881C30F000000      <1>     add rbx, 7+8
   234 000003EC 8B450A              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   235 000003EF E85A020000          <1>     call overlayDword
   236 000003F4 4881C313000000      <1>     add rbx, 11+8
   237 000003FB 8B450E              <1>     mov eax, dword [rbp + dpb.dClusterCount]
   238 000003FE E84B020000          <1>     call overlayDword
   239 00000403 4881C313000000      <1>     add rbx, 11+8
   240 0000040A 8B4512              <1>     mov eax, dword [rbp + dpb.dFATlength]
   241 0000040D E83C020000          <1>     call overlayDword
   242 00000412 4881C313000000      <1>     add rbx, 11+8
   243 00000419 8B4516              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
   244 0000041C E82D020000          <1>     call overlayDword
   245 00000421 4881C313000000      <1>     add rbx, 11+8
   246 00000428 488B451A            <1>     mov rax, qword [rbp + dpb.qDriverHeaderPtr]
   247 0000042C E860020000          <1>     call overlayQword
   248 00000431 4881C31B000000      <1>     add rbx, 19+8
   249 00000438 480FB64522          <1>     movzx rax, byte [rbp + dpb.bMediaDescriptor]
   250 0000043D E89A010000          <1>     call overlayByte
   251 00000442 4881C30D000000      <1>     add rbx, 5+8
   252 00000449 480FB64523          <1>     movzx rax, byte [rbp + dpb.bAccessFlag]
   253 0000044E E889010000          <1>     call overlayByte
   254 00000453 4881C30D000000      <1>     add rbx, 5+8
   255 0000045A 488B4524            <1>     mov rax, qword [rbp + dpb.qNextDPBPtr]
   256 0000045E E82E020000          <1>     call overlayQword
   257 00000463 4881C31B000000      <1>     add rbx, 19+8
   258 0000046A 8B452C              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]
   259 0000046D E8DC010000          <1>     call overlayDword
   260 00000472 4881C313000000      <1>     add rbx, 11+8
   261 00000479 8B4530              <1>     mov eax, dword [rbp + dpb.dNumberOfFreeClusters]
   262 0000047C E8CD010000          <1>     call overlayDword
   263 00000481 488D2D25000000      <1>     lea rbp, .dpb
   264 00000488 E8E3FCFFFF          <1>     call debPrintNullString
   265 0000048D C3                  <1>     ret
   266                              <1> .bad: 
   267 0000048E 488D2D05000000      <1>     lea rbp, .badstring
   268 00000495 E9D6FCFFFF          <1>     jmp debPrintNullString
   269 0000049A 4E756C6C2044504220- <1> .badstring db "Null DPB pointer",0Ah,0Dh,0
   269 000004A3 706F696E7465720A0D- <1>
   269 000004AC 00                  <1>
   270                              <1> .dpb: 
   271 000004AD 447269766520202030- <1>     db "Drive   00h",0Ah,0Dh
   271 000004B6 30680A0D            <1>
   272 000004BA 556E69742020202030- <1>     db "Unit    00h",0Ah,0Dh
   272 000004C3 30680A0D            <1>
   273 000004C7 4279742F5365632030- <1>     db "Byt/Sec 00h",0Ah,0Dh
   273 000004D0 30680A0D            <1>
   274 000004D4 5369434D6178202030- <1>     db "SiCMax  00h",0Ah,0Dh
   274 000004DD 30680A0D            <1>
   275 000004E1 537043536866742030- <1>     db "SpCShft 00h",0Ah,0Dh
   275 000004EA 30680A0D            <1>
   276 000004EE 4641546F6666202030- <1>     db "FAToff  0000h",0Ah,0Dh
   276 000004F7 303030680A0D        <1>
   277 000004FD 234641542020202030- <1>     db "#FAT    00h",0Ah,0Dh
   277 00000506 30680A0D            <1>
   278 0000050A 527444725365632030- <1>     db "RtDrSec 0000h",0Ah,0Dh  ;Root directory sectors
   278 00000513 303030680A0D        <1>
   279 00000519 446174537472742030- <1>     db "DatStrt 00000000h", 0Ah,0Dh
   279 00000522 30303030303030680A- <1>
   279 0000052B 0D                  <1>
   280 0000052C 23436C757374202030- <1>     db "#Clust  00000000h",0Ah,0Dh
   280 00000535 30303030303030680A- <1>
   280 0000053E 0D                  <1>
   281 0000053F 234641544C656E2030- <1>     db "#FATLen 00000000h",0Ah,0Dh
   281 00000548 30303030303030680A- <1>
   281 00000551 0D                  <1>
   282 00000552 527444697231202030- <1>     db "RtDir1  00000000h",0Ah,0Dh  ;First sector or cluster of root dir
   282 0000055B 30303030303030680A- <1>
   282 00000564 0D                  <1>
   283 00000565 447276507472202030- <1>     db "DrvPtr  0000000000000000h",0Ah,0Dh
   283 0000056E 303030303030303030- <1>
   283 00000577 303030303030680A0D  <1>
   284 00000580 4D6564446573632030- <1>     db "MedDesc 00h",0Ah,0Dh
   284 00000589 30680A0D            <1>
   285 0000058D 416363466C61672030- <1>     db "AccFlag 00h",0Ah,0Dh
   285 00000596 30680A0D            <1>
   286 0000059A 4E6578744450422030- <1>     db "NextDPB 0000000000000000h",0Ah,0Dh
   286 000005A3 303030303030303030- <1>
   286 000005AC 303030303030680A0D  <1>
   287 000005B5 46726565436C732030- <1>     db "FreeCls 00000000h",0Ah,0Dh
   287 000005BE 30303030303030680A- <1>
   287 000005C7 0D                  <1>
   288 000005C8 23467265436C732030- <1>     db "#FreCls 00000000h",0Ah,0Dh,0
   288 000005D1 30303030303030680A- <1>
   288 000005DA 0D00                <1>
   289                              <1> 
   290                              <1> overlayByte:
   291                              <1>     ;Called with number in rax
   292                              <1>     ;pointer to START of 16 byte space for number in rbx
   293 000005DC 53                  <1>     push rbx
   294 000005DD 51                  <1>     push rcx
   295 000005DE 52                  <1>     push rdx
   296 000005DF 55                  <1>     push rbp
   297 000005E0 4889DD              <1>     mov rbp, rbx
   298 000005E3 4889C2              <1>     mov rdx, rax
   299 000005E6 48FFC5              <1>     inc rbp ;Go to end of number
   300                              <1> 
   301 000005E9 488D1D47FAFFFF      <1>     lea rbx, debascii
   302 000005F0 88D0                <1>     mov al, dl  ;Go low nybble first
   303 000005F2 240F                <1>     and al, 0Fh
   304 000005F4 D7                  <1>     xlatb
   305 000005F5 884500              <1>     mov byte [rbp], al
   306 000005F8 48FFCD              <1>     dec rbp ;Go down one char pos
   307 000005FB 88D0                <1>     mov al, dl
   308 000005FD 24F0                <1>     and al, 0F0h    ;Hi nybble next
   309 000005FF C0E804              <1>     shr al, 4   ;Shift hi nybble low
   310 00000602 D7                  <1>     xlatb
   311 00000603 884500              <1>     mov byte [rbp], al  ;Store char
   312                              <1> 
   313 00000606 5D                  <1>     pop rbp
   314 00000607 5A                  <1>     pop rdx
   315 00000608 59                  <1>     pop rcx
   316 00000609 5B                  <1>     pop rbx
   317 0000060A C3                  <1>     ret
   318                              <1> 
   319                              <1> overlayWord:
   320                              <1>     ;Called with number in rax
   321                              <1>     ;pointer to START of 16 byte space for number in rbx
   322 0000060B 53                  <1>     push rbx
   323 0000060C 51                  <1>     push rcx
   324 0000060D 52                  <1>     push rdx
   325 0000060E 55                  <1>     push rbp
   326 0000060F 4889DD              <1>     mov rbp, rbx
   327 00000612 4889C2              <1>     mov rdx, rax
   328 00000615 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   329 0000061C B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   330 00000621 488D1D0FFAFFFF      <1>     lea rbx, debascii
   331                              <1> .ow0:
   332 00000628 88D0                <1>     mov al, dl  ;Go low nybble first
   333 0000062A 240F                <1>     and al, 0Fh
   334 0000062C D7                  <1>     xlatb
   335 0000062D 884500              <1>     mov byte [rbp], al
   336 00000630 48FFCD              <1>     dec rbp ;Go down one char pos
   337 00000633 88D0                <1>     mov al, dl
   338 00000635 24F0                <1>     and al, 0F0h    ;Hi nybble next
   339 00000637 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   340 0000063A D7                  <1>     xlatb
   341 0000063B 884500              <1>     mov byte [rbp], al  ;Store char
   342 0000063E 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   343 00000642 48FFCD              <1>     dec rbp
   344 00000645 FFC9                <1>     dec ecx
   345 00000647 75DF                <1>     jnz .ow0
   346 00000649 5D                  <1>     pop rbp
   347 0000064A 5A                  <1>     pop rdx
   348 0000064B 59                  <1>     pop rcx
   349 0000064C 5B                  <1>     pop rbx
   350 0000064D C3                  <1>     ret
   351                              <1> 
   352                              <1> overlayDword:
   353                              <1>     ;Called with number in rax
   354                              <1>     ;pointer to START of 16 byte space for number in rbx
   355 0000064E 53                  <1>     push rbx
   356 0000064F 51                  <1>     push rcx
   357 00000650 52                  <1>     push rdx
   358 00000651 55                  <1>     push rbp
   359 00000652 4889DD              <1>     mov rbp, rbx
   360 00000655 4889C2              <1>     mov rdx, rax
   361 00000658 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   362 0000065F B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   363 00000664 488D1DCCF9FFFF      <1>     lea rbx, debascii
   364                              <1> .od0:
   365 0000066B 88D0                <1>     mov al, dl  ;Go low nybble first
   366 0000066D 240F                <1>     and al, 0Fh
   367 0000066F D7                  <1>     xlatb
   368 00000670 884500              <1>     mov byte [rbp], al
   369 00000673 48FFCD              <1>     dec rbp ;Go down one char pos
   370 00000676 88D0                <1>     mov al, dl
   371 00000678 24F0                <1>     and al, 0F0h    ;Hi nybble next
   372 0000067A C0E804              <1>     shr al, 4   ;Shift hi nybble low
   373 0000067D D7                  <1>     xlatb
   374 0000067E 884500              <1>     mov byte [rbp], al  ;Store char
   375 00000681 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   376 00000685 48FFCD              <1>     dec rbp
   377 00000688 FFC9                <1>     dec ecx
   378 0000068A 75DF                <1>     jnz .od0
   379 0000068C 5D                  <1>     pop rbp
   380 0000068D 5A                  <1>     pop rdx
   381 0000068E 59                  <1>     pop rcx
   382 0000068F 5B                  <1>     pop rbx
   383 00000690 C3                  <1>     ret
   384                              <1> 
   385                              <1> overlayQword:
   386                              <1>     ;Called with number in rax
   387                              <1>     ;pointer to START of 16 byte space for number in rbx
   388 00000691 53                  <1>     push rbx
   389 00000692 51                  <1>     push rcx
   390 00000693 52                  <1>     push rdx
   391 00000694 55                  <1>     push rbp
   392 00000695 4889DD              <1>     mov rbp, rbx
   393 00000698 4889C2              <1>     mov rdx, rax
   394 0000069B 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   395 000006A2 B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   396 000006A7 488D1D89F9FFFF      <1>     lea rbx, debascii
   397                              <1> .oq0:
   398 000006AE 88D0                <1>     mov al, dl  ;Go low nybble first
   399 000006B0 240F                <1>     and al, 0Fh
   400 000006B2 D7                  <1>     xlatb
   401 000006B3 884500              <1>     mov byte [rbp], al
   402 000006B6 48FFCD              <1>     dec rbp ;Go down one char pos
   403 000006B9 88D0                <1>     mov al, dl
   404 000006BB 24F0                <1>     and al, 0F0h    ;Hi nybble next
   405 000006BD C0E804              <1>     shr al, 4   ;Shift hi nybble low
   406 000006C0 D7                  <1>     xlatb
   407 000006C1 884500              <1>     mov byte [rbp], al  ;Store char
   408 000006C4 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   409 000006C8 48FFCD              <1>     dec rbp
   410 000006CB FFC9                <1>     dec ecx
   411 000006CD 75DF                <1>     jnz .oq0
   412 000006CF 5D                  <1>     pop rbp
   413 000006D0 5A                  <1>     pop rdx
   414 000006D1 59                  <1>     pop rcx
   415 000006D2 5B                  <1>     pop rbx
   416 000006D3 C3                  <1>     ret
   417                              <1> 
   418                              <1> debPrintFunctionName:
   419                              <1> ;Prints the DOS function that has been entered
   420                              <1> ;Entered with ah = Function number
   421 000006D4 88E0                <1>     mov al, ah  ;Get dos function number
   422 000006D6 488D1D5AF9FFFF      <1>     lea rbx, debascii
   423 000006DD 488D1535000000      <1>     lea rdx, .number
   424 000006E4 24F0                <1>     and al, 0F0h    ;Get high nybble first
   425 000006E6 C0E804              <1>     shr al, 4
   426 000006E9 D7                  <1>     xlatb
   427 000006EA 8802                <1>     mov byte [rdx], al
   428 000006EC 88E0                <1>     mov al, ah
   429 000006EE 240F                <1>     and al, 0Fh
   430 000006F0 D7                  <1>     xlatb
   431 000006F1 884201              <1>     mov byte [rdx + 1], al
   432 000006F4 488D2D06000000      <1>     lea rbp, .dosString
   433 000006FB E870FAFFFF          <1>     call debPrintNullString
   434 00000700 C3                  <1>     ret
   435 00000701 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   435 0000070A 696F6E20496E742034- <1>
   435 00000713 31682F41483D        <1>
   436 00000719 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   437                              <1> 
   438                              <1> ;----------------:
   439                              <1> ;!!!! MACROS !!!!:
   440                              <1> ;----------------:
   441                              <1> ;Insert macro when entering a debug block
   442                              <1> %macro debugEnterM 0
   443                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   444                              <1>     mov rsp, debStackTop
   445                              <1> ;Push all registers except rsp on stack
   446                              <1>     push rax
   447                              <1>     push rbx
   448                              <1>     push rcx
   449                              <1>     push rdx
   450                              <1>     push rsi
   451                              <1>     push rdi
   452                              <1>     push rbp
   453                              <1>     push r8
   454                              <1>     push r9
   455                              <1>     push r10
   456                              <1>     push r11
   457                              <1>     push r12
   458                              <1>     push r13
   459                              <1>     push r14
   460                              <1>     push r15
   461                              <1>     pushfq
   462                              <1> %endmacro
   463                              <1> ;Insert macro when exiting a debug block
   464                              <1> %macro debugExitM 0
   465                              <1>     popfq
   466                              <1>     pop r15
   467                              <1>     pop r14
   468                              <1>     pop r13
   469                              <1>     pop r12
   470                              <1>     pop r11
   471                              <1>     pop r10
   472                              <1>     pop r9
   473                              <1>     pop r8
   474                              <1>     pop rbp
   475                              <1>     pop rdi
   476                              <1>     pop rsi
   477                              <1>     pop rdx
   478                              <1>     pop rcx
   479                              <1>     pop rbx
   480                              <1>     pop rax
   481                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   482                              <1> %endmacro
    16                                  %include "./Source/Kernel/bufferFunctions.asm"
    17                              <1> ;This file contains miscellaneous disk buffer related functions that
    18                              <1> ; dont fit anywhere else
    19                              <1> 
    20                              <1> readBuffer: ;EXTERNAL LINKAGE
    21                              <1> ;
    22                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
    23                              <1> ;TO CALL!
    24                              <1> ;
    25                              <1> ;This function will return a pointer to the desired data sector OR 
    26                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
    27                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
    28                              <1> ;Entry: rax = Sector to read
    29                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data) 
    30                              <1> ;       rsi = DPB of transacting drive
    31                              <1> ;Exit:  CF = NC : All ok!
    32                              <1> ;       rbx = Pointer to buffer header with valid data in buffer.
    33                              <1> ;       All other registers as before
    34                              <1> ;       CF = CY: Something went wrong, return error code or INT 44h
    35                              <1> ;       ch = 0 -> Data Not Flushed To Disk
    36                              <1> ;       ch = 1 -> Data Not Read From Disk
    37                              <1> ;       rbx = Pointer to buffer containing sector without valid data in buffer ;            (either unflushed or unread)
    38 0000071F 52                  <1>     push rdx
    39 00000720 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
    40 00000722 E848010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
    41 00000727 4881FBFFFFFFFF      <1>     cmp rbx, -1
    42 0000072E 7403                <1>     je .rbReadNewSector
    43                              <1> .rbExit:
    44 00000730 F8                  <1>     clc
    45                              <1> .rbExitNoFlag:
    46 00000731 5A                  <1>     pop rdx
    47 00000732 C3                  <1>     ret
    48                              <1> .rbReadNewSector:
    49 00000733 E8C6000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rbx
    50 00000738 4889DD              <1>     mov rbp, rbx
    51 0000073B 30ED                <1>     xor ch, ch
    52 0000073D E869000000          <1>     call flushBuffer
    53 00000742 72ED                <1>     jc .rbExitNoFlag    ;Exit in error
    54                              <1> ;rbp points to bufferHdr that has been appropriately linked to the head of chain
    55 00000744 51                  <1>     push rcx
    56 00000745 885508              <1>     mov byte [rbp + bufferHdr.driveNumber], dl
    57 00000748 884D09              <1>     mov byte [rbp + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
    58 0000074B 4889450A            <1>     mov qword [rbp + bufferHdr.bufferLBA], rax
    59 0000074F 80F902              <1>     cmp cl, fatBuffer
    60 00000752 B201                <1>     mov dl, 1   ;Default values if not fat buffer
    61 00000754 B900000000          <1>     mov ecx, 0  ;Ditto!
    62 00000759 7506                <1>     jne .rbNonFATbuffer
    63 0000075B 8A5607              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
    64 0000075E 8B4E12              <1>     mov ecx, dword [rsi + dpb.dFATlength]
    65                              <1> .rbNonFATbuffer:
    66 00000761 885512              <1>     mov byte [rbp + bufferHdr.bufFATcopy], dl
    67 00000764 894D13              <1>     mov dword [rbp + bufferHdr.bufFATsize], ecx
    68 00000767 48897517            <1>     mov qword [rbp + bufferHdr.driveDPBPtr], rsi
    69 0000076B C6451F00            <1>     mov byte [rbp + bufferHdr.reserved], 0
    70 0000076F 59                  <1>     pop rcx
    71 00000770 FEC5                <1>     inc ch  ;If an error occurs, have the signature in ch
    72 00000772 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
    73 00000777 EBB8                <1>     jmp short .rbExitNoFlag
    74                              <1> 
    75                              <1> readSectorBuffer:
    76                              <1> ;Reads a sector into a built sector buffer
    77                              <1> ;Entry: rbp = Pointer to buffer header
    78                              <1> ;Exit:  CF=NC : Success
    79                              <1> ;       CF=CY : Fail, terminate the request
    80                              <1> ;       rbx pointing to buffer header
    81                              <1> ;First make request to device driver
    82 00000779 50                  <1>     push rax
    83 0000077A 53                  <1>     push rbx
    84 0000077B 51                  <1>     push rcx
    85 0000077C 52                  <1>     push rdx
    86 0000077D 56                  <1>     push rsi
    87                              <1> .rsRequest0:
    88 0000077E BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
    89                              <1> .rsRequest1:
    90 00000783 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
    91 00000786 B901000000          <1>     mov ecx, 1  ;One sector to copy
    92 0000078B 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
    93 0000078F 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
    94 00000793 E86B070000          <1>     call absDiskRead    ;Call INT 45h
    95 00000798 7207                <1>     jc .rsFail
    96                              <1> .rsExit:
    97 0000079A F8                  <1>     clc
    98                              <1> .rsExitBad:
    99 0000079B 5E                  <1>     pop rsi
   100 0000079C 5A                  <1>     pop rdx
   101 0000079D 59                  <1>     pop rcx
   102 0000079E 5B                  <1>     pop rbx
   103 0000079F 58                  <1>     pop rax
   104 000007A0 C3                  <1>     ret
   105                              <1> .rsFail:
   106                              <1> ;Enter here only if the request failed
   107 000007A1 FFCE                <1>     dec esi
   108 000007A3 75DE                <1>     jnz .rsRequest1 ;Try the request again!
   109                              <1> ;Request failed thrice, critical error call
   110 000007A5 F9                  <1>     stc
   111 000007A6 E9F0FFFFFF          <1>     jmp .rsExitBad  ;Abort
   112                              <1> 
   113                              <1> flushBuffer:
   114                              <1> ;Flushes the data in a sector buffer to disk!
   115                              <1> ;Entry: rbp = Pointer to buffer header for this buffer
   116                              <1> ;Exit:  CF=NC : Success
   117                              <1> ;       CF=CY : Fail, terminate the request
   118                              <1> ;First make request to device driver
   119 000007AB 50                  <1>     push rax
   120 000007AC 53                  <1>     push rbx
   121 000007AD 51                  <1>     push rcx
   122 000007AE 52                  <1>     push rdx
   123 000007AF 56                  <1>     push rsi
   124 000007B0 F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   125 000007B4 7433                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   126                              <1> .fbRequest0:
   127 000007B6 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   128                              <1> .fbRequest1:
   129 000007BB 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   130 000007BE B901000000          <1>     mov ecx, 1  ;One sector to copy
   131 000007C3 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
   132 000007C7 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
   133 000007CB E8BC060000          <1>     call absDiskWrite    ;Call INT 46h
   134 000007D0 7222                <1>     jc .fbFail
   135                              <1> ;Now check if the buffer was a FAT, to write additional copies
   136 000007D2 F6450902            <1>     test byte [rbp + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   137 000007D6 7411                <1>     jz .fbFreeExit  ;If not, exit
   138 000007D8 FE4D12              <1>     dec byte [rbp + bufferHdr.bufFATcopy]
   139 000007DB 740C                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   140 000007DD 8B4513              <1>     mov eax, dword [rbp + bufferHdr.bufFATsize]
   141 000007E0 4801450A            <1>     add qword [rbp + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   142 000007E4 E9CDFFFFFF          <1>     jmp .fbRequest0 ;Make another request
   143                              <1> .fbFreeExit:
   144                              <1> ;Free the buffer if it was flushed successfully
   145 000007E9 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1
   146 000007ED F8                  <1>     clc
   147                              <1> .fbExitBad:
   148 000007EE 5E                  <1>     pop rsi
   149 000007EF 5A                  <1>     pop rdx
   150 000007F0 59                  <1>     pop rcx
   151 000007F1 5B                  <1>     pop rbx
   152 000007F2 58                  <1>     pop rax
   153 000007F3 C3                  <1>     ret
   154                              <1> .fbFail:
   155                              <1> ;Enter here only if the request failed
   156 000007F4 FFCE                <1>     dec esi
   157 000007F6 75C3                <1>     jnz .fbRequest1 ;Try the request again!
   158                              <1> ;Request failed thrice, critical error call
   159 000007F8 F9                  <1>     stc
   160 000007F9 E9F0FFFFFF          <1>     jmp .fbExitBad  ;Abort
   161                              <1>     
   162                              <1> findLRUBuffer: 
   163                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   164                              <1> ; in rbx
   165                              <1> ;Input: Nothing
   166                              <1> ;Output: rbx = Pointer to the buffer hdr to use
   167 000007FE 52                  <1>     push rdx
   168 000007FF 488B1D(8A000000)    <1>     mov rbx, qword [bufHeadPtr]
   169 00000806 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   170 0000080A 7436                <1>     je .flbExit 
   171 0000080C 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   172 00000813 742D                <1>     je .flbExit
   173                              <1> .flbWalk:
   174 00000815 4889DA              <1>     mov rdx, rbx    ;Save a ptr to the previous buffer header
   175 00000818 488B1A              <1>     mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   176 0000081B 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1
   177 0000081F 7423                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   178 00000821 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   179 00000828 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   180 0000082A 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   181                              <1> .flbHeadLink:
   182 00000831 488B15(8A000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   183 00000838 48891D(8A000000)    <1>     mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
   184 0000083F 488913              <1>     mov qword [rbx + bufferHdr.nextBufPtr], rdx
   185                              <1> .flbExit:
   186 00000842 5A                  <1>     pop rdx
   187 00000843 C3                  <1>     ret
   188                              <1> .flbFreeLink:
   189 00000844 51                  <1>     push rcx
   190 00000845 488B0B              <1>     mov rcx, qword [rbx + bufferHdr.nextBufPtr]
   191 00000848 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rbx
   192 0000084B 59                  <1>     pop rcx
   193 0000084C EBE3                <1>     jmp short .flbHeadLink
   194                              <1> 
   195                              <1> findDirtyBufferForDrive:    ;EXTERNAL LINKAGE
   196                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   197                              <1> ;Input: dl = Drive number
   198                              <1> ;Output: rbx = Pointer to dirty buffer for drive letter if exists or -1 if not
   199 0000084E 488B1D(8A000000)    <1>     mov rbx, qword [bufHeadPtr]
   200                              <1> .fdbfdCheckBuffer:
   201 00000855 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   202 00000858 7507                <1>     jne .fdbfdGotoNextBuffer
   203 0000085A F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   204 0000085E 7401                <1>     jz .fdbfdGotoNextBuffer ;Bit not set, goto next buffer
   205                              <1> .fdbfdExit:
   206 00000860 C3                  <1>     ret
   207                              <1> .fdbfdGotoNextBuffer:
   208 00000861 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   209 00000864 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   210 0000086B 74F3                <1>     je .fdbfdExit
   211 0000086D EBE6                <1>     jmp short .fdbfdCheckBuffer
   212                              <1> 
   213                              <1> findSectorInBuffer:     ;EXTERNAL LINKAGE
   214                              <1> ;Finds the Buffer for a sector
   215                              <1> ;If the sector is not in a buffer, returns with a -1
   216                              <1> ;Input: rax = Sector number
   217                              <1> ;        dl = Drive number
   218                              <1> ;Output: rbx = Buffer hdr pointer or -1
   219 0000086F 488B1D(8A000000)    <1>     mov rbx, qword [bufHeadPtr]
   220                              <1> .fsiCheckBuffer:
   221 00000876 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   222 00000879 7507                <1>     jne .fsiGotoNextBuffer
   223 0000087B 4839430A            <1>     cmp qword [rbx + bufferHdr.bufferLBA], rax
   224 0000087F 7501                <1>     jne .fsiGotoNextBuffer
   225                              <1> .fsiExit:
   226 00000881 C3                  <1>     ret
   227                              <1> .fsiGotoNextBuffer:
   228 00000882 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   229 00000885 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   230 0000088C 74F3                <1>     je .fsiExit
   231 0000088E EBE6                <1>     jmp short .fsiCheckBuffer
    17                                  %include "./Source/Kernel/fat.asm"
    18                              <1> ;-----------------------------------:
    19                              <1> ;       File System routines        :
    20                              <1> ;-----------------------------------:
    21                              <1> name2Clust:
    22                              <1> ;Converts a file name to a first cluster number
    23                              <1> ;Entry : rbx = Points to ASCIIZ string to parse for a Cluster number
    24                              <1> ;Exit : rax = Cluster number or -1 if file not found
    25                              <1> ;Three cases:
    26                              <1> ;1) Start with a letter and a : => Full path and Drive specified
    27                              <1> ;2) Start with \ or / => Current Drive and relative path from root
    28                              <1> ;3) Else => File name in Current Dir or a subdir from current dir
    29 00000890 56                  <1>     push rsi
    30 00000891 57                  <1>     push rdi
    31 00000892 51                  <1>     push rcx
    32 00000893 52                  <1>     push rdx
    33 00000894 4889DF              <1>     mov rdi, rbx    ;Save string ptr in rdi
    34 00000897 807F013A            <1>     cmp byte [rdi + 1], ":" ;Check it is a colon for full path
    35 0000089B 7427                <1>     je .fullPath
    36 0000089D 803F5C              <1>     cmp byte [rdi], "\"
    37 000008A0 7422                <1>     je .relPath
    38 000008A2 803F2F              <1>     cmp byte [rdi], "/"
    39 000008A5 741D                <1>     je .relPath ;Both CPM and UNIX are considered acceptible path separators
    40                              <1>     ;Else search the current dir for an entry
    41 000008A7 480FB605(F2000000)  <1>     movzx rax, byte [currentDrv]   ;Get current drive
    42 000008AF E8B5050000          <1>     call getCDS
    43 000008B4 8B434D              <1>     mov eax, dword [rbx + cds.dStartCluster]    ;Get start cluster
    44 000008B7 488B7345            <1>     mov rsi, qword [rbx + cds.qDPBPtr]  ;Get dpb ptr in rsi
    45 000008BB 85C0                <1>     test eax, eax
    46 000008BD 7505                <1>     jnz .localFileNoRoot
    47                              <1>     ;Here, we deal with Root Directories
    48 000008BF E872000000          <1>     call getFATtype ;rsi points to dpb
    49                              <1>     ;if ecx = 2, then FAT 32 and must treat differently
    50                              <1> 
    51                              <1> .localFileNoRoot:
    52                              <1> .relPath:
    53                              <1> .fullPath:
    54                              <1> .exit:
    55 000008C4 5A                  <1>     pop rdx
    56 000008C5 59                  <1>     pop rcx
    57 000008C6 5F                  <1>     pop rdi
    58 000008C7 5E                  <1>     pop rsi
    59 000008C8 C3                  <1>     ret
    60                              <1> 
    61                              <1> searchDirectorySectorForEntry:
    62                              <1> ;Proc that searches the sector for the string 
    63                              <1> ; UP UNTIL the NULL char or the path separator
    64                              <1> ;If a . is found in file name, skip it
    65                              <1> ;If a sector entry is found to start with 0, return fail
    66                              <1> ;Entry: rdx = Path Section ptr (point to first A/N char)
    67                              <1> ;       rbx = Sector buffer pointer
    68                              <1> ;       rsi = DPB pointer
    69                              <1> ;Exit: CF=NC => Found, CF=CY => Not found
    70                              <1> ;       If CF=CY read char pointed to by rbx.
    71                              <1> ;       If this char is 0, then end of directory reached!
    72 000008C9 50                  <1>     push rax
    73 000008CA 51                  <1>     push rcx
    74                              <1>     ;cl has number of entries per sector
    75 000008CB 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
    76 000008CE 80E905              <1>     sub cl, 5   ;5 is the number of bytes per dir entry shift
    77 000008D1 B801000000          <1>     mov eax, 1
    78 000008D6 D3E0                <1>     shl eax, cl ;eax has number of directory entries in sector
    79                              <1>     ;Now search each entry for name
    80                              <1>     ;Use ecx as counter for each entry
    81 000008D8 89C1                <1>     mov ecx, eax
    82                              <1> .searchDir:
    83 000008DA 803B00              <1>     cmp byte [rbx], 0 ;Check if dir empty before proceeding
    84 000008DD 744E                <1>     jz .exitNotOK
    85                              <1>     ;Do string compare here, search for / or \ or 0 to exit
    86 000008DF 52                  <1>     push rdx    ;Push the name pointer 
    87 000008E0 53                  <1>     push rbx    ;Push sector pointer
    88                              <1> .searchLoop:
    89 000008E1 8A02                <1>     mov al, byte [rdx] ;Get char in ASCIIZ buffer
    90 000008E3 3C2E                <1>     cmp al, "." ;Verify if name separator or directory entry
    91 000008E5 742C                <1>     je .dotCase
    92 000008E7 3C05                <1>     cmp al, 05h ;Special Case
    93 000008E9 7424                <1>     je .specialCase
    94 000008EB 3C2F                <1>     cmp al, "/" ;Name Found
    95 000008ED 7442                <1>     je .nameFound
    96 000008EF 3C5C                <1>     cmp al, "\" ;Name Found
    97 000008F1 743E                <1>     je .nameFound
    98 000008F3 3C00                <1>     cmp al, 0   ;End of ASCIIZ string!
    99 000008F5 743A                <1>     je .nameFound
   100                              <1> .specRet:
   101 000008F7 3A03                <1>     cmp al, byte [rbx]  ;Compare to char in sector buffer
   102 000008F9 7520                <1>     jne .nameNotFound
   103 000008FB 48FFC3              <1>     inc rbx
   104                              <1> .skipChar:
   105 000008FE 48FFC2              <1>     inc rdx ;Go to Filename extension
   106 00000901 5B                  <1>     pop rbx ;Get start of directory entry into rbx
   107 00000902 53                  <1>     push rbx
   108 00000903 4881C308000000      <1>     add rbx, 8  ;Go to the extension portion of the Filename
   109 0000090A E9D2FFFFFF          <1>     jmp .searchLoop
   110                              <1> .specialCase:
   111 0000090F B0E5                <1>     mov al, 0E5h
   112 00000911 EBE4                <1>     jmp short .specRet
   113                              <1> .dotCase:
   114                              <1> ;Check if next char is geq than 'A'. If yes, path separator
   115 00000913 807A0141            <1>     cmp byte [rdx + 1], 'A'
   116 00000917 7CDE                <1>     jnge .specRet   ;Not Path Separator
   117 00000919 EBE3                <1>     jmp short .skipChar
   118                              <1> .nameNotFound:
   119 0000091B 5B                  <1>     pop rbx
   120 0000091C 5A                  <1>     pop rdx
   121 0000091D 4881C320000000      <1>     add rbx, 20h    ;Goto next sector entry
   122 00000924 803B00              <1>     cmp byte [rbx], 0   ;Are we at the end of the Directory?
   123 00000927 7404                <1>     jz .exitNotOK   ;Exit early, end of directory
   124 00000929 FFC9                <1>     dec ecx
   125 0000092B 75AD                <1>     jnz .searchDir
   126                              <1> .exitNotOK:
   127 0000092D F9                  <1>     stc
   128                              <1> .exitOk:
   129 0000092E 59                  <1>     pop rcx
   130 0000092F 58                  <1>     pop rax
   131 00000930 C3                  <1>     ret
   132                              <1> .nameFound:
   133 00000931 5B                  <1>     pop rbx
   134 00000932 5A                  <1>     pop rdx
   135 00000933 F8                  <1>     clc
   136 00000934 EBF8                <1>     jmp short .exitOk
   137                              <1> getFATtype:
   138                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
   139                              <1> ;Entry: rsi = DPB to ascertain FAT
   140                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
   141 00000936 53                  <1>     push rbx
   142 00000937 8B5E0E              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
   143 0000093A B901000000          <1>     mov ecx, 1  ;FAT 16 marker
   144 0000093F 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
   145 00000945 730F                <1>     jae .exit
   146 00000947 FFC9                <1>     dec ecx     ;FAT 12 marker
   147 00000949 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
   148 0000094F 7205                <1>     jb .exit
   149 00000951 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
   150                              <1> .exit:
   151 00000956 5B                  <1>     pop rbx
   152 00000957 C3                  <1>     ret
   153                              <1> 
   154                              <1> clust2FATEntry:
   155                              <1> ;Converts a cluster number to a offset in the FAT
   156                              <1> ;Entry:  rsi points to the DPB for the transacting device
   157                              <1> ;        eax = Cluster number to look for
   158                              <1> ;Exit:   eax = Sector on disk of FAT 
   159                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
   160                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
   161 00000958 53                  <1>     push rbx
   162 00000959 8B5E0E              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
   163 0000095C 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
   164 00000962 731E                <1>     jae .fat32
   165 00000964 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
   166 0000096A 7209                <1>     jb .fat12
   167                              <1> ;FAT16
   168 0000096C D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
   169 0000096E 6801000000          <1>     push qword 1
   170 00000973 EB15                <1>     jmp short .common
   171                              <1> .fat12:
   172 00000975 89C1                <1>     mov ecx, eax    ;ecx = eax
   173 00000977 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
   174 00000979 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
   175 0000097B 6800000000          <1>     push qword 0
   176 00000980 EB08                <1>     jmp short .common
   177                              <1> .fat32:
   178 00000982 6802000000          <1>     push qword 2
   179 00000987 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
   180                              <1> .common:
   181                              <1> ;eax has the FAToffset
   182 0000098A 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
   183 0000098D BA01000000          <1>     mov edx, 1
   184 00000992 D3E2                <1>     shl edx, cl    ;Turn edx to number of bytes per sector
   185 00000994 89D1                <1>     mov ecx, edx
   186 00000996 31D2                <1>     xor edx, edx    ;edx = 0
   187 00000998 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
   188 0000099A 0FB75E05            <1>     movzx ebx, word [rsi + dpb.wFAToffset]   ;Add the offset to the first FAT
   189 0000099E 01D8                <1>     add eax, ebx
   190 000009A0 59                  <1>     pop rcx ;Pop the FAT type back into rcx
   191 000009A1 5B                  <1>     pop rbx
   192 000009A2 C3                  <1>     ret
   193                              <1> getStartSectorOfCluster:
   194                              <1> ;Input: eax = Cluster Number
   195                              <1> ;       r9 = dpb pointer
   196                              <1> ;Output: eax = Starting Sector number for cluster
   197                              <1> ;Gives the data sector we are at in the current cluster
   198                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
   199 000009A3 51                  <1>     push rcx
   200 000009A4 2D02000000          <1>     sub eax, 2
   201 000009A9 418A4904            <1>     mov cl, byte [r9 + dpb.bSectorsPerClusterShift]
   202 000009AD D3E0                <1>     shl eax, cl
   203 000009AF 4103410A            <1>     add eax, [r9 + dpb.dClusterHeapOffset]
   204                              <1>     ;eax now has the first sector of the current cluster
   205 000009B3 59                  <1>     pop rcx
   206 000009B4 C3                  <1>     ret
   207                              <1> getNextSectorOfFile:
   208                              <1> ;This function will read the next sector for a file into a buffer.
   209                              <1> ;If the next sector to be read lives in the next cluster, it will update
   210                              <1> ; the file handle of the file being read/written to the new cluster
   211                              <1> ;
   212                              <1> ;Input: r8 = sft pointer
   213                              <1> ;       r9 = dpb pointer
   214                              <1> ;Output:
   215                              <1> ;       rbx = Pointer to buffer data
   216                              <1> ;       CF = NC, buffer OK to read
   217                              <1> ;       CF = CY, buffer not ok, something went wrong
   218                              <1> ;           ZF = ZE(1), Data not flushed to disk
   219                              <1> ;           ZF = NZ(0), Data no read from disk
   220                              <1>     ;Read next sector. If at last sector in cluster, walk map, get
   221                              <1>     ; next cluster and read first sector 
   222 000009B5 50                  <1>     push rax
   223 000009B6 51                  <1>     push rcx
   224 000009B7 52                  <1>     push rdx
   225 000009B8 56                  <1>     push rsi
   226 000009B9 57                  <1>     push rdi
   227                              <1>     ;Check if we need to go to next cluster
   228 000009BA 66418B401F          <1>     mov ax, word [r8 + sft.wRelSect]    ;Upper byte is ALWAYS 0
   229 000009BF 413A4103            <1>     cmp al, byte [r9 + dpb.bMaxSectorInCluster]
   230 000009C3 745F                <1>     je .gotoNextCluster
   231                              <1>     ;Goto next sector
   232 000009C5 6641FF401F          <1>     inc word [r8 + sft.wRelSect]    ;Goto next sector in cluster
   233                              <1> .getSector:
   234 000009CA 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr] ;Get cluster number
   235 000009CE E8D0FFFFFF          <1>     call getStartSectorOfCluster
   236 000009D3 410FB7581F          <1>     movzx ebx, word [r8 + sft.wRelSect] ;Get relative sector number
   237                              <1>     ;eax now has the correct sector in the cluster
   238 000009D8 01D8                <1>     add eax, ebx    
   239                              <1>     ;Read the sector into a buffer
   240                              <1>     ;The sector read here is either DATA or DOS
   241 000009DA 498D7026            <1>     lea rsi, qword [r8 + sft.sFileName]
   242 000009DE 488D3D1DF6FFFF      <1>     lea rdi, dosBIOSName    ;Check if the file being read is the BIOS
   243 000009E5 B90B000000          <1>     mov ecx, 11             ;File name length
   244 000009EA F3A6                <1>     repe cmpsb
   245 000009EC 742D                <1>     je .OSFile
   246 000009EE 498D7026            <1>     lea rsi, qword [r8 + sft.sFileName]
   247 000009F2 488D3D15F6FFFF      <1>     lea rdi, dosKernName
   248 000009F9 B90B000000          <1>     mov ecx, 11             ;File name length
   249 000009FE F3A6                <1>     repe cmpsb
   250 00000A00 7419                <1>     je .OSFile
   251                              <1>     ;Not an OS file, dataBuffer
   252 00000A02 B108                <1>     mov cl, dataBuffer
   253                              <1> .getSectorRead:
   254 00000A04 4C89CE              <1>     mov rsi, r9
   255 00000A07 E813FDFFFF          <1>     call readBuffer
   256 00000A0C 7211                <1>     jc .getSectorFailed
   257 00000A0E 4881C320000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   258                              <1> .getSectorExit:
   259 00000A15 5F                  <1>     pop rdi
   260 00000A16 5E                  <1>     pop rsi
   261 00000A17 5A                  <1>     pop rdx
   262 00000A18 59                  <1>     pop rcx
   263 00000A19 58                  <1>     pop rax
   264 00000A1A C3                  <1>     ret
   265                              <1> .OSFile:
   266 00000A1B B101                <1>     mov cl, dosBuffer
   267 00000A1D EBE5                <1>     jmp short .getSectorRead
   268                              <1> .getSectorFailed:
   269                              <1>     ;CF = CY => Something went wrong!
   270                              <1>     ;   Set the Zero flag for data not flushed to disk
   271                              <1>     ;   Clear Zero flag for data not read from disk
   272 00000A1F 84ED                <1>     test ch, ch ;This sets the zero flag correctly, but mangles CF
   273 00000A21 F9                  <1>     stc ;Set the carry flag!
   274 00000A22 EBF1                <1>     jmp short .getSectorExit
   275                              <1> 
   276                              <1> .gotoNextCluster:
   277                              <1>     ;Read FAT, find next cluster in cluster map, update SFT entries
   278 00000A24 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr] ;Get the current cluster
   279 00000A28 4C89CE              <1>     mov rsi, r9 ;Move dpb pointer into rsi, eax has cluster number
   280 00000A2B E828FFFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   281 00000A30 410FB75905          <1>     movzx ebx, word [r9 + dpb.wFAToffset]
   282 00000A35 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   283 00000A37 B102                <1>     mov cl, fatBuffer
   284 00000A39 E8E1FCFFFF          <1>     call readBuffer ;Buffer Header in ebx
   285 00000A3E 72DF                <1>     jc .getSectorFailed
   286                              <1>     ;Check if FAT 12, 16, 32
   287 00000A40 4885FF              <1>     test rdi, rdi
   288 00000A43 7429                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   289 00000A45 48F7C701000000      <1>     test rdi, 1
   290 00000A4C 7407                <1>     jz .goToNextClusterCommonFat32
   291                              <1>     ;Here we handle FAT16
   292 00000A4E 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   293 00000A53 EB09                <1>     jmp short .goToNextClusterCommon
   294                              <1> .goToNextClusterCommonFat32:
   295 00000A55 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   296 00000A59 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   297                              <1> .goToNextClusterCommon:
   298 00000A5E 41894039            <1>     mov dword [r8 + sft.dAbsClusr], eax ;Save new cluster number
   299 00000A62 6641C7401F0000      <1>     mov word [r8 + sft.wRelSect], 0 ;First sector in next cluster
   300 00000A69 E95CFFFFFF          <1>     jmp .getSector
   301                              <1> .gotoNextClusterFat12:
   302                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   303                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   304 00000A6E 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   305 00000A71 FFC0                <1>     inc eax ;Get next sector
   306 00000A73 E8A7FCFFFF          <1>     call readBuffer ;Buffer Header in ebx
   307 00000A78 72A5                <1>     jc .getSectorFailed
   308                              <1>     ;rdi has first buffer header, rbx has second buffer header
   309                              <1>     ;rdx has offset into first header for entry
   310 00000A7A 41F7403901000000    <1>     test dword [r8 + sft.dAbsClusr], 1  ;Check if cluster is odd
   311 00000A82 7429                <1>     jz .gotoNextClusterFat12Even
   312                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   313 00000A84 B801000000          <1>     mov eax, 1
   314 00000A89 418A4802            <1>     mov cl, byte [r8 + dpb.bBytesPerSectorShift]
   315 00000A8D D3E0                <1>     shl eax, cl
   316 00000A8F 29D0                <1>     sub eax, edx
   317 00000A91 FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   318 00000A93 750E                <1>     jnz .gotoNextClusterFat12NoCross
   319                              <1>     ;Boundary cross, build entry properly
   320 00000A95 31C0                <1>     xor eax, eax
   321 00000A97 8A441720            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   322 00000A9B 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   323 00000A9E C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   324 00000AA1 EBBB                <1>     jmp short .goToNextClusterCommon
   325                              <1> .gotoNextClusterFat12NoCross:
   326 00000AA3 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   327 00000AA8 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   328 00000AAB EBB1                <1>     jmp short .goToNextClusterCommon
   329                              <1> .gotoNextClusterFat12Even:
   330                              <1>     ;Here the cluster is even and can't cross a sector boundary
   331 00000AAD 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   332 00000AB2 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   333 00000AB7 EBA5                <1>     jmp short .goToNextClusterCommon
   334                              <1> ;---------------------------------------------------:
   335                              <1> ;                   KERNEL FUNCTIONS                :
   336                              <1> ;---------------------------------------------------:
   337                              <1> makeDIR:           ;ah = 39h
   338                              <1> removeDIR:         ;ah = 3Ah
   339                              <1> changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
   340                              <1> getCurrentDIR:     ;ah = 47h
   341                              <1> getSetFileDateTime:;ah = 57h
   342                              <1> trueName:          ;ah = 60h, get fully qualified name
   343 00000AB9 C3                  <1>     ret
    18                                  %include "./Source/Kernel/charFunctions.asm"
    19                              <1> ;Dos default char functions live here
    20                              <1> 
    21                              <1> stdinReadEcho:     ;ah = 01h
    22                              <1> ;Return char that has been read and echoed in al
    23 00000ABA 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    24 00000AC1 488D0566000000      <1>     lea rax, .stdinReadEchoBuffer
    25 00000AC8 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    26 00000ACB C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    27 00000ACF 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    28 00000AD5 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    29 00000AD9 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    30 00000AE0 FF154C130000        <1>     call qword [conHdr + drvHdr.strPtr]
    31 00000AE6 FF154E130000        <1>     call qword [conHdr + drvHdr.intPtr]
    32 00000AEC 803D3B00000000      <1>     cmp byte [.stdinReadEchoBuffer], 00h
    33 00000AF3 7432                <1>     jz .stdireexit
    34 00000AF5 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    35 00000AFC 488D052B000000      <1>     lea rax, .stdinReadEchoBuffer
    36 00000B03 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    37 00000B06 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    38 00000B0A 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    39 00000B10 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    40 00000B14 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    41 00000B1B FF1511130000        <1>     call qword [conHdr + drvHdr.strPtr]
    42 00000B21 FF1513130000        <1>     call qword [conHdr + drvHdr.intPtr]
    43                              <1> .stdireexit:
    44 00000B27 8A0501000000        <1>     mov al, byte [.stdinReadEchoBuffer]
    45 00000B2D C3                  <1>     ret
    46 00000B2E 00                  <1> .stdinReadEchoBuffer    db 0
    47                              <1> stdoutWrite:       ;ah = 02h
    48                              <1> ;Bspace is regular cursor left, does not insert a blank
    49 00000B2F 881533000000        <1>     mov byte [.stdoutWriteBuffer], dl
    50 00000B35 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    51 00000B3C 488D1525000000      <1>     lea rdx, .stdoutWriteBuffer
    52 00000B43 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    53 00000B46 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    54 00000B4A 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    55 00000B50 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    56 00000B54 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    57 00000B5B FF15D1120000        <1>     call qword [conHdr + drvHdr.strPtr]
    58 00000B61 FF15D3120000        <1>     call qword [conHdr + drvHdr.intPtr]
    59 00000B67 C3                  <1>     ret
    60 00000B68 00                  <1> .stdoutWriteBuffer db 0
    61                              <1> stdauxRead:        ;ah = 03h
    62                              <1> stdauxWrite:       ;ah = 04h
    63                              <1> stdprnWrite:       ;ah = 05h
    64                              <1> directCONIO:       ;ah = 06h
    65                              <1> waitDirectInNoEcho:;ah = 07h
    66                              <1> ;Return char in al
    67 00000B69 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    68 00000B70 488D052B000000      <1>     lea rax, .function7buffer
    69 00000B77 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    70 00000B7A C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    71 00000B7E 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    72 00000B84 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    73 00000B88 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    74 00000B8F FF159D120000        <1>     call qword [conHdr + drvHdr.strPtr]
    75 00000B95 FF159F120000        <1>     call qword [conHdr + drvHdr.intPtr]
    76 00000B9B 8A0501000000        <1>     mov al, byte [.function7buffer]
    77 00000BA1 C3                  <1>     ret
    78 00000BA2 00                  <1> .function7buffer    db 0
    79                              <1> waitStdinNoEcho:   ;ah = 08h
    80 00000BA3 C3                  <1>     ret
    81                              <1> printString:       ;ah = 09h
    82 00000BA4 31C9                <1>     xor ecx, ecx    ;Clear char counter
    83 00000BA6 B824000000          <1>     mov eax, "$"    ;Terminating char
    84 00000BAB 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
    85                              <1> .ps0:   ;Search for $ to get count of chars
    86 00000BAE AE                  <1>     scasb
    87 00000BAF 7404                <1>     je .ps1
    88 00000BB1 FFC1                <1>     inc ecx
    89 00000BB3 EBF9                <1>     jmp short .ps0
    90                              <1> .ps1:   ;Use handle 
    91 00000BB5 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    92 00000BBC C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    93 00000BBF C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    94 00000BC3 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    95 00000BC9 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    96 00000BCD 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
    97 00000BD0 FF155C120000        <1>     call qword [conHdr + drvHdr.strPtr]
    98 00000BD6 FF155E120000        <1>     call qword [conHdr + drvHdr.intPtr]
    99                              <1> 
   100 00000BDC 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
   101 00000BE3 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
   102 00000BE5 C3                  <1>     ret
   103                              <1> buffStdinInput:    ;ah = 0Ah
   104                              <1> checkStdinStatus:  ;ah = 0Bh
   105                              <1> clearbuffDoFunc:   ;ah = 0Ch
    19                                  %include "./Source/Kernel/fcbFunctions.asm"
    20                              <1> openFileFCB:       ;ah = 0Fh
    21                              <1> closeFileFCB:      ;ah = 10h
    22                              <1> findFirstFileFCB:  ;ah = 11h
    23                              <1> findNextFileFCB:   ;ah = 12h
    24                              <1> deleteFileFCB:     ;ah = 13h
    25                              <1> sequentialReadFCB: ;ah = 14h
    26                              <1> sequentialWriteFCB:;ah = 15h
    27                              <1> createFileFCB:     ;ah = 16h
    28                              <1> renameFileFCB:     ;ah = 17h
    29 00000BE6 C3                  <1>     ret
    30                              <1> setDTA:            ;ah = 1Ah
    31                              <1> ;Called with:
    32                              <1> ;   rdx = Pointer to the new default DTA
    33 00000BE7 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
    34 00000BEE 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    35 00000BF2 488915(D0000000)    <1>     mov qword [currentDTA], rdx
    36 00000BF9 C3                  <1>     ret
    37                              <1> randomReadFCB:     ;ah = 21h
    38                              <1> randomWriteFCB:    ;ah = 22h
    39                              <1> getFileSizeFCB:    ;ah = 23h
    40                              <1> setRelRecordFCB:   ;ah = 24h
    41                              <1> randBlockReadFCB:  ;ah = 27h
    42                              <1> randBlockWriteFCB: ;ah = 28h
    43                              <1> parseFilenameFCB:  ;ah = 29h
    44 00000BFA C3                  <1>     ret
    45                              <1> getDTA:            ;ah = 2Fh
    46 00000BFB 488B15(09010000)    <1>     mov rdx, qword [oldRSP]
    47 00000C02 488B1D(D0000000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    48 00000C09 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    49 00000C0D C3                  <1>     ret
    20                                  %include "./Source/Kernel/handleFunctions.asm"
    21                              <1> ;-----------------------------------:
    22                              <1> ;    File Handle Kernel routines    :
    23                              <1> ;-----------------------------------:
    24                              <1> 
    25                              <1> createFileHdl:     ;ah = 3Ch, handle function
    26                              <1> openFileHdl:       ;ah = 3Dh, handle function
    27                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    28 00000C0E C3                  <1>     ret
    29                              <1> readFileHdl:       ;ah = 3Fh, handle function
    30 00000C0F 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
    31 00000C16 E83F000000          <1>     call getSFTPtr
    32 00000C1B 722B                <1>     jc .rfhErrorHandle  ;Function can only fail for bad file handle
    33                              <1> ;Here rdi points to the correct SFT 
    34 00000C1D 668B4702            <1>     mov ax, word [rdi + sft.wOpenMode]  ;Get open mode
    35 00000C21 A802                <1>     test al, RWAccess  ;Check r/w permission
    36 00000C23 7504                <1>     jnz .rfh2   ;Bit set, proceed
    37 00000C25 84C0                <1>     test al, al  ;Check read access (it is 0)
    38 00000C27 751F                <1>     jnz .rfhNoPermission    ;If not zero then it is write only permission
    39                              <1> .rfh2:
    40                              <1>     ;So now read the number of bytes from the data buffers
    41 00000C29 4889FB              <1>     mov rbx, rdi    ;Move SFT pointer into rbx
    42 00000C2C F6430520            <1>     test byte [rbx + sft.wDeviceInfo], devBinary
    43 00000C30 7409                <1>     jz .rfhASCII    ;If not set, read in ASCII
    44 00000C32 E870000000          <1>     call readBinaryBytesFromFile
    45 00000C37 720F                <1>     jc .rfCriticalError
    46 00000C39 EB07                <1>     jmp short .rfhExitOK
    47                              <1> .rfhASCII:
    48 00000C3B E866000000          <1>     call readASCIIBytesFromFile
    49 00000C40 7206                <1>     jc .rfCriticalError
    50                              <1> .rfhExitOK:
    51 00000C42 88C8                <1>     mov al, cl  ;Get low byte in cl
    52 00000C44 894D00              <1>     mov dword [rbp + callerFrame.rax], ecx  ;Save number of bytes transf.
    53 00000C47 C3                  <1>     ret
    54                              <1> .rfCriticalError:
    55                              <1>     ;Fail due to driver error. Invoke Int 44h if set to in SFT
    56                              <1> .rfhErrorHandle:
    57                              <1>     ;Fail due to bad file handle provided
    58                              <1> .rfhNoPermission:
    59                              <1>     ;Fail due to bad permissions
    60                              <1> writeFileHdl:      ;ah = 40h, handle function
    61 00000C48 E80D000000          <1>     call getSFTPtr
    62 00000C4D 720A                <1>     jc .wfhErrorHandle  ;Function can only fail for bad file handle
    63 00000C4F 668B4702            <1>     mov ax, word [rdi + sft.wOpenMode]  ;Get open mode
    64 00000C53 66A90300            <1>     test ax, 3
    65 00000C57 7400                <1>     jz .wfhNoPermission ;Bad permissions! No r/w or w permissions
    66                              <1> .wfCriticalError:
    67                              <1>     ;Fail due to driver error. Invoke Int 44h if set to in SFT
    68                              <1> .wfhErrorHandle:
    69                              <1>     ;Fail due to bad file handle provided
    70                              <1> .wfhNoPermission:
    71                              <1>     ;Fail due to bad permissions
    72                              <1> 
    73                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    74                              <1> movFileReadPtr:    ;ah = 42h, handle function, LSEEK
    75                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
    76                              <1> ioctrl:            ;ah = 44h, handle function
    77                              <1> duplicateHandle:   ;ah = 45h, handle function
    78                              <1> forceDuplicateHdl: ;ah = 46h, handle function
    79                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
    80                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
    81                              <1> renameFile:        ;ah = 56h
    82                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
    83                              <1> createNewFile:     ;ah = 5Bh
    84                              <1> lockUnlockFile:    ;ah = 5Ch
    85                              <1> setHandleCount:    ;ah = 67h
    86                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
    87 00000C59 C3                  <1>     ret
    88                              <1> ;-----------------------------------:
    89                              <1> ;        File Handle routines       :
    90                              <1> ;-----------------------------------:
    91                              <1> getSFTPtr:
    92                              <1> ;Gets the SFT pointer for a given file handle from the calling application
    93                              <1> ;On entry:
    94                              <1> ;   bl = File handle
    95                              <1> ;On exit:
    96                              <1> ;   rsi = currentPSP
    97                              <1> ;   rdi = SFT pointer
    98                              <1> ;   rax, rbx trashed
    99 00000C5A 488B35(D8000000)    <1>     mov rsi, qword [currentPSP]
   100 00000C61 480FB6DB            <1>     movzx rbx, bl
   101 00000C65 8A5C1E2A            <1>     mov bl, byte [rsi + psp.jobFileTbl + rbx]   ;Use jft entry to get sft num
   102 00000C69 31C0                <1>     xor eax, eax
   103 00000C6B 488B3D(70000000)    <1>     mov rdi, qword [sftHeadPtr]
   104                              <1> .gsp0:
   105 00000C72 66034708            <1>     add ax, word [rdi + sfth.wNumFiles]
   106 00000C76 38D8                <1>     cmp al, bl  ;Check if the file header block contains the entry
   107 00000C78 760E                <1>     jbe .gsp1   ;IF bl is below or equal to al then it does
   108 00000C7A 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of list
   109 00000C81 7421                <1>     je .gspFail   ;If we have a number greater than the last entry, fail
   110 00000C83 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Walk the chain
   111 00000C86 EBEA                <1>     jmp short .gsp0 ;Search again
   112                              <1> .gsp1: 
   113                              <1>     ;Now point to the right entry
   114 00000C88 28D8                <1>     sub al, bl  ;Subtract the number from the total so far to get offset
   115 00000C8A 0FB6C0              <1>     movzx eax, al
   116 00000C8D 4881C70A000000      <1>     add rdi, sfth_size  ;Point to first file in table
   117 00000C94 84C0                <1>     test al, al ;Check if rdi points to the first file in this block
   118 00000C96 740B                <1>     jz .gsp12   ;Skip walking down the sft blocks
   119                              <1> .gsp11:
   120 00000C98 4881C73D000000      <1>     add rdi, sft_size
   121 00000C9F FEC8                <1>     dec al
   122 00000CA1 75F5                <1>     jnz .gsp11  ;Keep adding one until al is zero
   123                              <1> .gsp12:
   124 00000CA3 C3                  <1>     ret
   125                              <1> .gspFail:
   126 00000CA4 F9                  <1>     stc
   127 00000CA5 C3                  <1>     ret
   128                              <1> 
   129                              <1> readASCIIBytesFromFile:
   130 00000CA6 C3                  <1>     ret
   131                              <1> readBinaryBytesFromFile:
   132                              <1> ;Reads a byte from a SFT entry, does not translate it. 
   133                              <1> ;Read or RW permissions are checked at the INT 41h level
   134                              <1> ;Entry: rbp = Pointer to the caller stack
   135                              <1> ;       rbx = SFT entry pointer
   136                              <1> ;       On stack:
   137                              <1> ;           rdx = Address of the data buffer to read to
   138                              <1> ;           ecx = Number of bytes to read
   139                              <1> ;Exit: If CF = NC : All ok!
   140                              <1> ;       rbx = SFT entry pointer
   141                              <1> ;       ecx = Number of chars read/written
   142                              <1> ;      If CF = CY : Error!
   143                              <1> ;       rbx = SFT entry pointer
   144                              <1> ;       al = Error code to ret if user returns fail from int 44h or no int 44h
   145                              <1> 
   146 00000CA7 66F743058000        <1>     test word [rbx + sft.wDeviceInfo], devCharDev
   147 00000CAD 755C                <1>     jnz .readBinaryBytesFromCharDevice
   148                              <1> .readBinaryBytesFromHardFile:
   149                              <1> ;Disk files are accessed from here
   150                              <1> ;Use the sector buffers if the data is already buffered,
   151                              <1> ; else use the dpb to fill a sector buffer
   152 00000CAF 53                  <1>     push rbx
   153 00000CB0 4989D8              <1>     mov r8, rbx                     ;Use r8 as sft pointer
   154 00000CB3 4D8B4807            <1>     mov r9, qword [r8 + sft.qPtr]   ;Use r9 as dpb pointer
   155                              <1>     ;First compute the number of bytes to read for the current sector
   156                              <1>     ;Compute how many bytes in a sector
   157 00000CB7 418A4902            <1>     mov cl, byte [r9 + dpb.bBytesPerSectorShift]
   158 00000CBB B801000000          <1>     mov eax, 1
   159 00000CC0 D3E0                <1>     shl eax, cl
   160 00000CC2 89C1                <1>     mov ecx, eax    ;ecx has bytes per sector
   161 00000CC4 488B4510            <1>     mov rax, qword [rbp + callerFrame.rcx]  ;Get total number of bytes
   162 00000CC8 31D2                <1>     xor edx, edx
   163 00000CCA 48895510            <1>     mov qword [rbp + callerFrame.rcx], rdx  ;Zero this field
   164 00000CCE F7F1                <1>     div ecx ;Divide by number of bytes per sector
   165 00000CD0 87CA                <1>     xchg ecx, edx    ;Get "in current sector remainder of bytes" in ecx
   166                              <1>                      ;and bytes per sector in edx
   167 00000CD2 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr]  ;Get cluster number
   168 00000CD6 E8C8FCFFFF          <1>     call getStartSectorOfCluster
   169 00000CDB 410FB7581F          <1>     movzx ebx, word [r8 + sft.wRelSect] ;Add the offset into the cluster
   170 00000CE0 01D8                <1>     add eax, ebx    ;eax now has the sector number
   171 00000CE2 4C89CE              <1>     mov rsi, r9 ;Move dpb pointer into rsi
   172 00000CE5 4831FF              <1>     xor rdi, rdi
   173 00000CE8 89CF                <1>     mov edi, ecx    ;Save in current sector remainder of bytes in edi
   174 00000CEA B108                <1>     mov cl, dataBuffer
   175 00000CEC E82EFAFFFF          <1>     call readBuffer ;Read the data
   176 00000CF1 7218                <1>     jc .readBinaryBytesFromHardFileError
   177 00000CF3 4881C320000000      <1>     add rbx, bufferHdr.dataarea
   178 00000CFA 4889DE              <1>     mov rsi, rbx
   179 00000CFD 4889F9              <1>     mov rcx, rdi    ;Get the number of bytes to read in this sector to rbx
   180 00000D00 488B7D18            <1>     mov rdi, qword [rbp + callerFrame.rdx]  ;Point to destination
   181 00000D04 48014D10            <1>     add qword [rbp + callerFrame.rcx], rcx
   182 00000D08 F3A4                <1>     rep movsb   ;Move the bytes from this sector
   183                              <1> 
   184 00000D0A 5B                  <1>     pop rbx
   185                              <1> .readBinaryBytesFromHardFileError:
   186                              <1> 
   187                              <1> .readBinaryBytesFromCharDevice:
   188                              <1> ;Devices are accessed from here
   189 00000D0B 488B6B07            <1>     mov rbp, qword [rbx + sft.qPtr] ;Get device driver header pointer
   190 00000D0F 53                  <1>     push rbx
   191 00000D10 488D1D(0C000000)    <1>     lea rbx, charReqHdr
   192 00000D17 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   193 00000D1A C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], drvREAD
   194 00000D1E 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   195 00000D24 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   196 00000D28 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   197                              <1> 
   198 00000D2B FF550A              <1>     call qword [rbp + drvHdr.strPtr]
   199 00000D2E FF5512              <1>     call qword [rbp + drvHdr.intPtr]
   200 00000D31 8B4316              <1>     mov eax, dword [rbx + ioReqPkt.tfrlen] ;Get number of bytes read
   201 00000D34 66F743030080        <1>     test word [rbx + ioReqPkt.status], 8000h    ;Test the error bit is set
   202 00000D3A 5B                  <1>     pop rbx
   203 00000D3B 7400                <1>     jz .readBinaryBytesExitGood  ;Error bit not set, all good!
   204                              <1> .readBinaryBytesExitGood:
   205 00000D3D C3                  <1>     ret
   206                              <1> 
    21                                  %include "./Source/Kernel/memoryFunctions.asm"
    22                              <1> ;Memory related functions
    23                              <1> 
    24                              <1> ;-----------------------------------:
    25                              <1> ;  Memory related Kernel routines   :
    26                              <1> ;-----------------------------------:
    27                              <1> allocateMemory:    ;ah = 48h
    28                              <1> freeMemory:        ;ah = 49h
    29                              <1> reallocMemory:     ;ah = 4Ah
    30                              <1> getsetMallocStrat: ;ah = 58h
    31 00000D3E C3                  <1>     ret
    32                              <1> ;-----------------------------------:
    33                              <1> ;      Memory related routines      :
    34                              <1> ;-----------------------------------:
    35                              <1> verifyIntegrityOfMCBChain:
    36 00000D3F 488B1D(60000000)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
    37                              <1> .ok:
    38 00000D46 803B4D              <1>     cmp byte [rbx + mcb.marker], 'M'
    39 00000D49 7406                <1>     je .ok1
    40 00000D4B 803B5A              <1>     cmp byte [rbx + mcb.marker], "Z"    ;End of the chain?
    41 00000D4E 7509                <1>     jne .sysHalt    ;It was not M or Z, fail violently
    42                              <1> .exit:
    43 00000D50 C3                  <1>     ret ;We have reached the end of the chain, return all good!
    44                              <1> .ok1:
    45 00000D51 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
    46 00000D54 4801C3              <1>     add rbx, rax
    47 00000D57 EBED                <1>     jmp short .ok
    48                              <1> .sysHalt:
    49                              <1> ;Only arrive here if the integrity of the system is not verified
    50                              <1> ;Lock the system
    51 00000D59 488D1D0E000000      <1>     lea rbx, .sysHltString
    52 00000D60 B409                <1>     mov ah, 09h
    53 00000D62 CD41                <1>     int 41h
    54 00000D64 FA                  <1>     cli ;Halt interrupts
    55 00000D65 B0FF                <1>     mov al, 0FFh    ;Mask IRQ lines 
    56 00000D67 E6A1                <1>     out 0A1h, al
    57 00000D69 E621                <1>     out 021h, al
    58 00000D6B F4                  <1>     hlt             ;Halt the system
    59 00000D6C EBFB                <1>     jmp short $ - 3 ;Go back far enough to capture the hlt
    60 00000D6E 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
    60 00000D77 6C6F636174696F6E20- <1>
    60 00000D80 6572726F720D0A      <1>
    61 00000D87 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
    61 00000D90 616420434F4D4D414E- <1>
    61 00000D99 442C2073797374656D- <1>
    61 00000DA2 2068616C74656424    <1>
    22                                  %include "./Source/Kernel/dateTimeFunctions.asm"
    23                              <1> ;Major kernel date time functions and subroutines
    24                              <1> 
    25                              <1> getDate:           ;ah = 2Ah
    26                              <1> setDate:           ;ah = 2Bh
    27                              <1> getTime:           ;ah = 2Ch
    28                              <1> setTime:           ;ah = 2Dh
    29 00000DAA C3                  <1>     ret
    23                                  %include "./Source/Kernel/localisation.asm"
    24                              <1> ;Localisation based functions live here
    25                              <1> 
    26                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    27                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    28                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    29                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    30 00000DAB C3                  <1>     ret
    24                                  %include "./Source/Kernel/dosKernel.asm"
    25                              <1> ;-----------------------------------:
    26                              <1> ;       Misc System routines        :
    27                              <1> ;-----------------------------------:
    28                              <1> criticalDOSError:
    29                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    30                              <1> ; to the critical error handler.
    31                              <1> ; Called with ax, di and rsi set as required by Int 44h (caller decides)
    32                              <1> ;               AH = Critical Error Bitfield
    33                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    34                              <1> ;               Bit 6 - Reserved
    35                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    36                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    37                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    38                              <1> ;               Bits [2-1] = Affected Disk Error
    39                              <1> ;                     0 0   DOS area
    40                              <1> ;                     0 1   FAT area
    41                              <1> ;                     1 0   Directory area
    42                              <1> ;                     1 1   Data area
    43                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    44                              <1> ;               AL  = Failing drive number if AH[7] = 0
    45                              <1> ;               DIL = Error code for errorMsg
    46                              <1> ;               RSI = EA of Device Header for which device the error occured
    47                              <1> ;Return:
    48                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    49                              <1> ;                  = 1 - Retry the Operation    (Retry)
    50                              <1> ;                  = 2 - Terminate the Program  (Abort)
    51                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    52                              <1> ; Return response from int 44h in al
    53 00000DAC FA                  <1>     cli ;Disable Interrupts
    54 00000DAD C605(C8000000)01    <1>     mov byte [critErrFlag], 1   ;Set flag for critical error
    55 00000DB4 488925(F5000000)    <1>     mov qword [xInt44hRSP], rsp
    56 00000DBB 488B25(09010000)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    57 00000DC2 CD44                <1>     int 44h ;Call critical error handler
    58 00000DC4 488B25(F5000000)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    59 00000DCB C605(C8000000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    60 00000DD2 FB                  <1>     sti ;Reenable Interrupts
    61 00000DD3 C3                  <1>     ret
    62                              <1> 
    63                              <1> findDPB:
    64                              <1> ;Finds the DPB for a given drive
    65                              <1> ;Input:  dl = Drive number (0=A, 1=B etc...)
    66                              <1> ;Output: al = 00, rbp = Pointer to the DPB
    67                              <1> ;        al = -1, Failed, no DPB for device, rbx destroyed
    68 00000DD4 488B1D(68000000)    <1>     mov rbx, qword [dpbHeadPtr]
    69                              <1> .fd1:
    70 00000DDB 30C0                <1>     xor al, al
    71 00000DDD 385500              <1>     cmp byte [rbp + dpb.bDriveNumber], dl
    72 00000DE0 740F                <1>     je .fd2
    73 00000DE2 488B6D24            <1>     mov rbp, qword [rbp + dpb.qNextDPBPtr]
    74 00000DE6 B0FF                <1>     mov al, -1
    75 00000DE8 4881FDFFFFFFFF      <1>     cmp rbp, -1 ;If rbx followed last item in list, no DPB exists for dl
    76 00000DEF 75EA                <1>     jne .fd1
    77                              <1> .fd2:
    78                              <1>     %if DEBUG
    79                              <1>     ;Print DPB 
    80                              <1>     debugEnterM
   443 00000DF1 48892523F2FFFF      <2>  mov qword [debOldRSP], rsp
   444 00000DF8 48BC00000800000000- <2>  mov rsp, debStackTop
   444 00000E01 00                  <2>
   445                              <2> 
   446 00000E02 50                  <2>  push rax
   447 00000E03 53                  <2>  push rbx
   448 00000E04 51                  <2>  push rcx
   449 00000E05 52                  <2>  push rdx
   450 00000E06 56                  <2>  push rsi
   451 00000E07 57                  <2>  push rdi
   452 00000E08 55                  <2>  push rbp
   453 00000E09 4150                <2>  push r8
   454 00000E0B 4151                <2>  push r9
   455 00000E0D 4152                <2>  push r10
   456 00000E0F 4153                <2>  push r11
   457 00000E11 4154                <2>  push r12
   458 00000E13 4155                <2>  push r13
   459 00000E15 4156                <2>  push r14
   460 00000E17 4157                <2>  push r15
   461 00000E19 9C                  <2>  pushfq
    81 00000E1A 488D2D0C000000      <1>     lea rbp, .l0000
    82 00000E21 E84AF3FFFF          <1>     call debPrintNullString
    83 00000E26 E825F5FFFF          <1>     call debPrintDeviceDPB
    84 00000E2B EB1C                <1>     jmp short .l0001
    85 00000E2D 496E7465726E616C20- <1> .l0000 db "Internal call to find DPB",0Ah,0Dh,0
    85 00000E36 63616C6C20746F2066- <1>
    85 00000E3F 696E64204450420A0D- <1>
    85 00000E48 00                  <1>
    86                              <1> .l0001:
    87                              <1>     debugExitM
   465 00000E49 9D                  <2>  popfq
   466 00000E4A 415F                <2>  pop r15
   467 00000E4C 415E                <2>  pop r14
   468 00000E4E 415D                <2>  pop r13
   469 00000E50 415C                <2>  pop r12
   470 00000E52 415B                <2>  pop r11
   471 00000E54 415A                <2>  pop r10
   472 00000E56 4159                <2>  pop r9
   473 00000E58 4158                <2>  pop r8
   474 00000E5A 5D                  <2>  pop rbp
   475 00000E5B 5F                  <2>  pop rdi
   476 00000E5C 5E                  <2>  pop rsi
   477 00000E5D 5A                  <2>  pop rdx
   478 00000E5E 59                  <2>  pop rcx
   479 00000E5F 5B                  <2>  pop rbx
   480 00000E60 58                  <2>  pop rax
   481 00000E61 488B25B3F1FFFF      <2>  mov rsp, qword [debOldRSP]
    88                              <1>     %endif
    89 00000E68 C3                  <1>     ret
    90                              <1> getCDS:
    91                              <1>     ;Gets the CDS for the current drive in rax
    92                              <1>     ;Input: rax = Drive number, 0 = A ...
    93                              <1>     ;Output: rbx = Pointer to CDS for drive in rax
    94 00000E69 50                  <1>     push rax
    95 00000E6A 51                  <1>     push rcx
    96 00000E6B 52                  <1>     push rdx
    97 00000E6C 488D1D(92000000)    <1>     lea rbx, qword [cdsHeadPtr] ;Point to cds array
    98 00000E73 48B95B000000000000- <1>     mov rcx, cds_size   
    98 00000E7C 00                  <1>
    99 00000E7D 31D2                <1>     xor edx, edx
   100 00000E7F F7E1                <1>     mul ecx 
   101 00000E81 4801C3              <1>     add rbx, rax    ;Move rbx to the right offset in the array
   102 00000E84 5A                  <1>     pop rdx
   103 00000E85 59                  <1>     pop rcx
   104 00000E86 58                  <1>     pop rax
   105 00000E87 C3                  <1>     ret
   106                              <1> ;-----------------------------------:
   107                              <1> ;        Interrupt routines         :
   108                              <1> ;-----------------------------------:
   109                              <1> terminateProcess:   ;Int 40h
   110 00000E88 48CF                <1>     iretq
   111                              <1> terminateHandler:   ;Int 42h
   112                              <1> ctrlCHandler:       ;Int 43h
   113 00000E8A 48CF                <1>     iretq
   114                              <1> absDiskWrite:       ;Int 46h
   115                              <1> ;al = Drive number
   116                              <1> ;rbx = Memory Buffer address to read from
   117                              <1> ;ecx = Number of sectors to write
   118                              <1> ;rdx = Start LBA to write to
   119                              <1>     %if DEBUG
   120                              <1>     ;Print DPB 
   121                              <1>     debugEnterM
   443 00000E8C 48892588F1FFFF      <2>  mov qword [debOldRSP], rsp
   444 00000E93 48BC00000800000000- <2>  mov rsp, debStackTop
   444 00000E9C 00                  <2>
   445                              <2> 
   446 00000E9D 50                  <2>  push rax
   447 00000E9E 53                  <2>  push rbx
   448 00000E9F 51                  <2>  push rcx
   449 00000EA0 52                  <2>  push rdx
   450 00000EA1 56                  <2>  push rsi
   451 00000EA2 57                  <2>  push rdi
   452 00000EA3 55                  <2>  push rbp
   453 00000EA4 4150                <2>  push r8
   454 00000EA6 4151                <2>  push r9
   455 00000EA8 4152                <2>  push r10
   456 00000EAA 4153                <2>  push r11
   457 00000EAC 4154                <2>  push r12
   458 00000EAE 4155                <2>  push r13
   459 00000EB0 4156                <2>  push r14
   460 00000EB2 4157                <2>  push r15
   461 00000EB4 9C                  <2>  pushfq
   122 00000EB5 488D2D07000000      <1>     lea rbp, .l0000
   123 00000EBC E8AFF2FFFF          <1>     call debPrintNullString
   124 00000EC1 EB13                <1>     jmp short .l0001
   125 00000EC3 456E746572696E6720- <1> .l0000 db "Entering Int 46h",0Ah,0Dh,0
   125 00000ECC 496E74203436680A0D- <1>
   125 00000ED5 00                  <1>
   126                              <1> .l0001:
   127                              <1>     debugExitM
   465 00000ED6 9D                  <2>  popfq
   466 00000ED7 415F                <2>  pop r15
   467 00000ED9 415E                <2>  pop r14
   468 00000EDB 415D                <2>  pop r13
   469 00000EDD 415C                <2>  pop r12
   470 00000EDF 415B                <2>  pop r11
   471 00000EE1 415A                <2>  pop r10
   472 00000EE3 4159                <2>  pop r9
   473 00000EE5 4158                <2>  pop r8
   474 00000EE7 5D                  <2>  pop rbp
   475 00000EE8 5F                  <2>  pop rdi
   476 00000EE9 5E                  <2>  pop rsi
   477 00000EEA 5A                  <2>  pop rdx
   478 00000EEB 59                  <2>  pop rcx
   479 00000EEC 5B                  <2>  pop rbx
   480 00000EED 58                  <2>  pop rax
   481 00000EEE 488B2526F1FFFF      <2>  mov rsp, qword [debOldRSP]
   128                              <1>     %endif
   129 00000EF5 50                  <1>     push rax
   130 00000EF6 53                  <1>     push rbx
   131 00000EF7 52                  <1>     push rdx
   132 00000EF8 55                  <1>     push rbp
   133 00000EF9 B408                <1>     mov ah, drvWRITE
   134 00000EFB 0225(F4000000)      <1>     add ah, byte [verifyFlag]   ;Change to Write/Verify if set
   135 00000F01 EB6F                <1>     jmp short absDiskReadWriteCommon
   136                              <1> absDiskRead:        ;Int 45h
   137                              <1> ;al = Drive number
   138                              <1> ;rbx = Memory Buffer address to write to
   139                              <1> ;ecx = Number of sectors to read
   140                              <1> ;rdx = Start LBA to read from
   141                              <1>     %if DEBUG
   142                              <1>     ;Print DPB 
   143                              <1>     debugEnterM
   443 00000F03 48892511F1FFFF      <2>  mov qword [debOldRSP], rsp
   444 00000F0A 48BC00000800000000- <2>  mov rsp, debStackTop
   444 00000F13 00                  <2>
   445                              <2> 
   446 00000F14 50                  <2>  push rax
   447 00000F15 53                  <2>  push rbx
   448 00000F16 51                  <2>  push rcx
   449 00000F17 52                  <2>  push rdx
   450 00000F18 56                  <2>  push rsi
   451 00000F19 57                  <2>  push rdi
   452 00000F1A 55                  <2>  push rbp
   453 00000F1B 4150                <2>  push r8
   454 00000F1D 4151                <2>  push r9
   455 00000F1F 4152                <2>  push r10
   456 00000F21 4153                <2>  push r11
   457 00000F23 4154                <2>  push r12
   458 00000F25 4155                <2>  push r13
   459 00000F27 4156                <2>  push r14
   460 00000F29 4157                <2>  push r15
   461 00000F2B 9C                  <2>  pushfq
   144 00000F2C 488D2D07000000      <1>     lea rbp, .l0000
   145 00000F33 E838F2FFFF          <1>     call debPrintNullString
   146 00000F38 EB13                <1>     jmp short .l0001
   147 00000F3A 456E746572696E6720- <1> .l0000 db "Entering Int 45h",0Ah,0Dh,0
   147 00000F43 496E74203435680A0D- <1>
   147 00000F4C 00                  <1>
   148                              <1> .l0001:
   149                              <1>     debugExitM
   465 00000F4D 9D                  <2>  popfq
   466 00000F4E 415F                <2>  pop r15
   467 00000F50 415E                <2>  pop r14
   468 00000F52 415D                <2>  pop r13
   469 00000F54 415C                <2>  pop r12
   470 00000F56 415B                <2>  pop r11
   471 00000F58 415A                <2>  pop r10
   472 00000F5A 4159                <2>  pop r9
   473 00000F5C 4158                <2>  pop r8
   474 00000F5E 5D                  <2>  pop rbp
   475 00000F5F 5F                  <2>  pop rdi
   476 00000F60 5E                  <2>  pop rsi
   477 00000F61 5A                  <2>  pop rdx
   478 00000F62 59                  <2>  pop rcx
   479 00000F63 5B                  <2>  pop rbx
   480 00000F64 58                  <2>  pop rax
   481 00000F65 488B25AFF0FFFF      <2>  mov rsp, qword [debOldRSP]
   150                              <1>     %endif
   151 00000F6C 50                  <1>     push rax
   152 00000F6D 53                  <1>     push rbx
   153 00000F6E 52                  <1>     push rdx
   154 00000F6F 55                  <1>     push rbp
   155 00000F70 B404                <1>     mov ah, drvREAD
   156                              <1> absDiskReadWriteCommon:
   157                              <1> ;Entered with the appropriate function number in ah
   158 00000F72 52                  <1>     push rdx    ;Save start LBA
   159 00000F73 50                  <1>     push rax
   160 00000F74 88C2                <1>     mov dl, al
   161 00000F76 E859FEFFFF          <1>     call findDPB   ;Get dpb ptr in rbp
   162 00000F7B 58                  <1>     pop rax
   163 00000F7C 5A                  <1>     pop rdx
   164                              <1> 
   165 00000F7D C605(36000000)2A    <1>     mov byte [diskReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   166 00000F84 8805(37000000)      <1>     mov byte [diskReqHdr + ioReqPkt.unitnm], al
   167 00000F8A 8825(38000000)      <1>     mov byte [diskReqHdr + ioReqPkt.cmdcde], ah
   168 00000F90 66C705(39000000)00- <1>     mov word [diskReqHdr + ioReqPkt.status], 0
   168 00000F98 00                  <1>
   169 00000F99 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   170 00000F9C 8805(43000000)      <1>     mov byte [diskReqHdr + ioReqPkt.medesc], al
   171 00000FA2 48891D(44000000)    <1>     mov qword [diskReqHdr + ioReqPkt.bufptr], rbx
   172 00000FA9 488915(50000000)    <1>     mov qword [diskReqHdr + ioReqPkt.strtsc], rdx
   173 00000FB0 890D(4C000000)      <1>     mov dword [diskReqHdr + ioReqPkt.tfrlen], ecx
   174 00000FB6 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver pointer
   175                              <1> 
   176 00000FBA 488D1D(36000000)    <1>     lea rbx, diskReqHdr
   177 00000FC1 FF520A              <1>     call qword [rdx + drvHdr.strPtr]  ;Call with ptr to request block in rbx
   178 00000FC4 FF5212              <1>     call qword [rdx + drvHdr.intPtr]
   179 00000FC7 5D                  <1>     pop rbp
   180 00000FC8 5A                  <1>     pop rdx
   181 00000FC9 5B                  <1>     pop rbx
   182 00000FCA 58                  <1>     pop rax
   183 00000FCB 66F705(39000000)00- <1>     test word [diskReqHdr + ioReqPkt.status], 8000h
   183 00000FD3 80                  <1>
   184 00000FD4 7402                <1>     je .absDiskError
   185 00000FD6 F8                  <1>     clc
   186 00000FD7 C3                  <1>     ret
   187                              <1> .absDiskError:
   188 00000FD8 8A05(39000000)      <1>     mov al, byte [diskReqHdr + ioReqPkt.status] ;Get low byte into al
   189 00000FDE B480                <1>     mov ah, 80h ;Attachment failure
   190 00000FE0 3C0C                <1>     cmp al, 0Ch ;Gen error
   191 00000FE2 741A                <1>     je .absExit
   192 00000FE4 B440                <1>     mov ah, 40h ;Seek error
   193 00000FE6 3C06                <1>     cmp al, 06h
   194 00000FE8 7414                <1>     je .absExit
   195 00000FEA B408                <1>     mov ah, 08h ;Bad CRC
   196 00000FEC 3C04                <1>     cmp al, 04h
   197 00000FEE 740E                <1>     je .absExit
   198 00000FF0 B404                <1>     mov ah, 04h ;Sector not found
   199 00000FF2 3C08                <1>     cmp al, 08h
   200 00000FF4 7408                <1>     je .absExit
   201 00000FF6 30E4                <1>     xor ah, ah  ;Write Protect Violation
   202 00000FF8 84C0                <1>     test al, al
   203 00000FFA 7402                <1>     je .absExit
   204 00000FFC B402                <1>     mov ah, 02h ;Other Error
   205                              <1> .absExit:
   206 00000FFE F9                  <1>     stc
   207 00000FFF C3                  <1>     ret
   208                              <1> 
   209                              <1> terminateResident:  ;Int 47h
   210                              <1> inDosHandler:       ;Int 48h
   211                              <1> ;Called when DOS idle
   212 00001000 48CF                <1>     iretq
   213                              <1> fastOutput:         ;Int 49h
   214                              <1> ;Called with char to transfer in al
   215 00001002 50                  <1>     push rax
   216 00001003 B40E                <1>     mov ah, 0Eh
   217 00001005 CD30                <1>     int 30h
   218 00001007 58                  <1>     pop rax
   219 00001008 48CF                <1>     iretq
   220                              <1> passCommand:        ;Int 4Eh, hooked by COMMAND.COM
   221 0000100A 48CF                <1>     iretq
   222                              <1> multiplex:          ;Int 4Fh, kept as iretq for now
   223 0000100C 48CF                <1>     iretq
   224                              <1> ;-----------------------------------:
   225                              <1> ;        Main Kernel routines       :
   226                              <1> ;-----------------------------------:
   227                              <1> functionDispatch:   ;Int 41h Main function dispatcher
   228                              <1> ;ah = Function number, all other registers have various meanings
   229                              <1>  %if DEBUG
   230                              <1>     ;Entry function
   231                              <1>     debugEnterM
   443 0000100E 48892506F0FFFF      <2>  mov qword [debOldRSP], rsp
   444 00001015 48BC00000800000000- <2>  mov rsp, debStackTop
   444 0000101E 00                  <2>
   445                              <2> 
   446 0000101F 50                  <2>  push rax
   447 00001020 53                  <2>  push rbx
   448 00001021 51                  <2>  push rcx
   449 00001022 52                  <2>  push rdx
   450 00001023 56                  <2>  push rsi
   451 00001024 57                  <2>  push rdi
   452 00001025 55                  <2>  push rbp
   453 00001026 4150                <2>  push r8
   454 00001028 4151                <2>  push r9
   455 0000102A 4152                <2>  push r10
   456 0000102C 4153                <2>  push r11
   457 0000102E 4154                <2>  push r12
   458 00001030 4155                <2>  push r13
   459 00001032 4156                <2>  push r14
   460 00001034 4157                <2>  push r15
   461 00001036 9C                  <2>  pushfq
   232 00001037 488D2D0C000000      <1>     lea rbp, .l0000
   233 0000103E E82DF1FFFF          <1>     call debPrintNullString
   234 00001043 E88CF6FFFF          <1>     call debPrintFunctionName
   235 00001048 EB15                <1>     jmp short .l0001
   236 0000104A 0A0D456E746572696E- <1> .l0000 db 0Ah,0Dh,"Entering Int 41h",0Ah,0Dh,0
   236 00001053 6720496E7420343168- <1>
   236 0000105C 0A0D00              <1>
   237                              <1> .l0001:    
   238                              <1>     debugExitM
   465 0000105F 9D                  <2>  popfq
   466 00001060 415F                <2>  pop r15
   467 00001062 415E                <2>  pop r14
   468 00001064 415D                <2>  pop r13
   469 00001066 415C                <2>  pop r12
   470 00001068 415B                <2>  pop r11
   471 0000106A 415A                <2>  pop r10
   472 0000106C 4159                <2>  pop r9
   473 0000106E 4158                <2>  pop r8
   474 00001070 5D                  <2>  pop rbp
   475 00001071 5F                  <2>  pop rdi
   476 00001072 5E                  <2>  pop rsi
   477 00001073 5A                  <2>  pop rdx
   478 00001074 59                  <2>  pop rcx
   479 00001075 5B                  <2>  pop rbx
   480 00001076 58                  <2>  pop rax
   481 00001077 488B259DEFFFFF      <2>  mov rsp, qword [debOldRSP]
   239                              <1>     %endif
   240 0000107E FA                  <1>     cli ;Halt external interrupts
   241 0000107F FC                  <1>     cld ;Ensure all string ops occur in the right direction
   242 00001080 80FC6A              <1>     cmp ah, kernelDispatchTableL/8    ;Number of functions
   243 00001083 0F878C010000        <1>     ja .fdExitBad
   244                              <1>     ;Cherry pick functions
   245 00001089 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
   246 0000108C 722C                <1>     jb .fsbegin   ;If below skip these checks
   247 0000108E 0F84B6050000        <1>     je ctrlBreakCheck
   248 00001094 80FC64              <1>     cmp ah, 64h
   249 00001097 0F84A5070000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
   250 0000109D 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
   251 0000109F 80FC51              <1>     cmp ah, 51h
   252 000010A2 0F845E060000        <1>     je getCurrProcessID    ;This and below are exactly the same
   253 000010A8 80FC62              <1>     cmp ah, 62h
   254 000010AB 0F8488070000        <1>     je getPSPaddr          ;Calls the above function
   255 000010B1 80FC50              <1>     cmp ah, 50h
   256 000010B4 0F8443060000        <1>     je setCurrProcessID
   257                              <1> .fsbegin:
   258                              <1>     pushDOS ;Push the usual prologue registers
   263 000010BA 4151                <2>  push r9
   264 000010BC 4150                <2>  push r8
   265 000010BE 55                  <2>  push rbp
   266 000010BF 57                  <2>  push rdi
   267 000010C0 56                  <2>  push rsi
   268 000010C1 52                  <2>  push rdx
   269 000010C2 51                  <2>  push rcx
   270 000010C3 53                  <2>  push rbx
   271 000010C4 50                  <2>  push rax
   259 000010C5 488B05(09010000)    <1>     mov rax, qword [oldRSP]
   260 000010CC 488905(01010000)    <1>     mov qword [oldoldRSP], rax
   261 000010D3 FE05(C9000000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
   262 000010D9 488925(09010000)    <1>     mov qword [oldRSP], rsp
   263                              <1> ;Here, we want to save oldRSP in the callers PSP
   264 000010E0 803D(C9000000)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
   265 000010E7 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
   266 000010E9 488B05(D8000000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
   267 000010F0 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   268                              <1> .fsb1:
   269 000010F4 58                  <1>     pop rax     ;Get old rax back
   270 000010F5 50                  <1>     push rax    ;and push it back onto the stack
   271 000010F6 488D25(4C070000)    <1>     lea rsp, critStakTop
   272 000010FD FB                  <1>     sti         ;Reenable interrupts
   273                              <1> 
   274 000010FE C605(00010000)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   275                              <1> 
   276 00001105 48891D(11010000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   277 0000110C 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
   278 0000110F C1E303              <1>     shl ebx, 3      ;Multiply the function number by 8 for offset into table
   279 00001112 50                  <1>     push rax        ;Push rax onto the stack
   280 00001113 488D052B070000      <1>     lea rax, qword [kernelDispatchTable]
   281 0000111A 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   282 0000111D 58                  <1>     pop rax
   283 0000111E 488B1B              <1>     mov rbx, qword [rbx]    ;Get the address from the dispatch table
   284                              <1> 
   285 00001121 84E4                <1>     test ah, ah     ;Simple Terminate function?
   286 00001123 741C                <1>     jz .fddiskOp
   287 00001125 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   288 00001128 7443                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   289 0000112A 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   290 0000112D 7712                <1>     ja .fddiskOp
   291                              <1> ;Char operations here
   292 0000112F F605(C8000000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   293 00001136 7535                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   294 00001138 488D25(8C0D0000)    <1>     lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   295 0000113F EB2C                <1>     jmp short .fdGoToFunction
   296                              <1> .fddiskOp:
   297                              <1>     ;Disk operations go here
   298                              <1>     ;Clear up error info
   299 00001141 C605(CB000000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   300 00001148 C605(C8000000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   301 0000114F C605(CA000000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   302                              <1> 
   303 00001156 C605(00010000)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   304 0000115D 488D25(CC130000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   305 00001164 F605(F3000000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   306 0000116B 7400                <1>     jz .fdGoToFunction
   307                              <1> ; HANDLE CTRL+BREAK HERE!
   308                              <1> .fdGoToFunction:
   309 0000116D 48871D(11010000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   310                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   311                              <1>     ;
   312                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   313                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   314                              <1>     ;
   315                              <1>     %if DEBUG && REGS
   316                              <1>     ;Print stack if necessary function
   317                              <1>     debugEnterM
   318                              <1>     call debPrintDOSStack
   319                              <1>     debugExitM
   320                              <1>     %endif
   321 00001174 FF15(11010000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   322                              <1>     %if DEBUG && REGS
   323                              <1>     ;Exit function
   324                              <1>     debugEnterM
   325                              <1>     call debPrintDOSStack
   326                              <1>     debugExitM
   327                              <1>     %endif
   328                              <1> .fdExit:
   329 0000117A FA                  <1>     cli     ;Redisable interrupts
   330                              <1>     ;???
   331 0000117B FE0D(C9000000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   332 00001181 488B25(09010000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   333 00001188 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   334 0000118B 488B05(01010000)    <1>     mov rax, qword [oldoldRSP]
   335 00001192 488905(09010000)    <1>     mov qword [oldRSP], rax
   336                              <1>     popDOS  ;Pop the frame
   275 00001199 58                  <2>  pop rax
   276 0000119A 5B                  <2>  pop rbx
   277 0000119B 59                  <2>  pop rcx
   278 0000119C 5A                  <2>  pop rdx
   279 0000119D 5E                  <2>  pop rsi
   280 0000119E 5F                  <2>  pop rdi
   281 0000119F 5D                  <2>  pop rbp
   282 000011A0 4158                <2>  pop r8
   283 000011A2 4159                <2>  pop r9
   337                              <1>  %if DEBUG
   338                              <1>     ;Entry function
   339                              <1>     debugEnterM
   443 000011A4 48892570EEFFFF      <2>  mov qword [debOldRSP], rsp
   444 000011AB 48BC00000800000000- <2>  mov rsp, debStackTop
   444 000011B4 00                  <2>
   445                              <2> 
   446 000011B5 50                  <2>  push rax
   447 000011B6 53                  <2>  push rbx
   448 000011B7 51                  <2>  push rcx
   449 000011B8 52                  <2>  push rdx
   450 000011B9 56                  <2>  push rsi
   451 000011BA 57                  <2>  push rdi
   452 000011BB 55                  <2>  push rbp
   453 000011BC 4150                <2>  push r8
   454 000011BE 4151                <2>  push r9
   455 000011C0 4152                <2>  push r10
   456 000011C2 4153                <2>  push r11
   457 000011C4 4154                <2>  push r12
   458 000011C6 4155                <2>  push r13
   459 000011C8 4156                <2>  push r14
   460 000011CA 4157                <2>  push r15
   461 000011CC 9C                  <2>  pushfq
   340 000011CD 488D2D0C000000      <1>     lea rbp, .l0002
   341 000011D4 E897EFFFFF          <1>     call debPrintNullString
   342 000011D9 E8F6F4FFFF          <1>     call debPrintFunctionName
   343 000011DE EB14                <1>     jmp short .l0003
   344 000011E0 0A0D45786974696E67- <1> .l0002 db 0Ah,0Dh,"Exiting Int 41h",0Ah,0Dh,0
   344 000011E9 20496E74203431680A- <1>
   344 000011F2 0D00                <1>
   345                              <1> .l0003:    
   346                              <1>     debugExitM
   465 000011F4 9D                  <2>  popfq
   466 000011F5 415F                <2>  pop r15
   467 000011F7 415E                <2>  pop r14
   468 000011F9 415D                <2>  pop r13
   469 000011FB 415C                <2>  pop r12
   470 000011FD 415B                <2>  pop r11
   471 000011FF 415A                <2>  pop r10
   472 00001201 4159                <2>  pop r9
   473 00001203 4158                <2>  pop r8
   474 00001205 5D                  <2>  pop rbp
   475 00001206 5F                  <2>  pop rdi
   476 00001207 5E                  <2>  pop rsi
   477 00001208 5A                  <2>  pop rdx
   478 00001209 59                  <2>  pop rcx
   479 0000120A 5B                  <2>  pop rbx
   480 0000120B 58                  <2>  pop rax
   481 0000120C 488B2508EEFFFF      <2>  mov rsp, qword [debOldRSP]
   347                              <1>     %endif
   348 00001213 48CF                <1>     iretq
   349                              <1> .fdExitBad:
   350 00001215 B400                <1>     mov ah, 0
   351 00001217 48CF                <1>     iretq
   352                              <1> 
   353                              <1> ;========================================:
   354                              <1> ;            Kernel Functions            :
   355                              <1> ;========================================:
   356                              <1> simpleTerminate:   ;ah = 00h
   357 00001219 C3                  <1>     ret
   358                              <1> diskReset:         ;ah = 0Dh
   359                              <1> ;Flush all dirty buffers to disk
   360 0000121A 488B2D(8A000000)    <1>     mov rbp, qword [bufHeadPtr]
   361                              <1> .drCheckBuffer:
   362 00001221 F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   363 00001225 7407                <1>     jz .drGotoNextBuffer
   364                              <1> .drFlushBuffer:
   365 00001227 E87FF5FFFF          <1>     call flushBuffer    ;Called with rbp = buffer header
   366 0000122C 720E                <1>     jc .drError
   367                              <1> .drGotoNextBuffer:
   368 0000122E 488B6D00            <1>     mov rbp, qword [rbp + bufferHdr.nextBufPtr]
   369 00001232 4881FDFFFFFFFF      <1>     cmp rbp, -1     ;If rbp points to -1, exit
   370 00001239 75E6                <1>     jne .drCheckBuffer
   371 0000123B C3                  <1>     ret
   372                              <1> .drError:
   373                              <1> ;Abort/Retry/Ignore
   374                              <1> ;Abort returns to DOS, 
   375                              <1> ;Retry retries the write on the buffer, 
   376                              <1> ;Ignore marks the buffer as clean and proceeds as normal
   377 0000123C 8A4509              <1>     mov al, byte [rbp + bufferHdr.bufferFlags]
   378 0000123F 240F                <1>     and al, 0Fh ;Clear the upper nybble
   379 00001241 B431                <1>     mov ah, 31h ;Disk Error, Ignore,Retry and Write operation
   380 00001243 3C01                <1>     cmp al, dosBuffer
   381 00001245 740F                <1>     je .drErrorMain
   382 00001247 80C402              <1>     add ah, 2
   383 0000124A 3C02                <1>     cmp al, fatBuffer
   384 0000124C 7408                <1>     je .drErrorMain
   385 0000124E 80C402              <1>     add ah, 2
   386 00001251 3C04                <1>     cmp al, dirBuffer
   387 00001253 80C402              <1>     add ah, 2
   388                              <1> .drErrorMain:
   389 00001256 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   390 00001259 488B7517            <1>     mov rsi, qword [rbp + bufferHdr.driveDPBPtr]
   391 0000125D 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   392 00001261 668B3D(39000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]    ;Disk error occured!
   393 00001268 6681E7FF00          <1>     and di, 0FFh    ;Only bottom byte
   394 0000126D 66893D(CC000000)    <1>     mov word [errorExt], di     ;Save driver error code
   395 00001274 668105(CC000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   395 0000127C 00                  <1>
   396 0000127D 8805(CA000000)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   397 00001283 C605(CB000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   398 0000128A C605(CF000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad BPB or other) code
   399 00001291 C605(CE000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   400 00001298 E80FFBFFFF          <1>     call criticalDOSError       ;Critical error handler
   401 0000129D 84C0                <1>     test al, al ;Ignore the troublesome buffer and mark it as free
   402 0000129F 7406                <1>     jz .drIgnore
   403 000012A1 3C01                <1>     cmp al, 1   ;Retry flushing the buffer
   404 000012A3 7482                <1>     je .drFlushBuffer
   405 000012A5 CD43                <1>     int 43h     ;Abort and fail both abort through int 43h
   406                              <1> .drIgnore:
   407 000012A7 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1  ;Mark buffer as free
   408 000012AB E97EFFFFFF          <1>     jmp .drGotoNextBuffer
   409                              <1> 
   410                              <1> selectDisk:        ;ah = 0Eh
   411                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   412 000012B0 8A05(0B000000)      <1>     mov al, byte [numLogDrv]        ;Value 1 based
   413 000012B6 8A1D(9A000000)      <1>     mov bl, byte [lastdrvNum]       ;Value 1 based
   414 000012BC FEC8                <1>     dec al
   415 000012BE FECB                <1>     dec bl
   416 000012C0 38C3                <1>     cmp bl, al
   417 000012C2 0F47C3              <1>     cmova eax, ebx    ;If bl > al, move bl to al
   418 000012C5 38C2                <1>     cmp dl, al  ;If dl is bigger than al
   419 000012C7 7707                <1>     ja .error
   420 000012C9 8815(F2000000)      <1>     mov byte [currentDrv], dl   ;Only save dl if it is a valid number
   421 000012CF C3                  <1>     ret ;al = lastdrv as retcode
   422                              <1> .error:
   423 000012D0 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
   424 000012D7 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   425 000012DF B80F000000          <1>     mov eax, 15                 ;Invalid drive error
   426 000012E4 668905(CC000000)    <1>     mov word [errorExt], ax     
   427 000012EB C605(CB000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   428 000012F2 C605(CF000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   429 000012F9 C605(CE000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   430 00001300 C3                  <1>     ret
   431                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   432 00001301 8A05(F2000000)      <1>     mov al, byte [currentDrv]
   433 00001307 C3                  <1>     ret
   434                              <1> FATinfoDefault:    ;ah = 1Bh
   435 00001308 30D2                <1>     xor dl, dl
   436                              <1> FATinfoDevice:     ;ah = 1Ch
   437                              <1> ;Return in:
   438                              <1> ;   al = Number of sectors per cluster
   439                              <1> ;   edx = Number of clusters
   440                              <1> ;   cx =  Size of a clsuter
   441 0000130A 84D2                <1>     test dl, dl
   442 0000130C 7408                <1>     jz .fidSkipdefault
   443 0000130E 8A15(F2000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   444 00001314 EB02                <1>     jmp short .fidMain
   445                              <1> .fidSkipdefault:
   446 00001316 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   447                              <1> .fidMain:
   448                              <1> ;Walk the dpb chain manually
   449 00001318 E8B7FAFFFF          <1>     call findDPB    ;Get in rbp the dpb pointer for drive dl
   450 0000131D 84C0                <1>     test al, al
   451 0000131F 7431                <1>     jz .fidDPBFound
   452                              <1> ;Else, we at an error.
   453                              <1> ;Simply return with CY set and error code in al with extended error info
   454 00001321 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
   455 00001328 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   456 00001330 B80F000000          <1>     mov eax, 15                 ;Invalid drive error
   457 00001335 668905(CC000000)    <1>     mov word [errorExt], ax     
   458 0000133C C605(CB000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   459 00001343 C605(CF000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   460 0000134A C605(CE000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   461 00001351 C3                  <1>     ret
   462                              <1> .fidDPBFound:
   463 00001352 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   464 00001355 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   465 00001357 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   466 0000135A 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   467 0000135D BB01000000          <1>     mov ebx, 1
   468 00001362 D3E3                <1>     shl ebx, cl
   469 00001364 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   470 00001366 488D5D22            <1>     lea rbx, qword [rbp + dpb.bMediaDescriptor]
   471 0000136A 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
   472 00001371 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   473 00001375 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   474 00001379 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   475 0000137D C3                  <1>     ret
   476                              <1> ;===============================
   477                              <1> setIntVector:      ;ah = 25h
   478                              <1> ;Called with:
   479                              <1> ;   rdx = Pointer to interrupt handler
   480                              <1> ;   al = Interrupt number
   481 0000137E 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   482 00001380 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   483                              <1> ;First call to get default BIOS segement selector and attribute word
   484 00001386 88C3                <1>     mov bl, al  ;Set interrupt number 
   485 00001388 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   486 0000138D CD35                <1>     int 35h
   487 0000138F 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   488 00001391 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   489                              <1> ;dx preserves the attribute word
   490 00001393 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
   491 0000139A 488B5D18            <1>     mov rbx, qword [rbp + callerFrame.rdx]  ;Pointer passed in rdx
   492 0000139E B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   493 000013A3 CD35                <1>     int 35h
   494                              <1> 
   495 000013A5 8A4500              <1>     mov al, byte [rbp + callerFrame.rax]    ;Preserve low byte of rax
   496 000013A8 C3                  <1>     ret
   497                              <1> createNewPSP:      ;ah = 26h
   498 000013A9 C3                  <1>     ret
   499                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   500 000013AA 8805(F4000000)      <1>     mov byte [verifyFlag], al
   501 000013B0 8025(F4000000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   502 000013B7 C3                  <1>     ret
   503                              <1> getDOSversion:     ;ah = 30h
   504 000013B8 488B15(09010000)    <1>     mov rdx, qword [oldRSP]
   505 000013BF 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   506 000013C1 886209              <1>     mov byte [rdx + callerFrame.rbx + 1], ah    ;Clear bh 
   507 000013C4 668B0535ECFFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   508 000013CB 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save ax
   509 000013CE C3                  <1>     ret
   510                              <1> terminateStayRes:  ;ah = 31h
   511 000013CF C3                  <1>     ret
   512                              <1> ;-------------------------------------------
   513                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply calls int 41h ah = 32h with dl = 0
   514 000013D0 30D2                <1>     xor dl, dl
   515                              <1> getDeviceDPBptr:   ;ah = 32h
   516                              <1> ;On entry: dl = Drive number
   517                              <1> ;On exit: rbx = DPB pointer
   518 000013D2 84D2                <1>     test dl, dl
   519 000013D4 7508                <1>     jnz .gddpskipdefault
   520 000013D6 8A15(F2000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   521 000013DC EB02                <1>     jmp short .gddpcommon
   522                              <1> .gddpskipdefault:
   523                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   524 000013DE FECA                <1>     dec dl
   525                              <1> .gddpcommon:
   526 000013E0 E8EFF9FFFF          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
   527 000013E5 84C0                <1>     test al, al
   528 000013E7 741F                <1>     jz .gddpMediaCheck
   529                              <1> ;Put in here error info
   530 000013E9 66C705(CC000000)0F- <1>     mov word [errorExt], 15 ;Invalid drive spec
   530 000013F1 00                  <1>
   531 000013F2 C605(CB000000)02    <1>     mov byte [errorLocus], 2    ;Block device driver
   532 000013F9 C605(CF000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   533 00001400 C605(CE000000)07    <1>     mov byte [errorAction], 7   ;Retry after intervention
   534 00001407 C3                  <1>     ret ;Return. al = -1
   535                              <1> .gddpMediaCheck:
   536                              <1> ;Media Check Section
   537 00001408 C605(36000000)17    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   538 0000140F 8815(37000000)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.unitnm], dl
   539 00001415 C605(38000000)01    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   540 0000141C 66C705(39000000)00- <1>     mov word [diskReqHdr + mediaCheckReqPkt.status], 0
   540 00001424 00                  <1>
   541 00001425 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   542 00001428 8805(43000000)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.medesc], al
   543 0000142E 88D0                <1>     mov al, dl  ;Save device number in al
   544 00001430 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr]
   545 00001434 488D1D(36000000)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   546 0000143B FF520A              <1>     call [rdx + drvHdr.strPtr]
   547 0000143E FF5212              <1>     call [rdx + drvHdr.intPtr]
   548 00001441 66F705(39000000)00- <1>     test word [diskReqHdr + mediaCheckReqPkt.status], 8000h
   548 00001449 80                  <1>
   549 0000144A 0F85EA000000        <1>     jnz .gddpError
   550 00001450 88C2                <1>     mov dl, al
   551 00001452 803D(44000000)01    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 1 ;Certified no change
   552 00001459 0F84B0000000        <1>     je .gddpretdbp
   553 0000145F 803D(44000000)00    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 0
   554 00001466 7512                <1>     jne .gddpBuildBPB   ;This means Media changed declared
   555 00001468 E8E1F3FFFF          <1>     call findDirtyBufferForDrive
   556 0000146D 48F7C3FFFFFFFF      <1>     test rbx, -1    ;This is the case if no dirty buffers for drive
   557 00001474 0F8595000000        <1>     jne .gddpretdbp ;If there is a dirty buffer for the drive, dont build bpb
   558                              <1> .gddpBuildBPB:
   559                              <1> ;BPB Build Section, only here if need a new bpb, i.e. sure of a new device
   560 0000147A E87FF3FFFF          <1>     call findLRUBuffer  ;Get lru buffer pointer in rbx
   561 0000147F 3A5308              <1>     cmp dl, byte [rbx + bufferHdr.driveNumber]  ;Does buffer belong to old drv?
   562 00001482 7414                <1>     je .gddpBuildBPBInvalidateBuffer    ;Yes, immediately invalidate data
   563                              <1>     ;If no, flush the data to disk.
   564                              <1> .gddpBuildBPBFlush:
   565 00001484 4889EE              <1>     mov rsi, rbp    ;Save rbp as pointer to old dl drive dpb
   566 00001487 4889DD              <1>     mov rbp, rbx    ;Get buffer header pointer in rbp
   567 0000148A E81CF3FFFF          <1>     call flushBuffer    ;Flush the buffer to disk, rbx preserved
   568 0000148F 4889F5              <1>     mov rbp, rsi    ;Return old drive dpb pointer to rbp
   569 00001492 0F820F010000        <1>     jc .gddpErrorType2  ;rbx points to buffer header
   570                              <1> .gddpBuildBPBInvalidateBuffer:
   571                              <1>     ;Write new buffer header
   572 00001498 885308              <1>     mov byte [rbx + bufferHdr.driveNumber], dl
   573 0000149B C6430908            <1>     mov byte [rbx + bufferHdr.bufferFlags], dataBuffer
   574 0000149F 48C7430A00000000    <1>     mov qword [rbx + bufferHdr.bufferLBA], 0
   575 000014A7 C6431201            <1>     mov byte [rbx + bufferHdr.bufFATcopy], 1
   576 000014AB C7431300000000      <1>     mov dword [rbx + bufferHdr.bufFATsize], 0
   577 000014B2 48896B17            <1>     mov qword [rbx + bufferHdr.driveDPBPtr], rbp
   578 000014B6 488D5B20            <1>     lea rbx, qword [rbx + bufferHdr.dataarea]
   579                              <1>     ;Build BPB request
   580 000014BA C605(36000000)1E    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   581 000014C1 8815(37000000)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.unitnm], dl
   582 000014C7 C605(38000000)02    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   583 000014CE 66C705(39000000)00- <1>     mov word [diskReqHdr + bpbBuildReqPkt.status], 0 
   583 000014D6 00                  <1>
   584 000014D7 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   585 000014DA 8805(43000000)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.medesc], al
   586 000014E0 48891D(44000000)    <1>     mov qword [diskReqHdr + bpbBuildReqPkt.bufptr], rbx ;Put lru pointer in rbx
   587 000014E7 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   588 000014EB 488D1D(36000000)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   589 000014F2 FF520A              <1>     call [rdx + drvHdr.strPtr]
   590 000014F5 FF5212              <1>     call [rdx + drvHdr.intPtr]
   591 000014F8 66F705(39000000)00- <1>     test word [diskReqHdr + bpbBuildReqPkt.status], 8000h
   591 00001500 80                  <1>
   592 00001501 7537                <1>     jnz .gddpError
   593 00001503 488B35(4C000000)    <1>     mov rsi, qword [diskReqHdr + bpbBuildReqPkt.bpbptr]
   594                              <1>     ;rbp points to dpb so we good to go
   595                              <1>     ;Call int 41h ah=53h Build DPB without reentering Int 41h
   596                              <1>     ;Since this function doesnt modify the caller stack, it is safe to do so
   597 0000150A E813020000          <1>     call createDPB 
   598                              <1> .gddpretdbp: 
   599 0000150F C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Clear access flag
   600 00001513 488B15(09010000)    <1>     mov rdx, qword [oldRSP]
   601 0000151A 48896A08            <1>     mov qword [rdx + callerFrame.rbx], rbp  ;Here, all paths have rbp as dpbptr
   602 0000151E 30C0                <1>     xor al, al  ;Set al = 0 to indicate rbx=dpb pointer
   603 00001520 C3                  <1>     ret
   604                              <1> .gddpretdpbFail:
   605 00001521 488B15(09010000)    <1>     mov rdx, qword [oldRSP]
   606 00001528 48814A5801000000    <1>     or qword [rdx + callerFrame.flags], 1   ;Set CF=CY
   607 00001530 66C705(CC000000)53- <1>     mov word [errorExt], 83 ;Fail on INT 44h error code
   607 00001538 00                  <1>
   608 00001539 C3                  <1>     ret
   609                              <1> .gddpError:
   610                              <1> ;Abort, Retry, Ignore are the only acceptible responses
   611                              <1> ;Entered with rbp = dpb for failing drive
   612                              <1> ;             rdx = driver header that caused fault
   613 0000153A 4889D6              <1>     mov rsi, rdx    ;rdx points to driver header in both cases
   614 0000153D 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
   615 00001544 8A4318              <1>     mov al, byte [rbx + callerFrame.rdx]    ;Get low byte = dl = Drive number
   616 00001547 88C2                <1>     mov dl, al  ;Save in dl
   617 00001549 84C0                <1>     test al, al
   618 0000154B 7508                <1>     jnz .gddpE0
   619 0000154D 8A05(F2000000)      <1>     mov al, byte [currentDrv]
   620 00001553 EB02                <1>     jmp short .gddpE1
   621                              <1> .gddpE0:
   622 00001555 FEC8                <1>     dec al
   623                              <1> .gddpE1:
   624 00001557 B436                <1>     mov ah, 36h ;Read operation, data area, abort/retry/ignore, disk error
   625 00001559 668B3D(39000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   626 00001560 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   627 00001565 66893D(CC000000)    <1>     mov word [errorExt], di     ;Save driver error code
   628 0000156C 668105(CC000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   628 00001574 00                  <1>
   629 00001575 8805(CA000000)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   630 0000157B C605(CB000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   631 00001582 C605(CF000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad BPB or other) code
   632 00001589 C605(CE000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   633 00001590 E817F8FFFF          <1>     call criticalDOSError   ;Critical error handler
   634 00001595 84C0                <1>     test al, al
   635 00001597 0F8472FFFFFF        <1>     jz .gddpretdbp  ;Ignore error, return, rbp has old dpb pointer
   636 0000159D 3C01                <1>     cmp al, 1
   637 0000159F 0F842DFEFFFF        <1>     je getDeviceDPBptr ;Reenter the function, dl has drive code
   638 000015A5 CD43                <1>     int 43h ;Else, restart DOS
   639                              <1> .gddpErrorType2:
   640                              <1> ;Error flushing the old buffer
   641                              <1> ;   rbx = Buffer header for data transfer
   642 000015A7 B439                <1>     mov ah, 39h ;Write operation, abort/retry/ignore/fail, disk error
   643 000015A9 807B0901            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dosBuffer
   644 000015AD 7414                <1>     je .gddpErrorType2main
   645 000015AF 80CC02              <1>     or ah, 2h   ;Set bit 1
   646 000015B2 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   647 000015B6 740B                <1>     je .gddpErrorType2main
   648 000015B8 B43D                <1>     mov ah, 3Dh ;Set bit 2, clear bit 1
   649 000015BA 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   650 000015BE 7403                <1>     je .gddpErrorType2main
   651 000015C0 80CC02              <1>     or ah, 2h   ;Set bit 2 and 1
   652                              <1> .gddpErrorType2main:    
   653 000015C3 668B3D(39000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   654 000015CA 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   655 000015CF 66893D(CC000000)    <1>     mov word [errorExt], di     ;Save driver error code
   656 000015D6 668105(CC000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   656 000015DE 00                  <1>
   657 000015DF 8A4308              <1>     mov al, byte [rbx + bufferHdr.driveNumber]
   658 000015E2 8805(CA000000)      <1>     mov byte [errorDrv], al
   659 000015E8 C605(CB000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   660 000015EF C605(CF000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad disk write) code
   661 000015F6 C605(CE000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   662 000015FD 488B7317            <1>     mov rsi, qword [rbx + bufferHdr.driveDPBPtr]
   663 00001601 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get device driver header in rsi
   664 00001605 E8A2F7FFFF          <1>     call criticalDOSError   ;Critical error handler
   665 0000160A 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   666 0000160E 7420                <1>     je .gddpErrorType2FatDir
   667 00001610 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   668 00001614 741A                <1>     je .gddpErrorType2FatDir
   669 00001616 84C0                <1>     test al, al
   670 00001618 0F847AFEFFFF        <1>     jz .gddpBuildBPBInvalidateBuffer ;Ignore error, invalidate data
   671 0000161E 3C01                <1>     cmp al, 1
   672 00001620 0F845EFEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   673 00001626 3C03                <1>     cmp al, 3
   674 00001628 0F84F3FEFFFF        <1>     je .gddpretdpbFail
   675 0000162E CD43                <1>     int 43h ;al = 2, means just abort
   676                              <1> .gddpErrorType2FatDir:
   677 00001630 84C0                <1>     test al, al ;Ignore converted to fail
   678 00001632 0F84E9FEFFFF        <1>     jz .gddpretdpbFail
   679 00001638 3C01                <1>     cmp al, 1
   680 0000163A 0F8444FEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   681 00001640 3C03                <1>     cmp al, 3
   682 00001642 0F84D9FEFFFF        <1>     je .gddpretdpbFail
   683 00001648 CD43                <1>     int 43h ;al = 2, means just abort
   684                              <1> ;-------------------------------------------
   685                              <1> 
   686                              <1> ctrlBreakCheck:    ;ah = 33h
   687 0000164A 84C0                <1>     test al, al
   688 0000164C 7406                <1>     jz .cbcget  ;Get the state
   689 0000164E 8815(F3000000)      <1>     mov byte [breakFlag], dl    ;Set the state
   690                              <1> .cbcget:
   691 00001654 8A15(F3000000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   692 0000165A 48CF                <1>     iretq
   693                              <1> getInDOSflagPtr:   ;ah = 34h
   694 0000165C 488D15(C9000000)    <1>     lea rdx, inDOS
   695 00001663 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
   696 0000166A 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;save ptr in rbx
   697 0000166E C3                  <1>     ret
   698                              <1> getIntVector:      ;ah = 35h
   699                              <1> ;Called with:
   700                              <1> ;   al = Interrupt Number
   701                              <1> ;Returns:
   702                              <1> ;   rbx = Pointer to interrupt handler
   703 0000166F 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   704 00001671 B807F00000          <1>     mov eax, 0F007h
   705 00001676 CD35                <1>     int 35h
   706 00001678 488B15(09010000)    <1>     mov rdx, qword [oldRSP]
   707 0000167F 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx  ;Save pointer in rbx
   708 00001683 8A02                <1>     mov al, byte [rdx + callerFrame.rax]    ;Get the low byte in al
   709 00001685 C3                  <1>     ret
   710                              <1> getDiskFreeSpace:  ;ah = 36h
   711 00001686 84D2                <1>     test dl, dl
   712 00001688 7408                <1>     jz .gdfsSkipdefault
   713 0000168A 8A15(F2000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   714 00001690 EB02                <1>     jmp short .gdfsMain
   715                              <1> .gdfsSkipdefault:
   716 00001692 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   717                              <1> .gdfsMain:
   718 00001694 E83BF7FFFF          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
   719 00001699 84C0                <1>     test al, al
   720 0000169B 7434                <1>     jz .gdfsDPBFound
   721                              <1> ;Else, we at an error.
   722                              <1> ;Simply return with CY set and error code in al with extended error info
   723 0000169D 66C705(CC000000)0F- <1>     mov word [errorExt], 15     ;Invalid drive error
   723 000016A5 00                  <1>
   724 000016A6 C605(CB000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   725 000016AD C605(CF000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   726 000016B4 C605(CE000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   727 000016BB 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
   728 000016C2 66C74500FFFF        <1>     mov word [rbp + callerFrame.rax], -1    ;Set ax=FFFFh
   729 000016C8 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set CF=CY
   730 000016D0 C3                  <1>     ret
   731                              <1> .gdfsDPBFound:
   732 000016D1 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   733 000016D4 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   734 000016D6 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   735 000016D9 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   736 000016DC BB01000000          <1>     mov ebx, 1
   737 000016E1 D3E3                <1>     shl ebx, cl
   738 000016E3 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   739 000016E5 8B5D30              <1>     mov ebx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   740 000016E8 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
   741 000016EF 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   742 000016F3 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   743 000016F7 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   744 000016FB C3                  <1>     ret
   745                              <1> 
   746                              <1> loadExecChild:     ;ah = 4Bh, EXEC
   747                              <1> terminateClean:    ;ah = 4Ch, EXIT
   748                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   749 000016FC C3                  <1>     ret
   750                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   751 000016FD 48891D(D8000000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   752 00001704 48CF                <1>     iretq
   753                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   754 00001706 488B15(D8000000)    <1>     mov rdx, qword [currentPSP]
   755 0000170D 48CF                <1>     iretq
   756                              <1> getSysVarsPtr:     ;ah = 52h
   757 0000170F 488D15(68000000)    <1>     lea rdx, sysVarsPtr
   758 00001716 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
   759 0000171D 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx
   760 00001721 C3                  <1>     ret
   761                              <1> createDPB:         ;ah = 53h, generates a DPB from a given BPB
   762                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   763                              <1> ;This is done so that the other fields of the DPB can be recycled
   764                              <1> ;Input: rsi = ptr to the BPB
   765                              <1> ;       rbp = ptr to the DPB
   766                              <1> ;bMediaDescriptor
   767 00001722 8A4615              <1>     mov al, byte [rsi + bpb.media]
   768 00001725 884522              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   769                              <1> ;bAccessFlag
   770 00001728 C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Not accessed
   771                              <1> ;dFirstFreeCluster
   772 0000172C C7452C00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   773                              <1> ;dNumberOfFreeClusters
   774 00001733 C74530FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   775                              <1> ;bBytesPerSectorShift
   776 0000173A 668B460B            <1>     mov ax, word [rsi + bpb.bytsPerSec]
   777 0000173E B107                <1>     mov cl, 7   ;Start with 128 byte sectors (not supported, min 512)
   778 00001740 66D3E8              <1>     shr ax, cl  ;Shift down
   779                              <1> .cd0:
   780 00001743 66D1E8              <1>     shr ax, 1
   781 00001746 7404                <1>     jz .cd1
   782 00001748 FEC1                <1>     inc cl
   783 0000174A EBF7                <1>     jmp short .cd0
   784                              <1> .cd1:
   785 0000174C 884D02              <1>     mov byte [rbp + dpb.bBytesPerSectorShift], cl
   786                              <1> ;bMaxSectorInCluster
   787 0000174F 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   788 00001752 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   789 00001754 884503              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   790                              <1> ;bSectorsPerClusterShift
   791 00001757 FEC0                <1>     inc al
   792 00001759 30C9                <1>     xor cl, cl
   793                              <1> .cd2:
   794 0000175B D0E8                <1>     shr al, 1
   795 0000175D 7404                <1>     jz .cd3
   796 0000175F FEC1                <1>     inc cl
   797 00001761 EBF8                <1>     jmp short .cd2
   798                              <1> .cd3:
   799 00001763 884D04              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   800                              <1> ;wFAToffset, number of reserved sectors in partition
   801 00001766 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   802 0000176A 66894505            <1>     mov word [rbp + dpb.wFAToffset], ax
   803                              <1> ;bNumberOfFATs
   804 0000176E 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   805 00001771 884507              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   806                              <1> ;wNumberRootDirSectors
   807 00001774 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   808 00001778 C1E005              <1>     shl eax, 5  ;Multiply by 32
   809 0000177B 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   810 0000177F FFC9                <1>     dec ecx
   811 00001781 01C8                <1>     add eax, ecx
   812 00001783 31D2                <1>     xor edx, edx    ;Clear for divide
   813 00001785 F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   814 00001787 66894508            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   815                              <1> ;dFATlength, get the FAT length
   816 0000178B 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   817 0000178F 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   818 00001792 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   819 00001794 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   820 00001797 894512              <1>     mov dword [rbp + dpb.dFATlength], eax
   821                              <1> ;Complex cases below...
   822                              <1> ;dClusterHeapOffset, start sector of the data area
   823 0000179A 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   824 0000179E 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   825 000017A1 85C0                <1>     test eax, eax
   826 000017A3 0F44C3              <1>     cmovz eax, ebx
   827                              <1> ;eax = FATsz
   828 000017A6 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   829 000017AA 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   830 000017AD 85DB                <1>     test ebx, ebx
   831 000017AF 0F44D9              <1>     cmovz ebx, ecx 
   832                              <1> ;ebx = TotSec
   833 000017B2 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   834 000017B5 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   835                              <1> .cd4:
   836 000017B7 01C2                <1>     add edx, eax
   837 000017B9 FEC9                <1>     dec cl
   838 000017BB 75FA                <1>     jnz .cd4
   839 000017BD 89D0                <1>     mov eax, edx    ;Store product in eax
   840 000017BF 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   841 000017C3 01D0                <1>     add eax, edx
   842 000017C5 0FB75508            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   843 000017C9 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   844                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   845                              <1>     ;aka eax = Start sector of the data area in volume
   846 000017CB 89450A              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   847                              <1> ;dClusterCount
   848 000017CE 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   849 000017D0 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   850 000017D2 31D2                <1>     xor edx, edx
   851 000017D4 BB01000000          <1>     mov ebx, 1
   852 000017D9 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   853 000017DC D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   854 000017DE F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   855 000017E0 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   856 000017E2 89450E              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   857                              <1> ;dFirstUnitOfRootDir
   858 000017E5 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   859 000017EA 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   860 000017ED 7709                <1>     ja .cd5
   861                              <1>     ;Else, we need to find the first sector of the root directory
   862                              <1>     ;Get the start sector of data area in volume 
   863                              <1>     ; and sub the number of sectors in the root directory
   864 000017EF 8B450A              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   865 000017F2 0FB75D08            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   866 000017F6 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   867                              <1> .cd5:
   868 000017F8 894516              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   869                              <1> ;Exit epilogue
   870 000017FB 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
   871 00001802 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   872                              <1>     %if DEBUG && DPBINFO
   873                              <1>     ;Print DPB 
   874                              <1>     debugEnterM
   875                              <1>     push rbp
   876                              <1>     lea rbp, .l0000
   877                              <1>     call debPrintNullString
   878                              <1>     pop rbp
   879                              <1>     call debPrintDeviceDPB
   880                              <1>     call debMakeDebuggerRespond
   881                              <1>     jmp short .l0001
   882                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   883                              <1> .l0001:
   884                              <1>     debugExitM
   885                              <1>     %endif
   886 00001804 C3                  <1>     ret
   887                              <1> getVerifySetting:  ;ah = 54h
   888 00001805 8A05(F4000000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   889 0000180B C3                  <1>     ret
   890                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   891 0000180C C3                  <1>     ret
   892                              <1> getExtendedError:  ;ah = 59h
   893 0000180D 488B15(09010000)    <1>     mov rdx, qword [oldRSP]
   894 00001814 668B05(CC000000)    <1>     mov ax, word [errorExt]
   895 0000181B 8A2D(CB000000)      <1>     mov ch, byte [errorLocus]
   896 00001821 8A3D(CF000000)      <1>     mov bh, byte [errorClass]
   897 00001827 8A1D(CE000000)      <1>     mov bl, byte [errorAction]
   898 0000182D 668902              <1>     mov word [rdx + callerFrame.rax], ax
   899 00001830 66895A08            <1>     mov word [rdx + callerFrame.rbx], bx
   900 00001834 886A11              <1>     mov byte [rdx + callerFrame.rcx + 1], ch
   901 00001837 C3                  <1>     ret
   902                              <1> getCritErrorInfo:  ;ah = 5Dh
   903                              <1> networkServices:   ;ah = 5Eh, do nothing
   904                              <1> networkRedirection:;ah = 5Fh, do nothing
   905 00001838 C3                  <1>     ret
   906                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   907 00001839 488B15(D8000000)    <1>     mov rdx, qword [currentPSP]
   908 00001840 48CF                <1>     iretq
   909                              <1>                     ;ah = 63h, reserved
   910                              <1> setDriverLookahead:;ah = 64h, reserved
   911 00001842 48CF                <1>     iretq
   912                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   913                              <1> return:
   914 00001844 C3                  <1>     ret
   915                              <1> 
   916                              <1> kernelDispatchTable:
   917 00001845 [1912000000000000]  <1>     dq simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   918 0000184D [BA0A000000000000]  <1>     dq stdinReadEcho       ;AH = 01H, CHAR IO
   919 00001855 [2F0B000000000000]  <1>     dq stdoutWrite         ;AH = 02H, CHAR IO
   920 0000185D [690B000000000000]  <1>     dq stdauxRead          ;AH = 03H, CHAR IO
   921 00001865 [690B000000000000]  <1>     dq stdauxWrite         ;AH = 04H, CHAR IO
   922 0000186D [690B000000000000]  <1>     dq stdprnWrite         ;AH = 05H, CHAR IO
   923 00001875 [690B000000000000]  <1>     dq directCONIO         ;AH = 06H, CHAR IO
   924 0000187D [690B000000000000]  <1>     dq waitDirectInNoEcho  ;AH = 07H, CHAR IO
   925 00001885 [A30B000000000000]  <1>     dq waitStdinNoEcho     ;AH = 08H, CHAR IO
   926 0000188D [A40B000000000000]  <1>     dq printString         ;AH = 09H, CHAR IO
   927 00001895 [E60B000000000000]  <1>     dq buffStdinInput      ;AH = 0AH, CHAR IO
   928 0000189D [E60B000000000000]  <1>     dq checkStdinStatus    ;AH = 0BH, CHAR IO
   929 000018A5 [E60B000000000000]  <1>     dq clearbuffDoFunc     ;AH = 0CH, CHAR IO
   930 000018AD [1A12000000000000]  <1>     dq diskReset           ;AH = 0DH, DISK MANAGEMENT
   931 000018B5 [B012000000000000]  <1>     dq selectDisk          ;AH = 0EH, DISK MANAGEMENT
   932 000018BD [E60B000000000000]  <1>     dq openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   933 000018C5 [E60B000000000000]  <1>     dq closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   934 000018CD [E60B000000000000]  <1>     dq findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   935 000018D5 [E60B000000000000]  <1>     dq findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   936 000018DD [E60B000000000000]  <1>     dq deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   937 000018E5 [E60B000000000000]  <1>     dq sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   938 000018ED [E60B000000000000]  <1>     dq sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   939 000018F5 [E60B000000000000]  <1>     dq createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   940 000018FD [E60B000000000000]  <1>     dq renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   941 00001905 [4418000000000000]  <1>     dq return              ;AH = 18H, RESERVED
   942 0000190D [0113000000000000]  <1>     dq getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   943 00001915 [E70B000000000000]  <1>     dq setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   944 0000191D [0813000000000000]  <1>     dq FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   945 00001925 [0A13000000000000]  <1>     dq FATinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   946 0000192D [4418000000000000]  <1>     dq return              ;AH = 1DH, RESERVED
   947 00001935 [4418000000000000]  <1>     dq return              ;AH = 1EH, RESERVED
   948 0000193D [D013000000000000]  <1>     dq getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   949 00001945 [4418000000000000]  <1>     dq return              ;AH = 20H, RESERVED
   950 0000194D [FA0B000000000000]  <1>     dq randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   951 00001955 [FA0B000000000000]  <1>     dq randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   952 0000195D [FA0B000000000000]  <1>     dq getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   953 00001965 [FA0B000000000000]  <1>     dq setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   954 0000196D [7E13000000000000]  <1>     dq setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   955 00001975 [A913000000000000]  <1>     dq createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   956 0000197D [FA0B000000000000]  <1>     dq randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   957 00001985 [FA0B000000000000]  <1>     dq randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   958 0000198D [FA0B000000000000]  <1>     dq parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   959 00001995 [AA0D000000000000]  <1>     dq getDate             ;AH = 2AH, TIME AND DATE
   960 0000199D [AA0D000000000000]  <1>     dq setDate             ;AH = 2BH, TIME AND DATE
   961 000019A5 [AA0D000000000000]  <1>     dq getTime             ;AH = 2CH, TIME AND DATE
   962 000019AD [AA0D000000000000]  <1>     dq setTime             ;AH = 2DH, TIME AND DATE
   963 000019B5 [AA13000000000000]  <1>     dq setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   964 000019BD [FB0B000000000000]  <1>     dq getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   965 000019C5 [B813000000000000]  <1>     dq getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   966 000019CD [CF13000000000000]  <1>     dq terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   967 000019D5 [D213000000000000]  <1>     dq getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   968 000019DD [4A16000000000000]  <1>     dq ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   969 000019E5 [5C16000000000000]  <1>     dq getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   970 000019ED [6F16000000000000]  <1>     dq getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   971 000019F5 [8616000000000000]  <1>     dq getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   972 000019FD [AB0D000000000000]  <1>     dq getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   973 00001A05 [AB0D000000000000]  <1>     dq getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   974 00001A0D [B90A000000000000]  <1>     dq makeDIR             ;AH = 39H, DIRECTORY OPERATION
   975 00001A15 [B90A000000000000]  <1>     dq removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   976 00001A1D [B90A000000000000]  <1>     dq changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   977 00001A25 [0E0C000000000000]  <1>     dq createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   978 00001A2D [0E0C000000000000]  <1>     dq openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   979 00001A35 [0E0C000000000000]  <1>     dq closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   980 00001A3D [0F0C000000000000]  <1>     dq readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   981 00001A45 [480C000000000000]  <1>     dq writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   982 00001A4D [590C000000000000]  <1>     dq deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
   983 00001A55 [590C000000000000]  <1>     dq movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
   984 00001A5D [590C000000000000]  <1>     dq changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
   985 00001A65 [590C000000000000]  <1>     dq ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
   986 00001A6D [590C000000000000]  <1>     dq duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
   987 00001A75 [590C000000000000]  <1>     dq forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
   988 00001A7D [B90A000000000000]  <1>     dq getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
   989 00001A85 [3E0D000000000000]  <1>     dq allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
   990 00001A8D [3E0D000000000000]  <1>     dq freeMemory          ;AH = 49H, MEMORY MANAGEMENT
   991 00001A95 [3E0D000000000000]  <1>     dq reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
   992 00001A9D [FC16000000000000]  <1>     dq loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
   993 00001AA5 [FC16000000000000]  <1>     dq terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
   994 00001AAD [FC16000000000000]  <1>     dq getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
   995 00001AB5 [590C000000000000]  <1>     dq findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
   996 00001ABD [590C000000000000]  <1>     dq findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
   997 00001AC5 [FD16000000000000]  <1>     dq setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   998 00001ACD [0617000000000000]  <1>     dq getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   999 00001AD5 [0F17000000000000]  <1>     dq getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
  1000 00001ADD [2217000000000000]  <1>     dq createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
  1001 00001AE5 [0518000000000000]  <1>     dq getVerifySetting    ;AH = 54H, DISK MANAGEMENT
  1002 00001AED [0C18000000000000]  <1>     dq createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
  1003 00001AF5 [590C000000000000]  <1>     dq renameFile          ;AH = 56H, FILE OPERATION       HANDLE
  1004 00001AFD [B90A000000000000]  <1>     dq getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
  1005 00001B05 [3E0D000000000000]  <1>     dq getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
  1006 00001B0D [0D18000000000000]  <1>     dq getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
  1007 00001B15 [590C000000000000]  <1>     dq createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
  1008 00001B1D [590C000000000000]  <1>     dq createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
  1009 00001B25 [590C000000000000]  <1>     dq lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
  1010 00001B2D [3818000000000000]  <1>     dq getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
  1011 00001B35 [3818000000000000]  <1>     dq networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
  1012 00001B3D [3818000000000000]  <1>     dq networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
  1013 00001B45 [B90A000000000000]  <1>     dq trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
  1014 00001B4D [4418000000000000]  <1>     dq return              ;AH = 61H, RESERVED
  1015 00001B55 [3918000000000000]  <1>     dq getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
  1016 00001B5D [4418000000000000]  <1>     dq return              ;AH = 63H, RESERVED
  1017 00001B65 [4218000000000000]  <1>     dq setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
  1018 00001B6D [AB0D000000000000]  <1>     dq getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
  1019 00001B75 [AB0D000000000000]  <1>     dq getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
  1020 00001B7D [590C000000000000]  <1>     dq setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
  1021 00001B85 [590C000000000000]  <1>     dq commitFile          ;AH = 68H, FILE OPERATION       HANDLE
  1022 00001B8D [4418000000000000]  <1>     dq getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
  1023                              <1> kernelDispatchTableL  equ $ - kernelDispatchTable 
    25                                  %include "./Source/Misc/int44h.asm"
    26                              <1> critErrorHandler:   ;Int 44h
    27                              <1> ;User Stack in usage here, must be swapped to before this is called
    28                              <1> ;Entered with:  
    29                              <1> ;               AH = Critical Error Bitfield
    30                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    31                              <1> ;               Bit 6 - Reserved
    32                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    33                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    34                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    35                              <1> ;               Bits [2-1] = Affected Disk Error
    36                              <1> ;                     0 0   DOS area
    37                              <1> ;                     0 1   FAT area
    38                              <1> ;                     1 0   Directory area
    39                              <1> ;                     1 1   Data area
    40                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    41                              <1> ;               AL  = Failing drive number if AH[7] = 0
    42                              <1> ;               DIL = Error code for errorMsg
    43                              <1> ;               RSI = EA of Device Header for which device the error occured
    44                              <1> ;Return:
    45                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    46                              <1> ;                  = 1 - Retry the Operation    (Retry)
    47                              <1> ;                  = 2 - Terminate the Program  (Abort)
    48                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    49 00001B95 53                  <1>     push rbx
    50 00001B96 51                  <1>     push rcx
    51 00001B97 52                  <1>     push rdx
    52 00001B98 57                  <1>     push rdi
    53 00001B99 56                  <1>     push rsi
    54 00001B9A FC                  <1>     cld         ;Make String ops go forward
    55                              <1> 
    56 00001B9B 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    57 00001B9E 488D155E020000      <1>     lea rdx, qword [.crlf]
    58 00001BA5 B409                <1>     mov ah, 09h ;Print String
    59 00001BA7 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    60                              <1> 
    61 00001BA9 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    62 00001BAF B90C000000          <1>     mov ecx, 0Ch
    63 00001BB4 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    64 00001BB6 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    65 00001BB9 480FB7FF            <1>     movzx rdi, di
    66 00001BBD 4889FA              <1>     mov rdx, rdi    ;Copy error code
    67 00001BC0 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    68 00001BC4 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    69 00001BC7 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    70 00001BCA 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    71 00001BD1 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    72 00001BD5 B409                <1>     mov ah, 09h ;Print String
    73 00001BD7 CD41                <1>     int 41h     ;Call DOS to print first part of message
    74                              <1> 
    75 00001BD9 488D1505020000      <1>     lea rdx, qword [.readmsg]
    76 00001BE0 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    77 00001BE7 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    78 00001BEA 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    79 00001BEE B409                <1>     mov ah, 09h ;Print String
    80 00001BF0 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    81                              <1> 
    82 00001BF2 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    83 00001BF5 0F85DF000000        <1>     jnz .charError
    84                              <1> ;Disk error continues here
    85 00001BFB 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    86 00001C02 B409                <1>     mov ah, 09h
    87 00001C04 CD41                <1>     int 41h
    88 00001C06 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    89 00001C08 80C241              <1>     add dl, "A" ;Add ASCII code
    90 00001C0B B402                <1>     mov ah, 02h ;Print char in dl
    91 00001C0D CD41                <1>     int 41h
    92                              <1> .userInput:
    93 00001C0F 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
    94 00001C16 B409                <1>     mov ah, 09h
    95 00001C18 CD41                <1>     int 41h
    96                              <1> ;Abort, Retry, Ignore, Fail is word order
    97                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    98                              <1> .userAbort:
    99                              <1> ;Abort is always an option
   100 00001C1A 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   101 00001C21 B409                <1>     mov ah, 09h
   102 00001C23 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   103                              <1> .userRetry:
   104 00001C25 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   105 00001C28 7416                <1>     jz .userIgnore    ;If clear, dont print message
   106 00001C2A 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   107 00001C31 B409                <1>     mov ah, 09h
   108 00001C33 CD41                <1>     int 41h
   109 00001C35 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   110 00001C3C B409                <1>     mov ah, 09h
   111 00001C3E CD41                <1>     int 41h
   112                              <1> .userIgnore:
   113 00001C40 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   114 00001C43 7416                <1>     jz .userFail
   115 00001C45 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   116 00001C4C B409                <1>     mov ah, 09h
   117 00001C4E CD41                <1>     int 41h
   118 00001C50 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   119 00001C57 B409                <1>     mov ah, 09h
   120 00001C59 CD41                <1>     int 41h
   121                              <1> .userFail:
   122 00001C5B F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   123 00001C5E 7416                <1>     jz .userMsgEnd
   124 00001C60 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   125 00001C67 B409                <1>     mov ah, 09h
   126 00001C69 CD41                <1>     int 41h
   127 00001C6B 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   128 00001C72 B409                <1>     mov ah, 09h
   129 00001C74 CD41                <1>     int 41h
   130                              <1> .userMsgEnd:
   131 00001C76 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   132 00001C7D B409                <1>     mov ah, 09h
   133 00001C7F CD41                <1>     int 41h
   134                              <1> ;Get user input now 
   135 00001C81 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   136 00001C83 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   137 00001C8A B401                <1>     mov ah, 01h ;STDIN without Console Echo
   138 00001C8C CD41                <1>     int 41h ;Get char in al
   139 00001C8E 3C61                <1>     cmp al, "a" ;Chack if lowercase
   140 00001C90 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   141 00001C92 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   142                              <1> .uip1:
   143 00001C94 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   144 00001C95 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   145 00001C97 FFC1                <1>     inc ecx
   146 00001C99 81F904000000        <1>     cmp ecx, 4
   147 00001C9F 75F3                <1>     jne .uip1
   148 00001CA1 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   149                              <1> .validInput:
   150 00001CA6 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   151                              <1> ;Now check if the input is permitted
   152 00001CA8 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   153 00001CAA 7427                <1>     je .cehExit
   154 00001CAC 84C0                <1>     test al, al ;Check if 0 => Ignore
   155 00001CAE 740F                <1>     je .viIgnore
   156 00001CB0 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   157 00001CB2 7416                <1>     je .viRetry
   158                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   159 00001CB4 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   160 00001CB7 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   161 00001CBD EB14                <1>     jmp short .cehExit
   162                              <1> .viIgnore:
   163 00001CBF F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   164 00001CC2 0F8447FFFFFF        <1>     jz .userInput
   165 00001CC8 EB09                <1>     jmp short .cehExit
   166                              <1> .viRetry:
   167 00001CCA F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   168 00001CCD 0F843CFFFFFF        <1>     jz .userInput
   169                              <1> .cehExit:
   170 00001CD3 5E                  <1>     pop rsi
   171 00001CD4 5F                  <1>     pop rdi
   172 00001CD5 5A                  <1>     pop rdx
   173 00001CD6 59                  <1>     pop rcx
   174 00001CD7 5B                  <1>     pop rbx
   175 00001CD8 48CF                <1>     iretq
   176                              <1> .charError:
   177 00001CDA B908000000          <1>     mov ecx, 8  ;8 chars in device name
   178 00001CDF 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   179                              <1> .ce1:
   180 00001CE6 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   181 00001CE7 88C2                <1>     mov dl, al  ;Move char into dl
   182 00001CE9 B402                <1>     mov ah, 02h
   183 00001CEB CD41                <1>     int 41h ;Print char
   184 00001CED E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   185 00001CEF E91BFFFFFF          <1>     jmp .userInput
   186                              <1> 
   187                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   188 00001CF4 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   188 00001CFD 746563742024202020  <1>
   189 00001D06 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   189 00001D0F 6E6974202420202020  <1>
   190 00001D18 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   190 00001D21 202420202020202020  <1>
   191 00001D2A 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   191 00001D33 6F6D6D616E64202420  <1>
   192 00001D3C 446174612024202020- <1>             db "Data $            "       ;Error 4
   192 00001D45 202020202020202020  <1>
   193 00001D4E 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   193 00001D57 737420242020202020  <1>
   194 00001D60 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   194 00001D69 202020202020202020  <1>
   195 00001D72 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   195 00001D7B 656469612024202020  <1>
   196 00001D84 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   196 00001D8D 7420466F756E642024  <1>
   197 00001D96 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   197 00001D9F 706572202420202020  <1>
   198 00001DA8 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   198 00001DB1 6C7420242020202020  <1>
   199 00001DBA 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   199 00001DC3 742024202020202020  <1>
   200 00001DCC 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   200 00001DD5 61696C757265202420  <1>
   201                              <1> 
   202 00001DDE 64726976652024      <1> .drive      db "drive $"
   203 00001DE5 6572726F7220726561- <1> .readmsg    db "error reading $"
   203 00001DEE 64696E672024        <1>
   204 00001DF4 6572726F7220777269- <1> .writemsg   db "error writing $"
   204 00001DFD 74696E672024        <1>
   205 00001E03 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   206 00001E06 41626F727424        <1> .abortmsg   db "Abort$" 
   207 00001E0C 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   208 00001E13 526574727924        <1> .retrymsg   db "Retry$"
   209 00001E19 4661696C24          <1> .failmsg    db "Fail$"
   210 00001E1E 2C2024              <1> .betweenMsg db ", $"
   211 00001E21 3F2024              <1> .endMsg     db "? $"
   212 00001E24 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    26                                  %include "./Source/Drivers/drvData.asm"
    27                              <1> ;-----------------------------------:
    28                              <1> ;          Driver routines          :
    29                              <1> ;-----------------------------------:
    30                              <1> drivers:
    31                              <1> conHdr:
    32 00001E28 [4A1E000000000000]  <1>     dq auxHdr
    33 00001E30 1308                <1>     dw 0813h
    34 00001E32 [C81F000000000000]  <1>     dq commonStrat
    35 00001E3A [D71F000000000000]  <1>     dq conDriver
    36 00001E42 434F4E2020202020    <1>     db "CON     "
    37                              <1> auxHdr:
    38 00001E4A [6C1E000000000000]  <1>     dq prnHdr
    39 00001E52 0080                <1>     dw 08000h
    40 00001E54 [C81F000000000000]  <1>     dq commonStrat
    41 00001E5C [9C22000000000000]  <1>     dq com1Intr
    42 00001E64 4155582020202020    <1>     db "AUX     "
    43                              <1> prnHdr:
    44 00001E6C [8E1E000000000000]  <1>     dq clkHdr
    45 00001E74 40A0                <1>     dw 0A040h
    46 00001E76 [D01F000000000000]  <1>     dq nulStrat
    47 00001E7E [D61F000000000000]  <1>     dq nulIntr
    48 00001E86 50524E2020202020    <1>     db "PRN     "
    49                              <1> clkHdr:
    50 00001E8E [B01E000000000000]  <1>     dq msdHdr
    51 00001E96 0880                <1>     dw 08008h
    52 00001E98 [C81F000000000000]  <1>     dq commonStrat
    53 00001EA0 [0F21000000000000]  <1>     dq clkDriver
    54 00001EA8 434C4F434B242020    <1>     db "CLOCK$  "
    55                              <1> msdHdr:
    56 00001EB0 [D21E000000000000]  <1>     dq com1Hdr
    57 00001EB8 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    58 00001EBA [C81F000000000000]  <1>     dq commonStrat
    59 00001EC2 [4124000000000000]  <1>     dq msdDriver
    60 00001ECA 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    61                              <1> com1Hdr:
    62 00001ED2 [F41E000000000000]  <1>     dq com2Hdr
    63 00001EDA 0080                <1>     dw 08000h
    64 00001EDC [C81F000000000000]  <1>     dq commonStrat
    65 00001EE4 [9C22000000000000]  <1>     dq com1Intr
    66 00001EEC 434F4D3120202020    <1>     db "COM1    "
    67                              <1> com2Hdr:
    68 00001EF4 [161F000000000000]  <1>     dq com3Hdr
    69 00001EFC 0080                <1>     dw 08000h
    70 00001EFE [C81F000000000000]  <1>     dq commonStrat
    71 00001F06 [A522000000000000]  <1>     dq com2Intr
    72 00001F0E 434F4D3220202020    <1>     db "COM2    "
    73                              <1> com3Hdr:
    74 00001F16 [381F000000000000]  <1>     dq com4Hdr
    75 00001F1E 0080                <1>     dw 08000h
    76 00001F20 [C81F000000000000]  <1>     dq commonStrat
    77 00001F28 [AE22000000000000]  <1>     dq com3Intr
    78 00001F30 434F4D3320202020    <1>     db "COM3    "
    79                              <1> com4Hdr:
    80 00001F38 [5A1F000000000000]  <1>     dq lpt1Hdr
    81 00001F40 0080                <1>     dw 08000h
    82 00001F42 [C81F000000000000]  <1>     dq commonStrat
    83 00001F4A [B722000000000000]  <1>     dq com4Intr
    84 00001F52 434F4D3420202020    <1>     db "COM4    "
    85                              <1> lpt1Hdr:
    86 00001F5A [7C1F000000000000]  <1>     dq lpt2Hdr
    87 00001F62 40A0                <1>     dw 0A040h
    88 00001F64 [D01F000000000000]  <1>     dq nulStrat
    89 00001F6C [D61F000000000000]  <1>     dq nulIntr
    90 00001F74 4C50543120202020    <1>     db "LPT1    "
    91                              <1> lpt2Hdr:
    92 00001F7C [9E1F000000000000]  <1>     dq lpt3Hdr
    93 00001F84 40A0                <1>     dw 0A040h
    94 00001F86 [D01F000000000000]  <1>     dq nulStrat
    95 00001F8E [D61F000000000000]  <1>     dq nulIntr
    96 00001F96 4C50543220202020    <1>     db "LPT2    "
    97                              <1> lpt3Hdr:
    98 00001F9E FFFFFFFFFFFFFFFF    <1>     dq -1
    99 00001FA6 40A0                <1>     dw 0A040h
   100 00001FA8 [D01F000000000000]  <1>     dq nulStrat
   101 00001FB0 [D61F000000000000]  <1>     dq nulIntr
   102 00001FB8 4C50543320202020    <1>     dq "LPT3    "
   103 00001FC0 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    27                                  %include "./Source/Drivers/charDrv.asm"
    28                              <1> commonStrat:
    29                              <1> ;DOS calls this function with rbx=Ptr to request header
    30 00001FC8 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    31 00001FCF C3                  <1>     ret
    32                              <1> nulStrat:
    33 00001FD0 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    34                              <1> nulIntr:
    35 00001FD6 C3                  <1>     ret
    36                              <1> conDriver:
    37 00001FD7 50                  <1>     push rax
    38 00001FD8 53                  <1>     push rbx
    39 00001FD9 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    40 00001FE0 B003                <1>     mov al, 03h ;Unknown Command
    41 00001FE2 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    42 00001FE6 7735                <1>     ja .conWriteErrorCode ;If yes, error!
    43                              <1> 
    44 00001FE8 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    45 00001FEB 3C04                <1>     cmp al, 4
    46 00001FED 743D                <1>     jz .conRead
    47 00001FEF 3C05                <1>     cmp al, 5
    48 00001FF1 747F                <1>     jz .conNondestructiveRead
    49 00001FF3 3C06                <1>     cmp al, 6
    50 00001FF5 0F84A8000000        <1>     jz .conInputStatus
    51 00001FFB 3C07                <1>     cmp al, 7
    52 00001FFD 0F84B0000000        <1>     jz .conFlushInputBuffers
    53 00002003 3C08                <1>     cmp al, 8
    54 00002005 0F84CA000000        <1>     jz .conWrite
    55 0000200B 3C09                <1>     cmp al, 9
    56 0000200D 0F84C2000000        <1>     jz .conWrite
    57 00002013 3C0A                <1>     cmp al, 0Ah
    58 00002015 0F84E3000000        <1>     jz .conOutputStatus
    59 0000201B EB06                <1>     jmp short .conExit  ;All other valid functions return done
    60                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    61 0000201D B480                <1>     mov ah, 80h ;Set error bit
    62 0000201F 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    63                              <1> .conExit:
    64 00002023 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    65 00002029 5B                  <1>     pop rbx
    66 0000202A 58                  <1>     pop rax
    67 0000202B C3                  <1>     ret
    68                              <1> .conRead:    ;Function 4
    69 0000202C B005                <1>     mov al, 05h ;Bad request structure length?
    70 0000202E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    71 00002031 75EA                <1>     jne .conWriteErrorCode
    72                              <1> 
    73 00002033 57                  <1>     push rdi
    74 00002034 51                  <1>     push rcx
    75 00002035 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    76 00002039 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    77                              <1> .cre1:
    78 0000203B 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    79 0000203E 741C                <1>     je .cre2
    80 00002040 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    81 00002047 751A                <1>     jnz .cre3   ;No, get the buffer value
    82 00002049 31C0                <1>     xor eax, eax
    83 0000204B CD36                <1>     int 36h
    84                              <1> .cre11:
    85 0000204D AA                  <1>     stosb
    86 0000204E 84C0                <1>     test al, al ;Was the ascii code 0?
    87 00002050 7506                <1>     jnz .cre12  ;No, skip storing scancode
    88 00002052 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    89                              <1> .cre12:
    90 00002058 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    91 0000205A EBDF                <1>     jmp short .cre1
    92                              <1> .cre2:
    93 0000205C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    94 0000205F 59                  <1>     pop rcx
    95 00002060 5F                  <1>     pop rdi
    96 00002061 EBC0                <1>     jmp short .conExit
    97                              <1> .cre3:
    98 00002063 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    99 00002069 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   100 00002070 EBDB                <1>     jmp short .cre11
   101                              <1> 
   102                              <1> .conNondestructiveRead:  ;Function 5
   103 00002072 B005                <1>     mov al, 05h ;Bad request structure length?
   104 00002074 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   105 00002077 75A4                <1>     jne .conWriteErrorCode
   106 00002079 803D8E00000000      <1>     cmp byte [.conBuf], 0
   107 00002080 7519                <1>     jnz .cnr2
   108 00002082 B401                <1>     mov ah, 01h     ;Get key if exists
   109 00002084 CD36                <1>     int 36h
   110 00002086 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   111                              <1>     ;Keystroke available
   112                              <1> .cnr0:
   113 00002088 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   114 0000208B E993FFFFFF          <1>     jmp .conExit
   115                              <1> .cnr1: ;No keystroke available
   116 00002090 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   117 00002096 E988FFFFFF          <1>     jmp .conExit
   118                              <1> .cnr2:
   119 0000209B 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   120 000020A1 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   121                              <1> 
   122                              <1> .conInputStatus:         ;Function 6
   123 000020A3 B005                <1>     mov al, 05h ;Bad request structure length?
   124 000020A5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   125 000020A8 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   126 000020AE E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   127                              <1> 
   128                              <1> .conFlushInputBuffers:   ;Function 7
   129 000020B3 B005                <1>     mov al, 05h ;Bad request structure length?
   130 000020B5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   131 000020B8 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   132 000020BE C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   133                              <1> .cfib0:
   134 000020C5 B401                <1>     mov ah, 01      ;Get buffer status
   135 000020C7 CD36                <1>     int 36h
   136 000020C9 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   137 000020CF 30E4                <1>     xor ah, ah
   138 000020D1 CD36                <1>     int 36h ;Read key to flush from buffer
   139 000020D3 EBF0                <1>     jmp short .cfib0
   140                              <1> 
   141                              <1> .conWrite:   ;Function 8 and 9
   142 000020D5 B005                <1>     mov al, 05h ;Bad request structure length?
   143 000020D7 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   144 000020DA 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   145                              <1> 
   146 000020E0 56                  <1>     push rsi
   147 000020E1 51                  <1>     push rcx
   148 000020E2 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   149 000020E6 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   150                              <1> .cw1: 
   151 000020E8 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   152 000020EB 7407                <1>     je .cw2
   153 000020ED AC                  <1>     lodsb   ;Get char into al, and inc rsi
   154 000020EE CD49                <1>     int 49h ;Fast print char
   155 000020F0 FFC1                <1>     inc ecx
   156 000020F2 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   157                              <1> .cw2:
   158 000020F4 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   159 000020F7 59                  <1>     pop rcx
   160 000020F8 5E                  <1>     pop rsi
   161 000020F9 E925FFFFFF          <1>     jmp .conExit
   162                              <1> .conOutputStatus:   ;Function 0Ah
   163 000020FE B005                <1>     mov al, 05h ;Bad request structure length?
   164 00002100 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   165 00002103 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   166 00002109 E915FFFFFF          <1>     jmp .conExit
   167                              <1> 
   168 0000210E 00                  <1> .conBuf db 0    ;Single byte buffer
   169                              <1> clkDriver:
   170 0000210F 50                  <1>     push rax
   171 00002110 53                  <1>     push rbx
   172 00002111 51                  <1>     push rcx
   173 00002112 52                  <1>     push rdx
   174 00002113 56                  <1>     push rsi
   175 00002114 55                  <1>     push rbp
   176 00002115 488B1DA4FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   177 0000211C B003                <1>     mov al, 03h ;Unknown Command
   178 0000211E 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   179 00002122 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   180                              <1> 
   181 00002124 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   182 00002127 3C04                <1>     cmp al, 04h
   183 00002129 7437                <1>     jz .clkRead
   184 0000212B 3C06                <1>     cmp al, 06h
   185 0000212D 0F8494000000        <1>     jz .clkInputStatus
   186 00002133 3C07                <1>     cmp al, 07h
   187 00002135 0F8498000000        <1>     jz .clkFlushInputBuffers
   188 0000213B 3C08                <1>     cmp al, 08h
   189 0000213D 0F84A0000000        <1>     jz .clkWrite
   190 00002143 3C09                <1>     cmp al, 09h
   191 00002145 0F8498000000        <1>     jz .clkWrite
   192 0000214B EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   193                              <1> .clkNotFunctioning:
   194 0000214D B002                <1>     mov al, 02h ;Device not ready error
   195                              <1> .clkWriteErrorCode:
   196 0000214F B480                <1>     mov ah, 80h ;Set error bit
   197 00002151 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   198                              <1> .clkExit:
   199 00002155 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   200 0000215B 5D                  <1>     pop rbp
   201 0000215C 5E                  <1>     pop rsi
   202 0000215D 5A                  <1>     pop rdx
   203 0000215E 59                  <1>     pop rcx
   204 0000215F 5B                  <1>     pop rbx
   205 00002160 58                  <1>     pop rax
   206 00002161 C3                  <1>     ret
   207                              <1> 
   208                              <1> .clkRead:           ;Function 4
   209 00002162 B005                <1>     mov al, 05h ;Bad request structure length?
   210 00002164 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   211 00002167 75E6                <1>     jne .clkWriteErrorCode
   212                              <1> 
   213 00002169 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   214 0000216C 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   215 00002170 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   216 00002177 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   217 0000217B 30E4                <1>     xor ah, ah
   218 0000217D CD3A                <1>     int 3Ah         ;Read the system timer
   219 0000217F 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   220 00002181 740D                <1>     jz .clkr1       ;Nope, now just time 
   221 00002183 30E4                <1>     xor ah, ah
   222                              <1>     ;This works as al should keep count of the # of days passed since last read
   223 00002185 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   224 00002189 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   225                              <1> .clkr1:
   226 00002190 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   227 00002193 0FB7D2              <1>     movzx edx, dx
   228 00002196 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   229 00002198 89D0                <1>     mov eax, edx
   230 0000219A 31D2                <1>     xor edx, edx
   231 0000219C 89D8                <1>     mov eax, ebx
   232 0000219E B944040000          <1>     mov ecx, 1092   
   233 000021A3 F7F1                <1>     div ecx
   234 000021A5 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   235 000021A8 89D0                <1>     mov eax, edx    ;Get remainder in eax
   236 000021AA 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   237 000021AE 31D2                <1>     xor edx, edx
   238 000021B0 B95B000000          <1>     mov ecx, 91 ;5*18.2
   239 000021B5 F7F1                <1>     div ecx
   240 000021B7 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   241 000021BA 89D0                <1>     mov eax, edx    ;Get remainder in eax
   242                              <1>     ;lea eax, dword [eax + 4*eax]
   243                              <1>     ;add eax, edx    ;Essentially multiply by 6
   244 000021BC 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   245 000021BF 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   246 000021C2 E98EFFFFFF          <1>     jmp .clkExit
   247                              <1> 
   248                              <1> .clkInputStatus:    ;Function 6
   249                              <1> ;Always return ready
   250 000021C7 B005                <1>     mov al, 05h ;Bad request structure length?
   251 000021C9 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   252 000021CC 7581                <1>     jne .clkWriteErrorCode
   253 000021CE E982FFFFFF          <1>     jmp .clkExit
   254                              <1> .clkFlushInputBuffers:  ;Function 7
   255                              <1> ;Always return done immediately
   256 000021D3 B005                <1>     mov al, 05h ;Bad request structure length?
   257 000021D5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   258 000021D8 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   259 000021DE E972FFFFFF          <1>     jmp .clkExit
   260                              <1> 
   261                              <1> .clkWrite:          ;Functions 8 and 9
   262 000021E3 B005                <1>     mov al, 05h ;Bad request structure length?
   263 000021E5 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   264 000021E8 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   265                              <1> 
   266 000021EE 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   267 000021F1 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   268 000021F5 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   269 000021F9 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   270                              <1> 
   271 00002200 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   272 00002202 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   273 00002206 B105                <1>     mov cl, 5
   274 00002208 F6F1                <1>     div cl          ;Divide al by 5
   275 0000220A 30E4                <1>     xor ah, ah      ;Remove the remainder
   276 0000220C 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   277                              <1> ;Using the decimal part of this formula for the low count
   278                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   279 0000220E 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   280 00002211 B912000000          <1>     mov ecx, 18
   281 00002216 F7E1                <1>     mul ecx  
   282 00002218 01C3                <1>     add ebx, eax
   283                              <1> 
   284 0000221A 31D2                <1>     xor edx, edx
   285 0000221C 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   286 00002220 B944040000          <1>     mov ecx, 1092
   287 00002225 F7E1                <1>     mul ecx
   288 00002227 01C3                <1>     add ebx, eax
   289 00002229 89DA                <1>     mov edx, ebx    ;edx now has low count
   290 0000222B 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   291 0000222F B401                <1>     mov ah, 01h     ;Set the system time
   292 00002231 CD3A                <1>     int 3Ah
   293                              <1> 
   294 00002233 4889F3              <1>     mov rbx, rsi
   295 00002236 E91AFFFFFF          <1>     jmp .clkExit
   296                              <1> 
   297                              <1> .clkBCDtoHex:
   298                              <1> ;Converts a BCD value to a Hex byte
   299                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   300 0000223B 51                  <1>     push rcx
   301 0000223C 0FB6C0              <1>     movzx eax, al   ;Zero extend
   302 0000223F 89C1                <1>     mov ecx, eax    ;Save al in ecx
   303 00002241 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   304 00002246 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   305 0000224C C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   306                              <1> .cbth0:
   307 0000224F 050A000000          <1>     add eax, 10
   308 00002254 E2F9                <1>     loop .cbth0
   309 00002256 59                  <1>     pop rcx
   310 00002257 C3                  <1>     ret
   311                              <1> 
   312                              <1> .clkHexToBCD:
   313                              <1> ;Converts a Hex byte into two BCD digits
   314                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   315 00002258 51                  <1>     push rcx
   316 00002259 0FB6C0              <1>     movzx eax, al   ;Zero extend
   317 0000225C 31C9                <1>     xor ecx, ecx
   318                              <1> .chtb0:
   319 0000225E 3D0A000000          <1>     cmp eax, 10
   320 00002263 7209                <1>     jb .chtb1
   321 00002265 2D0A000000          <1>     sub eax, 10
   322 0000226A FFC1                <1>     inc ecx
   323 0000226C EBF0                <1>     jmp short .chtb0
   324                              <1> .chtb1:
   325 0000226E C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   326 00002271 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   327 00002273 59                  <1>     pop rcx
   328 00002274 C3                  <1>     ret
   329 00002275 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   330                              <1> ;When counting the number of days, first compute the number of years since
   331                              <1> ; 1980 and your year. 
   332                              <1> ;Then, using the table below, find the number of leap years between 1980
   333                              <1> ; and (YourYear - 1). 
   334                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   335                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   336                              <1> ;Use the months table to get the number of days in a normal month as leap 
   337                              <1> ; years are added using the previous comment.
   338                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   339                              <1> ; a leap year using the table. If it is, add an extra day.
   340                              <1> .clkLeapYears:
   341 00002277 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   341 00002280 24282C30            <1>
   342 00002284 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   342 0000228D 585C60              <1>
   343                              <1> .clkMonths:
   344 00002290 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   344 00002299 1F1E1F              <1>
   345                              <1> ;COM Driver headers and main interrupt strat
   346                              <1> com1Intr:
   347 0000229C C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   348 000022A3 EB19                <1>     jmp short comIntr
   349                              <1> com2Intr:
   350 000022A5 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   351 000022AC EB10                <1>     jmp short comIntr
   352                              <1> com3Intr:
   353 000022AE C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   354 000022B5 EB07                <1>     jmp short comIntr
   355                              <1> com4Intr:
   356 000022B7 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   357                              <1> comIntr:
   358 000022BE 50                  <1>     push rax
   359 000022BF 53                  <1>     push rbx
   360 000022C0 51                  <1>     push rcx
   361 000022C1 52                  <1>     push rdx
   362 000022C2 56                  <1>     push rsi
   363 000022C3 57                  <1>     push rdi
   364 000022C4 488B1DF5FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   365 000022CB B003                <1>     mov al, 03h ;Unknown Command
   366 000022CD 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   367 000022D1 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   368                              <1> 
   369 000022D3 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   370 000022D6 3C04                <1>     cmp al, 4   ;Read Character(s)
   371 000022D8 7462                <1>     jz .comRead
   372 000022DA 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   373 000022DC 0F849B000000        <1>     jz .comNondestructiveRead   
   374 000022E2 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   375 000022E4 0F8484000000        <1>     jz .comReadInputStatus
   376 000022EA 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   377 000022EC 0F84B9000000        <1>     jz .comFlushInputBuffers
   378 000022F2 3C08                <1>     cmp al, 8
   379 000022F4 0F84DB000000        <1>     jz .comWrite
   380 000022FA 3C09                <1>     cmp al, 9
   381 000022FC 0F84D3000000        <1>     jz .comWrite
   382 00002302 3C0A                <1>     cmp al, 0Ah
   383 00002304 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   384 0000230A EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   385                              <1> .comErrorNoCount:
   386 0000230C B002                <1>     mov al, 02h ;Unknown device
   387 0000230E EB19                <1>     jmp short .comWriteErrorCode
   388                              <1> .comReadError:
   389 00002310 BA0B000000          <1>     mov edx, 0Bh
   390                              <1> .comWriteError:
   391 00002315 BA0A000000          <1>     mov edx, 0Ah
   392                              <1> .comError:
   393 0000231A 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   394 0000231D B902000000          <1>     mov ecx, 02h    ;Unknown device
   395 00002322 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   396 00002324 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   397 00002327 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   398                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   399 00002329 B480                <1>     mov ah, 80h ;Set error bit
   400 0000232B 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   401                              <1> .comExit:
   402 0000232F 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   403 00002335 5F                  <1>     pop rdi
   404 00002336 5E                  <1>     pop rsi
   405 00002337 5A                  <1>     pop rdx
   406 00002338 59                  <1>     pop rcx
   407 00002339 5B                  <1>     pop rbx
   408 0000233A 58                  <1>     pop rax
   409 0000233B C3                  <1>     ret
   410                              <1> 
   411                              <1> .comRead:
   412 0000233C B005                <1>     mov al, 05h ;Bad request structure length?
   413 0000233E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   414 00002341 75E6                <1>     jne .comWriteErrorCode
   415                              <1> 
   416 00002343 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   417 00002347 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   418                              <1> .cr1:
   419 00002349 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   420 0000234C 741B                <1>     je .cre2
   421                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   422 0000234E B802000000          <1>     mov eax, 02h    ;Recieve 
   423 00002353 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   424 00002359 6698                <1>     cbw     ;Zero extend to upper byte
   425 0000235B CD34                <1>     int 34h ;Recieve Char
   426 0000235D 72BB                <1>     jc .comError
   427 0000235F 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   428 00002362 74EA                <1>     je .cr11
   429 00002364 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   430 00002365 FFC1                <1>     inc ecx
   431 00002367 EBE0                <1>     jmp short .cr1
   432                              <1> .cre2:
   433 00002369 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   434 0000236C EBC1                <1>     jmp short .comExit
   435                              <1> 
   436                              <1> .comReadInputStatus:
   437 0000236E B005                <1>     mov al, 05h ;Bad request structure length?
   438 00002370 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   439 00002373 75B4                <1>     jne .comWriteErrorCode
   440 00002375 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   441 0000237B EBB2                <1>     jmp short .comExit
   442                              <1> 
   443                              <1> .comNondestructiveRead:
   444                              <1> ;Acts like a "read one character if there is one" function
   445 0000237D B005                <1>     mov al, 05h ;Bad request structure length?
   446 0000237F 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   447 00002382 75A5                <1>     jne .comWriteErrorCode
   448                              <1> .cndr1:
   449 00002384 B802000000          <1>     mov eax, 02h    ;Recieve 
   450 00002389 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   451 0000238F 6698                <1>     cbw     ;Zero extend to upper byte
   452 00002391 CD34                <1>     int 34h ;Recieve Char
   453 00002393 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   454 00002399 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   455 0000239C 7405                <1>     je .cndr2
   456 0000239E 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   457 000023A1 EB8C                <1>     jmp short .comExit
   458                              <1> .cndr2:
   459 000023A3 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   460 000023A9 EB84                <1>     jmp short .comExit
   461                              <1> 
   462                              <1> .comFlushInputBuffers:
   463 000023AB B005                <1>     mov al, 05h ;Bad request structure length?
   464 000023AD 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   465 000023B0 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   466                              <1> .cfib0:
   467 000023B6 8A1584000000        <1>     mov dl, byte [.comDevice]
   468 000023BC 6698                <1>     cbw
   469 000023BE B802000000          <1>     mov eax, 02h    ;Recieve
   470 000023C3 CD34                <1>     int 34h
   471 000023C5 0F8241FFFFFF        <1>     jc .comErrorNoCount
   472 000023CB 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   473 000023CE 75E6                <1>     jne .cfib0
   474 000023D0 E95AFFFFFF          <1>     jmp .comExit
   475                              <1> 
   476                              <1> .comWrite:
   477 000023D5 B005                <1>     mov al, 05h ;Bad request structure length?
   478 000023D7 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   479 000023DA 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   480                              <1> 
   481 000023E0 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   482 000023E4 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   483                              <1> .cw1: 
   484 000023E6 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   485 000023E9 7417                <1>     je .cw2
   486 000023EB AC                  <1>     lodsb   ;Get char into al, and inc rsi
   487 000023EC B401                <1>     mov ah, 01h ;Move function number into ah
   488 000023EE 8A154C000000        <1>     mov dl, byte [.comDevice]
   489 000023F4 6698                <1>     cbw     ;Zero extend to upper byte
   490 000023F6 CD34                <1>     int 34h ;Transmit char
   491 000023F8 0F821CFFFFFF        <1>     jc .comError
   492 000023FE FFC1                <1>     inc ecx
   493 00002400 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   494                              <1> .cw2:
   495 00002402 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   496 00002405 E925FFFFFF          <1>     jmp .comExit
   497                              <1> 
   498                              <1> .comOutputStatus:
   499                              <1> ;Read MODEM status
   500 0000240A B005                <1>     mov al, 05h ;Bad request structure length?
   501 0000240C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   502 0000240F 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   503                              <1> 
   504 00002415 8A1525000000        <1>     mov dl, byte [.comDevice]
   505 0000241B 6698                <1>     cbw     ;Zero extend to upper byte
   506 0000241D B403                <1>     mov ah, 03h     ;Get status
   507 0000241F CD34                <1>     int 34h
   508 00002421 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   509 00002427 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   510 0000242C C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   511 0000242F F7D0                <1>     not eax      ;Bitwise inversion
   512 00002431 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   513 00002436 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   514 0000243B E9EFFEFFFF          <1>     jmp .comExit
   515 00002440 00                  <1> .comDevice   db 0
    28                                  %include "./Source/Drivers/diskDrv.asm"
    29                              <1> msdDriver:
    30 00002441 50                  <1>     push rax
    31 00002442 53                  <1>     push rbx
    32 00002443 51                  <1>     push rcx
    33 00002444 52                  <1>     push rdx
    34 00002445 56                  <1>     push rsi
    35 00002446 57                  <1>     push rdi
    36 00002447 55                  <1>     push rbp
    37 00002448 4150                <1>     push r8
    38 0000244A 488B1D6FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    39 00002451 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    40 00002455 B003                <1>     mov al, drvBadCmd
    41 00002457 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    42 0000245D B001                <1>     mov al, drvBadUnit 
    43 0000245F 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    44 00002463 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    45 00002469 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    46 00002470 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    47 00002474 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    48 00002477 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    49 0000247B 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    50 0000247F D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    51 00002481 488D0D9A000000      <1>     lea rcx, .msdTable
    52 00002488 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    53 0000248C 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    54 0000248E 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    55 00002490 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    56 00002493 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    57                              <1> .msdDriverExit:
    58 00002495 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    59 0000249B 4158                <1>     pop r8
    60 0000249D 5D                  <1>     pop rbp
    61 0000249E 5F                  <1>     pop rdi
    62 0000249F 5E                  <1>     pop rsi
    63 000024A0 5A                  <1>     pop rdx
    64 000024A1 59                  <1>     pop rcx
    65 000024A2 5B                  <1>     pop rbx
    66 000024A3 58                  <1>     pop rax
    67 000024A4 C3                  <1>     ret
    68                              <1> 
    69                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    70 000024A5 4889FB              <1>     mov rbx, rdi
    71 000024A8 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    72 000024AB 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    73 000024AD 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    74                              <1> ;Now fall through to general error
    75                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    76 000024B0 B401                <1>     mov ah, 01h
    77 000024B2 CD33                <1>     int 33h ;Read status of last operation
    78 000024B4 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    79 000024B7 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    80 000024B9 7460                <1>     je .msdWriteErrorCode 
    81 000024BB B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    82 000024BD 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    83 000024C0 7459                <1>     je .msdWriteErrorCode 
    84 000024C2 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    85 000024C5 7454                <1>     je .msdWriteErrorCode
    86                              <1> ;Device Not Ready
    87 000024C7 B002                <1>     mov al, 02h  ;Device not ready code
    88 000024C9 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    89 000024CC 744D                <1>     je .msdWriteErrorCode
    90 000024CE 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    91 000024D2 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    92                              <1> ;Write Protected
    93 000024D6 30C0                <1>     xor al, al
    94 000024D8 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
    95 000024DD 743C                <1>     je .msdWriteErrorCode
    96                              <1> ;CRC Error
    97 000024DF B004                <1>     mov al, 04h     ;CRC error code
    98 000024E1 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
    99 000024E6 7433                <1>     je .msdWriteErrorCode
   100 000024E8 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   101 000024ED 742C                <1>     je .msdWriteErrorCode
   102 000024EF 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   103 000024F4 7425                <1>     je .msdWriteErrorCode
   104                              <1> ;Seek Error
   105 000024F6 B006                <1>     mov al, 06h     ;Seek error code
   106 000024F8 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   107 000024FB 741E                <1>     je .msdWriteErrorCode
   108                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   109                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   110 000024FD B007                <1>     mov al, 07h
   111 000024FF 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   112 00002502 7417                <1>     je .msdWriteErrorCode
   113                              <1> ;Sector Not Found
   114 00002504 B008                <1>     mov al, 08h     ;Sector not found code
   115 00002506 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   116 00002509 7410                <1>     je .msdWriteErrorCode
   117                              <1> ;Write faults
   118 0000250B B00A                <1>     mov al, 0Ah     ;Write fault
   119 0000250D 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   120 00002510 7409                <1>     je .msdWriteErrorCode
   121                              <1> ;Read faults
   122 00002512 B00B                <1>     mov al, 0Bh     ;Read fault
   123 00002514 80F911              <1>     cmp cl, 11h     ;Read error
   124 00002517 7402                <1>     je .msdWriteErrorCode
   125                              <1> ;General Errors
   126 00002519 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   127                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   128 0000251B B480                <1>     mov ah, 80h ;Set error bit
   129 0000251D 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   130 00002521 C3                  <1>     ret ;Return to set done bit
   131                              <1> .msdTable:
   132 00002522 0000                <1>     dw 0                            ;Function 0
   133 00002524 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   134 00002526 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   135 00002528 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   136 0000252A 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   137 0000252C 0000                <1>     dw 0                            ;Function 5
   138 0000252E 0000                <1>     dw 0                            ;Function 6
   139 00002530 0000                <1>     dw 0                            ;Function 7
   140 00002532 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   141 00002534 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   142 00002536 0000                <1>     dw 0                            ;Function 10
   143 00002538 0000                <1>     dw 0                            ;Function 11
   144 0000253A C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   145 0000253C D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   146 0000253E ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   147 00002540 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   148 00002542 0000                <1>     dw 0                            ;Function 16
   149 00002544 0000                <1>     dw 0                            ;Function 17
   150 00002546 0000                <1>     dw 0                            ;Function 18
   151 00002548 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   152 0000254A 0000                <1>     dw 0                            ;Function 20
   153 0000254C 0000                <1>     dw 0                            ;Function 21
   154 0000254E 0000                <1>     dw 0                            ;Function 22
   155 00002550 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   156 00002552 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   157                              <1> 
   158                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   159                              <1> .msdMedChk:          ;Function 1
   160 00002554 B005                <1>     mov al, 05h ;Bad request structure length
   161 00002556 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   162 00002559 75C0                <1>     jne .msdWriteErrorCode
   163                              <1> 
   164 0000255B 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   165 00002560 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   166 00002567 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   167 0000256A F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   168 0000256D 753F                <1>     jnz .mmcNoChange
   169                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   170 0000256F B416                <1>     mov ah, 16h 
   171 00002571 CD33                <1>     int 33h
   172 00002573 0F8237FFFFFF        <1>     jc .msdGenDiskError
   173 00002579 80FC80              <1>     cmp ah, 80h
   174 0000257C 740E                <1>     je .mmcNoChangeLine
   175 0000257E 80FC86              <1>     cmp ah, 86h
   176 00002581 7409                <1>     je .mmcNoChangeLine
   177 00002583 84E4                <1>     test ah, ah ;No change?
   178 00002585 7427                <1>     jz .mmcNoChange
   179 00002587 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   180 0000258A 750D                <1>     jnz .mmcChange
   181                              <1> ;If nothing, fall through and test manually, should never happen though
   182                              <1> .mmcNoChangeLine:
   183                              <1> ;Now we test Media Descriptor
   184 0000258C 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   185 00002591 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   186 00002594 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   187 00002597 7410                <1>     je .mmcUnsure
   188                              <1> .mmcChange:
   189 00002599 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   190 0000259D 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   191 000025A4 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   192                              <1>     ;Check here if there were any open handles on the device when it was changed
   193 000025A8 C3                  <1>     ret
   194                              <1> .mmcUnsure:
   195 000025A9 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   196 000025AD C3                  <1>     ret
   197                              <1> .mmcNoChange:
   198 000025AE C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   199 000025B2 C3                  <1>     ret
   200                              <1> 
   201                              <1> 
   202                              <1> .msdBuildBPB:        ;Function 2
   203 000025B3 B005                <1>     mov al, 05h ;Bad request structure length
   204 000025B5 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   205 000025B8 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   206                              <1> 
   207 000025BE 4889DE              <1>     mov rsi, rbx
   208 000025C1 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   209 000025C6 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   210 000025CD 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   211 000025D0 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   212 000025D4 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   213 000025D6 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   214 000025D9 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   215 000025DE CD33                <1>     int 33h
   216 000025E0 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   217                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   218 000025E6 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   219 000025EA 7418                <1>     je .mbbpb0
   220 000025EC 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   221 000025F0 7412                <1>     je .mbbpb0
   222 000025F2 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   223 000025F6 740C                <1>     je .mbbpb0
   224 000025F8 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   225 000025FC B007                <1>     mov al, 07h ;Unknown media error code
   226 000025FE 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   227                              <1> .mbbpb0:
   228 00002604 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   229 00002607 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   230 0000260C 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   231 00002613 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   232 00002617 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   233 0000261A 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   234 0000261E B90F000000          <1>     mov ecx, bpbEx_size/8
   235 00002623 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   236 00002626 C3                  <1>     ret
   237                              <1> .msdIOCTLRead:       ;Function 3, returns done
   238 00002627 B005                <1>     mov al, drvBadDrvReq
   239 00002629 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   240 0000262C 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   241 00002632 C3                  <1>     ret
   242                              <1> .msdRead:            ;Function 4
   243                              <1> ;Will read one sector at a time.
   244 00002633 B005                <1>     mov al, 05h ;Bad request structure length
   245 00002635 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   246 00002638 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   247                              <1> 
   248 0000263E 4889DF              <1>     mov rdi, rbx
   249 00002641 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   250                              <1> .msdr0:
   251 00002643 B682                <1>     mov dh, 82h ;LBA Read Sectors
   252 00002645 E841010000          <1>     call .msdBlkIOCommon
   253 0000264A 0F8255FEFFFF        <1>     jc .msdIOError
   254 00002650 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   255 00002658 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   256 00002660 FFC6                <1>     inc esi
   257 00002662 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   258 00002665 75DC                <1>     jne .msdr0
   259 00002667 4889FB              <1>     mov rbx, rdi
   260 0000266A C3                  <1>     ret
   261                              <1> .msdWrite:           ;Function 8
   262                              <1> ;Will write one sector at a time.
   263 0000266B B005                <1>     mov al, 05h ;Bad request structure length
   264 0000266D 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   265 00002670 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   266                              <1> 
   267 00002676 4889DF              <1>     mov rdi, rbx
   268 00002679 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   269                              <1> .msdw0:
   270 0000267B B683                <1>     mov dh, 83h ;LBA Write Sectors
   271 0000267D E809010000          <1>     call .msdBlkIOCommon
   272 00002682 0F821DFEFFFF        <1>     jc .msdIOError
   273 00002688 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   274 00002690 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   275 00002698 FFC6                <1>     inc esi
   276 0000269A 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   277 0000269D 75DC                <1>     jne .msdw0
   278 0000269F 4889FB              <1>     mov rbx, rdi
   279 000026A2 C3                  <1>     ret
   280                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   281                              <1> ;Will write one sector at a time and then verify it.
   282 000026A3 B005                <1>     mov al, 05h ;Bad request structure length
   283 000026A5 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   284 000026A8 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   285                              <1> 
   286 000026AE 4889DF              <1>     mov rdi, rbx
   287 000026B1 31F6                <1>     xor esi, esi  ;Set counter to zero
   288                              <1> .msdwv0:
   289 000026B3 B683                <1>     mov dh, 83h ;LBA Write Sectors
   290 000026B5 E8D1000000          <1>     call .msdBlkIOCommon
   291 000026BA 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   292 000026C0 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   293 000026C2 E8C4000000          <1>     call .msdBlkIOCommon
   294 000026C7 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   295 000026CD 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   296 000026D5 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   297 000026DD FFC6                <1>     inc esi
   298 000026DF 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   299 000026E2 75CF                <1>     jne .msdwv0
   300 000026E4 4889FB              <1>     mov rbx, rdi
   301 000026E7 C3                  <1>     ret
   302                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   303 000026E8 B005                <1>     mov al, drvBadDrvReq
   304 000026EA 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   305 000026ED 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   306                              <1> 
   307 000026F3 C3                  <1>     ret
   308                              <1> .msdDevOpen:         ;Function 13
   309 000026F4 B005                <1>     mov al, drvBadDrvReq
   310 000026F6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   311 000026F9 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   312                              <1> 
   313 000026FF 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   314 00002704 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   315 0000270B FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   316 0000270E C3                  <1>     ret
   317                              <1> .msdDevClose:        ;Function 14
   318 0000270F B005                <1>     mov al, drvBadDrvReq
   319 00002711 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   320 00002714 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   321                              <1> 
   322 0000271A 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   323 0000271F 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   324 00002726 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   325 00002729 C3                  <1>     ret
   326                              <1> .msdRemovableMedia:  ;Function 15
   327 0000272A B005                <1>     mov al, drvBadDrvReq
   328 0000272C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   329 0000272F 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   330                              <1> 
   331 00002735 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   332 0000273A 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   333 00002741 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   334 00002744 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   335 00002749 31D2                <1>     xor edx, edx    ;Busy bit clear
   336 0000274B A880                <1>     test al, 80h
   337 0000274D 0F44CA              <1>     cmovz ecx, edx
   338 00002750 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   339 00002754 C3                  <1>     ret
   340                              <1> .msdGenericIOCTL:    ;Function 19
   341 00002755 B005                <1>     mov al, drvBadDrvReq
   342 00002757 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   343 0000275A 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   344                              <1> 
   345 00002760 C3                  <1>     ret
   346                              <1> .msdGetLogicalDev:   ;Function 23
   347 00002761 B005                <1>     mov al, drvBadDrvReq
   348 00002763 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   349 00002766 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   350                              <1> 
   351 0000276C 8A0541000000        <1>     mov al, byte [.msdCurDev]
   352 00002772 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   353 00002775 C3                  <1>     ret
   354                              <1> .msdSetLogicalDev:   ;Function 24
   355 00002776 B005                <1>     mov al, drvBadDrvReq
   356 00002778 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   357 0000277B 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   358                              <1> 
   359 00002781 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   360 00002784 880529000000        <1>     mov byte [.msdCurDev], al
   361 0000278A C3                  <1>     ret
   362                              <1> 
   363                              <1> .msdBlkIOCommon:  ;Does block IO
   364                              <1> ;Called with rdi containing old rbx value and ah with function number
   365                              <1> ;rbp points to bpb
   366                              <1> ;Error handled by caller
   367                              <1> ;Sector count handled by caller
   368                              <1> ;Called with dh = BIOS function number
   369 0000278B 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   370 00002790 8A90[B4270000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   371 00002796 31C9                <1>     xor ecx, ecx
   372 00002798 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   373 0000279B 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   374 0000279F 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   375 000027A3 88F4                <1>     mov ah, dh
   376 000027A5 B001                <1>     mov al, 01h ;Do one sector at a time 
   377 000027A7 CD33                <1>     int 33h
   378 000027A9 C3                  <1>     ret
   379                              <1> 
   380 000027AA 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   381                              <1> ;LASTDRIVE default is 5
   382                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   383                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   384 000027B3 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   385                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   386 000027B4 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   387 000027B9 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   388 000027BE 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   388 000027C7 000000000000000000- <1>
   388 000027D0 000000000000000000- <1>
   388 000027D9 000000000000000000- <1>
   388 000027E2 00000000            <1>
   389 000027E6 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   389 000027EF 000000000000000000- <1>
   389 000027F8 000000000000000000- <1>
   389 00002801 000000000000000000- <1>
   389 0000280A 000000000000000000- <1>
   389 00002813 000000000000000000- <1>
   389 0000281C 000000000000000000- <1>
   389 00002825 000000000000000000- <1>
   389 0000282E 000000000000000000- <1>
   389 00002837 000000000000000000- <1>
   389 00002840 000000000000000000- <1>
   389 00002849 000000000000000000- <1>
   389 00002852 000000000000000000- <1>
   389 0000285B 000000000000000000- <1>
   389 00002864 000000000000000000- <1>
   389 0000286D 000000000000000000- <1>
   389 00002876 000000000000000000- <1>
   389 0000287F 000000000000000000- <1>
   389 00002888 000000000000000000- <1>
   389 00002891 000000000000000000- <1>
   389 0000289A 000000000000000000- <1>
   389 000028A3 000000000000000000- <1>
   389 000028AC 000000000000000000- <1>
   389 000028B5 000000000000000000- <1>
   389 000028BE 000000000000000000- <1>
   389 000028C7 000000000000000000- <1>
   389 000028D0 000000000000000000- <1>
   389 000028D9 000000000000000000- <1>
   389 000028E2 000000000000000000- <1>
   389 000028EB 000000000000000000- <1>
   389 000028F4 000000000000000000- <1>
   389 000028FD 000000000000000000- <1>
   389 00002906 000000000000000000- <1>
   389 0000290F 000000000000000000- <1>
   389 00002918 000000000000000000- <1>
   389 00002921 000000000000000000- <1>
   389 0000292A 000000000000000000- <1>
   389 00002933 000000000000000000- <1>
   389 0000293C 000000000000000000- <1>
   389 00002945 000000000000000000- <1>
   389 0000294E 000000000000000000- <1>
   389 00002957 000000000000000000- <1>
   389 00002960 000000000000000000- <1>
   389 00002969 000000000000000000- <1>
   389 00002972 000000000000000000- <1>
   389 0000297B 000000000000000000- <1>
   389 00002984 000000000000000000- <1>
   389 0000298D 000000000000000000- <1>
   389 00002996 000000000000000000- <1>
   389 0000299F 000000000000000000- <1>
   389 000029A8 000000000000000000- <1>
   389 000029B1 000000000000000000- <1>
   389 000029BA 000000000000000000- <1>
   389 000029C3 000000000000000000- <1>
   389 000029CC 000000000000000000- <1>
   389 000029D5 000000000000000000- <1>
   389 000029DE 000000000000000000- <1>
   389 000029E7 000000000000000000- <1>
   389 000029F0 000000000000000000- <1>
   389 000029F9 000000000000000000- <1>
   389 00002A02 000000000000000000- <1>
   389 00002A0B 000000000000000000- <1>
   389 00002A14 000000000000000000- <1>
   389 00002A1D 000000000000000000- <1>
   389 00002A26 000000000000000000- <1>
   389 00002A2F 000000000000000000- <1>
   389 00002A38 000000000000        <1>
   390                              <1> 
   391                              <1> endptr equ $
    29                                  Segment dynamicDataArea nobits valign=1 vfollows=resSeg
    30                                  %include "./Source/BSS/dosDynaDataArea.asm"
    31                              <1> ;Create SFT header and corresponding array of five default sft entries
    32 00000000 <res Ah>            <1> firstSftHeader  resb sfth_size
    33 0000000A <res 3Dh>           <1> firstSft        resb sft_size
    34 00000047 <res 3Dh>           <1> secondSft       resb sft_size
    35 00000084 <res 3Dh>           <1> thirdSft        resb sft_size
    36 000000C1 <res 3Dh>           <1> fourthSft       resb sft_size
    37 000000FE <res 3Dh>           <1> fifthSft        resb sft_size
    38                              <1> 
    39                              <1> ;Create DPB chain of first 5 available DPB slots
    40                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    41 0000013B <res 34h>           <1> firstDPB        resb dpb_size
    42 0000016F <res 34h>           <1> secondDPB       resb dpb_size
    43                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    44                              <1> ;Always jettison this space
    45 000001A3 <res 34h>           <1> thirdDPB        resb dpb_size
    46 000001D7 <res 34h>           <1> fourthDPB       resb dpb_size
    47 0000020B <res 34h>           <1> fifthDPB        resb dpb_size 
    48                              <1> 
    49                              <1> ;Create a one drive CDS to keep track of drive A's current dir
    50                              <1> ;Replace once CONFGI.SYS has been read
    51 0000023F <res 5Bh>           <1> initCDS         resb cds_size 
    52                              <1> 
    53                              <1> 
    54 0000029A <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    55 000002BA <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    56                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    57                              <1> dynamicDataAreaLength equ $
