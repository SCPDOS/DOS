     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;-------------------------------------------------------------------------------
    15                              <1> ;These macros are live and must not be touched
    16                              <1> ;-------------------------------------------------------------------------------
    17                              <1> %macro return 0
    18                              <1> %%_ret:
    19                              <1>     ret
    20                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> %macro cret 1
    24                              <1> %%_base:
    25                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    26                              <1>     %ifdef retOff
    27                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <1>     %ifdef currSegVBase
    29                              <1>     j%+1 short (retOff+currSegVBase)
    30                              <1>     %else
    31                              <1>     j%+1 short retOff
    32                              <1>     %endif  ;End ifdef currSegVBase
    33                              <1>     %else 
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End the distance measurement if
    38                              <1>     %else   
    39                              <1>     j%-1 short %%a
    40                              <1>     return
    41                              <1> %%a:
    42                              <1>     %endif  ;End ifdef retoff
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro retz 0
    46                              <1> cret z
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro retnz 0
    50                              <1> cret nz
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro rete 0
    54                              <1> cret e
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro retne 0
    58                              <1> cret ne
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro retc 0
    62                              <1> cret c
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro retnc 0
    66                              <1> cret nc
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro retb 0
    70                              <1> cret b
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro retnb 0
    74                              <1> cret nb
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro breakpoint 0
    78                              <1> xchg bx, bx
    79                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> 
    66                              <1> ;Driver Attribute Word bit meanings
    67                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    68                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    69                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    70                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    71                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    72                              <1>     devDrvExtFun   equ 40h ;If set, functions 13, 17, 18 supported (must be)
    73                              <1>     devDrvIOCTL2   equ 80h ;If set, IOCTL function 19 supported
    74                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    75                              <1>     devDrvIOCTL    equ 4000h ;If set, Generic IOCTL supported
    76                              <1>     devDrvChar     equ 8000h ;If set, Char device
    77                              <1> ;Bit 0 1=console input
    78                              <1> ;    1 1=console output (character devices)
    79                              <1> ;    2 1=NUL device
    80                              <1> ;    3 1=CLOCK device
    81                              <1> ;    4 1=INT 49 output (CON)
    82                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    83                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    84                              <1> ;   11 1=open/close/removable media supported (3.0+)
    85                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    86                              <1> ;      1=media descriptor in FAT required (block devices)
    87                              <1> ;   14 1=IOCTL supported
    88                              <1> ;   15 0=block device
    89                              <1> ;      1=character device
    90                              <1> 
    91                              <1> ;Driver structures
    92                              <1> 
    93                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    94                              <1> 
    95                              <1>     .hdrlen resb 1  ;Length of the request header
    96                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    97                              <1>     .cmdcde resb 1  ;Command code
    98                              <1>     .status resw 1  ;Status word
    99                              <1>     .devptr resq 1  ;Device queue pointer field
   100                              <1> 
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> struc drvReqHdr
   104                              <1>     drvReqHdrM
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   105                              <1> endstruc
   106                              <1> 
   107                              <1> struc initReqPkt  ;Init Request Packet
   108                              <1> 
   109                              <1>     drvReqHdrM   ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   110 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   111 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   112 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   113 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   114                              <1> 
   115                              <1> endstruc
   116                              <1> 
   117                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   118                              <1> 
   119                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   120 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   121 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   122 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   129 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   130 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   131 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   132                              <1> 
   133                              <1> endstruc
   134                              <1> 
   135                              <1> struc ioReqPkt   ;IO Request Packet
   136                              <1> 
   137                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   138 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   139 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   140 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   141 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   142 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   143                              <1> 
   144                              <1> endstruc
   145                              <1> 
   146                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   147                              <1>     
   148                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   149 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc statusReqPkt   ;Status Request Packet
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   156                              <1> 
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc openReqPkt ;Open Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc closeReqPkt ;Close Device Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   180                              <1>      
   181                              <1> endstruc
   182                              <1> 
   183                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   184                              <1> 
   185                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   186 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   187 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   188 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   189 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   190 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   201                              <1>     
   202                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   203                              <1> 
   204                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   138                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   139                              <1>     ;If any of the three bits are set, then ALL three bits are set
   140                              <1>     ; in addition to whatever the user passed to search for.
   141                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   142                              <1>     dirIncFiles     equ dirHidden | dirSystem
   143                              <1> 
   144                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   145                              <1> 
   146 00000000 ??????              <1>     .jmpBoot                resb 3 
   147 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   148 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   149 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   150 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   151 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   152 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   153 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   154 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   155 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   156 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   157 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   158 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   159 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   160 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   161 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   162 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   163 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   164 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   165                              <1> 
   166                              <1> endstruc
   167                              <1> 
   168                              <1> struc FSInfo
   169                              <1> 
   170 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   171 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   172 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   173 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   174 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   175 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   176 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   177                              <1> 
   178                              <1> endstruc
     8                                  %include "./Source/Include/dosStruc.inc"
     9                              <1> 
    10                              <1> ;-------------------------------------------------------;
    11                              <1> ; This include file contains miscellaneous internal     ;
    12                              <1> ; SCP/DOS structures.                                   ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> 
    15                              <1> ;------------------------------------------------------------------------;
    16                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    17                              <1> ; its file system structure. This is used to locate files and structures
    18                              <1> ; on the device itself and to translate file requests to cluster chains
    19                              <1> ; to LBAs to pass to the disk driver..
    20                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    21                              <1> ; drivers Initialise routine has been called.
    22                              <1> ;------------------------------------------------------------------------;
    23                              <1> struc dpb        ;Drive Parameter Block
    24                              <1> 
    25 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    26 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    27 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    28 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    29 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    30 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    31 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    32 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    33 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    34 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    35 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    36 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    37                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    38 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    39 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    40 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    41 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    42 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    43 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    44                              <1> 
    45                              <1> endstruc
    46                              <1> 
    47                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    48                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    49                              <1> ;------------------------------------------------------------------------;
    50                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    51                              <1> ; All disk pathing requests go via the CDS for that drive.
    52                              <1> ; The default drive is the last accessed drive, this number is stored
    53                              <1> ; in the DOS data area.
    54                              <1> ; The CDS is stored as an array with the offset into the array being 
    55                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    56                              <1> ;
    57                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> struc cds       ;Current Directory structure
    60 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    61 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    62 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    63 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    64 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    65 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    66                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    67                              <1> ; another, we save the number of chars to skip to that deep level).
    68                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    69                              <1> ; Only affects for SUBST drives, not JOIN
    70                              <1> ; Flags: Bit 15 set = Network drive
    71                              <1> ;        Bit 14 set = Physical drive
    72                              <1> ;        Bit 13 set = JOIN'ed drive
    73                              <1> ;        Bit 12 set = SUBST'ed drive
    74                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    75                              <1> endstruc
    76                              <1> ;CDS equates
    77                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    78                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    79                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    80                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    81                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    82                              <1> ;------------------------------------------------------------------------;
    83                              <1> ; The SFT is a way to allow applications to open file handles to files 
    84                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    85                              <1> ; under the first header, and then a second header will be linked to the 
    86                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    87                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    88                              <1> ; using the FCBS= command. Default FCBS=5.
    89                              <1> ;
    90                              <1> ; A file handle describes the file, and the location within the file that
    91                              <1> ; we are reading. The file handle can be manipulated without the file
    92                              <1> ; being in memory, thus allowing the user to access data without needing 
    93                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    94                              <1> ; accessing devices, by treating them as files with their drivers 
    95                              <1> ; responding and translating the manipulations of the file handle itself.
    96                              <1> ; Neither the driver nor the application should see or use the SFT for
    97                              <1> ; the handle, as it is subject to change (and will change when file 
    98                              <1> ; sharing provisions are included). The DOS will make requests to the 
    99                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   100                              <1> ; track of the information in the SFT entry for that handle. 
   101                              <1> ;
   102                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   103                              <1> ; can point to the same file. It all depends on what the applications 
   104                              <1> ; want to do with the File.
   105                              <1> ;
   106                              <1> ; !!!!IMPORTANT!!!!
   107                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   108                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   109                              <1> ;
   110                              <1> ;Each SFT may look like this:
   111                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   112                              <1> ;            |                |
   113                              <1> ;       wNumFiles*sft    wNumFiles*sft
   114                              <1> ;
   115                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   116                              <1> ; System FCBs.
   117                              <1> ;
   118                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   119                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   120                              <1> ;
   121                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   122                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   123                              <1> ;------------------------------------------------------------------------;
   124                              <1> struc sfth   ;System file table header
   125                              <1> ; This is the SFT header.
   126                              <1> ; This structure comes before the start of the first file in the array/table.
   127 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   128 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc sft
   132                              <1> ;This is the file struc itself
   133 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   134 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   135 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   136 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   137 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   138 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   139 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   140 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   141 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   142 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   143 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   144 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   145 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   146 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   147 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   148 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   149 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   150 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   151 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   152                              <1> ;                           0 means no record
   153                              <1> endstruc
   154                              <1> ;Open Mode equates
   155                              <1> ;Access modes   Bits[2:0]
   156                              <1> ReadAccess      equ 0h
   157                              <1> WriteAccess     equ 1h
   158                              <1> RWAccess        equ 2h
   159                              <1> ;Bit 3 reserved 0
   160                              <1> ;Sharing modes  Bits[6:4]
   161                              <1> CompatShare     equ 0h
   162                              <1> denyRWShare     equ 10h
   163                              <1> denyWriteShare  equ 20h
   164                              <1> denyReadShare   equ 30h
   165                              <1> denyNoneShare   equ 40h
   166                              <1> netFCBShare     equ 70h
   167                              <1> ;Bit 7 reserved 0
   168                              <1> ;Bits 8-12 reserved 0
   169                              <1> 
   170                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   171                              <1> ;Buffering on writes
   172                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   173                              <1> ;FCB opened file?
   174                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   175                              <1> ;Attribute Byte
   176                              <1> readOnlyFile    equ 1h
   177                              <1> hiddenFile      equ 2h
   178                              <1> systemFile      equ 4h
   179                              <1> volumeLabel     equ 8h
   180                              <1> directoryFile   equ 10h ;Directory entry
   181                              <1> archiveFile     equ 20h
   182                              <1> ;Device Info equates
   183                              <1> ;For a block device, bits [5:0] contain the drive number
   184                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   185                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   186                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   187                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   188                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   189                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   190                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   191                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   192                              <1> devCharDev      equ 80h ;If set, it is a char device!
   193                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   194                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   195                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   196                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   197                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   198                              <1> 
   199                              <1> ;openAddress   equ DOSSEG:367Ah   
   200                              <1> ;createAddress equ DOSSEG:35E3h   
   201                              <1> ;------------------------------------------------------------------------;
   202                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   203                              <1> ; to an internal buffer, and then copying it to the specified location
   204                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   205                              <1> ; another request for the same sector from the same device is made, so 
   206                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   207                              <1> ; size, selected according to the largest detected sector size during 
   208                              <1> ; the initial loadup.
   209                              <1> ;
   210                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   211                              <1> ;
   212                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   213                              <1> ;------------------------------------------------------------------------;
   214                              <1> 
   215                              <1> struc bufferHdr
   216 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   217 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   218 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   219 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   220 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   221 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   222 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   223 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   224 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   225                              <1>     .dataarea:             ;Points to the start of the data area
   226                              <1> endstruc
   227                              <1> ;Buffer Flag equates
   228                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   229                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   230                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   231                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   232                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   233                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   234                              <1> ;Note! A buffer is marked as referenced only when the application 
   235                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   236                              <1> ;------------------------------------------------------------------------;
   237                              <1> ; Memory control block for each memory arena
   238                              <1> ;------------------------------------------------------------------------;
   239                              <1> struc mcb
   240 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   241 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   242 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   243 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   244                              <1>     .program:
   245                              <1> endstruc
   246                              <1> ;MCB equates
   247                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   248                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   249                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   250                              <1> mcbMarkCtn      equ "M"
   251                              <1> mcbMarkEnd      equ "Z"
   252                              <1> 
   253                              <1> memFirstFit     equ 0   ;First free block goes to application
   254                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   255                              <1> memLastFit      equ 2   ;Last free block goes to application
   256                              <1> 
   257                              <1> ;Owner = Para aligned address => Owning application PSP
   258                              <1> ;...To consider...
   259                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   260                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   261                              <1> ;------------------------------------------------------------------------;
   262                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   263                              <1> ; following order, thus allowing for return values to be placed in the 
   264                              <1> ; registers by accessing the caller register stack frame.
   265                              <1> ;------------------------------------------------------------------------;
   266                              <1> struc callerFrame
   267 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   268 00000008 ????????????????    <1>     .rbx    resq 1    
   269 00000010 ????????????????    <1>     .rcx    resq 1
   270 00000018 ????????????????    <1>     .rdx    resq 1
   271 00000020 ????????????????    <1>     .rsi    resq 1
   272 00000028 ????????????????    <1>     .rdi    resq 1
   273 00000030 ????????????????    <1>     .rbp    resq 1
   274 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   275 00000040 ????????????????    <1>     .r9     resq 1
   276                              <1> ;Pushed by Processor when invoked via Interrupt
   277 00000048 ????????????????    <1>     .rip    resq 1
   278 00000050 ????????????????    <1>     .cs     resq 1
   279 00000058 ????????????????    <1>     .flags  resq 1
   280                              <1> endstruc
   281                              <1> 
   282                              <1> struc dpl
   283                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   284                              <1> ; server calls
   285 00000000 ????????????????    <1>     .rax    resq 1
   286 00000008 ????????????????    <1>     .rbx    resq 1
   287 00000010 ????????????????    <1>     .rcx    resq 1
   288 00000018 ????????????????    <1>     .rdx    resq 1
   289 00000020 ????????????????    <1>     .rsi    resq 1
   290 00000028 ????????????????    <1>     .rdi    resq 1
   291 00000030 ????????????????    <1>     .r8     resq 1
   292 00000038 ????????????????    <1>     .r9     resq 1
   293 00000040 ????????????????    <1>     .align  resq 1
   294 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   295 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   296                              <1> endstruc
   297                              <1> 
   298                              <1> struc fcb
   299                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   300 00000000 ??                  <1>     .driveNum   resb 1
   301 00000001 ????????????????    <1>     .filename   resb 8
   302 00000009 ??????              <1>     .fileext    resb 3
   303 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   304                              <1> ;One block consists of 128 records, of size denoted in the below
   305 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   306 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   307 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   308 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   309 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   310 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   311 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   312 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   313 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   314                              <1>     ;If record size > 64, high byte is ignored.
   315                              <1>     ;Used for random read and write operations to find the right record
   316                              <1> endstruc
   317                              <1> 
   318                              <1> struc filename
   319                              <1> ;8.3 File name struct
   320 00000000 ????????????????    <1>     .fName  resb 8
   321 00000008 ??????              <1>     .fExt   resb 3
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   325 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   326 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   327 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   328 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   329 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   330 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   331 00000016 ????                <1>     .fileTime   resw 1  ;File time
   332 00000018 ????                <1>     .fileDate   resw 1  ;File date
   333 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   334 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   335                              <1> endstruc
   336                              <1> 
   337                              <1> struc psp
   338 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   339 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   340 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   341 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   342 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   343 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   344 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   345 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   346 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   347 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   348 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   349 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   350 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   351 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   352                              <1> ;Extra handle arrays are grouped into a linked list
   353                              <1> ;The below are in the same place as in DOS
   354 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   355 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   356                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   357 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   358 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   359                              <1> endstruc
   360                              <1> 
   361                              <1> struc clkStruc
   362 00000000 ????                <1>     .dateWord   resw 1
   363 00000002 ??                  <1>     .minutes    resb 1
   364 00000003 ??                  <1>     .hours      resb 1
   365 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   366 00000005 ??                  <1>     .seconds    resb 1
   367                              <1> endstruc
   368                              <1> 
   369                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   370                              <1> ;for a space of 64Gb
   371                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   372                              <1> 
   373                              <1> ;Critical Error AH bitfield equates
   374                              <1> critRead    equ 0h
   375                              <1> critWrite   equ 1h
   376                              <1> critDOS     equ 0h
   377                              <1> critFAT     equ 2h
   378                              <1> critDir     equ 4h
   379                              <1> critData    equ 6h
   380                              <1> critFailOK  equ 8h
   381                              <1> critRetryOK equ 10h
   382                              <1> critIgnorOK equ 20h
   383                              <1> critCharDev equ 80h
   384                              <1> 
   385                              <1> critIgnore  equ 0
   386                              <1> critRetry   equ 1
   387                              <1> critAbort   equ 2
   388                              <1> critFail    equ 3
   389                              <1> 
   390                              <1> ;MISC ASCII control chars
   391                              <1> NUL equ 00h ;^@         | ASCII Null
   392                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   393                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   394                              <1> BEL equ 07h ;^G         | ASCII Bell
   395                              <1> BSP equ 08h ;^H         | ASCII Backspace
   396                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   397                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   398                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   399                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   400                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   401                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   402                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   403                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   404                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   405                              <1> SPC equ 20h ;Printable  | ASCII Space
   406                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   407                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   408                              <1> 
   409                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   410                              <1> ;Extended Ascii Codes
   411                              <1> eF1     equ 3Bh ;F1 second byte
   412                              <1> eF2     equ 3Ch ;F2 second byte
   413                              <1> eF3     equ 3Dh ;F3 second byte
   414                              <1> eF4     equ 3Eh ;F4 second byte
   415                              <1> eF5     equ 3Fh ;F5 second byte
   416                              <1> eF6     equ 40h ;F6 second byte
   417                              <1> eF7     equ 41h ;F7 second byte
   418                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   419                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   420                              <1> eIns    equ 52h ;Insert second byte
   421                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
     9                                  %include "./Source/Debug/debSym.inc"
    10                              <1> ;This file will include the debuging symbols
    11                              <1> 
    12                              <1> %define true 1
    13                              <1> %define false 0
    14                              <1> 
    15                              <1> ;Switch the DEBUG to false in production!
    16                              <1> %define DEBUG false
    17                              <1> %define DPBINFO false
    18                              <1> %define REGS false
    19                              <1> %define ENDSTATUS true
    20                              <1> %define ALLOCTEST false
    21                              <1> 
    22                              <1> 
    23                              <1> ;Use this space as the debug stack
    24                              <1> %define debStackTop 80000h
    10                                  %include "./Source/Include/dosError.inc"
    11                              <1> ;DOS Error codes
    12                              <1> 
    13                              <1> ;Extended Error Codes
    14                              <1> errInvFnc   equ 1   ;Invalid function number
    15                              <1> errFnf      equ 2   ;File not found
    16                              <1> errPnf      equ 3   ;Path not found
    17                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    18                              <1> errAccDen   equ 5   ;Access denied (to resource)
    19                              <1> errBadHdl   equ 6   ;Invalid handle
    20                              <1> errMCBbad   equ 7   ;MCB's destroyed
    21                              <1> errNoMem    equ 8   ;Insufficient memory
    22                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    23                              <1> errBadEnv   equ 10  ;Invalid environment
    24                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    25                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    26                              <1> errInvDat   equ 13  ;Invalid data
    27                              <1> ;           equ 14  ;Reserved
    28                              <1> errBadDrv   equ 15  ;Invalid drive specified
    29                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    30                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    31                              <1> errNoFil    equ 18  ;No more files
    32                              <1> ;The following are Driver error codes + 19
    33                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    34                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    35                              <1> errUnkUnt   equ 20  ;Unknown Unit
    36                              <1> errDrvNR    equ 21  ;Drive not ready
    37                              <1> errUnkCmd   equ 22  ;Unknown Command
    38                              <1> errCRCerr   equ 23  ;Data (CRC) error
    39                              <1> errBadRLn   equ 24  ;Bad request structure length
    40                              <1> errSekErr   equ 25  ;Seek error
    41                              <1> errUnkMed   equ 26  ;Unknown media type
    42                              <1> errSecNF    equ 27  ;Sector not Found
    43                              <1> errNoPap    equ 28  ;Printer out of paper
    44                              <1> errWF       equ 29  ;Write fault
    45                              <1> errRF       equ 30  ;Read fault
    46                              <1> errGF       equ 31  ;General fault
    47                              <1> ;----------------------------------------------
    48                              <1> ;The following two go inbetween the Disk errors
    49                              <1> errShrVio   equ 32  ;Sharing violations
    50                              <1> errLokVio   equ 33  ;File Lock violation
    51                              <1> ;----------------------------------------------
    52                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    53                              <1> errNoFCB    equ 35  ;FCB unavailable
    54                              <1> errShrFul   equ 36  ;Sharing buffer full
    55                              <1> 
    56                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    57                              <1> 
    58                              <1> errFilExist equ 80  ;File already exists
    59                              <1> errDirExist equ 82  ;Directory already exists
    60                              <1> errFI44     equ 83  ;Fail on INT 44h
    61                              <1> errRedir    equ 84  ;Too many levels of redirection
    62                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    63                              <1> errBadPass  equ 86  ;Bad password
    64                              <1> errBadParam equ 87  ;Bad parameter passed to request
    65                              <1> errNetWrite equ 88  ;Network Write Fault
    66                              <1> ;-----------------------------------------------------------------------------
    67                              <1> ;Error Loci
    68                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    69                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    70                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    71                              <1> eLocChr     equ 4   ;Serial/Character Device error
    72                              <1> eLocMem     equ 5   ;Related to RAM
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error Actions
    75                              <1> eActRet     equ 1   ;Retry
    76                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    77                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    78                              <1> eActAbt     equ 4   ;Abort with cleanup
    79                              <1> eActKil     equ 5   ;Abort without cleanup
    80                              <1> eActIgn     equ 6   ;Ignore error
    81                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    82                              <1> ;-----------------------------------------------------------------------------
    83                              <1> ;Error classes
    84                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    85                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    86                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    87                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    88                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    89                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    90                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    91                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    92                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    93                              <1> eClsLocked  equ 10  ;Resource Locked
    94                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    95                              <1> eClsClash   equ 12  ;Resource already exists!
    96                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  %include "./Source/Include/dosExec.inc"
    12                              <1> ;This include file contains structures related to the EXE format
    13                              <1> ; and the exec frame used when setting up the EXE in memory by 41h/4Bh
    14                              <1> 
    15                              <1> ;Int 41h/4Bh stack frame, used to store values whilst processing a EXE or COM
    16                              <1> ; file.
    17                              <1> execLoadGo  equ 0
    18                              <1> execLoad    equ 1
    19                              <1> execInvld   equ 2
    20                              <1> execOverlay equ 3
    21                              <1> 
    22                              <1> struc execFrame
    23 00000000 ??                  <1>     .bSubFunc   resb 1  ;Subfunction number
    24 00000001 ????                <1>     .wProgHdl   resb 2  ;File handle number for executable file
    25 00000003 ????                <1>     .wEnvSize   resb 2  ;Size of the environment block
    26 00000005 ????                <1>     .wNameLen   resb 2  ;Needs to be less than 64 but welp
    27 00000007 ??                  <1>                 resb 1  ;Alignment byte
    28                              <1>     .rbx:
    29 00000008 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    30                              <1>     .rdx:
    31 00000010 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    32                              <1> 
    33 00000018 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    34 00000020 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    35 00000028 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to new Program Base address (consider removing)
    36 00000030 ????????            <1>     .dProgSize  resd 1  ;Program size is saved here, PSP included.
    37                              <1> .pProgEP:   ;Program EP, recycle this qword
    38 00000034 ????????            <1>     .dCOFFhdr   resd 1  ;Offset in file to COFF header. Set to 0 for COM
    39 00000038 ????                <1>     .wNumSeg    resw 1  ;Number of segments, consider reusing NameLen
    40 0000003A ????                <1>                 resw 1  ;Alignment reservation
    41                              <1> .qRelocVal:  ;Used when computing relocations, Rebasing factor
    42 0000003C ????????            <1>     .dFilePtr   resd 1  ;Keep of track of where in file we are
    43 00000040 ????????            <1>                 resd 1  ;Alignment reservation, DO NOT USE FOR ANYTHING
    44                              <1> endstruc
    45                              <1> 
    46                              <1> ;Possible blocks to be pointed to by rbx
    47                              <1> 
    48                              <1> struc execProg 
    49 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    50 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    51 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    52 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    53                              <1> endstruc
    54                              <1> 
    55                              <1> struc loadProg
    56 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    57 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    58 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    59 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    60 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    61 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    62                              <1> endstruc
    63                              <1> 
    64                              <1> struc loadOvly
    65 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    66 00000008 ????????            <1>     .dRelocFct  resd 1  ;Relocation factor for 
    67                              <1> endstruc
    68                              <1> 
    69                              <1> ;----------------------------
    70                              <1> ;   EXE header structures   :
    71                              <1> ;----------------------------
    72                              <1> 
    73                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    74                              <1> dosMagicSignature   equ "MZ"
    75                              <1> dosMagicSignature2  equ "ZM"
    76                              <1> struc imageDosHdr
    77 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    78 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    79 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    80 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    81 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    82 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    83 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    84 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    85 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    86 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    87 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    88 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    89 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    90 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    91 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    92 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    93 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    94 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    95 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    96                              <1> endstruc
    97                              <1> 
    98                              <1> ;Pssobile signatures pointed to by e_lfanew
    99                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
   100                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
   101                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
   102                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
   103                              <1> 
   104                              <1> ;COFF File header, immadiately follows the signature so @ [e_lfanew + 4]
   105                              <1> 
   106                              <1> struc imageFileHeader
   107 00000000 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
   108 00000002 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
   109 00000004 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
   110 00000008 ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
   111 0000000C ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   112 00000010 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   113 00000012 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   114                              <1> endstruc
   115                              <1> 
   116                              <1> ;The only valid values in the .machineType field
   117                              <1> 
   118                              <1> imageFileMachineUnknown equ 0
   119                              <1> imageFileMachineAMD64   equ 08664h 
   120                              <1> 
   121                              <1> ;Optional header, immediately follows COFF header
   122                              <1> 
   123                              <1> struc imageFileOptionalHeader
   124 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   125 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   126 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   127 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   128 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   129 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   130 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   131 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   132 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   133 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   134 00000024 ????????            <1> 	.dFileAlignment             resd 1
   135 00000028 ????                <1> 	.wMajOSVer                  resw 1
   136 0000002A ????                <1> 	.wMinOSVer                  resw 1
   137 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   138 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   139 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   140 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   141 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   142 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   143 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   144 00000040 ????????            <1> 	.dCheckSum                  resd 1
   145 00000044 ????                <1> 	.wSubsystem                 resw 1
   146 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   147 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   148 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   149 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   150 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   151 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   152 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   153                              <1> endstruc
   154                              <1> 
   155                              <1> romMagicNum     equ 0107h
   156                              <1> pe32MagicNum    equ 010Bh
   157                              <1> pe64MagicNum    equ 020Bh
   158                              <1> 
   159                              <1> ;Data directory header structure
   160                              <1> 
   161                              <1> struc imageDataDirectory
   162 00000000 ????????            <1>     .virtualAddress  resd 1
   163 00000004 ????????            <1>     .size    resd 1
   164                              <1> endstruc
   165                              <1> 
   166                              <1> struc baseRelocBlock
   167 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   168 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   169                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   170                              <1> endstruc
   171                              <1> ;Section headers that form the Section Table.
   172                              <1> ;There are wNumberOfSections many entries in this table.
   173                              <1> ;Each entry is one imageSectionHdr
   174                              <1> 
   175                              <1> struc imageSectionHdr       ;size 40 bytes
   176 00000000 ????????????????    <1>     .name                   resb 8
   177 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   178 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   179 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   180 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   181 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   182 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   183 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   184 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   185 00000024 ????????            <1> 	.dCharacteristics       resd 1
   186                              <1> endstruc
   187                              <1> 
   188                              <1> ;Section Hdr characteristics flags 
   189                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   190                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   191                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    12                                  Segment .text align=1   ;Init code
    13                                  %define currSegVBase 0
    14                                  %include "./Source/Sysinit/sysInit.asm"
    15                              <1> ; We arrive here with the following values in the registers.
    16                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    17                              <1> ; dx  = Int 33h boot device number
    18                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    19                              <1> 
    20 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    21 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
    22 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
    23 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    24 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    25 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    26 0000001A F348A5              <1>     rep movsq   ;Copy over
    27 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    28 00000022 50                  <1>     push rax
    29 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    30                              <1> sysInitldr:
    31                              <1> ;Now the tough part, load DOS to 800
    32 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    33                              <1> .read:
    34 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    35 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    35 00000035 00                  <1>
    36 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    37 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    38 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    39 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    40 0000003F CD33                <1>     int 33h
    41 00000041 0F83B9010000        <1>     jnc initBegin   ;No error? Yay, DOS loaded.
    42 00000047 FFCE                <1>     dec esi
    43 00000049 75DE                <1>     jnz .read
    44 0000004B 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    45 00000052 B804130000          <1>     mov eax, 1304h
    46 00000057 CD30                <1>     int 30h
    47 00000059 CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    48 0000005B 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    48 00000064 6F6164204572726F72- <1>
    48 0000006D 0A0D00              <1>
    49 00000070 000000000000000000- <1>     db 100h-($-$$) dup 00h ;Fill with nulls  
    49 00000079 000000000000000000- <1>
    49 00000082 000000000000000000- <1>
    49 0000008B 000000000000000000- <1>
    49 00000094 000000000000000000- <1>
    49 0000009D 000000000000000000- <1>
    49 000000A6 000000000000000000- <1>
    49 000000AF 000000000000000000- <1>
    49 000000B8 000000000000000000- <1>
    49 000000C1 000000000000000000- <1>
    49 000000CA 000000000000000000- <1>
    49 000000D3 000000000000000000- <1>
    49 000000DC 000000000000000000- <1>
    49 000000E5 000000000000000000- <1>
    49 000000EE 000000000000000000- <1>
    49 000000F7 000000000000000000  <1>
    50                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    51                              <1>     ;Store space for a static PSP
    52 00000100 000000000000000000- <1>     db 100h dup 00h
    52 00000109 000000000000000000- <1>
    52 00000112 000000000000000000- <1>
    52 0000011B 000000000000000000- <1>
    52 00000124 000000000000000000- <1>
    52 0000012D 000000000000000000- <1>
    52 00000136 000000000000000000- <1>
    52 0000013F 000000000000000000- <1>
    52 00000148 000000000000000000- <1>
    52 00000151 000000000000000000- <1>
    52 0000015A 000000000000000000- <1>
    52 00000163 000000000000000000- <1>
    52 0000016C 000000000000000000- <1>
    52 00000175 000000000000000000- <1>
    52 0000017E 000000000000000000- <1>
    52 00000187 000000000000000000- <1>
    52 00000190 000000000000000000- <1>
    52 00000199 000000000000000000- <1>
    52 000001A2 000000000000000000- <1>
    52 000001AB 000000000000000000- <1>
    52 000001B4 000000000000000000- <1>
    52 000001BD 000000000000000000- <1>
    52 000001C6 000000000000000000- <1>
    52 000001CF 000000000000000000- <1>
    52 000001D8 000000000000000000- <1>
    52 000001E1 000000000000000000- <1>
    52 000001EA 000000000000000000- <1>
    52 000001F3 000000000000000000- <1>
    52 000001FC 00000000            <1>
    53                              <1> ;END OF FIRST SECTOR!!
    54                              <1> ;DOS SYSINIT BEGINS HERE
    55                              <1> ;First move the alignment of the DOSSEG to 4Kb
    56                              <1> initBegin:
    57 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    58 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    59 00000206 0F32                <1>     rdmsr
    60 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    61 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    62 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    63 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    64 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    65 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    66 00000221 89F8                <1>     mov eax, edi
    67 00000223 4889FA              <1>     mov rdx, rdi
    68 00000226 48C1EA20            <1>     shr rdx, 20h
    69 0000022A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    70                              <1> ;------------------------------------------------;
    71                              <1> ;              Connect Debugger                  ;
    72                              <1> ;------------------------------------------------;
    73                              <1> %if DEBUG
    74                              <1> ;Only connect if in debug mode
    75                              <1>     mov eax, 0C501h ;Connect debugger
    76                              <1>     int 35h
    77                              <1> %endif
    78                              <1> ;------------------------------------------------;
    79                              <1> ;           Sanitise the data area               ;
    80                              <1> ;------------------------------------------------;
    81                              <1> ; This call initialises ALL fields in the DOS    ;
    82                              <1> ; data area with 0's. Thus any fields, which     ;
    83                              <1> ; need to be initialised with a 0 value, are     ;
    84                              <1> ; initialised for free.                          ;
    85                              <1> ;------------------------------------------------;
    86 0000022C B9[B2D90300]        <1>     mov ecx, dSegLen
    87 00000231 30C0                <1>     xor al, al
    88 00000233 57                  <1>     push rdi    ;Temp save rdi on the stack
    89 00000234 F3AA                <1>     rep stosb
    90 00000236 5F                  <1>     pop rdi
    91                              <1> ;------------------------------------------------;
    92                              <1> ;          Start saving Basic DOS data           ;
    93                              <1> ;------------------------------------------------;
    94 00000237 6444883C25-         <1>     mov byte fs:[bootDrive], r15b ;Save the boot drive in memory
    94 0000023C [10C00300]          <1>
    95                              <1> ;Copy DOS to its final resting place
    96 00000240 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    96 00000245 [00C00300]          <1>
    97 00000249 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    97 0000024E [08C00300]          <1>
    98 00000252 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    99 00000255 4881C7[B2D90300]    <1>     add rdi, dSegLen ;Move destination past end of data area
   100 0000025C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
   101 00000263 B900100000          <1>     mov ecx, 1000h
   102 00000268 F348A5              <1>     rep movsq
   103                              <1> 
   104 0000026B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   105 0000026D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   106 00000271 664489C0            <1>     mov ax, r8w
   107 00000275 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
   108 0000027D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
   109 00000285 64C60425[70C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
   109 0000028D 05                  <1>
   110                              <1>     ;mov byte fs:[numPhysVol], 0    ;Number of logical drives
   111 0000028E 64C60425[96C00300]- <1>     mov byte fs:[numFiles], 5      ;Default 8 files, at start 5
   111 00000296 05                  <1>
   112 00000297 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
   112 0000029C [97C00300]1400      <1>
   113 000002A2 64C60425[71C00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
   113 000002AA 01                  <1>
   114                              <1>     ;If no detected Int 33h devices, halt 
   115 000002AB 49C1E810            <1>     shr r8, 2*8
   116 000002AF 4584C0              <1>     test r8b, r8b
   117 000002B2 0F84870B0000        <1>     jz errorInit
   118                              <1> ;------------------------------------------------;
   119                              <1> ;          Add additional page tables            ;
   120                              <1> ;------------------------------------------------;
   121                              <1> ;This will allow for up to 64Gb of addressible space
   122 000002B8 4889EF              <1>     mov rdi, rbp
   123                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
   124 000002BB B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
   125 000002C0 57                  <1>     push rdi
   126 000002C1 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
   126 000002CA 00                  <1>
   127                              <1> pdtLoop:
   128 000002CB 48AB                <1>     stosq
   129 000002CD 480500002000        <1>     add rax, 200000h
   130 000002D3 FFC9                <1>     dec ecx
   131 000002D5 75F4                <1>     jnz pdtLoop
   132 000002D7 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   133                              <1> ;Now we add every 4kb page to the page directory pointer table
   134                              <1> ;15 4kb pages to consider
   135 000002D8 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   136 000002DB 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   137 000002DE 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   138 000002E5 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   139 000002EC B93C000000          <1>     mov ecx, 60
   140 000002F1 480D03000000        <1>     or rax, 3h      ;present and r/w
   141                              <1> pdptLoop:
   142 000002F7 48AB                <1>     stosq
   143 000002F9 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   144 000002FF FFC9                <1>     dec ecx
   145 00000301 75F4                <1>     jnz pdptLoop
   146 00000303 0F20DF              <1>     mov rdi, cr3
   147 00000306 0F22DF              <1>     mov cr3, rdi
   148                              <1> ;------------------------------------------------;
   149                              <1> ;                   MCB inits                    ;
   150                              <1> ;------------------------------------------------;
   151                              <1> mcbInit:
   152 00000309 B820E80000          <1>     mov eax, 0E820h
   153 0000030E CD35                <1>     int 35h
   154                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   155 00000310 E804010000          <1>     call .mcbFindAddress
   156 00000315 7349                <1>     jnc .mcbi1  ;If found, proceed
   157                              <1>     ;Here, we try use E801h
   158 00000317 B801E80000          <1>     mov eax, 0E801h
   159 0000031C CD35                <1>     int 35h
   160 0000031E 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   161 00000321 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   162 00000324 85C0                <1>     test eax, eax
   163 00000326 741B                <1>     jz .worst
   164 00000328 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   165 0000032B C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   166 0000032E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   167 00000336 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   168 0000033E E909010000          <1>     jmp mcbBuild
   169                              <1> .worst:
   170                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   171 00000343 B800002000          <1>     mov eax, 200000h
   172 00000348 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   172 0000034D [08C00300]          <1>
   173 00000351 29D8                <1>     sub eax, ebx
   174 00000353 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   175 0000035B E9EC000000          <1>     jmp mcbBuild 
   176                              <1> .mcbi1:
   177 00000360 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   178 00000363 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   178 0000036C 00                  <1>
   179 0000036D 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   180 00000371 0F85C2000000        <1>     jne .mcbFail
   181 00000377 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   182                              <1>     ;PCI hole always exists so this value will always be a dword
   183 0000037B 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   184 00000383 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   185 00000386 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   186 00000389 4881FB00000001      <1>     cmp rbx, 1000000h  
   187 00000390 773C                <1>     ja .skipISA
   188                              <1> ;Here we deal with ISA hole issues
   189 00000392 B820E80000          <1>     mov eax, 0E820h
   190 00000397 CD35                <1>     int 35h
   191 00000399 48B800000001000000- <1>     mov rax, 1000000h
   191 000003A2 00                  <1>
   192 000003A3 E871000000          <1>     call .mcbFindAddress
   193 000003A8 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   194 000003AE 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   194 000003B7 00                  <1>
   195 000003B8 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   196 000003BC 0F858A000000        <1>     jne mcbBuild  
   197 000003C2 488B5808            <1>     mov rbx, qword [rax + 8]
   198 000003C6 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   199                              <1> .skipISA:
   200 000003CE B820E80000          <1>     mov eax, 0E820h
   201 000003D3 CD35                <1>     int 35h
   202 000003D5 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   202 000003DE 00                  <1>
   203 000003DF E835000000          <1>     call .mcbFindAddress
   204 000003E4 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   205 000003E6 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   205 000003EF 00                  <1>
   206 000003F0 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   207 000003F4 7556                <1>     jne mcbBuild   
   208 000003F6 488B5808            <1>     mov rbx, qword [rax + 8]
   209                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   210 000003FA 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   210 00000403 00                  <1>
   211 00000404 4839CB              <1>     cmp rbx, rcx
   212 00000407 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   213 0000040B 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   213 00000410 [1BC00300]          <1>
   214 00000414 E933000000          <1>     jmp mcbBuild
   215                              <1> .mcbFindAddress:
   216                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   217                              <1> ;Entry: rax = Address of arena to search for
   218                              <1> ;       rsi = Pointer to memory map
   219                              <1> ;       ecx = Number of 24 byte entries
   220                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   221                              <1> ;       CF=CY : value in rax not found
   222 00000419 56                  <1>     push rsi
   223 0000041A 51                  <1>     push rcx
   224 0000041B 50                  <1>     push rax
   225                              <1> .mfa0:
   226 0000041C 483B06              <1>     cmp rax, qword [rsi]
   227 0000041F 7410                <1>     je .mcbAddressFound
   228 00000421 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   229 00000428 FFC9                <1>     dec ecx
   230 0000042A 79F0                <1>     jns .mfa0
   231                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   232 0000042C 58                  <1>     pop rax
   233 0000042D 59                  <1>     pop rcx
   234 0000042E 5E                  <1>     pop rsi
   235 0000042F F9                  <1>     stc
   236 00000430 C3                  <1>     ret
   237                              <1> .mcbAddressFound:
   238 00000431 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   239 00000434 59                  <1>     pop rcx ;Pop old rax value off
   240 00000435 59                  <1>     pop rcx
   241 00000436 5E                  <1>     pop rsi
   242 00000437 F8                  <1>     clc
   243 00000438 C3                  <1>     ret
   244                              <1> .mcbFail:
   245 00000439 488D2D260A0000      <1>     lea rbp, mcbFailmsg
   246 00000440 B804130000          <1>     mov eax, 1304h
   247 00000445 CD30                <1>     int 30h
   248 00000447 E9F3090000          <1>     jmp errorInit
   249                              <1> 
   250                              <1> mcbBuild:
   251                              <1> ;Actually build the MCB chain here
   252                              <1> ;Start by computing the difference between userbase and DOS area
   253                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   254 0000044C 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   254 00000451 [08C00300]          <1>
   255 00000455 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   256 0000045C 56                  <1>     push rsi    ;Save ptr
   257 0000045D 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   258 00000464 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   259 00000467 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   260 0000046F 5B                  <1>     pop rbx
   261 00000470 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   262 00000473 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   263 0000047B 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   264 00000483 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   265 00000486 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   266 00000489 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   266 0000048E [2BC00300]          <1>
   267                              <1> 
   268                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   269 00000492 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   269 0000049A 00000000            <1>
   270 0000049E 746E                <1>     jz .skipISA
   271                              <1>     ;Here if an ISA hole exists, place a MCB around it
   272 000004A0 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   273                              <1>     ;Remove one MCB worth of space from alloc
   274 000004A7 31C9                <1>     xor ecx, ecx
   275 000004A9 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   276 000004AC 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   277 000004B2 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   278 000004B5 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   279 000004B8 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   280 000004BB C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   281 000004BE 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   282 000004C6 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   282 000004CF 00                  <1>
   283 000004D0 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   284 000004D3 480510000000        <1>     add rax, mcb_size
   285 000004D9 4829C1              <1>     sub rcx, rax    ;Take their difference
   286 000004DC C1E904              <1>     shr ecx, 4
   287 000004DF 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   288 000004E2 C1E104              <1>     shl ecx, 4  ;Get bytes again
   289 000004E5 4881C310000000      <1>     add rbx, mcb_size
   290 000004EC 4801CB              <1>     add rbx, rcx
   291                              <1>     ;RBX should now be at 16Mb
   292 000004EF C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   293 000004F2 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   294 000004FA 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   295 00000502 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   296 00000505 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   297 0000050B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   298                              <1> .skipISA:
   299                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   300                              <1>     ;rbx points to a block with "Z" marker
   301 0000050E 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   301 00000516 00000000            <1>
   302 0000051A 7470                <1>     jz .exit
   303                              <1>     ;Add PCI hole MCB
   304 0000051C 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   305                              <1>     ;Remove one MCB worth of space from alloc
   306 00000523 31C9                <1>     xor ecx, ecx
   307 00000525 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   308 00000528 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   309 0000052E C1E104              <1>     shl ecx, 4  ;Get bytes
   310 00000531 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   311 00000534 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   312 00000537 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   313 0000053A 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   314 00000542 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   314 0000054B 00                  <1>
   315 0000054C 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   316 0000054F 480510000000        <1>     add rax, mcb_size
   317 00000555 4829C1              <1>     sub rcx, rax    ;Take their difference
   318 00000558 C1E904              <1>     shr ecx, 4
   319 0000055B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   320 0000055E C1E104              <1>     shl ecx, 4  ;Get bytes again
   321 00000561 4881C310000000      <1>     add rbx, mcb_size
   322 00000568 4801CB              <1>     add rbx, rcx
   323                              <1>     ;RBX should now be at 4Gb
   324 0000056B C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   325 0000056E 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   326 00000576 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   326 0000057B [1BC00300]          <1>
   327 0000057F 48C1E904            <1>     shr rcx, 4
   328 00000583 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   329 00000589 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   330                              <1> .exit:
   331                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   332 0000058C 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   333                              <1> ;------------------------------------------------;
   334                              <1> ;          Kernel inits and adjustments          ;
   335                              <1> ;------------------------------------------------;
   336                              <1> ;Adjust Interrupt Entries Int 40h-49h
   337                              <1> adjInts:
   338 00000593 B340                <1>     mov bl, 40h
   339 00000595 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   340 0000059A CD35                <1>     int 35h
   341 0000059C B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   342 000005A1 488D3D52090000      <1>     lea rdi, intData
   343 000005A8 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   344                              <1> .ai0:
   345 000005AA B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   346 000005AF 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   347 000005B2 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   348                              <1> .ai1:
   349 000005B5 CD35                <1>     int 35h
   350 000005B7 4881C708000000      <1>     add rdi, 8
   351 000005BE FFC1                <1>     inc ecx
   352 000005C0 81F950000000        <1>     cmp ecx, 50h
   353 000005C6 75E2                <1>     jne .ai0
   354                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   355                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   356                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   357                              <1>     %if DEBUG
   358                              <1> debugPopUpMsg:
   359                              <1>     push rbx
   360                              <1>     push rbp
   361                              <1>     push rcx
   362                              <1>     push rdx
   363                              <1>     mov ecx, 53 ;A large number of lines
   364                              <1>     xor edx, edx    ;COM 1
   365                              <1> .cls:
   366                              <1>     mov eax, 010Ah ;Transmit Line feed
   367                              <1>     int 34h
   368                              <1>     dec ecx
   369                              <1>     jnz .cls
   370                              <1>     lea rbx, qword [debPrintNullString + rbp]
   371                              <1>     lea rbp, .msg
   372                              <1>     call rbx
   373                              <1>     jmp short .exit
   374                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   375                              <1> .exit:
   376                              <1>     pop rdx
   377                              <1>     pop rcx
   378                              <1>     pop rbp
   379                              <1>     pop rbx
   380                              <1>     %endif
   381                              <1> 
   382                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   383 000005C8 488D1570080000      <1>     lea rdx, errorInit ;Get segment start address
   384 000005CF B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   385 000005D4 CD41                <1>     int 41h
   386 000005D6 488D1562080000      <1>     lea rdx, errorInit ;Get segment start address
   387 000005DD B844250000          <1>     mov eax, 2544h
   388 000005E2 CD41                <1>     int 41h
   389                              <1> ;------------------------------------------------;
   390                              <1> ;          Driver Adjustments and inits          ;
   391                              <1> ;------------------------------------------------;
   392                              <1> ;Modify the pointers in nData before putting them in the data area
   393 000005E4 48012D8F090000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   394 000005EB 48012D92090000      <1>     add qword [nData + drvHdr.strPtr], rbp
   395 000005F2 48012D93090000      <1>     add qword [nData + drvHdr.intPtr], rbp
   396                              <1> ;Copy the Null driver to its location in Sysvars
   397 000005F9 B922000000          <1>     mov ecx, drvHdr_size
   398 000005FE 488D3575090000      <1>     lea rsi, qword [nData]
   399 00000605 488DBD[73C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   400 0000060C F3A4                <1>     rep movsb   
   401                              <1> 
   402                              <1> ;Adjust the addresses in the other driver headers 
   403 0000060E 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   403 00000610 [525C000000000000]  <1>
   404 00000618 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   405 0000061D 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   406                              <1> adjDrivers:
   407 00000621 E8FD070000          <1>     call adjustDrvHdr
   408 00000626 E2F9                <1>     loop adjDrivers
   409                              <1> ;Open NUL
   410                              <1> ;NUL opened
   411                              <1> ;Open CON
   412                              <1> conInit:    ;Rather than keeping this resident... do it here
   413                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   414 00000628 488D95[3D5F0000]    <1>     lea rdx, qword [rbp + fastOutput]
   415 0000062F B849250000          <1>     mov eax, 2549h
   416 00000634 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   417 00000636 488D95[455F0000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   418 0000063D B83B250000          <1>     mov eax, 253Bh
   419 00000642 CD41                <1>     int 41h ;Hook int 3Bh
   420                              <1> .ci0:
   421 00000644 B401                <1>     mov ah, 01      ;Get buffer status
   422 00000646 CD36                <1>     int 36h
   423 00000648 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   424 0000064A 30E4                <1>     xor ah, ah
   425 0000064C CD36                <1>     int 36h ;Read key to flush from buffer
   426 0000064E EBF4                <1>     jmp short .ci0
   427                              <1> .ci1:
   428 00000650 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   429 00000655 CD30                <1>     int 30h
   430 00000657 B402                <1>     mov ah, 02h
   431 00000659 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   432 0000065B 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   433 0000065D CD30                <1>     int 30h
   434 0000065F B707                <1>     mov bh, 07h     ;Grey/Black attribs
   435 00000661 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   436 00000666 CD30                <1>     int 30h
   437                              <1> 
   438                              <1>     ;Save ptr to ConHdr in Sysvars
   439 00000668 488D85[525C0000]    <1>     lea rax, qword [rbp + conHdr]
   440 0000066F 6448890425-         <1>     mov qword fs:[vConPtr], rax
   440 00000674 [4BC00300]          <1>
   441                              <1> 
   442                              <1>     ;Fix the ext ESC function handler address
   443 00000678 488D85[0E280000]    <1>     lea rax, qword [rbp + editKeys]
   444 0000067F 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   444 00000684 [59000000]          <1>
   445                              <1> 
   446                              <1> ;CLOCK init prock
   447                              <1> ;Set the time and date using the RTC (if present)
   448                              <1> clkInit:
   449                              <1>    ;Save ptr to ClkHdr in Sysvars first
   450 00000688 488D85[B85C0000]    <1>     lea rax, qword [rbp + clkHdr]
   451 0000068F 6448890425-         <1>     mov qword fs:[clockPtr], rax
   451 00000694 [43C00300]          <1>
   452                              <1> ;CH - Hours, in BCD
   453                              <1> ;CL - Minutes, in BCD
   454                              <1> ;DH - Seconds, in BCD
   455 00000698 B402                <1>     mov ah, 02  ;Read RTC Time
   456 0000069A CD3A                <1>     int 3Ah
   457 0000069C 7271                <1>     jc .clkEnd  ;if error, just exit
   458                              <1>     ;Now set the driver time. Convert From BCD to Decimal
   459 0000069E 0FB6C5              <1>     movzx eax, ch   ;Hours
   460 000006A1 E84D000000          <1>     call .bcd2Bin
   461 000006A6 88C5                <1>     mov ch, al
   462 000006A8 0FB6C1              <1>     movzx eax, cl     ;Mins
   463 000006AB E843000000          <1>     call .bcd2Bin
   464 000006B0 88C1                <1>     mov cl, al
   465 000006B2 0FB6C6              <1>     movzx eax, dh   ;Seconds
   466 000006B5 E839000000          <1>     call .bcd2Bin
   467 000006BA 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
   468 000006BC 89C2                <1>     mov edx, eax
   469 000006BE B42D                <1>     mov ah, 2Dh ;DOS Set Time
   470 000006C0 CD41                <1>     int 41h
   471                              <1> ;Now get the date from RTC
   472                              <1> ;CL - Year, in BCD
   473                              <1> ;DH - Month, in BCD
   474                              <1> ;DL - Day, in BCD
   475 000006C2 B404                <1>     mov ah, 04  ;Read RTC Date
   476 000006C4 CD3A                <1>     int 3Ah
   477 000006C6 7247                <1>     jc .clkEnd
   478                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
   479 000006C8 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
   480 000006CB E823000000          <1>     call .bcd2Bin
   481 000006D0 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
   482 000006D3 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
   483 000006D9 0FB6C6              <1>     movzx eax, dh   ;Get Months
   484 000006DC E812000000          <1>     call .bcd2Bin
   485 000006E1 88C6                <1>     mov dh, al  
   486 000006E3 0FB6C2              <1>     movzx eax, dl   ;Get day
   487 000006E6 E808000000          <1>     call .bcd2Bin
   488 000006EB 88C2                <1>     mov dl, al
   489 000006ED B42B                <1>     mov ah, 2Bh ;DOS Set Date
   490 000006EF CD41                <1>     int 41h
   491 000006F1 EB1C                <1>     jmp short .clkEnd
   492                              <1> .bcd2Bin:
   493                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   494 000006F3 51                  <1>     push rcx
   495 000006F4 89C1                <1>     mov ecx, eax
   496 000006F6 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   497 000006FB 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   498 00000701 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   499 00000704 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   500                              <1> .b2blp:
   501 00000707 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   502 00000709 FFC9                <1>     dec ecx
   503 0000070B 75FA                <1>     jnz .b2blp
   504                              <1> .b2bexit:
   505 0000070D 59                  <1>     pop rcx
   506 0000070E C3                  <1>     ret
   507                              <1> .clkEnd:
   508                              <1> ;------------------------------------------------;
   509                              <1> ;         Link DOS to temporary Buffer           ;
   510                              <1> ;------------------------------------------------;
   511                              <1> tempBufferInit:
   512 0000070F 488DBD[19010000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   513 00000716 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   513 0000071B [55C00300]          <1>
   514 0000071F 31C0                <1>     xor eax, eax
   515 00000721 48FFC8              <1>     dec rax
   516 00000724 48AB                <1>     stosq   ;.nextBufPtr, end of list
   517 00000726 AA                  <1>     stosb   ;.driveNumber, Free entry
   518 00000727 48FFC0              <1>     inc rax
   519 0000072A AA                  <1>     stosb   ;.bufferFlags, No flags
   520                              <1> ;------------------------------------------------;
   521                              <1> ;         Init msd driver, create DPB            ;
   522                              <1> ;------------------------------------------------;
   523                              <1> storageInits:
   524                              <1> ;First save dpb pointer in sysvars
   525 0000072B 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   526 00000732 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   526 00000737 [33C00300]          <1>
   527                              <1> ;Open Mass Storage
   528 0000073B E85C080000          <1>     call diskInit
   529 00000740 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   530 00000743 648A0425[6FC00300]  <1>     mov al, byte fs:[numPhysVol]
   531 0000074B 488D95[D8650000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   532 00000752 30C9                <1>     xor cl, cl  ;Clear counter
   533 00000754 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   533 00000759 [33C00300]          <1>
   534                              <1> .si0:   
   535 0000075D 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   536 00000760 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   537 00000762 CD41                <1>     int 41h
   538                              <1> ;Add other data to DPB
   539 00000764 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   540 00000767 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   541 0000076A 50                  <1>     push rax
   542 0000076B 488D87[DA5C0000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   543 00000772 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   544 00000776 58                  <1>     pop rax
   545 00000777 FEC1                <1>     inc cl
   546 00000779 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   547 0000077B 7416                <1>     je .si1
   548 0000077D 50                  <1>     push rax
   549 0000077E 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   550 00000782 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   551 00000786 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   552 00000789 58                  <1>     pop rax
   553 0000078A 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   554 00000791 EBCA                <1>     jmp short .si0
   555                              <1> .si1:
   556                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   557 00000793 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   558 0000079B 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   559                              <1> ;------------------------------------------------;
   560                              <1> ;          Find largest sector size              ;
   561                              <1> ;------------------------------------------------;
   562                              <1> sectorSizeSearch:
   563                              <1> ;Done by reading BPB's for each drive
   564 0000079E 488D9D[D8650000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   565                              <1>     
   566                              <1>     ;Go thru each block individually
   567 000007A5 31C0                <1>     xor eax, eax
   568 000007A7 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   569                              <1> .findLargest:
   570 000007AA 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   571 000007AE 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   572 000007B3 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   573 000007BA 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   574 000007BD 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   575 000007C0 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   576 000007C2 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   576 000007C7 [53C00300]          <1>
   577                              <1> ;------------------------------------------------;
   578                              <1> ;                 Temp CDS inits                 ;
   579                              <1> ;------------------------------------------------;
   580                              <1> tempCDS:
   581                              <1> ;Build a temporary CDS for Drive A to use it for booting
   582 000007CB 488DBD[FBC50300]    <1>     lea rdi, qword [rbp + tmpCDS]  ;Use Temp CDS in the SDA
   583 000007D2 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   583 000007D7 [5DC00300]          <1>
   584                              <1>     ;"A:\"+NULL char (in rev order because LITTLE ENDIAN!!)
   585 000007DB C707413A5C00        <1>     mov dword [rdi + cds.sCurrentPath], 005C3A41h  
   586 000007E1 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsValidDrive   ;Set the drive to be valid!
   587 000007E7 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   587 000007EC [33C00300]          <1>
   588 000007F0 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   589 000007F4 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   590                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   591                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   592                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   593                              <1>     ;cds.dStartCluster is 0 since we zero-ed the data area earlier
   594                              <1> ;------------------------------------------------;
   595                              <1> ;     Set up general PSP areas and DOS vars      ;
   596                              <1> ;------------------------------------------------;
   597                              <1> ;Additional DOS Vars init
   598 000007FA 64C60425[6BC30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   598 00000802 FF                  <1>
   599 00000803 64C60425[33C30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   599 0000080B 2F                  <1>
   600                              <1> 
   601                              <1> ;Set network machine name to... nothing!
   602 0000080C 488DBD[38C30300]    <1>     lea rdi, qword [rbp + machineName]
   603 00000813 B910000000          <1>     mov ecx, 10h    ;16 chars long
   604 00000818 B020                <1>     mov al, SPC ;Space char
   605 0000081A F3AA                <1>     rep stosb   ;Fill with space chars
   606                              <1> 
   607                              <1> 
   608                              <1> ;Patch Data Table init
   609 0000081C 488DBD[48C30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   610 00000823 488D85[13550000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   611 0000082A 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   612 0000082C 488D85[1D550000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   613 00000833 48AB                <1>     stosq
   614 00000835 488D85[27550000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   615 0000083C 48AB                <1>     stosq
   616 0000083E 488D85[31550000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   617 00000845 48AB                <1>     stosq
   618                              <1> 
   619                              <1> ;Initial PSP Init
   620 00000847 488D1DB2F8FFFF      <1>     lea rbx, qword [tempPSP]
   621 0000084E 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   621 00000853 [81C30300]          <1>
   622 00000857 53                  <1>     push rbx
   623 00000858 4881C380000000      <1>     add rbx, psp.dta
   624 0000085F 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   624 00000864 [79C30300]          <1>
   625 00000868 5B                  <1>     pop rbx
   626 00000869 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   627 0000086E C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   628 00000875 48C7430200000000    <1>     mov qword [rbx + psp.allocSize], 0    ;Size of allocation (dummy value)
   629 0000087D 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   630 00000881 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   631 00000885 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   632 00000889 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   632 00000892 FF                  <1>
   633 00000893 48AB                <1>     stosq   ;8 bytes
   634 00000895 31C0                <1>     xor eax, eax
   635 00000897 50                  <1>     push rax    ;Save 0 on the stack
   636 00000898 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   637 0000089B 48AB                <1>     stosq   ;16 bytes
   638 0000089D AB                  <1>     stosd   ;20 bytes
   639 0000089E 58                  <1>     pop rax ;Get 0 back
   640 0000089F 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   641 000008A7 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   642 000008AB C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   643 000008AF 4889DA              <1>     mov rdx, rbx
   644 000008B2 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   645 000008B7 CD41                <1>     int 41h
   646 000008B9 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   647 000008BD B843350000          <1>     mov eax, 3543h
   648 000008C2 CD41                <1>     int 41h
   649 000008C4 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   650 000008C8 B844350000          <1>     mov eax, 3544h
   651 000008CD CD41                <1>     int 41h
   652 000008CF 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   653                              <1> 
   654 000008D3 B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   655 000008D8 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   656 000008DC F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   657                              <1> ;------------------------------------------------;
   658                              <1> ;          Default File Handle Creation          ;
   659                              <1> ;                                                ;
   660                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   661                              <1> ;------------------------------------------------;
   662                              <1> defaultFileHandles:
   663                              <1> ;Fill in the default file table entries
   664 000008DE 488D9D[99C00300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   665 000008E5 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   666 000008EC 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   667 000008F2 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   667 000008F7 [3BC00300]          <1>
   668 000008FB 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   668 00000904 20                  <1>
   669                              <1> ;GOTO FIRST FILE 
   670 00000905 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   671                              <1> ;Write AUX
   672 0000090C 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   673 00000911 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   674 00000917 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   675 0000091B C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   676                              <1>     ;No EOF when reading from the device
   677 0000091F 488B85[745C0000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   678 00000926 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   679                              <1>     ;Ignore disk related fields and Date/Time of open
   680 0000092A 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   681                              <1>     ;11 chars in 8.3 name
   682 0000092E 488D35A5050000      <1>     lea rsi, auxName
   683 00000935 B903000000          <1>     mov ecx, 3
   684 0000093A F3A4                <1>     rep movsb   ;Move the three bytes
   685 0000093C 4889D0              <1>     mov rax, rdx
   686 0000093F 48AB                <1>     stosq   ;Eight spaces left to print
   687 00000941 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   687 00000946 [81C30300]          <1>
   688 0000094A 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   689                              <1> ;GOTO NEXT ENTRY
   690 0000094E 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   691                              <1>     ;Write CON
   692 00000955 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   693 0000095A 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   694 00000960 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   695 00000964 C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   696                              <1>     ;No EOF when reading from the device
   697 00000968 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   697 0000096D [4BC00300]          <1>
   698 00000971 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   699                              <1>     ;Ignore disk related fields and Date/Time of open
   700 00000975 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   701                              <1>     ;11 chars in 8.3 name
   702 00000979 488D3556050000      <1>     lea rsi, conName
   703 00000980 B903000000          <1>     mov ecx, 3
   704 00000985 F3A4                <1>     rep movsb   ;Move the three bytes
   705 00000987 4889D0              <1>     mov rax, rdx
   706 0000098A 48AB                <1>     stosq   ;Eight spaces left to print
   707 0000098C 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   707 00000991 [81C30300]          <1>
   708 00000995 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   709                              <1> ;GOTO NEXT ENTRY
   710 00000999 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   711                              <1> ;Write PRN
   712 000009A0 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   713 000009A5 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   714 000009AB C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   715 000009AF C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   716                              <1>     ;Want EOF when reading from to the device
   717 000009B3 488B85[965C0000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   718 000009BA 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   719                              <1>     ;Ignore disk related fields and Date/Time of open
   720 000009BE 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   721                              <1>     ;11 chars in 8.3 name
   722 000009C2 488D3515050000      <1>     lea rsi, prnName
   723 000009C9 B903000000          <1>     mov ecx, 3
   724 000009CE F3A4                <1>     rep movsb   ;Move the three bytes
   725 000009D0 4889D0              <1>     mov rax, rdx
   726 000009D3 48AB                <1>     stosq   ;Eight spaces left to print
   727 000009D5 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   727 000009DA [81C30300]          <1>
   728 000009DE 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   729                              <1> ;Zero word 0 of entry 4 and 5
   730 000009E2 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   731 000009E9 31C0                <1>     xor eax, eax
   732                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   733                              <1>     ; which is ok as these are empty entries, ready to be used)
   734 000009EB 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   735 000009ED 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   736 000009F4 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   737                              <1> ;------------------------------------------------;
   738                              <1> ;               Load CONFIG.SYS                  ;
   739                              <1> ;------------------------------------------------;
   740                              <1> ;------------------------------------------------;
   741                              <1> ;              Process CONFIG.SYS                ;
   742                              <1> ;------------------------------------------------;
   743                              <1> ;------------------------------------------------;
   744                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   745                              <1> ;------------------------------------------------;
   746                              <1> ;------------------------------------------------;
   747                              <1> ;   Setup Final Data Areas With Overrides from   ;
   748                              <1> ;                  CONFIG.SYS                    ;
   749                              <1> ;------------------------------------------------;
   750                              <1> ;------------------------------------------------;
   751                              <1> ;           Load Command interpreter             ;
   752                              <1> ;------------------------------------------------;
   753 000009F6 488D1553040000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   754 000009FD B409                <1>     mov ah, 09h
   755 000009FF CD41                <1>     int 41h
   756                              <1> ;Resize DOS allocation before loading COMMAND.COM
   757 00000A01 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   757 00000A06 [2BC00300]          <1>
   758 00000A0A 4981C010000000      <1>     add r8, mcb.program
   759 00000A11 BB49110000          <1>     mov ebx, dynamicDataAreaLength
   760 00000A16 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   761 00000A19 FFC3                <1>     inc ebx
   762 00000A1B B44A                <1>     mov ah, 4Ah
   763 00000A1D CD41                <1>     int 41h
   764                              <1>     
   765                              <1>     %if DEBUG && ALLOCTEST
   766                              <1> ;Test Allocation, Growth and Deallocation
   767                              <1>     mov r15, qword fs:[currentPSP]
   768                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   769                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   770                              <1>     mov ah, 48h ;Allocate
   771                              <1>     int 41h
   772                              <1> 
   773                              <1>     mov byte [rax - 10h], 0 ;Trash chain
   774                              <1>     mov r8, rax ;Move the pointer to r8
   775                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   776                              <1>     mov ah, 4Ah
   777                              <1>     int 41h
   778                              <1> 
   779                              <1>     mov ah, 49h ;Free r8
   780                              <1>     int 41h
   781                              <1>     mov qword fs:[currentPSP], r15
   782                              <1>     %endif
   783                              <1> 
   784                              <1>     %if ENDSTATUS
   785                              <1> debugFinal:
   786                              <1>     ;Print system state
   787 00000A1F 55                  <1>     push rbp    ;Only rbp really matters here
   788 00000A20 4989E8              <1>     mov r8, rbp
   789                              <1> 
   790 00000A23 488D2DD0020000      <1>     lea rbp, .msg2
   791 00000A2A 4D8D88[84040000]    <1>     lea r9, qword [r8 + debPrintNullString]
   792 00000A31 41FFD1              <1>     call r9
   793                              <1> 
   794 00000A34 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   795 00000A3B 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   795 00000A40 [08C00300]          <1>
   796                              <1> 
   797 00000A44 4D8D88[BF070000]    <1>     lea r9, qword [r8 + overlayQword]
   798 00000A4B 41FFD1              <1>     call r9
   799                              <1> 
   800 00000A4E 4881C31B000000      <1>     add rbx, 19+8
   801 00000A55 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   801 00000A5A [00C00300]          <1>
   802 00000A5E 41FFD1              <1>     call r9
   803                              <1> 
   804 00000A61 4881C31B000000      <1>     add rbx, 19+8
   805 00000A68 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   805 00000A6D [2BC00300]          <1>
   806 00000A71 41FFD1              <1>     call r9
   807                              <1> 
   808 00000A74 4881C31C000000      <1>     add rbx, 20+8
   809 00000A7B 4D8D88[7C070000]    <1>     lea r9, qword [r8 + overlayDword]
   810 00000A82 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
   811 00000A8A 41FFD1              <1>     call r9
   812                              <1> 
   813 00000A8D 4881C312000000      <1>     add rbx, 10+8
   814 00000A94 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
   815 00000A9C 41FFD1              <1>     call r9
   816                              <1> 
   817 00000A9F 4881C312000000      <1>     add rbx, 10+8
   818 00000AA6 64488B0425-         <1>     mov rax, qword fs:[longMem]
   818 00000AAB [1BC00300]          <1>
   819 00000AAF 4D8D88[BF070000]    <1>     lea r9, qword [r8 + overlayQword]
   820 00000AB6 41FFD1              <1>     call r9
   821                              <1> 
   822 00000AB9 4881C31B000000      <1>     add rbx, 19+8
   823 00000AC0 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   823 00000AC5 [33C00300]          <1>
   824 00000AC9 41FFD1              <1>     call r9
   825                              <1> 
   826 00000ACC 4881C31B000000      <1>     add rbx, 19+8
   827 00000AD3 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   827 00000AD8 [3BC00300]          <1>
   828 00000ADC 41FFD1              <1>     call r9
   829                              <1> 
   830 00000ADF 4881C31B000000      <1>     add rbx, 19+8
   831 00000AE6 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   831 00000AEB [55C00300]          <1>
   832 00000AEF 41FFD1              <1>     call r9
   833                              <1> 
   834 00000AF2 4881C31B000000      <1>     add rbx, 19+8
   835 00000AF9 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   835 00000AFE [5DC00300]          <1>
   836 00000B02 41FFD1              <1>     call r9
   837                              <1> 
   838 00000B05 4D8D88[0A070000]    <1>     lea r9, qword [r8 + overlayByte]
   839                              <1> 
   840 00000B0C 4881C32C000000      <1>     add rbx, 25+19
   841 00000B13 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
   841 00000B19 [6FC00300]          <1>
   842 00000B1D 41FFD1              <1>     call r9
   843                              <1> 
   844 00000B20 4881C31E000000      <1>     add rbx, 30
   845 00000B27 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   845 00000B2D [12C00300]          <1>
   846 00000B31 41FFD1              <1>     call r9
   847                              <1> 
   848 00000B34 4881C31E000000      <1>     add rbx, 30
   849 00000B3B 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   849 00000B41 [11C00300]          <1>
   850 00000B45 41FFD1              <1>     call r9
   851                              <1> 
   852 00000B48 4881C310000000      <1>     add rbx, 16
   853 00000B4F 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   853 00000B55 [10C00300]          <1>
   854 00000B59 0441                <1>     add al, "A"
   855 00000B5B 8803                <1>     mov byte [rbx], al
   856                              <1> 
   857 00000B5D 488D2D10000000      <1>     lea rbp, .msg
   858 00000B64 4D8D88[84040000]    <1>     lea r9, qword [r8 + debPrintNullString]
   859 00000B6B 41FFD1              <1>     call r9
   860 00000B6E 5D                  <1>     pop rbp
   861 00000B6F E99E010000          <1>     jmp l1
   862 00000B74 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   862 00000B7D 206261736520464646- <1>
   862 00000B86 464646464646464646- <1>
   862 00000B8F 46464646680A0D      <1>
   863 00000B96 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   863 00000B9F 464646464646464646- <1>
   863 00000BA8 464646464646680A0D  <1>
   864 00000BB1 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   864 00000BBA 464646464646464646- <1>
   864 00000BC3 46464646464668200A- <1>
   864 00000BCC 0D                  <1>
   865 00000BCD 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   865 00000BD6 464646464646466820  <1>
   866 00000BDF 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   866 00000BE8 464646464646466820  <1>
   867 00000BF1 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   867 00000BFA 464646464646464646- <1>
   867 00000C03 464646464646680A0D  <1>
   868 00000C0C 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   868 00000C15 464646464646464646- <1>
   868 00000C1E 464646464646680A0D  <1>
   869 00000C27 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   869 00000C30 464646464646464646- <1>
   869 00000C39 464646464646680A0D  <1>
   870 00000C42 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   870 00000C4B 464646464646464646- <1>
   870 00000C54 464646464646680A0D  <1>
   871 00000C5D 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   871 00000C66 464646464646464646- <1>
   871 00000C6F 464646464646680A0D  <1>
   872 00000C78 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   872 00000C81 204C6F676963616C20- <1>
   872 00000C8A 447269766573204646- <1>
   872 00000C93 680A0D              <1>
   873 00000C96 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   873 00000C9F 204669786564204472- <1>
   873 00000CA8 697665732020204646- <1>
   873 00000CB1 680A0D              <1>
   874 00000CB4 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   874 00000CBD 2052656D6F7661626C- <1>
   874 00000CC6 652044727673204646- <1>
   874 00000CCF 680A0D              <1>
   875 00000CD2 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   875 00000CDB 65205A3A0A0D        <1>
   876 00000CE1 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   876 00000CEA 4F4D4D414E442E434F- <1>
   876 00000CF3 4D2E2E2E0A0D00      <1>
   877 00000CFA 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   877 00000D03 626F6F742073756D6D- <1>
   877 00000D0C 6172790A0D00        <1>
   878                              <1>     %endif
   879                              <1> l1:
   880 00000D12 B436                <1>     mov ah, 36h
   881 00000D14 B200                <1>     mov dl, 0
   882 00000D16 CD41                <1>     int 41h
   883 00000D18 488D1524040000      <1>     lea rdx, tmpDTA
   884 00000D1F B41A                <1>     mov ah, 1Ah
   885 00000D21 CD41                <1>     int 41h ;Set tempDTA to current DTA
   886 00000D23 B44E                <1>     mov ah, 4Eh
   887 00000D25 488D15F9030000      <1>     lea rdx, tmpName
   888 00000D2C 0FB60DF1030000      <1>     movzx ecx, byte [tmpAttr] ;Get the search attribute
   889 00000D33 CD41                <1>     int 41h
   890 00000D35 B44F                <1>     mov ah, 4Fh
   891 00000D37 CD41                <1>     int 41h
   892 00000D39 B43D                <1>     mov ah, 3Dh
   893 00000D3B B002                <1>     mov al, RWAccess
   894 00000D3D CD41                <1>     int 41h
   895                              <1> 
   896 00000D3F B43C                <1>     mov ah, 3ch
   897 00000D41 66B90000            <1>     mov cx, 00  ;Normal attributes
   898 00000D45 488D1577050000      <1>     lea rdx, tmpName3
   899 00000D4C CD41                <1>     int 41h
   900 00000D4E 66890579050000      <1>     mov word [hdl], ax
   901                              <1>     ;breakpoint
   902 00000D55 B90B000000          <1>     mov ecx, testString1L
   903 00000D5A 488D156F050000      <1>     lea rdx, testString1
   904 00000D61 668B1D66050000      <1>     mov bx, word [hdl]  ;Get the handle in bx
   905 00000D68 B440                <1>     mov ah, 40h
   906 00000D6A CD41                <1>     int 41h
   907 00000D6C B918000000          <1>     mov ecx, testString2L
   908 00000D71 488D1563050000      <1>     lea rdx, testString2
   909 00000D78 668B1D4F050000      <1>     mov bx, word [hdl]  ;Get the handle in bx
   910 00000D7F B440                <1>     mov ah, 40h
   911 00000D81 CD41                <1>     int 41h
   912                              <1>     ;breakpoint
   913 00000D83 B43E                <1>     mov ah, 3eh
   914 00000D85 CD41                <1>     int 41h
   915                              <1>     ;breakpoint
   916                              <1> 
   917 00000D87 B43D                <1>     mov ah, 3dh
   918 00000D89 B002                <1>     mov al, RWAccess
   919 00000D8B 488D1531050000      <1>     lea rdx, tmpName3
   920 00000D92 CD41                <1>     int 41h
   921 00000D94 66890533050000      <1>     mov word [hdl], ax
   922                              <1>     ;breakpoint
   923 00000D9B B90B000000          <1>     mov ecx, testString1L
   924 00000DA0 488D159C030000      <1>     lea rdx, tmpDTA
   925 00000DA7 668B1D20050000      <1>     mov bx, word [hdl]  ;Get the handle in bx
   926 00000DAE B43F                <1>     mov ah, 3fh
   927 00000DB0 CD41                <1>     int 41h
   928                              <1> 
   929                              <1>     ;breakpoint
   930 00000DB2 B918000000          <1>     mov ecx, testString2L
   931 00000DB7 488D1585040000      <1>     lea rdx, tmpBuf2
   932 00000DBE 668B1D09050000      <1>     mov bx, word [hdl]  ;Get the handle in bx
   933 00000DC5 B43F                <1>     mov ah, 3fh
   934 00000DC7 CD41                <1>     int 41h
   935                              <1> 
   936 00000DC9 B460                <1>     mov ah, 60h
   937 00000DCB 488D355A030000      <1>     lea rsi, tmpName2
   938 00000DD2 488D3D6A040000      <1>     lea rdi, tmpBuf2
   939 00000DD9 CD41                <1>     int 41h
   940                              <1> 
   941 00000DDB B439                <1>     mov ah, 39h
   942 00000DDD 488D150F050000      <1>     lea rdx, testDir
   943 00000DE4 CD41                <1>     int 41h
   944                              <1>     ;breakpoint
   945                              <1> 
   946 00000DE6 B40D                <1>     mov ah, 0Dh
   947 00000DE8 CD41                <1>     int 41h
   948                              <1> 
   949 00000DEA B43A                <1>     mov ah, 3Ah
   950 00000DEC 488D1500050000      <1>     lea rdx, testDir
   951 00000DF3 CD41                <1>     int 41h
   952                              <1>     ;breakpoint
   953 00000DF5 B40D                <1>     mov ah, 0Dh
   954 00000DF7 CD41                <1>     int 41h
   955                              <1> l11:
   956 00000DF9 B402                <1>     mov ah, 02h
   957 00000DFB B20A                <1>     mov dl, 0Ah
   958 00000DFD CD41                <1>     int 41h
   959 00000DFF B409                <1>     mov ah, 09h
   960 00000E01 488D1516000000      <1>     lea rdx, .str
   961 00000E08 CD41                <1>     int 41h
   962                              <1>     ;lea rdx, tmpBuffer
   963                              <1>     ;mov ah, 0Ah  ;Buffered input
   964 00000E0A B980000000          <1>     mov ecx, 80h
   965 00000E0F 488D15AD030000      <1>     lea rdx, tmpBuffer
   966 00000E16 31DB                <1>     xor ebx, ebx
   967 00000E18 B43F                <1>     mov ah, 3fh
   968 00000E1A CD41                <1>     int 41h
   969 00000E1C EBDB                <1>     jmp short l11
   970 00000E1E 433A5C3E24          <1> .str: db "C:\>$"
   971                              <1> ;--------------------------------
   972                              <1> ;       PROCS FOR SYSINIT       :
   973                              <1> ;--------------------------------
   974                              <1> adjustDrvHdr:
   975                              <1> ;Input: rsi = Effective address of driver in DOS segment
   976                              <1> ;       rbp = Ptr to the start of the DOS segment
   977                              <1> ;Output: rsi = EA of next header in DOS segment
   978 00000E23 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   979 00000E27 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   980 00000E2B 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
   981 00000E32 740A                <1>     je .exit
   982 00000E34 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   983 00000E37 4881C622000000      <1>     add rsi, drvHdr_size
   984                              <1> .exit:
   985 00000E3E C3                  <1>     ret
   986                              <1> errorInit:
   987                              <1> ;If a critical error occurs during sysinit, fail through here
   988                              <1> ;Int 42h, 43h and 44h point here during sysinit
   989 00000E3F 488D2D3A000000      <1>     lea rbp, hltmsg
   990 00000E46 B804130000          <1>     mov eax, 1304h
   991 00000E4B CD30                <1>     int 30h
   992                              <1>     ;cli ;Clear interrupts
   993                              <1>     ;mov al, -1
   994                              <1>     ;mov dx, 0A1h    ;PIC2 data
   995                              <1>     ;out dx, al      ;Mask all lines
   996                              <1>     ;mov dx, 21h     ;PIC1 data
   997                              <1>     ;out dx, al      ;Mask all lines
   998                              <1> .ei0:
   999 00000E4D F4                  <1>     hlt
  1000 00000E4E EBFD                <1>     jmp short .ei0
  1001                              <1> ;--------------------------------
  1002                              <1> ;       DATA FOR SYSINIT        :
  1003                              <1> ;--------------------------------
  1004 00000E50 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
  1004 00000E59 5343502F444F532E2E- <1>
  1004 00000E62 2E0A0D24            <1>
  1005 00000E66 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
  1005 00000E6F 6C6F636174696F6E20- <1>
  1005 00000E78 4572726F720A0D00    <1>
  1006 00000E80 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
  1006 00000E89 7469616C6973696E67- <1>
  1006 00000E92 20534350444F532E53- <1>
  1006 00000E9B 59532E205379737465- <1>
  1006 00000EA4 6D2068616C74696E67- <1>
  1006 00000EAD 2E2E2E00            <1>
  1007 00000EB1 426164206F72206D69- <1> badCom  db "Bad or missing Command interpreter",0Ah,0Dh,"$"
  1007 00000EBA 7373696E6720436F6D- <1>
  1007 00000EC3 6D616E6420696E7465- <1>
  1007 00000ECC 727072657465720A0D- <1>
  1007 00000ED5 24                  <1>
  1008 00000ED6 434F4E00            <1> conName db "CON",0
  1009 00000EDA 41555800            <1> auxName db "AUX",0
  1010 00000EDE 50524E00            <1> prnName db "PRN",0
  1011                              <1> 
  1012 00000EE2 4155544F455845432E- <1> aexec   db "AUTOEXEC.BAT",0 ;ASCIIZ for AUTOEXEC
  1012 00000EEB 42415400            <1>
  1013 00000EEF 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
  1013 00000EF8 5300                <1>
  1014                              <1> 
  1015                              <1> intData:
  1016 00000EFA [0343000000000000]  <1>     dq terminateProcess ;Int 40h
  1017 00000F02 [8B53000000000000]  <1>     dq functionDispatch ;Int 41h
  1018 00000F0A [3F0E000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
  1019 00000F12 [E354000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
  1020 00000F1A [C14C000000000000]  <1>     dq dosDefCritErrHdlr 
  1021 00000F22 [914D000000000000]  <1>     dq absDiskRead      ;Int 45h
  1022 00000F2A [724D000000000000]  <1>     dq absDiskWrite     ;Int 46h
  1023 00000F32 [0A43000000000000]  <1>     dq terminateRes     ;Int 47h
  1024 00000F3A [E354000000000000]  <1>     dq defaultIretq     ;Int 48h
  1025 00000F42 [E354000000000000]  <1>     dq defaultIretq     ;Int 49h
  1026 00000F4A [E354000000000000]  <1>     dq defaultIretq     ;Int 4Ah
  1027 00000F52 [E354000000000000]  <1>     dq defaultIretq     ;Int 4Bh
  1028 00000F5A [E354000000000000]  <1>     dq defaultIretq     ;Int 4Ch
  1029 00000F62 [E354000000000000]  <1>     dq defaultIretq     ;Int 4Dh
  1030 00000F6A [E354000000000000]  <1>     dq defaultIretq     ;Int 4Eh
  1031 00000F72 [8C59000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
  1032                              <1> nData:
  1033 00000F7A [525C000000000000]  <1>     dq conHdr
  1034 00000F82 0480                <1>     dw 08004h
  1035 00000F84 [FA5D000000000000]  <1>     dq nulStrat
  1036 00000F8C [005E000000000000]  <1>     dq nulIntr
  1037 00000F94 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1038                              <1> 
  1039                              <1> diskInit:
  1040                              <1>     ;We create a function to deal with BPB parsing etc
  1041                              <1>     ;Start with the first primary partition on each hard disk (until max)
  1042                              <1>     ;   They dont have to be bootable
  1043                              <1>     ;Then go back and look for other partitions partitions. 
  1044                              <1>     ;   Add each other primary or logical ptn (until max)
  1045                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
  1046                              <1>     ;Use r8 as device counter
  1047 00000F9C 488DBD[00660000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
  1048 00000FA3 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
  1048 00000FAB 00                  <1>
  1049 00000FAC 0F84CA000000        <1>     jz .remInit ;No? Go to removables
  1050 00000FB2 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
  1050 00000FBB 00                  <1>
  1051 00000FBC B280                <1>     mov dl, 80h ;Start with HDD 0
  1052                              <1> .primary:
  1053 00000FBE 64803C25[6FC00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1053 00000FC6 03                  <1>
  1054 00000FC7 0F84AF000000        <1>     je .remInit
  1055 00000FCD 31C9                <1>     xor ecx, ecx    ;Sector 0
  1056 00000FCF E842010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
  1057 00000FD4 0F828D000000        <1>     jc .primaryEpilog
  1058                              <1>     ;Here, check MBR or BPB
  1059 00000FDA 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
  1060 00000FE3 0F857E000000        <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
  1061                              <1>     ;Now check if BPB or MBR
  1062 00000FE9 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1063 00000FEB 8A6302              <1>     mov ah, byte [rbx + 2]
  1064 00000FEE 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1065 00000FF2 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
  1066                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
  1067                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
  1068 00000FF4 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
  1069 00000FFB B104                <1>     mov cl, 4
  1070                              <1> .checkPrimary:
  1071 00000FFD 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
  1072 00001000 3C01                <1>     cmp al, 01
  1073 00001002 7421                <1>     je .primaryFound
  1074 00001004 3C04                <1>     cmp al, 04
  1075 00001006 741D                <1>     je .primaryFound
  1076 00001008 3C06                <1>     cmp al, 06
  1077 0000100A 7419                <1>     je .primaryFound
  1078 0000100C 3C0B                <1>     cmp al, 0Bh
  1079 0000100E 7415                <1>     je .primaryFound
  1080 00001010 3C0C                <1>     cmp al, 0Ch
  1081 00001012 7411                <1>     je .primaryFound
  1082 00001014 3C0E                <1>     cmp al, 0Eh
  1083 00001016 740D                <1>     je .primaryFound
  1084 00001018 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1085 0000101F FEC9                <1>     dec cl
  1086 00001021 7444                <1>     jz .primaryEpilog
  1087 00001023 EBD8                <1>     jmp short .checkPrimary
  1088                              <1> .primaryFound:
  1089                              <1>     ;Copy the first sector of this partition into memory
  1090 00001025 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1091 00001028 E8E9000000          <1>     call .initReadSector
  1092 0000102D 7238                <1>     jc .primaryEpilog
  1093                              <1>     ;Now verify this is a BPB
  1094 0000102F 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1095 00001031 8A6302              <1>     mov ah, byte [rbx + 2]
  1096 00001034 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1097 00001038 752D                <1>     jne .primaryEpilog   ;If not, skip
  1098                              <1>     ;Now copy data to internal tables
  1099 0000103A 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1100 0000103D B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1101 00001042 57                  <1>     push rdi
  1102 00001043 F348A5              <1>     rep movsq   ;Copy the BPB
  1103 00001046 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1104                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1105 00001047 4A8D9C05[CE650000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1106                              <1>     ;Add device count to rbx to point to correct entry
  1107 0000104F 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1108 00001051 4A8D9CC5[D8650000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1109 00001059 488933              <1>     mov qword [rbx], rsi
  1110 0000105C 49FFC0              <1>     inc r8  ;Goto next logical drive
  1111 0000105F 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1112                              <1> .primaryEpilog:
  1113 00001067 FEC2                <1>     inc dl  ;Goto next BIOS drive
  1114 00001069 88D6                <1>     mov dh, dl
  1115 0000106B 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1116 0000106E 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1117 00001076 0F8542FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1118                              <1> .extended:
  1119                              <1> ;We have gone through all the devices once
  1120                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1121                              <1>     ;je .remInit ;If yes, get removable devices
  1122                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1123                              <1>     ;xor ecx, ecx    ;Get MBR back
  1124                              <1>     ;call .initReadSector
  1125                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1126                              <1> .remInit:
  1127                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1128 0000107C 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1129 0000107F 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1130 00001081 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1131                              <1>     ;rdi points to the space for the subsequent bpb's
  1132                              <1> .removables:
  1133 00001084 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1134 00001086 E88B000000          <1>     call .initReadSector
  1135 0000108B 7238                <1>     jc .removableEpilogue   ;Goto next device
  1136                              <1>     ;Now verify this is a BPB
  1137 0000108D 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1138 0000108F 8A6302              <1>     mov ah, byte [rbx + 2]
  1139 00001092 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1140 00001096 752D                <1>     jne .removableEpilogue   ;If not, skip
  1141                              <1>     ;Now copy data to internal tables
  1142 00001098 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1143 0000109B B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1144 000010A0 57                  <1>     push rdi
  1145 000010A1 F348A5              <1>     rep movsq   ;Copy the BPB
  1146 000010A4 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1147                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1148 000010A5 4A8D9C05[CE650000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1149                              <1>     ;Add device count to rbx to point to correct entry
  1150 000010AD 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1151 000010AF 4A8D9CC5[D8650000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1152 000010B7 488933              <1>     mov qword [rbx], rsi
  1153 000010BA 49FFC0              <1>     inc r8  ;Goto next logical drive
  1154 000010BD 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1155                              <1> .removableEpilogue:
  1156 000010C5 FEC2                <1>     inc dl  ;Goto next BIOS device now
  1157 000010C7 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1158 000010CF 7412                <1>     je .end
  1159 000010D1 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1160 000010D8 7403                <1>     je .re0
  1161 000010DA 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1162                              <1> .re0:
  1163 000010DD 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1164 000010E1 72A1                <1>     jb .removables
  1165                              <1> .end:
  1166 000010E3 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1166 000010EB 01                  <1>
  1167 000010EC 7401                <1>     je .singleRemDev
  1168 000010EE C3                  <1>     ret
  1169                              <1> .singleRemDev:
  1170                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1171 000010EF 488D9D[CE650000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1172 000010F6 8A95[CE650000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1173 000010FC 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1174 000010FF 488D9D[D8650000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1175 00001106 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1176 00001109 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1177 0000110D 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1178 00001115 C3                  <1>     ret
  1179                              <1> .initReadSector:
  1180                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1181 00001116 B482                <1>     mov ah, 82h ;Read
  1182 00001118 B001                <1>     mov al, 1   ;One sector
  1183 0000111A 488D9D[49010000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1184 00001121 CD33                <1>     int 33h
  1185 00001123 C3                  <1>     ret
  1186 00001124 16                  <1> tmpAttr     db dirInclusive ;Search for all files
  1187 00001125 7363702A2E2A00      <1> tmpName     db "scp*.*",0
  1188 0000112C 2F746573742F746573- <1> tmpName2    db "/test/test2/../another",0
  1188 00001135 74322F2E2E2F616E6F- <1>
  1188 0000113E 7468657200          <1>
  1189 00001143 000000000000000000- <1> tmpDTA      db 80h dup 00h
  1189 0000114C 000000000000000000- <1>
  1189 00001155 000000000000000000- <1>
  1189 0000115E 000000000000000000- <1>
  1189 00001167 000000000000000000- <1>
  1189 00001170 000000000000000000- <1>
  1189 00001179 000000000000000000- <1>
  1189 00001182 000000000000000000- <1>
  1189 0000118B 000000000000000000- <1>
  1189 00001194 000000000000000000- <1>
  1189 0000119D 000000000000000000- <1>
  1189 000011A6 000000000000000000- <1>
  1189 000011AF 000000000000000000- <1>
  1189 000011B8 000000000000000000- <1>
  1189 000011C1 0000                <1>
  1190 000011C3 500000000000000000- <1> tmpBuffer   db 80, 0, 126 dup 00h 
  1190 000011CC 000000000000000000- <1>
  1190 000011D5 000000000000000000- <1>
  1190 000011DE 000000000000000000- <1>
  1190 000011E7 000000000000000000- <1>
  1190 000011F0 000000000000000000- <1>
  1190 000011F9 000000000000000000- <1>
  1190 00001202 000000000000000000- <1>
  1190 0000120B 000000000000000000- <1>
  1190 00001214 000000000000000000- <1>
  1190 0000121D 000000000000000000- <1>
  1190 00001226 000000000000000000- <1>
  1190 0000122F 000000000000000000- <1>
  1190 00001238 000000000000000000- <1>
  1190 00001241 0000                <1>
  1191 00001243 000000000000000000- <1> tmpBuf2     db 80h dup 00h
  1191 0000124C 000000000000000000- <1>
  1191 00001255 000000000000000000- <1>
  1191 0000125E 000000000000000000- <1>
  1191 00001267 000000000000000000- <1>
  1191 00001270 000000000000000000- <1>
  1191 00001279 000000000000000000- <1>
  1191 00001282 000000000000000000- <1>
  1191 0000128B 000000000000000000- <1>
  1191 00001294 000000000000000000- <1>
  1191 0000129D 000000000000000000- <1>
  1191 000012A6 000000000000000000- <1>
  1191 000012AF 000000000000000000- <1>
  1191 000012B8 000000000000000000- <1>
  1191 000012C1 0000                <1>
  1192                              <1> 
  1193                              <1> 
  1194 000012C3 6D7966696C652E7473- <1> tmpName3    db "myfile.tst",0
  1194 000012CC 7400                <1>
  1195 000012CE 0000                <1> hdl dw 0
  1196 000012D0 546573742053747269- <1> testString1  db "Test String"
  1196 000012D9 6E67                <1>
  1197                              <1> testString1L equ $ - testString1
  1198 000012DB 204D6F726520537472- <1> testString2  db " More String, Less Space"
  1198 000012E4 696E672C204C657373- <1>
  1198 000012ED 205370616365        <1>
  1199                              <1> testString2L equ $ - testString2
  1200 000012F3 7465737464697200    <1> testDir db "testdir",0
    15                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    16                                  %include "./Source/BSS/dosSeg.asm"
    17                              <1> ;This file contains the main DOS data segment
    18                              <1> dosAPT: ;Additional Page tables
    19 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    20                              <1> dosDataArea:
    21 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    22 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    23 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    24 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    25 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    26 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    27 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    28 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    29                              <1> ;Above is the system stats
    30                              <1> ;Below is the DOS vars
    31 0003C023 ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    32                              <1>     ;   A value of 0 means no chars buffered.
    33 0003C02B ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    34                              <1> sysVarsPtr:
    35 0003C033 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    36 0003C03B ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    37 0003C043 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    38                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    39 0003C04B ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    40                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    41 0003C053 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    42 0003C055 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    43 0003C05D ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    44 0003C065 ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    45 0003C06D ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    46                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    47 0003C06F ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    48 0003C070 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    49 0003C071 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    50 0003C072 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    51 0003C073 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    52                              <1> ;Additional internal variables
    53                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    54 0003C095 ??                  <1>     singleDrv   resb 1    ;Set if last drive accessed was drive B x
    55 0003C096 ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    56 0003C097 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    57                              <1>     ;Share hook functions here
    58                              <1> ;Create SFT header and corresponding array of five default sft entries
    59 0003C099 <res Ah>            <1>     firstSftHeader  resb sfth_size
    60 0003C0A3 <res 4Fh>           <1>     firstSft    resb sft_size
    61 0003C0F2 <res 4Fh>           <1>     secondSft   resb sft_size
    62 0003C141 <res 4Fh>           <1>     thirdSft    resb sft_size
    63 0003C190 <res 4Fh>           <1>     fourthSft   resb sft_size
    64 0003C1DF <res 4Fh>           <1>     fifthSft    resb sft_size
    65                              <1> 
    66                              <1> ;Virtual CONsole Buffers
    67 0003C22E ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
    68                              <1>     ;Only incremented when CON device runs vCon
    69                              <1> vConBuf:    ;Proper buffer symbol
    70 0003C22F ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
    71 0003C230 <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
    72                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
    73 0003C2B0 <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
    74 0003C330 ??                  <1>     bufpad      resb 1     ;Used to pad with LF
    75                              <1> 
    76 0003C331 ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
    77 0003C332 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    78 0003C333 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
    79 0003C334 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
    80                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
    81                              <1> 
    82 0003C335 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    83                              <1> ;Server stuff. Default to all zeros (blank)
    84 0003C336 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
    85                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
    86 0003C337 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5D01h call
    87 0003C338 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5D01h) (set to SPC)    
    88                              <1> ;Swappable Data Area
    89 0003C348 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    90 0003C368 ??                  <1>                 resb 1  ;Alignment byte
    91                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    92 0003C369 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    93 0003C36A ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    94 0003C36B ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    95 0003C36C ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    96 0003C36D ????                <1>     errorExCde  resw 1  ;Extended Error Code
    97 0003C36F ??                  <1>     errorAction resb 1  ;Suggested action for error  
    98 0003C370 ??                  <1>     errorClass  resb 1  ;Error Class
    99 0003C371 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
   100 0003C379 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   101 0003C381 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   102                              <1> 
   103 0003C389 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   104 0003C391 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   105                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   106                              <1>     ;Lower byte: User Specified
   107 0003C393 ??                  <1>     currentDrv  resb 1  ;Default drive x
   108 0003C394 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   109                              <1> ;SDA, needs to be replaced between processes
   110                              <1> sdaMainSwap:
   111 0003C395 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   112 0003C39D ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   113 0003C3A5 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   114 0003C3A7 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   115 0003C3AF ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   116 0003C3B7 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   117 0003C3BF ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   118 0003C3C1 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   119 0003C3C9 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   120 0003C3CA ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   121 0003C3CB ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   122                              <1> 
   123 0003C3CC ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   124 0003C3D4 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   125 0003C3DC ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   126 0003C3E4 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   127 0003C3EC ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   128                              <1> ;The below flag tells DOS to print ^C in the termination function
   129 0003C3ED ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   130 0003C3EE ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   131                              <1> ;Time stuff
   132                              <1> ;Read the below two as a word
   133 0003C3EF ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   134 0003C3F0 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   135 0003C3F1 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   136 0003C3F2 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   137 0003C3F4 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   138                              <1> 
   139 0003C3F5 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   140 0003C3F6 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   141 0003C3F7 ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   142                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   143                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   144                              <1> ; without forcing to re-build the whole primary request block.
   145                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   146                              <1> ; with secondary char output going through the secondary header
   147                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   148                              <1> ; for output)
   149                              <1> ;ioReqPkt is the largest possible packet
   150 0003C3F8 <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   151 0003C422 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   152 0003C44C <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   153 0003C476 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   154                              <1> ;Swappable Buffers
   155 0003C477 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   156                              <1>     ;We add an additional byte to save ah too
   157 0003C47D ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   158 0003C47F <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   159 0003C4FF <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   160 0003C57F ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   161 0003C587 ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   162 0003C58F ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   163                              <1> ;Misc bookkeeping flags and vars
   164 0003C590 <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal searching block
   165 0003C5BB <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   166 0003C5DB <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   167 0003C5E7 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards for rename
   168 0003C5F3 ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   169 0003C5FB <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need tmp CDS
   170 0003C656 ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   171 0003C657 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   172 0003C658 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   173 0003C659 ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   174 0003C65A ??                  <1>     rwFlag      resb 1  ;00h=Read, -1=Write
   175 0003C65B ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   176 0003C65C ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   177                              <1> 
   178 0003C65D ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   179 0003C65E ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   180 0003C65F ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   181 0003C660 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlvl
   182 0003C661 ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   183 0003C662 ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   184 0003C663 ??                  <1>     workingDrv  resb 1  ;Working drive number, 0 based, from DPB
   185                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   186                              <1> workingDD:  ;Create a symbol for the working device driver too
   187 0003C664 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   188 0003C66C ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   189                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   190                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   191 0003C674 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   192 0003C67C ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   193 0003C684 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   194 0003C68C ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   195 0003C68E ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   196 0003C690 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   197                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   198                              <1> ; and 32 byte offset into the sector for directory
   199 0003C698 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   200                              <1> sectTfr:    ;Symbol to use this var to hold a counter on disk read/write ops 
   201                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   202 0003C6A0 ????                <1>     entry       resw 1  ;32 byte offset into a sector or #fats sectors/fat
   203                              <1> ;***************************************************|
   204                              <1> ; Needs to be set up before any file access         |
   205                              <1> ; These vars keep track of file access properties   |
   206                              <1> ;   and must be used only for such purposes.        |
   207                              <1> ;***************************************************|
   208 0003C6A2 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   209 0003C6A6 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   210                              <1> 
   211 0003C6AA ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   212 0003C6AE ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   213 0003C6AF ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   214                              <1> 
   215 0003C6B7 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   216 0003C6B9 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   217                              <1> ;***************************************************|
   218 0003C6BD ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   219 0003C6C1 ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   220 0003C6C5 ??                  <1>     fileGrowing resb 1  ;Flag to indicate the file is growing
   221 0003C6C6 ????????            <1>     bytesAppend resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   222 0003C6CA ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   223 0003C6CE ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   224                              <1> ;Directory stuff
   225 0003C6D2 ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   226 0003C6D6 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   227 0003C6DA ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   228 0003C6DC ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   229                              <1> ;Error DPB 
   230 0003C6E0 ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary  situations
   231 0003C6E8 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   232                              <1> ;Stacks and scratch SFT
   233 0003C6E9 <res 528h>          <1>     critStack   resq 165
   234 0003CC11 ????????????????    <1>     critStakTop resq 1
   235                              <1> 
   236 0003CC19 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   237                              <1> 
   238 0003CC68 <res 638h>          <1>     AuxStack    resq 199
   239 0003D2A0 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   240 0003D2A8 <res 638h>          <1>     DiskStack   resq 199
   241 0003D8E0 ????????????????    <1>     DiskStakTop resq 1
   242                              <1> 
   243 0003D8E8 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   244 0003D8E9 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls! 
   245                              <1> ;Putting this in SDA as multiple tasks can try to parse EXE's simultaneously
   246 0003D8EA <res 70h>           <1>     exeHdrSpace resb imageFileOptionalHeader_size   ;Use for parsing an EXE hdr
   247 0003D95A <res 28h>           <1>     sectHdr     resb imageSectionHdr_size   ;Use to load one sctn hdr at a time
   248                              <1>     sdaLen      equ     $ - sda 
   249                              <1>     sdaMSLen    equ     $ - sda
   250                              <1> 
   251                              <1> ;Additional variables NOT in the SDA
   252 0003D982 <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   253                              <1>     ;for saving the current header when quickly doing a second request
   254                              <1> 
   255 0003D9AC ??                  <1>     lastDiskNum resb 1  ;Last drive that operated
   256 0003D9AD ????                <1>     lastOpTime  resw 1  ;Packed Time of last successful disk operation
   257                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   258                              <1> inExtASCII:
   259 0003D9AF ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   260 0003D9B0 ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   261                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   262                              <1>     ; copy of the date/time record
   263                              <1>     dSegLen     equ     $
    17                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    18                                  %define currSegVBase section.resSeg.vstart
    19                                  %include "./Source/Data/staticData.asm"
    20                              <1> 
    21                              <1> ;-----------------------------------:
    22                              <1> ;       Static Data Variables       :
    23                              <1> ;-----------------------------------:
    24 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    25 00000001 01                  <1> dosMinor    db 01h      ;.01
    26 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    26 0000000B 535953              <1>
    27 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    27 00000017 535953              <1>
    28                              <1> 
    29                              <1> ;-----------------------------------:
    30                              <1> ;        Static Data Tables         :
    31                              <1> ;-----------------------------------:
    32                              <1> ctryTbl:
    33                              <1> ;Country Table (defaulting to UK)
    34 0000001A 0100                <1> .dtfmt:     dw 1            ;Date time format (2 bytes)
    35                              <1>                             ;0 = month day year hh:mm:ss
    36                              <1>                             ;1 = day month year hh:mm:ss
    37                              <1>                             ;2 = year month day hh:mm:ss
    38 0000001C C2A300000000        <1> .curr:      db "£",0,0,0,0  ;ASCIIZ Currency symbol (5 chars)
    39 00000022 2C00                <1> .thouSep:   db ",",0        ;ASCIIZ Thousands separator
    40 00000024 2E00                <1> .dcmlSep:   db ".",0        ;ASCIIZ Decimal separator
    41 00000026 2D00                <1> .dateSep:   db "-",0        ;ASCIIZ Date separator
    42 00000028 3A00                <1> .timeSep:   db ":",0        ;ASCIIZ Time separator
    43 0000002A 00                  <1> .currFmt:   db 0            ;Currency Format
    44                              <1>                 ;0 = Symbol leads, without space
    45                              <1>                 ;1 = Symbol follows, without space
    46                              <1>                 ;2 = Symbol leads, one space
    47                              <1>                 ;3 = Symbol follows, one space
    48                              <1>                 ;4 = Symbol replace decimal separator
    49 0000002B 02                  <1> .digtdpt:   db 2 ;Number of digits after the decimal point
    50 0000002C 00                  <1> .timefmt:   db 0 ;Time format, Bit 0 = 0 => 12 hour clock, = 1 => 24 hour clock
    51 0000002D 0000000000000000    <1> .mapaddr:   dq 0 ;Case map address (0 is nulptr)
    52 00000035 2C00                <1> .dataSep:   db ",",0    ;Data list separator
    53 00000037 000000000000000000- <1> .resv:      db 0,0,0,0,0,0,0,0,0,0  ;Reserve 10 bytes
    53 00000040 00                  <1>
    54                              <1> 
    55                              <1> ;IO Char table
    56                              <1> ;This table has Request header length, command code and error flags
    57                              <1> ; as a packed DWORD entry
    58                              <1> ioRqCmdErrTbl:
    59                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    60                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    61 00000041 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    62 00000045 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    63 00000049 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    64 0000004D 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    65 00000051 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    66 00000055 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    67                              <1> 
    68                              <1> 
    69                              <1> 
    70                              <1> ;Keyboard vCon static data taht can be edited and replaced by a user if they
    71                              <1> ; wish to install their own custom logic.
    72 00000059 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    73 00000061 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    74 00000062 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    75                              <1> ;Extended ASCII keys with special meanings
    76 00000063 3B                  <1> extKeyTbl   db eF1
    77 00000064 F726                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    78 00000066 3C                  <1>             db eF2
    79 00000067 E926                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    80 00000069 3D                  <1>             db eF3
    81 0000006A F026                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    82 0000006C 3E                  <1>             db eF4
    83 0000006D 2527                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    84 0000006F 3F                  <1>             db eF5
    85 00000070 6A27                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    86 00000072 40                  <1>             db eF6
    87 00000073 8027                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    88 00000075 41                  <1>             db eF7
    89 00000076 8727                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    90 00000078 4B                  <1>             db eCursL
    91 00000079 4E26                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    92 0000007B 4D                  <1>             db eCursR
    93 0000007C F726                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    94 0000007E 52                  <1>             db eIns
    95 0000007F 9227                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    96 00000081 53                  <1>             db eDel
    97 00000082 9927                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    98                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    99                              <1> 
   100                              <1> ;When counting the number of days, first compute the number of years since
   101                              <1> ; 1980 and your year. 
   102                              <1> ;Then, using the table below, find the number of leap years between 1980
   103                              <1> ; and (YourYear - 1). 
   104                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   105                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   106                              <1> ;
   107                              <1> ;Use the months table to get the number of days in a normal month as leap 
   108                              <1> ; years are added using the previous comment.
   109                              <1> 
   110                              <1> ;This table is the number of days in the month
   111                              <1> ;The function which updates the days in Feb writes the number to this table
   112                              <1> monthsTbl:  
   113 00000084 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   113 0000008D 1F1E1F              <1>
   114                              <1> 
   115                              <1> ;Error tables
   116                              <1> errXlatTbl:
   117                              <1> ;Each entry is n bytes long, defined as
   118                              <1> ; Byte 0      : DOS function number for which translation will occur
   119                              <1> ; Byte 1      : Length of the table entry - 2
   120                              <1> ; Bytes n - 3 : Acceptable Error codes
   121                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   122                              <1> ;The table is terminated with a single -1 byte
   123                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   124                              <1> ; only on entry to a disk function
   125 00000090 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   126 00000094 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   127 00000099 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   128 0000009F 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   129 000000A3 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   130 000000A9 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   131 000000B0 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   132 000000B3 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   133 000000B7 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   134 000000BB 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   135 000000C0 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   136 000000C4 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   137 000000CA 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   138 000000D1 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   139 000000D5 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   140 000000D9 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   141 000000DC 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   142 000000E0 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   143 000000E4 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   144 000000E9 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   145 000000F1 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   146 000000F3 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   147 000000F8 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   148 000000FB 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   149 00000101 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   150 00000105 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   151 00000108 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   152 0000010E 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   153 00000115 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   154 0000011B 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   155 0000011F 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   156 00000123 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   157 00000126 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   158 0000012B FF                  <1>     db -1   ;End Of Table marker
   159                              <1> 
   160                              <1> 
   161                              <1> extErrTbl:
   162                              <1> ;This table contains the default values for how to respond
   163                              <1> ; to particular errors. Fields with -1 need to be filled in before
   164                              <1> ; setting variables using this table.
   165                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   166                              <1> ; Byte 0: Extended Error Code as a byte
   167                              <1> ; Byte 1: Error Class
   168                              <1> ; Byte 2: Error Suggested Action
   169                              <1> ; Byte 3: Error Locus
   170                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   171                              <1> ;
   172                              <1> ;Error 01: Invalid function number
   173 0000012C 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   174                              <1> ;Error 02: File not found
   175 00000130 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   176                              <1> ;Error 03: Path not found
   177 00000134 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   178                              <1> ;Error 04: Too many open handles, and no handles are left
   179 00000138 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   180                              <1> ;Error 05: Access being denied
   181 0000013C 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   182                              <1> ;Error 06: Invalid File handle being provided
   183 00000140 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   184                              <1> ;Error 07: MCB chain destroyed
   185 00000144 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   186                              <1> ;Error 08: No Memory remaining
   187 00000148 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   188                              <1> ;Error 09: Invalid MCB block Address
   189 0000014C 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   190                              <1> ;Error 0A: Bad Environment block
   191 00000150 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   192                              <1> ;Error 0B: Data provided in a bad format
   193 00000154 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   194                              <1> ;Error 0C: Access Code Invalid
   195 00000158 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   196                              <1> ;Error 0D: Error due to Invalid Data provided
   197 0000015C 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   198                              <1> ;Error 0F: Error due to a bad drive letter being provided
   199 00000160 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   200                              <1> ;Error 10: Error due to attempting to delete the CWD
   201 00000164 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   202                              <1> ;Error 11: Error due to a unknown device being used
   203 00000168 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   204                              <1> ;Error 12: No more file handles available
   205 0000016C 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   206                              <1> ;Error 50: Network request not supported
   207 00000170 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   208                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   209 00000174 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   210                              <1> ;Error 21: File Locking Violation
   211 00000178 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   212                              <1> ;Error 54: Too many levels of redirection error
   213 0000017C 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   214                              <1> ;Error 56: Bad resource password provided
   215 00000180 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   216                              <1> ;Error 52: Directory already exists
   217 00000184 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   218                              <1> ;Error 32: Network request not supported by DOS
   219 00000188 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   220                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   221 0000018C 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   222                              <1> ;Error 57: Bad parameter in request
   223 00000190 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   224                              <1> ;Error 53: Fail was returned from Int 44h
   225 00000194 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   226                              <1> ;Error 24: Sharing Buffer Full
   227 00000198 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   228 0000019C FFFFFFFF            <1>     dd -1   ;End of table signature
   229                              <1> 
   230                              <1> badDirNameChar: ;This table needs to be replaced in other Codepages (i.e. Kanji)
   231 000001A0 000102030405060708- <1>     db 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
   231 000001A9 090A0B0C0D0E0F      <1>
   232 000001B0 101112131415161718- <1>     db 10h,11h,12h,13h,14h,15h,16h,17h,18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
   232 000001B9 191A1B1C1D1E1F      <1>
   233 000001C0 222A2B2C2E2F3A3B3C- <1>     db '"', "*", "+",",",".","/",":",";","<","=",">","?","[","\","]","|"
   233 000001C9 3D3E3F5B5C5D7C      <1>
   234                              <1> badDirNameCharL equ $ - badDirNameChar
   235                              <1> ;The chars * ? . \ / need to always be handled separately
   236                              <1> 
   237                              <1> extAsciiTbl:    ;This table needs to be replaced in other Codepages
   238 000001D0 809A45418E418F8045- <1>     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 45h, 45h, 45h, 49h, 49h, 49h
   238 000001D9 4545494949          <1>
   239 000001DE 8E8F9092924F994F55- <1>     db 8Eh, 8Fh, 90h, 92h, 92h, 4Fh, 99h, 4Fh, 55h, 55h, 59h, 99h, 9Ah, 9Bh
   239 000001E7 5559999A9B          <1>
   240 000001EC 9C9D9E9F41494F55A5- <1>     db 9Ch, 9Dh, 9Eh, 9Fh, 41h, 49h, 4Fh, 55h, 0A5h, 0A5h, 0A6h, 0A7h, 0A8h
   240 000001F5 A5A6A7A8            <1>
   241 000001F9 A9AAABACADAEAFB0B1- <1>     db 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h
   241 00000202 B2B3B4              <1>
   242 00000205 B5B6B7B8B9BABBBCBD- <1>     db 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h 
   242 0000020E BEBFC0              <1>
   243 00000211 C1C2C3C4C5C6C7C8C9- <1>     db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh
   243 0000021A CACBCC              <1>
   244 0000021D CDCECFD0D1D2D3D4D5- <1>     db 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h 
   244 00000226 D6D7D8              <1>
   245 00000229 D9DADBDCDDDEDFE0E1- <1>     db 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
   245 00000232 E2E3E4              <1>
   246 00000235 E5E6E7E8E9EAEBECED- <1>     db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h
   246 0000023E EEEFF0              <1>
   247 00000241 F1F2F3F4F5F6F7F8F9- <1>     db 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh
   247 0000024A FAFBFC              <1>
   248 0000024D FDFEFF              <1>     db 0FDh, 0FEh, 0FFh
   249                              <1> 
   250                              <1> extAsciiSig:   ;This table needs to replaces in other Codepages
   251 00000250 F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F0h, 0F6h, 0F6h 
   251 00000259 F0F6F6              <1>
   252 0000025C F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h
   252 00000265 F6F6F6              <1>
   253 00000268 F6F6F6F6F6F6F6F6F8- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F8h, 0FFh, 0F6h, 0FFh 
   253 00000271 FFF6FF              <1>
   254 00000274 FFFFFFFFFFFFFFF4F4- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h 
   254 0000027D FFFEF6              <1>
   255 00000280 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h 
   255 00000289 FFF4F4              <1>
   256 0000028C F4F4F4FFFFFFFFFFFF- <1>     db 0F4h, 0F4h, 0F4h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   256 00000295 FFFFFF              <1>
   257 00000298 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   257 000002A1 FFFFFF              <1>
   258 000002A4 FFFFFFFFFFFFFFF6F6- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh 
   258 000002AD F6FFFF              <1>
   259 000002B0 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   259 000002B9 FFFFFF              <1>
   260 000002BC FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   260 000002C5 FFFFFF              <1>
   261 000002C8 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   
    20                                  %include "./Source/Data/dispTbl.asm"
    21                              <1> ;Kernel Dispatch Function Table
    22                              <1> 
    23                              <1> kDispTbl:
    24 000002D0 5141                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    25 000002D2 7D1E                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    26 000002D4 8A1E                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    27 000002D6 471F                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    28 000002D8 701F                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    29 000002DA 781F                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    30 000002DC 901F                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    31 000002DE C31F                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    32 000002E0 E81F                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    33 000002E2 4720                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    34 000002E4 FA22                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    35 000002E6 5620                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    36 000002E8 6220                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    37 000002EA 8C53                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    38 000002EC BE53                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    39 000002EE 3628                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    40 000002F0 3628                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    41 000002F2 3628                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    42 000002F4 3628                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    43 000002F6 3628                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    44 000002F8 3628                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    45 000002FA 3628                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    46 000002FC 3628                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    47 000002FE 3628                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    48 00000300 4756                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    49 00000302 D753                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    50 00000304 3728                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    51 00000306 DE53                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    52 00000308 E053                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    53 0000030A 4756                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    54 0000030C 4756                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    55 0000030E 7E54                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    56 00000310 4756                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    57 00000312 4A28                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    58 00000314 4A28                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    59 00000316 4A28                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    60 00000318 4A28                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    61 0000031A 2954                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    62 0000031C 6040                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    63 0000031E 4A28                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    64 00000320 4A28                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    65 00000322 4A28                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    66 00000324 7025                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    67 00000326 9725                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    68 00000328 9D25                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    69 0000032A BE25                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    70 0000032C 5B54                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    71 0000032E 4B28                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    72 00000330 6954                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    73 00000332 2341                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    74 00000334 8054                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    75 00000336 4153                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    76 00000338 B854                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    77 0000033A C954                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    78 0000033C DA54                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    79 0000033E 4F48                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    80 00000340 7848                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    81 00000342 2B16                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    82 00000344 7618                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    83 00000346 491A                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    84 00000348 5E28                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    85 0000034A 6F28                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    86 0000034C 7D29                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    87 0000034E BC29                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    88 00000350 F729                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    89 00000352 032A                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    90 00000354 DF2A                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    91 00000356 4E2B                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    92 00000358 B53A                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    93 0000035A 382C                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    94 0000035C 762C                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    95 0000035E 181B                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    96 00000360 E73A                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    97 00000362 113D                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    98 00000364 193E                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    99 00000366 9842                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
   100 00000368 5341                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
   101 0000036A 1E55                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
   102 0000036C 962C                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   103 0000036E FF2C                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   104 00000370 6F53                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   105 00000372 7853                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   106 00000374 2C55                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   107 00000376 3D55                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   108 00000378 1756                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   109 0000037A 4D40                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   110 0000037C 2F2D                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   111 0000037E 511B                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   112 00000380 AC3F                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   113 00000382 1E56                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   114 00000384 442D                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   115 00000386 442D                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   116 00000388 442D                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   117 0000038A 4856                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   118 0000038C BB56                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   119 0000038E BB56                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   120 00000390 511B                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   121 00000392 4756                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   122 00000394 8153                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   123 00000396 4756                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   124 00000398 8A53                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   125 0000039A 7848                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   126 0000039C 7848                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   127 0000039E 492D                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   128 000003A0 4E2D                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   129 000003A2 4756                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   130                              <1> kDispTblL  equ $ - kDispTbl 
   131                              <1> 
   132                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   133 000003A4 1056                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   134 000003A6 1B30                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   135 000003A8 384D                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   136 000003AA 1356                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   137 000003AC 604E                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   138                              <1> mDispTblL   equ     $ - mDispTbl
   139                              <1> 
   140                              <1> serverDispTbl:  ;Server Dispatch functions
   141 000003AE 01                  <1>     db 01h  ;Number of entries needs to be 0Bh, but for now, 01h
   142 000003AF 8B55                <1>     dw serverDispatch - serverDispTbl
    21                                  %include "./Source/Debug/debug.asm"
    22                              <1> ;This file contains debugging macros, procs and strings
    23                              <1> ; that we can use to output to COM1 bypassing the operating system.
    24                              <1> ;A serial terminal must be connected for this to work.
    25                              <1> 
    26                              <1> ;Variables and equates
    27                              <1> 
    28 000003B1 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    29                              <1> 
    30 000003B9 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    30 000003C2 39414243444546      <1>
    31                              <1> ;Common procedures
    32                              <1> debMakeDebuggerRespond:
    33 000003C9 488D2D26000000      <1>     lea rbp, .msg
    34 000003D0 E8AF000000          <1>     call debPrintNullString
    35 000003D5 B900001000          <1>     mov ecx, 100000h
    36                              <1> .waiting:
    37 000003DA FFC9                <1>     dec ecx
    38 000003DC 740C                <1>     jz .timeout
    39 000003DE B402                <1>     mov ah, 02h ;Blocking recieve!
    40 000003E0 31D2                <1>     xor edx, edx
    41 000003E2 CD34                <1>     int 34h
    42 000003E4 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    43 000003E7 75F1                <1>     jnz .waiting
    44 000003E9 C3                  <1>     ret
    45                              <1> .timeout:
    46 000003EA 488D2D47000000      <1>     lea rbp, .msg2
    47 000003F1 E98E000000          <1>     jmp debPrintNullString
    48 000003F6 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    48 000003FF 6B6579206174207468- <1>
    48 00000408 65207465726D696E61- <1>
    48 00000411 6C20746F20636F6E74- <1>
    48 0000041A 696E7565206F722077- <1>
    48 00000423 61697420666F722074- <1>
    48 0000042C 696D656F75742E2E2E- <1>
    48 00000435 0A0D00              <1>
    49 00000438 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    49 00000441 436F6E74696E75696E- <1>
    49 0000044A 672E2E2E0A0D00      <1>
    50                              <1> debPrintHexByte:
    51                              <1> ;Print the hex byte in al as a hex value
    52 00000451 52                  <1>     push rdx
    53 00000452 53                  <1>     push rbx
    54 00000453 50                  <1>     push rax
    55                              <1> 
    56 00000454 88C2                <1>     mov dl, al           ;save byte in dl
    57 00000456 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    58 0000045A 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    59 0000045F 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    60 00000463 E80C000000          <1>     call .wrchar
    61 00000468 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    62 0000046B E804000000          <1>     call .wrchar
    63                              <1> 
    64 00000470 58                  <1>     pop rax
    65 00000471 5B                  <1>     pop rbx
    66 00000472 5A                  <1>     pop rdx
    67 00000473 C3                  <1>     ret
    68                              <1> .wrchar:
    69 00000474 6687DB              <1>     xchg bx, bx
    70 00000477 488D1D3BFFFFFF      <1>     lea rbx, debascii
    71 0000047E D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    72 0000047F B401                <1>     mov ah, 01h
    73 00000481 CD34                <1>     int 34h  ;print char
    74 00000483 C3                  <1>     ret
    75                              <1> 
    76                              <1> debPrintNullString:
    77                              <1> ;Print a null terminated string pointed to by rbp
    78 00000484 56                  <1>     push rsi
    79 00000485 50                  <1>     push rax
    80 00000486 52                  <1>     push rdx
    81 00000487 31D2                <1>     xor edx, edx    ;Select COM1
    82 00000489 4889EE              <1>     mov rsi, rbp
    83                              <1> .getChar:
    84 0000048C AC                  <1>     lodsb
    85 0000048D 84C0                <1>     test al, al
    86 0000048F 7406                <1>     jz .exit
    87 00000491 B401                <1>     mov ah, 01h
    88 00000493 CD34                <1>     int 34h
    89 00000495 EBF5                <1>     jmp short .getChar
    90                              <1> .exit:
    91 00000497 5A                  <1>     pop rdx
    92 00000498 58                  <1>     pop rax
    93 00000499 5E                  <1>     pop rsi
    94 0000049A C3                  <1>     ret
    95                              <1> 
    96                              <1> debPrintDOSStack:
    97                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    98                              <1> ;Shows me which function, and parameters passed and returned
    99 0000049B 488D2DA5010000      <1>     lea rbp, .a1
   100 000004A2 E8DDFFFFFF          <1>     call debPrintNullString
   101 000004A7 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
   102 000004AE 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
   103 000004B5 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   104 000004B8 E802030000          <1>     call overlayQword
   105 000004BD 4881C316000000      <1>     add rbx, 22
   106 000004C4 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   107 000004C8 E8F2020000          <1>     call overlayQword
   108 000004CD 4881C316000000      <1>     add rbx, 22
   109 000004D4 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   110 000004D8 E8E2020000          <1>     call overlayQword
   111 000004DD 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   112 000004E4 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   113 000004E8 E8D2020000          <1>     call overlayQword
   114 000004ED 4881C316000000      <1>     add rbx, 22 
   115 000004F4 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   116 000004F8 E8C2020000          <1>     call overlayQword
   117 000004FD 4881C316000000      <1>     add rbx, 22
   118 00000504 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   119 00000508 E8B2020000          <1>     call overlayQword
   120 0000050D 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   121 00000514 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   122 00000518 E8A2020000          <1>     call overlayQword
   123 0000051D 4881C316000000      <1>     add rbx, 22
   124 00000524 488B05(DCC30300)    <1>     mov rax, qword [oldRSP]
   125 0000052B 480560000000        <1>     add rax, callerFrame_size
   126 00000531 E889020000          <1>     call overlayQword
   127 00000536 4881C316000000      <1>     add rbx, 22
   128 0000053D 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   129 00000541 E879020000          <1>     call overlayQword
   130 00000546 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   131 0000054D 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   132 00000551 E869020000          <1>     call overlayQword
   133 00000556 488D2D06000000      <1>     lea rbp, .a0
   134 0000055D E822FFFFFF          <1>     call debPrintNullString
   135 00000562 C3                  <1>     ret
   136                              <1> 
   137 00000563 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   137 0000056C 303030303030303030- <1>
   137 00000575 30306820            <1>
   138 00000579 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   138 00000582 303030303030303030- <1>
   138 0000058B 30306820            <1>
   139 0000058F 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   139 00000598 303030303030303030- <1>
   139 000005A1 30306820            <1>
   140 000005A5 0A0D                <1>     db  0Ah,0Dh
   141 000005A7 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   141 000005B0 303030303030303030- <1>
   141 000005B9 30306820            <1>
   142 000005BD 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   142 000005C6 303030303030303030- <1>
   142 000005CF 30306820            <1>
   143 000005D3 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   143 000005DC 303030303030303030- <1>
   143 000005E5 30306820            <1>
   144 000005E9 0A0D                <1>     db 0Ah, 0Dh
   145 000005EB 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   145 000005F4 303030303030303030- <1>
   145 000005FD 30306820            <1>
   146 00000601 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   146 0000060A 303030303030303030- <1>
   146 00000613 30306820            <1>
   147 00000617 7269703D3030303030- <1>     db "rip=0000000000000000h"
   147 00000620 303030303030303030- <1>
   147 00000629 303068              <1>
   148 0000062C 0A0D                <1>     db 0Ah, 0Dh
   149 0000062E 666C673D3030303030- <1>     db "flg=0000000000000000h "
   149 00000637 303030303030303030- <1>
   149 00000640 30306820            <1>
   150 00000644 0A0D00              <1>     db 0Ah,0Dh,0
   151 00000647 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   151 00000650 206F6E20496E742034- <1>
   151 00000659 316820737461636B0A- <1>
   151 00000662 0D00                <1>
   152                              <1> 
   153                              <1> debDPBptr:
   154                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   155 00000664 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   156 0000066B 4889E8              <1>     mov rax, rbp
   157 0000066E E84C010000          <1>     call overlayQword
   158 00000673 488D2D06000000      <1>     lea rbp, .dpb
   159 0000067A E805FEFFFF          <1>     call debPrintNullString
   160 0000067F C3                  <1>     ret
   161                              <1> .dpb: 
   162 00000680 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   162 00000689 203030303030303030- <1>
   162 00000692 303030303030303068- <1>
   162 0000069B 200A0D00            <1>
   163                              <1> 
   164                              <1> debDPBBPBptr:
   165                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   166                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   167 0000069F 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   168 000006A6 4889E8              <1>     mov rax, rbp
   169 000006A9 E811010000          <1>     call overlayQword
   170 000006AE 4881C321000000      <1>     add rbx, 33
   171 000006B5 4889F0              <1>     mov rax, rsi
   172 000006B8 E802010000          <1>     call overlayQword
   173 000006BD 488D2D06000000      <1>     lea rbp, .dpb
   174 000006C4 E8BBFDFFFF          <1>     call debPrintNullString
   175 000006C9 C3                  <1>     ret
   176                              <1> .dpb: 
   177 000006CA 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   177 000006D3 203030303030303030- <1>
   177 000006DC 303030303030303068- <1>
   177 000006E5 2066726F6D20        <1>
   178 000006EB 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   178 000006F4 203030303030303030- <1>
   178 000006FD 303030303030303068- <1>
   178 00000706 200A0D00            <1>
   179                              <1> overlayByte:
   180                              <1>     ;Called with number in rax
   181                              <1>     ;pointer to START of 16 byte space for number in rbx
   182 0000070A 53                  <1>     push rbx
   183 0000070B 51                  <1>     push rcx
   184 0000070C 52                  <1>     push rdx
   185 0000070D 55                  <1>     push rbp
   186 0000070E 4889DD              <1>     mov rbp, rbx
   187 00000711 4889C2              <1>     mov rdx, rax
   188 00000714 48FFC5              <1>     inc rbp ;Go to end of number
   189                              <1> 
   190 00000717 488D1D9BFCFFFF      <1>     lea rbx, debascii
   191 0000071E 88D0                <1>     mov al, dl  ;Go low nybble first
   192 00000720 240F                <1>     and al, 0Fh
   193 00000722 D7                  <1>     xlatb
   194 00000723 884500              <1>     mov byte [rbp], al
   195 00000726 48FFCD              <1>     dec rbp ;Go down one char pos
   196 00000729 88D0                <1>     mov al, dl
   197 0000072B 24F0                <1>     and al, 0F0h    ;Hi nybble next
   198 0000072D C0E804              <1>     shr al, 4   ;Shift hi nybble low
   199 00000730 D7                  <1>     xlatb
   200 00000731 884500              <1>     mov byte [rbp], al  ;Store char
   201                              <1> 
   202 00000734 5D                  <1>     pop rbp
   203 00000735 5A                  <1>     pop rdx
   204 00000736 59                  <1>     pop rcx
   205 00000737 5B                  <1>     pop rbx
   206 00000738 C3                  <1>     ret
   207                              <1> 
   208                              <1> overlayWord:
   209                              <1>     ;Called with number in rax
   210                              <1>     ;pointer to START of 16 byte space for number in rbx
   211 00000739 53                  <1>     push rbx
   212 0000073A 51                  <1>     push rcx
   213 0000073B 52                  <1>     push rdx
   214 0000073C 55                  <1>     push rbp
   215 0000073D 4889DD              <1>     mov rbp, rbx
   216 00000740 4889C2              <1>     mov rdx, rax
   217 00000743 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   218 0000074A B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   219 0000074F 488D1D63FCFFFF      <1>     lea rbx, debascii
   220                              <1> .ow0:
   221 00000756 88D0                <1>     mov al, dl  ;Go low nybble first
   222 00000758 240F                <1>     and al, 0Fh
   223 0000075A D7                  <1>     xlatb
   224 0000075B 884500              <1>     mov byte [rbp], al
   225 0000075E 48FFCD              <1>     dec rbp ;Go down one char pos
   226 00000761 88D0                <1>     mov al, dl
   227 00000763 24F0                <1>     and al, 0F0h    ;Hi nybble next
   228 00000765 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   229 00000768 D7                  <1>     xlatb
   230 00000769 884500              <1>     mov byte [rbp], al  ;Store char
   231 0000076C 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   232 00000770 48FFCD              <1>     dec rbp
   233 00000773 FFC9                <1>     dec ecx
   234 00000775 75DF                <1>     jnz .ow0
   235 00000777 5D                  <1>     pop rbp
   236 00000778 5A                  <1>     pop rdx
   237 00000779 59                  <1>     pop rcx
   238 0000077A 5B                  <1>     pop rbx
   239 0000077B C3                  <1>     ret
   240                              <1> 
   241                              <1> overlayDword:
   242                              <1>     ;Called with number in rax
   243                              <1>     ;pointer to START of 16 byte space for number in rbx
   244 0000077C 53                  <1>     push rbx
   245 0000077D 51                  <1>     push rcx
   246 0000077E 52                  <1>     push rdx
   247 0000077F 55                  <1>     push rbp
   248 00000780 4889DD              <1>     mov rbp, rbx
   249 00000783 4889C2              <1>     mov rdx, rax
   250 00000786 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   251 0000078D B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   252 00000792 488D1D20FCFFFF      <1>     lea rbx, debascii
   253                              <1> .od0:
   254 00000799 88D0                <1>     mov al, dl  ;Go low nybble first
   255 0000079B 240F                <1>     and al, 0Fh
   256 0000079D D7                  <1>     xlatb
   257 0000079E 884500              <1>     mov byte [rbp], al
   258 000007A1 48FFCD              <1>     dec rbp ;Go down one char pos
   259 000007A4 88D0                <1>     mov al, dl
   260 000007A6 24F0                <1>     and al, 0F0h    ;Hi nybble next
   261 000007A8 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   262 000007AB D7                  <1>     xlatb
   263 000007AC 884500              <1>     mov byte [rbp], al  ;Store char
   264 000007AF 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   265 000007B3 48FFCD              <1>     dec rbp
   266 000007B6 FFC9                <1>     dec ecx
   267 000007B8 75DF                <1>     jnz .od0
   268 000007BA 5D                  <1>     pop rbp
   269 000007BB 5A                  <1>     pop rdx
   270 000007BC 59                  <1>     pop rcx
   271 000007BD 5B                  <1>     pop rbx
   272 000007BE C3                  <1>     ret
   273                              <1> 
   274                              <1> overlayQword:
   275                              <1>     ;Called with number in rax
   276                              <1>     ;pointer to START of 16 byte space for number in rbx
   277 000007BF 53                  <1>     push rbx
   278 000007C0 51                  <1>     push rcx
   279 000007C1 52                  <1>     push rdx
   280 000007C2 55                  <1>     push rbp
   281 000007C3 4889DD              <1>     mov rbp, rbx
   282 000007C6 4889C2              <1>     mov rdx, rax
   283 000007C9 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   284 000007D0 B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   285 000007D5 488D1DDDFBFFFF      <1>     lea rbx, debascii
   286                              <1> .oq0:
   287 000007DC 88D0                <1>     mov al, dl  ;Go low nybble first
   288 000007DE 240F                <1>     and al, 0Fh
   289 000007E0 D7                  <1>     xlatb
   290 000007E1 884500              <1>     mov byte [rbp], al
   291 000007E4 48FFCD              <1>     dec rbp ;Go down one char pos
   292 000007E7 88D0                <1>     mov al, dl
   293 000007E9 24F0                <1>     and al, 0F0h    ;Hi nybble next
   294 000007EB C0E804              <1>     shr al, 4   ;Shift hi nybble low
   295 000007EE D7                  <1>     xlatb
   296 000007EF 884500              <1>     mov byte [rbp], al  ;Store char
   297 000007F2 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   298 000007F6 48FFCD              <1>     dec rbp
   299 000007F9 FFC9                <1>     dec ecx
   300 000007FB 75DF                <1>     jnz .oq0
   301 000007FD 5D                  <1>     pop rbp
   302 000007FE 5A                  <1>     pop rdx
   303 000007FF 59                  <1>     pop rcx
   304 00000800 5B                  <1>     pop rbx
   305 00000801 C3                  <1>     ret
   306                              <1> 
   307                              <1> debPrintFunctionName:
   308                              <1> ;Prints the DOS function that has been entered
   309                              <1> ;Entered with ah = Function number
   310 00000802 88E0                <1>     mov al, ah  ;Get dos function number
   311 00000804 488D1DAEFBFFFF      <1>     lea rbx, debascii
   312 0000080B 488D1535000000      <1>     lea rdx, .number
   313 00000812 24F0                <1>     and al, 0F0h    ;Get high nybble first
   314 00000814 C0E804              <1>     shr al, 4
   315 00000817 D7                  <1>     xlatb
   316 00000818 8802                <1>     mov byte [rdx], al
   317 0000081A 88E0                <1>     mov al, ah
   318 0000081C 240F                <1>     and al, 0Fh
   319 0000081E D7                  <1>     xlatb
   320 0000081F 884201              <1>     mov byte [rdx + 1], al
   321 00000822 488D2D06000000      <1>     lea rbp, .dosString
   322 00000829 E856FCFFFF          <1>     call debPrintNullString
   323 0000082E C3                  <1>     ret
   324 0000082F 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   324 00000838 696F6E20496E742034- <1>
   324 00000841 31682F41483D        <1>
   325 00000847 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   326                              <1> 
   327                              <1> ;----------------:
   328                              <1> ;!!!! MACROS !!!!:
   329                              <1> ;----------------:
   330                              <1> ;Insert macro when entering a debug block
   331                              <1> %macro debugEnterM 0
   332                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   333                              <1>     mov rsp, debStackTop
   334                              <1> ;Push all registers except rsp on stack
   335                              <1>     push rax
   336                              <1>     push rbx
   337                              <1>     push rcx
   338                              <1>     push rdx
   339                              <1>     push rsi
   340                              <1>     push rdi
   341                              <1>     push rbp
   342                              <1>     push r8
   343                              <1>     push r9
   344                              <1>     push r10
   345                              <1>     push r11
   346                              <1>     push r12
   347                              <1>     push r13
   348                              <1>     push r14
   349                              <1>     push r15
   350                              <1>     pushfq
   351                              <1> %endmacro
   352                              <1> ;Insert macro when exiting a debug block
   353                              <1> %macro debugExitM 0
   354                              <1>     popfq
   355                              <1>     pop r15
   356                              <1>     pop r14
   357                              <1>     pop r13
   358                              <1>     pop r12
   359                              <1>     pop r11
   360                              <1>     pop r10
   361                              <1>     pop r9
   362                              <1>     pop r8
   363                              <1>     pop rbp
   364                              <1>     pop rdi
   365                              <1>     pop rsi
   366                              <1>     pop rdx
   367                              <1>     pop rcx
   368                              <1>     pop rbx
   369                              <1>     pop rax
   370                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   371                              <1> %endmacro
    22                                  %include "./Source/Kernel/FAT/buffun.asm"
    23                              <1> ;This file contains FAT disk buffer related functions that
    24                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    25                              <1> ;----------------------------------------------------
    26                              <1> ;           Externally referenced functions         :
    27                              <1> ;----------------------------------------------------
    28                              <1> 
    29                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    30                              <1> ;Sets the buffer in rdi to the head of the chain
    31                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    32                              <1> ;Output: Buffer header set to the head of the chain
    33 0000084D 48393D(55C00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    34 00000854 7428                <1>     je .exit
    35 00000856 56                  <1>     push rsi
    36 00000857 488B35(55C00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    37                              <1> .mainlp:
    38 0000085E 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    39 00000861 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    40 00000863 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    41 00000866 EBF6                <1>     jmp short .mainlp
    42                              <1> .fnd:
    43 00000868 57                  <1>     push rdi
    44 00000869 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    45 0000086C 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    46 0000086F 5F                  <1>     pop rdi ;Get original buf back
    47 00000870 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    48 00000873 488735(55C00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    49 0000087A 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    50 0000087D 5E                  <1>     pop rsi
    51                              <1> .exit:
    52                              <1>     return
    18                              <2> %%_ret:
    19 0000087E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    53                              <1> 
    54                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h 
    55                              <1> ;1 External reference
    56                              <1> ;Input: rdi = Buffer header to flush and free
    57 0000087F E844000000          <1>     call flushBuffer
    58 00000884 7306                <1>     jnc .exit
    59                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    60 00000886 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    61                              <1> .exit:
    62                              <1>     return
    18                              <2> %%_ret:
    19 0000088C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    65                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    66                              <1> ;Output: rdi = First disk buffer
    67 0000088D 488B3D(55C00300)    <1>     mov rdi, [bufHeadPtr]
    68 00000894 57                  <1>     push rdi
    69                              <1> .lp:
    70 00000895 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    71 00000899 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    72 0000089C 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    73 000008A3 75F0                <1>     jne .lp
    74 000008A5 5F                  <1>     pop rdi
    75                              <1>     return
    18                              <2> %%_ret:
    19 000008A6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    76                              <1> 
    77                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    78                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    79                              <1> ; second buffer in the chain in rdi
    80                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    81                              <1> ;Output: rdi = Second buffer in the chain
    82 000008A7 52                  <1>     push rdx
    83 000008A8 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    84 000008AB E89DFFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    85 000008B0 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    86 000008B3 5A                  <1>     pop rdx
    87                              <1>     return
    18                              <2> %%_ret:
    19 000008B4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    90                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    91                              <1> ;Input: rdi = Buffer header to start searching at
    92                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    93                              <1> ;        ZF=ZE => No unreferenced buffer found
    94 000008B5 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    95 000008B9 750C                <1>     jnz .exit
    96 000008BB 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    97 000008BE 4881FFFFFFFFFF      <1>     cmp rdi, -1
    98 000008C5 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    99                              <1> .exit:
   100                              <1>     return
    18                              <2> %%_ret:
    19 000008C7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   101                              <1> 
   102                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
   103                              <1> ;Flushes the data in a sector buffer to disk!
   104                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   105                              <1> ;Exit:  CF=NC : Success
   106                              <1> ;       CF=CY : Fail, terminate the request
   107                              <1> ;First make request to device driver
   108 000008C8 50                  <1>     push rax
   109 000008C9 53                  <1>     push rbx
   110 000008CA 51                  <1>     push rcx
   111 000008CB 52                  <1>     push rdx
   112 000008CC 56                  <1>     push rsi
   113 000008CD 55                  <1>     push rbp
   114                              <1> ;If the buffer is freed, skip flushing to avoid issues
   115 000008CE 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
   116 000008D2 7454                <1>     je .fbFreeExit  ;If it is free exit
   117 000008D4 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   118 000008D8 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   119                              <1> .fbRequest0:
   120 000008DA BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   121 000008DF F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   122 000008E3 7406                <1>     jz .fbRequest1
   123 000008E5 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   124                              <1> .fbRequest1:
   125 000008EB 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   126 000008EE B901000000          <1>     mov ecx, 1  ;One sector to copy
   127 000008F3 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   128 000008F7 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   129 000008FB 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   130 000008FF E85E460000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   131 00000904 E8E5440000          <1>     call absDiskDriverCall    ;Make Driver Request
   132 00000909 7525                <1>     jnz .fbFail
   133                              <1> ;Now check if the buffer was a FAT, to write additional copies
   134 0000090B F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   135 0000090F 7417                <1>     jz .fbFreeExit  ;If not, exit
   136 00000911 FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   137 00000914 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   138 00000916 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   139 00000919 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   140 0000091D E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   141                              <1> .fbFreeExit1:
   142 00000922 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   143 00000925 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   144                              <1> .fbFreeExit:
   145 00000928 F8                  <1>     clc
   146                              <1> .fbExitFail:
   147 00000929 5D                  <1>     pop rbp
   148 0000092A 5E                  <1>     pop rsi
   149 0000092B 5A                  <1>     pop rdx
   150 0000092C 59                  <1>     pop rcx
   151 0000092D 5B                  <1>     pop rbx
   152 0000092E 58                  <1>     pop rax
   153                              <1>     return
    18                              <2> %%_ret:
    19 0000092F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   154                              <1> .fbFail:
   155                              <1> ;Enter here only if the request failed
   156 00000930 FFCE                <1>     dec esi
   157 00000932 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   158                              <1> ;Request failed thrice, critical error call
   159 00000934 C605(C9C30300)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   160 0000093B E809420000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   161 00000940 3C01                <1>     cmp al, critRetry
   162 00000942 7496                <1>     je .fbRequest0
   163                              <1>     ;Else we fail (Ignore=Fail here)
   164 00000944 F9                  <1>     stc ;Set error flag to indicate fail
   165 00000945 E9DFFFFFFF          <1>     jmp .fbExitFail
   166                              <1> 
   167                              <1> testDirtyBufferForDrive:    ;External linkage
   168                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   169                              <1> ;Input: al = Drive number (0 based)
   170                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   171                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   172 0000094A 53                  <1>     push rbx
   173 0000094B 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   174                              <1> .tdbfdCheckBuffer:
   175 00000952 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   176 00000955 7509                <1>     jne .tdbfdGotoNextBuffer
   177 00000957 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   178 0000095B 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   179 0000095D F9                  <1>     stc ;Else dirty buffer found, set carry flag
   180                              <1> .tdbfdExit:
   181 0000095E 5B                  <1>     pop rbx
   182                              <1>     return
    18                              <2> %%_ret:
    19 0000095F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   183                              <1> .tdbfdGotoNextBuffer:
   184 00000960 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   185 00000963 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   186 0000096A 74F2                <1>     je .tdbfdExit
   187 0000096C EBE4                <1>     jmp short .tdbfdCheckBuffer
   188                              <1> 
   189                              <1> freeBuffersForDPB:
   190                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   191                              <1> ; to have a drive number of -1, thus freeing it
   192                              <1> ;Given DPB is in rbp
   193 0000096E 53                  <1>     push rbx
   194 0000096F 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   195                              <1> .i0:
   196 00000976 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   197 0000097A 7506                <1>     jne .i1 ;If no, skip freeing
   198 0000097C 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   199                              <1> .i1:
   200 00000982 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   201 00000985 4881FBFFFFFFFF      <1>     cmp rbx, -1
   202 0000098C 75E8                <1>     jne .i0
   203                              <1> .exit:
   204 0000098E 5B                  <1>     pop rbx
   205                              <1>     return
    18                              <2> %%_ret:
    19 0000098F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   206                              <1> setBufferDirty:
   207 00000990 55                  <1>     push rbp
   208 00000991 9C                  <1>     pushfq
   209 00000992 488B2D(90C60300)    <1>     mov rbp, qword [currBuff]
   210 00000999 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   211 0000099D EB1C                <1>     jmp short clearBufferReferenced.exit
   212                              <1> setBufferReferenced:
   213                              <1> ;Sets the current buffer in the buffer variable as referenced.
   214                              <1> ; AKA DOS is done with it.
   215                              <1> ;Saves flag state too 
   216 0000099F 55                  <1>     push rbp
   217 000009A0 9C                  <1>     pushfq
   218 000009A1 488B2D(90C60300)    <1>     mov rbp, qword [currBuff]
   219 000009A8 804D0920            <1>     or byte [rbp + bufferHdr.bufferFlags], refBuffer
   220 000009AC EB0D                <1>     jmp short clearBufferReferenced.exit
   221                              <1> clearBufferReferenced:
   222                              <1> ;Clears the referenced bit, if the buffer becomes referenced again
   223                              <1> ; Called if DOS is not quite done with this buffer.
   224 000009AE 55                  <1>     push rbp
   225 000009AF 9C                  <1>     pushfq
   226 000009B0 488B2D(90C60300)    <1>     mov rbp, qword [currBuff]
   227 000009B7 806509DF            <1>     and byte [rbp + bufferHdr.bufferFlags], ~refBuffer
   228                              <1> .exit:
   229 000009BB 9D                  <1>     popfq
   230 000009BC 5D                  <1>     pop rbp
   231                              <1>     return
    18                              <2> %%_ret:
    19 000009BD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   232                              <1> 
   233                              <1> 
   234                              <1> getBuffer: ;Internal Linkage ONLY
   235                              <1> ;
   236                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   237                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   238                              <1> ;Flushes if not in disk change mode. 
   239                              <1> ;If in disk change mode, will check to see if the selected buffer 
   240                              <1> ; has data referring a device using the same DPB as we are changing.
   241                              <1> ; If it is, skip flushing, if not, flush first!
   242                              <1> ;
   243                              <1> ;This function will return a pointer to the desired data sector OR 
   244                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   245                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   246                              <1> ;Entry: rax = Sector to read
   247                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   248                              <1> ;       rsi = DPB to use for transaction
   249                              <1> ;Exit:  CF=NC => 
   250                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   251                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   252 000009BE 51                  <1>     push rcx
   253 000009BF 52                  <1>     push rdx
   254 000009C0 56                  <1>     push rsi
   255 000009C1 57                  <1>     push rdi
   256 000009C2 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   257 000009C4 E831010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   258 000009C9 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   259 000009D0 7419                <1>     je .rbReadNewSector
   260 000009D2 48893D(90C60300)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   261 000009D9 E8D0FFFFFF          <1>     call clearBufferReferenced  ;Set buffer to unref again if it was referenced
   262                              <1> .rbExit:
   263 000009DE F8                  <1>     clc
   264                              <1> .rbExitNoFlag:
   265 000009DF 5F                  <1>     pop rdi
   266 000009E0 5E                  <1>     pop rsi
   267 000009E1 5A                  <1>     pop rdx
   268 000009E2 59                  <1>     pop rcx
   269 000009E3 488B1D(90C60300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   270                              <1>     return
    18                              <2> %%_ret:
    19 000009EA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   271                              <1> .rbReadNewSector:
   272 000009EB E8B3000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   273 000009F0 803D(E8D80300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   274 000009F7 7506                <1>     jne .flush  ;We are not, flush buffer
   275 000009F9 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   276 000009FD 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used. Lose the sector
   277                              <1> .flush:
   278 000009FF E87BFEFFFF          <1>     call flushAndFreeBuffer
   279 00000A04 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   280                              <1> .skipFlush:
   281                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   282                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   283                              <1>     ; is no longer owned by that File so we mark the owner as none
   284 00000A06 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   285 00000A0E 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   286 00000A11 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   287 00000A14 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   288 00000A18 80F902              <1>     cmp cl, fatBuffer
   289 00000A1B B201                <1>     mov dl, 1   ;Default values if not fat buffer
   290 00000A1D 7503                <1>     jne .rbNonFATbuffer
   291 00000A1F 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   292                              <1> .rbNonFATbuffer:
   293 00000A22 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   294 00000A25 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   295 00000A28 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   296 00000A2B 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   297 00000A2F C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   298 00000A33 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   299 00000A38 EBA5                <1>     jmp short .rbExitNoFlag
   300                              <1> 
   301                              <1> readSectorBuffer:   ;Internal Linkage
   302                              <1> ;Reads a sector into a built sector buffer
   303                              <1> ;Entry: rdi = Pointer to buffer header
   304                              <1> ;Exit:  CF=NC : Success
   305                              <1> ;       CF=CY : Fail, terminate the request
   306                              <1> ;       rbx pointing to buffer header
   307                              <1> ;First make request to device driver
   308 00000A3A 50                  <1>     push rax
   309 00000A3B 53                  <1>     push rbx
   310 00000A3C 51                  <1>     push rcx
   311 00000A3D 52                  <1>     push rdx
   312 00000A3E 56                  <1>     push rsi
   313 00000A3F 55                  <1>     push rbp
   314                              <1> .rsRequest0:
   315 00000A40 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   316 00000A45 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   317 00000A49 7406                <1>     jz .rsRequest1
   318 00000A4B 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   319                              <1> .rsRequest1:
   320 00000A51 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   321 00000A54 B901000000          <1>     mov ecx, 1  ;One sector to copy
   322 00000A59 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   323 00000A5D 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   324 00000A61 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   325 00000A65 E803450000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   326 00000A6A E87F430000          <1>     call absDiskDriverCall    ;Make Driver Request
   327 00000A6F 7508                <1>     jnz .rsFail
   328                              <1> .rsExit:
   329 00000A71 F8                  <1>     clc
   330                              <1> .rsExitFail:
   331 00000A72 5D                  <1>     pop rbp
   332 00000A73 5E                  <1>     pop rsi
   333 00000A74 5A                  <1>     pop rdx
   334 00000A75 59                  <1>     pop rcx
   335 00000A76 5B                  <1>     pop rbx
   336 00000A77 58                  <1>     pop rax
   337                              <1>     return
    18                              <2> %%_ret:
    19 00000A78 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   338                              <1> .rsFail:
   339                              <1> ;Enter here only if the request failed
   340 00000A79 FFCE                <1>     dec esi
   341 00000A7B 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   342                              <1> ;Request failed thrice, critical error call
   343                              <1> ;First free the buffer if we failed to read data into it 
   344 00000A7D 0FB74F08            <1>     movzx ecx, word [rdi + bufferHdr.driveNumber]   ;Save drv num for retry
   345 00000A81 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh ;Free buffer and clear flags
   346 00000A87 C605(C9C30300)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   347 00000A8E E8B6400000          <1>     call diskDevErr
   348 00000A93 3C01                <1>     cmp al, critRetry
   349 00000A95 7506                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   350 00000A97 66894F08            <1>     mov word [rdi + bufferHdr.driveNumber], cx ;Put drvNm + flgs if trying again
   351 00000A9B EBA3                <1>     jmp short .rsRequest0
   352                              <1> .fail:
   353 00000A9D F9                  <1>     stc ;Set error flag to indicate fail
   354 00000A9E E9CFFFFFFF          <1>     jmp .rsExitFail
   355                              <1>     
   356                              <1> findLRUBuffer: ;Internal Linkage
   357                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   358                              <1> ; in rbx and the currBuff variable
   359                              <1> ;Input: Nothing
   360                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   361                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   362 00000AA3 52                  <1>     push rdx
   363 00000AA4 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   364 00000AAB 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   365 00000AAF 7436                <1>     je .flbExit 
   366 00000AB1 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   367 00000AB8 742D                <1>     je .flbExit
   368                              <1> .flbWalk:
   369 00000ABA 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   370 00000ABD 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   371 00000AC0 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   372 00000AC4 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   373 00000AC6 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   374 00000ACD 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   375 00000ACF 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   376                              <1> .flbHeadLink:
   377 00000AD6 488B15(55C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   378 00000ADD 48893D(55C00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   379 00000AE4 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   380                              <1> .flbExit:
   381 00000AE7 5A                  <1>     pop rdx
   382 00000AE8 48893D(90C60300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   383                              <1>     return
    18                              <2> %%_ret:
    19 00000AEF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   384                              <1> .flbFreeLink:
   385 00000AF0 51                  <1>     push rcx
   386 00000AF1 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   387 00000AF4 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   388 00000AF7 59                  <1>     pop rcx
   389 00000AF8 EBDC                <1>     jmp short .flbHeadLink
   390                              <1> 
   391                              <1> findSectorInBuffer:     ;Internal linkage
   392                              <1> ;Finds the Buffer for a sector
   393                              <1> ;If the sector is not in a buffer, returns with a -1
   394                              <1> ;Input: rax = Sector number
   395                              <1> ;        dl = Drive number
   396                              <1> ;Output: rdi = Buffer hdr pointer or -1
   397 00000AFA 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   398                              <1> .fsiCheckBuffer:
   399 00000B01 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   400 00000B04 7507                <1>     jne .fsiGotoNextBuffer
   401 00000B06 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   402 00000B0A 7501                <1>     jne .fsiGotoNextBuffer
   403                              <1> .fsiExit:
   404                              <1>     return
    18                              <2> %%_ret:
    19 00000B0C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   405                              <1> .fsiGotoNextBuffer:
   406 00000B0D 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   407 00000B10 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   408 00000B17 74F3                <1>     je .fsiExit
   409 00000B19 EBE6                <1>     jmp short .fsiCheckBuffer
   410                              <1> ;-----------------------------------------------------------------------------
   411                              <1> ;SPECIAL BUFFER FUNCTIONS
   412                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   413                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   414                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   415                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   416                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   417                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   418                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   419                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   420                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   421                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   422                              <1> ;-----------------------------------------------------------------------------
   423                              <1> getBufForDataNoFile:
   424                              <1> ;Returns a buffer to use for disk data in rbx
   425                              <1> ;Requires a File Handle.
   426                              <1> ;Input: [workingDPB] = DPB to transact on
   427                              <1> ;       rax = Sector to transfer
   428                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   429 00000B1B 51                  <1>     push rcx
   430 00000B1C B108                <1>     mov cl, dataBuffer
   431 00000B1E 56                  <1>     push rsi
   432 00000B1F 57                  <1>     push rdi
   433 00000B20 488B35(64C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   434 00000B27 E892FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   435 00000B2C 725F                <1>     jc getBufCommon.exit
   436 00000B2E 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   437 00000B36 EB55                <1>     jmp short getBufCommon.exit
   438                              <1> getBufForDirNoFile:
   439                              <1> ;Returns a buffer to use for disk dir data in rbx
   440                              <1> ;Requires a File Handle.
   441                              <1> ;Input: [workingDPB] = DPB to transact on
   442                              <1> ;       rax = Sector to transfer
   443                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   444 00000B38 51                  <1>     push rcx
   445 00000B39 B104                <1>     mov cl, dirBuffer
   446 00000B3B 56                  <1>     push rsi
   447 00000B3C 57                  <1>     push rdi
   448 00000B3D 488B35(64C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   449 00000B44 E875FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   450 00000B49 7242                <1>     jc getBufCommon.exit
   451 00000B4B 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   452 00000B53 EB38                <1>     jmp short getBufCommon.exit
   453                              <1> getBufForFat:
   454                              <1> ;Returns a buffer to use for fat data in rbx
   455                              <1> ;Input: [workingDPB] = DPB to transact on
   456                              <1> ;       rax = Sector to transfer
   457                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   458 00000B55 51                  <1>     push rcx
   459 00000B56 B102                <1>     mov cl, fatBuffer
   460 00000B58 EB03                <1>     jmp short getBufCommon2
   461                              <1> getBufForDOS:
   462                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   463                              <1> ;Input: [workingDPB] = DPB to transact on
   464                              <1> ;       rax = Sector to transfer
   465                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   466 00000B5A 51                  <1>     push rcx
   467 00000B5B B101                <1>     mov cl, dosBuffer
   468                              <1> getBufCommon2:
   469 00000B5D 56                  <1>     push rsi
   470 00000B5E 57                  <1>     push rdi    ;Push rdi to preserve it
   471 00000B5F 488B35(64C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   472 00000B66 EB15                <1>     jmp short getBufCommon.makeReq
   473                              <1> getBufForDir:
   474                              <1> ;Returns a buffer to use for disk directory data in rbx
   475                              <1> ;Input: [currentSFT] = File to manipulate
   476                              <1> ;       rax = Sector to transfer
   477                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   478 00000B68 51                  <1>     push rcx
   479 00000B69 B104                <1>     mov cl, dirBuffer
   480 00000B6B EB03                <1>     jmp short getBufCommon
   481                              <1> getBufForData:
   482                              <1> ;Returns a buffer to use for disk data in rbx
   483                              <1> ;Requires a File Handle.
   484                              <1> ;Input: [currentSFT] = File to manipulate
   485                              <1> ;       rax = Sector to transfer
   486                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   487 00000B6D 51                  <1>     push rcx
   488 00000B6E B108                <1>     mov cl, dataBuffer
   489                              <1> getBufCommon:
   490 00000B70 56                  <1>     push rsi
   491 00000B71 57                  <1>     push rdi
   492 00000B72 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   493 00000B79 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   494                              <1> .makeReq:
   495 00000B7D E83CFEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   496 00000B82 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   497                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   498                              <1>     ; flushed to the file!
   499                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   500                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   501                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   502 00000B84 F6C103              <1>     test cl, dosBuffer | fatBuffer
   503 00000B87 7504                <1>     jnz .exit
   504 00000B89 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   505                              <1> .exit:
   506 00000B8D 5F                  <1>     pop rdi
   507 00000B8E 5E                  <1>     pop rsi
   508 00000B8F 59                  <1>     pop rcx
   509                              <1>     return
    18                              <2> %%_ret:
    19 00000B90 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   510                              <1> 
   511                              <1> flushFile:
   512                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   513                              <1> ; FAT/DOS buffers to flush
   514                              <1> ; We flush and free, and set to head of chain before continuing to search
   515                              <1> ;Input: rdi = is the file (sft) we wish to flush
   516                              <1> ;Output: CF=NC => All ok
   517                              <1> ;        CF=CY => A sector failed, exit. 
   518 00000B91 57                  <1>     push rdi
   519 00000B92 56                  <1>     push rsi
   520                              <1>     ;First check if the file has been written to?
   521 00000B93 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
   522 00000B99 7434                <1>     jz .exitNoFlush ;Exit without flushing
   523 00000B9B 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   524 00000B9E 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   525                              <1> .ffLoop:
   526 00000BA5 4881FFFFFFFFFF      <1>     cmp rdi, -1
   527 00000BAC 741B                <1>     je .exit
   528 00000BAE F6470907            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer | dirBuffer
   529 00000BB2 751E                <1>     jnz .found  ;Flush if either bit is set
   530 00000BB4 48817F1FFFFFFFFF    <1>     cmp qword [rdi + bufferHdr.owningFile], -1  ;If owning file is -1, flush too
   531 00000BBC 7414                <1>     je .found
   532 00000BBE 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   533 00000BC2 740E                <1>     je .found
   534 00000BC4 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   535 00000BC7 EBDC                <1>     jmp short .ffLoop
   536                              <1> .exit:
   537                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   538 00000BC9 66816605BFFF        <1>     and word [rsi + sft.wDeviceInfo], ~blokFileToFlush  ;Clear that bit!
   539                              <1> .exitNoFlush:
   540 00000BCF 5E                  <1>     pop rsi
   541 00000BD0 5F                  <1>     pop rdi
   542                              <1>     return
    18                              <2> %%_ret:
    19 00000BD1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   543                              <1> .found:
   544                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   545                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   546 00000BD2 E8A8FCFFFF          <1>     call flushAndFreeBuffer ;Flush and free buffer
   547 00000BD7 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   548                              <1>     ;If the sector has been successfully flushed, then it
   549                              <1>     ; is no longer owned by that File so we mark the owner as none
   550 00000BD9 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   551 00000BE1 E8C1FCFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   552 00000BE6 EBBD                <1>     jmp short .ffLoop
    23                                  %include "./Source/Kernel/FAT/fat.asm"
    24                              <1> ;-----------------------------------:
    25                              <1> ;       File System routines        :
    26                              <1> ;-----------------------------------:
    27                              <1> getFATtype:
    28                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    29                              <1> ;Entry: rbp = DPB to ascertain FAT
    30                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    31 00000BE8 53                  <1>     push rbx
    32 00000BE9 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    33 00000BEC B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    34 00000BF1 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    35 00000BF7 730F                <1>     jae .exit
    36 00000BF9 FFC9                <1>     dec ecx     ;FAT 12 marker
    37 00000BFB 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    38 00000C01 7205                <1>     jb .exit
    39 00000C03 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    40                              <1> .exit:
    41 00000C08 5B                  <1>     pop rbx
    42                              <1>     return
    18                              <2> %%_ret:
    19 00000C09 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    43                              <1> 
    44                              <1> clust2FATEntry:
    45                              <1> ;Converts a cluster number to a offset in the FAT
    46                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    47                              <1> ;        eax = Cluster number to look for
    48                              <1> ;Exit:   eax = Sector on disk of FAT 
    49                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    50                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    51 00000C0A 53                  <1>     push rbx
    52 00000C0B 55                  <1>     push rbp
    53 00000C0C 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
    54 00000C13 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    55 00000C16 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    56 00000C1C 731E                <1>     jae .fat32
    57 00000C1E 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    58 00000C24 7209                <1>     jb .fat12
    59                              <1> ;FAT16
    60 00000C26 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    61 00000C28 6801000000          <1>     push qword 1
    62 00000C2D EB15                <1>     jmp short .common
    63                              <1> .fat12:
    64 00000C2F 89C1                <1>     mov ecx, eax    ;ecx = eax
    65 00000C31 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    66 00000C33 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    67 00000C35 6800000000          <1>     push qword 0
    68 00000C3A EB08                <1>     jmp short .common
    69                              <1> .fat32:
    70 00000C3C 6802000000          <1>     push qword 2
    71 00000C41 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    72                              <1> .common:
    73                              <1> ;eax has the FAToffset
    74 00000C44 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    75 00000C48 31D2                <1>     xor edx, edx    ;edx = 0
    76 00000C4A F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    77 00000C4C 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    78 00000C50 01D8                <1>     add eax, ebx
    79 00000C52 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    80 00000C53 5D                  <1>     pop rbp
    81 00000C54 5B                  <1>     pop rbx
    82                              <1>     return
    18                              <2> %%_ret:
    19 00000C55 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    83                              <1> 
    84                              <1> getStartSectorOfCluster:
    85                              <1> ;Input: eax = Cluster Number
    86                              <1> ;       rbp = dpb pointer
    87                              <1> ;Output: rax = Starting Sector number for cluster
    88                              <1> ;Gives the data sector we are at in the current cluster
    89                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    90 00000C56 51                  <1>     push rcx
    91 00000C57 09C0                <1>     or eax, eax ;Zero upper dword
    92 00000C59 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    93                              <1> .fat32Root:
    94 00000C5B 482D02000000        <1>     sub rax, 2
    95 00000C61 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    96 00000C64 48D3E0              <1>     shl rax, cl
    97 00000C67 31C9                <1>     xor ecx, ecx
    98 00000C69 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    99 00000C6C 4801C8              <1>     add rax, rcx
   100                              <1>     ;rax now has the first sector of the current cluster
   101 00000C6F 59                  <1>     pop rcx
   102                              <1>     return
    18                              <2> %%_ret:
    19 00000C70 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   103                              <1> .rootDir:
   104 00000C71 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
   105 00000C74 E86FFFFFFF          <1>     call getFATtype
   106 00000C79 81F902000000        <1>     cmp ecx, 2
   107 00000C7F 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
   108                              <1>     ;Else rax has the first sector of the Root Dir
   109 00000C81 59                  <1>     pop rcx
   110                              <1>     return
    18                              <2> %%_ret:
    19 00000C82 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   111                              <1> 
   112                              <1> 
   113                              <1> getLastClusterInChain:
   114                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
   115                              <1> ;Input: eax = Cluster to start searching at
   116                              <1> ;Output: eax = Last cluster in chain
   117                              <1> ;If input eax = 0, output eax = 0
   118 00000C83 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   119                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C85 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   120 00000C87 53                  <1>     push rbx
   121                              <1> .lp:
   122 00000C88 89C3                <1>     mov ebx, eax
   123 00000C8A E8A4010000          <1>     call readFAT
   124 00000C8F 7209                <1>     jc .exit
   125 00000C91 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   126 00000C96 75F0                <1>     jne .lp
   127 00000C98 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   128                              <1> .exit: 
   129 00000C9A 5B                  <1>     pop rbx
   130                              <1>     return
    18                              <2> %%_ret:
    19 00000C9B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   131                              <1> 
   132                              <1> getNumberOfClustersInChain:
   133                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   134                              <1> ;Input: eax = Cluster to start searching at
   135                              <1> ;Output: eax = Number of clusters in the chain
   136                              <1> ;If input eax = 0, output eax = 0
   137 00000C9C 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   138                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C9E 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   139 00000CA0 51                  <1>     push rcx
   140 00000CA1 31C9                <1>     xor ecx, ecx
   141                              <1> .lp:
   142 00000CA3 FFC1                <1>     inc ecx
   143 00000CA5 E889010000          <1>     call readFAT
   144 00000CAA 7209                <1>     jc .exit
   145 00000CAC 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   146 00000CB1 75F0                <1>     jne .lp
   147 00000CB3 89C8                <1>     mov eax, ecx    ;Get the count
   148                              <1> .exit: 
   149 00000CB5 59                  <1>     pop rcx
   150                              <1>     return
    18                              <2> %%_ret:
    19 00000CB6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> getClusterInChain:
   153                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   154                              <1> ;If an EOC is encountered, then ecx will not be 
   155                              <1> ;Input: eax = Start Cluster to start searching from
   156                              <1> ;       ecx = Number of clusters to go forwards by;
   157                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   158                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   159                              <1> ;Also usual CF babble.
   160 00000CB7 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   161                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000CB9 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   162 00000CBB 53                  <1>     push rbx
   163 00000CBC 67E30F              <1>     jecxz .exit
   164                              <1> .lp:
   165 00000CBF 89C3                <1>     mov ebx, eax
   166 00000CC1 E86D010000          <1>     call readFAT
   167 00000CC6 7206                <1>     jc .exit
   168 00000CC8 FFC9                <1>     dec ecx
   169 00000CCA 75F3                <1>     jnz .lp
   170 00000CCC 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   171                              <1> .exit:
   172 00000CCE 5B                  <1>     pop rbx
   173                              <1>     return
    18                              <2> %%_ret:
    19 00000CCF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   174                              <1> 
   175                              <1> startNewChain:
   176                              <1> ;Working dpb must be set
   177                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   178                              <1> ;If CF=CY, hard error
   179 00000CD0 53                  <1>     push rbx
   180 00000CD1 56                  <1>     push rsi
   181 00000CD2 E853000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   182 00000CD7 7215                <1>     jc .exit    ;Disk read error?
   183 00000CD9 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   184 00000CDE 740E                <1>     je .exit
   185 00000CE0 BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   186 00000CE5 89C3                <1>     mov ebx, eax
   187 00000CE7 E8F0010000          <1>     call writeFAT   ;Propagate the CF 
   188 00000CEC 89D8                <1>     mov eax, ebx
   189                              <1> .exit:
   190 00000CEE 5E                  <1>     pop rsi
   191 00000CEF 5B                  <1>     pop rbx
   192                              <1>     return
    18                              <2> %%_ret:
    19 00000CF0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   193                              <1> 
   194                              <1> allocateClusters:
   195                              <1> ;Working dpb must be set. 
   196                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   197                              <1> ;       ebx = Cluster to link to the new cluster
   198                              <1> ;Output:    
   199                              <1> ;   CF=NC => Complete.
   200                              <1> ;   If eax = -1, then no more free clusters. 
   201                              <1> ;   CF=CY => Hard error, exit
   202                              <1> ; ecx always has number of allocated clusters
   203 00000CF1 53                  <1>     push rbx
   204 00000CF2 56                  <1>     push rsi
   205 00000CF3 51                  <1>     push rcx    ;Save tfr count on stack
   206 00000CF4 67E32B              <1>     jecxz .exit ;Allocating nothing? Exit
   207                              <1> .allocateLoop:
   208 00000CF7 E82E000000          <1>     call findFreeCluster
   209 00000CFC 7224                <1>     jc .exit
   210 00000CFE 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   211 00000D03 741D                <1>     je .exit    ;If the cluster number is -1, return immediately
   212                              <1>     ;eax has first free cluster value to use
   213                              <1>     ;First we link the previous cluster to this cluster
   214 00000D05 BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   215 00000D0A E8CD010000          <1>     call writeFAT   ;Allocate this cluster first
   216 00000D0F 7211                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   217                              <1>     ;eax points to this allocated cluster
   218                              <1>     ;ebx points to the previous last cluster
   219 00000D11 89C6                <1>     mov esi, eax    ;New cluster as "value"
   220 00000D13 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   221 00000D15 E8C2010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   222 00000D1A 7206                <1>     jc .exit
   223 00000D1C 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   224 00000D1E FFC9                <1>     dec ecx ;One less cluster allocated
   225 00000D20 75D5                <1>     jnz .allocateLoop
   226                              <1> .exit:
   227 00000D22 5E                  <1>     pop rsi ;Pop the tfr count into esi
   228 00000D23 F7D9                <1>     neg ecx
   229 00000D25 01F1                <1>     add ecx, esi
   230 00000D27 5E                  <1>     pop rsi
   231 00000D28 5B                  <1>     pop rbx
   232                              <1>     return
    18                              <2> %%_ret:
    19 00000D29 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> findFreeCluster:
   235                              <1> ;Walks the FAT to find a free cluster and returns the 
   236                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   237                              <1> ;Works on the workingDPB
   238                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   239 00000D2A 53                  <1>     push rbx
   240 00000D2B 52                  <1>     push rdx
   241 00000D2C 55                  <1>     push rbp
   242 00000D2D 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   243                              <1>     ;Use readFAT
   244                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   245                              <1>     ;If readFAT returns 0 then its a free cluster
   246                              <1>     breakpoint
    78 00000D34 6687DB              <2> xchg bx, bx
   247 00000D37 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   248                              <1> .fatLoop:
   249 00000D3C 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   250 00000D3E E8F0000000          <1>     call readFAT    ;Read the value at eax, if it is 0, then eax is free
   251 00000D43 7210                <1>     jc .exitFail    ;If something goes wrong, just return
   252 00000D45 85C0                <1>     test eax, eax   ;Is this cluster free?
   253 00000D47 7409                <1>     jz .exit    ;If yes, exit
   254 00000D49 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   255 00000D4D 3B450F              <1>     cmp eax, dword [rbp + dpb.dClusterCount]
   256 00000D50 76EA                <1>     jbe .fatLoop
   257                              <1> .exit:
   258 00000D52 89D8                <1>     mov eax, ebx
   259 00000D54 F8                  <1>     clc
   260                              <1> .exitFail:      ;Keep carry flag
   261 00000D55 5D                  <1>     pop rbp
   262 00000D56 5A                  <1>     pop rdx
   263 00000D57 5B                  <1>     pop rbx
   264                              <1>     return
    18                              <2> %%_ret:
    19 00000D58 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   265                              <1> 
   266                              <1> findFreeClusterData:
   267                              <1> ;Walks the FAT to find a free cluster and returns the 
   268                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   269                              <1> ;Also finds NumberOfFreeCLusters. Both fields get filled in the workingDPB
   270                              <1> ;Works on the workingDPB
   271                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   272 00000D59 53                  <1>     push rbx
   273 00000D5A 52                  <1>     push rdx
   274 00000D5B 55                  <1>     push rbp
   275 00000D5C 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   276 00000D63 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   277                              <1>     ;Mark dFirstFreeCluster as -1 and dNumberOfFreeClusters as 0
   278 00000D67 31D2                <1>     xor edx, edx
   279 00000D69 895531              <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], edx ;Zero this field
   280 00000D6C FFCA                <1>     dec edx
   281 00000D6E 89552D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], edx ;Set to -1, unknown (i.e. none)
   282                              <1>     ;Use readFAT
   283                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   284                              <1>     ;If readFAT returns 0 then its a free cluster
   285 00000D71 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   286 00000D76 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   287                              <1> .fatLoop:
   288 00000D79 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   289 00000D7B E8B3000000          <1>     call readFAT
   290 00000D80 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   291 00000D82 85C0                <1>     test eax, eax   ;Is this cluster free?
   292 00000D84 750C                <1>     jne .fatProceed
   293 00000D86 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   294 00000D89 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   295 00000D90 7410                <1>     je .fatFirst
   296                              <1> .fatProceed:
   297 00000D92 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   298 00000D96 39D0                <1>     cmp eax, edx
   299 00000D98 76DF                <1>     jbe .fatLoop
   300                              <1> .exit:
   301 00000D9A 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   302 00000D9D F8                  <1>     clc
   303                              <1> .exitFail:      ;Keep carry flag
   304 00000D9E 5D                  <1>     pop rbp
   305 00000D9F 5A                  <1>     pop rdx
   306 00000DA0 5B                  <1>     pop rbx
   307                              <1>     return
    18                              <2> %%_ret:
    19 00000DA1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   308                              <1> .fatFirst:
   309 00000DA2 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   310 00000DA5 EBEB                <1>     jmp short .fatProceed
   311                              <1> 
   312                              <1> getNextSectorOfFile:
   313                              <1> ;This function will read the next sector for a file into a buffer.
   314                              <1> ;If the next sector to be read lives in the next cluster, it will update
   315                              <1> ; the vars appropriately
   316                              <1> ;
   317                              <1> ;Input: rbp = dpb pointer
   318                              <1> ;Output:
   319                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   320                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   321                              <1> ;       CF=CY => Critical error occurred and was FAILed
   322                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   323                              <1> ; next cluster and read first sector 
   324                              <1>     ;Check if we need to go to next cluster
   325 00000DA7 8A05(AEC60300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   326 00000DAD 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   327 00000DB0 7416                <1>     je .gotoNextCluster
   328                              <1>     ;Goto next sector in same cluster
   329 00000DB2 FE05(AEC60300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   330 00000DB8 48FF05(AFC60300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   331 00000DBF 488B05(AFC60300)    <1>     mov rax, qword [currSectD]
   332                              <1> .exitOK:
   333 00000DC6 F8                  <1>     clc
   334                              <1> .exitFail:
   335                              <1>     return
    18                              <2> %%_ret:
    19 00000DC7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   336                              <1> .gotoNextCluster:
   337 00000DC8 8B05(A6C60300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   338 00000DCE E860000000          <1>     call readFAT
   339 00000DD3 72F2                <1>     jc .exitFail
   340                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   341 00000DD5 3DFFFFFFFF          <1>     cmp eax, -1
   342 00000DDA 74EA                <1>     je .exitOK
   343                              <1> ;Update the new cluster and sector information
   344 00000DDC 8905(A6C60300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   345 00000DE2 FF05(A2C60300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   346 00000DE8 E869FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   347 00000DED 488905(AFC60300)    <1>     mov qword [currSectD], rax  ;Save it
   348 00000DF4 C605(AEC60300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   349 00000DFB EBC9                <1>     jmp short .exitOK
   350                              <1> 
   351                              <1> unlinkFAT:
   352                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   353                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   354                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   355                              <1> ; cluster must be set to EOC before this proc is called.
   356                              <1> ;Stops at first invalid cluster number.
   357                              <1> ;
   358                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   359                              <1> ;       rbp = Current DPB to use for disk
   360                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   361                              <1> 
   362 00000DFD 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   363 00000DFE 56                  <1>     push rsi
   364 00000DFF E80A000000          <1>     call truncateFAT    ;Preserved eax
   365 00000E04 31F6                <1>     xor esi, esi  ;Free first cluster too
   366 00000E06 E8D1000000          <1>     call writeFAT
   367 00000E0B 5E                  <1>     pop rsi
   368 00000E0C 58                  <1>     pop rax
   369                              <1>     return
    18                              <2> %%_ret:
    19 00000E0D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   370                              <1> 
   371                              <1> truncateFAT:
   372                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   373                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   374                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   375                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   376                              <1> ;Stops at first invalid cluster number.
   377                              <1> ;
   378                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   379                              <1> ;       rbp = Current DPB to use for disk
   380                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   381 00000E0E 50                  <1>     push rax
   382 00000E0F 53                  <1>     push rbx
   383 00000E10 56                  <1>     push rsi
   384 00000E11 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   385                              <1> .lp:
   386 00000E13 E81B000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   387 00000E18 7215                <1>     jc .exit    ;Error exit
   388 00000E1A 3DFFFFFFFF          <1>     cmp eax, -1 ;End of chain?
   389 00000E1F 740E                <1>     je .exit
   390 00000E21 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   391 00000E22 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   392 00000E24 E8B3000000          <1>     call writeFAT
   393 00000E29 7204                <1>     jc .exit    ;Error exit
   394 00000E2B 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   395 00000E2D EBE4                <1>     jmp short .lp
   396                              <1> .exit:
   397 00000E2F 5E                  <1>     pop rsi
   398 00000E30 5B                  <1>     pop rbx
   399 00000E31 58                  <1>     pop rax
   400                              <1>     return
    18                              <2> %%_ret:
    19 00000E32 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   401                              <1> readFAT:
   402                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   403                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   404                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   405                              <1> ;       rbp = DPB
   406                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   407                              <1> ;If carry set, getBuffer failed!
   408 00000E33 53                  <1>     push rbx
   409 00000E34 51                  <1>     push rcx
   410 00000E35 52                  <1>     push rdx
   411 00000E36 57                  <1>     push rdi
   412 00000E37 55                  <1>     push rbp
   413 00000E38 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   414 00000E3A E8CBFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   415                              <1>     ;and FAT type in ecx
   416 00000E3F E811FDFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   417 00000E44 7237                <1>     jc .exitFail
   418                              <1>     ;Check if FAT 12, 16, 32
   419 00000E46 85C9                <1>     test ecx, ecx
   420 00000E48 743E                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   421 00000E4A F7C101000000        <1>     test ecx, 1
   422 00000E50 7413                <1>     jz .goToNextClusterFat32
   423                              <1>     ;Here we handle FAT16
   424 00000E52 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   425 00000E57 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   426 00000E5C 721E                <1>     jb .exit
   427 00000E5E B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   428 00000E63 EB17                <1>     jmp short .exit
   429                              <1> .goToNextClusterFat32:
   430 00000E65 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   431 00000E69 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   432 00000E6E 7207                <1>     jb .validCluster32   
   433 00000E70 B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   434 00000E75 EB05                <1>     jmp short .exit
   435                              <1> .validCluster32:
   436 00000E77 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   437                              <1> .exit:
   438 00000E7C F8                  <1>     clc
   439                              <1> .exitFail:
   440 00000E7D E81DFBFFFF          <1>     call setBufferReferenced    ;We are done with the disk buffer
   441 00000E82 5D                  <1>     pop rbp
   442 00000E83 5F                  <1>     pop rdi
   443 00000E84 5A                  <1>     pop rdx
   444 00000E85 59                  <1>     pop rcx
   445 00000E86 5B                  <1>     pop rbx
   446                              <1>     return
    18                              <2> %%_ret:
    19 00000E87 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   447                              <1> .gotoNextClusterFat12:
   448                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   449                              <1> ;eax has the sector number of the FAT
   450                              <1> ;edx has byte offset into the sector
   451                              <1> ;edi has current cluster number
   452                              <1> ;rbx has ptr to buffer header
   453 00000E88 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   454 00000E8E 7431                <1>     jz .gotoNextClusterFat12Even
   455                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   456 00000E90 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   457 00000E94 29D1                <1>     sub ecx, edx
   458 00000E96 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   459 00000E98 751D                <1>     jnz .gotoNextClusterFat12NoCross
   460                              <1>     ;Boundary cross, build entry properly
   461 00000E9A 0FB65C1330          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   462 00000E9F E8FBFAFFFF          <1>     call setBufferReferenced  ;We are done with the current buffer
   463 00000EA4 FFC0                <1>     inc eax ;Get next FAT sector
   464 00000EA6 53                  <1>     push rbx
   465 00000EA7 E8A9FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   466 00000EAC 72CF                <1>     jc .exitFail
   467 00000EAE 58                  <1>     pop rax ;Get bl in al, the last entry from the previous buffer
   468 00000EAF 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   469 00000EB2 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   470 00000EB5 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   471                              <1> .gotoNextClusterFat12NoCross:
   472 00000EB7 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   473 00000EBC C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   474 00000EBF EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   475                              <1> .gotoNextClusterFat12Even:
   476                              <1>     ;Here the cluster is even and can't cross a sector boundary
   477 00000EC1 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   478 00000EC6 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   479                              <1> .checkIfLastFAT12Cluster:
   480 00000ECB 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   481 00000ED0 72AA                <1>     jb .exit         ;If so, exit with it in eax
   482 00000ED2 B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   483 00000ED7 E9A0FFFFFF          <1>     jmp .exit
   484                              <1> 
   485                              <1> writeFAT:
   486                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   487                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   488                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   489                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   490                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   491 00000EDC 53                  <1>     push rbx
   492 00000EDD 51                  <1>     push rcx
   493 00000EDE 52                  <1>     push rdx
   494 00000EDF 56                  <1>     push rsi
   495 00000EE0 57                  <1>     push rdi
   496 00000EE1 55                  <1>     push rbp
   497 00000EE2 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   498 00000EE4 E821FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   499                              <1>     ;and FAT type in ecx
   500 00000EE9 E867FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   501 00000EEE 7223                <1>     jc .exitFail
   502                              <1>     ;Check if FAT 12, 16, 32
   503 00000EF0 85C9                <1>     test ecx, ecx
   504 00000EF2 742B                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   505 00000EF4 F7C101000000        <1>     test ecx, 1
   506 00000EFA 7407                <1>     jz .goToNextClusterFat32
   507                              <1>     ;Here we handle FAT16
   508 00000EFC 66897C1330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], di ;Store the value
   509 00000F01 EB0A                <1>     jmp short .exit
   510                              <1> .goToNextClusterFat32:
   511 00000F03 81E7FFFFFF0F        <1>     and edi, 0FFFFFFFh  ;Zero upper nybble
   512 00000F09 897C1330            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], edi
   513                              <1> .exit:
   514 00000F0D E87EFAFFFF          <1>     call setBufferDirty
   515 00000F12 F8                  <1>     clc
   516                              <1> .exitFail:
   517 00000F13 E887FAFFFF          <1>     call setBufferReferenced    ;We are done with the disk buffer
   518 00000F18 5D                  <1>     pop rbp
   519 00000F19 5F                  <1>     pop rdi
   520 00000F1A 5E                  <1>     pop rsi
   521 00000F1B 5A                  <1>     pop rdx
   522 00000F1C 59                  <1>     pop rcx
   523 00000F1D 5B                  <1>     pop rbx
   524                              <1>     return
    18                              <2> %%_ret:
    19 00000F1E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   525                              <1> .gotoNextClusterFat12:
   526                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   527                              <1> ;eax has the sector number of the FAT
   528                              <1> ;edx has byte offset into the sector
   529                              <1> ;edi has current cluster number
   530                              <1> ;rbx has ptr to buffer header
   531 00000F1F 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   532 00000F25 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   533 00000F2B 744A                <1>     jz .gotoNextClusterFat12Even
   534                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   535 00000F2D 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   536 00000F31 29D1                <1>     sub ecx, edx
   537 00000F33 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   538 00000F35 7531                <1>     jnz .gotoNextClusterFat12NoCross
   539                              <1>     ;Boundary cross, build entry properly
   540                              <1>     ;Replace the high nybble of the low byte 
   541 00000F37 0FB64C1330          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   542 00000F3C 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   543 00000F42 C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   544 00000F45 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   545 00000F47 C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   546 00000F4A 884C1330            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   547 00000F4E E84CFAFFFF          <1>     call setBufferReferenced  ;We are done with the current buffer
   548 00000F53 E838FAFFFF          <1>     call setBufferDirty
   549 00000F58 FFC0                <1>     inc eax ;Get next FAT sector
   550 00000F5A E8F6FBFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   551 00000F5F 72B2                <1>     jc .exitFail
   552 00000F61 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   553 00000F63 884B30              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   554 00000F66 EBA5                <1>     jmp short .exit
   555                              <1> .gotoNextClusterFat12NoCross:
   556 00000F68 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   557 00000F6D 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   558 00000F72 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   559 00000F75 EB0A                <1>     jmp short .fat12common
   560                              <1> .gotoNextClusterFat12Even:
   561                              <1>     ;Here the cluster is even and can't cross a sector boundary
   562 00000F77 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   563 00000F7C 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   564                              <1> .fat12common:
   565 00000F81 09F0                <1>     or eax, esi     ;Add the new entry bits
   566 00000F83 6689441330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   567 00000F88 E980FFFFFF          <1>     jmp .exit
    24                                  %include "./Source/Kernel/FAT/findfile.asm"
    25                              <1> ;Generic Find First and Find Next functions here
    26                              <1> findNextMain:
    27 00000F8D 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
    28 00000F94 F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
    29 00000F97 7408                <1>     jz .notNet
    30 00000F99 B81C110000          <1>     mov eax, 0111Ch ;Netowrk find next
    31 00000F9E CD4F                <1>     int 4Fh
    32                              <1>     return  ;Return propagating the error code
    18                              <2> %%_ret:
    19 00000FA0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    33                              <1> .notNet:
    34 00000FA1 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    35 00000FA3 FEC0                <1>     inc al  ;Convert into 1 based number
    36 00000FA5 E869450000          <1>     call dosCrit1Enter
    37 00000FAA E85F410000          <1>     call setDrive   ;Set CDS and current drive vars
    38 00000FAF 720C                <1>     jc .critError   ;Return error if this fails
    39 00000FB1 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] 
    40 00000FB8 E8563E0000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    41                              <1> .critError:
    42 00000FBD E85B450000          <1>     call dosCrit1Exit
    43                              <1>     retc    ;Return error if this fails
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000FC2 72DC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    44 00000FC4 E801000000          <1>     call searchMoreDir
    45                              <1>     return
    18                              <2> %%_ret:
    19 00000FC9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                              <1> searchMoreDir:
    47                              <1> ;The three directory variables are set up from the ffblock. 
    48                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    49                              <1> ;Current DTA is also used to contain the ff block address
    50                              <1> ;All registers can be trashed
    51 00000FCA 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
    52                              <1>     ;First setup dirClustA and dirSect vars
    53 00000FD1 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
    54 00000FD8 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    55 00000FDB 8805(56C60300)      <1>     mov byte [searchAttr], al   ;And save it
    56 00000FE1 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    57 00000FE4 8905(D6C60300)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    58 00000FEA 8905(D2C60300)      <1>     mov dword [dirClustPar], eax
    59                              <1>     ;Get number of 32 byte entries in a sector
    60 00000FF0 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    61                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    62 00000FF3 C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    63                              <1>     ;Now get bytes per cluster
    64 00000FF6 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    65 00000FF8 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    66 00000FFC 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    67 00001000 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    68 00001002 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    69 00001004 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    70 00001006 31D2                <1>     xor edx, edx
    71 00001008 F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    72                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    73                              <1>     ;edx has byte offset into cluster (or Root dir)
    74 0000100A 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    75                              <1>     ;Now compute sector offset into cluster
    76 0000100C 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    77 00001010 89D0                <1>     mov eax, edx    ;Move offset into cluster
    78 00001012 31D2                <1>     xor edx, edx
    79 00001014 F7F1                <1>     div ecx 
    80                              <1>     ;eax now has sector offset into cluster (or root dir)
    81                              <1>     ;edx has byte offset into sector 
    82 00001016 668905(DAC60300)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    83 0000101D C1EA05              <1>     shr edx, 5 ;Divide edx by 32 to get Dir Entry
    84 00001020 8915(DCC60300)      <1>     mov dword [dirEntry], edx
    85 00001026 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    86 0000102C 85C0                <1>     test eax, eax   ;If we at cluster 0, we are in old style root dir
    87 0000102E 7461                <1>     jz .oldFat
    88                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    89 00001030 89D9                <1>     mov ecx, ebx
    90 00001032 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    91                              <1> .fatlp:
    92 00001035 E8F9FDFFFF          <1>     call readFAT
    93 0000103A 3DFFFFFFFF          <1>     cmp eax, -1
    94 0000103F 7464                <1>     je .errorExit
    95 00001041 FFC9                <1>     dec ecx
    96 00001043 75F0                <1>     jnz .fatlp
    97 00001045 8905(D6C60300)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    98                              <1> .skipFatWalk:
    99 0000104B 488D05A0000000      <1>     lea rax, searchDir.nextEp
   100 00001052 50                  <1>     push rax    ;Push the return address onto stack
   101 00001053 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]
   102 00001059 E8F8FBFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
   103 0000105E 0FB71D(DAC60300)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
   104 00001065 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
   105                              <1> .common:
   106 00001068 E8EDFAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   107 0000106D 0F821F010000        <1>     jc searchDir.hardError
   108 00001073 E81D010000          <1>     call adjustDosDirBuffer  ;rbx has the buffer ptr for this dir sector
   109 00001078 8B05(DCC60300)      <1>     mov eax, dword [dirEntry]
   110 0000107E 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
   111 00001080 C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
   112 00001083 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
   113                              <1>     ;We continue AS IF this entry was bad
   114                              <1>     ;Now setup al as upon normal entry 
   115 00001086 8A05(56C60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   116 0000108C E969010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within function
   117                              <1>     ;The return address on the stack will return to the ep's pushed
   118                              <1> .oldFat:
   119                              <1> ;Old FAT 12/16 root dirs fall thru here only
   120 00001091 488D05DE000000      <1>     lea rax, searchDir.oldNextEP
   121 00001098 50                  <1>     push rax    ;Push return address onto the stack
   122 00001099 0FB705(DAC60300)    <1>     movzx eax, word [dirSect]   ;Get the root directory sector offset
   123 000010A0 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   124 000010A3 EBC3                <1>     jmp short .common
   125                              <1> .errorExit:
   126 000010A5 F9                  <1>     stc
   127                              <1>     return
    18                              <2> %%_ret:
    19 000010A6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   128                              <1> searchDir:
   129                              <1> ;Called in a level 1 critical section. 
   130                              <1> ;The directory variables are set and fcbName has the pattern to match
   131                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   132                              <1> ;All registers can be trashed
   133                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   134                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   135                              <1> 
   136                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   137                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   138 000010A7 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   139 000010AE 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   140 000010B4 7408                <1>     jz .notNet
   141 000010B6 B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   142 000010BB CD4F                <1>     int 4fh
   143                              <1>     return
    18                              <2> %%_ret:
    19 000010BD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> .notNet:
   145 000010BE 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   146 000010C5 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   147 000010CB 85C0                <1>     test eax, eax
   148 000010CD 0F8483000000        <1>     jz .oldRoot
   149 000010D3 E87EFBFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   150                              <1> .sectorLoop:
   151 000010D8 E87DFAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   152 000010DD 0F82AF000000        <1>     jc .hardError
   153 000010E3 E8AD000000          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   154                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   155 000010E8 E8BC000000          <1>     call findInBuffer
   156 000010ED E8ADF8FFFF          <1>     call setBufferReferenced    ;We are done with the current buffer
   157                              <1> .nextEp:
   158                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000010F2 73C9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   159 000010F4 0F8494000000        <1>     jz .fnfError    ;CF=CY AND ZF=ZE => File not found
   160                              <1>     ;If ZF=ZE then fnfError (i.e. we hit an entry starting with 00)
   161                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   162                              <1>     ;IF however, the next cluster is -1, then we return fail
   163 000010FA 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   164 00001100 8905(A6C60300)      <1>     mov dword [currClustD], eax
   165 00001106 668B05(DAC60300)    <1>     mov ax, word [dirSect]
   166 0000110D 8805(AEC60300)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   167 00001113 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   168 00001117 488905(AFC60300)    <1>     mov qword [currSectD], rax  
   169 0000111E C705(A2C60300)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   169 00001126 0000                <1>
   170 00001128 E87AFCFFFF          <1>     call getNextSectorOfFile
   171 0000112D 7263                <1>     jc .hardError
   172 0000112F 3DFFFFFFFF          <1>     cmp eax, -1
   173 00001134 7458                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   174 00001136 66FF05(DAC60300)    <1>     inc word [dirSect]  ;Goto next sector
   175 0000113D 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   176 00001143 3B05(A6C60300)      <1>     cmp eax, dword [currClustD] ;Did it change?
   177 00001149 748D                <1>     je .sectorLoop  ;If not, we advanced sectors only
   178 0000114B 66C705(DAC60300)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   178 00001153 00                  <1>
   179 00001154 EB82                <1>     jmp short .sectorLoop 
   180                              <1> 
   181                              <1> .oldRoot:
   182                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   183                              <1> ; one large contiguous cluster.
   184                              <1> ;   ecx = Number of entries per sector
   185                              <1> .oldSectorLp:
   186 00001156 0FB705(DAC60300)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   187 0000115D 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   188 00001160 E8F5F9FFFF          <1>     call getBufForDOS
   189 00001165 722B                <1>     jc .hardError
   190 00001167 E829000000          <1>     call adjustDosDirBuffer      ;rbx has the buffer pointer for this dir sector
   191 0000116C E838000000          <1>     call findInBuffer
   192 00001171 E829F8FFFF          <1>     call setBufferReferenced    ;We are done with this buffer
   193                              <1> .oldNextEP:
   194                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00001176 7201                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00001178 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   195 00001179 7413                <1>     jz .fnfError
   196 0000117B 66FF05(DAC60300)    <1>     inc word [dirSect]  ;Goto next sector in directory
   197 00001182 8B4509              <1>     mov eax, dword [rbp + dpb.wNumberRootDirEntries]
   198 00001185 663905(DCC60300)    <1>     cmp word [dirEntry], ax ;Have we reached the last dir entry?
   199 0000118C 72C8                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   200                              <1> .fnfError:
   201 0000118E B012                <1>     mov al, errNoFil
   202 00001190 F9                  <1>     stc
   203                              <1>     return
    18                              <2> %%_ret:
    19 00001191 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   204                              <1> .hardError:
   205 00001192 B0FF                <1>     mov al, -1
   206                              <1>     return
    18                              <2> %%_ret:
    19 00001194 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   207                              <1> adjustDosDirBuffer:
   208 00001195 804B0904            <1>     or byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   209 00001199 806309FE            <1>     and byte [rbx + bufferHdr.bufferFlags], ~dosBuffer
   210 0000119D 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   211 000011A1 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   212 000011A5 C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   213                              <1>     return
    18                              <2> %%_ret:
    19 000011A8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   214                              <1> 
   215                              <1> findInBuffer:
   216                              <1> ;Input: ecx = Number of entries in sector buffer to look for
   217                              <1> ;       rsi = Sector buffer data area
   218                              <1> ;Output: CF=CY => No entries found
   219                              <1> ;        ZF=NE => Keep searching in subsequent directories
   220                              <1> ;        ZF=ZE => End of directory reached early, stop
   221                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   222                              <1> ;        rsi = Points to start of the disk buffer directory entry
   223 000011A9 8A05(56C60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   224 000011AF E899000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   225                              <1> .searchMainLp:
   226                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   227 000011B4 8A25(62C60300)      <1>     mov ah, byte [delChar]
   228 000011BA 803E00              <1>     cmp byte [rsi], 00h
   229 000011BD 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   230 000011BF 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   231 000011C1 750F                <1>     jne .notLookingForEmpty
   232                              <1> .emptySlot:
   233                              <1> ;Here we check if we are looking for an empty directory entry or
   234                              <1> ; we have reached the end of the file (if the first byte is 00h)
   235                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   236 000011C3 3A25(DBC50300)      <1>     cmp ah, byte [fcbName] 
   237                              <1>     rete    ;Return if equal (CF=NC too)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000011C9 74DD                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   238                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   239 000011CB 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   240 000011CE 752A                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   241 000011D0 F9                  <1>     stc
   242                              <1>     return
    18                              <2> %%_ret:
    19 000011D1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   243                              <1> .notLookingForEmpty:
   244 000011D2 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   245 000011D5 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   246 000011D8 803D(CAC30300)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   247 000011DF 7430                <1>     je .exclusiveDir
   248 000011E1 80FC08              <1>     cmp ah, dirVolumeID
   249 000011E4 7432                <1>     je .volFile
   250 000011E6 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   251 000011E8 7710                <1>     ja .nextEntry
   252                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   253                              <1> .scanName:
   254 000011EA 56                  <1>     push rsi
   255 000011EB 488D3D(DBC50300)    <1>     lea rdi, fcbName ;Goto name template to search for
   256 000011F2 E83E000000          <1>     call .nameCompare
   257 000011F7 5E                  <1>     pop rsi
   258 000011F8 7424                <1>     je .searchEntryFound
   259                              <1> .nextEntry:
   260                              <1> ;Go to next entry
   261 000011FA 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   262 00001201 FF05(DCC60300)      <1>     inc dword [dirEntry] ;And denote that in variable
   263 00001207 FFC9                <1>     dec ecx
   264 00001209 75A9                <1>     jnz .searchMainLp
   265                              <1> .badExit:
   266 0000120B 31C0                <1>     xor eax, eax
   267 0000120D FFC0                <1>     inc eax ;Clear ZF
   268 0000120F F9                  <1>     stc
   269                              <1>     return
    18                              <2> %%_ret:
    19 00001210 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   270                              <1> .exclusiveDir:
   271                              <1> ;Used when going down a path, dir bit simply need be set
   272 00001211 F6C410              <1>     test ah, dirDirectory
   273 00001214 75D4                <1>     jnz .scanName
   274 00001216 EBE2                <1>     jmp short .nextEntry
   275                              <1> 
   276                              <1> .volFile:
   277 00001218 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   278 0000121A 74CE                <1>     je .scanName       ;If so, scan the name agrees
   279 0000121C EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   280                              <1> 
   281                              <1> .searchEntryFound:
   282                              <1> ;Here a good entry was found!
   283 0000121E 56                  <1>     push rsi
   284 0000121F 57                  <1>     push rdi
   285 00001220 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   286 00001222 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
   287 00001229 B904000000          <1>     mov ecx, 32/8
   288 0000122E F348A5              <1>     rep movsq   ;Copy the directory to SDA
   289 00001231 5F                  <1>     pop rdi
   290 00001232 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   291 00001233 F8                  <1>     clc
   292                              <1>     return
    18                              <2> %%_ret:
    19 00001234 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   293                              <1> 
   294                              <1> .nameCompare:
   295                              <1> ;Input: rsi = source string
   296                              <1> ;       rdi = string template to compare against
   297                              <1> ;Output: ZF=ZE => Strings are ok
   298                              <1> ;        ZF=NZ => Strings not ok
   299                              <1> ;Accepts wildcards. Trashes al
   300 00001235 51                  <1>     push rcx
   301 00001236 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   302                              <1> .ncLp:
   303 00001238 81F90B000000        <1>     cmp ecx, 11
   304 0000123E 740B                <1>     je .ncExit
   305 00001240 FFC1                <1>     inc ecx
   306 00001242 A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   307 00001243 74F3                <1>     je .ncLp    ;If equal, keep going
   308 00001245 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   309 00001249 74ED                <1>     je .ncLp
   310                              <1> .ncExit:
   311 0000124B 59                  <1>     pop rcx
   312                              <1>     return
    18                              <2> %%_ret:
    19 0000124C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   313                              <1> 
   314                              <1> adjustSearchAttr:
   315                              <1> ;Converts the byte to a system only if the bit is set
   316                              <1> ;Input: eax = User selected search mask
   317                              <1> ;Output: eax = Modified search mask
   318 0000124D 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   319 00001252 A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   320                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001257 74F3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   321 00001259 B808000000          <1>     mov eax, dirVolumeID
   322                              <1>     return
    18                              <2> %%_ret:
    19 0000125E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> asciiToFCB:
   325                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   326                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   327                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   328                              <1> ;Name is space padded.
   329                              <1> ;Input: rsi = ASCII string buffer
   330                              <1> ;       rdi = FCB name buffer
   331                              <1> ;Output: al = Char that terminated the source string 
   332 0000125F 53                  <1>     push rbx    
   333 00001260 57                  <1>     push rdi
   334 00001261 B90B000000          <1>     mov ecx, 11
   335 00001266 B020                <1>     mov al, " "
   336 00001268 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   337 0000126A 5F                  <1>     pop rdi
   338 0000126B 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   339                              <1> .processName:
   340 0000126E AC                  <1>     lodsb   ;Get the char in al
   341 0000126F E89B3F0000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   342 00001274 84C0                <1>     test al, al
   343 00001276 742D                <1>     jz .exit
   344                              <1>     ;Test if the char is valid
   345 00001278 E8CA400000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   346 0000127D 7426                <1>     jz .exit    ;If the char invalid, consider it a terminator
   347 0000127F 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   348 00001281 7407                <1>     je .extSpace
   349 00001283 3C2E                <1>     cmp al, "."
   350 00001285 740C                <1>     je .ext
   351 00001287 AA                  <1>     stosb   ;Store the char
   352 00001288 EBE4                <1>     jmp short .processName
   353                              <1> .extSpace:
   354                              <1> ;Now we scan for a period in the name
   355 0000128A AC                  <1>     lodsb   ;Get a char and increase rsi
   356 0000128B 84C0                <1>     test al, al
   357 0000128D 7416                <1>     jz .exit
   358 0000128F 3C2E                <1>     cmp al, "."     ;If al is not a period...
   359 00001291 75F7                <1>     jne .extSpace   ; keep searching
   360                              <1> .ext:
   361 00001293 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   362                              <1> .processExt:
   363 00001297 AC                  <1>     lodsb
   364 00001298 84C0                <1>     test al, al
   365 0000129A 7409                <1>     jz .exit
   366 0000129C 3C20                <1>     cmp al, " "
   367 0000129E 7405                <1>     je .exit
   368 000012A0 AA                  <1>     stosb
   369 000012A1 EBF4                <1>     jmp short .processExt
   370                              <1> .exitBadChar:
   371 000012A3 30C0                <1>     xor al, al  ;Return a null terminator
   372                              <1> .exit:
   373 000012A5 5B                  <1>     pop rbx
   374                              <1>     return
    18                              <2> %%_ret:
    19 000012A6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   375                              <1> 
   376                              <1> FCBToAsciiz:
   377                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   378                              <1> ;Name is space padded too
   379                              <1> ;Input: rsi = FCB name buffer
   380                              <1> ;       rdi = ASCIIZ string buffer
   381 000012A7 B908000000          <1>     mov ecx, 8
   382 000012AC F3A4                <1>     rep movsb   ;Move the name over
   383                              <1> .scanNameSpace:
   384 000012AE 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   385 000012B2 750D                <1>     jne .ext
   386 000012B4 48FFCF              <1>     dec rdi
   387 000012B7 FFC1                <1>     inc ecx
   388 000012B9 81F908000000        <1>     cmp ecx, 8
   389 000012BF 72ED                <1>     jb .scanNameSpace
   390                              <1> .ext:
   391 000012C1 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   392 000012C6 7506                <1>     jne .validExt
   393 000012C8 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   394 000012CC 7415                <1>     je .exit
   395                              <1> .validExt:
   396 000012CE B02E                <1>     mov al, "." ;We have a valid extension, store a period
   397 000012D0 AA                  <1>     stosb
   398 000012D1 B903000000          <1>     mov ecx, 3
   399 000012D6 F3A4                <1>     rep movsb   ;Move the three extension chars over
   400                              <1> .scanExtSpace:
   401 000012D8 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   402 000012DC 7505                <1>     jne .exit
   403 000012DE 48FFCF              <1>     dec rdi
   404 000012E1 EBF5                <1>     jmp short .scanExtSpace
   405                              <1> .exit:
   406 000012E3 31C0                <1>     xor eax, eax
   407 000012E5 AA                  <1>     stosb   ;Store a null at the end
   408                              <1>     return
    18                              <2> %%_ret:
    19 000012E6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   409                              <1> 
   410                              <1> setupFFBlock:
   411                              <1> ;Sets up the find first block for the search
   412                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   413 000012E7 50                  <1>     push rax
   414 000012E8 53                  <1>     push rbx
   415 000012E9 56                  <1>     push rsi
   416 000012EA 57                  <1>     push rdi
   417 000012EB 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   418 000012EE 8A05(56C60300)      <1>     mov al, byte [searchAttr]
   419 000012F4 243F                <1>     and al, 3Fh ;Clear upper two bits
   420 000012F6 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   421 000012F9 0FB605(63C60300)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   422 00001300 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   423                              <1>     ;xchg bx, bx
   424 00001302 488D35(DBC50300)    <1>     lea rsi, fcbName
   425 00001309 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   426 0000130D 57                  <1>     push rdi
   427 0000130E 48B820202020202020- <1>     mov rax, "        "
   427 00001317 20                  <1>
   428 00001318 48AB                <1>     stosq
   429 0000131A 66AB                <1>     stosw
   430 0000131C AA                  <1>     stosb
   431 0000131D 5F                  <1>     pop rdi
   432 0000131E 48A5                <1>     movsq   ;Move 8 chars
   433 00001320 66A5                <1>     movsw   ;Move 2 chars
   434 00001322 A4                  <1>     movsb   ;Move the final char
   435                              <1> 
   436 00001323 8B05(DCC60300)      <1>     mov eax, dword [dirEntry]
   437 00001329 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   438 0000132C 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]
   439 00001332 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   440 00001335 8A05(C6C50300)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   441 0000133B 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   442 0000133E 8B05(D1C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   443 00001344 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   444 00001347 8B05(D7C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   445 0000134D 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   446 00001350 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   447 00001354 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   448 0000135B E847FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   449                              <1> 
   450 00001360 5F                  <1>     pop rdi
   451 00001361 5E                  <1>     pop rsi
   452 00001362 5B                  <1>     pop rbx
   453 00001363 58                  <1>     pop rax
   454                              <1>     return
    18                              <2> %%_ret:
    19 00001364 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   455                              <1> 
   456                              <1> getDrvLetterFromPath:
   457                              <1> ;Gets the drive letter for the path in al
   458                              <1> ;Input: rsi = Buffer to process
   459                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   460                              <1> ;       ZF=ZE and al = 0 => Null path
   461                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   462                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   463                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   464 00001365 30C0                <1>     xor al, al
   465 00001367 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   466                              <1>     retz    ;Return if a null path
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000136A 74F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   467 0000136C 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   468                              <1>     retne   ;If not equal, Relative path or network path
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001370 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   469 00001372 66AD                <1>     lodsw   ;Get first word, rsi += 2
   470                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   471 00001374 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   472 00001376 2C60                <1>     sub al, 60h
   473                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001378 75EA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   474 0000137A B0FF                <1>     mov al, -1  ;Else not a valid drive number
   475                              <1>     return
    18                              <2> %%_ret:
    19 0000137C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   476                              <1> canonicaliseFileName:
   477                              <1> ;Always trying to build and qualify a full pathname
   478                              <1> ;Does getPath without hitting the disk
   479 0000137D B0FF                <1>     mov al, -1
   480 0000137F 8805(CAC30300)      <1>     mov byte [fileDirFlag], al  
   481 00001385 8805(5BC60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   482 0000138B 48893D(7FC50300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   483 00001392 FEC0                <1>     inc al  ;make al = 0
   484 00001394 8805(8FC50300)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   485 0000139A EB21                <1>     jmp short getPath.epAlt
   486                              <1> getDirPath:
   487 0000139C 30C0                <1>     xor al, al   ;Set to Directory
   488 0000139E EB02                <1>     jmp short getPath
   489                              <1> getFilePath:
   490 000013A0 B0FF                <1>     mov al, -1  ;Set to File
   491                              <1> getPath:
   492                              <1> ;Determines whether the path is spliced or not and transfers the chars
   493                              <1> ; from the user buffer into an internal buffer, normalising them.
   494                              <1> ; Single and double dot entries are left as is, but the wildcard * is converted
   495                              <1> ; to ?. Wildcards can only be present in the LAST portion of the given path.
   496                              <1> ; If the portion with wildcards does not end with an ASCII null, we fail the 
   497                              <1> ; request with pnf. If there is a redirector which needs to normalise the path, 
   498                              <1> ; we let it do its thing and return.
   499                              <1> ;If the user requests data from a remote server (i.e. a pathspec starting with
   500                              <1> ; \\) then wildcards, the colon and dots are forbidden.
   501                              <1> ;If a remote user requests data (dosInvoke = -1), then the pathspec must be an
   502                              <1> ; absolute path (no wildcards or dots) and must begin with a drive letter 
   503                              <1> ; (converted from using machine name by the net client program).
   504                              <1> ;We check if we are a net invoke to ensure that the pathspec that was recieved
   505                              <1> ; was good.
   506                              <1> ;Called with:
   507                              <1> ; rdi = SDA Buffer for filename
   508                              <1> ; rsi = Potentially unqualified filename
   509                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   510 000013A2 8805(CAC30300)      <1>     mov byte [fileDirFlag], al  
   511 000013A8 B0FF                <1>     mov al, -1
   512 000013AA 8805(5BC60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   513 000013B0 48893D(7FC50300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   514 000013B7 8805(8FC50300)      <1>     mov byte [skipDisk], al  ;Store -1 to NOT skip checking the file on disk
   515                              <1> .epAlt:
   516 000013BD C605(5FC60300)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   517 000013C4 C605(5EC60300)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   518 000013CB F605(5CC60300)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   519 000013D2 7428                <1>     jz .notServer
   520                              <1>     ;In this case, the client network program will have correctly
   521                              <1>     ; substituted the drive letter for the path before making the request.
   522                              <1>     ;Thus we can immediately assume the existance of a drive letter in the path 
   523 000013D4 E88CFFFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in X:    call getCDS ;Get the cds for the drive letter on the path
   525                              <1>     ;REMEMBER, FOR ALL THE LOGIC TO WORK, HERE WE MUST ENSURE THE PATH
   526                              <1>     ; CONTAINS NO . or .., NO INVALID CHARS OR MULTIPLE \\ AND IS 0 TERMINATED.
   527                              <1>     ;We do not scan for this criteria but the client program must adhere to 
   528                              <1>     ; these requirements.
   529                              <1>     ;When a server request is made, the request can ONLY be for a file on
   530                              <1>     ; a CDS drive.
   531 000013D9 FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   532 000013DB 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   533 000013E2 50                  <1>     push rax
   534 000013E3 E82B410000          <1>     call dosCrit1Enter
   535 000013E8 E8263A0000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   536 000013ED E82B410000          <1>     call dosCrit1Exit
   537 000013F2 58                  <1>     pop rax
   538 000013F3 0F8382000000        <1>     jnc .driveOk
   539                              <1> .serverExit:
   540 000013F9 B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   541                              <1>     return
    18                              <2> %%_ret:
    19 000013FB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   542                              <1> .notServer:
   543                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   544 000013FC 48C705(6CC60300)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   544 00001404 FFFFFF              <1>
   545 00001407 B823110000          <1>     mov eax, 1123h
   546 0000140C CD4F                <1>     int 4fh ;CF=CY if not resolved. CF=NC if resolved
   547                              <1>     retnc  ;Return if resolved
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000140E 73EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   548 00001410 E850FFFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   549 00001415 9C                  <1>     pushfq  ;Save the flag state on stack
   550 00001416 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   551 00001417 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   552 0000141A E8E53D0000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   553 0000141F 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. \\)
   554 00001421 E8DE3D0000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   555 00001426 7543                <1>     jnz .notNet
   556 00001428 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   557 0000142A 753F                <1>     jne .notNet
   558 0000142C 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   559 0000142D 9D                  <1>     popfq
   560 0000142E 66AD                <1>     lodsw
   561 00001430 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   562 00001434 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   563                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   564                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   565                              <1> ; redirector Find First Without CDS
   566                              <1> 
   567 00001436 8A1D(8FC50300)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   568 0000143C C605(8FC50300)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   569 00001443 53                  <1>     push rbx
   570                              <1> .moveNetChars:
   571 00001444 AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   572 00001445 E8C53D0000          <1>     call uppercaseChar  ;Make char in al uppercase
   573 0000144A 84C0                <1>     test al, al
   574 0000144C 740F                <1>     jz .netEnd
   575 0000144E E8B13D0000          <1>     call swapPathSeparator  ;If path sep, swap it
   576 00001453 AA                  <1>     stosb
   577 00001454 75EE                <1>     jnz .moveNetChars  ;If not a path separating char in al, keep looking
   578 00001456 E86A000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   579 0000145B EBE7                <1>     jmp short .moveNetChars
   580                              <1> .netEnd:
   581 0000145D 5B                  <1>     pop rbx
   582 0000145E AA                  <1>     stosb
   583 0000145F 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   584                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001461 7498                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   585 00001463 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   586 00001468 CD4F                <1>     int 4Fh
   587                              <1>     return
    18                              <2> %%_ret:
    19 0000146A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   588                              <1> .notNet:
   589                              <1> ;This is the normal case; paths can be relative, or absolute.
   590 0000146B 58                  <1>     pop rax ;Get the drive letter back
   591 0000146C 9D                  <1>     popfq   ;Get the flag state back
   592 0000146D 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   593                              <1> .pnfErr:
   594 0000146F B003                <1>     mov al, errPnf  ;Null path error
   595 00001471 F9                  <1>     stc
   596                              <1>     return
    18                              <2> %%_ret:
    19 00001472 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   597                              <1> .notNull:
   598 00001473 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   599 00001475 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   600 00001477 B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   601 00001479 F9                  <1>     stc
   602                              <1>     return
    18                              <2> %%_ret:
    19 0000147A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   603                              <1> .driveOk:
   604 0000147B 84C0                <1>     test al, al
   605 0000147D 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   606                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   607 0000147F 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   608 00001482 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   609 00001484 50                  <1>     push rax    ;Save the drive letter
   610 00001485 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   611 00001486 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   612 00001489 E8763D0000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   613                              <1>     ;If al is a path separator, then this path is absolute.
   614 0000148E 58                  <1>     pop rax ;Get back the drive letter
   615 0000148F 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   616                              <1> .absoPath:
   617                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   618 00001491 48FFC6              <1>     inc rsi
   619 00001494 EB1A                <1>     jmp short .commonDir
   620                              <1> .curPath:
   621                              <1> ;This is only jumped to if we are relative the current drive
   622                              <1> ;rsi points to first char in path
   623                              <1> ;If this char is \ or /, then it is an absolute path.
   624 00001496 8A05(93C30300)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   625 0000149C FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   626 0000149E 50                  <1>     push rax    ;Save the current drive number
   627 0000149F 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   628 000014A1 E85E3D0000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   629 000014A6 58                  <1>     pop rax ;Get back the current drive number
   630 000014A7 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   631                              <1> .relMain:
   632 000014A9 C605(5BC60300)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   633                              <1> .commonDir:
   634                              <1> ;rsi points to the start of the string we will be appending
   635 000014B0 E809000000          <1>     call pathWalk
   636 000014B5 7201                <1>     jc .badDriveExit
   637                              <1>     return
    18                              <2> %%_ret:
    19 000014B7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   638                              <1> .badDriveExit:
   639 000014B8 B812000000          <1>     mov eax, errNoFil ;No file for that spec found
   640                              <1>     return
    18                              <2> %%_ret:
    19 000014BD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   641                              <1> 
   642                              <1> pathWalk:
   643                              <1> ;Input: rsi must point to source buffer for path to expand
   644                              <1> ;       rdi must point to a destination buffer
   645                              <1> ;       al must contain the drive 1 based number
   646 000014BE E89E000000          <1>     call prepareDir    ;Prepare the dir if the drive is subst/join drive
   647 000014C3 7265                <1>     jc .badDriveExit
   648                              <1>     ;If the user requests to .. to a point before rbx, we fail if a disk
   649                              <1>     ; resolution
   650                              <1> .netEp: ;For net path resolution (resolution ONLY) ptrs must point past "\\"
   651 000014C5 4889FB              <1>     mov rbx, rdi
   652                              <1> .mainlp:
   653 000014C8 E868010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   654 000014CD 84C0                <1>     test al, al
   655 000014CF 7507                <1>     jnz .notFile
   656 000014D1 C605(5FC60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   657                              <1> .notFile:
   658 000014D8 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   659 000014D9 E862030000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   660 000014DE 58                  <1>     pop rax
   661 000014DF 736B                <1>     jnc .deviceFound
   662 000014E1 E824020000          <1>     call searchForPathspec  ;and search the directory
   663 000014E6 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   664 000014E8 E873020000          <1>     call addPathspecToBuffer
   665 000014ED 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   666 000014EF 84C0                <1>     test al, al ;Exit if this pathspec was a file
   667 000014F1 743D                <1>     jz .exitGood
   668                              <1>     ;Here I have to take the cluster data from the found directory entry
   669                              <1>     ; and setup the search for the next pathspec portion
   670                              <1>     ;Copy necessary data from the current directory copy
   671 000014F3 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   672 000014FA 74CC                <1>     jz .mainlp
   673 000014FC 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   674 00001503 C1E010              <1>     shl eax, 10h    ;Shift it high
   675 00001506 668B05(D5C50300)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   676                              <1>     ;eax now has the cluster number of the search
   677 0000150D 8905(D6C60300)      <1>     mov dword [dirClustA], eax
   678 00001513 8905(D2C60300)      <1>     mov dword [dirClustPar], eax
   679 00001519 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   680 0000151B 8905(DCC60300)      <1>     mov dword [dirEntry], eax
   681 00001521 668905(DAC60300)    <1>     mov word [dirSect], ax
   682 00001528 EB9E                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   683                              <1> .badDriveExit:
   684 0000152A B812000000          <1>     mov eax, errNoFil ;No file for that spec found
   685                              <1>     return
    18                              <2> %%_ret:
    19 0000152F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   686                              <1> .exitGood:
   687 00001530 C605(5EC60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   688                              <1> .exit:
   689                              <1>     return
    18                              <2> %%_ret:
    19 00001537 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   690                              <1> .checkDev:
   691                              <1> ;If the return code is errNoFil AND Int44Fail = 0, then we check to see if 
   692                              <1> ; we are in \DEV pseudo dir
   693 00001538 F605(CBC30300)FF    <1>     test byte [Int44Fail], -1   ;Make sure we are not returning from a FAIL
   694 0000153F 751D                <1>     jnz .nodev  ;If any bits set, ignore this check
   695                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   696 00001541 56                  <1>     push rsi
   697 00001542 57                  <1>     push rdi
   698 00001543 E886020000          <1>     call checkDevPath
   699 00001548 5F                  <1>     pop rdi
   700 00001549 5E                  <1>     pop rsi
   701 0000154A 72EB                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   702                              <1> .deviceFound:
   703 0000154C 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   704 0000154E C605(5FC60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   705 00001555 C605(5EC60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   706 0000155C EBD9                <1>     jmp short .exit   
   707                              <1> .nodev:
   708 0000155E F9                  <1>     stc
   709 0000155F EBD6                <1>     jmp short .exit
   710                              <1> 
   711                              <1> prepareDir:
   712                              <1> ;Used to transfer the current directory if it is necessary.
   713                              <1> ;Always necessary if the user specified a subst/join drive. Else only if 
   714                              <1> ; relative
   715                              <1> ;Input: al = 1-based drive letter
   716                              <1> ;Output: rdi = Pointing at where to place chars from source string
   717                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   718 00001561 56                  <1>     push rsi
   719 00001562 E8AC3F0000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   720 00001567 E8A23B0000          <1>     call setDrive   ;Set internal variables, working CDS etc etc
   721 0000156C 720D                <1>     jc .critExit    ;If the drive number in al is too great or drive invalid
   722 0000156E 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] 
   723 00001575 57                  <1>     push rdi    ;Push CDS pointer on stack...
   724 00001576 E898380000          <1>     call getDiskDPB  ;Update working DPB and drv before searching, dpbptr in rbp
   725                              <1> .critExit:
   726 0000157B E89D3F0000          <1>     call dosCrit1Exit
   727 00001580 5E                  <1>     pop rsi     ; ...and get CDS pointer in rsi
   728 00001581 724A                <1>     jc .badDriveExit 
   729 00001583 488B3D(7FC50300)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   730                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   731                              <1>     ;If this CDS is a join drive, copy the first 3 chars and up to the next 
   732                              <1>     ;   terminating char (\, / or Null)
   733                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   734                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   735 0000158A 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive
   736 00001590 753D                <1>     jnz .prepDirJoin
   737 00001592 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   738 00001598 7556                <1>     jnz .prepDirSubst
   739                              <1> .prepMain:
   740                              <1> ;Ok so now preliminary copy complete, now we check if path spliced
   741 0000159A F605(5BC60300)FF    <1>     test byte [spliceFlag], -1
   742 000015A1 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   743                              <1>     ;Else we copy the first two chars only (X:)
   744 000015A3 66A5                <1>     movsw  
   745 000015A5 B05C                <1>     mov al, "\"
   746 000015A7 AA                  <1>     stosb   ;Store the path separator and increment rdi
   747 000015A8 31C0                <1>     xor eax, eax    ;Get cluster 0
   748 000015AA EB1B                <1>     jmp short .prepDirExitSkip
   749                              <1> .prepLoop:
   750 000015AC AC                  <1>     lodsb
   751 000015AD 84C0                <1>     test al, al ;If al was null, then we stop
   752 000015AF 7403                <1>     jz .prepDirExit
   753 000015B1 AA                  <1>     stosb
   754 000015B2 EBF8                <1>     jmp short .prepLoop
   755                              <1> .prepDirExit:
   756 000015B4 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   757 000015B8 7403                <1>     je .prepDirExitSkipPathsep
   758 000015BA B05C                <1>     mov al, "\"
   759 000015BC AA                  <1>     stosb   ;Store the path separator and increment rdi
   760                              <1> .prepDirExitSkipPathsep:
   761 000015BD 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   762 000015C4 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   763                              <1> .prepDirExitSkip:
   764 000015C7 E837000000          <1>     call .prepSetupDirSearchVars
   765 000015CC F8                  <1>     clc ;Clear carry before exiting
   766                              <1> .badDriveExit:
   767 000015CD 5E                  <1>     pop rsi
   768                              <1>     return
    18                              <2> %%_ret:
    19 000015CE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   769                              <1> .prepDirJoin:
   770 000015CF 51                  <1>     push rcx
   771 000015D0 56                  <1>     push rsi
   772 000015D1 4881C602000000      <1>     add rsi, 2  ;Goto the backslash for the dir
   773 000015D8 B902000000          <1>     mov ecx, 2  ;Instantiate ecx to copy X:
   774                              <1> .prepDirJoin1:
   775 000015DD AC                  <1>     lodsb   ;Get the char
   776 000015DE 84C0                <1>     test al, al ;Null char?
   777 000015E0 740B                <1>     jz .prepDirJoin2
   778 000015E2 E81D3C0000          <1>     call swapPathSeparator
   779 000015E7 7404                <1>     jz .prepDirJoin2
   780 000015E9 FFC1                <1>     inc ecx ;Accrue length to copy
   781 000015EB EBF0                <1>     jmp short .prepDirJoin1
   782                              <1> .prepDirJoin2:
   783 000015ED 5E                  <1>     pop rsi ;Return rsi to the start of the buffer
   784 000015EE EB05                <1>     jmp short .prepDirCopy1
   785                              <1> .prepDirSubst:
   786 000015F0 51                  <1>     push rcx
   787 000015F1 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   788                              <1> .prepDirCopy1:
   789 000015F5 F3A4                <1>     rep movsb   ;Copy the string over
   790 000015F7 59                  <1>     pop rcx
   791 000015F8 F605(5BC60300)FF    <1>     test byte [spliceFlag], -1
   792 000015FF 75B3                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   793 00001601 EBA9                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   794                              <1> .prepSetupDirSearchVars:
   795                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   796                              <1> ;       rbp = DPB pointer for the device which will do transaction
   797 00001603 51                  <1>     push rcx
   798 00001604 31C9                <1>     xor ecx, ecx
   799 00001606 66890D(DAC60300)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   800 0000160D 890D(DCC60300)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   801 00001613 E8D0F5FFFF          <1>     call getFATtype ;Get type of fat
   802 00001618 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   803 0000161E 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   804                              <1>     ;FAT 32 here
   805 00001620 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   806 00001622 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   807 00001624 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   808                              <1> .psdsvExit:
   809 00001627 8905(D6C60300)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   810 0000162D 8905(D2C60300)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   811 00001633 59                  <1>     pop rcx
   812                              <1>     return 
    18                              <2> %%_ret:
    19 00001634 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   813                              <1> 
   814                              <1> copyPathspec:
   815                              <1> ;1) Copies a path portion from the source buffer to the destination
   816                              <1> ;2) Advances rsi to the next null, \ or /
   817                              <1> ;3) Expands all * to ?'s
   818                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   819                              <1> ;    next path separator
   820                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   821                              <1> ;    with rsi moving to path separator
   822                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   823                              <1> ;
   824                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   825                              <1> ;           rdi = Points to where to store it
   826                              <1> ;
   827                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   828                              <1> ;           rdi = First char of next space to store next pathspec
   829                              <1> ;           al = Last char stored (either \ or NULL)
   830                              <1> ;           CF=NC = OK path
   831                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   832                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   833 00001635 57                  <1>     push rdi    ;Save the pointer into the user buffer
   834 00001636 C605(EEC30300)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   835 0000163D 488D3D(DBC50300)    <1>     lea rdi, fcbName
   836 00001644 57                  <1>     push rdi
   837 00001645 B903000000          <1>     mov ecx, 3
   838 0000164A B820202020          <1>     mov eax, "    " ;Four spaces
   839 0000164F F3AB                <1>     rep stosd   ;Store 12 spaces
   840 00001651 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   841                              <1> 
   842 00001652 B908000000          <1>     mov ecx, 8 ;8 chars to move over, when ecx = 0, the char must be . or term
   843 00001657 B501                <1>     mov ch, 1   ;Set that we are in name field
   844 00001659 AC                  <1>     lodsb   ;Get first char from user path in al
   845 0000165A 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   846 0000165C 7459                <1>     je .cpsDots
   847 0000165E 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   848                              <1> ;First char is not a dot, so now check if starts with E5h? 
   849                              <1> ;If so, store 05h in its place! KANJI SUPPORT WOOHOO!
   850 00001661 3CE5                <1>     cmp al, 0E5h
   851 00001663 7508                <1>     jne .cpsMainLoop
   852 00001665 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   853 00001668 B005                <1>     mov al, 05h
   854 0000166A AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   855 0000166B FEC9                <1>     dec cl  ;One less char to tfr
   856                              <1> .cpsMainLoop:
   857 0000166D AC                  <1>     lodsb   ;Get the char in al and advance rsi
   858 0000166E 84C0                <1>     test al, al ;Is it the null char?
   859 00001670 0F848A000000        <1>     jz .cpsProcessName  ;If so, terminate immediately
   860 00001676 E8893B0000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   861 0000167B 7449                <1>     jz .cpsCharSkip2 ; and then exit with the final converted pathsep in al
   862 0000167D 3C2E                <1>     cmp al, "." ;Filename extension separator
   863 0000167F 7428                <1>     je .cpsExtension
   864 00001681 81F900010000        <1>     cmp ecx, 0100h  ;If ch = 1 and cl = 0, then look for either . or terminator
   865 00001687 74E4                <1>     je .cpsMainLoop
   866 00001689 67E333              <1>     jecxz .cpsCharSkip ;If ch = 0 and cl = 0, scan for next terminator
   867                              <1>     ;If we have space in the filename, we check to see if the next char is *
   868 0000168C 3C2A                <1>     cmp al, "*" ;Wildcard?
   869 0000168E 743D                <1>     je .cpsWildcard
   870 00001690 3C3F                <1>     cmp al, "?" ;Good wildcard?
   871 00001692 740C                <1>     je .store
   872 00001694 E8763B0000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   873 00001699 E8A93C0000          <1>     call checkCharValid ; and check it is a valid char
   874 0000169E 7405                <1>     je .cpsInvalidChar  ;If it is not valid, replace with 0 and exit
   875                              <1> .store:
   876 000016A0 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   877 000016A1 FEC9                <1>     dec cl  ;One less char left to tfr
   878 000016A3 EBC8                <1>     jmp short .cpsMainLoop
   879                              <1> .cpsInvalidChar:
   880 000016A5 30C0                <1>     xor al, al
   881 000016A7 EB57                <1>     jmp short .cpsProcessName
   882                              <1> .cpsExtension:
   883                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   884 000016A9 B903000000          <1>     mov ecx, 3  ;Set to 3 chars left, in extension (ch = 0)
   885 000016AE 488D3D(E3C50300)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   886 000016B5 EBB6                <1>     jmp short .cpsMainLoop
   887                              <1> .cpsDots:
   888 000016B7 AA                  <1>     stosb   ;Store the first dot
   889 000016B8 8A06                <1>     mov al, byte [rsi]
   890 000016BA 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   891 000016BC 7501                <1>     jne .cpsCharSkip
   892 000016BE A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   893                              <1> .cpsCharSkip:
   894 000016BF E819000000          <1>     call .cpsPtrSkip    ;Now we are skipping any chars that arent terminators
   895 000016C4 EB3A                <1>     jmp short .cpsProcessName
   896                              <1> .cpsCharSkip2:
   897 000016C6 E81F000000          <1>     call .cpsPtrSkip2
   898 000016CB EB33                <1>     jmp short .cpsProcessName
   899                              <1> .cpsWildcard:
   900                              <1>     ;cl has the number of chars of ? to store 
   901 000016CD B03F                <1>     mov al, "?"
   902 000016CF 51                  <1>     push rcx
   903 000016D0 0FB6C9              <1>     movzx ecx, cl   ;Temporarily extend cl to ecx
   904 000016D3 F3AA                <1>     rep stosb   ;Store that many ? in buffer and return cl to 0
   905 000016D5 59                  <1>     pop rcx
   906 000016D6 F6C501              <1>     test ch, 1  ;Is this bit set? If so, we jump to .cpsExtension
   907 000016D9 75CE                <1>     jnz .cpsExtension   ;Now fill the extension field
   908                              <1>     ;Else, we process filename
   909 000016DB EBE2                <1>     jmp short .cpsCharSkip
   910                              <1> .cpsPtrSkip:
   911                              <1> ;Now advance rsi past the next pathsep or null char
   912                              <1> ;If an invalid char is detected, it is considered to be a terminator
   913                              <1> ;Output: al = Terminator char (either \ or null)
   914                              <1> ;        rsi -> First char of next pathspec (if al = \)
   915 000016DD AC                  <1>     lodsb
   916 000016DE E84C3C0000          <1>     call checkCharOk
   917 000016E3 7418                <1>     je .cpsBadChar
   918 000016E5 84C0                <1>     test al, al ;Is this null?
   919                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 000016E7 7501                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 000016E9 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   920                              <1> ;If the next char that will be read is a pathsep, inc rsi to it
   921                              <1> ;This is to avoid multiple successive pathseps
   922                              <1> .cpsPtrSkip2:
   923 000016EA 803E5C              <1>     cmp byte [rsi], "\"
   924 000016ED 74EE                <1>     je .cpsPtrSkip 
   925 000016EF 803E2F              <1>     cmp byte [rsi], "/"
   926 000016F2 74E9                <1>     je .cpsPtrSkip 
   927                              <1>     ;If the current char is the final pathsep, exit
   928 000016F4 E80B3B0000          <1>     call swapPathSeparator
   929                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000016F9 74EE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   930 000016FB EBE0                <1>     jmp short .cpsPtrSkip
   931                              <1> 
   932                              <1> .cpsBadChar:
   933 000016FD 30C0                <1>     xor al, al  ;Convert the char to a terminator
   934                              <1>     return
    18                              <2> %%_ret:
    19 000016FF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   935                              <1> .cpsProcessName:
   936                              <1> ;Store the final char in the 12 space in the FCB name field
   937 00001700 488D3D(E6C50300)    <1>     lea rdi, fcbName+11
   938 00001707 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   939 00001708 5F                  <1>     pop rdi
   940                              <1>     return
    18                              <2> %%_ret:
    19 00001709 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   941                              <1> 
   942                              <1> searchForPathspec:
   943                              <1>     ;Now search the current directory for this filename
   944                              <1>     ;Find first using SDA ffBlock
   945                              <1>     ;If al = 0, we have final file name or directory name
   946                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
   947                              <1>     ;Output: CF=CY => Error occured
   948                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
   949                              <1>     ;                 FF block somewhat setup
   950                              <1>     ;Preserves rax, rbx, rsi,  rdi
   951 0000170A 50                  <1>     push rax
   952 0000170B 53                  <1>     push rbx
   953 0000170C 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
   954 0000170D 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
   955 0000170E 0FB61D(CAC30300)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
   956 00001715 53                  <1>     push rbx    ;and push it onto the stack
   957                              <1> ;Evaluate whether we are searching for a file for a directory
   958 00001716 84C0                <1>     test al, al
   959 00001718 741D                <1>     jz .sfpPNfile
   960                              <1>     ;Fall if subdir
   961 0000171A 488D3D(DBC50300)    <1>     lea rdi, fcbName
   962 00001721 B03F                <1>     mov al, "?" ;Search for wildcard
   963 00001723 B90C000000          <1>     mov ecx, 12
   964 00001728 F2AE                <1>     repne scasb
   965 0000172A 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
   966 0000172C B010                <1>     mov al, dirDirectory    ;We want a directory only search.
   967 0000172E C605(CAC30300)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
   968 00001735 EB07                <1>     jmp short .sfpPNMain
   969                              <1> .sfpPNfile:
   970                              <1>     ;Here if we are searching for a file or directory as setup by search init
   971 00001737 0FB605(56C60300)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
   972                              <1> .sfpPNMain:
   973 0000173E 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
   974 00001745 7405                <1>     je .sfpPNNoDisk
   975 00001747 E85BF9FFFF          <1>     call searchDir
   976                              <1> .sfpPNNoDisk:
   977 0000174C 5B                  <1>     pop rbx
   978 0000174D 881D(CAC30300)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
   979 00001753 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
   980 00001754 5E                  <1>     pop rsi
   981 00001755 5B                  <1>     pop rbx
   982 00001756 58                  <1>     pop rax
   983                              <1>     return
    18                              <2> %%_ret:
    19 00001757 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   984                              <1> .sfpPnf:
   985 00001758 B803000000          <1>     mov eax, errPnf
   986                              <1> .sfpErrExit:
   987 0000175D F9                  <1>     stc ;Set carry
   988 0000175E EBEC                <1>     jmp short .sfpPNNoDisk
   989                              <1> 
   990                              <1> addPathspecToBuffer:
   991                              <1> ;Input: fcbName = Qualified pathname portion
   992                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
   993                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
   994                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
   995                              <1> ;rbx points to the "head of the path"
   996 00001760 803D(DBC50300)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
   997 00001767 741F                <1>     je .aptbPNDots
   998                              <1>     ;Copy filename over to internal buffer
   999 00001769 56                  <1>     push rsi    ;Save source pointer position
  1000 0000176A 488D35(DBC50300)    <1>     lea rsi, fcbName
  1001 00001771 E831FBFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1002 00001776 48FFCF              <1>     dec rdi ;Go back to the copied Null char
  1003 00001779 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1004                              <1> .aptbOkExit:
  1005 0000177A 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the prev pathspec term char in al
  1006 0000177D E8823A0000          <1>     call swapPathSeparator
  1007 00001782 7402                <1>     jz .aptbPNexit
  1008 00001784 30C0                <1>     xor al, al  ;Set al to 0 else (all other chars are terminators)
  1009                              <1> .aptbPNexit:
  1010 00001786 AA                  <1>     stosb   ;Store this final char (either \ or NULL) and return
  1011                              <1>     return
    18                              <2> %%_ret:
    19 00001787 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1012                              <1> .aptbPNDots:
  1013                              <1> ;For one dot, we leave rdi where it is
  1014                              <1> ;For two dots, we search backwards for the previous "\"
  1015 00001788 803D(DCC50300)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1016 0000178F F8                  <1>     clc ;Ensure we clear CF if we return via here
  1017 00001790 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the previous char in al if we return
  1018                              <1>     retne   ;Return with rdi untouched and rsi advanced.
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001793 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1019                              <1>     ;Here we have two dots
  1020                              <1>     ;Walk rdi backwards until a \ is found
  1021 00001795 48FFCF              <1>     dec rdi  ;rdi points to current char. Preceeding it is a \. Skip that
  1022 00001798 66817FFF3A5C        <1>     cmp word [rdi - 1], ":\" ;IF the char preceeding \ is :, then error out
  1023 0000179E 7427                <1>     je .aptbPnf
  1024 000017A0 66817FFF5C5C        <1>     cmp word [rdi - 1], "\\" ;Similar net name check
  1025 000017A6 741F                <1>     je .aptbPnf
  1026                              <1> .aptbPNDotsLp:
  1027 000017A8 48FFCF              <1>     dec rdi
  1028 000017AB 803F5C              <1>     cmp byte [rdi], "\"
  1029 000017AE 75F8                <1>     jne .aptbPNDotsLp  ;Keep looping around until it is a "\"
  1030                              <1>     ;Don't go past the pathsep, since we may need to replace it with a null
  1031 000017B0 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;Are we in name resolution mode?
  1032 000017B7 74C1                <1>     je .aptbOkExit    ;If clear, we are, so just return
  1033 000017B9 4839DF              <1>     cmp rdi, rbx    ;Are we before the start of the path? (i.e in subst?)
  1034 000017BC 7209                <1>     jb .aptbPnf
  1035 000017BE EBBA                <1>     jmp short .aptbOkExit
  1036                              <1> .aptbSearchError:
  1037 000017C0 B812000000          <1>     mov eax, errNoFil
  1038 000017C5 EB05                <1>     jmp short .aptbErrExit
  1039                              <1> .aptbPnf:
  1040 000017C7 B803000000          <1>     mov eax, errPnf
  1041                              <1> .aptbErrExit:
  1042 000017CC F9                  <1>     stc ;Set carry
  1043                              <1>     return
    18                              <2> %%_ret:
    19 000017CD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1044                              <1> 
  1045                              <1> checkDevPath:
  1046                              <1> ;Called only if the file/directory was not found on disk.
  1047                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1048                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1049                              <1> ; and check to see if it is a char device. If it is, build a directory
  1050                              <1> ; If it is not, proceed with the request fail.
  1051                              <1> ;
  1052                              <1> ;Input: rsi = Pointer to the next path spec
  1053                              <1> ;Output: CF=NC => Char device found, directory built
  1054                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1055 000017CE 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1056                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000017D5 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1057 000017D7 803D(E6C50300)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1058 000017DE 7459                <1>     je .notOk                      
  1059                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1060 000017E0 50                  <1>     push rax
  1061 000017E1 48B844455620202020- <1>     mov rax, "DEV     "
  1061 000017EA 20                  <1>
  1062 000017EB 483905(DBC50300)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1063 000017F2 58                  <1>     pop rax
  1064 000017F3 7544                <1>     jne .notOk
  1065 000017F5 813D(E3C50300)2020- <1>     cmp dword [fcbName + 8], "   \"
  1065 000017FD 205C                <1>
  1066 000017FF 7538                <1>     jne .notOk
  1067                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1068                              <1>     ; looking for a device driver
  1069                              <1>     ;First append it to rdi 
  1070 00001801 B84445565C          <1>     mov eax, "DEV\" 
  1071 00001806 AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1072 00001807 57                  <1>     push rdi
  1073 00001808 488D3D(DBC50300)    <1>     lea rdi, fcbName
  1074 0000180F E84BFAFFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1075                              <1>     ;Returns in al the terminating char of the source string
  1076 00001814 5F                  <1>     pop rdi
  1077                              <1>     ;If al is a pathsep, fail
  1078 00001815 E8EA390000          <1>     call swapPathSeparator
  1079 0000181A 741D                <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1080 0000181C 30C0                <1>     xor al, al
  1081 0000181E 8805(E6C50300)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1082 00001824 53                  <1>     push rbx
  1083 00001825 E844000000          <1>     call checkIfCharDevice
  1084 0000182A 5B                  <1>     pop rbx ;Don't need bh yet
  1085 0000182B 720C                <1>     jc .notOk
  1086 0000182D E86D000000          <1>     call buildCharDir
  1087                              <1>     ;Here the device was determined to be a char device.
  1088                              <1>     ;A dummy directory entry was built for it.
  1089                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1090                              <1>     ; Do not Find Next!
  1091                              <1> .copyName:
  1092 00001832 E870FAFFFF          <1>     call FCBToAsciiz    ;Copy the ASCII form of the name over 
  1093 00001837 F8                  <1>     clc
  1094                              <1>     return
    18                              <2> %%_ret:
    19 00001838 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1095                              <1> .notOk:
  1096 00001839 B812000000          <1>     mov eax, errNoFil
  1097 0000183E F9                  <1>     stc
  1098                              <1>     return
    18                              <2> %%_ret:
    19 0000183F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1099                              <1> .charDevSearch:
  1100 00001840 53                  <1>     push rbx
  1101 00001841 E828000000          <1>     call checkIfCharDevice
  1102 00001846 5B                  <1>     pop rbx ;Dont need bh yet
  1103 00001847 72F0                <1>     jc .notOk
  1104 00001849 E851000000          <1>     call buildCharDir
  1105 0000184E 803D(E6C50300)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1106 00001855 750C                <1>     jne .cds2
  1107 00001857 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1108 0000185B 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1109 0000185D 48FFCF              <1>     dec rdi
  1110 00001860 B02F                <1>     mov al, "/" ;Replace \ with "/"
  1111 00001862 AA                  <1>     stosb   ;Store that and let the dir write the filename
  1112                              <1> .cds2:
  1113 00001863 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1114 0000186A 75C6                <1>     jne .copyName    ;Now jump if in disk search
  1115 0000186C F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1116                              <1>     return
    18                              <2> %%_ret:
    19 0000186D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1117                              <1> 
  1118                              <1> checkIfCharDevice:  ;Int 4Fh AX=1223h
  1119                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1120                              <1> ; device driver chain. 
  1121                              <1> ;Output: CF=CY if not found
  1122                              <1> ;        CF=NC if found
  1123                              <1> ;           BH = Low byte of the device attribute word
  1124 0000186E 50                  <1>     push rax
  1125 0000186F 57                  <1>     push rdi
  1126 00001870 488B05(DBC50300)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1127 00001877 488D3D(73C00300)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1128                              <1> .checkName:
  1129 0000187E 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1130 00001882 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1131 00001884 F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1132 00001887 7406                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1133 00001889 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1134 0000188D 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1135                              <1> .walkList:
  1136 0000188F 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1137 00001892 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1138 00001899 75E3                <1>     jne .checkName  ;If no, rdi points to char device
  1139 0000189B F9                  <1>     stc
  1140                              <1> .exit:
  1141 0000189C 5F                  <1>     pop rdi
  1142 0000189D 58                  <1>     pop rax
  1143                              <1>     return
    18                              <2> %%_ret:
    19 0000189E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1144                              <1> 
  1145                              <1> buildCharDir:
  1146                              <1> ;Build a dummy directory entry for the char device in FCBName
  1147                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1148 0000189F 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1149                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000018A6 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1150 000018A8 50                  <1>     push rax
  1151 000018A9 57                  <1>     push rdi
  1152 000018AA C605(E6C50300)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1153 000018B1 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
  1154                              <1>     ;Zero the directory copy (32 bytes)
  1155 000018B8 50                  <1>     push rax
  1156 000018B9 51                  <1>     push rcx
  1157 000018BA 57                  <1>     push rdi
  1158 000018BB 31C0                <1>     xor eax, eax    ;Zero rax
  1159 000018BD B904000000          <1>     mov ecx, 4
  1160 000018C2 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1161 000018C5 5F                  <1>     pop rdi
  1162 000018C6 59                  <1>     pop rcx
  1163 000018C7 58                  <1>     pop rax
  1164 000018C8 488B05(DBC50300)    <1>     mov rax, qword [fcbName]
  1165 000018CF 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1166 000018D2 B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1167 000018D7 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1168 000018DA C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1169                              <1>     ;Get date and time and set the write time in the directory entry
  1170 000018DE E8DB100000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1171 000018E3 E8C1110000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1172 000018E8 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1173 000018EB 31C0                <1>     xor eax, eax
  1174 000018ED 5F                  <1>     pop rdi
  1175 000018EE 58                  <1>     pop rax
  1176                              <1>     return
    18                              <2> %%_ret:
    19 000018EF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1177                              <1> 
  1178                              <1> checkFailingComp:
  1179                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1180                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1181                              <1> ;Returns: ZF=ZE => Last path componant
  1182                              <1> ;         ZF=NZ => Not last path componant
  1183 000018F0 50                  <1>     push rax
  1184 000018F1 8A05(E6C50300)      <1>     mov al, byte [fcbName + 11]
  1185 000018F7 84C0                <1>     test al, al
  1186 000018F9 58                  <1>     pop rax
  1187                              <1>     return
    18                              <2> %%_ret:
    19 000018FA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    25                                  %include "./Source/Kernel/FAT/dirfun.asm"
    26                              <1> ;---------------------------------------------------:
    27                              <1> ;                   KERNEL FUNCTIONS                :
    28                              <1> ;---------------------------------------------------:
    29                              <1> makeDIR:           ;ah = 39h
    30                              <1> ;For make, the path must exist but the final componant must not exist.
    31                              <1> ;Input: rdx = Pointer to ASCIIZ string
    32 000018FB 4889D7              <1>     mov rdi, rdx
    33 000018FE E833390000          <1>     call strlen
    34 00001903 81F940000000        <1>     cmp ecx, 64
    35 00001909 7607                <1>     jbe .okLength
    36                              <1> .badPath:
    37 0000190B B003                <1>     mov al, errPnf
    38 0000190D E9403C0000          <1>     jmp extErrExit
    39                              <1> .okLength:
    40 00001912 4889D6              <1>     mov rsi, rdx
    41 00001915 E886390000          <1>     call checkPathspecOK
    42 0000191A 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
    43                              <1> .pathOk:
    44 0000191C E8FB390000          <1>     call scanPathWC
    45 00001921 72E8                <1>     jc .badPath ;Dont allow wildcards
    46                              <1>     ;Path is ok, now proceed
    47 00001923 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
    48 0000192A E86DFAFFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
    49                              <1>     ;If the path exists, exit error
    50 0000192F 0F831D3C0000        <1>     jnc extErrExit
    51                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    52 00001935 E8B6FFFFFF          <1>     call checkFailingComp
    53 0000193A 0F85123C0000        <1>     jnz extErrExit
    54                              <1>     ;So all is well, the new subdirectories name is in fcbName
    55                              <1>     ;The parent dir's directory entry is in the curDirCopy
    56 00001940 E838370000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    57                              <1>     ;returns in rdi the working cds ptr
    58 00001945 7312                <1>     jnc .notNet
    59 00001947 B803110000          <1>     mov eax, 1103h
    60 0000194C CD4F                <1>     int 4fh
    61 0000194E 0F82FE3B0000        <1>     jc extErrExit
    62 00001954 E9EB3B0000          <1>     jmp extGoodExit
    63                              <1> .notNet:
    64 00001959 E8B53B0000          <1>     call dosCrit1Enter
    65                              <1>     ;Current dpb ptr is already set
    66                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    67                              <1>     ;First we make a dummy dir in curDirCopy
    68 0000195E 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
    69 00001965 488D35(DBC50300)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    70 0000196C 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
    71 00001973 48A5                <1>     movsq   ;Copy the name over
    72 00001975 A5                  <1>     movsd
    73 00001976 E843100000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    74 0000197B E829110000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    75 00001980 8905(C9C50300)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    76 00001986 8905(D1C50300)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    77 0000198C 31C0                <1>     xor eax, eax
    78 0000198E 8905(D7C50300)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    79 00001994 C605(C6C50300)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    80 0000199B 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]
    81                              <1> .searchForDirSpace:
    82 000019A1 8905(D6C60300)      <1>     mov dword [dirClustA], eax
    83 000019A7 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    84 000019A9 668905(DAC60300)    <1>     mov word [dirSect], ax
    85 000019B0 8905(DCC60300)      <1>     mov dword [dirEntry], eax
    86 000019B6 E8A3040000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    87 000019BB 7328                <1>     jnc .dirEntryFnd
    88 000019BD 813D(D2C60300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    88 000019C5 0000                <1>
    89 000019C7 0F846A010000        <1>     je .bad ;Set CF and exit
    90 000019CD E8A2050000          <1>     call growDirectory  ;Increase directory size by 1 cluster
    91 000019D2 0F825F010000        <1>     jc .bad
    92 000019D8 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    93 000019DD 0F8454010000        <1>     je .bad
    94                              <1>     ;Else eax = Newly allocated cluster
    95 000019E3 EBBC                <1>     jmp short .searchForDirSpace
    96                              <1> .dirEntryFnd:
    97                              <1> ;rdi points to current directory copy
    98                              <1> ;rsi now points to offset in the buffer to write the entry to
    99                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
   100 000019E5 488B1D(90C60300)    <1>     mov rbx, qword [currBuff]
   101 000019EC 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   102 000019F0 E8AAEFFFFF          <1>     call setBufferReferenced
   103 000019F5 488905(98C60300)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
   104 000019FC 4881C330000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   105 00001A03 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
   106 00001A06 668935(A0C60300)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
   107                              <1> ;Must now request a cluster and sanitise it
   108 00001A0D E8BEF2FFFF          <1>     call startNewChain  ;Get cluster number in eax
   109 00001A12 0F8224010000        <1>     jc .badExit
   110 00001A18 E88A050000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax
   111 00001A1D 0F8219010000        <1>     jc .badExit
   112                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
   113 00001A23 668905(D5C50300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   114 00001A2A C1E810              <1>     shr eax, 10h    ;Get high word low
   115 00001A2D 668905(CFC50300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   116 00001A34 488B05(98C60300)    <1>     mov rax, qword [tempSect]   ;Get the sector back
   117 00001A3B E8F8F0FFFF          <1>     call getBufForDirNoFile
   118 00001A40 0F82F6000000        <1>     jc .badExit
   119 00001A46 0FB705(A0C60300)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
   120 00001A4D 488D35(BBC50300)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
   121 00001A54 488D7C0330          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
   122 00001A59 B904000000          <1>     mov ecx, 4
   123 00001A5E F348A5              <1>     rep movsq   ;Copy over the buffered directory
   124 00001A61 E82AEFFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   125 00001A66 E834EFFFFF          <1>     call setBufferReferenced    ;We are now done with this buffer, reclaimable
   126                              <1>     ;Now need to read in data sector and make two entries . and ..
   127 00001A6B 48B82E202020202020- <1>     mov rax, ".       "
   127 00001A74 20                  <1>
   128 00001A75 488905(BBC50300)    <1>     mov qword [curDirCopy], rax
   129 00001A7C B820202020          <1>     mov eax, "    "
   130 00001A81 668905(C3C50300)    <1>     mov word [curDirCopy + 8], ax
   131 00001A88 8805(C5C50300)      <1>     mov byte [curDirCopy + 10], al
   132 00001A8E 0FB705(D5C50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   133 00001A95 0FB715(CFC50300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   134 00001A9C C1E210              <1>     shl edx, 10h
   135 00001A9F 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   136 00001AA1 E8B0F1FFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   137 00001AA6 E88DF0FFFF          <1>     call getBufForDirNoFile
   138 00001AAB 0F828B000000        <1>     jc .badExit
   139                              <1>     ;rbx has buffer pointer now
   140 00001AB1 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   141 00001AB8 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   142 00001ABC B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   143 00001AC1 F348A5              <1>     rep movsq
   144 00001AC4 488B5B0A            <1>     mov rbx, qword [rbx + bufferHdr.bufferLBA]  ;Save this sector for now
   145 00001AC8 E8C3EEFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   146 00001ACD E8CDEEFFFF          <1>     call setBufferReferenced    ;We are now done with this buffer, reclaimable
   147                              <1>     ;Now create .. entry
   148 00001AD2 C605(BCC50300)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   149 00001AD9 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   150 00001ADF E804F1FFFF          <1>     call getFATtype
   151 00001AE4 81F902000000        <1>     cmp ecx, 2
   152 00001AEA 7207                <1>     jb .notFAT32
   153 00001AEC 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   154 00001AEF 7502                <1>     jne .notFAT32
   155 00001AF1 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   156                              <1> .notFAT32:
   157 00001AF3 668905(D5C50300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   158 00001AFA C1E810              <1>     shr eax, 10h
   159 00001AFD 668905(CFC50300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   160 00001B04 4889D8              <1>     mov rax, rbx  ;Get this sector back again
   161 00001B07 E82CF0FFFF          <1>     call getBufForDirNoFile
   162 00001B0C 722E                <1>     jc .badExit
   163 00001B0E 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   164 00001B15 488D7B50            <1>     lea rdi, qword [rbx + bufferHdr.dataarea + fatDirEntry_size]    ;Next entry!
   165 00001B19 B904000000          <1>     mov ecx, 4
   166 00001B1E F348A5              <1>     rep movsq
   167 00001B21 E86AEEFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   168 00001B26 E874EEFFFF          <1>     call setBufferReferenced    ;We are now done with this buffer, reclaimable
   169                              <1>     ;Now I need to write the entry in the Parent Directory
   170                              <1> .okExit:
   171                              <1>     ;AND WE ARE DONE!
   172 00001B2B E8ED390000          <1>     call dosCrit1Exit
   173 00001B30 31C0                <1>     xor eax, eax
   174 00001B32 E90D3A0000          <1>     jmp extGoodExit
   175                              <1> .bad:
   176 00001B37 B805000000          <1>     mov eax, errAccDen
   177                              <1> .badExit:
   178 00001B3C E8DC390000          <1>     call dosCrit1Exit
   179 00001B41 E90C3A0000          <1>     jmp extErrExit
   180                              <1> 
   181                              <1> removeDIR:         ;ah = 3Ah
   182 00001B46 4889D7              <1>     mov rdi, rdx
   183 00001B49 E8E8360000          <1>     call strlen
   184 00001B4E 81F940000000        <1>     cmp ecx, 64
   185 00001B54 7607                <1>     jbe .okLength
   186                              <1> .badPath:
   187 00001B56 B003                <1>     mov al, errPnf
   188 00001B58 E9F5390000          <1>     jmp extErrExit
   189                              <1> .okLength:
   190 00001B5D 4889D6              <1>     mov rsi, rdx
   191 00001B60 E83B370000          <1>     call checkPathspecOK
   192 00001B65 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   193                              <1> .pathOk:
   194 00001B67 E8B0370000          <1>     call scanPathWC
   195 00001B6C 72E8                <1>     jc .badPath ;Dont allow wildcards
   196                              <1>     ;Path is ok, now proceed
   197 00001B6E 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   198 00001B75 E822F8FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   199 00001B7A 72DA                <1>     jc .badPath    ;Path Doesn't exist
   200 00001B7C E8FC340000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   201 00001B81 7312                <1>     jnc .notNet
   202 00001B83 B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   203 00001B88 CD4F                <1>     int 4fh
   204 00001B8A 0F82C2390000        <1>     jc extErrExit
   205 00001B90 E9AF390000          <1>     jmp extGoodExit
   206                              <1> .notNet:
   207 00001B95 E879390000          <1>     call dosCrit1Enter
   208 00001B9A 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   209                              <1>     ;Now let use check that our directory is not the CDS currentdir
   210 00001BA1 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]
   211 00001BA8 488D3D(7FC40300)    <1>     lea rdi, buffer1
   212 00001BAF E882360000          <1>     call strlen ;Get the length of the full qualified name in ecx
   213 00001BB4 66890D(A0C60300)    <1>     mov word [pathLen], cx
   214 00001BBB E88D360000          <1>     call strcmp ;Then compare rdi to CDS string
   215 00001BC0 750F                <1>     jnz .notEqual
   216 00001BC2 B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   217 00001BC7 E851390000          <1>     call dosCrit1Exit
   218 00001BCC E981390000          <1>     jmp extErrExit
   219                              <1> .notEqual:
   220 00001BD1 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   221                              <1>     ;If the given path length is one more than the backslash offset
   222                              <1>     ; due to the terminating null, then the user is trying to delete the 
   223                              <1>     ; root dir. Fail this.
   224 00001BD4 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   225 00001BD8 FFC1                <1>     inc ecx
   226 00001BDA 663B0D(A0C60300)    <1>     cmp cx, word [pathLen]
   227 00001BE1 0F8422010000        <1>     je .accessDenied
   228 00001BE7 E886020000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   229                              <1>     ;for the entry in the sector we are hoping to delete
   230 00001BEC 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   231 00001BF3 C1E010              <1>     shl eax, 10h
   232 00001BF6 0FB71D(D5C50300)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   233 00001BFD 09D8                <1>     or eax, ebx
   234 00001BFF 8905(D2C60300)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   235 00001C05 E84CF0FFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   236 00001C0A E829EFFFFF          <1>     call getBufForDirNoFile
   237 00001C0F 0F82F9000000        <1>     jc .exitBad
   238                              <1>     ;rbx points to buffer
   239 00001C15 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   240 00001C19 48B82E202020202020- <1>     mov rax, ".       "
   240 00001C22 20                  <1>
   241 00001C23 483906              <1>     cmp qword [rsi], rax
   242 00001C26 0F85DD000000        <1>     jne .accessDenied
   243 00001C2C B42E                <1>     mov ah, "." ;Screw the partial stall
   244 00001C2E 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   245 00001C32 0F85D1000000        <1>     jne .accessDenied
   246 00001C38 4881C620000000      <1>     add rsi, fatDirEntry_size
   247 00001C3F 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
   248 00001C46 B904000000          <1>     mov ecx, 4
   249 00001C4B F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   250 00001C4E E84CEDFFFF          <1>     call setBufferReferenced    ;We are now done with this buffer, reclaimable
   251                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   252                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   253 00001C53 488D3D(DBC50300)    <1>     lea rdi, fcbName
   254 00001C5A B03F                <1>     mov al, "?"
   255 00001C5C B90B000000          <1>     mov ecx, 11
   256 00001C61 F3AA                <1>     rep stosb   ;Store the pattern to search for
   257 00001C63 30C0                <1>     xor al, al  ;Store a terminating zero
   258 00001C65 AA                  <1>     stosb
   259 00001C66 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   260 00001C6C 50                  <1>     push rax    ;Save on stack temporarily
   261 00001C6D 8905(D6C60300)      <1>     mov dword [dirClustA], eax
   262 00001C73 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   263 00001C75 668905(DAC60300)    <1>     mov word [dirSect], ax
   264 00001C7C C705(DCC60300)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   264 00001C84 0000                <1>
   265 00001C86 C605(56C60300)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   266 00001C8D 58                  <1>     pop rax
   267 00001C8E E8C3EFFFFF          <1>     call getStartSectorOfCluster
   268 00001C93 E8C2EEFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   269 00001C98 7274                <1>     jc .exitBad
   270 00001C9A E8F6F4FFFF          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   271 00001C9F 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   272 00001CA6 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   273 00001CAC E837F4FFFF          <1>     call searchDir.rmdirEP
   274 00001CB1 7356                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   275                              <1>     ;Else, this is a empty dir, we can remove it
   276                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   277 00001CB3 488B05(98C60300)    <1>     mov rax, qword [tempSect]
   278 00001CBA E89BEEFFFF          <1>     call getBufForDOS
   279 00001CBF 724D                <1>     jc .exitBad
   280 00001CC1 E8CFF4FFFF          <1>     call adjustDosDirBuffer
   281 00001CC6 0FB705(A0C60300)    <1>     movzx eax, word [entry]
   282 00001CCD 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   283 00001CD1 4801C6              <1>     add rsi, rax    
   284 00001CD4 8A05(62C60300)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   285 00001CDA 8806                <1>     mov byte [rsi], al  ;Store delchar there
   286 00001CDC 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   287 00001CE0 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   288 00001CE4 E8A7ECFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   289 00001CE9 E8B1ECFFFF          <1>     call setBufferReferenced    ;We are now done with this buffer, reclaimable
   290                              <1>     breakpoint
    78 00001CEE 6687DB              <2> xchg bx, bx
   291 00001CF1 C1E210              <1>     shl edx, 10h
   292 00001CF4 09D0                <1>     or eax, edx
   293                              <1>     ;Now remove the FAT chain
   294 00001CF6 E802F1FFFF          <1>     call unlinkFAT
   295 00001CFB 7211                <1>     jc .exitBad
   296 00001CFD E81B380000          <1>     call dosCrit1Exit
   297 00001D02 31C0                <1>     xor eax, eax
   298 00001D04 E93B380000          <1>     jmp extGoodExit
   299                              <1> .accessDenied:
   300 00001D09 B805000000          <1>     mov eax, errAccDen
   301                              <1> .exitBad:
   302 00001D0E F9                  <1>     stc
   303 00001D0F E809380000          <1>     call dosCrit1Exit
   304 00001D14 E939380000          <1>     jmp extErrExit
   305                              <1> 
   306                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   307                              <1> ;Input: rdx = Pointer to ASCIIZ string
   308 00001D19 4889D7              <1>     mov rdi, rdx
   309 00001D1C E815350000          <1>     call strlen
   310 00001D21 81F940000000        <1>     cmp ecx, 64
   311 00001D27 7607                <1>     jbe .okLength
   312                              <1> .badPath:
   313 00001D29 B003                <1>     mov al, errPnf
   314 00001D2B E922380000          <1>     jmp extErrExit
   315                              <1> .okLength:
   316 00001D30 4889D6              <1>     mov rsi, rdx
   317 00001D33 E868350000          <1>     call checkPathspecOK
   318 00001D38 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   319 00001D3A E8DD350000          <1>     call scanPathWC
   320 00001D3F 72E8                <1>     jc .badPath ;Or wildcards
   321 00001D41 E818360000          <1>     call checkPathNet
   322 00001D46 74E1                <1>     jz .badPath ;Or Net paths
   323                              <1>     ;Path is ok, now proceed
   324 00001D48 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   325 00001D4F E848F6FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   326 00001D54 0F82F8370000        <1>     jc extErrExit   ;Exit with error code in eax
   327                              <1>     ;The path must've been ok, so now copy the path into the CDS
   328                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   329 00001D5A 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Copy the CDS to the tmpCDS
   330 00001D61 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   331 00001D67 756D                <1>     jnz .net    ;This is done by the redirector for redirector drives
   332 00001D69 488D3D(FBC50300)    <1>     lea rdi, tmpCDS
   333 00001D70 B95B000000          <1>     mov ecx, cds_size
   334 00001D75 F3A4                <1>     rep movsb
   335                              <1>     ;If the path is longer than 67, call it an invalid path
   336 00001D77 488D3D(7FC40300)    <1>     lea rdi, buffer1
   337 00001D7E E8B3340000          <1>     call strlen ;Get the length of this path
   338 00001D83 81F943000000        <1>     cmp ecx, 67
   339 00001D89 779E                <1>     ja .badPath
   340 00001D8B 4889FE              <1>     mov rsi, rdi    ;Move buffer source to rsi
   341 00001D8E 488D3D(FBC50300)    <1>     lea rdi, tmpCDS
   342 00001D95 F3A4                <1>     rep movsb   ;Copy the path over
   343                              <1>     ;Now get the start cluster from the directory copy
   344 00001D97 0FB715(D5C50300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   345 00001D9E 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   346 00001DA5 C1E010              <1>     shl eax, 10h
   347 00001DA8 09D0                <1>     or eax, edx ;Add low bits to eax
   348 00001DAA 8905(48C60300)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   349 00001DB0 488D35(FBC50300)    <1>     lea rsi, tmpCDS
   350 00001DB7 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   351 00001DBE B95B000000          <1>     mov ecx, cds_size
   352 00001DC3 E84B370000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   353 00001DC8 F3A4                <1>     rep movsb
   354 00001DCA E84E370000          <1>     call dosCrit1Exit
   355 00001DCF 31C0                <1>     xor eax, eax
   356 00001DD1 E96E370000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   357                              <1> .net:
   358                              <1> ;SDA Vars are setup for this request
   359 00001DD6 B805110000          <1>     mov eax, 1105h
   360 00001DDB CD4F                <1>     int 4fh
   361 00001DDD 0F826F370000        <1>     jc extErrExit
   362 00001DE3 E95C370000          <1>     jmp extGoodExit
   363                              <1> getCurrentDIR:     ;ah = 47h
   364                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   365                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   366 00001DE8 88D0                <1>     mov al, dl  ;Move drive number into al
   367 00001DEA E888330000          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   368 00001DEF 0F825D370000        <1>     jc extErrExit
   369                              <1> .okDrive:
   370 00001DF5 4889F7              <1>     mov rdi, rsi    ;Save destination in rdi
   371 00001DF8 E816370000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   372 00001DFD 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]  ;Get pointer to current CDS in rsi
   373 00001E04 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   374 00001E08 FFC0                <1>     inc eax ;Go past the backslash
   375 00001E0A 4801C6              <1>     add rsi, rax ;Add this many chars to rsi to point to first char to copy
   376 00001E0D E833340000          <1>     call strcpy
   377 00001E12 E806370000          <1>     call dosCrit1Exit
   378 00001E17 B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   379 00001E1C E923370000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   380                              <1> 
   381                              <1> getSetFileDateTime:;ah = 57h
   382                              <1> trueName:          ;ah = 60h, get fully qualified name. Int 4Fh, AX=1221h
   383                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   384 00001E21 E87A340000          <1>     call checkPathspecOK    ;This preserves rsi
   385 00001E26 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   386 00001E28 740A                <1>     jz .pathspecOk  ;If the last char in the path is malformed allow it here
   387                              <1> .badPath:
   388 00001E2A B803000000          <1>     mov eax, errPnf
   389 00001E2F E91E370000          <1>     jmp extErrExit
   390                              <1> .pathspecOk:
   391 00001E34 57                  <1>     push rdi    ;Save the destination
   392 00001E35 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   393 00001E3C E83CF5FFFF          <1>     call canonicaliseFileName
   394 00001E41 C60700              <1>     mov byte [rdi], 0   ;Store a terminating zero if necessary
   395 00001E44 5F                  <1>     pop rdi
   396 00001E45 0F8207370000        <1>     jc extErrExit
   397 00001E4B 488D35(7FC40300)    <1>     lea rsi, buffer1
   398 00001E52 E8EE330000          <1>     call strcpy
   399 00001E57 31C0                <1>     xor eax, eax
   400 00001E59 E9E6360000          <1>     jmp extGoodExit
   401                              <1> 
   402                              <1> ;-----------------------------------
   403                              <1> ;    General Directory Routines    :
   404                              <1> ;-----------------------------------
   405                              <1> 
   406                              <1> findFreeDiskDirEntry:
   407                              <1> ;Find a space in the directory we are searching for a directory entry
   408                              <1> ;Accept first entry starting with a 0E5h or 00h
   409                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   410                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   411                              <1> ; be called for CDS's that are NOT net CDS's).
   412                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   413                              <1> ;       Directory vars must be set up for the directory we are searching in
   414                              <1> ;Output: CF=CY => Error, eax has error code
   415                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   416 00001E5E 8A05(62C60300)      <1>     mov al, byte [delChar]
   417 00001E64 8805(DBC50300)      <1>     mov byte [fcbName], al
   418 00001E6A E838F2FFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   419                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00001E6F 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00001E71 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   420                              <1> ;Free entry found, dir variables are set for the free entry. 
   421                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   422                              <1> getDiskDirectoryEntry:
   423                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   424                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   425                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   426                              <1> ;        qword [tempSect] = Disk sector number of directory
   427                              <1> ;        word [entry] = 32 byte offset into sector
   428                              <1> ;        CF=CY => Error, exit 
   429 00001E72 53                  <1>     push rbx
   430 00001E73 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  
   431                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   432                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   433 00001E79 0FB71D(DAC60300)    <1>     movzx ebx, word [dirSect]
   434 00001E80 85C0                <1>     test eax, eax
   435 00001E82 7407                <1>     jz .skipCluster
   436 00001E84 E8CDEDFFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   437 00001E89 EB0C                <1>     jmp short .skipOldFat
   438                              <1> .skipCluster:
   439 00001E8B 55                  <1>     push rbp
   440 00001E8C 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   441 00001E93 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   442 00001E96 5D                  <1>     pop rbp
   443                              <1> .skipOldFat:
   444 00001E97 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   445 00001E9A 488905(98C60300)    <1>     mov qword [tempSect], rax   ;Save this sector number
   446 00001EA1 E8B4ECFFFF          <1>     call getBufForDOS   ;Get buffer for DOS in rbx
   447 00001EA6 5B                  <1>     pop rbx
   448                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001EA7 72C8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   449 00001EA9 53                  <1>     push rbx
   450 00001EAA 488B1D(90C60300)    <1>     mov rbx, qword [currBuff]
   451 00001EB1 E8DFF2FFFF          <1>     call adjustDosDirBuffer ;Change buffer to Dir buffer
   452                              <1>     ;Above function gets data buffer ptr in rsi
   453 00001EB6 0FB705(DAC60300)    <1>     movzx eax, word [dirSect]   ;Get the sector in which the offset lies
   454 00001EBD 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   455 00001EC1 F7E3                <1>     mul ebx ;Multiply these two words so eax has number of bytes to
   456                              <1>     ; the current sector
   457 00001EC3 C1E805              <1>     shr eax, 5  ;Divide by 32 to get the number of dir entries we are skipping
   458 00001EC6 8B1D(DCC60300)      <1>     mov ebx, dword [dirEntry]   ;Get offset into dir file cluster
   459 00001ECC 29C3                <1>     sub ebx, eax    ;Now ebx has the dir entry offset in the current sector
   460 00001ECE C1E305              <1>     shl ebx, 5  ;Multiply by 32 to get byte offset
   461 00001ED1 66891D(A0C60300)    <1>     mov word [entry], bx  ;Save 32 byte offset into sector
   462 00001ED8 4801DE              <1>     add rsi, rbx    ;rsi now points to the entry
   463 00001EDB 5B                  <1>     pop rbx
   464                              <1>     return
    18                              <2> %%_ret:
    19 00001EDC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   465                              <1> 
   466                              <1> 
   467                              <1> updateDirectoryEntryForFile:    
   468                              <1> ;Updates the directory entry for disk files
   469                              <1> ;Called with:
   470                              <1> ;   [workingDPB] = DPB pointer for the disk device
   471                              <1> ;   [currentSFT] = Current SFT pointer
   472 00001EDD 50                  <1>     push rax
   473 00001EDE 53                  <1>     push rbx
   474 00001EDF 57                  <1>     push rdi
   475 00001EE0 55                  <1>     push rbp
   476                              <1> 
   477 00001EE1 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   478 00001EE8 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   479 00001EEF 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
   480 00001EF5 751D                <1>     jnz .skipDT
   481                              <1>     ;Get date and time words and add them to the directory entry
   482 00001EF7 E8C20A0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   483 00001EFC 7271                <1>     jc .exit  ;If we fail to get time/date, fail the request
   484                              <1>     ;Build date and time words
   485 00001EFE E8A60B0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   486                              <1>     ;Update SFT fields
   487 00001F03 66894713            <1>     mov word [rdi + sft.wTime], ax
   488 00001F07 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   489 00001F0A 66894715            <1>     mov word [rdi + sft.wDate], ax
   490 00001F0E 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush  ;We update DT, so flush
   491                              <1> .skipDT:
   492                              <1> ;Before we read the dir sector in, if we never wrote to the disk
   493                              <1> ; we skip all of this
   494 00001F14 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
   495 00001F1A 7453                <1>     jz .exit ;If the file was never written to, don't bother updating DIR data
   496 00001F1C 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   497 00001F20 E843ECFFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
   498 00001F25 7248                <1>     jc .exit    ;If an error is to be returned from, we skip the rest of this
   499                              <1>     ;Now we write the changes to the sector
   500                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
   501 00001F27 E864EAFFFF          <1>     call setBufferDirty
   502 00001F2C 488D6B30            <1>     lea rbp, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   503 00001F30 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   504 00001F34 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   505 00001F37 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
   506 00001F3A 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
   507 00001F3D 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
   508 00001F40 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
   509 00001F44 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
   510 00001F48 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
   511 00001F4C 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
   512 00001F50 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
   513 00001F54 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
   514 00001F57 6689451A            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusLo], ax
   515 00001F5B C1E810              <1>     shr eax, 10h
   516 00001F5E 66894514            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusHi], ax
   517                              <1>     ;Directory sector updated and marked to be flushed to disk!
   518                              <1>     ;Now mark that the file has sectors not yet flushed to disk
   519 00001F62 E838EAFFFF          <1>     call setBufferReferenced
   520 00001F67 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
   521 00001F68 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush
   522 00001F6E 9D                  <1>     popfq
   523                              <1> .exit:
   524 00001F6F 5D                  <1>     pop rbp
   525 00001F70 5F                  <1>     pop rdi
   526 00001F71 5B                  <1>     pop rbx
   527 00001F72 58                  <1>     pop rax
   528                              <1>     return
    18                              <2> %%_ret:
    19 00001F73 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   529                              <1> 
   530                              <1> growDirectory:
   531                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   532                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   533                              <1> ;                 eax = New Cluster number
   534                              <1> ;               TWO NON CF ERROR CASES.
   535                              <1> ;               If eax = -1 => disk full!
   536                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   537                              <1> ;        CF=CY => Something went wrong. Rip. 
   538 00001F74 53                  <1>     push rbx
   539 00001F75 51                  <1>     push rcx
   540 00001F76 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   541 00001F7C 85C0                <1>     test eax, eax
   542 00001F7E 7424                <1>     jz .exit
   543 00001F80 E8FEECFFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   544 00001F85 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   545 00001F87 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   546 00001F8C E860EDFFFF          <1>     call allocateClusters   ;ebx has last cluster value
   547 00001F91 7211                <1>     jc .exit
   548 00001F93 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   549 00001F95 E899EEFFFF          <1>     call readFAT
   550 00001F9A 7208                <1>     jc .exit
   551 00001F9C E806000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   552 00001FA1 7201                <1>     jc .exit
   553 00001FA3 F8                  <1>     clc
   554                              <1> .exit:
   555 00001FA4 59                  <1>     pop rcx
   556 00001FA5 5B                  <1>     pop rbx
   557                              <1>     return   
    18                              <2> %%_ret:
    19 00001FA6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   558                              <1> sanitiseCluster:
   559                              <1> ;Sanitises the cluster in eax to all zeros
   560                              <1> ;Does not move file pointers
   561                              <1> ;Currently, is only called to sanitise subdirectory clusters
   562                              <1> ;Input: eax = Cluster number
   563                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   564                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   565                              <1> ;        If CF=CY => Error, exit
   566 00001FA7 50                  <1>     push rax
   567 00001FA8 53                  <1>     push rbx
   568 00001FA9 51                  <1>     push rcx
   569 00001FAA 52                  <1>     push rdx
   570 00001FAB 56                  <1>     push rsi
   571 00001FAC 55                  <1>     push rbp
   572 00001FAD 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   573 00001FB4 E89DECFFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   574 00001FB9 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   575 00001FBD FFC2                <1>     inc edx ;Make it a count of sectors
   576                              <1> .getSectorInCluster:
   577 00001FBF E857EBFFFF          <1>     call getBufForDataNoFile  ;Get a generic data buffer in rbx
   578 00001FC4 7223                <1>     jc .exitBad
   579 00001FC6 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   580 00001FCA 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   581 00001FCE 31C0                <1>     xor eax, eax
   582 00001FD0 F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   583 00001FD2 E8B9E9FFFF          <1>     call setBufferDirty ;We wrote to this buffer
   584 00001FD7 E8C3E9FFFF          <1>     call setBufferReferenced    ;We are now done with this buffer, reclaimable
   585 00001FDC FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   586 00001FDE 740A                <1>     jz .exit    ;Jump if we done
   587 00001FE0 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   588 00001FE4 48FFC0              <1>     inc rax ;Goto next sector in cluster
   589 00001FE7 EBD6                <1>     jmp short .getSectorInCluster
   590                              <1> .exitBad:
   591 00001FE9 F9                  <1>     stc
   592                              <1> .exit:
   593 00001FEA 5D                  <1>     pop rbp
   594 00001FEB 5E                  <1>     pop rsi
   595 00001FEC 5A                  <1>     pop rdx
   596 00001FED 59                  <1>     pop rcx
   597 00001FEE 5B                  <1>     pop rbx
   598 00001FEF 58                  <1>     pop rax
   599                              <1>     return
    18                              <2> %%_ret:
    19 00001FF0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    26                                  %include "./Source/Kernel/FileIO/devio.asm"
    27                              <1> ;This file contains the primitive dev io function, which will be called 
    28                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
    29                              <1> ; make requests for device IO.
    30                              <1> 
    31                              <1> mainCharIO:
    32                              <1> ;This is the main IO clearing function for Char IO.
    33                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
    34                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
    35                              <1> ;
    36                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    37                              <1> ;       ah = {0,..., 5}, a subfunction number
    38                              <1> ;       Function 0: Read Char (drvREAD)
    39                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    40                              <1> ;       Function 2: Write Char (drvWrite)
    41                              <1> ; In the case the below functions are called for Disk/Net files
    42                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    43                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    44                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    45                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    46                              <1> ;
    47                              <1> ; If and only if ah = 02h, al = Char to write to device
    48                              <1> ;
    49                              <1> ;
    50                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    51                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    52                              <1> ;                                           ZF = NZ => Device ready (not busy)
    53                              <1> ;                                               If ND read, AL = Next Char
    54                              <1> ; For Files/Net:
    55                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    56                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    57                              <1> ;           For Read and ND Read:
    58                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    59                              <1> ;               Read returns ^Z on EOF.
    60                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    61                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    62                              <1> ;
    63                              <1> ;All registers preserved EXCEPT for ax and flags
    64                              <1> 
    65                              <1> ;Reference Request Header
    66                              <1> ;Common Section:
    67                              <1> ;    .hdrlen resb 1  ;Length of the request header
    68                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    69                              <1> ;    .cmdcde resb 1  ;Command code
    70                              <1> ;    .status resw 1  ;Status word
    71                              <1> ;    .devptr resq 1  ;Reserved. Unused
    72                              <1> ;Below used by calls 0,1,2,5
    73                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    74                              <1> ;Below used by calls 0,2
    75                              <1> ;    .bufptr resq 1
    76                              <1> ;    .tfrlen resd 1
    77                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    78                              <1> ;    .strtsc resq 1
    79                              <1> ;    .desptr resq 1
    80                              <1> 
    81                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    82 00001FF1 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    83 00001FF2 488D1D(7DC40300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    84 00001FF9 48891D(06C40300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    85 00002000 5B                  <1>     pop rbx
    86 00002001 C705(0EC40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    86 00002009 0000                <1>
    87 0000200B 668905(7DC40300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    88 00002012 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    89 00002018 0F85A1000000        <1>     jnz .notChar
    90 0000201E 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    91 00002024 0F8495000000        <1>     jz .notChar
    92                              <1> ;Char devices only here
    93 0000202A E8CD340000          <1>     call dosPushRegs    ;Save context here
    94 0000202F 488D1D0BE0FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    95 00002036 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    96 00002039 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    97 0000203C 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    98 0000203F 890D(F8C30300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    99                              <1>     ;Now set up cx for status word
   100 00002045 31C9                <1>     xor ecx, ecx
   101 00002047 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
   102 0000204A 7506                <1>     jne .skipBsySet
   103 0000204C 81C900020000        <1>     or ecx, drvBsyStatus
   104                              <1> .skipBsySet:
   105 00002052 66870D(FBC30300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
   106                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
   107 00002059 488D1D(F8C30300)    <1>     lea rbx, secdReqHdr
   108 00002060 E8602C0000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
   109 00002065 668B3D(FBC30300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
   110 0000206C F7C700800000        <1>     test edi, drvErrStatus
   111 00002072 752D                <1>     jnz .error
   112                              <1> .ignoreRet:
   113 00002074 803D(FAC30300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
   114 0000207B 750C                <1>     jne .notNDRead
   115 0000207D 8A05(05C40300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
   116 00002083 8805(7DC40300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
   117                              <1> .notNDRead:
   118 00002089 8A25(FCC30300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
   119 0000208F F6D4                <1>     not ah
   120 00002091 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
   121 00002094 E84C340000          <1>     call dosPopRegs ;Get back the context
   122 00002099 668B05(7DC40300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
   123                              <1>     return ;Return to caller
    18                              <2> %%_ret:
    19 000020A0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   124                              <1> .error:
   125                              <1>     ;cl has flags
   126 000020A1 88CC                <1>     mov ah, cl
   127 000020A3 E8F42A0000          <1>     call charDevErr
   128 000020A8 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   129 000020AA 750A                <1>     jne .errorIgnore
   130                              <1>     ;Fallthrough => Retry
   131 000020AC E834340000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   132 000020B1 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   133                              <1> .errorIgnore:
   134                              <1>     ;Clear the busy bit in the status word
   135 000020B6 8025(FCC30300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   136 000020BD EBB5                <1>     jmp short .ignoreRet
   137                              <1> .notChar:
   138                              <1> ;Just return with ZF=NZ for now
   139 000020BF 50                  <1>     push rax
   140 000020C0 31C0                <1>     xor eax, eax
   141 000020C2 FEC0                <1>     inc al
   142 000020C4 58                  <1>     pop rax
   143                              <1>     return
    18                              <2> %%_ret:
    19 000020C5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> 
   145                              <1> openSFT:
   146                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   147                              <1> ;Input: rdi = SFT pointer
   148 000020C6 E831340000          <1>     call dosPushRegs
   149 000020CB B00D                <1>     mov al, drvOPEN
   150 000020CD EB07                <1>     jmp short openCloseCommon
   151                              <1> closeSFT:
   152                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   153 000020CF E828340000          <1>     call dosPushRegs
   154 000020D4 B00E                <1>     mov al, drvCLOSE
   155                              <1> openCloseCommon:
   156                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   157 000020D6 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   158 000020DC 7469                <1>     jz .exit    ;Exit if so
   159 000020DE F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   160 000020E2 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   161 000020E6 7512                <1>     jnz .charDev
   162                              <1>     ;Here a disk drive, rdi is a DPB ptr
   163 000020E8 803D(36C30300)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   164 000020EF 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   165 000020F1 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   166 000020F4 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   167 000020F6 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   168                              <1> .charDev:
   169 000020FA 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   170 00002100 7445                <1>     jz .exit    ;No, exit!
   171 00002102 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   172 00002105 488D1D(22C40300)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   173 0000210C 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   174                              <1> .retryEP:
   175 0000210F 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   176 00002112 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   177 00002115 50                  <1>     push rax    ;Save the dword
   178 00002116 E8AE2B0000          <1>     call goDriver
   179 0000211B 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   180 00002122 F7C700800000        <1>     test edi, drvErrStatus
   181 00002128 741C                <1>     jz .exitPop
   182                              <1>     ;Error here, check if char or block drive
   183 0000212A 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   184 00002130 7404                <1>     jz .blockError
   185                              <1>     ;Char error here
   186 00002132 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   187 00002134 EB04                <1>     jmp short .errorCmn
   188                              <1> .blockError:
   189 00002136 88C8                <1>     mov al, cl  ;Move drive number into al
   190 00002138 B406                <1>     mov ah, critData    ;Data on block dev error
   191                              <1> .errorCmn:
   192                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   193 0000213A E85D2A0000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   194 0000213F B001                <1>     mov al, critRetry   ;al returns user response
   195 00002141 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   196 00002143 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   197 00002144 EBC9                <1>     jmp short .retryEP  ;Reset
   198                              <1> .exitPop:
   199 00002146 58                  <1>     pop rax    
   200                              <1> .exit:
   201 00002147 E899330000          <1>     call dosPopRegs
   202                              <1>     return
    18                              <2> %%_ret:
    19 0000214C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    27                                  %include "./Source/Kernel/FileIO/charFunc.asm"
    28                              <1> ;-----------------------------------------------------------------------:
    29                              <1> ;                  DOS default char functions live here                 :
    30                              <1> ;                                                                       :
    31                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    32                              <1> ;                                                                       :
    33                              <1> ;Rules for the naming of the DOS functions                              :
    34                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    35                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    36                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    37                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    38                              <1> ;                                                                       :
    39                              <1> ;-----------------------------------------------------------------------:
    40                              <1> 
    41                              <1> charIn_BE:     ;ah = 01h
    42                              <1> ;Return char that has been read and echoed in al
    43 0000214D E866010000          <1>     call charIn_B
    44 00002152 50                  <1>     push rax
    45 00002153 E804000000          <1>     call charOut_B.in    ;Output it to screen
    46 00002158 58                  <1>     pop rax
    47                              <1>     return
    18                              <2> %%_ret:
    19 00002159 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    48                              <1> 
    49                              <1> charOut_B:       ;ah = 02h
    50                              <1> ;Bspace is regular cursor left, does not insert a blank
    51 0000215A 88D0                <1>     mov al, dl
    52                              <1> .in:  ;Internal function Entry Point, with char in al
    53 0000215C 3C20                <1>     cmp al, asciiCaret
    54 0000215E 7277                <1>     jb .control
    55 00002160 3C7F                <1>     cmp al, DEL ;DEL char?
    56 00002162 7406                <1>     je .skipCurs
    57 00002164 FE05(2EC20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    58                              <1> .skipCurs:
    59 0000216A FE05(34C30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    60 00002170 8025(34C30300)03    <1>     and byte [vConErr], 3
    61 00002177 56                  <1>     push rsi
    62 00002178 7507                <1>     jnz .skipErrorCheck
    63 0000217A 50                  <1>     push rax
    64 0000217B E884020000          <1>     call vConCtrlCheck
    65 00002180 58                  <1>     pop rax
    66                              <1> .skipErrorCheck:
    67 00002181 E80C020000          <1>     call outputOnStdout
    68 00002186 5E                  <1>     pop rsi
    69 00002187 F605(31C30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    70                              <1>     retz    ;If zero, no echo
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000218E 74C9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    71 00002190 53                  <1>     push rbx
    72 00002191 56                  <1>     push rsi
    73 00002192 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    74 00002197 E82F030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    75 0000219C 7236                <1>     jc .exitPrintEcho
    76                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    77 0000219E 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    78 000021A2 F7C300800000        <1>     test ebx, devRedirDev
    79 000021A8 752A                <1>     jnz .exitPrintEcho  ;Exit if STDOUT is redir
    80 000021AA F7C380000000        <1>     test ebx, devCharDev
    81 000021B0 7422                <1>     jz .exitPrintEcho
    82 000021B2 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    83 000021B7 E80F030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    84 000021BC 7216                <1>     jc .exitPrintEcho   ;Exit if handle closed
    85 000021BE 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    86 000021C4 7407                <1>     jz .netSpool
    87 000021C6 E8FB010000          <1>     call outputOnSFT
    88 000021CB EB07                <1>     jmp short .exitPrintEcho
    89                              <1> .netSpool:
    90 000021CD C605(31C30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    91                              <1> .exitPrintEcho:
    92 000021D4 5E                  <1>     pop rsi
    93 000021D5 5B                  <1>     pop rbx
    94                              <1>     return
    18                              <2> %%_ret:
    19 000021D6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    95                              <1> .control:
    96 000021D7 3C0D                <1>     cmp al, CR
    97 000021D9 7425                <1>     je .newline
    98 000021DB 3C08                <1>     cmp al, BSP
    99 000021DD 742D                <1>     je .back
   100 000021DF 3C09                <1>     cmp al, TAB
   101 000021E1 7587                <1>     jne .skipCurs   ;Treat as normal
   102                              <1>     ;TAB key here
   103                              <1> .tab:
   104 000021E3 51                  <1>     push rcx
   105 000021E4 0FB60D(2EC20300)    <1>     movzx ecx, byte [vConCursPos]
   106 000021EB 80C9F8              <1>     or cl, ~7
   107 000021EE F6D9                <1>     neg cl
   108 000021F0 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
   109                              <1> .tabloop:
   110 000021F3 B020                <1>     mov al, SPC
   111 000021F5 E862FFFFFF          <1>     call charOut_B.in   ;Output the char
   112 000021FA FEC9                <1>     dec cl
   113 000021FC 75F5                <1>     jnz .tabloop
   114                              <1> .stopTab:
   115 000021FE 59                  <1>     pop rcx
   116                              <1>     return ;Exit
    18                              <2> %%_ret:
    19 000021FF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   117                              <1> .newline:
   118 00002200 C605(2EC20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
   119 00002207 E95EFFFFFF          <1>     jmp .skipCurs   ;And echo 
   120                              <1> .back:
   121 0000220C FE0D(2EC20300)      <1>     dec byte [vConCursPos]
   122 00002212 E953FFFFFF          <1>     jmp .skipCurs   ;And echo
   123                              <1> 
   124                              <1> auxIn_B:        ;ah = 03h
   125 00002217 E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
   126 0000221C BB03000000          <1>     mov ebx, 3
   127 00002221 E8A5020000          <1>     call getCharDevSFT
   128                              <1>     retc    ;Return if CF set (handle 3 is closed)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002226 72D7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   129                              <1> .auxloop:
   130 00002228 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
   131 0000222A E8C2FDFFFF          <1>     call mainCharIO
   132 0000222F 7408                <1>     jz .signalLoop
   133 00002231 30E4                <1>     xor ah, ah  ;Read the char in
   134 00002233 E8B9FDFFFF          <1>     call mainCharIO
   135                              <1>     return
    18                              <2> %%_ret:
    19 00002238 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   136                              <1> .signalLoop:
   137 00002239 E8A3010000          <1>     call callInt48h
   138 0000223E EBE8                <1>     jmp short .auxloop
   139                              <1> 
   140                              <1> auxOut_B:       ;ah = 04h
   141 00002240 53                  <1>     push rbx
   142 00002241 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   143 00002246 EB06                <1>     jmp short auxOutCmn
   144                              <1> prnOut_B:       ;ah = 05h
   145 00002248 53                  <1>     push rbx
   146 00002249 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   147                              <1> auxOutCmn: ;Auxilliary output device common 
   148 0000224E 88D0                <1>     mov al, dl  ;Get the char into al
   149 00002250 50                  <1>     push rax
   150 00002251 E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   151 00002256 58                  <1>     pop rax
   152 00002257 56                  <1>     push rsi
   153 00002258 E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   154 0000225D 5E                  <1>     pop rsi
   155 0000225E 5B                  <1>     pop rbx
   156                              <1>     return
    18                              <2> %%_ret:
    19 0000225F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   157                              <1> 
   158                              <1> directConIO:    ;ah = 06h
   159 00002260 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   160 00002262 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   161 00002264 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   162                              <1> ;Here is the read char direct function
   163 0000226A 31DB                <1>     xor ebx, ebx    
   164 0000226C E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   165                              <1>     retc    ;Return error if ebx closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002271 72EC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   166 00002273 488B2D(DCC30300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   167 0000227A B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   168 0000227C E870FDFFFF          <1>     call mainCharIO
   169 00002281 E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   170 00002286 7507                <1>     jnz .readChar
   171 00002288 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   172 0000228C 30C0                <1>     xor al, al  ;Set caller return code to 0
   173                              <1>     return
    18                              <2> %%_ret:
    19 0000228E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   174                              <1> .readChar:
   175 0000228F 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   176                              <1>     ;Fallthrough here to get the char at STDIN
   177                              <1> charIn:         ;ah = 07h
   178                              <1> ;Return char in al from STDIN without waiting
   179 00002293 31DB                <1>     xor ebx, ebx
   180 00002295 E831020000          <1>     call getCharDevSFT
   181                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000229A 72F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   182 0000229C B401                <1>     mov ah, 01  ;ND read for char
   183 0000229E E84EFDFFFF          <1>     call mainCharIO
   184 000022A3 750B                <1>     jnz .getChar
   185 000022A5 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   186 000022A7 CD4A                <1>     int 4Ah
   187 000022A9 E833010000          <1>     call callInt48h
   188 000022AE EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   189                              <1> .getChar:
   190                              <1>     ;Get the char in al and exit
   191 000022B0 30E4                <1>     xor ah, ah
   192 000022B2 E83AFDFFFF          <1>     call mainCharIO
   193                              <1>     return
    18                              <2> %%_ret:
    19 000022B7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   194                              <1> charIn_B:       ;ah = 08h
   195                              <1> ;Return char in al from STDIN
   196 000022B8 56                  <1>     push rsi
   197                              <1> .readAgain:
   198 000022B9 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   199                              <1>     ;Also sets rsi to point to the device SFT for 
   200 000022BE 7543                <1>     jnz .pullChar
   201 000022C0 803D(E9D80300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   202 000022C7 7507                <1>     jne .skiplookahead
   203 000022C9 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   204 000022CB E821FDFFFF          <1>     call mainCharIO
   205                              <1> .skiplookahead:
   206 000022D0 B484                <1>     mov ah, 84h
   207 000022D2 CD4A                <1>     int 4ah ;Multitasking keyboard loop
   208 000022D4 66813D(B0D90300)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   208 000022DC FF                  <1>
   209 000022DD 751B                <1>     jne .skipClockRead
   210 000022DF E818320000          <1>     call dosPushRegs
   211 000022E4 F8                  <1>     clc ;Clear CF, write primary header to backup
   212 000022E5 E882000000          <1>     call swapPrimaryHeader
   213 000022EA E8CF060000          <1>     call readDateTimeRecord
   214 000022EF F9                  <1>     stc ;Set CF, write backup to primary header
   215 000022F0 E877000000          <1>     call swapPrimaryHeader
   216 000022F5 E8EB310000          <1>     call dosPopRegs
   217                              <1> .skipClockRead:
   218 000022FA 66FF05(B0D90300)    <1>     inc word [keybTicks]
   219 00002301 EBB6                <1>     jmp short .readAgain
   220                              <1> .pullChar:
   221 00002303 30E4                <1>     xor ah, ah
   222 00002305 E8E7FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   223 0000230A 5E                  <1>     pop rsi
   224 0000230B 3C00                <1>     cmp al, NUL ;Is this the null char?
   225 0000230D 7507                <1>     jne .exit
   226                              <1>     ;We are mid extended ascii, prevent printer toggling
   227 0000230F C605(AFD90300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   228                              <1> .exit:
   229                              <1>     return
    18                              <2> %%_ret:
    19 00002316 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   230                              <1> 
   231                              <1> printString_B:      ;ah = 09h
   232 00002317 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   233                              <1> .ps0:
   234 0000231A AC                  <1>     lodsb   ;Get char in al and inc rsi
   235 0000231B 3C24                <1>     cmp al, "$" ;End of string char?
   236                              <1>     rete    ;Return if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000231D 74F7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   237 0000231F E838FEFFFF          <1>     call charOut_B.in
   238 00002324 EBF4                <1>     jmp short .ps0
   239                              <1> 
   240                              <1> checkStdinStatus:  ;ah = 0Bh
   241                              <1> ;Returns the status of the driver controlling vCon
   242 00002326 E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   243 0000232B B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   244                              <1>     retz    ;If BSY set (no chars available), return with al=00
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000232D 74E7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   245 0000232F FEC8                <1>     dec al  ;Set al to -1 if char available
   246                              <1>     return  ;Exit
    18                              <2> %%_ret:
    19 00002331 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   247                              <1> clearbuffDoFunc:   ;ah = 0Ch
   248                              <1> ;Clears any buffers and issues a console read command (the command in al)
   249                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   250 00002332 50                  <1>     push rax
   251 00002333 52                  <1>     push rdx
   252 00002334 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   253 00002336 E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   254 0000233B 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   255 0000233D B404                <1>     mov ah, 04h ;Flush input buffers
   256 0000233F E8ADFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   257                              <1> .skipFlush:
   258 00002344 5A                  <1>     pop rdx
   259 00002345 58                  <1>     pop rax
   260 00002346 88C4                <1>     mov ah, al  ;Move function number into ah
   261 00002348 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   262 0000234A 7507                <1>     jne .others
   263 0000234C 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   264 0000234F 7412                <1>     jz .bad ;Yes, exit
   265 00002351 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   266                              <1> .others:
   267 00002353 3C01                <1>     cmp al, 01h
   268 00002355 740F                <1>     je .callFunction
   269 00002357 3C07                <1>     cmp al, 07h
   270 00002359 740B                <1>     je .callFunction
   271 0000235B 3C08                <1>     cmp al, 08h
   272 0000235D 7407                <1>     je .callFunction
   273 0000235F 3C0A                <1>     cmp al, 0Ah
   274 00002361 7403                <1>     je .callFunction
   275                              <1> .bad:
   276 00002363 30C0                <1>     xor al, al
   277                              <1>     return
    18                              <2> %%_ret:
    19 00002365 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   278                              <1> .callFunction:
   279 00002366 FA                  <1>     cli ;Prepare to swap stack pointer
   280                              <1>     ;The below address avoids "properly" reentering DOS
   281                              <1>     ;We simply reuse the function dispatch aspect. 
   282                              <1>     ;this means we dont trash the caller's register frame 
   283 00002367 E9A8300000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   284                              <1> ;------------------------
   285                              <1> ;  Primitive functions  :
   286                              <1> ;------------------------
   287                              <1> swapPrimaryHeader:
   288                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   289                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   290 0000236C 56                  <1>     push rsi
   291 0000236D 57                  <1>     push rdi
   292 0000236E 51                  <1>     push rcx
   293 0000236F 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   293 00002378 00                  <1>
   294 00002379 488D35(22C40300)    <1>     lea rsi, primReqHdr
   295 00002380 488D3D(82D90300)    <1>     lea rdi, bkupReqHdr
   296 00002387 7303                <1>     jnc .read
   297 00002389 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   298                              <1> .read:
   299 0000238C F3A4                <1>     rep movsb   ;Swap
   300 0000238E 59                  <1>     pop rcx
   301 0000238F 5F                  <1>     pop rdi
   302 00002390 5E                  <1>     pop rsi
   303                              <1>     return
    18                              <2> %%_ret:
    19 00002391 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   304                              <1> outputOnStdout:
   305                              <1> ;Input: al = Char to output
   306                              <1> ;Output: CF=CY, all good
   307 00002392 53                  <1>     push rbx
   308 00002393 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   309 00002398 E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   310 0000239D 7217                <1>     jc .exit
   311 0000239F 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   312 000023A5 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   313 000023A7 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   314 000023AB 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   315 000023B1 7405                <1>     jz .notCharDevOrFast
   316 000023B3 CD49                <1>     int 49h ;Fast output
   317                              <1> .exitOk:
   318 000023B5 F8                  <1>     clc
   319                              <1> .exit:
   320 000023B6 5B                  <1>     pop rbx
   321                              <1>     return
    18                              <2> %%_ret:
    19 000023B7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   322                              <1> .notCharDevOrFast:
   323 000023B8 E809000000          <1>     call outputOnSFT
   324 000023BD 5B                  <1>     pop rbx
   325                              <1>     return
    18                              <2> %%_ret:
    19 000023BE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   326                              <1> 
   327                              <1> outputToHandle:
   328                              <1> ;Char to output must be in al
   329 000023BF E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   330                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000023C4 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   331                              <1> outputOnSFT:
   332                              <1> ;Output char in al to SFT in rsi
   333                              <1> ;Waits until device is not busy to send char.
   334                              <1> ;Calls int 48h if device busy
   335 000023C6 50                  <1>     push rax
   336 000023C7 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   337 000023C9 E823FCFFFF          <1>     call mainCharIO
   338 000023CE 58                  <1>     pop rax
   339 000023CF 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   340 000023D1 B402                <1>     mov ah, 02h ;Output char in al
   341 000023D3 E819FCFFFF          <1>     call mainCharIO
   342 000023D8 F8                  <1>     clc
   343                              <1>     return
    18                              <2> %%_ret:
    19 000023D9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   344                              <1> .signalLoop:
   345 000023DA E802000000          <1>     call callInt48h
   346 000023DF EBE5                <1>     jmp short outputOnSFT
   347                              <1> 
   348                              <1> callInt48h:
   349                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   350 000023E1 9C                  <1>     pushfq
   351 000023E2 F605(F6C30300)FF    <1>     test byte [int48Flag], -1
   352 000023E9 7417                <1>     jz .exit    ;If zero, not safe
   353 000023EB F605(69C30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   354 000023F2 750E                <1>     jnz .exit
   355                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   356 000023F4 FF35(F6C30300)      <1>     push qword [int48Flag] 
   357 000023FA CD48                <1>     int 48h
   358 000023FC 8F05(F6C30300)      <1>     pop qword [int48Flag]    ;Return original value
   359                              <1> .exit:
   360 00002402 9D                  <1>     popfq
   361                              <1>     return
    18                              <2> %%_ret:
    19 00002403 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   362                              <1> 
   363                              <1> 
   364                              <1> vConCtrlCheck:
   365                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   366                              <1> ; the processing. 
   367                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   368                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   369                              <1> ;
   370                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   371                              <1> ;^S will pause screen processing until another key is processed by vCon input
   372                              <1> ;^P will toggle the printer echo feature of the vConsole
   373                              <1> ;
   374                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   375                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   376                              <1> ;
   377                              <1> ;Output: 
   378                              <1> ;   CF=CY : Error
   379                              <1> ;   CF=NC : ...
   380                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   381                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   382 00002404 E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   383 00002409 53                  <1>     push rbx
   384 0000240A 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   385 0000240C E8BA000000          <1>     call getCharDevSFT
   386 00002411 5B                  <1>     pop rbx
   387                              <1>     retc    ;Return if CF=CY
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002412 72EF                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   388 00002414 B401                <1>     mov ah, 01  ;Non destructively read CON
   389 00002416 E8D6FBFFFF          <1>     call mainCharIO
   390 0000241B 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   391                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   392 0000241D 3C13                <1>     cmp al, DC3 ;^S ?
   393 0000241F 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   394 00002421 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   395 00002423 E8C9FBFFFF          <1>     call mainCharIO
   396 00002428 E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   397                              <1> .checkPrintOrExit:
   398 0000242D 3C10                <1>     cmp al, DLE ;Do we have ^P?
   399 0000242F 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   400 00002431 3C03                <1>     cmp al, ETX ;Do we have ^C?
   401 00002433 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   402                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   403                              <1>     return 
    18                              <2> %%_ret:
    19 00002435 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   404                              <1> .printToggle:
   405 00002436 F615(31C30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   406 0000243C 53                  <1>     push rbx
   407 0000243D BB04000000          <1>     mov ebx, 4  ;PRN handle
   408 00002442 E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   409 00002447 5B                  <1>     pop rbx
   410                              <1>     retc    ;If CF=CY, exit
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002448 72EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   411 0000244A 57                  <1>     push rdi
   412 0000244B 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   413 0000244E 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   414 00002454 741D                <1>     jz .notNet
   415 00002456 50                  <1>     push rax
   416 00002457 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   417 0000245C CD4F                <1>     int 4Fh
   418 0000245E 58                  <1>     pop rax
   419 0000245F 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   420                              <1>     ;If something went wrong, turn off echo
   421 00002461 C605(31C30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   422 00002468 50                  <1>     push rax
   423 00002469 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   424 0000246E CD4F                <1>     int 4Fh
   425 00002470 58                  <1>     pop rax
   426 00002471 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   427                              <1> .notNet:
   428                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   429                              <1> ; 0Dh or 0Eh
   430 00002473 803D(31C30300)00    <1>     cmp byte [printEcho], 00
   431 0000247A 7507                <1>     jnz .echoOn
   432 0000247C E84EFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   433 00002481 EB05                <1>     jmp short .printExit
   434                              <1> .echoOn:
   435 00002483 E83EFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   436                              <1> .printExit:
   437 00002488 5F                  <1>     pop rdi
   438                              <1>     return
    18                              <2> %%_ret:
    19 00002489 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   439                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   440 0000248A E852FFFFFF          <1>     call callInt48h
   441                              <1> .waitNextChar:   ;Here get next char
   442 0000248F B401                <1>     mov ah, 01h ;ND read
   443 00002491 E85BFBFFFF          <1>     call mainCharIO
   444 00002496 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   445                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   446 00002498 53                  <1>     push rbx
   447 00002499 31DB                <1>     xor ebx, ebx
   448 0000249B E82B000000          <1>     call getCharDevSFT
   449 000024A0 5B                  <1>     pop rbx
   450                              <1>     retc    ;Return if STDIN closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000024A1 72E6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   451 000024A3 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   452 000024A5 E847FBFFFF          <1>     call mainCharIO
   453 000024AA 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   454 000024AC 7514                <1>     jnz .checkBreak2
   455 000024AE 803D(AFD90300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   456 000024B5 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   457 000024BB C605(AFD90300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   458                              <1> .checkBreak2:
   459 000024C2 3C03                <1>     cmp al, ETX
   460                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000024C4 75C3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   461 000024C6 E991270000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   462                              <1> 
   463                              <1> 
   464                              <1> getCharDevSFT:
   465                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   466                              <1> ;Input: bx = zero extended handle number
   467                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   468                              <1> ;        CF=CY => al = Error code, abort operation
   469 000024CB F605(F5C30300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   470 000024D2 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   471                              <1> .getSFT:
   472 000024D4 57                  <1>     push rdi
   473 000024D5 E810180000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   474 000024DA 4889FE              <1>     mov rsi, rdi
   475 000024DD 5F                  <1>     pop rdi
   476                              <1>     return  ;Return with CF set
    18                              <2> %%_ret:
    19 000024DE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   477                              <1> .swap:
   478                              <1> ;workingSFT is only set for CON calls
   479 000024DF 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   480 000024E5 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   481 000024E7 488B35(74C60300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   482 000024EE F8                  <1>     clc
   483                              <1>     return
    18                              <2> %%_ret:
    19 000024EF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   484                              <1> 
   485                              <1> ;------------------------
   486                              <1> ;   Utility functions   :
   487                              <1> ;------------------------
   488                              <1> printCaretASCII:
   489                              <1> ;Input: al = Char to print with a caret
   490                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   491                              <1> ;First check if the char should be careted, and then print normally if so
   492 000024F0 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   493 000024F2 0F8364FCFFFF        <1>     jae charOut_B.in
   494 000024F8 3C09                <1>     cmp al, TAB
   495 000024FA 0F845CFCFFFF        <1>     je charOut_B.in
   496 00002500 3C15                <1>     cmp al, NAK
   497 00002502 0F8454FCFFFF        <1>     je charOut_B.in
   498 00002508 3C14                <1>     cmp al, DC4
   499 0000250A 0F844CFCFFFF        <1>     je charOut_B.in
   500 00002510 50                  <1>     push rax
   501 00002511 B05E                <1>     mov al, "^" ;Get caret in place
   502 00002513 E844FCFFFF          <1>     call charOut_B.in
   503 00002518 58                  <1>     pop rax
   504 00002519 0440                <1>     add al, "@" ;Turn into an ASCII Char
   505 0000251B E93CFCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   506                              <1> printCRLF:
   507 00002520 B00D                <1>     mov al, CR
   508 00002522 E835FCFFFF          <1>     call charOut_B.in
   509 00002527 B00A                <1>     mov al, LF
   510 00002529 E92EFCFFFF          <1>     jmp charOut_B.in
   511                              <1> 
   512                              <1> checkBreak:
   513                              <1> ;Reads bytes from CON if there are any bytes to read and 
   514                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   515 0000252E 803D(6AC30300)01    <1>     cmp byte [inDOS], 1
   516                              <1>     retne    ;Return if not inDOS only once
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002535 75B8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   517                              <1> ;Returns in al the keystroke that is available IF one is available
   518                              <1> ; or al=0 if no keystroke available
   519 00002537 53                  <1>     push rbx
   520 00002538 56                  <1>     push rsi
   521 00002539 488B35(4BC00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   522                              <1>     ;Place command code and a zero status word at the same time
   523 00002540 C705(4EC40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   523 00002548 0000                <1>
   524                              <1>     ;Place the packet size in the hdrlen field
   525 0000254A C605(4CC40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   526 00002551 488D1D(4CC40300)    <1>     lea rbx, critReqHdr
   527 00002558 E86C270000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   528                              <1>     ;Check if the busy bit is set (No keystroke available)
   529 0000255D 66F705(4FC40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   529 00002565 02                  <1>
   530 00002566 7405                <1>     jz .charFound
   531                              <1> .exit:
   532 00002568 30C0                <1>     xor al, al
   533 0000256A 5E                  <1>     pop rsi
   534 0000256B 5B                  <1>     pop rbx
   535                              <1>     return
    18                              <2> %%_ret:
    19 0000256C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   536                              <1> .charFound:
   537                              <1> ;Keystroke available, proceed
   538 0000256D 8A05(59C40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   539 00002573 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   540 00002575 75F1                <1>     jne .exit   ;If not equal exit
   541                              <1> ;Now we pull the char out of the buffer
   542 00002577 C705(4EC40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   542 0000257F 0000                <1>
   543 00002581 C605(4CC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   544                              <1>     ;Place pointers and number of chars
   545 00002588 C705(62C40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   545 00002590 0000                <1>
   546                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   547 00002592 488D05(59C40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   548 00002599 488905(5AC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   549 000025A0 E824270000          <1>     call goDriver   ;RSI and RBX as before
   550 000025A5 E9B2260000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   551                              <1> 
   552                              <1> vConSwapDriver:
   553                              <1> ;Sets up the vCon to use the alternative SFT pointer
   554 000025AA 57                  <1>     push rdi
   555 000025AB C605(F5C30300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   556 000025B2 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   557 000025B9 48893D(74C60300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   558 000025C0 5F                  <1>     pop rdi
   559                              <1>     return
    18                              <2> %%_ret:
    19 000025C1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> vConRetDriver:
   562                              <1> ;Returns the original driver (sets flag down)
   563 000025C2 C605(F5C30300)00    <1>     mov byte [vConDrvSwp], 0
   564                              <1>     return
    18                              <2> %%_ret:
    19 000025C9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   565                              <1> 
   566                              <1> ;--------------------------------------------------
   567                              <1> ;      Main Keyboard Buffered Input Function      :
   568                              <1> ;--------------------------------------------------
   569                              <1> buffCharInput_BE:  ;ah = 0Ah
   570                              <1> ;Buffer pointer in rdx
   571                              <1> ; byte [rdx + 0], buffer length
   572                              <1> ; byte [rdx + 1], number of chars in buffer
   573                              <1> ; byte [rdx + 2], buffer start
   574                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   575                              <1> ;Register use
   576                              <1> ; dh = Char offset in internal buffer
   577                              <1> ; dl = Buffer length
   578                              <1> ; bh = Char offset in user buffer
   579                              <1> ; bl = Number of chars already in the buffer
   580                              <1> ; rdi = Internal buffer
   581                              <1> ; rsi = User buffer
   582 000025CA 4889D6              <1>     mov rsi, rdx
   583 000025CD 66AD                <1>     lodsw   ;Get buffer metadata in ax
   584 000025CF 84C0                <1>     test al, al
   585                              <1>     retz    ;If buffer length zero, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000025D1 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   586 000025D3 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   587 000025D6 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   588 000025D8 7606                <1>     jbe .avoidcheck
   589 000025DA 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   590 000025DE 7402                <1>     je .functionKeyOk
   591                              <1> .avoidcheck:
   592 000025E0 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   593                              <1> .functionKeyOk:
   594 000025E2 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   595 000025E5 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   596                              <1> .breakEP:
   597 000025E7 8A05(2EC20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   598 000025ED 8805(2FC20300)      <1>     mov byte [vConCurCnt], al
   599 000025F3 56                  <1>     push rsi    ;Push user buffer address
   600 000025F4 488D3D(30C20300)    <1>     lea rdi, vConBuffer
   601 000025FB C605(5DC60300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   602                              <1> .mainLoop:
   603 00002602 E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   604 00002607 3C0A                <1>     cmp al, LF
   605 00002609 7505                <1>     jne .checkControlChars
   606                              <1> .mainLoop2:
   607 0000260B E8A8FCFFFF          <1>     call charIn_B
   608                              <1> .checkControlChars:
   609 00002610 3C06                <1>     cmp al, ACK
   610 00002612 74F7                <1>     je .mainLoop2   ;Get another char
   611 00002614 3A0547DAFFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   612 0000261A 0F8426010000        <1>     je .escape
   613 00002620 3C7F                <1>     cmp al, DEL
   614 00002622 0F8489000000        <1>     je .delete
   615 00002628 3C08                <1>     cmp al, BSP
   616 0000262A 0F8481000000        <1>     je .delete
   617 00002630 3C17                <1>     cmp al, ETB
   618                              <1>     ;Add space for patched jump instructions
   619 00002632 9090909090          <1>     db 5 dup (90h)  ;NOP
   620 00002637 3C15                <1>     cmp al, NAK
   621 00002639 9090909090          <1>     db 5 dup (90h)
   622 0000263E 3C0D                <1>     cmp al, CR
   623 00002640 744C                <1>     je .carriageReturn
   624 00002642 3C0A                <1>     cmp al, LF
   625 00002644 7461                <1>     je .lineFeed
   626 00002646 3A0516DAFFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   627 0000264C 7429                <1>     je .break
   628                              <1> .checkIfCanInsert:
   629 0000264E 38D6                <1>     cmp dh, dl
   630 00002650 731C                <1>     jae .bufOflw
   631 00002652 AA                  <1>     stosb   ;Store the byte and increment rdi!
   632 00002653 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   633 00002655 E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   634 0000265A 803D(5DC60300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   635 00002661 75A8                <1>     jne .mainLoop2
   636                              <1>     ;IF not in insert mode, we fall here
   637                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   638                              <1>     ; or insert chars if needed.
   639 00002663 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   640 00002665 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   641 00002667 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   642 0000266A FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   643 0000266C EB9D                <1>     jmp short .mainLoop2
   644                              <1> .bufOflw:
   645                              <1> ;Buffer overflow
   646 0000266E B007                <1>     mov al, BEL ;Sound the bell
   647 00002670 E8E7FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   648 00002675 EB94                <1>     jmp short .mainLoop2
   649                              <1> .break:
   650                              <1> ;Break, Place a "\", and do a CRLF
   651 00002677 B05C                <1>     mov al, "\"
   652 00002679 E8DEFAFFFF          <1>     call charOut_B.in
   653 0000267E 5E                  <1>     pop rsi ;Realign stack
   654                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   655 0000267F E89CFEFFFF          <1>     call printCRLF
   656                              <1>     ;Align to next tabstop
   657 00002684 E85AFBFFFF          <1>     call charOut_B.tab
   658 00002689 E959FFFFFF          <1>     jmp .breakEP
   659                              <1> .carriageReturn:
   660 0000268E AA                  <1>     stosb
   661 0000268F E8C8FAFFFF          <1>     call charOut_B.in
   662 00002694 5F                  <1>     pop rdi ;User buffer address was pushed 
   663 00002695 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   664 00002698 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   665                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   666 0000269A 488D35(30C20300)    <1>     lea rsi, vConBuffer
   667 000026A1 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   668 000026A4 F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   669                              <1>     return
    18                              <2> %%_ret:
    19 000026A6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   670                              <1> .lineFeed:
   671 000026A7 E874FEFFFF          <1>     call printCRLF
   672 000026AC E95AFFFFFF          <1>     jmp .mainLoop2
   673                              <1> .delete:
   674 000026B1 E805000000          <1>     call .removeChar
   675 000026B6 E950FFFFFF          <1>     jmp .mainLoop2
   676                              <1> .removeChar:
   677 000026BB 84F6                <1>     test dh, dh ;Is char count 0?
   678 000026BD 741C                <1>     jz .normalChar   ;If so, skip going back!
   679 000026BF E868000000          <1>     call .vConErase
   680 000026C4 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   681 000026C6 3C20                <1>     cmp al, SPC
   682 000026C8 7311                <1>     jae .normalChar
   683 000026CA 3C09                <1>     cmp al, TAB
   684 000026CC 7420                <1>     je .eraTab
   685 000026CE 3C15                <1>     cmp al, NAK
   686 000026D0 7409                <1>     je .normalChar
   687 000026D2 3C14                <1>     cmp al, DC4
   688 000026D4 7405                <1>     je .normalChar
   689 000026D6 E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   690                              <1> .normalChar:
   691 000026DB 803D(5DC60300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   692                              <1>     retne ;Yes, return
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000026E2 75C2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   693 000026E4 84FF                <1>     test bh, bh ;Beginning of user buffer?
   694                              <1>     retz    ;Yes, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000026E6 74BE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   695 000026E8 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   696 000026EB FECF                <1>     dec bh
   697                              <1>     return
    18                              <2> %%_ret:
    19 000026ED C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   698                              <1> .eraTab:
   699                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   700                              <1> ; up to a tab stop worth of space chars printed
   701 000026EE 57                  <1>     push rdi
   702 000026EF 48FFCF              <1>     dec rdi
   703 000026F2 FD                  <1>     std ;Go backwards
   704 000026F3 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   705 000026F6 B020                <1>     mov al, SPC
   706 000026F8 53                  <1>     push rbx
   707 000026F9 BB07000000          <1>     mov ebx, 7
   708 000026FE 67E30D              <1>     jecxz .onTabstop
   709                              <1> .scanString:
   710 00002701 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   711 00002702 7608                <1>     jbe .notChar    ;No, skip handling
   712 00002704 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   713 00002708 740A                <1>     je .tabChar
   714 0000270A FECB                <1>     dec bl
   715                              <1> .notChar:
   716 0000270C E2F3                <1>     loop .scanString
   717                              <1> .onTabstop:
   718 0000270E 2A1D(2FC20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   719                              <1> .tabChar:
   720 00002714 28F3                <1>     sub bl, dh  ;Same on tabstop
   721 00002716 00D9                <1>     add cl, bl
   722 00002718 80E107              <1>     and cl, 7
   723 0000271B 5B                  <1>     pop rbx
   724 0000271C 5F                  <1>     pop rdi
   725 0000271D FC                  <1>     cld
   726 0000271E 74BB                <1>     jz .normalChar
   727                              <1>     ;Now erase all the spaces placed on the vCon
   728                              <1> .vConDelTab:
   729 00002720 E80C000000          <1>     call .vConEraseNoDec
   730 00002725 E2F9                <1>     loop .vConDelTab
   731 00002727 E9AFFFFFFF          <1>     jmp .normalChar
   732                              <1> .vConErase:
   733                              <1> ;Erase the char on the vCon
   734                              <1> ;Return through the output function
   735 0000272C 48FFCF              <1>     dec rdi ;Go back a space in the 
   736 0000272F FECE                <1>     dec dh  ;Decrement char count in the buffer
   737                              <1> .vConEraseNoDec:
   738 00002731 B008                <1>     mov al, BSP ;Move cursor back
   739 00002733 E824FAFFFF          <1>     call charOut_B.in
   740 00002738 B020                <1>     mov al, SPC ;Replace with a space
   741 0000273A E81DFAFFFF          <1>     call charOut_B.in
   742 0000273F B008                <1>     mov al, BSP ;Move cursor back again
   743 00002741 E916FAFFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   744                              <1> .escape:
   745                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   746                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   747                              <1> ; including the function keys.
   748 00002746 FF250DD9FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   749                              <1> .f2:
   750 0000274C E846000000          <1>     call .fCommon2
   751 00002751 EB0C                <1>     jmp short .fCommon
   752                              <1> .f3:
   753 00002753 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   754 00002756 28F9                <1>     sub cl, bh  ;Sub our current position
   755 00002758 EB05                <1>     jmp short .fCommon
   756                              <1> .f1:
   757 0000275A B901000000          <1>     mov ecx, 1  ;Get one char
   758                              <1> .fCommon:
   759 0000275F C605(5DC60300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   760 00002766 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   761 00002768 0F849DFEFFFF        <1>     je .mainLoop2
   762 0000276E 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   763 00002770 0F8495FEFFFF        <1>     je .mainLoop2
   764                              <1>     ;Else, copy byte by byte, and retain char in al
   765 00002776 AC                  <1>     lodsb
   766 00002777 AA                  <1>     stosb
   767 00002778 E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   768 0000277D FEC7                <1>     inc bh
   769 0000277F FEC6                <1>     inc dh
   770 00002781 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   771 00002783 E983FEFFFF          <1>     jmp .mainLoop2
   772                              <1> .f4:
   773 00002788 E80A000000          <1>     call .fCommon2
   774 0000278D 4801CE              <1>     add rsi, rcx
   775 00002790 00CF                <1>     add bh, cl
   776 00002792 E974FEFFFF          <1>     jmp .mainLoop2
   777                              <1> .fCommon2:
   778 00002797 E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   779 0000279C 3A05BFD8FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   780 000027A2 750B                <1>     jne .fnotEscape
   781                              <1>     ;Get another char if they typed escape and force it in the buffer
   782                              <1>     ; Do not return to caller
   783 000027A4 E80FFBFFFF          <1>     call charIn_B
   784                              <1> .fforceExit:
   785 000027A9 59                  <1>     pop rcx ;Get original return address from stack
   786 000027AA E95CFEFFFF          <1>     jmp .mainLoop2
   787                              <1> .fnotEscape:
   788 000027AF 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   789 000027B2 28F9                <1>     sub cl, bh
   790 000027B4 74F3                <1>     jz .fforceExit
   791 000027B6 FFC9                <1>     dec ecx
   792 000027B8 74EF                <1>     jz .fforceExit
   793 000027BA 57                  <1>     push rdi
   794 000027BB 4889F7              <1>     mov rdi, rsi
   795 000027BE 48FFC7              <1>     inc rdi
   796 000027C1 F2AE                <1>     repne scasb ;Search for the char to start printing from
   797 000027C3 5F                  <1>     pop rdi
   798 000027C4 75E3                <1>     jne .fforceExit ;If char not found, return
   799 000027C6 F6D1                <1>     not cl
   800 000027C8 00D9                <1>     add cl, bl
   801 000027CA 28F9                <1>     sub cl, bh
   802                              <1>     return
    18                              <2> %%_ret:
    19 000027CC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   803                              <1> .f5:
   804 000027CD B040                <1>     mov al, "@"
   805 000027CF E888F9FFFF          <1>     call charOut_B.in   ;Print the char
   806 000027D4 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   807 000027D5 57                  <1>     push rdi
   808 000027D6 E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   809 000027DB 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   810 000027DC 88F3                <1>     mov bl, dh
   811 000027DE E99CFEFFFF          <1>     jmp .breakAlt
   812                              <1> .f6:
   813                              <1> ;If the user wants to insert a EOF, they can use F6
   814 000027E3 B01A                <1>     mov al, EOF
   815 000027E5 E964FEFFFF          <1>     jmp .checkIfCanInsert
   816                              <1> .f7:
   817                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   818 000027EA 8A0571D8FFFF        <1>     mov al, byte [extESC]
   819 000027F0 E959FEFFFF          <1>     jmp .checkIfCanInsert
   820                              <1> .toggleIns:
   821 000027F5 F615(5DC60300)      <1>     not byte [vConInsert]   ;Toggle
   822                              <1>     return
    18                              <2> %%_ret:
    19 000027FB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   823                              <1> .eDel:
   824 000027FC 38DF                <1>     cmp bh, bl
   825 000027FE 0F8407FEFFFF        <1>     je .mainLoop2
   826 00002804 FEC7                <1>     inc bh
   827 00002806 48FFC6              <1>     inc rsi
   828 00002809 E9FDFDFFFF          <1>     jmp .mainLoop2
   829                              <1> 
   830                              <1> editKeys:
   831                              <1> ;Our Default Extended keys handler
   832 0000280E E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   833 00002813 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   834 00002818 57                  <1>     push rdi    ;Preserve rdi
   835 00002819 488D3D43D8FFFF      <1>     lea rdi, extKeyTbl
   836 00002820 57                  <1>     push rdi
   837                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   838                              <1>     ; offset of function from extKeyTbl
   839                              <1> .lp:
   840 00002821 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   841 00002822 7411                <1>     je .charFound
   842 00002824 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   843 00002826 0F84DFFDFFFF        <1>     jz buffCharInput_BE.mainLoop2
   844 0000282C 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   845 00002833 EBEC                <1>     jmp short .lp
   846                              <1> .charFound:
   847 00002835 59                  <1>     pop rcx ;Pop back the effective address of the table
   848 00002836 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   849 0000283A 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   850 0000283D 5F                  <1>     pop rdi
   851 0000283E FFE1                <1>     jmp rcx
    28                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
    29                              <1> ;Major kernel date time functions and subroutines
    30                              <1> 
    31                              <1> getDate:           ;ah = 2Ah
    32 00002840 E879010000          <1>     call readDateTimeRecord ;Update date if necessary
    33 00002845 E8A0280000          <1>     call getUserRegs
    34 0000284A 668B15(EFC30300)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
    35                              <1> ;    mov dh, byte [monthOfYear]
    36 00002851 0FB60D(F1C30300)    <1>     movzx ecx, byte [years]
    37 00002858 8A05(F4C30300)      <1>     mov al, byte [dayOfWeek]
    38 0000285E 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    39 00002862 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    40                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 00002866 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    41                              <1> setDate:           ;ah = 2Bh
    42                              <1> ;	CX = year (1980-2099)
    43                              <1> ;   DH = month (1-12)
    44                              <1> ;	DL = day (1-31)
    45 00002867 E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    46                              <1>     return
    18                              <2> %%_ret:
    19 0000286C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    47                              <1> getTime:           ;ah = 2Ch
    48 0000286D E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    49 00002872 E873280000          <1>     call getUserRegs
    50 00002877 668B0D(7AC40300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.hours]
    51 0000287E 668B15(7BC40300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    52 00002885 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    53 00002889 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    54                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 0000288D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    55                              <1> setTime:           ;ah = 2Dh
    56                              <1> ;   CH = hour (0-23)
    57                              <1> ;	CL = minutes (0-59)
    58                              <1> ;	DH = seconds (0-59)
    59                              <1> ;	DL = hundredths (0-99)
    60 0000288E 80FD17              <1>     cmp ch, 23
    61 00002891 7749                <1>     ja .exitBad
    62 00002893 80F93B              <1>     cmp cl, 59
    63 00002896 7744                <1>     ja .exitBad
    64 00002898 80FE3B              <1>     cmp dh, 59
    65 0000289B 773F                <1>     ja .exitBad
    66 0000289D 80FA63              <1>     cmp dl, 99
    67 000028A0 773A                <1>     ja .exitBad
    68                              <1> ;Now we read date (updating internal count if necessary)
    69 000028A2 E817010000          <1>     call readDateTimeRecord
    70 000028A7 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    71 000028AE 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    72 000028B5 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    73 000028B8 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    74 000028BC 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    75 000028C0 B906000000          <1>     mov ecx, 6
    76 000028C5 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    77 000028C8 E895260000          <1>     call primReqWriteSetup   ;rbx now points to request header
    78 000028CD 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    79 000028D4 E8F0230000          <1>     call goDriver
    80 000028D9 30C0                <1>     xor al, al
    81                              <1>     return
    18                              <2> %%_ret:
    19 000028DB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    82                              <1> .exitBad:
    83 000028DC B0FF                <1>     mov al, -1
    84                              <1>     return
    18                              <2> %%_ret:
    19 000028DE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    85                              <1> ;------------------------
    86                              <1> ;   Utility functions   :
    87                              <1> ;------------------------
    88                              <1> writeDate:
    89 000028DF 6681F97800          <1>     cmp cx, 120
    90 000028E4 0F83D1000000        <1>     jae .exitBad
    91 000028EA 80FE0C              <1>     cmp dh, 12
    92 000028ED 0F87C8000000        <1>     ja .exitBad
    93 000028F3 80FA1F              <1>     cmp dl, 31
    94 000028F6 0F87BF000000        <1>     ja .exitBad
    95 000028FC 668915(EFC30300)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    96                              <1>     ;mov byte [monthOfYear], dh
    97 00002903 880D(F1C30300)      <1>     mov byte [years], cl    ;Save the years count
    98 00002909 E878010000          <1>     call setDaysInFeb   ;Set days in february this year
    99 0000290E 88CD                <1>     mov ch, cl ;Get years count in ch
   100 00002910 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
   101 00002913 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
   102 00002916 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
   103 00002919 BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
   104 0000291E F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
   105                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
   106 00002920 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
   107 00002923 67E316              <1>     jecxz .addDay    ;Skip adding years
   108 00002926 056E010000          <1>     add eax, 366    ;First add for a leap year
   109                              <1> .addYears:
   110 0000292B FFC9                <1>     dec ecx
   111 0000292D 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
   112 00002930 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   113 00002935 EBF4                <1>     jmp short .addYears
   114                              <1> .addLeap:
   115 00002937 056E010000          <1>     add eax, 366    ;Add the days in the leap year
   116                              <1> .addDay:
   117 0000293C 89C2                <1>     mov edx, eax    ;Save this number in edx
   118                              <1>     ;Now to add day offset
   119 0000293E 0FB60D(F0C30300)    <1>     movzx ecx, byte [monthOfYear]
   120 00002945 488D3538D7FFFF      <1>     lea rsi, monthsTbl
   121                              <1> .addDaysInMonth:
   122 0000294C FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   123 0000294E 67E308              <1>     jecxz .addMonthOffset
   124 00002951 AC                  <1>     lodsb   ;Get the number of days in the month in al
   125 00002952 0FB6C0              <1>     movzx eax, al
   126 00002955 01C2                <1>     add edx, eax
   127 00002957 EBF3                <1>     jmp short .addDaysInMonth
   128                              <1> .addMonthOffset:
   129 00002959 0FB60D(EFC30300)    <1>     movzx ecx, byte [dayOfMonth]
   130 00002960 FFC9                <1>     dec ecx
   131 00002962 01CA                <1>     add edx, ecx    ;Add month offset
   132                              <1>     ;edx has the number of days since 01/01/1980
   133 00002964 668915(F2C30300)    <1>     mov word [daysOffset], dx   ;Store!
   134                              <1> ;Now read and then write CLOCKrecrd
   135 0000296B 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   136 00002972 B906000000          <1>     mov ecx, 6
   137 00002977 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   138 0000297A E8EE250000          <1>     call primReqReadSetup   ;rbx now points to request header
   139 0000297F 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   140 00002986 E83E230000          <1>     call goDriver
   141                              <1> ;Now we change daycount and write it back
   142 0000298B 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   143 00002992 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   144 00002999 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   145 0000299C B906000000          <1>     mov ecx, 6
   146 000029A1 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   147 000029A4 E8B9250000          <1>     call primReqWriteSetup   ;rbx now points to request header
   148 000029A9 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   149 000029B0 E814230000          <1>     call goDriver
   150 000029B5 E8AE000000          <1>     call setDayofWeek
   151                              <1>     return
    18                              <2> %%_ret:
    19 000029BA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   152                              <1> .exitBad:
   153 000029BB B0FF                <1>     mov al, -1
   154                              <1>     return
    18                              <2> %%_ret:
    19 000029BD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   155                              <1> 
   156                              <1> readDateTimeRecord:
   157                              <1> ;Will read the clock using the primary request header
   158                              <1> ;Preserves all regs except eax and flags
   159 000029BE 53                  <1>     push rbx
   160 000029BF 51                  <1>     push rcx
   161 000029C0 52                  <1>     push rdx
   162 000029C1 56                  <1>     push rsi
   163 000029C2 55                  <1>     push rbp
   164                              <1> 
   165 000029C3 66C705(B0D90300)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   165 000029CB 00                  <1>
   166 000029CC 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   167 000029D3 B906000000          <1>     mov ecx, 6
   168 000029D8 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   169                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   170                              <1> ; rbx = Data storage buffer ptr
   171                              <1> ; ecx = Number of sectors to transfer
   172                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   173 000029DB E88D250000          <1>     call primReqReadSetup   ;rbx now points to request header
   174 000029E0 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   175 000029E7 E8DD220000          <1>     call goDriver
   176 000029EC 0FB705(77C40300)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   177                              <1> ;Here we have:  ax = Days since 1/1/1980
   178                              <1> ;Updates the internal date fields
   179                              <1> ;Internal time fields are in the clock record
   180                              <1> ;So now we check if the number of days since 1980 are the same.
   181                              <1> ;If so, we can skip updating.
   182 000029F3 663B05(F2C30300)    <1>     cmp ax, word [daysOffset]
   183 000029FA 7466                <1>     je .exit    ;Return if equal
   184 000029FC 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   185 00002A01 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   186 00002A03 668905(F2C30300)    <1>     mov word [daysOffset], ax   ;Save this new offset
   187                              <1>     ;Now want to update years, month and day fields
   188                              <1>     ;ax has the number of days since 01/01/1980
   189                              <1>     ;Get days in a 4 year period
   190 00002A0A BBB5050000          <1>     mov ebx, 365*4 + 1
   191 00002A0F 31D2                <1>     xor edx, edx
   192 00002A11 89D1                <1>     mov ecx, edx  ;Zero ecx
   193 00002A13 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   194                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   195                              <1>     ;edx has offset into current 4 year bunch
   196 00002A15 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   197 00002A1A 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   198 00002A1C 7210                <1>     jb .foundBunch
   199 00002A1E 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   200 00002A20 FFC1                <1>     inc ecx
   201 00002A22 FFCB                <1>     dec ebx ;Number of days in a normal year
   202                              <1> .findBunch:
   203 00002A24 39DA                <1>     cmp edx, ebx
   204 00002A26 7206                <1>     jb .foundBunch
   205 00002A28 29DA                <1>     sub edx, ebx
   206 00002A2A FFC1                <1>     inc ecx
   207 00002A2C EBF6                <1>     jmp short .findBunch
   208                              <1> .foundBunch:
   209                              <1>     ;If ecx = 0, february has 29 days!
   210                              <1>     ;eax has number of four year bunches elapsed since 1980
   211 00002A2E C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   212 00002A31 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   213                              <1>     ;ecx now has the number of years since 1980
   214 00002A33 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   215                              <1> ;edx has number of days into the year we are in
   216                              <1> ;eax has number of days in Feb for this year
   217 00002A38 488D3545D6FFFF      <1>     lea rsi, monthsTbl
   218 00002A3F 31C9                <1>     xor ecx, ecx    ;Use as month counter
   219                              <1> .monthSearch:
   220 00002A41 FFC1                <1>     inc ecx ;Start from 1
   221 00002A43 AC                  <1>     lodsb   ;Get value in al and inc rsi
   222 00002A44 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   223 00002A47 39C2                <1>     cmp edx, eax
   224 00002A49 7204                <1>     jb .monthFound
   225 00002A4B 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   226 00002A4D EBF2                <1>     jmp short .monthSearch
   227                              <1> .monthFound:
   228                              <1>     ;cl has the month (01h-0Ch)
   229                              <1>     ;dl has the day of the month - 1
   230 00002A4F FFC2                <1>     inc edx
   231 00002A51 880D(F0C30300)      <1>     mov byte [monthOfYear], cl
   232 00002A57 8815(EFC30300)      <1>     mov byte [dayOfMonth], dl
   233 00002A5D E806000000          <1>     call setDayofWeek
   234                              <1> .exit:
   235 00002A62 5D                  <1>     pop rbp
   236 00002A63 5E                  <1>     pop rsi
   237 00002A64 5A                  <1>     pop rdx
   238 00002A65 59                  <1>     pop rcx
   239 00002A66 5B                  <1>     pop rbx
   240                              <1>     return  ;Return with ZF is date set, or same day
    18                              <2> %%_ret:
    19 00002A67 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   241                              <1> 
   242                              <1> setDayofWeek:
   243                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   244 00002A68 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   245 00002A6F 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   246                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   247 00002A74 31D2                <1>     xor edx, edx
   248 00002A76 B907000000          <1>     mov ecx, 7   
   249 00002A7B F7F1                <1>     div ecx  ;Get remainder in dl
   250 00002A7D 8815(F4C30300)      <1>     mov byte [dayOfWeek], dl
   251                              <1> ;Set ZF to indicate all ok
   252 00002A83 31C0                <1>     xor eax, eax
   253                              <1>     return
    18                              <2> %%_ret:
    19 00002A85 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   254                              <1> 
   255                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   256                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   257                              <1> ;Input: cl = Year - 1980
   258                              <1> ;Output: al = Number of days in February
   259 00002A86 880D(F1C30300)      <1>     mov byte [years], cl    ;Save this figure
   260 00002A8C F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   261 00002A8F 51                  <1>     push rcx
   262 00002A90 57                  <1>     push rdi
   263 00002A91 B81C000000          <1>     mov eax, 28  ;Usual days in february
   264 00002A96 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   265 00002A9B 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   266 00002A9E 488D3DE0D5FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   267 00002AA5 AA                  <1>     stosb   ;Store the word in rdi
   268 00002AA6 5F                  <1>     pop rdi
   269 00002AA7 59                  <1>     pop rcx
   270                              <1>     return
    18                              <2> %%_ret:
    19 00002AA8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   271                              <1> 
   272                              <1> getDirDTwords:
   273                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   274                              <1> ; High word of eax = Date
   275                              <1> ; Low word of eax = Time
   276                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   277                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   278                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   279                              <1> 
   280                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   281                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   282                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   283                              <1> ;Preserves all registers except eax
   284 00002AA9 53                  <1>     push rbx
   285 00002AAA 0FB61D(7CC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   286 00002AB1 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   287 00002AB3 89D8                <1>     mov eax, ebx
   288 00002AB5 0FB61D(79C40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   289 00002ABC C1E305              <1>     shl ebx, 5
   290 00002ABF 09D8                <1>     or eax, ebx
   291 00002AC1 0FB61D(7AC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   292 00002AC8 C1E30B              <1>     shl ebx, 11
   293 00002ACB 09D8                <1>     or eax, ebx
   294 00002ACD 0FB61D(EFC30300)    <1>     movzx ebx, byte [dayOfMonth]
   295 00002AD4 C1E310              <1>     shl ebx, 16
   296 00002AD7 09D8                <1>     or eax, ebx
   297 00002AD9 0FB61D(F0C30300)    <1>     movzx ebx, byte [monthOfYear]
   298 00002AE0 C1E315              <1>     shl ebx, 21
   299 00002AE3 09D8                <1>     or eax, ebx
   300 00002AE5 0FB61D(F1C30300)    <1>     movzx ebx, byte [years]
   301 00002AEC C1E319              <1>     shl ebx, 25
   302 00002AEF 09D8                <1>     or eax, ebx
   303 00002AF1 5B                  <1>     pop rbx
   304                              <1>     return
    18                              <2> %%_ret:
    19 00002AF2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   305                              <1> getDateAndTimeOld:  ;INT 4Fh AX=12
   306                              <1> ;Returns edx = time
   307                              <1> ;        eax = date
   308                              <1> ; Formally ax and dx but we clear the upper words
   309 00002AF3 E8C6FEFFFF          <1>     call readDateTimeRecord
   310 00002AF8 E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   311 00002AFD 31D2                <1>     xor edx, edx
   312 00002AFF 6689C2              <1>     mov dx, ax  ;Save time
   313 00002B02 C1E810              <1>     shr eax, 10h    ;Get date into rax
   314                              <1>     return
    18                              <2> %%_ret:
    19 00002B05 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    29                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
    30                              <1> openFileFCB:       ;ah = 0Fh
    31                              <1> closeFileFCB:      ;ah = 10h
    32                              <1> findFirstFileFCB:  ;ah = 11h
    33                              <1> findNextFileFCB:   ;ah = 12h
    34                              <1> deleteFileFCB:     ;ah = 13h
    35                              <1> sequentialReadFCB: ;ah = 14h
    36                              <1> sequentialWriteFCB:;ah = 15h
    37                              <1> createFileFCB:     ;ah = 16h
    38                              <1> renameFileFCB:     ;ah = 17h
    39 00002B06 C3                  <1>     ret
    40                              <1> setDTA:            ;ah = 1Ah
    41                              <1> ;Called with:
    42                              <1> ;   rdx = Pointer to the new default DTA
    43 00002B07 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
    44 00002B0E 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    45 00002B12 488915(79C30300)    <1>     mov qword [currentDTA], rdx
    46 00002B19 C3                  <1>     ret
    47                              <1> randomReadFCB:     ;ah = 21h
    48                              <1> randomWriteFCB:    ;ah = 22h
    49                              <1> getFileSizeFCB:    ;ah = 23h
    50                              <1> setRelRecordFCB:   ;ah = 24h
    51                              <1> randBlockReadFCB:  ;ah = 27h
    52                              <1> randBlockWriteFCB: ;ah = 28h
    53                              <1> parseFilenameFCB:  ;ah = 29h
    54 00002B1A C3                  <1>     ret
    55                              <1> getDTA:            ;ah = 2Fh
    56 00002B1B 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
    57 00002B22 488B1D(79C30300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    58 00002B29 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    59 00002B2D C3                  <1>     ret
    30                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
    31                              <1> ;-----------------------------------:
    32                              <1> ;    File Handle Kernel routines    :
    33                              <1> ;-----------------------------------:
    34                              <1> 
    35                              <1> createFileHdl:     ;ah = 3Ch, handle function
    36                              <1> ;Input: cx = File attributes (same as search attributes for find first)
    37                              <1> ;       rdx = Ptr to ASCIZ filename to create
    38                              <1> ;Output: CF=CY => ax = File handle
    39                              <1> ;        CF=NC => al = Error code
    40 00002B2E 51                  <1>     push rcx    ;Save file attributes on stack
    41 00002B2F 488D0D31060000      <1>     lea rcx, createMain
    42 00002B36 C605(56C60300)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
    43 00002B3D EB1D                <1>     jmp short openFileHdl.openCommon
    44                              <1> openFileHdl:       ;ah = 3Dh, handle function
    45                              <1> ;Input: al = Open mode, to open file with
    46                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    47                              <1> ;If called from 5D00h, cl = File attributes too
    48                              <1> ;Output: CF=CY => ax = File handle
    49                              <1> ;        CF=NC => al = Error code
    50 00002B3F BB16000000          <1>     mov ebx, dirInclusive
    51 00002B44 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
    52 00002B4B 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    53 00002B4E 880D(56C60300)      <1>     mov byte [searchAttr], cl
    54 00002B54 488D0D84050000      <1>     lea rcx, openMain  
    55 00002B5B 50                  <1>     push rax    ;Save open mode on stack
    56                              <1> .openCommon:
    57 00002B5C E8B2290000          <1>     call dosCrit1Enter
    58 00002B61 E8A2100000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    59 00002B66 E8B2290000          <1>     call dosCrit1Exit
    60 00002B6B 0F82A8000000        <1>     jc .exitBad
    61                              <1>     ;Now save variables
    62 00002B71 E8CB0F0000          <1>     call setCurrentSFT
    63 00002B76 66891D(8CC60300)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    64 00002B7D E838110000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    65 00002B82 0F8291000000        <1>     jc .exitBad
    66 00002B88 66891D(8EC60300)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    67 00002B8F 48893D(7CC60300)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    68 00002B96 0FB71D(8CC60300)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    69 00002B9D 881F                <1>     mov byte [rdi], bl  ;And open the file
    70                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    71 00002B9F 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    72 00002BA2 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
    73 00002BA9 51                  <1>     push rcx    ;Save the procedure to call on stack
    74 00002BAA E8F1E7FFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    75 00002BAF 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    76 00002BB0 488D0528050000      <1>     lea rax, openMain   ;Get EA for open procedure
    77 00002BB7 488B35(84C60300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    78 00002BBE 7318                <1>     jnc .proceedCall
    79                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good.
    80                              <1> ;If CF=CY => Path doesnt all exist:
    81                              <1> ;      If parDirExists = -1 => For Open, Bad.  For Create, Good. 
    82                              <1> ;Now we check if we are creating or opening.
    83 00002BC0 4839C3              <1>     cmp rbx, rax
    84 00002BC3 7409                <1>     je .badPathspec ;Jmp to error if opening file that doesnt exist
    85 00002BC5 F605(5FC60300)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    86 00002BCC 750A                <1>     jnz .proceedCall    ;If so, proceed.
    87                              <1> .badPathspec:
    88 00002BCE B802000000          <1>     mov eax, errFnf
    89 00002BD3 E941000000          <1>     jmp .exitBad    ;Need to deallocate the SFT before returning
    90                              <1> .proceedCall:
    91                              <1> ;If the pathspec exists, recall that for create, we truncate.
    92 00002BD8 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
    93 00002BDA 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    94 00002BDD 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    95 00002BDE 750B                <1>     jne .callProc   ;Jump if we are creating
    96                              <1>     ;al means openmode here
    97 00002BE0 A880                <1>     test al, 80h    ;No Inherit bit set?
    98 00002BE2 7407                <1>     jz .callProc
    99 00002BE4 247F                <1>     and al, 7Fh     ;Clear this bit
   100 00002BE6 B900100000          <1>     mov ecx, devNoInherit
   101                              <1> .callProc:
   102 00002BEB 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
   103 00002BF1 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
   104 00002BF7 51                  <1>     push rcx    ;Save the device word 
   105 00002BF8 FFD3                <1>     call rbx    ;Enter with open mode in 
   106 00002BFA 59                  <1>     pop rcx
   107 00002BFB 488B35(84C60300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
   108 00002C02 7225                <1>     jc .exitBad2
   109 00002C04 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
   110 00002C09 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   111 00002C0D 0FB705(8EC60300)    <1>     movzx eax, word [currentHdl]
   112                              <1>     ;SHARE HOOK, DOS DS:[008Ch]
   113 00002C14 E92B290000          <1>     jmp extGoodExit ;Save ax and return OK
   114                              <1> .exitBad:
   115 00002C19 FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
   116 00002C1A 5B                  <1>     pop rbx ;Pop the word from the stack
   117 00002C1B 66C705(8CC60300)FF- <1>     mov word [currentNdx], -1
   117 00002C23 FF                  <1>
   118 00002C24 E929290000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   119                              <1> .exitBad2:
   120                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   121 00002C29 488B35(7CC60300)    <1>     mov rsi, qword [curHdlPtr]
   122 00002C30 C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   123 00002C33 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
   124 00002C3A 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   125 00002C3F 66C705(8CC60300)FF- <1>     mov word [currentNdx], -1
   125 00002C47 FF                  <1>
   126 00002C48 E905290000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   127                              <1> 
   128                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   129                              <1> ;Input: bx = file handle to close
   130 00002C4D E87E100000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   131 00002C52 0F82FA280000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   132 00002C58 E8E40E0000          <1>     call setCurrentSFT  ;Set this as the current SFT
   133                              <1>     ;Check count to see if we need to check share mode
   134 00002C5D 31C0                <1>     xor eax, eax    ;Preset ax to 0
   135 00002C5F 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared, no need for share check
   136 00002C64 7406                <1>     je .skipShareCheck
   137                              <1>     ;Now check sharing mode
   138 00002C66 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   139 00002C6A 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   140                              <1> .skipShareCheck:
   141 00002C6C 50                  <1>     push rax    ;Save the share mode on stack
   142 00002C6D E84D070000          <1>     call closeMain  ;Call close main!
   143 00002C72 58                  <1>     pop rax 
   144 00002C73 0F82D9280000        <1>     jc extErrExit   ;If an error, exit through error exit
   145 00002C79 3C70                <1>     cmp al, netFCBShare ;Do NetFCB check (only if file opened more than once)
   146 00002C7B 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
   147 00002C7D E81A100000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
   148 00002C82 C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
   149                              <1> .exitOk:
   150 00002C85 31C0                <1>     xor eax, eax    ;Return value
   151 00002C87 E9B8280000          <1>     jmp extGoodExit
   152                              <1> 
   153                              <1> readFileHdl:       ;ah = 3Fh, handle function
   154 00002C8C 488D359E070000      <1>     lea rsi, readBytes
   155                              <1> .common:
   156 00002C93 E838100000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   157 00002C98 0F82B4280000        <1>     jc extErrExit   ;Error code in al and exit
   158 00002C9E E89E0E0000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   159 00002CA3 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   160 00002CA5 FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   161 00002CAB 488915(79C30300)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   162 00002CB2 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   163 00002CB4 8F05(79C30300)      <1>     pop qword [currentDTA]
   164 00002CBA 0F8292280000        <1>     jc extErrExit   ;Error code in al and exit
   165 00002CC0 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   166 00002CC2 E974280000          <1>     jmp extGoodExit2    ;and exit!
   167                              <1> 
   168                              <1> writeFileHdl:      ;ah = 40h, handle function
   169 00002CC7 488D353F0A0000      <1>     lea rsi, writeBytes
   170 00002CCE E9C0FFFFFF          <1>     jmp readFileHdl.common
   171                              <1> 
   172                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   173                              <1> ;Here don't allow malformed chars unless it is a network CDS
   174 00002CD3 BB06000000          <1>     mov ebx, dirIncFiles    ;Inclusive w/o dirs
   175 00002CD8 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
   176 00002CDF 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   177 00002CE2 880D(56C60300)      <1>     mov byte [searchAttr], cl
   178 00002CE8 4889D6              <1>     mov rsi, rdx
   179 00002CEB E8B0250000          <1>     call checkPathspecOK
   180 00002CF0 730A                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   181                              <1> .badPath:
   182 00002CF2 B803000000          <1>     mov eax, errPnf
   183 00002CF7 E956280000          <1>     jmp extErrExit
   184                              <1> .pathOk:
   185 00002CFC 488D3D(7FC40300)    <1>     lea rdi, buffer1
   186 00002D03 52                  <1>     push rdx
   187 00002D04 E897E6FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   188 00002D09 5A                  <1>     pop rdx
   189 00002D0A 0F8242280000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   190                              <1>     ;In the case of a wildcard, recall this will return the first file
   191 00002D10 803D(5EC60300)FF    <1>     cmp byte [fileExist], -1
   192 00002D17 0F8535280000        <1>     jnz extErrExit
   193                              <1> ;Internal current dir is now populated with dir entry
   194                              <1> ; and internal DOS directory variables now point to this entry.
   195                              <1> ;Check if the file is a char device or read only.
   196 00002D1D B805000000          <1>     mov eax, errAccDen  
   197 00002D22 F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   198 00002D29 0F8523280000        <1>     jnz extErrExit  ;Can't delete a char dev
   199 00002D2F F605(C6C50300)01    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirReadOnly
   200 00002D36 0F8516280000        <1>     jnz extErrExit  ;Can't delete a read only file
   201                              <1>     ;Now check if the cds is redir, or we entered via server to allow wildcards.
   202 00002D3C E83C230000          <1>     call testCDSNet ;Gets working CDS in rdi
   203 00002D41 7210                <1>     jc .gotoDelete
   204 00002D43 803D(5CC60300)FF    <1>     cmp byte [dosInvoke], -1    ;Server invoke?
   205 00002D4A 7407                <1>     je .gotoDelete
   206                              <1>     ;Now we check to see if we have wildcards. We do not generally allow them.
   207                              <1>     ;Network CDS and server invokations allow wildcards
   208 00002D4C E8CB250000          <1>     call scanPathWC
   209 00002D51 729F                <1>     jc .badPath ;Dont allow wildcards
   210                              <1> .gotoDelete:
   211 00002D53 E83A030000          <1>     call deleteMain
   212 00002D58 E842DCFFFF          <1>     call setBufferReferenced
   213 00002D5D 0F82EF270000        <1>     jc extErrExit
   214 00002D63 803D(5CC60300)FF    <1>     cmp byte [dosInvoke], -1    ;Server invoke?
   215 00002D6A 0F85D4270000        <1>     jne extGoodExit
   216                              <1>     ;Here is server invoke, pass through call again.
   217                              <1>     ;We found first, so build a ffblock from the curDir data and find next
   218                              <1>     ;If there are more, delete until no more files match wildcard pattern
   219                              <1> .serverWCloop:
   220 00002D70 FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current DTA address
   221 00002D76 488D3D(90C50300)    <1>     lea rdi, dosffblock
   222 00002D7D 57                  <1>     push rdi    ;Push this address onto the stack
   223 00002D7E E864E5FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
   224 00002D83 8F05(79C30300)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
   225 00002D89 E8FFE1FFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
   226 00002D8E 8F05(79C30300)      <1>     pop qword [currentDTA]
   227 00002D94 E8F9020000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
   228 00002D99 E801DCFFFF          <1>     call setBufferReferenced
   229 00002D9E 73D0                <1>     jnc .serverWCloop     
   230                              <1> ;Stop as soon as an error occurs
   231 00002DA0 3C12                <1>     cmp al, errNoFil    ;Check if no more files (not considered error here)
   232 00002DA2 0F85AA270000        <1>     jne extErrExit
   233 00002DA8 31C0                <1>     xor eax, eax
   234 00002DAA E995270000          <1>     jmp extGoodExit
   235                              <1> 
   236                              <1> 
   237                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   238                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   239 00002DAF E81C0F0000          <1>     call getSFTPtr
   240 00002DB4 0F8298270000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   241 00002DBA 3C03                <1>     cmp al, 3
   242 00002DBC 720A                <1>     jb .validFunction
   243 00002DBE B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   244 00002DC3 E98A270000          <1>     jmp extErrExit
   245                              <1> .validFunction:
   246 00002DC8 3C01                <1>     cmp al, 1
   247 00002DCA 7718                <1>     ja .seekend
   248 00002DCC 7203                <1>     jb .seekset
   249                              <1> ;Here we are at seekcur, seek from current (signed)
   250 00002DCE 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   251                              <1> .seekset:
   252                              <1> ;Seek from the start (unsigned)
   253 00002DD1 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   254 00002DD4 E811230000          <1>     call getUserRegs    ;Get user regs in rsi
   255 00002DD9 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   256                              <1> .seekExit:
   257 00002DDC 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   258 00002DDF E957270000          <1>     jmp extGoodExit2    ;Return OK in eax 
   259                              <1> .seekend:
   260                              <1> ;Here we are at seekend, seek from end (signed)
   261 00002DE4 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   262 00002DEA 7505                <1>     jnz .netCheck
   263                              <1> .proceedDisk:
   264 00002DEC 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   265 00002DEF EBE0                <1>     jmp short .seekset
   266                              <1> .netCheck:
   267 00002DF1 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   268 00002DF7 75F3                <1>     jnz .proceedDisk
   269 00002DF9 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   270                              <1>     ;Check it's share mode
   271 00002DFD 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   272 00002E02 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   273 00002E07 7407                <1>     je .netSeek
   274 00002E09 3D30000000          <1>     cmp eax, denyReadShare
   275 00002E0E 75DC                <1>     jne .proceedDisk
   276                              <1> .netSeek:
   277 00002E10 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   278 00002E15 CD4F                <1>     int 4Fh
   279 00002E17 73C3                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   280 00002E19 E934270000          <1>     jmp extErrExit
   281                              <1> 
   282                              <1> 
   283                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   284 00002E1E 3C01                <1>     cmp al, 1
   285 00002E20 760A                <1>     jbe .subFuncOk
   286 00002E22 B801000000          <1>     mov eax, errInvFnc
   287 00002E27 E926270000          <1>     jmp extErrExit
   288                              <1> .subFuncOk:
   289 00002E2C 4889D6              <1>     mov rsi, rdx
   290 00002E2F 89C3                <1>     mov ebx, eax    ;Store function code in bl
   291 00002E31 53                  <1>     push rbx
   292 00002E32 51                  <1>     push rcx
   293 00002E33 E868240000          <1>     call checkPathspecOK
   294 00002E38 730E                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   295 00002E3A 740C                <1>     jz .pathOk  ;Can be terminated with a silly char
   296                              <1> .badPath:
   297 00002E3C 59                  <1>     pop rcx
   298 00002E3D 5B                  <1>     pop rbx
   299 00002E3E B803000000          <1>     mov eax, errPnf
   300 00002E43 E90A270000          <1>     jmp extErrExit
   301                              <1> .pathOk:
   302 00002E48 E811250000          <1>     call checkPathNet 
   303 00002E4D 74ED                <1>     jz .badPath ;Or Net paths
   304 00002E4F E8C8240000          <1>     call scanPathWC
   305 00002E54 72E6                <1>     jc .badPath ;Dont allow wildcards
   306 00002E56 488D3D(7FC40300)    <1>     lea rdi, buffer1
   307 00002E5D 52                  <1>     push rdx
   308 00002E5E C605(56C60300)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   309 00002E65 E836E5FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   310 00002E6A 5A                  <1>     pop rdx
   311 00002E6B 59                  <1>     pop rcx
   312 00002E6C 5B                  <1>     pop rbx
   313 00002E6D 0F82DF260000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   314                              <1>     ;In the case of a wildcard, recall this will return the first file
   315 00002E73 803D(5EC60300)FF    <1>     cmp byte [fileExist], -1
   316 00002E7A 0F85D2260000        <1>     jnz extErrExit
   317                              <1> 
   318 00002E80 E8F8210000          <1>     call testCDSNet
   319 00002E85 730C                <1>     jnc .notNet
   320 00002E87 750A                <1>     jnz .notNet ;This type of net ok
   321 00002E89 B805000000          <1>     mov eax, errAccDen
   322 00002E8E E9BF260000          <1>     jmp extErrExit
   323                              <1> .notNet:
   324 00002E93 84DB                <1>     test bl, bl
   325 00002E95 7526                <1>     jnz .setAttribs
   326                              <1>     ;Get attribs here
   327 00002E97 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   328 00002E9D 7412                <1>     jz .getDiskAttribs
   329 00002E9F B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   330 00002EA4 CD4F                <1>     int 4Fh
   331 00002EA6 0F82A6260000        <1>     jc extErrExit
   332 00002EAC E993260000          <1>     jmp extGoodExit
   333                              <1> .getDiskAttribs:
   334 00002EB1 0FB605(C6C50300)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   335 00002EB8 E987260000          <1>     jmp extGoodExit
   336                              <1> .setAttribs:
   337                              <1>     ;Set attribs here
   338 00002EBD 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   339 00002EC3 7417                <1>     jz .setDiskAttribs
   340 00002EC5 0FB7C9              <1>     movzx ecx, cx
   341 00002EC8 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   342 00002EC9 B80E110000          <1>     mov eax, 110Eh
   343 00002ECE CD4F                <1>     int 4Fh
   344 00002ED0 59                  <1>     pop rcx
   345 00002ED1 0F827B260000        <1>     jc extErrExit
   346 00002ED7 E968260000          <1>     jmp extGoodExit
   347                              <1> .setDiskAttribs:
   348 00002EDC E891EFFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   349 00002EE1 0F826B260000        <1>     jc extErrExit
   350 00002EE7 F6C118              <1>     test cl, dirVolumeID | dirDirectory
   351 00002EEA 740A                <1>     jz .set
   352 00002EEC B805000000          <1>     mov eax, errAccDen
   353 00002EF1 E95C260000          <1>     jmp extErrExit
   354                              <1> .set:
   355 00002EF6 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   356 00002EF9 80E518              <1>     and ch, (dirVolumeID | dirDirectory)    ;Keep these two bits
   357 00002EFC 08E9                <1>     or cl, ch
   358 00002EFE 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   359 00002F01 31C0                <1>     xor eax, eax
   360 00002F03 E93C260000          <1>     jmp extGoodExit
   361                              <1> 
   362                              <1> 
   363                              <1> duplicateHandle:   ;ah = 45h, handle function
   364                              <1> ;Input: bx = Handle to duplicate
   365                              <1> ;Output: If ok then ax = New handle
   366 00002F08 E8240E0000          <1>     call findFreeJFTSpace    ;First find a free space in the JFT
   367 00002F0D 0F823F260000        <1>     jc extErrExit   ;Exit if no space
   368                              <1>     ;rsi points to the free space
   369                              <1> .duplicateCommon:
   370 00002F13 E8840D0000          <1>     call getJFTPtr  ;Get a pointer to the JFT entry in rdi for bx
   371 00002F18 4887F7              <1>     xchg rsi, rdi
   372 00002F1B AC                  <1>     lodsb   ;Move over the SFT ndx from the old to the new position
   373 00002F1C AA                  <1>     stosb
   374 00002F1D 48FFCE              <1>     dec rsi
   375 00002F20 48FFCF              <1>     dec rdi
   376                              <1>     ;rdi now points to new position
   377                              <1>     ;rsi points to old position
   378                              <1>     ;al has SFT ndx
   379 00002F23 4889FE              <1>     mov rsi, rdi    ;Move rsi to point to the new position jft position
   380 00002F26 0FB6D8              <1>     movzx ebx, al   ;Move SFTndx into ebx
   381 00002F29 E8390D0000          <1>     call getSFTPtrfromSFTNdx    ;Get the pointer to the SFT in rdi
   382 00002F2E 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   383                              <1>     ;Now we must return in ax the entry in the JFT 
   384 00002F31 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP]
   385 00002F38 488D7F2A            <1>     lea rdi, qword [rdi + psp.jobFileTbl]   ;Point to head of table
   386 00002F3C 4829FE              <1>     sub rsi, rdi    ;Get the difference of the two in si
   387 00002F3F 89F0                <1>     mov eax, esi    ;Get the difference as the return code
   388 00002F41 E9FE250000          <1>     jmp extGoodExit
   389                              <1> 
   390                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   391                              <1> ;Input: bx = Handle to duplicate
   392                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   393                              <1>     ;First we close cx
   394 00002F46 87D9                <1>     xchg ebx, ecx ;Swap cx and bx
   395 00002F48 53                  <1>     push rbx
   396 00002F49 51                  <1>     push rcx
   397 00002F4A E8FEFCFFFF          <1>     call closeFileHdl   ;Close handle 
   398 00002F4F 59                  <1>     pop rcx
   399 00002F50 5B                  <1>     pop rbx
   400                              <1>     retc    ;The error code is set by errExtExit and CF is set on callerFrame
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00002F51 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00002F53 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   401                              <1>     ;Else, close was ok, lets duplicate now
   402 00002F54 E8430D0000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   403 00002F59 0F82F3250000        <1>     jc extErrExit   ;Return bad with error code in al
   404 00002F5F 87D9                <1>     xchg ebx, ecx   ;Now get source to duplicate in ebx
   405 00002F61 4889FE              <1>     mov rsi, rdi    ;Put the free space ptr in rsi
   406 00002F64 EBAD                <1>     jmp short duplicateHandle.duplicateCommon
   407                              <1> 
   408                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   409                              <1> ;Input: cx = Search Attributes, cl only used
   410                              <1> ;       rdx = Ptr to path to file to look for
   411                              <1> ;       al = Document as needing to be 0 for now
   412                              <1> ;Return:
   413                              <1> ;Data in the DTA or error through AX with CF=CY
   414                              <1> ;CAVEATS!
   415                              <1> ;DTA:attribFnd = 40h => Char dev
   416                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   417 00002F66 880D(56C60300)      <1>     mov byte [searchAttr], cl
   418 00002F6C 4889D6              <1>     mov rsi, rdx
   419 00002F6F E82C230000          <1>     call checkPathspecOK    ;This uses rsi and preserves it
   420 00002F74 730A                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   421                              <1>     ;Dont allow paths which end in a malformed char for ASCIIZ
   422                              <1>     ;ONLY ALLOW TRUENAME TO RESOLVE SUCH PATHS 
   423                              <1> .badPath:
   424 00002F76 B803000000          <1>     mov eax, errPnf
   425 00002F7B E9D2250000          <1>     jmp extErrExit
   426                              <1> .pathspecOk:
   427 00002F80 FF35(79C30300)      <1>     push qword [currentDTA]
   428 00002F86 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   429 00002F8D 48893D(79C30300)    <1>     mov qword [currentDTA], rdi
   430 00002F94 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   431 00002F9B E800E4FFFF          <1>     call getFilePath
   432                              <1> .findfileExit:
   433 00002FA0 8F05(79C30300)      <1>     pop qword [currentDTA]
   434 00002FA6 0F82A6250000        <1>     jc extErrExit
   435 00002FAC 488D3D(90C50300)    <1>     lea rdi, dosffblock
   436 00002FB3 57                  <1>     push rdi
   437 00002FB4 E82EE3FFFF          <1>     call setupFFBlock
   438 00002FB9 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   439 00002FBA 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
   440 00002FC1 B92B000000          <1>     mov ecx, ffBlock_size
   441 00002FC6 F3A4                <1>     rep movsb   ;Copy the whole block. 
   442                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   443 00002FC8 31C0                <1>     xor eax, eax    ;Return value
   444 00002FCA E975250000          <1>     jmp extGoodExit ;Exit well
   445                              <1> 
   446                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   447                              <1> ;Input: DTA has the find first block from the previous search
   448 00002FCF 488B35(79C30300)    <1>     mov rsi, qword [currentDTA]
   449 00002FD6 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   450 00002FDD B92B000000          <1>     mov ecx, ffBlock_size
   451 00002FE2 F3A4                <1>     rep movsb
   452 00002FE4 FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current DTA address
   453 00002FEA 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   454 00002FF1 48893D(79C30300)    <1>     mov qword [currentDTA], rdi
   455 00002FF8 E890DFFFFF          <1>     call findNextMain
   456 00002FFD EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   457                              <1> 
   458                              <1> renameFile:        ;ah = 56h
   459 00002FFF BB16000000          <1>     mov ebx, dirInclusive
   460 00003004 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
   461 0000300B 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   462 0000300E 880D(56C60300)      <1>     mov byte [searchAttr], cl
   463                              <1> 
   464                              <1> 
   465                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   466                              <1> createNewFile:     ;ah = 5Bh
   467                              <1> 
   468                              <1> lockUnlockFile:    ;ah = 5Ch
   469 00003014 E939250000          <1>     jmp extErrExit
   470                              <1> setHandleCount:    ;ah = 67h
   471 00003019 E934250000          <1>     jmp extErrExit
   472                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   473                              <1>     ;Input: bx = File to flush
   474 0000301E E8AD0C0000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   475 00003023 0F8229250000        <1>     jc extErrExit
   476 00003029 E8130B0000          <1>     call setCurrentSFT
   477                              <1>     ;Now we check if the device is a char, disk or net file
   478 0000302E 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   479 00003032 66A90080            <1>     test ax, devRedirDev
   480 00003036 7512                <1>     jnz .notNet
   481                              <1>     ;Commit file net redir call and exit
   482 00003038 B807110000          <1>     mov eax, 1107h
   483 0000303D CD4F                <1>     int 4Fh
   484 0000303F 0F820D250000        <1>     jc extErrExit
   485 00003045 E93D000000          <1>     jmp .exitOk
   486                              <1> .notNet:
   487 0000304A 66A98000            <1>     test ax, devCharDev
   488 0000304E 7418                <1>     jz .blokDev
   489                              <1>     ;Here we simply update date/time fields in the SFT structure before exiting
   490 00003050 E869F9FFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   491 00003055 0F82F7240000        <1>     jc extErrExit  ;If we fail to get time/date, fail the request
   492                              <1>     ;Build date and time words
   493 0000305B E849FAFFFF          <1>     call getDirDTwords  ;Get date time words packed in eax
   494 00003060 894713              <1>     mov dword [rdi + sft.wTime], eax    ;Store them at the same time
   495 00003063 E91F000000          <1>     jmp .exitOk
   496                              <1> .blokDev:
   497 00003068 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   498 0000306C E804200000          <1>     call setWorkingDPB
   499 00003071 E867EEFFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   500 00003076 0F82D6240000        <1>     jc extErrExit
   501 0000307C E810DBFFFF          <1>     call flushFile  ;Now the file gets flushed
   502 00003081 0F82CB240000        <1>     jc extErrExit
   503                              <1> .exitOk:
   504 00003087 30C0                <1>     xor al, al
   505 00003089 E85C200000          <1>     call getUserRegs
   506 0000308E 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   507                              <1>     return
    18                              <2> %%_ret:
    19 00003091 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   508                              <1> ;-----------------------------------:
   509                              <1> ;       Main File IO Routines       :
   510                              <1> ;-----------------------------------:
   511                              <1> deleteMain:
   512                              <1> ;Now unlink FAT chain and then clear directory entry
   513                              <1> ;Get the start cluster of this file
   514                              <1> ;Input:
   515                              <1> ; The file must have NOT be read-only.
   516                              <1> ; If the CDS is NOT a net cds then the following must hold:
   517                              <1> ;     - curDirCopy must be filled with the file directory information
   518                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
   519                              <1> ;Output: CF=NC => Success, 
   520                              <1> ; If not net CDS:
   521                              <1> ;   rsi keeps pointing to directory entry.
   522                              <1> ;   al = First char of the file that was deleted.
   523                              <1> ;        CF=CY => Error
   524                              <1> ;The dir buffer must be marked as referenced once we are done with it
   525 00003092 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   526 00003099 E8DF1F0000          <1>     call testCDSNet ;CF=CY => Not net
   527 0000309E 7208                <1>     jc .notNet
   528 000030A0 B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
   529 000030A5 CD4F                <1>     int 4Fh
   530                              <1>     return
    18                              <2> %%_ret:
    19 000030A7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   531                              <1> .notNet:
   532 000030A8 52                  <1>     push rdx
   533 000030A9 0FB715(D5C50300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   534 000030B0 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   535 000030B7 C1E010              <1>     shl eax, 10h
   536 000030BA 09D0                <1>     or eax, edx ;Add low bits to eax
   537 000030BC 5A                  <1>     pop rdx
   538 000030BD 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
   539 000030BF 740E                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
   540 000030C1 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
   541 000030C8 E830DDFFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
   542 000030CD 720F                <1>     jc .exit
   543                              <1> .skipUnlink:
   544                              <1>     ;Now replace the first char of the directory to 0E5h
   545                              <1>     ;Get the disk directory in a buffer to manipulate the entry
   546 000030CF E89EEDFFFF          <1>     call getDiskDirectoryEntry
   547 000030D4 7208                <1>     jc .exit
   548 000030D6 8A05(62C60300)      <1>     mov al, byte [delChar]
   549 000030DC 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
   550                              <1>     ;CF must be clear
   551                              <1> .exit:
   552                              <1>     return
    18                              <2> %%_ret:
    19 000030DE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   553                              <1> 
   554                              <1> openMain:
   555                              <1> ;Input: ax (formally al) = Open mode
   556                              <1> ;       [currentSFT] = SFT we are building
   557                              <1> ;       [workingCDS] = CDS of drive to access
   558                              <1> ;       [workingDPB] = DPB of drive to access
   559                              <1> ;Ouput: CF=CY => Error, eax has error code
   560 000030DF E84F000000          <1>     call .setOpenMode
   561                              <1>     retc    ;Error Exit 
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000030E4 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   562 000030E6 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   563 000030ED 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]
   564 000030F4 30E4                <1>     xor ah, ah  ;al has the access mode
   565 000030F6 66894702            <1>     mov word [rdi + sft.wOpenMode], ax  ;Set the SFT access mode
   566 000030FA 4881FEFFFFFFFF      <1>     cmp rsi, -1
   567 00003101 750A                <1>     jne .notNet
   568                              <1> .redirOpen:
   569 00003103 50                  <1>     push rax    ;Push open mode onto stack
   570 00003104 B816110000          <1>     mov eax, 1116h  ;Open remote file on \\ pathspec drives
   571 00003109 CD4F                <1>     int 4Fh
   572 0000310B 58                  <1>     pop rax
   573                              <1>     return
    18                              <2> %%_ret:
    19 0000310C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   574                              <1> .notNet:
   575 0000310D 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   576 00003113 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
   577 00003115 E8F9230000          <1>     call dosCrit1Enter
   578 0000311A C605(61C60300)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
   579 00003121 C605(62C60300)E5    <1>     mov byte [delChar], 0E5h
   580 00003128 E8B0000000          <1>     call buildSFTEntry  ;ax must have the open mode
   581                              <1>     ;Here we put Share mode stuff
   582 0000312D E8EB230000          <1>     call dosCrit1Exit
   583                              <1>     return
    18                              <2> %%_ret:
    19 00003132 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   584                              <1> .setOpenMode:
   585                              <1> ;Input: al = Open mode for the file open
   586 00003133 8805(57C60300)      <1>     mov byte [fileOpenMd], al
   587 00003139 53                  <1>     push rbx
   588 0000313A 88C3                <1>     mov bl, al
   589 0000313C 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
   590 0000313F 803D(5CC60300)FF    <1>     cmp byte [dosInvoke], -1    
   591 00003146 7505                <1>     jnz .s1 ;Skip this check if not server invoke
   592 00003148 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
   593 0000314B 7405                <1>     je .s2
   594                              <1> .s1:
   595 0000314D 80FB40              <1>     cmp bl, denyNoneShare
   596 00003150 770D                <1>     ja .somBad
   597                              <1> .s2:
   598 00003152 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
   599 00003154 80E30F              <1>     and bl, 0Fh
   600 00003157 80FB02              <1>     cmp bl, RWAccess
   601 0000315A 7703                <1>     ja .somBad
   602 0000315C 5B                  <1>     pop rbx
   603 0000315D F8                  <1>     clc
   604                              <1>     return
    18                              <2> %%_ret:
    19 0000315E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   605                              <1> .somBad:
   606 0000315F 5B                  <1>     pop rbx
   607 00003160 B80C000000          <1>     mov eax, errAccCde
   608 00003165 F9                  <1>     stc
   609                              <1>     return
    18                              <2> %%_ret:
    19 00003166 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   610                              <1> createMain:
   611                              <1> ;Input: ax (formally al) = File attributes
   612                              <1> ;       [currentSFT] = SFT we are building
   613                              <1> ;       [workingCDS] = CDS of drive to access
   614                              <1> ;       [workingDPB] = DPB of drive to access
   615 00003167 0FB6C0              <1>     movzx eax, al
   616 0000316A A8C0                <1>     test al, 80h | 40h   ;Invalid bits?
   617 0000316C 750A                <1>     jnz .invalidAttrib
   618 0000316E A808                <1>     test al, dirVolumeID
   619 00003170 7506                <1>     jnz .invalidAttrib  ;Creating volume label with this function is forbidden
   620 00003172 0C20                <1>     or al, dirArchive   ;Set archive bit
   621 00003174 A810                <1>     test al, dirDirectory   
   622 00003176 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
   623                              <1> .invalidAttrib:
   624 00003178 B805000000          <1>     mov eax, errAccDen
   625 0000317D F9                  <1>     stc
   626                              <1>     return
    18                              <2> %%_ret:
    19 0000317E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   627                              <1> .validAttr:
   628 0000317F 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   629 00003186 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]
   630 0000318D 4881FEFFFFFFFF      <1>     cmp rsi, -1
   631 00003194 750A                <1>     jne .diskFile
   632 00003196 50                  <1>     push rax    ;Save the new attributes
   633 00003197 B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
   634 0000319C CD4F                <1>     int 4Fh
   635 0000319E 5B                  <1>     pop rbx
   636                              <1>     return
    18                              <2> %%_ret:
    19 0000319F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   637                              <1> .diskFile:
   638 000031A0 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
   639 000031A6 740A                <1>     jz .hardFile
   640 000031A8 50                  <1>     push rax    ;Save the new attributes
   641 000031A9 B817110000          <1>     mov eax, 1117h  ;Create file with CDS
   642 000031AE CD4F                <1>     int 4Fh
   643 000031B0 5B                  <1>     pop rbx
   644                              <1>     return
    18                              <2> %%_ret:
    19 000031B1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   645                              <1> .hardFile:
   646 000031B2 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
   647 000031B8 C605(61C60300)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
   648 000031BF C605(62C60300)E5    <1>     mov byte [delChar], 0E5h
   649 000031C6 E848230000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
   650 000031CB 50                  <1>     push rax    ;Save the file attributes on stack
   651 000031CC B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
   652 000031D1 E807000000          <1>     call buildSFTEntry
   653 000031D6 5B                  <1>     pop rbx ;Pop the word off (though it has been used already!)
   654                              <1>     ;Here we put Share mode stuff
   655 000031D7 E841230000          <1>     call dosCrit1Exit
   656                              <1>     return
    18                              <2> %%_ret:
    19 000031DC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   657                              <1> buildSFTEntry:
   658                              <1> ;Called in a critical section.
   659                              <1> ;Input: al = Open mode
   660                              <1> ;       STACK: File attributes if creating a file
   661                              <1> ;       [currentSFT] = SFT we are building
   662                              <1> ;       [workingCDS] = CDS of drive to access
   663                              <1> ;       [workingDPB] = DPB of drive to access
   664                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
   665                              <1> ;
   666                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
   667                              <1> ;                  - wDeviceInfo is set except for inherit bit
   668                              <1> ;        If CF=CY: - Return fail
   669                              <1> ;
   670                              <1> ;
   671                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
   672                              <1> ;   If not, create disk entry.
   673                              <1> ;Check if the device was a char device by checking curDirCopy.
   674                              <1> ;If disk, get dpb. We check if the parent dir was found.
   675                              <1> 
   676                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
   677                              <1> ; to start of file fields of the SFT
   678 000031DD 55                  <1>     push rbp    ;file attribute is rbp + 10h
   679 000031DE 4889E5              <1>     mov rbp, rsp
   680 000031E1 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
   681                              <1> ;Set the open mode
   682 000031E8 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
   683                              <1> ;Get current time
   684 000031EC E8CDF7FFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   685 000031F1 E8B3F8FFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
   686 000031F6 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
   687                              <1> ;Set current Owner
   688 000031F9 488B05(81C30300)    <1>     mov rax, qword [currentPSP]
   689 00003200 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
   690                              <1> ;Set file pointer to first byte
   691 00003204 C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
   692                              <1> ;Common fields set
   693 0000320B F605(61C60300)FF    <1>     test byte [openCreate], -1  ;Create = -1
   694 00003212 0F846B010000        <1>     jz .openProc
   695                              <1>     ;Here if Creating a file.
   696 00003218 F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
   697 0000321F 0F8567010000        <1>     jnz .charDev
   698 00003225 F605(5EC60300)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
   699 0000322C 0F8498000000        <1>     jz .createFile
   700                              <1>     ;Here disk file exists, so recreating the file.
   701 00003232 E85BFEFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
   702                              <1>     ;al has the char for the filename
   703                              <1>     ;Sets vars for the sector/offset into the sector
   704 00003237 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   705 0000323E 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
   706 00003240 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
   707                              <1>     ;al has file attributes.
   708 00003244 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
   709 00003246 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
   710 00003249 31C0                <1>     xor eax, eax
   711                              <1>     ;Clear all the fields south of ntRes (20 bytes)
   712 0000324B 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
   713 0000324F 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
   714 00003253 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
   715 00003256 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
   716 00003259 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
   717 0000325C 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
   718                              <1> 
   719 0000325F 57                  <1>     push rdi    ;Save SFT pointer
   720 00003260 488D3D(BBC50300)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
   721 00003267 B920000000          <1>     mov ecx, fatDirEntry_size
   722 0000326C F3A4                <1>     rep movsb
   723 0000326E E81DD7FFFF          <1>     call setBufferDirty ;We wrote to this buffer
   724 00003273 E827D7FFFF          <1>     call setBufferReferenced    ;We are now done with this buffer, reclaimable
   725 00003278 5F                  <1>     pop rdi
   726                              <1> .createCommon:  ;rdi must point to the current SFT 
   727                              <1>     ;Now populate the remaining SFT fields 
   728 00003279 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   729 00003280 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
   730 00003283 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
   731 00003286 488B05(98C60300)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
   732 0000328D 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
   733 00003291 0FB705(A0C60300)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
   734 00003298 C0E805              <1>     shr al, 5   ;Divide by 5 to get directory entry number
   735 0000329B 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
   736 0000329E 31C0                <1>     xor eax, eax
   737                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
   738 000032A0 8A05(63C60300)      <1>     mov al, byte [workingDrv]
   739 000032A6 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
   740 000032AA 488B05(64C60300)    <1>     mov rax, qword [workingDPB]
   741 000032B1 48894707            <1>     mov qword [rdi + sft.qPtr], rax
   742                              <1>     ;Last thing, copy the filename over
   743                              <1>     ;Now save the name
   744                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
   745 000032B5 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
   746 000032B9 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   747 000032C0 48A5                <1>     movsq   ;Copy over the space padded name to the sft
   748 000032C2 66A5                <1>     movsw
   749 000032C4 A4                  <1>     movsb
   750                              <1>     ;SFT filled, now we can return
   751 000032C5 E9F0000000          <1>     jmp .exit
   752                              <1> .createFile:
   753                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
   754                              <1>     ;rsi points to current sda entry
   755 000032CA 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
   756                              <1>     ;Clear out the dir entry
   757 000032D1 57                  <1>     push rdi
   758 000032D2 B904000000          <1>     mov ecx, 4
   759 000032D7 31C0                <1>     xor eax, eax
   760 000032D9 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
   761 000032DC 5F                  <1>     pop rdi
   762                              <1>     ;Copy the FCB name over    
   763 000032DD 56                  <1>     push rsi
   764 000032DE 57                  <1>     push rdi
   765 000032DF B90B000000          <1>     mov ecx, 11
   766 000032E4 488D35(DBC50300)    <1>     lea rsi, fcbName
   767 000032EB F3A4                <1>     rep movsb   ;Move over the FCB name
   768 000032ED 5F                  <1>     pop rdi
   769 000032EE 5E                  <1>     pop rsi
   770                              <1> 
   771 000032EF 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
   772                              <1>     ;al has file attributes.
   773 000032F3 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
   774 000032F5 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
   775 000032F8 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
   776 000032FB 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
   777 000032FE 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
   778 00003301 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
   779                              <1> .searchForDirSpace:
   780 00003307 8905(D6C60300)      <1>     mov dword [dirClustA], eax
   781 0000330D 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
   782 0000330F 668905(DAC60300)    <1>     mov word [dirSect], ax
   783 00003316 8905(DCC60300)      <1>     mov dword [dirEntry], eax
   784 0000331C 57                  <1>     push rdi
   785 0000331D E83CEBFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
   786 00003322 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
   787 00003323 7320                <1>     jnc .dirEntryFnd
   788 00003325 813D(D2C60300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
   788 0000332D 0000                <1>
   789 0000332F 0F8487000000        <1>     je .bad ;Set CF and exit
   790 00003335 E83AECFFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
   791 0000333A 727E                <1>     jc .exit
   792 0000333C 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
   793 00003341 7479                <1>     je .bad
   794                              <1>     ;Else eax = Newly allocated cluster
   795 00003343 EBC2                <1>     jmp short .searchForDirSpace
   796                              <1> .dirEntryFnd:
   797 00003345 4887FE              <1>     xchg rdi, rsi
   798 00003348 B904000000          <1>     mov ecx, 4
   799 0000334D F348A5              <1>     rep movsq   ;Copy over the buffered directory
   800 00003350 E83BD6FFFF          <1>     call setBufferDirty ;We wrote to this buffer
   801 00003355 E845D6FFFF          <1>     call setBufferReferenced    ;We are now done with this buffer, reclaimable
   802 0000335A 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   803 00003361 E913FFFFFF          <1>     jmp .createCommon
   804                              <1> .open:
   805                              <1> ;curdircopy has a copy of the disk file directory
   806                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
   807 00003366 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   808 0000336D 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
   809                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
   810 00003374 E8F9EAFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
   811 00003379 E821D6FFFF          <1>     call setBufferReferenced    ;Mark this buffer as done with!
   812 0000337E E9F6FEFFFF          <1>     jmp .createCommon
   813                              <1> 
   814                              <1> .openProc:
   815                              <1>     ;Here if Opening a file.
   816 00003383 F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
   817 0000338A 74DA                <1>     jz .open
   818                              <1> .charDev:
   819 0000338C 488B05(BBC50300)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
   820 00003393 E8D81F0000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
   821 00003398 7307                <1>     jnc .notBadCharDevName
   822 0000339A B805000000          <1>     mov eax, errAccDen
   823 0000339F EB19                <1>     jmp short .exit ;CF already set
   824                              <1> .notBadCharDevName:
   825 000033A1 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
   826 000033A5 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
   827 000033A9 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
   828 000033AC 80CB60              <1>     or bl, charDevBinary | charDevNoEOF ;Set binary mode and noEOF on read
   829 000033AF 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
   830 000033B3 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
   831                              <1> .exit:
   832 000033BA 5D                  <1>     pop rbp
   833                              <1>     return
    18                              <2> %%_ret:
    19 000033BB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   834                              <1> .bad:
   835 000033BC F9                  <1>     stc
   836 000033BD EBFB                <1>     jmp short .exit
   837                              <1> closeMain: ;Int 4Fh AX=1201h
   838                              <1> ;Gets the directory entry for a file
   839                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
   840                              <1> ;If CF=CY on return: Error, return error with al = error code
   841                              <1> ;Preserve all regs except eax and rdi
   842                              <1> ; If CF=NC on return: eax = Unknown
   843                              <1> ;                     rdi = current SFT ptr
   844 000033BF 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
   845 000033C6 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
   846 000033CC 7408                <1>     jz .physical
   847                              <1>     ;Here we beep out the request to the network redirector (Int 4Fh AX=1106h)
   848 000033CE B806110000          <1>     mov eax, 1106h  ;Make request
   849 000033D3 CD4F                <1>     int 4Fh ;Beep!
   850                              <1>     return  ;Returns with CF set or clear as appropriate
    18                              <2> %%_ret:
    19 000033D5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   851                              <1> .physical:  
   852                              <1> ; We make a request to the dev dir to close the device
   853                              <1> ; If the device is disk, we then update the directory entry for the disk file
   854 000033D6 E838210000          <1>     call dosCrit1Enter  ;Enter critical section 1
   855 000033DB 53                  <1>     push rbx
   856 000033DC 56                  <1>     push rsi
   857 000033DD 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
   858 000033E1 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   859 000033E7 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
   860                              <1>     ;rsi has DPB pointer here
   861                              <1>     ;rdi has the SFT pointer
   862 000033E9 55                  <1>     push rbp
   863 000033EA 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
   864 000033ED E8831C0000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
   865 000033F2 E8E6EAFFFF          <1>     call updateDirectoryEntryForFile
   866 000033F7 5D                  <1>     pop rbp
   867                              <1>     ;If CF is set, Fail was requested and ax has an error code
   868 000033F8 722F                <1>     jc .exit
   869 000033FA E892D7FFFF          <1>     call flushFile
   870 000033FF 7228                <1>     jc .exit    ;If something went wrong, exit
   871 00003401 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
   872 00003405 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
   873                              <1> .charClose:
   874                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
   875                              <1>     ;We now decrement handle count in SFT structure
   876 00003409 E868090000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
   877 0000340E 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
   878 00003411 7503                <1>     jnz .driverClose
   879 00003413 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
   880                              <1> .driverClose:
   881 00003416 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
   882                              <1>     ;and if the device is a disk device, cl will have the unit number
   883                              <1>     ;We first check if the driver supports oper/close requests
   884 00003417 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL   ;Support Close?
   885 0000341D 750A                <1>     jnz .exit  ;If not, immediately jump to exit, all is well
   886                              <1>     ;rsi has device driver ptr for device, make request
   887 0000341F E8F81B0000          <1>     call primReqCloseSetup  ;rbx gets header ptr, rsi has driver ptr
   888 00003424 E8A0180000          <1>     call goDriver   ;Make request
   889                              <1>     ;Don't check the status here, as we are simply informing the driver 
   890                              <1>     ; of an operation. Nothing should be able to go wrong. 
   891                              <1>     ;Functionally, an ignore if anything does go wrong.
   892                              <1> .exit:
   893 00003429 5E                  <1>     pop rsi
   894 0000342A 5B                  <1>     pop rbx
   895 0000342B E8ED200000          <1>     call dosCrit1Exit
   896                              <1>     return
    18                              <2> %%_ret:
    19 00003430 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   897                              <1> 
   898                              <1> readBytes:
   899                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
   900                              <1> ;Input: ecx = Number of bytes to read
   901                              <1> ;Output: ecx = Number of bytes read
   902                              <1> ;Number of bytes read 
   903                              <1> ;If CF=CY, return with error code in ax
   904 00003431 E813070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   905 00003436 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   906 0000343A 240F                <1>     and al, 0Fh ;Eliminate except access mode
   907 0000343C 3C01                <1>     cmp al, WriteAccess
   908 0000343E 7509                <1>     jne .readable
   909 00003440 B805000000          <1>     mov eax, errAccDen
   910 00003445 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
   911 00003447 F9                  <1>     stc
   912                              <1>     return
    18                              <2> %%_ret:
    19 00003448 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   913                              <1> .readable:
   914 00003449 E83C070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
   915 0000344E 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
   916 00003451 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   917 00003457 740A                <1>     jz .notRedir
   918 00003459 B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
   919 0000345E CD4F                <1>     int 4Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
   920                              <1>     return 
    18                              <2> %%_ret:
    19 00003460 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   921                              <1> .exitOk:
   922 00003461 F8                  <1>     clc
   923                              <1>     return 
    18                              <2> %%_ret:
    19 00003462 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   924                              <1> .notRedir:
   925 00003463 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   926 00003469 7510                <1>     jnz readCharDev
   927 0000346B E8A3200000          <1>     call dosCrit1Enter
   928 00003470 E898010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
   929 00003475 E8A3200000          <1>     call dosCrit1Exit
   930                              <1>     return 
    18                              <2> %%_ret:
    19 0000347A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   931                              <1> readCharDev:
   932                              <1> ;rdi points to sft for char dev to read
   933                              <1> ;ecx has the number of bytes to transfer
   934                              <1> ;Vars have been set up and DTA has the transfer address
   935                              <1> ;Returns in ecx, the actual bytes transferred
   936                              <1> ;If CF=CY, return with error code in ax
   937 0000347B C605(6CC30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
   938 00003482 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
   939 00003486 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
   940 0000348D F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
   941 00003490 0F8460020000        <1>     jz readExitOk    ;If it does, jump to exit as if EOF has been hit
   942 00003496 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
   943 00003499 7407                <1>     jz .notNul
   944                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
   945                              <1>     ;NUL never transfers bytes 
   946 0000349B 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
   947 0000349D E954020000          <1>     jmp readExitOk    ;Goto exit
   948                              <1> .notNul:
   949 000034A2 F6C320              <1>     test bl, charDevBinary
   950 000034A5 757F                <1>     jnz .binary
   951                              <1>     ;Here if the device is in ASCII mode
   952 000034A7 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
   953 000034AA 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
   954                              <1> .consoleInput:
   955                              <1>     ;Console input here
   956 000034B0 E8F5F0FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
   957                              <1>     ;Get current offset into buffer (if one exists)
   958 000034B5 488B35(23C00300)    <1>     mov rsi, qword [vConHdlOff]
   959 000034BC 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
   960 000034BF 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
   961 000034C1 803D(B0C20300)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
   962 000034C8 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
   963                              <1>     ;Else, reset the buffer
   964 000034CA 66C705(B0C20300)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
   964 000034D2 FF                  <1>
   965                              <1> .oldBuf:
   966                              <1> ;Preserve the dta and number of chars to tfr
   967 000034D3 51                  <1>     push rcx
   968 000034D4 57                  <1>     push rdi
   969 000034D5 488D15(B0C20300)    <1>     lea rdx, vConInBuf
   970 000034DC E8E9F0FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
   971 000034E1 5F                  <1>     pop rdi
   972 000034E2 59                  <1>     pop rcx
   973 000034E3 488D35(B2C20300)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
   974 000034EA 803E1A              <1>     cmp byte [rsi], EOF
   975 000034ED 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
   976 000034EF C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
   977 000034F2 B00A                <1>     mov al, LF
   978 000034F4 E863ECFFFF          <1>     call charOut_B.in   ;Echo CRLF
   979 000034F9 31F6                <1>     xor esi, esi    ;Set ZF = ZE
   980 000034FB EB18                <1>     jmp short .exit
   981                              <1> .tfrBuf:
   982 000034FD AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
   983 000034FE AA                  <1>     stosb
   984 000034FF 3C0D                <1>     cmp al, CR 
   985 00003501 7503                <1>     jne .noCRLF
   986 00003503 C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
   987                              <1> .noCRLF:
   988 00003506 3C0A                <1>     cmp al, LF  ;Compare if al is LF
   989 00003508 E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
   990 0000350A 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
   991                              <1>     ;This only applies if the reason for exiting the loop is al=LF
   992 0000350C E84BECFFFF          <1>     call charOut_B.in   ;Echo CRLF
   993 00003511 31F6                <1>     xor esi, esi
   994 00003513 0C01                <1>     or al, 1    ;Set ZF = NZ
   995                              <1> .exit:
   996 00003515 E8A8F0FFFF          <1>     call vConRetDriver
   997 0000351A 488935(23C00300)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
   998 00003521 E9D0010000          <1>     jmp readExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
   999                              <1> 
  1000                              <1> .binary:
  1001                              <1>     ;Setup registers for transfer
  1002 00003526 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1003 00003529 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1004                              <1>     ;ecx has the number of bytes to transfer directly
  1005 0000352C E83C1A0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1006 00003531 488B35(64C60300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1007 00003538 E88C170000          <1>     call goDriver   ;Make the request
  1008 0000353D 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1009 00003540 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1010 00003547 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1011 0000354D 7422                <1>     jz .binNoError
  1012                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
  1013 0000354F B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1014 00003551 E846160000          <1>     call charDevErr   ;ah = has part of the error 
  1015                              <1>     ;al now has the response
  1016 00003556 3C00                <1>     cmp al, critIgnore
  1017 00003558 7417                <1>     je .binNoError ;Simply proceed as normal
  1018 0000355A 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1019 0000355D 3C03                <1>     cmp al, critFail
  1020 0000355F 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1021                              <1>     ;Fallthrough here for fail!
  1022                              <1> .failExit:
  1023 00003561 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1024 00003568 31C9                <1>     xor ecx, ecx
  1025 0000356A B805000000          <1>     mov eax, errAccDen
  1026 0000356F F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1027                              <1>     return
    18                              <2> %%_ret:
    19 00003570 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1028                              <1> .binNoError:
  1029                              <1>     ;Get number of bytes transferred into 
  1030 00003571 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1031 00003577 F7D8                <1>     neg eax ;make it into -eax
  1032 00003579 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1033                              <1>     ;ecx now has bytes left to transfer
  1034 0000357D 50                  <1>     push rax    ;Save value on stack
  1035 0000357E 31C0                <1>     xor eax, eax ;Set ZF
  1036 00003580 FFC0                <1>     inc eax ;Clear ZF
  1037 00003582 58                  <1>     pop rax ;Get back the original value
  1038 00003583 E96E010000          <1>     jmp readExitOk    ;GoExit with ecx=Bytes left to read
  1039                              <1> .generalASCII:
  1040                              <1>     ;ecx has bytes to transfer here
  1041                              <1>     ;Setup registers for transfer
  1042 00003588 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1043 0000358B 51                  <1>     push rcx
  1044 0000358C B901000000          <1>     mov ecx, 1  ;Get one char
  1045 00003591 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1046 00003594 E8D4190000          <1>     call primReqReadSetup   ;Setup request
  1047 00003599 59                  <1>     pop rcx
  1048                              <1>     ;rbx now has request header ptr
  1049 0000359A 488B35(64C60300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1050                              <1> .asciiReadChar:
  1051 000035A1 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1052 000035A4 E885EFFFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1053 000035A9 E81B170000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1054 000035AE 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1055 000035B5 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1056 000035BB 741E                <1>     jz .asciiNoError
  1057 000035BD E8DA150000          <1>     call charDevErr    ;Call Int 44h
  1058                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1059 000035C2 C705(38C40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1059 000035CA 0000                <1>
  1060 000035CC 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1061 000035CF 3C03                <1>     cmp al, critFail
  1062 000035D1 748E                <1>     je .failExit
  1063 000035D3 3C01                <1>     cmp al, critRetry
  1064 000035D5 74CA                <1>     je .asciiReadChar
  1065                              <1>     ;Ignore here, pretend NULL CHAR was read
  1066 000035D7 30C0                <1>     xor al, al
  1067 000035D9 EB15                <1>     jmp short .asciiIgnoreEP
  1068                              <1> .asciiNoError:
  1069                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1070                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1071                              <1> ;Preserve RBX, RSI
  1072                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1073 000035DB 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1074 000035DE 813D(38C40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1074 000035E6 0000                <1>
  1075 000035E8 0F8508010000        <1>     jne readExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1076 000035EE 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1077                              <1> .asciiIgnoreEP:
  1078 000035F0 48FF05(30C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1079 000035F7 48FFC7              <1>     inc rdi ;Also advance register pointer
  1080 000035FA 3C1A                <1>     cmp al, EOF ;Was this char EOF?
  1081 000035FC 0F84F4000000        <1>     je readExitOk
  1082 00003602 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1083 00003604 E09B                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1084                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1085 00003606 FEC0                <1>     inc al  ;make ZF=NZ
  1086 00003608 E9E9000000          <1>     jmp readExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1087                              <1> 
  1088                              <1> readDiskFile:
  1089                              <1> ;rdi = Current SFT
  1090                              <1> ;rbp = WorkingDPB
  1091                              <1> ;ecx = Bytes to transfer
  1092 0000360D C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  1093 00003614 C605(5AC60300)00    <1>     mov byte [rwFlag], 0    ;Read operation
  1094                              <1>     ;We have the following vars setup:
  1095                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  1096                              <1>     ;currClustF
  1097                              <1>     ;Now convert currSectC to disk sector by using currClustF
  1098                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  1099 0000361B 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1100 0000361E 85D2                <1>     test edx, edx
  1101 00003620 0F84D0000000        <1>     jz readExitOk  ;Return with zero bytes transferred
  1102 00003626 8B15(A2C60300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  1103 0000362C 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  1104 0000362F 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  1105 00003631 0F84BF000000        <1>     jz readExitOk
  1106 00003637 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  1107 00003639 8B0D(CAC60300)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  1108 0000363F 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  1109 00003641 741E                <1>     jz .skipWalk
  1110                              <1> .goToCurrentCluster:
  1111 00003643 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  1112 00003648 0F84A8000000        <1>     je readExitOk ;Exit with no bytes transferred
  1113 0000364E 89C3                <1>     mov ebx, eax    ;Save eax as current cluster
  1114 00003650 E8DED7FFFF          <1>     call readFAT    ;Get in eax the next cluster
  1115 00003655 0F828C000000        <1>     jc .badExit   ;This can only return Fail
  1116 0000365B FFCA                <1>     dec edx ;Decrement counter
  1117 0000365D 75E4                <1>     jnz .goToCurrentCluster
  1118                              <1> ;Now we fall out with ebx = Current cluster
  1119 0000365F 89D8                <1>     mov eax, ebx    ;Get the current cluster in eax
  1120                              <1> .skipWalk:
  1121 00003661 E8F0D5FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  1122                              <1>     ;Now we add the offset to this
  1123 00003666 0FB61D(AEC60300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  1124 0000366D 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  1125 00003670 488905(AFC60300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  1126                              <1> ;Main
  1127 00003677 EB05                <1>     jmp short .mainSkipBufferSet
  1128                              <1> .mainRead:
  1129 00003679 E821D3FFFF          <1>     call setBufferReferenced
  1130                              <1> .mainSkipBufferSet:
  1131 0000367E E8EAD4FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuf var for sector in rax
  1132 00003683 7262                <1>     jc .badExit
  1133 00003685 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  1134 00003689 0FB71D(B7C60300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  1135 00003690 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  1136                              <1>     ;Now we read the smallest of the following from the sector buffer:
  1137                              <1>     ; 1) Sector size, 2) Bytes left in File, 3) Bytes left to read from Request
  1138 00003693 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  1139 00003696 2B4F1B              <1>     sub ecx, dword [rdi + sft.dCurntOff] ;Get bytes left to read in file in ecx
  1140 00003699 8B1D(CEC60300)      <1>     mov ebx, dword [tfrCntr]
  1141 0000369F 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  1142 000036A1 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  1143 000036A4 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  1144 000036A8 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  1145 000036AA 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  1146 000036AD 57                  <1>     push rdi
  1147 000036AE 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
  1148 000036B5 E85A060000          <1>     call readWriteBytesBinary
  1149 000036BA 48893D(79C30300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  1150 000036C1 5F                  <1>     pop rdi
  1151 000036C2 8B0D(CEC60300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  1152 000036C8 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  1153 000036CA 742A                <1>     jz readExitOk ;Exit if so!
  1154 000036CC E8D6D6FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  1155 000036D1 7214                <1>     jc .badExit
  1156 000036D3 7421                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  1157                              <1>     ;Else repeat
  1158                              <1>     ;currSectD has been updated, we now set currByteS = 0
  1159 000036D5 66C705(B7C60300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  1159 000036DD 00                  <1>
  1160 000036DE 488B05(AFC60300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  1161 000036E5 EB92                <1>     jmp short .mainRead
  1162                              <1> .badExit:
  1163                              <1>     ;When a disk error occurs within the bit where vars have changed,
  1164                              <1>     ; we need to update the SFT before returning
  1165 000036E7 8B0D(CEC60300)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  1166 000036ED 30C0                <1>     xor al, al  ;Set ZF flag
  1167 000036EF E802000000          <1>     call readExitOk   ;We call this
  1168 000036F4 F9                  <1>     stc ;All calls which end up here return Fail!
  1169 000036F5 C3                  <1>     ret
  1170                              <1> 
  1171                              <1> readExitOk:
  1172                              <1> ;Input: ecx = Number of bytes left to transfer!
  1173                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
  1174 000036F6 890D(CEC60300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  1175 000036FC 7509                <1>     jnz .skipbitClear
  1176 000036FE E846040000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
  1177                              <1>     ;The disk transfer must've flushed by now. 
  1178 00003703 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~(blokFileToFlush|charDevNoEOF) ;OR
  1179                              <1>     ;Next char dev read should give EOF.
  1180                              <1> .skipbitClear:  ;Or skip that entirely
  1181 00003707 E845040000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  1182                              <1>     return 
    18                              <2> %%_ret:
    19 0000370C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1183                              <1> 
  1184                              <1> writeBytes:
  1185                              <1> ;Writes the bytes from the user buffer
  1186                              <1> ;Input: ecx = Bytes to xfr
  1187                              <1> ;Returns number of bytes written in ecx
  1188 0000370D E837040000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1189 00003712 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1190 00003716 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1191 00003718 3C00                <1>     cmp al, ReadAccess
  1192 0000371A 7509                <1>     jne .writeable
  1193                              <1> .noWrite:
  1194 0000371C B805000000          <1>     mov eax, errAccDen
  1195 00003721 31C9                <1>     xor ecx, ecx
  1196 00003723 F9                  <1>     stc
  1197 00003724 C3                  <1>     ret
  1198                              <1> .writeable:
  1199 00003725 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1200 0000372B 7406                <1>     jz .skipAttribCheck ;FCB files don't check file attributes
  1201 0000372D 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  1202 00003731 74E9                <1>     je .noWrite ;If the file is read only, RIP
  1203                              <1> .skipAttribCheck:
  1204 00003733 E852040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  1205 00003738 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1206 0000373E 7408                <1>     jz .notRedir
  1207 00003740 B809110000          <1>     mov eax, 1109h  ;Write to redir
  1208 00003745 CD4F                <1>     int 4Fh
  1209                              <1>     return
    18                              <2> %%_ret:
    19 00003747 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1210                              <1> .notRedir:
  1211 00003748 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1212 0000374E 7510                <1>     jnz writeCharDev
  1213 00003750 E8BE1D0000          <1>     call dosCrit1Enter
  1214 00003755 E84C010000          <1>     call writeDiskFile
  1215 0000375A E8BE1D0000          <1>     call dosCrit1Exit
  1216                              <1>     return
    18                              <2> %%_ret:
    19 0000375F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1217                              <1> writeCharDev:
  1218 00003760 C605(6CC30300)04    <1>     mov byte [errorLocus], eLocChr
  1219                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  1220 00003767 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  1221 0000376D 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  1222                              <1>     ;If ecx = 0, we exit
  1223 00003771 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  1224 00003773 85C9                <1>     test ecx, ecx
  1225 00003775 0F84AF030000        <1>     jz writeExit
  1226 0000377B 488B1D(79C30300)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  1227 00003782 4889DF              <1>     mov rdi, rbx
  1228 00003785 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  1229 00003787 A820                <1>     test al, charDevBinary
  1230 00003789 744A                <1>     jz .asciiDev
  1231                              <1> ;Write binary transfer here
  1232                              <1> .binaryLp:
  1233 0000378B 31C0                <1>     xor eax, eax
  1234 0000378D 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1235 00003790 E8CD170000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1236 00003795 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
  1237 0000379C E824150000          <1>     call goDriverChar
  1238 000037A1 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  1239 000037A4 B487                <1>     mov ah, critCharDev | critData | critWrite
  1240 000037A6 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1241 000037AD F7C700800000        <1>     test edi, drvErrStatus
  1242 000037B3 7415                <1>     jz .binXfrOk
  1243 000037B5 E8E2130000          <1>     call charDevErr ;Invoke Int 44h
  1244 000037BA 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  1245 000037BD 3C00                <1>     cmp al, critIgnore
  1246 000037BF 7409                <1>     je .binXfrOk
  1247 000037C1 3C01                <1>     cmp al, critRetry
  1248 000037C3 74C6                <1>     je .binaryLp
  1249 000037C5 E9D5000000          <1>     jmp .exitFail
  1250                              <1> .binXfrOk:
  1251 000037CA 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  1252 000037D0 E955030000          <1>     jmp writeExit   ;Exit oki with # bytes xfrd in eax
  1253                              <1> .asciiDev:
  1254 000037D5 A802                <1>     test al, charDevConOut
  1255 000037D7 0F859E000000        <1>     jnz .conDev
  1256 000037DD A804                <1>     test al, charDevNulDev
  1257 000037DF 0F858F000000        <1>     jnz .nulDev
  1258                              <1>     ;Here we transfer for a generic character device in ascii mode
  1259 000037E5 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  1260 000037E7 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  1261 000037EA 0F843A030000        <1>     je writeExit
  1262 000037F0 51                  <1>     push rcx
  1263 000037F1 B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  1264 000037F6 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1265 000037F9 E864170000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1266 000037FE 59                  <1>     pop rcx
  1267 000037FF 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
  1268 00003806 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  1269                              <1> .asciiLp:
  1270 0000380A E81FEDFFFF          <1>     call checkBreak
  1271 0000380F E8B5140000          <1>     call goDriver
  1272 00003814 57                  <1>     push rdi
  1273 00003815 B487                <1>     mov ah, critCharDev | critData | critWrite
  1274 00003817 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1275 0000381E F7C700800000        <1>     test edi, drvErrStatus
  1276 00003824 741D                <1>     jz .asciiNoError
  1277 00003826 E871130000          <1>     call charDevErr ;Invoke Int 44h
  1278 0000382B 5F                  <1>     pop rdi
  1279 0000382C C705(38C40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  1279 00003834 0000                <1>
  1280 00003836 3C01                <1>     cmp al, critRetry
  1281 00003838 74D0                <1>     je .asciiLp
  1282 0000383A 3C00                <1>     cmp al, critIgnore
  1283 0000383C 7412                <1>     je .ignoreEp
  1284 0000383E E95C000000          <1>     jmp .exitFail
  1285                              <1> .asciiNoError:
  1286 00003843 5F                  <1>     pop rdi
  1287 00003844 813D(38C40300)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  1287 0000384C 0000                <1>
  1288 0000384E 741D                <1>     je .bytesXfrdOk
  1289                              <1> .ignoreEp:
  1290 00003850 FFC2                <1>     inc edx ;One more char has been xfrd
  1291 00003852 FF05(30C40300)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  1292 00003858 48FFC7              <1>     inc rdi ;And our copy... 
  1293 0000385B 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  1294 0000385E 740D                <1>     je .bytesXfrdOk
  1295 00003860 66C705(25C40300)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  1295 00003868 00                  <1>
  1296 00003869 FFC9                <1>     dec ecx
  1297 0000386B 759D                <1>     jnz .asciiLp
  1298                              <1> .bytesXfrdOk:
  1299 0000386D 89D0                <1>     mov eax, edx
  1300 0000386F E9B6020000          <1>     jmp writeExit
  1301                              <1> .nulDev:
  1302 00003874 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  1303 00003876 E9AF020000          <1>     jmp writeExit
  1304                              <1> .conDev:
  1305 0000387B E82AEDFFFF          <1>     call vConSwapDriver
  1306 00003880 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  1307 00003883 51                  <1>     push rcx
  1308                              <1> .conDevLp:
  1309 00003884 AC                  <1>     lodsb
  1310 00003885 3C1A                <1>     cmp al, EOF
  1311 00003887 7409                <1>     je .conDevExit
  1312 00003889 E8CEE8FFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  1313 0000388E FFC9                <1>     dec ecx
  1314 00003890 75F2                <1>     jnz .conDevLp
  1315                              <1> .conDevExit:
  1316 00003892 58                  <1>     pop rax ;Get initial ecx back into eax
  1317 00003893 29C8                <1>     sub eax, ecx
  1318 00003895 E828EDFFFF          <1>     call vConRetDriver
  1319 0000389A E98B020000          <1>     jmp writeExit   ;Input: eax = bytes xfrd
  1320                              <1> .exitFail:
  1321 0000389F B805000000          <1>     mov eax, errAccDen
  1322 000038A4 F9                  <1>     stc
  1323                              <1>     return
    18                              <2> %%_ret:
    19 000038A5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1324                              <1> writeDiskFile:
  1325                              <1>     ;rdi has SFT ptr
  1326 000038A6 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk 
  1327 000038AD C605(5AC60300)FF    <1>     mov byte [rwFlag], -1    ;Write operation
  1328 000038B4 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  1329 000038BA 0F8547020000        <1>     jnz .badExit
  1330 000038C0 31DB                <1>     xor ebx, ebx
  1331 000038C2 891D(C6C60300)      <1>     mov dword [bytesAppend], ebx ;Reset the appending counter
  1332 000038C8 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  1333                              <1>     ;If the start cluster is 0, we create a new cluster chain
  1334 000038CB 85C0                <1>     test eax, eax
  1335 000038CD 7520                <1>     jnz .notStart
  1336 000038CF E8FCD3FFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  1337 000038D4 0F8224020000        <1>     jc .exitPrepHardErr
  1338 000038DA 3DFFFFFFFF          <1>     cmp eax, -1
  1339 000038DF 0F8429020000        <1>     je .exitPrep
  1340                              <1>     ;Now eax has the first cluster of chain
  1341 000038E5 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  1342 000038E8 C605(C5C60300)FF    <1>     mov byte [fileGrowing], -1  ;Set to true as this only occurs for new files!
  1343                              <1> .notStart:
  1344 000038EF E88FD3FFFF          <1>     call getLastClusterInChain  ;to get the current last cluster in the file
  1345 000038F4 8905(C1C60300)      <1>     mov dword [lastClustA], eax
  1346 000038FA E89DD3FFFF          <1>     call getNumberOfClustersInChain ;Gets number of clusters
  1347 000038FF FFC8                <1>     dec eax ;Turn into an offset of clusters in file
  1348 00003901 8905(BDC60300)      <1>     mov dword [lastClust], eax
  1349                              <1>     ;Get the disk cluster of the file (currClustD)
  1350 00003907 8B0D(A2C60300)      <1>     mov ecx, dword [currClustF]
  1351 0000390D 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]
  1352 00003910 E8A2D3FFFF          <1>     call getClusterInChain  ;Returns in eax the disk cluster value
  1353 00003915 0F82EC010000        <1>     jc .badExit
  1354                              <1>     ;ecx has the number of clusters we need to extend the allocation by.
  1355 0000391B 67E36A              <1>     jecxz .skipExtension
  1356 0000391E E836D4FFFF          <1>     call findFreeClusterData    ;This updates the dpb to have free cluster data
  1357 00003923 0F82DE010000        <1>     jc .badExit
  1358 00003929 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters
  1359 0000392E 0F84F4010000        <1>     je .noByteExit
  1360 00003934 394D31              <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], ecx
  1361 00003937 0F82EB010000        <1>     jb .noByteExit    ;If dNumberOfFreeClusters < ecx, exit
  1362                              <1>     ;Enough to extend by ecx amount
  1363 0000393D 8B1D(C1C60300)      <1>     mov ebx, dword [lastClustA] ;Get the last disk cluster of the file
  1364 00003943 E8A9D3FFFF          <1>     call allocateClusters   ;Extend by ecx clusters
  1365 00003948 0F82B9010000        <1>     jc .badExit
  1366 0000394E 010D(BDC60300)      <1>     add dword [lastClust], ecx  
  1367 00003954 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]
  1368 00003957 8B0D(BDC60300)      <1>     mov ecx, dword [lastClust]
  1369 0000395D E855D3FFFF          <1>     call getClusterInChain
  1370 00003962 0F829F010000        <1>     jc .badExit
  1371                              <1>     ;eax has the last cluster on disk
  1372 00003968 8905(C1C60300)      <1>     mov dword [lastClustA], eax
  1373                              <1>     ;Now we must extend the filesize in the SFT
  1374 0000396E 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  1375 00003971 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  1376 00003974 31C0                <1>     xor eax, eax
  1377 00003976 8505(CAC60300)      <1>     test dword [tfrLen], eax
  1378 0000397C 0F84A8010000        <1>     jz writeExit    ;If we were extending the file, we are done
  1379 00003982 8B05(C1C60300)      <1>     mov eax, dword [lastClustA] ;Get the absolute last cluster
  1380                              <1> .skipExtension:
  1381 00003988 8905(A6C60300)      <1>     mov dword [currClustD], eax ;Now eax has the currClustD value
  1382                              <1>     ;Get the disk sector too
  1383 0000398E E8C3D2FFFF          <1>     call getStartSectorOfCluster
  1384 00003993 0FB61D(AEC60300)    <1>     movzx ebx, byte [currSectC] ;Add the in cluster sector offset
  1385 0000399A 01D8                <1>     add eax, ebx    ;Add the offset to eax
  1386 0000399C 8905(AFC60300)      <1>     mov dword [currSectD], eax 
  1387                              <1>     ;If tfrLen = 0, we truncate to current file pointer position, rounding up
  1388                              <1>     ; clusterwise!
  1389 000039A2 8B0D(CAC60300)      <1>     mov ecx, dword [tfrLen] ;Get the number of bytes to transfer in ecx
  1390 000039A8 85C9                <1>     test ecx, ecx
  1391 000039AA 0F8438010000        <1>     jz .truncate
  1392                              <1>     ;Here we write proper data to the disk file
  1393                              <1> .writeLoop:
  1394 000039B0 0FB705(B7C60300)    <1>     movzx eax, word [currByteS] ;Get bytewise sector offset
  1395 000039B7 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
  1396 000039BB 29C1                <1>     sub ecx, eax    ;Get bytes left to fill this sector in ecx
  1397 000039BD 8B05(CEC60300)      <1>     mov eax, dword [tfrCntr] ;Get # bytes left to transfer
  1398 000039C3 6639C1              <1>     cmp cx, ax  ;Is # of bytes leftto tfr less than bytes left in sector?
  1399 000039C6 660F47C8            <1>     cmova cx, ax    ;If yes, swap
  1400 000039CA 66890D(A0C60300)    <1>     mov word [sectTfr], cx  ;Save this value in the var
  1401 000039D1 0FB605(AEC60300)    <1>     movzx eax, byte [currSectC] ;Get sector offset in cluster
  1402 000039D8 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
  1403 000039DB 0F8689000000        <1>     jbe .stayInCluster
  1404                              <1>     ;Get next Cluster information here
  1405 000039E1 8B05(A6C60300)      <1>     mov eax, dword [currClustD] ;Get disk cluster
  1406 000039E7 3B05(C1C60300)      <1>     cmp eax, dword [lastClustA] ;Is this the last sector?
  1407 000039ED 7543                <1>     jne .nextCluster
  1408                              <1>     ;Growing the file
  1409 000039EF C605(C5C60300)FF    <1>     mov byte [fileGrowing], -1  ;Set to true
  1410 000039F6 B901000000          <1>     mov ecx, 1  ;Request 1 cluster
  1411 000039FB 89C3                <1>     mov ebx, eax    ;Save the last cluster number in eax
  1412 000039FD E8EFD2FFFF          <1>     call allocateClusters
  1413 00003A02 0F82F6000000        <1>     jc .exitPrepHardErr
  1414 00003A08 3DFFFFFFFF          <1>     cmp eax, -1 ;If eax = -1 then disk full condition
  1415 00003A0D 0F82FB000000        <1>     jc .exitPrep
  1416 00003A13 89D8                <1>     mov eax, ebx    ;ebx is preserved
  1417 00003A15 E819D4FFFF          <1>     call readFAT    ;Goto next cluster now, return in eax next cluster
  1418 00003A1A 0F82DE000000        <1>     jc .exitPrepHardErr
  1419 00003A20 FF05(BDC60300)      <1>     inc dword [lastClust]
  1420 00003A26 8905(C1C60300)      <1>     mov dword [lastClustA], eax ;Now eax is the new last cluster
  1421 00003A2C 8B05(A6C60300)      <1>     mov eax, dword [currClustD] ;Get the old last cluster
  1422                              <1>     ;eax now has the old last sector
  1423                              <1> .nextCluster:
  1424                              <1>     ;eax has old disk cluster information
  1425 00003A32 E8FCD3FFFF          <1>     call readFAT    ;Get the next disk cluster in eax
  1426 00003A37 0F82C1000000        <1>     jc .exitPrepHardErr
  1427 00003A3D 8905(A6C60300)      <1>     mov dword [currClustD], eax
  1428 00003A43 FF05(A2C60300)      <1>     inc dword [currClustF]
  1429 00003A49 E808D2FFFF          <1>     call getStartSectorOfCluster
  1430 00003A4E 488905(AFC60300)    <1>     mov qword [currSectD], rax
  1431 00003A55 FF05(AAC60300)      <1>     inc dword [currSectF]
  1432 00003A5B 31C0                <1>     xor eax, eax
  1433 00003A5D 8805(AEC60300)      <1>     mov byte [currSectC], al  ;Sector zero in cluster
  1434 00003A63 668905(B7C60300)    <1>     mov word [currByteS], ax  ;And byte zero of this sector in the cluster
  1435                              <1> .stayInCluster:
  1436 00003A6A 488B05(AFC60300)    <1>     mov rax, qword [currSectD]  ;Get disk sector
  1437 00003A71 E8F7D0FFFF          <1>     call getBufForData
  1438 00003A76 0F8282000000        <1>     jc .exitPrepHardErr
  1439                              <1>     ;rbx points to disk buffer header
  1440 00003A7C 0FB705(B7C60300)    <1>     movzx eax, word [currByteS] 
  1441 00003A83 488D5C0330          <1>     lea rbx, qword [rbx + bufferHdr.dataarea + rax] ;In sector offset
  1442                              <1>     ;rbx points to the current byte to write at
  1443 00003A88 57                  <1>     push rdi
  1444 00003A89 56                  <1>     push rsi
  1445 00003A8A 4889DF              <1>     mov rdi, rbx    ;The sector is the destination of the write
  1446 00003A8D 488B35(79C30300)    <1>     mov rsi, qword [currentDTA] ;Get the user buffer as the source
  1447 00003A94 0FB70D(A0C60300)    <1>     movzx ecx, word [sectTfr]   ;Get # of bytes to write
  1448 00003A9B F3A4                <1>     rep movsb   ;Move over cx number of bytes
  1449 00003A9D 488935(79C30300)    <1>     mov qword [currentDTA], rsi ;Update currentDTA
  1450 00003AA4 5E                  <1>     pop rsi
  1451 00003AA5 5F                  <1>     pop rdi
  1452 00003AA6 E8F4CEFFFF          <1>     call setBufferReferenced
  1453 00003AAB E8E0CEFFFF          <1>     call setBufferDirty
  1454 00003AB0 0FB70D(A0C60300)    <1>     movzx ecx, word [sectTfr]
  1455 00003AB7 F605(C5C60300)FF    <1>     test byte [fileGrowing], -1
  1456 00003ABE 7406                <1>     jz .notGrowing
  1457 00003AC0 010D(C6C60300)      <1>     add dword [bytesAppend], ecx
  1458                              <1> .notGrowing:
  1459 00003AC6 290D(CEC60300)      <1>     sub dword [tfrCntr], ecx
  1460 00003ACC 7440                <1>     jz .exitPrep
  1461 00003ACE 31C0                <1>     xor eax, eax
  1462 00003AD0 668905(B7C60300)    <1>     mov word [currByteS], ax    ;Start of the next sector
  1463 00003AD7 010D(B9C60300)      <1>     add dword [currByteF], ecx  ;Goto the next sector in the file
  1464 00003ADD FE05(AEC60300)      <1>     inc byte [currSectC]    ;Increment sector in cluster now
  1465 00003AE3 E9C8FEFFFF          <1>     jmp .writeLoop
  1466                              <1> 
  1467                              <1> .truncate:
  1468                              <1> ;We must free the chain from currClustD
  1469 00003AE8 8B05(A6C60300)      <1>     mov eax, dword [currClustD]
  1470 00003AEE E81BD3FFFF          <1>     call truncateFAT    ;Truncate from the current cluster
  1471 00003AF3 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  1472 00003AF6 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  1473 00003AF9 E92A000000          <1>     jmp .noByteExit ;Exit ok!
  1474                              <1> .exitPrepHardErr:
  1475 00003AFE 50                  <1>     push rax    ;Save error code
  1476 00003AFF E80A000000          <1>     call .exitPrep
  1477 00003B04 58                  <1>     pop rax
  1478                              <1> .badExitHard:    ;AL has error code already
  1479 00003B05 F9                  <1>     stc
  1480                              <1>     return
    18                              <2> %%_ret:
    19 00003B06 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1481                              <1> .badExit:
  1482                              <1> ;Might need to do some weird stuff later. Leave for now
  1483 00003B07 B805000000          <1>     mov eax, errAccDen
  1484 00003B0C EBF7                <1>     jmp short .badExitHard
  1485                              <1> 
  1486                              <1> .exitPrep:
  1487 00003B0E 8B0D(C6C60300)      <1>     mov ecx, dword [bytesAppend]
  1488 00003B14 014F17              <1>     add dword [rdi + sft.dFileSize], ecx    ;Add these bytes to the filesize
  1489 00003B17 8B05(CAC60300)      <1>     mov eax, dword [tfrLen]
  1490 00003B1D 2B05(CEC60300)      <1>     sub eax, dword [tfrCntr]    ;Subtract by bytes left to tfr
  1491 00003B23 E902000000          <1>     jmp writeExit
  1492                              <1> 
  1493                              <1> .noByteExit:
  1494 00003B28 31C0                <1>     xor eax, eax
  1495                              <1> writeExit:
  1496                              <1> ;Advances the bytes on the file pointer
  1497                              <1> ;eax = Number of bytes transferred
  1498 00003B2A 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1499 00003B31 89C1                <1>     mov ecx, eax
  1500 00003B33 E801000000          <1>     call .advPtr
  1501                              <1>     return  ;Return to caller, ecx = # bytes xfrd
    18                              <2> %%_ret:
    19 00003B38 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1502                              <1> .advPtr:
  1503 00003B39 67E303              <1>     jecxz .exit
  1504 00003B3C 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx
  1505                              <1> .exit:
  1506 00003B3F F8                  <1>     clc
  1507                              <1>     return
    18                              <2> %%_ret:
    19 00003B40 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1508                              <1> 
  1509                              <1> ;-----------------------------------:
  1510                              <1> ;        File Handle routines       :
  1511                              <1> ;-----------------------------------:
  1512                              <1> 
  1513                              <1> setCurrentSFT:
  1514                              <1> ;Set the pointer in rdi as current SFT 
  1515 00003B41 48893D(84C60300)    <1>     mov qword [currentSFT], rdi
  1516                              <1>     return 
    18                              <2> %%_ret:
    19 00003B48 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1517                              <1> getCurrentSFT:
  1518                              <1> ;Get the current SFT pointer in rdi
  1519 00003B49 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1520                              <1>     return 
    18                              <2> %%_ret:
    19 00003B50 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1521                              <1> updateCurrentSFT:
  1522                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  1523                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  1524 00003B51 57                  <1>     push rdi
  1525 00003B52 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1526 00003B59 8B0D(CAC60300)      <1>     mov ecx, dword [tfrLen]     ;Get bytes to transfer
  1527 00003B5F 2B0D(CEC60300)      <1>     sub ecx, dword [tfrCntr]    ;Subtract bytes left to transfer
  1528                              <1>     ;ecx has bytes transferred
  1529 00003B65 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  1530 00003B6B 751A                <1>     jnz .exit
  1531 00003B6D 50                  <1>     push rax
  1532 00003B6E 8B05(A6C60300)      <1>     mov eax, dword [currClustD]
  1533 00003B74 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  1534 00003B77 8B05(A2C60300)      <1>     mov eax, dword [currClustF]
  1535 00003B7D 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  1536 00003B80 58                  <1>     pop rax
  1537 00003B81 67E303              <1>     jecxz .exit ;Skip this if ecx = 0
  1538 00003B84 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  1539                              <1> .exit:
  1540 00003B87 5F                  <1>     pop rdi
  1541 00003B88 F8                  <1>     clc
  1542                              <1>     return 
    18                              <2> %%_ret:
    19 00003B89 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1543                              <1> setupVarsForTransfer:
  1544                              <1> ;Computes the actual bytes to be transferred and 
  1545                              <1> ; sets up internal variables for the transfer. 
  1546                              <1> ;Works for both reading and writing
  1547                              <1> ;Input: ecx = User desired Bytes to transfer
  1548                              <1> ;       rdi = SFT pointer for the file
  1549                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  1550                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  1551                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  1552                              <1> ;
  1553                              <1> ;Note: Does not account for a FULL disk. When writing,
  1554                              <1> ; if the disk will get full as a result of the write,
  1555                              <1> ; stop at the last byte before the transfer. If the 
  1556                              <1> ; file pointer is past the last free byte, write 0
  1557 00003B8A 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  1558 00003B8E 488935(64C60300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  1559 00003B95 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  1560 00003B98 8905(B9C60300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  1561 00003B9E 890D(CAC60300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  1562 00003BA4 890D(CEC60300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  1563 00003BAA 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  1564 00003BB0 7402                <1>     jz setupVarsForDiskTransfer
  1565 00003BB2 F8                  <1>     clc
  1566                              <1>     return
    18                              <2> %%_ret:
    19 00003BB3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1567                              <1> setupVarsForDiskTransfer:
  1568                              <1> ;Extension of the above, but for Disk files only
  1569                              <1> ;Input: ecx = User desired Bytes to transfer
  1570                              <1> ;       rdi = SFT pointer for the file
  1571                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred, if it is possible
  1572                              <1> ;        CF=CY: Error exit
  1573 00003BB4 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  1574 00003BB7 8905(B9C60300)      <1>     mov dword [currByteF], eax
  1575 00003BBD 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  1576                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  1577 00003BC1 48892D(64C60300)    <1>     mov qword [workingDPB], rbp
  1578 00003BC8 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  1579 00003BCB 881D(63C60300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  1580 00003BD1 8B05(B9C60300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  1581 00003BD7 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  1582 00003BDB 31D2                <1>     xor edx, edx    ;Zero rdx
  1583 00003BDD F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  1584                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  1585                              <1>     ;edx has the offset into that sector
  1586 00003BDF 8905(AAC60300)      <1>     mov dword [currSectF], eax
  1587 00003BE5 668915(B7C60300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  1588 00003BEC 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  1589 00003BEE 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  1590 00003BF1 8805(AEC60300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  1591 00003BF7 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  1592 00003BF9 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  1593 00003BFC D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  1594 00003BFE 8915(A2C60300)      <1>     mov dword [currClustF], edx ;Save in var
  1595 00003C04 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  1596                              <1> .exit:
  1597 00003C06 F8                  <1>     clc
  1598                              <1>     return 
    18                              <2> %%_ret:
    19 00003C07 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1599                              <1> findFreeSFT:
  1600                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  1601                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  1602                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  1603                              <1> ;        CF=CY => eax = errNhl, error exit
  1604 00003C08 31DB                <1>     xor ebx, ebx
  1605                              <1> .mainLp:
  1606 00003C0A 53                  <1>     push rbx    ;Save the sft ndx
  1607 00003C0B E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  1608 00003C10 5B                  <1>     pop rbx
  1609 00003C11 7307                <1>     jnc .sftExists
  1610 00003C13 B804000000          <1>     mov eax, errNhl
  1611 00003C18 F9                  <1>     stc
  1612                              <1>     return
    18                              <2> %%_ret:
    19 00003C19 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1613                              <1> .sftExists:
  1614 00003C1A 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  1615 00003C1F 7427                <1>     je .sftFound
  1616 00003C21 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  1617 00003C26 751C                <1>     jne .gotoNextNdx
  1618                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  1619 00003C28 53                  <1>     push rbx
  1620 00003C29 488B1D(9DC30300)    <1>     mov rbx, qword [serverPSP]
  1621 00003C30 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  1622 00003C34 750B                <1>     jne .netGoToNextNdx
  1623 00003C36 0FB71D(A5C30300)    <1>     movzx ebx, word [machineNum]
  1624 00003C3D 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  1625                              <1> .netGoToNextNdx:
  1626 00003C41 5B                  <1>     pop rbx
  1627 00003C42 7404                <1>     je .sftFound
  1628                              <1> .gotoNextNdx:
  1629 00003C44 FFC3                <1>     inc ebx
  1630 00003C46 EBC2                <1>     jmp short .mainLp
  1631                              <1> .sftFound:
  1632 00003C48 53                  <1>     push rbx
  1633 00003C49 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  1634 00003C4E 488B1D(9DC30300)    <1>     mov rbx, qword [serverPSP]
  1635 00003C55 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  1636 00003C59 0FB71D(A5C30300)    <1>     movzx ebx, word [machineNum]
  1637 00003C60 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  1638 00003C64 5B                  <1>     pop rbx
  1639 00003C65 F8                  <1>     clc
  1640                              <1>     return
    18                              <2> %%_ret:
    19 00003C66 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1641                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216
  1642                              <1> ;Return a pointer to the SFT entry in rdi
  1643                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  1644                              <1> ;Output: rdi = SFT pointer
  1645 00003C67 488B3D(3BC00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  1646                              <1> .walk:
  1647 00003C6E 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  1648 00003C72 7212                <1>     jb .thisTable
  1649 00003C74 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  1650 00003C78 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  1651 00003C7B 4881FFFFFFFFFF      <1>     cmp rdi, -1
  1652 00003C82 75EA                <1>     jne .walk
  1653 00003C84 F9                  <1>     stc
  1654                              <1>     return
    18                              <2> %%_ret:
    19 00003C85 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1655                              <1> .thisTable:
  1656 00003C86 50                  <1>     push rax
  1657 00003C87 52                  <1>     push rdx
  1658 00003C88 B84F000000          <1>     mov eax, sft_size
  1659 00003C8D F7E3                <1>     mul ebx
  1660 00003C8F 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  1661 00003C92 5A                  <1>     pop rdx
  1662 00003C93 58                  <1>     pop rax
  1663 00003C94 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  1664                              <1>     return
    18                              <2> %%_ret:
    19 00003C9B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1665                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
  1666                              <1> ;Return a zero extended value in rdi for the SFT entry
  1667                              <1> ;Input: bx = JFT handle (we zero extend)
  1668                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
  1669                              <1> ;        CF=CY => al = Error code, Fail
  1670 00003C9C 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  1671 00003C9F 663B1D(97C00300)    <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
  1672 00003CA6 7204                <1>     jb .ok
  1673 00003CA8 B006                <1>     mov al, errBadHdl
  1674 00003CAA F9                  <1>     stc
  1675                              <1>     return
    18                              <2> %%_ret:
    19 00003CAB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1676                              <1> .ok:
  1677 00003CAC 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP]
  1678 00003CB3 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  1679 00003CB8 F8                  <1>     clc
  1680                              <1>     return
    18                              <2> %%_ret:
    19 00003CB9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1681                              <1> findFreeJFTEntry:
  1682                              <1> ;Finds a free JFT entry in the currentPSP.
  1683                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  1684                              <1> ;        CF=CY => al=errNhl
  1685 00003CBA 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  1686                              <1> .searchLp:
  1687 00003CBC E8DBFFFFFF          <1>     call getJFTPtr
  1688 00003CC1 7209                <1>     jc .badExit
  1689 00003CC3 803FFF              <1>     cmp byte [rdi], -1
  1690                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003CC6 74F1                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1691 00003CC8 FFC3                <1>     inc ebx
  1692 00003CCA EBF0                <1>     jmp short .searchLp
  1693                              <1> .badExit:
  1694 00003CCC B004                <1>     mov al, errNhl
  1695 00003CCE F9                  <1>     stc
  1696                              <1>     return
    18                              <2> %%_ret:
    19 00003CCF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1697                              <1> getSFTPtr:
  1698                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  1699                              <1> ;Input: bx = JFT handle
  1700                              <1> ;Output: CF=NC: rdi = SFT pointer
  1701                              <1> ;        CF=CY: Error, ax=Error code
  1702 00003CD0 E815000000          <1>     call derefSFTPtr
  1703                              <1>     retc    ;Return if carry
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003CD5 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1704 00003CD7 50                  <1>     push rax
  1705 00003CD8 0FB705(A5C30300)    <1>     movzx eax, word [machineNum]
  1706 00003CDF 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  1707 00003CE3 58                  <1>     pop rax
  1708                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003CE4 74E9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1709 00003CE6 B006                <1>     mov al, errBadHdl   ;Error code
  1710 00003CE8 F9                  <1>     stc         ;Reset CF
  1711                              <1>     return
    18                              <2> %%_ret:
    19 00003CE9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1712                              <1> 
  1713                              <1> derefSFTPtr:
  1714                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  1715                              <1> ;Input: bx = File handle (gets zero extended)
  1716                              <1> ;Output: CF=NC: rdi = SFT pointer
  1717                              <1> ;        CF=CY: Error, ax=Error code
  1718 00003CEA E8ADFFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  1719 00003CEF 7205                <1>     jb .fail
  1720 00003CF1 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  1721 00003CF4 7504                <1>     jne .ok
  1722                              <1> .fail:
  1723 00003CF6 B006                <1>     mov al, errBadHdl
  1724 00003CF8 F9                  <1>     stc
  1725                              <1>     return
    18                              <2> %%_ret:
    19 00003CF9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1726                              <1> .ok:
  1727 00003CFA 53                  <1>     push rbx    ;Preserve the JFT handle
  1728 00003CFB 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  1729 00003CFE E864FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  1730 00003D03 5B                  <1>     pop rbx 
  1731                              <1>     return
    18                              <2> %%_ret:
    19 00003D04 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1732                              <1> 
  1733                              <1> getBytesTransferred:
  1734 00003D05 8B0D(CEC60300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  1735 00003D0B F7D9                <1>     neg ecx ;Multiply by -1
  1736 00003D0D 030D(CAC60300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  1737                              <1>     return ;Return bytes transferred in ecx
    18                              <2> %%_ret:
    19 00003D13 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1738                              <1> 
  1739                              <1> readWriteBytesBinary:
  1740                              <1> ;Input: ecx = number of bytes to read in Binary mode
  1741                              <1> ;       rdi = Points to where in caller buffer to read/write bytes
  1742                              <1> ;       rsi = Points to where in DOS buffer to write/read pointer
  1743                              <1> ;xchg rdi and rsi if rwFlag is set (i.e. a write operation)
  1744                              <1> ;Preserve rcx so we know how many bytes transferred
  1745                              <1> ;Update the currByteA variable
  1746                              <1> ;Returns (rsi and rdi) + (ecx on entry)
  1747 00003D14 51                  <1>     push rcx
  1748 00003D15 F605(5AC60300)FF    <1>     test byte [rwFlag], -1   ;Is this a write operaiton
  1749 00003D1C 7403                <1>     jz .noSwap
  1750 00003D1E 4887FE              <1>     xchg rdi, rsi
  1751                              <1> .noSwap:
  1752 00003D21 F3A4                <1>     rep movsb
  1753 00003D23 59                  <1>     pop rcx
  1754 00003D24 010D(B9C60300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  1755 00003D2A 290D(CEC60300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  1756                              <1>     return
    18                              <2> %%_ret:
    19 00003D30 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1757                              <1> 
  1758                              <1> findFreeJFTSpace:
  1759                              <1> ;Input: [currentPSP] = Task whose PSP we will look through
  1760                              <1> ;If there are no free spaces, then we return with al = errNhl and CF=CY
  1761                              <1> ;Else, a pointer to the free space in rsi and al = -1
  1762 00003D31 51                  <1>     push rcx
  1763 00003D32 488B35(81C30300)    <1>     mov rsi, qword [currentPSP]
  1764 00003D39 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]
  1765 00003D40 488D762A            <1>     lea rsi, qword [rsi + psp.jobFileTbl]   ;Point to start of table
  1766                              <1> .search:
  1767 00003D44 AC                  <1>     lodsb
  1768 00003D45 3CFF                <1>     cmp al, -1
  1769 00003D47 7407                <1>     je .exit
  1770 00003D49 FFC9                <1>     dec ecx
  1771 00003D4B 75F7                <1>     jnz .search
  1772 00003D4D B004                <1>     mov al, errNhl  ;No free handles buddy, sorry
  1773 00003D4F F9                  <1>     stc ;Set error bit
  1774                              <1> .exit:
  1775 00003D50 59                  <1>     pop rcx
  1776                              <1>     return
    18                              <2> %%_ret:
    19 00003D51 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1777                              <1> 
  1778                              <1> getSFTndxInheritable:
  1779                              <1> ;Given a SFTndx this function will verify if it is inheritable
  1780                              <1> ;Input: ebx = SFTndx (word)
  1781                              <1> ;Output: 
  1782                              <1> ;   ZF=ZE => Inheritable
  1783                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  1784 00003D52 57                  <1>     push rdi
  1785 00003D53 E80FFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  1786 00003D58 7208                <1>     jc .badNdx
  1787 00003D5A 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  1788 00003D60 5F                  <1>     pop rdi
  1789                              <1>     return
    18                              <2> %%_ret:
    19 00003D61 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1790                              <1> .badNdx:
  1791 00003D62 31FF                <1>     xor edi, edi
  1792 00003D64 FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  1793 00003D66 F8                  <1>     clc
  1794 00003D67 5F                  <1>     pop rdi
  1795                              <1>     return
    18                              <2> %%_ret:
    19 00003D68 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1796                              <1> 
  1797                              <1> incrementOpenCount:
  1798                              <1> ;Given a SFTndx, this function will increment it's open count
  1799                              <1> ;Output:
  1800                              <1> ;   CF=NC => sftndx ok, count incremented
  1801                              <1> ;   CF=CY => Bad ndx
  1802 00003D69 57                  <1>     push rdi
  1803 00003D6A E8F8FEFFFF          <1>     call getSFTPtrfromSFTNdx
  1804 00003D6F 7203                <1>     jc .exit
  1805 00003D71 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  1806                              <1> .exit:
  1807 00003D74 5F                  <1>     pop rdi
  1808                              <1>     return
    18                              <2> %%_ret:
    19 00003D75 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1809                              <1> 
  1810                              <1> decrementOpenCount: ;Int 4Fh AX = 1208h
  1811                              <1> ;Input: rdi = SFT pointer
  1812                              <1> ;Output: ax = Original wNumHandles count
  1813 00003D76 9C                  <1>     pushfq
  1814 00003D77 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  1815 00003D7A FFC8                <1>     dec eax     ;Decrement count
  1816 00003D7C 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  1817 00003D7E FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  1818                              <1> .exit:
  1819 00003D80 9D                  <1>     popfq
  1820 00003D81 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  1821                              <1>     return
    18                              <2> %%_ret:
    19 00003D84 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    31                                  %include "./Source/Kernel/FileIO/ioctl.asm"
    32                              <1> ioctrl:            ;ah = 44h, handle function
    33                              <1> ;Possible subfunctions
    34                              <1> ;al = 00h => Get Handle Information word in dx  x
    35                              <1> ;al = 01h => Set Handle Information word        x
    36                              <1> ;al = 02h => Read from Char device              
    37                              <1> ;al = 03h => Write to Char device               
    38                              <1> ;al = 04h => Read from Block device             
    39                              <1> ;al = 05h => Write to Block device              
    40                              <1> ;al = 06h => Get input status                   
    41                              <1> ;al = 07h => Get output status                  
    42                              <1> ;al = 08h => Is a block device removable?       
    43                              <1> ;al = 09h => Is a logical device local or remote?   
    44                              <1> ;al = 0Ah => Is a handle to a local or remote file? 
    45                              <1> ;al = 0Bh => Change sharing retry count (RESERVED)  
    46                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    47                              <1> ;al = 0Dh => Block device Generic IOCTL request     
    48                              <1> ;al = 0Eh => Get logical device                 
    49                              <1> ;al = 0Fh => Set logical device                 
    50 00003D85 84C0                <1>     test al, al
    51 00003D87 740B                <1>     jz .getDevWord
    52 00003D89 3C01                <1>     cmp al, 1
    53 00003D8B 7421                <1>     je .setDevWord
    54 00003D8D B001                <1>     mov al, errInvFnc
    55 00003D8F E9BE170000          <1>     jmp extErrExit
    56                              <1> .getDevWord:
    57                              <1>     ;Input: bx = File Handle
    58 00003D94 E851FFFFFF          <1>     call derefSFTPtr
    59 00003D99 0F82B3170000        <1>     jc extErrExit
    60                              <1>     ;Now rdi has ptr to SFT handle
    61 00003D9F 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    62 00003DA3 30C0                <1>     xor al, al
    63 00003DA5 E840130000          <1>     call getUserRegs
    64 00003DAA 668916              <1>     mov word [rsi + callerFrame], dx
    65                              <1>     return
    18                              <2> %%_ret:
    19 00003DAD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    66                              <1> .setDevWord:
    67                              <1>     ;Input: bx = File Handle
    68                              <1>     ;       dl = Low byte of Device information word 
    69 00003DAE E837FFFFFF          <1>     call derefSFTPtr
    70 00003DB3 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    71                              <1>     return
    18                              <2> %%_ret:
    19 00003DB6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    32                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    33                              <1> ;Memory related functions
    34                              <1> 
    35                              <1> ;-----------------------------------:
    36                              <1> ;  Memory related Kernel routines   :
    37                              <1> ;-----------------------------------:
    38                              <1> allocateMemory:    ;ah = 48h
    39                              <1> ;Input: ebx = Number of paragraphs requested
    40                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    41                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    42 00003DB7 E857170000          <1>     call dosCrit1Enter
    43 00003DBC 31D2                <1>     xor edx, edx
    44                              <1>     ;Clear the pointers
    45 00003DBE 488915(A7C30300)    <1>     mov qword [firstMCB], rdx
    46 00003DC5 488915(AFC30300)    <1>     mov qword [bestMCB], rdx
    47 00003DCC 488915(B7C30300)    <1>     mov qword [lastMCB], rdx
    48 00003DD3 31ED                <1>     xor ebp, ebp    
    49 00003DD5 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    50 00003DD7 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    51                              <1> .walk:
    52 00003DDE 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    53 00003DE1 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    54 00003DE4 7409                <1>     je .walk1
    55 00003DE6 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    56 00003DE9 0F8500050000        <1>     jne badMCBChain
    57                              <1> .walk1:
    58                              <1>     ;Here if valid but not the last block
    59 00003DEF 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    60 00003DF7 0F8582000000        <1>     jne .walk2
    61                              <1>     ;Here we consolidate adjacent free blocks if there are any
    62                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    63                              <1>     ;End consolidation at first non free block or at last block in chain
    64 00003DFD 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    65 00003E00 744A                <1>     je .det0    ;Determine if this block is useful
    66 00003E02 31C9                <1>     xor ecx, ecx
    67 00003E04 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    68 00003E07 4881C610000000      <1>     add rsi, mcb.program
    69                              <1> .cons0:
    70 00003E0E 48C1E104            <1>     shl rcx, 4
    71 00003E12 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    72 00003E15 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    73 00003E18 7409                <1>     je .cons1
    74 00003E1A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    75 00003E1D 0F85CC040000        <1>     jne badMCBChain 
    76                              <1> .cons1:
    77 00003E23 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    78 00003E2B 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    79                              <1>     ;Here rsi, points to a free block, add it to rdi
    80 00003E2D 31C9                <1>     xor ecx, ecx
    81 00003E2F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    82 00003E32 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    83 00003E38 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    84 00003E3B 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    85 00003E3D 31D2                <1>     xor edx, edx
    86 00003E3F 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    87 00003E42 48895608            <1>     mov qword [rsi + 8], rdx
    88 00003E46 3C5A                <1>     cmp al, mcbMarkEnd
    89 00003E48 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    90                              <1>     ;Here we deal with if the block was the last one 
    91 00003E4A 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    92                              <1> .det0:  ;Now determine if pointer in rdi is useful
    93 00003E4C 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    94                              <1> ;ebx must be less than the arena size for the arena to be useful!
    95 00003E4F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    96 00003E52 39D9                <1>     cmp ecx, ebx
    97 00003E54 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    98 00003E56 488935(B7C30300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    99 00003E5D 488B05(A7C30300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
   100 00003E64 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
   101 00003E67 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
   102 00003E69 488935(A7C30300)    <1>     mov qword [firstMCB], rsi
   103                              <1> .det1:
   104                              <1>     ;Now test for best fit.
   105 00003E70 29D9                <1>     sub ecx, ebx    ;Block - ebx
   106 00003E72 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   107 00003E74 7209                <1>     jb .walk2
   108 00003E76 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   109 00003E78 488935(AFC30300)    <1>     mov qword [bestMCB], rsi
   110                              <1> .walk2:
   111 00003E7F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   112 00003E82 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   113 00003E84 31C9                <1>     xor ecx, ecx
   114 00003E86 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   115 00003E89 48C1E104            <1>     shl rcx, 4
   116 00003E8D 4881C610000000      <1>     add rsi, mcb.program
   117 00003E94 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   118 00003E97 E942FFFFFF          <1>     jmp .walk
   119                              <1> .allocate:
   120                              <1>     ;Allocation fails IF the pointer is the null pointer
   121 00003E9C 803D(35C30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   122 00003EA3 7266                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   123                              <1>     ;Fall thru if last fit
   124 00003EA5 488B35(B7C30300)    <1>     mov rsi, qword [lastMCB]
   125 00003EAC 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   126 00003EAF 0F84D8000000        <1>     jz .allocFail
   127 00003EB5 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   128 00003EB7 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   129 00003EBA 31C9                <1>     xor ecx, ecx
   130 00003EBC 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   131 00003EBF 29D9                <1>     sub ecx, ebx
   132 00003EC1 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   133 00003EC7 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   134 00003ECA 48C1E104            <1>     shl rcx, 4
   135 00003ECE 4881C610000000      <1>     add rsi, mcb.program
   136 00003ED5 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   137 00003ED8 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   138 00003EDA 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   139 00003EDD 488B15(81C30300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   140 00003EE4 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   141 00003EE8 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   142 00003EEF 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   143 00003EF6 4889F0              <1>     mov rax, rsi
   144 00003EF9 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   145 00003EFC 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   146 00003F00 E8BD030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   147 00003F05 E813160000          <1>     call dosCrit1Exit
   148                              <1>     return
    18                              <2> %%_ret:
    19 00003F0A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   149                              <1> .bfCommon:
   150 00003F0B 488B35(A7C30300)    <1>     mov rsi, qword [firstMCB]
   151 00003F12 803D(35C30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   152 00003F19 480F4435(AFC30300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   153 00003F21 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   154 00003F24 7467                <1>     jz .allocFail
   155 00003F26 8A06                <1>     mov al, byte [rsi + mcb.marker]
   156 00003F28 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   157 00003F2B 31C9                <1>     xor ecx, ecx
   158 00003F2D 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   159 00003F30 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   160 00003F32 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   161 00003F38 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   162 00003F3B 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   163 00003F42 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   164 00003F46 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   165 00003F49 4881C610000000      <1>     add rsi, mcb.program
   166 00003F50 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   167 00003F56 48C1E304            <1>     shl rbx, 4
   168 00003F5A 4801DE              <1>     add rsi, rbx
   169 00003F5D 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   170 00003F5F 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   171 00003F67 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   172 00003F6A 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   173 00003F71 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   174 00003F78 4889F8              <1>     mov rax, rdi
   175 00003F7B 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   176 00003F7E 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   177 00003F82 E83B030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   178 00003F87 E891150000          <1>     call dosCrit1Exit
   179                              <1>     return
    18                              <2> %%_ret:
    19 00003F8C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   180                              <1> .allocFail:
   181                              <1>     ;Walk the MCB chain to determine the biggest block size
   182 00003F8D 488B35(2BC00300)    <1>     mov rsi, [mcbChainPtr]
   183 00003F94 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   184                              <1> .af0:
   185 00003F96 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   186 00003F99 7409                <1>     je .af1
   187 00003F9B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   188 00003F9E 0F854B030000        <1>     jne badMCBChain
   189                              <1> .af1:
   190 00003FA4 31C9                <1>     xor ecx, ecx
   191 00003FA6 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   192 00003FA9 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   193 00003FB1 7505                <1>     jne .af2
   194 00003FB3 39D9                <1>     cmp ecx, ebx
   195 00003FB5 0F47D9              <1>     cmova ebx, ecx
   196                              <1> .af2:
   197 00003FB8 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   198 00003FBB 7410                <1>     je .afExit
   199 00003FBD 48C1E104            <1>     shl rcx, 4
   200 00003FC1 4881C610000000      <1>     add rsi, mcb.program
   201 00003FC8 4801CE              <1>     add rsi, rcx
   202 00003FCB EBD7                <1>     jmp short .af1
   203                              <1> .afExit:
   204 00003FCD B808000000          <1>     mov eax, errNoMem
   205 00003FD2 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   206 00003FD9 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   207 00003FDC E910030000          <1>     jmp mcbErrHdlr
   208                              <1> freeMemory:        ;ah = 49h
   209                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   210                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   211                              <1> ;Always skip the first block as this is the anchor for DOS
   212 00003FE1 E82D150000          <1>     call dosCrit1Enter
   213 00003FE6 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   214 00003FED 31C9                <1>     xor ecx, ecx
   215 00003FEF 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   216 00003FF6 4889F7              <1>     mov rdi, rsi
   217 00003FF9 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   218 00003FFC 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   219 00004000 4881C610000000      <1>     add rsi, mcb.program
   220 00004007 4801CE              <1>     add rsi, rcx    ;Go to next block
   221                              <1> .mainLoop:
   222 0000400A 31C9                <1>     xor ecx, ecx
   223 0000400C 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   224 0000400F 7409                <1>     je .valid
   225 00004011 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   226 00004014 0F85D5020000        <1>     jne badMCBChain
   227                              <1> .valid:
   228 0000401A 4939F0              <1>     cmp r8, rsi
   229 0000401D 741C                <1>     je .blockFound
   230                              <1>     ;Not valid, check if last block in chain
   231 0000401F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   232 00004022 0F84A5000000        <1>     je .blockError
   233 00004028 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   234 0000402B 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   235 0000402F 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   236 00004036 4801CE              <1>     add rsi, rcx    ;Go to next block
   237 00004039 EBCF                <1>     jmp short .mainLoop
   238                              <1> .blockFound:
   239                              <1>     ;If hole, error.
   240                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   241 0000403B 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   242 00004043 0F8484000000        <1>     je .blockError
   243 00004049 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   244 00004051 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   245 00004059 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   246                              <1>     ;It is, let it absorb this space
   247 0000405B 31C9                <1>     xor ecx, ecx
   248 0000405D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   249 00004060 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   250 00004066 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   251                              <1>     ;Replace block marker
   252 00004069 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   253 0000406B 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   254 0000406D 31C9                <1>     xor ecx, ecx
   255 0000406F 48890E              <1>     mov qword [rsi], rcx
   256 00004072 48894E08            <1>     mov qword [rsi + 8], rcx
   257 00004076 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   258                              <1> .blockFoundCheckFollowing:
   259                              <1>     ;First check if we are the last block in chain
   260 00004079 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   261 0000407C 7439                <1>     je .blockFoundExit  ;If yes, exit!
   262 0000407E 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   263 00004081 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   264 00004084 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   265 00004088 4881C110000000      <1>     add rcx, mcb.program
   266 0000408F 4801CE              <1>     add rsi, rcx    ;Go to next block
   267 00004092 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   268 0000409A 751B                <1>     jne .blockFoundExit ;If not free, exit
   269                              <1>     ;If free, absorb into block pointed to by rdi
   270 0000409C 31C9                <1>     xor ecx, ecx
   271 0000409E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   272 000040A1 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   273 000040A7 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   274                              <1>     ;Replace block marker
   275 000040AA 8A06                <1>     mov al, byte [rsi + mcb.marker]
   276 000040AC 8807                <1>     mov byte [rdi + mcb.marker], al
   277 000040AE 31C9                <1>     xor ecx, ecx
   278 000040B0 48890E              <1>     mov qword [rsi], rcx
   279 000040B3 48894E08            <1>     mov qword [rsi + 8], rcx
   280                              <1> .blockFoundExit:
   281 000040B7 E806020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   282 000040BC E85C140000          <1>     call dosCrit1Exit
   283 000040C1 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   284 000040C8 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   285                              <1>     return
    18                              <2> %%_ret:
    19 000040CC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   286                              <1> .blockError:
   287 000040CD C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   288 000040D4 B809000000          <1>     mov eax, errMemAddr
   289 000040D9 E874140000          <1>     call extErrExit ;Error thru the unified error handler
   290 000040DE E8DF010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   291 000040E3 E835140000          <1>     call dosCrit1Exit
   292                              <1>     return
    18                              <2> %%_ret:
    19 000040E8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   293                              <1> reallocMemory:     ;ah = 4Ah
   294                              <1> ;Input: r8 = address of the block to be realloc'ed
   295                              <1> ;       ebx = How many paras this block should contain after realloc. 
   296                              <1> ;               If ebx = 0, jump to free memory
   297 000040E9 E825140000          <1>     call dosCrit1Enter
   298 000040EE 85DB                <1>     test ebx, ebx
   299 000040F0 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   300 000040F6 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   301 000040FD 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   302 00004100 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   303 00004103 7409                <1>     je .ctn
   304 00004105 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   305 00004108 0F8564010000        <1>     jne .badAddrGiven
   306                              <1> .ctn:
   307                              <1>     ;Provided block is valid and not a hole
   308                              <1>     ;Check if Growth or Shrink
   309 0000410E 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   310 00004116 74B5                <1>     je freeMemory.blockError
   311 00004118 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   312 0000411B 31C9                <1>     xor ecx, ecx
   313 0000411D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   314 00004120 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   315 00004122 0F8786000000        <1>     ja .growth
   316 00004128 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   317                              <1> ;We can always shrink
   318 0000412E 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   319 00004130 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   320 00004136 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   321 00004139 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   322 0000413F 48C1E304            <1>     shl rbx, 4
   323 00004143 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   324 0000414A 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   325 0000414D 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   326 0000414F C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   327 00004152 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   328 00004154 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   329 0000415C 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   330 0000415F 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   331 00004161 0F84DB000000        <1>     je .exit
   332                              <1> ;Else, now see if the block following is also free and absorb it
   333 00004167 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   334 0000416A 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   335 0000416E 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   336 00004175 4801CE              <1>     add rsi, rcx    ;Goto next arena
   337 00004178 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   338 0000417B 7409                <1>     je .shrinkAbsorb
   339 0000417D 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   340 00004180 0F8569010000        <1>     jne badMCBChain
   341                              <1> .shrinkAbsorb:
   342 00004186 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   343 0000418E 0F85AE000000        <1>     jne .exit
   344                              <1>     ;It is free, absorb it
   345 00004194 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   346 00004197 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   347 0000419D 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   348 000041A0 31C9                <1>     xor ecx, ecx
   349                              <1>     ;Clear absorbed MCB
   350 000041A2 48890E              <1>     mov qword [rsi], rcx
   351 000041A5 48894E08            <1>     mov qword [rsi + 8], rcx
   352 000041A9 E994000000          <1>     jmp .exit
   353                              <1> .growth:
   354                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   355 000041AE 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   356 000041B1 0F84A5000000        <1>     je .notEnuffMem
   357                              <1> ;Now check the following space is free. If not, not enuff mem err
   358 000041B7 31C9                <1>     xor ecx, ecx
   359 000041B9 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   360 000041BC 48C1E104            <1>     shl rcx, 4
   361 000041C0 4889F7              <1>     mov rdi, rsi    
   362 000041C3 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   363 000041CA 4801CE              <1>     add rsi, rcx
   364 000041CD 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   365 000041D0 7409                <1>     je .growthOK
   366 000041D2 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   367 000041D5 0F8514010000        <1>     jne badMCBChain
   368                              <1> .growthOK:
   369                              <1>     ;rdi points to block we are growing
   370 000041DB 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   371 000041E3 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   372                              <1>     ;rsi must own all memory up to the next owned arena
   373 000041E5 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   374 000041E7 31C9                <1>     xor ecx, ecx
   375 000041E9 31D2                <1>     xor edx, edx
   376 000041EB 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   377 000041EE 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   378 000041F4 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   379 000041F7 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   380 000041F9 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   381 000041FB 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   382 000041FE 775E                <1>     ja .notEnuffMem1
   383 00004200 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   384 00004202 81FA01000000        <1>     cmp edx, 1
   385 00004208 744E                <1>     je .notEnuffMem2
   386 0000420A 31C9                <1>     xor ecx, ecx
   387 0000420C 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   388 0000420F 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   389 00004213 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   390 00004216 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   391 00004219 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   392 00004220 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   393 00004224 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   394 00004227 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   395 0000422B 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   396                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   397                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   398 0000422D 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   399 0000422F 7411                <1>     jz .exit
   400 00004231 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   401 00004237 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   402 0000423A 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   403                              <1> .exit:
   404 00004242 E87B000000          <1>     call verifyIntegrityOfMCBChain
   405 00004247 E8D1120000          <1>     call dosCrit1Exit
   406 0000424C 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   407 00004253 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   408                              <1>     return
    18                              <2> %%_ret:
    19 00004257 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   409                              <1> .notEnuffMem2:
   410 00004258 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   411 0000425A EB02                <1>     jmp short .notEnuffMem1
   412                              <1> .notEnuffMem:
   413 0000425C 31DB                <1>     xor ebx, ebx    ;No space to grow
   414                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   415 0000425E B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   416 00004263 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   417 0000426A 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   418 0000426D E97F000000          <1>     jmp mcbErrHdlr
   419                              <1> .badAddrGiven:
   420 00004272 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   421 00004277 E975000000          <1>     jmp mcbErrHdlr
   422                              <1> getsetMallocStrat: ;ah = 58h
   423 0000427C 84C0                <1>     test al, al
   424 0000427E 741F                <1>     jz .get
   425 00004280 3C02                <1>     cmp al, 2
   426 00004282 7337                <1>     jae .bad
   427                              <1> ;Set here
   428 00004284 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   429 0000428B 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   430 0000428F 8805(35C30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   431 00004295 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   432 00004299 E824000000          <1>     call verifyIntegrityOfMCBChain
   433                              <1>     return
    18                              <2> %%_ret:
    19 0000429E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   434                              <1> .get:
   435 0000429F 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   436 000042A6 31C0                <1>     xor eax, eax
   437 000042A8 8A05(35C30300)      <1>     mov al, byte [allocStrat]
   438 000042AE 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   439 000042B1 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   440 000042B5 E808000000          <1>     call verifyIntegrityOfMCBChain
   441                              <1>     return
    18                              <2> %%_ret:
    19 000042BA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   442                              <1> .bad:
   443 000042BB B801000000          <1>     mov eax, errInvFnc
   444 000042C0 EB2F                <1>     jmp short mcbErrHdlr
   445                              <1> ;-----------------------------------:
   446                              <1> ;      Memory related routines      :
   447                              <1> ;-----------------------------------:
   448                              <1> verifyIntegrityOfMCBChain:
   449 000042C2 50                  <1>     push rax
   450 000042C3 53                  <1>     push rbx
   451 000042C4 488B1D(2BC00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   452                              <1> .ok:
   453 000042CB 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   454 000042CE 7408                <1>     je .ok1
   455 000042D0 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   456 000042D3 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   457                              <1> .exit:
   458 000042D5 5B                  <1>     pop rbx
   459 000042D6 58                  <1>     pop rax
   460                              <1>     return ;We have reached the end of the chain, return all good!
    18                              <2> %%_ret:
    19 000042D7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   461                              <1> .ok1:
   462 000042D8 31C0                <1>     xor eax, eax
   463 000042DA 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   464 000042DD 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   465 000042E1 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   466 000042E8 4801C3              <1>     add rbx, rax
   467 000042EB EBDE                <1>     jmp short .ok
   468                              <1> .bmcbPrep:
   469 000042ED 5B                  <1>     pop rbx ;Pop off the stack first!
   470 000042EE 58                  <1>     pop rax
   471                              <1> badMCBChain:
   472 000042EF B007                <1>     mov al, errMCBbad   ;Yikes!
   473                              <1> mcbErrHdlr:
   474                              <1>     ;Jumped to with eax = error code
   475 000042F1 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   476 000042F8 E855120000          <1>     call extErrExit ;Error thru the unified error handler
   477 000042FD 3C07                <1>     cmp al, errMCBbad
   478                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000042FF 74D6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   479 00004301 EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    33                                  %include "./Source/Kernel/MemExec/progMgmt.asm"
    34                              <1> ;EXEC and all default terminates are here
    35                              <1> 
    36                              <1> ;========================
    37                              <1> ;   Interrupt handlers
    38                              <1> ;========================
    39                              <1> terminateProcess:   ;Int 40h
    40 00004303 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
    41 00004305 E981100000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
    42                              <1> terminateRes:       ;Int 47h
    43                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    44 0000430A 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    45 00004310 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    46 00004313 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    47 00004318 E96E100000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    48                              <1> ;========================
    49                              <1> ;    Int 21h functions
    50                              <1> ;========================
    51                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    52                              <1> ;Input:
    53                              <1> ;rdx = Pointer to new PSP in memory.
    54                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    55                              <1> ;   Officially document that this MUST be paragraph aligned.
    56                              <1> ;rsi = alloc size for new psp block
    57 0000431D C605(76C40300)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    58 00004324 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]
    59 0000432B 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    60 0000432D 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    61 0000432E EB0C                <1>     jmp short copyPSP.pspCommon
    62                              <1> copyPSP:      ;ah = 26h
    63                              <1> ;Input:
    64                              <1> ;rdx = Pointer to new PSP in memory.
    65                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    66                              <1> ;   Officially document that this MUST be paragraph aligned.
    67 00004330 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]
    68 00004337 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    69 0000433B 53                  <1>     push rbx    ;Save this value for PSP allocsize
    70                              <1> .pspCommon:
    71 0000433C 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    72 00004343 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    73 00004347 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    74                              <1> ;r8 is current PSP, now copy psp to rdx
    75                              <1> ;Preserve rdx and r8 until the end
    76 0000434B 4C89C6              <1>     mov rsi, r8
    77 0000434E 4889D7              <1>     mov rdi, rdx
    78 00004351 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    79 00004356 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    80 00004359 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    81 00004361 F605(76C40300)FF    <1>     test byte [pspCopyFlg], -1
    82 00004368 7449                <1>     jz .copy
    83                              <1>     ;Now reset the parent psp data
    84 0000436A 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    85 00004372 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    86                              <1>     ;Now reset the copied jobFileTable
    87 00004376 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    88 0000437A 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    89 00004381 B0FF                <1>     mov al, -1
    90 00004383 F3AA                <1>     rep stosb   ;Store maxHndls many -1's 
    91                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    92 00004385 498D702A            <1>     lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    93 00004389 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    94 0000438D 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    95                              <1> .xfrJFT:
    96 00004394 67E31C              <1>     jecxz .copy
    97 00004397 FFC9                <1>     dec ecx
    98 00004399 AC                  <1>     lodsb   ;Get the SFTndx in al
    99 0000439A 0FB6D8              <1>     movzx ebx, al
   100 0000439D 53                  <1>     push rbx
   101 0000439E E8AFF9FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
   102 000043A3 58                  <1>     pop rax
   103 000043A4 7508                <1>     jnz .badJFT
   104 000043A6 AA                  <1>     stosb   ;Else store the SFTndx at that position... 
   105 000043A7 E8BDF9FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
   106 000043AC EBE6                <1>     jmp short .xfrJFT
   107                              <1> .badJFT:
   108 000043AE 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
   109 000043B1 EBE1                <1>     jmp short .xfrJFT 
   110                              <1> .copy:
   111 000043B3 C605(76C40300)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
   112 000043BA 58                  <1>     pop rax ;Pop the allocsize back into rax
   113 000043BB 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
   114                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
   115 000043BE 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
   116 000043C2 B042                <1>     mov al, 42h
   117 000043C4 E8130D0000          <1>     call muxGetIntVector    ;Get vector in rbx
   118 000043C9 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   119 000043CC 48AB                <1>     stosq   ;Move rdi to next entry and store
   120 000043CE B043                <1>     mov al, 43h
   121 000043D0 E8070D0000          <1>     call muxGetIntVector    ;Get vector in rbx
   122 000043D5 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   123 000043D8 48AB                <1>     stosq   ;Move rdi to next entry and store
   124 000043DA B044                <1>     mov al, 44h
   125 000043DC E8FB0C0000          <1>     call muxGetIntVector    ;Get vector in rbx
   126 000043E1 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   127 000043E4 48AB                <1>     stosq   ;Move rdi to next entry and store
   128                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   129 000043E6 66C70240CD          <1>     mov word [rdx + psp.return], 0CD40h  ;Int 40h
   130 000043EB C7425000CB40CD      <1>     mov dword [rdx + psp.unixEntry], 0CD40CB00h  ;Overlay next byte for prevPSP
   131                              <1>     return
    18                              <2> %%_ret:
    19 000043F2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   132                              <1> 
   133                              <1> terminateStayRes:  ;ah = 31h
   134                              <1> ;Input: al  = Error code
   135                              <1> ;       edx = Number of paragraphs to keep resident
   136 000043F3 C605(60C60300)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   137                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   138 000043FA 81FA06000000        <1>     cmp edx, 6
   139 00004400 7305                <1>     jae .aboveMinimum
   140 00004402 BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   141                              <1> .aboveMinimum:
   142                              <1> ;Now we setup a call to Realloc 
   143                              <1> ;Setup regs with: 
   144                              <1> ;   r8 = address of the block to be realloc'ed
   145                              <1> ;   ebx = How many paras this block should contain after realloc.
   146 00004407 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   147 0000440E 89D3                <1>     mov ebx, edx
   148 00004410 50                  <1>     push rax    ;Preserve errorlevel across call
   149 00004411 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   150 00004412 E8D2FCFFFF          <1>     call reallocMemory
   151 00004417 5B                  <1>     pop rbx
   152 00004418 58                  <1>     pop rax
   153 00004419 7220                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   154 0000441B 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   155                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   156 0000441F EB1A                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   157                              <1> 
   158                              <1> simpleTerminate:   ;ah = 00h
   159 00004421 31C0                <1>     xor eax, eax    ;Just fall through as normal
   160                              <1> terminateClean:    ;ah = 4Ch, EXIT
   161                              <1> ;Here we must:
   162                              <1> ;0) Build errorlevel and adjust variables accordingly
   163                              <1> ;1) Call Network Termination hook.
   164                              <1> ;2) Check if the program is it's own parent. If so, return.
   165                              <1> ;3) Swap the console back to the original driver if it is swapped.
   166                              <1> ;3.5) If we are exiting due to TSR, jump to 5
   167                              <1> ;4) Free all file handles associated to the current process.
   168                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   169                              <1> ;5) Free all memory blocks that have the signature of current PSP
   170                              <1> ;6) Set current PSP to parent PSP
   171                              <1> ;7) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   172                              <1> ;8) Set rsp of parent proc upon entry to DOS to our rsp
   173                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   174                              <1> ;10) Exit all critical sections.
   175                              <1> ;
   176                              <1> ; Step 0
   177                              <1> ;For now, just adjust error level in var
   178 00004423 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   179 00004425 8625(60C60300)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   180 0000442B F605(EDC30300)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   181 00004432 740D                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   182 00004434 C605(60C60300)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   183                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   184 0000443B 8A25(60C60300)      <1>     mov ah, byte [exitType] ;Get the exitType
   185                              <1> .storeELvl:
   186 00004441 668905(91C30300)    <1>     mov word [errorLevel], ax   ;Store word
   187                              <1>     
   188                              <1> ; Step 1 Tell network a process is terminating
   189 00004448 B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   190 0000444D 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   191 00004454 CD4F                <1>     int 4Fh
   192                              <1> 
   193                              <1> ; Step 2
   194                              <1> .step1:
   195 00004456 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   196 0000445D 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   197 00004460 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   198 00004464 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   199                              <1>     rete            ;If it is, simply return (al has errorLevel)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004467 7489                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   200                              <1> ; Step 3
   201 00004469 E854E1FFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   202                              <1> ; Step 3.5
   203 0000446E 803D(60C60300)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   204 00004475 0F8488000000        <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   205                              <1> ; Step 4
   206 0000447B 803D(60C60300)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   207 00004482 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   208 00004484 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   209 00004489 CD4F                <1>     int 4Fh
   210                              <1> .skipAbortNetClose:
   211 0000448B 4881C72A000000      <1>     add rdi, psp.jobFileTbl ;Move rdi to point to the start of the JFT
   212 00004492 4889FE              <1>     mov rsi, rdi    ;Point rsi to jft too
   213 00004495 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls] ;Number of entries in JFT
   214                              <1> .s4lp:
   215 0000449C AC                  <1>     lodsb   ;Inc rsi, get the SFT number in al
   216 0000449D 3CFF                <1>     cmp al, -1  ;End of open JFT entries?
   217 0000449F 7429                <1>     je .step5
   218 000044A1 0FB6D8              <1>     movzx ebx, al   ;Move the file handle number into ebx
   219                              <1>     ;Replace with a call to close the handle eventually
   220 000044A4 57                  <1>     push rdi
   221 000044A5 E840F8FFFF          <1>     call derefSFTPtr    ;Ret in rdi the SFT pointer
   222 000044AA 7216                <1>     jc .badHdl  ;If a bad handle, skip the decrementing of the handle count
   223 000044AC FF35(84C60300)      <1>     push qword [currentSFT]
   224 000044B2 E88AF6FFFF          <1>     call setCurrentSFT  ;Set rdi to currentSFT
   225 000044B7 E803EFFFFF          <1>     call closeMain  ;Close all files opened by this program. Decrement ref ONLY
   226                              <1>     ;closeMain also flushes all sectors associated to the file
   227                              <1>     ;Ignore errors, simply keep closing files
   228 000044BC 8F05(84C60300)      <1>     pop qword [currentSFT]
   229                              <1> .badHdl:
   230 000044C2 5F                  <1>     pop rdi
   231 000044C3 B0FF                <1>     mov al, -1
   232 000044C5 AA                  <1>     stosb   ;Store a -1 in it's place (not strictly necessary)
   233 000044C6 FFC9                <1>     dec ecx ;Zoom Zoom \mu-op!
   234 000044C8 75D2                <1>     jnz .s4lp   ;Keep looping for all entries in the JFT 
   235                              <1> ;Step 5
   236                              <1> .step5:
   237 000044CA 488B1D(81C30300)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   238                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   239                              <1>     ; with the currentPSP signature and free them.
   240 000044D1 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   241                              <1> .s5lp:  ;And walk the chain
   242                              <1> ;First verify the address in rsi is a valid mcb
   243 000044D8 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   244 000044DA 80F94D              <1>     cmp cl, mcbMarkCtn
   245 000044DD 7405                <1>     je .checkToFree
   246 000044DF 80F95A              <1>     cmp cl, mcbMarkEnd
   247 000044E2 751F                <1>     jne .step6  ;Something wrong so stop freeing
   248                              <1> .checkToFree:
   249 000044E4 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   250 000044E8 7508                <1>     jne .noFree
   251 000044EA 4989F0              <1>     mov r8, rsi ;Move pointer to r8
   252 000044ED E8EFFAFFFF          <1>     call freeMemory ;Free this memory block
   253                              <1>     ;If an error occured, the internal vars will be set.
   254                              <1> .noFree:
   255 000044F2 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   256 000044F5 740C                <1>     je .step6   ;Skip if we are
   257 000044F7 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   258 000044FA 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   259 000044FE 4801C6              <1>     add rsi, rax    ;Goto next mcb block
   260 00004501 EBD5                <1>     jmp short .s5lp
   261                              <1> ;Step 6
   262                              <1> .step6:
   263 00004503 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   264 00004507 488905(81C30300)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   265                              <1> ;Step 7
   266                              <1>     ;rbx points to current PSP, the old parent task
   267                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   268 0000450E 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   269 00004512 B044                <1>     mov al, 44h
   270 00004514 E8E0110000          <1>     call setIntVector
   271 00004519 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   272 0000451D B043                <1>     mov al, 43h
   273 0000451F E8D5110000          <1>     call setIntVector
   274 00004524 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   275 00004528 B042                <1>     mov al, 42h
   276 0000452A 52                  <1>     push rdx
   277 0000452B E8C9110000          <1>     call setIntVector
   278 00004530 5A                  <1>     pop rdx
   279                              <1> ;Step 8
   280 00004531 52                  <1>     push rdx    ;Save the return address on the stack
   281 00004532 53                  <1>     push rbx    ;Save the parent PSP address
   282 00004533 B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   283 00004535 CD4A                <1>     int 4ah
   284 00004537 5B                  <1>     pop rbx
   285 00004538 5A                  <1>     pop rdx
   286                              <1> 
   287 00004539 FA                  <1>     cli
   288                              <1>     ;Make the parent register frame the current one
   289                              <1>     ;Make RSP point to user stack from parent entry to exec
   290 0000453A 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   291                              <1> 
   292 0000453E 4889542448          <1>     mov qword [rsp + callerFrame.rip], rdx  ;Store return address vector here
   293 00004543 48C744245802F20000  <1>     mov qword [rsp + callerFrame.flags], 0F202h ;Mimic DOS's return flags
   294                              <1> 
   295 0000454C C605(F7C30300)00    <1>     mov byte [Int44Trans], 0    ;Clear this flag
   296 00004553 C605(6AC30300)00    <1>     mov byte [inDOS], 0 ;Exiting DOS now
   297 0000455A C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;Reset
   298 00004561 E87F0F0000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   299 00004566 48CF                <1>     iretq   ;and return to address that was in rdx
    34                                  %include "./Source/Kernel/MemExec/exec.asm"
    35                              <1> 
    36                              <1> 
    37                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    38                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
    39                              <1> ;       rbx = Ptr to the parameter block used for loading
    40                              <1> ;       al = Subfunction:
    41                              <1> ;            00h = Load Program and transfer control to it
    42                              <1> ;            01h = Load Program but do not transfer ctrl to it
    43                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    44                              <1> ;      Reserved for future expansion:
    45                              <1> ;            04h = Load in background execution mode (PE only)
    46                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    47                              <1> ;               function but in 16-bit mode. 
    48                              <1> ;
    49                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    50                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    51                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    52                              <1> 
    53                              <1> ;If AL = 0 :
    54                              <1> ;            Load Child Program and Xfr control to it
    55                              <1> ; rbx ------>   |-------------------------------|
    56                              <1> ;               |   Ptr to Environment Block    |
    57                              <1> ;               |                               |
    58                              <1> ;               | Can be 0 => Get pointer to    |
    59                              <1> ;               | parent Environment Block      |
    60                              <1> ;               |-------------------------------|
    61                              <1> ;               |   Ptr to Command Line to be   |
    62                              <1> ;               |   placed at PSP + 80h         |
    63                              <1> ;               |-------------------------------|
    64                              <1> ;               |   Ptr to first default FCB    |
    65                              <1> ;               |      to copy to PSP.fcb1      |
    66                              <1> ;               |                               |
    67                              <1> ;               | Should be used to parse the   |
    68                              <1> ;               |  first two command line args  |
    69                              <1> ;               |-------------------------------|
    70                              <1> ;               |   Ptr to second default FCB   |
    71                              <1> ;               |      to copy to PSP.fcb2      |
    72                              <1> ;               |-------------------------------|
    73                              <1> ;
    74                              <1> ;If AL = 1 :
    75                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    76                              <1> ; rbx ------>   |-------------------------------|
    77                              <1> ;               |         AS IN AL=00H          |
    78                              <1> ;               |-------------------------------|
    79                              <1> ;               |     Initial Value of RSP      |
    80                              <1> ;               |       on program launch       |
    81                              <1> ;               |                               |
    82                              <1> ;               |     This is returned to the   |
    83                              <1> ;               |         caller by DOS         |
    84                              <1> ;               |-------------------------------|
    85                              <1> ;               |     Initial Value of RIP      |
    86                              <1> ;               |       on program launch       |
    87                              <1> ;               |                               |
    88                              <1> ;               |     This is returned to the   |
    89                              <1> ;               |         caller by DOS         |
    90                              <1> ;               |-------------------------------|
    91                              <1> ;
    92                              <1> ;                      !!Important Note!!
    93                              <1> ;   The block pointed to by rbx must reserve the space for 
    94                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    95                              <1> ;
    96                              <1> ;If AL = 3 :
    97                              <1> ;                      Load program overlay
    98                              <1> ; rbx ------>   |-------------------------------|
    99                              <1> ;               |  Pointer to the byte in the   |
   100                              <1> ;               |  prog space to start writing  |
   101                              <1> ;               |        the overlay at         |
   102                              <1> ;               |-------------------------------|
   103                              <1> ;               | DWORD offset from the base of |
   104                              <1> ;               |  the program to the location  |
   105                              <1> ;               |  the overlay is being loaded  |
   106                              <1> ;               |              in               |
   107                              <1> ;               |  (Called a Relocation Factor) |
   108                              <1> ;               |     Only FOR EXE Overlays     |
   109                              <1> ;               |        for CODE fixups        |
   110                              <1> ;               |  For COM, Current PSP + 100h  |
   111                              <1> ;               |      assumed to suffice       |
   112                              <1> ;               |-------------------------------|
   113                              <1> ;
   114                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
   115                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
   116                              <1> ;
   117                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
   118 00004568 55                  <1>     push rbp
   119 00004569 4889E5              <1>     mov rbp, rsp
   120 0000456C 4881EC44000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   121 00004573 3C03                <1>     cmp al, execOverlay
   122 00004575 7615                <1>     jbe .validSubfunction
   123                              <1> .badSubFunction:
   124 00004577 B801000000          <1>     mov eax, errInvFnc
   125 0000457C C605(6CC30300)01    <1>     mov byte [errorLocus], eLocUnk
   126                              <1> .badExit:
   127 00004583 4889EC              <1>     mov rsp, rbp
   128 00004586 5D                  <1>     pop rbp
   129 00004587 E9C60F0000          <1>     jmp extErrExit
   130                              <1> 
   131                              <1> .validSubfunction:
   132 0000458C 3C02                <1>     cmp al, execInvld
   133 0000458E 74E7                <1>     je .badSubFunction
   134                              <1>     ;Save registers for each function call
   135 00004590 48895DF8            <1>     mov qword [rbp - execFrame.pParam], rbx
   136 00004594 488955F0            <1>     mov qword [rbp - execFrame.pProgname], rdx
   137 00004598 0FB6C0              <1>     movzx eax, al
   138 0000459B 48894500            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   139 0000459F 4889D7              <1>     mov rdi, rdx
   140 000045A2 E88F0C0000          <1>     call strlen ;Get string length in cx
   141 000045A7 66894DFB            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   142                              <1>     ;Now open the file we wanna yeet to
   143 000045AB 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   144 000045AD 55                  <1>     push rbp    ;Preserve local frame ptr
   145 000045AE E88CE5FFFF          <1>     call openFileHdl
   146 000045B3 5D                  <1>     pop rbp
   147 000045B4 72CD                <1>     jc .badExit ;Exit preserving error code in al
   148                              <1>     ;Now ax has the file handle
   149 000045B6 668945FF            <1>     mov word [rbp - execFrame.wProgHdl], ax
   150 000045BA 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   151 000045BD E828F7FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   152 000045C2 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   153 000045C6 F7C280000000        <1>     test edx, devCharDev
   154 000045CC 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   155 000045CE B002                <1>     mov al, errFnf
   156 000045D0 E9CE040000          <1>     jmp .cleanAndFail
   157                              <1> .validDiskFile:
   158 000045D5 31C0                <1>     xor eax, eax
   159 000045D7 488945E8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Clear pEnv and pProg Bases
   160 000045DB 488945D8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   161 000045DF 807D0003            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   162 000045E3 0F848B000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   163 000045E9 488B7DF8            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   164 000045ED 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   165 000045F0 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   166 000045F3 7514                <1>     jnz .copyEnvironmentBlock
   167 000045F5 488B35(81C30300)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   168 000045FC 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   169 00004600 488945E8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   170 00004604 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, make a new block
   171 00004607 756B                <1>     jnz .loadProgram
   172                              <1> .copyEnvironmentBlock:
   173 00004609 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   174                              <1>     ;Get the length of the environment
   175 0000460C B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   176 00004611 31C0                <1>     xor eax, eax
   177 00004613 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   178                              <1> .envVerifyLp:
   179 00004616 F3AE                <1>     rep scasb   ;Scan for a terminating word of nulls
   180 00004618 752F                <1>     jnz .invalidEnvironmentError
   181 0000461A 67E32C              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   182 0000461D FFC9                <1>     dec ecx
   183 0000461F AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   184 00004620 75F4                <1>     jnz .envVerifyLp
   185                              <1> 
   186 00004622 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   187 00004625 57                  <1>     push rdi     ;Save the length of the environment block
   188 00004626 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   189 0000462C 0FB75DFB            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   190 00004630 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   191 00004632 89FB                <1>     mov ebx, edi
   192 00004634 C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   193 00004637 E87BF7FFFF          <1>     call allocateMemory
   194 0000463C 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   195 0000463D 7314                <1>     jnc .copyEnvironment
   196                              <1>     ;Fall thru if not enuff memory
   197                              <1> .insufficientMemory:
   198 0000463F B808000000          <1>     mov eax, errNoMem
   199 00004644 E95A040000          <1>     jmp .cleanAndFail
   200                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   201 00004649 B80A000000          <1>     mov eax, errBadEnv
   202 0000464E E950040000          <1>     jmp .cleanAndFail
   203                              <1> 
   204                              <1> .copyEnvironment:
   205                              <1>     ;rax has the ptr to allocated memory block
   206                              <1>     ;rcx has the number of chars to copy from the source env block
   207 00004653 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   208 00004656 488945E8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   209 0000465A 488B75F8            <1>     mov rsi, qword [rbp - execFrame.pParam]
   210 0000465E 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   211 00004661 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   212 00004663 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   213 00004668 66AB                <1>     stosw       ;Away you go!
   214 0000466A 488B75F0            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   215 0000466E 0FB74DFB            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   216 00004672 F3A4                <1>     rep movsb   ;Move the bytes to rdi
   217                              <1> ;Done with the environment... more or less
   218                              <1> .loadProgram:
   219 00004674 B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   220 00004679 488D15(EAD80300)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   221 00004680 E83A040000          <1>     call .readDataFromHdl
   222 00004685 0F8213040000        <1>     jc .badFmtErr
   223 0000468B 85C0                <1>     test eax, eax   ;Were zero bytes read?
   224 0000468D 0F840B040000        <1>     jz .badFmtErr
   225 00004693 3D40000000          <1>     cmp eax, imageDosHdr_size
   226 00004698 0F8272020000        <1>     jb .loadCom
   227                              <1> 
   228 0000469E 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   229 000046A3 740B                <1>     je .proceedEXE
   230 000046A5 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   231 000046AA 0F8560020000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   232                              <1> .proceedEXE:
   233                              <1>     ;Now we need to read e_lfanew
   234 000046B0 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   235 000046B1 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   236 000046B4 8955CC              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   237 000046B7 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   238 000046B9 30C0                <1>     xor al, al  ;Set file pointer from start of file
   239 000046BB 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   240 000046BF E8EBE6FFFF          <1>     call lseekHdl   ;Move to that position in the file
   241                              <1> 
   242 000046C4 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   243 000046C5 B914000000          <1>     mov ecx, imageFileHeader_size
   244 000046CA E8F0030000          <1>     call .readDataFromHdl       ;Now read the COFF header
   245 000046CF 85C0                <1>     test eax, eax   ;Were zero bytes read?
   246 000046D1 0F84C7030000        <1>     jz .badFmtErr
   247 000046D7 3D14000000          <1>     cmp eax, imageFileHeader_size
   248 000046DC 0F82BC030000        <1>     jb .badFmtErr
   249                              <1>     ;So now rdx points to the imageFileHeader
   250 000046E2 66813A6486          <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   251 000046E7 0F85B1030000        <1>     jne .badFmtErr
   252 000046ED 66817A107000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   253 000046F3 0F82A5030000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   254                              <1>     ;Now save the number of sections in the the file
   255 000046F9 0FB74202            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   256 000046FD 85C0                <1>     test eax, eax   ;If this is 0, what?
   257 000046FF 0F8499030000        <1>     jz .badFmtErr
   258 00004705 668945C8            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   259                              <1> 
   260                              <1>     ;Now load Optional header, file ptr points to it so all good!
   261 00004709 B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   262                              <1>     ;rdx points to exeHdrSpace
   263 0000470E E8AC030000          <1>     call .readDataFromHdl
   264 00004713 85C0                <1>     test eax, eax   ;Were zero bytes read?
   265 00004715 0F8483030000        <1>     jz .badFmtErr
   266 0000471B 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   267 00004720 0F8278030000        <1>     jb .badFmtErr
   268                              <1>     ;Now File Ptr points to data dirs, not an issue
   269 00004726 8145C470000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   270                              <1>     ;We load the program in, one section at a time, reading section headers in
   271                              <1>     ; one at a time to the section header internal buffer.
   272 0000472D 807D0003            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   273 00004731 744B                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   274 00004733 8B1D(22D90300)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   275 00004739 488B05(32D90300)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   276 00004740 4885C0              <1>     test rax, rax
   277 00004743 750A                <1>     jnz .notDefaultStackAlloc
   278 00004745 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   278 0000474E 00                  <1>
   279                              <1> .notDefaultStackAlloc:
   280 0000474F 01C3                <1>     add ebx, eax    ;Add stack allocation
   281 00004751 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   282 00004757 895DD0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   283 0000475A 81C30B000000        <1>     add ebx, 11
   284 00004760 C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   285 00004763 E84FF6FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   286 00004768 0F82D1FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   287 0000476E 488945E0            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   288 00004772 480500010000        <1>     add rax, psp_size
   289 00004778 488945D8            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of code goes here
   290 0000477C EB0B                <1>     jmp short .exeProceed1
   291                              <1> .exeOvlySkipAlloc:
   292 0000477E 488B5DF8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   293 00004782 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   294 00004785 488945D8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   295                              <1> .exeProceed1:
   296                              <1>     ;So now copy one section at a time, read section header in
   297                              <1>     ;File pointer points to the directory table, so skip that
   298 00004789 8B15(56D90300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   299 0000478F 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   300 00004795 0F8203030000        <1>     jb .badFmtErr
   301 0000479B FFCA                <1>     dec edx ;Decrement by 1 to make into a 0 based offset
   302                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   303 0000479D C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   304 000047A0 31C9                <1>     xor ecx, ecx
   305 000047A2 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   306 000047A6 B001                <1>     mov al, 1   ;Move handle forwards from current position
   307 000047A8 E802E6FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   308                              <1>     ;eax has pointer location after adjustment
   309 000047AD 8945C4              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   310                              <1>     ;File now points to start of Section headers. Read first header in.
   311                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   312 000047B0 488B7DD8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   313 000047B4 0FB74DC8            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   314                              <1> .loadLp:
   315 000047B8 51                  <1>     push rcx    ;Save # of segments left on stack
   316 000047B9 57                  <1>     push rdi    ;Save the current buffer ptr here
   317 000047BA B928000000          <1>     mov ecx, imageSectionHdr_size
   318 000047BF 488D15(5AD90300)    <1>     lea rdx, sectHdr    ;Read section headers here
   319 000047C6 E8F4020000          <1>     call .readDataFromHdl
   320 000047CB 5F                  <1>     pop rdi
   321 000047CC 59                  <1>     pop rcx
   322 000047CD 85C0                <1>     test eax, eax
   323 000047CF 0F84C9020000        <1>     jz .badFmtErr
   324 000047D5 3D28000000          <1>     cmp eax, imageSectionHdr_size
   325 000047DA 0F85BE020000        <1>     jne .badFmtErr
   326                              <1>     ;File ptr moved forwards to next section header
   327 000047E0 8145C428000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   328                              <1>     ;Section header read, now we load section into memory
   329                              <1>     ;Move file ptr to data location
   330 000047E7 8B15(6ED90300)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   331 000047ED 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   332 000047F1 31C0                <1>     xor eax, eax    ;Seek from start of file
   333 000047F3 51                  <1>     push rcx
   334 000047F4 57                  <1>     push rdi
   335 000047F5 E8B5E5FFFF          <1>     call lseekHdl
   336 000047FA 5F                  <1>     pop rdi
   337 000047FB 59                  <1>     pop rcx
   338                              <1> 
   339 000047FC 51                  <1>     push rcx
   340 000047FD 57                  <1>     push rdi    ;Save current buffer offset
   341 000047FE 8B0D(6AD90300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dSizeOfRawData]   ;Get # of bytes
   342 00004804 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   343 00004807 E8B3020000          <1>     call .readDataFromHdl
   344 0000480C 5F                  <1>     pop rdi
   345 0000480D 59                  <1>     pop rcx
   346 0000480E 0F828A020000        <1>     jc .badFmtErr
   347 00004814 85C0                <1>     test eax, eax
   348 00004816 0F8482020000        <1>     jz .badFmtErr
   349 0000481C 3B05(6AD90300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   350 00004822 0F8576020000        <1>     jne .badFmtErr
   351                              <1>     ;Data read ok, now fill in any zeros needed
   352 00004828 8B05(6AD90300)      <1>     mov eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   353 0000482E 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   354 00004831 3B05(62D90300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   355 00004837 730E                <1>     jae .skipPadding
   356 00004839 51                  <1>     push rcx
   357 0000483A 8B0D(62D90300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]
   358 00004840 29C1                <1>     sub ecx, eax    ;Get number of bytes to pad with in ecx
   359                              <1>     ;rdi points to pad space
   360 00004842 31C0                <1>     xor eax, eax
   361 00004844 F3AA                <1>     rep stosb   ;Pad that many zeros
   362 00004846 59                  <1>     pop rcx
   363                              <1> .skipPadding:
   364 00004847 FFC9                <1>     dec ecx ;Decrement our section counter
   365 00004849 7419                <1>     jz .doExeFixups
   366                              <1>     ;Read next section header in here
   367 0000484B 51                  <1>     push rcx
   368 0000484C 57                  <1>     push rdi
   369 0000484D 30C0                <1>     xor al, al  ;Move rel start of file
   370 0000484F 8B55C4              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   371 00004852 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   372 00004856 31C9                <1>     xor ecx, ecx
   373 00004858 E852E5FFFF          <1>     call lseekHdl
   374 0000485D 5F                  <1>     pop rdi
   375 0000485E 59                  <1>     pop rcx
   376 0000485F E954FFFFFF          <1>     jmp .loadLp
   377                              <1> .doExeFixups:
   378                              <1> ;Here we fixup addresses as needed
   379                              <1> ;Program Entrypoint is saved in the header structure in the SDA
   380                              <1> ;Move File pointer to COFF header Coff + optional header sizes
   381                              <1> ;We look only for .reloc segment. We have it in memory too so use it to make 
   382                              <1> ; fixups. Zero the in memory image of reloc segment once we are done with it. 
   383                              <1> ;We checked that .reloc exists so all ok
   384 00004864 8B15(56D90300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   385 0000486A 8B55CC              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   386 0000486D 81C2AC000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   387                              <1>     ;eax now points to position in file of direcotry entry for reloc
   388 00004873 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   389 00004877 31C0                <1>     xor eax, eax
   390 00004879 E831E5FFFF          <1>     call lseekHdl   ;Move handle there in file
   391 0000487E 8945C4              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   392 00004881 B908000000          <1>     mov ecx, imageDataDirectory_size
   393                              <1>     ;Read 8 bytes into sectHdr space
   394 00004886 488D15(5AD90300)    <1>     lea rdx, sectHdr
   395 0000488D E82D020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   396                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   397 00004892 8B35(5AD90300)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   398 00004898 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   399 0000489A 0F840D010000        <1>     jz .buildChildPSP   ;... including if overlay
   400 000048A0 480375D8            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   401                              <1>     ;Now rsi points to where in memory the relocation data table is
   402                              <1>     ;Now compute the relocation factor 
   403 000048A4 488B45D8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   404 000048A8 482B05(02D90300)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   405                              <1>     ;The value in rax gives how much to subtract by
   406 000048AF 807D0003            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   407 000048B3 7507                <1>     jne .notOverlayReloc
   408 000048B5 488B5DF8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   409 000048B9 034308              <1>     add eax, dword [rbx + loadOvly.dRelocFct]   ;Add the overlay reloc factor
   410                              <1> .notOverlayReloc:
   411 000048BC 488945C4            <1>     mov qword [rbp - execFrame.qRelocVal], rax  ;Save relocation value
   412 000048C0 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   413                              <1>     ;rsi points to relocation data table in memory
   414 000048C3 8B0D(5ED90300)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   415 000048C9 81F900000000        <1>     cmp ecx, 0    ;If no relocations, skip
   416 000048CF 0F84D8000000        <1>     jz .buildChildPSP
   417 000048D5 488B7DD8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   418                              <1>     ;rsi points to the first base relocation block. The relocations begin
   419                              <1>     ; after the first block
   420                              <1>     ;ecx has the number of base relocation blocks to process.
   421                              <1> .nextBlock:
   422 000048D9 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   423 000048DA 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   424 000048DC 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   425 000048DF 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes
   426 000048E2 D1E9                <1>     shr ecx, 1  ;Divide by 2 to get number of words = # of relocs to do
   427 000048E4 67E311              <1>     jecxz .blockDone
   428                              <1> .blockNotDone:
   429 000048E7 66AD                <1>     lodsw   ;Get the next page offset word
   430 000048E9 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   431 000048EE 4801C7              <1>     add rdi, rax    ;Add this offset to rdi, the pointer to program image
   432                              <1>     ;rdi points to qword to rebase
   433 000048F1 48011F              <1>     add qword [rdi], rbx    ;Relocation factor was saved in rbx
   434 000048F4 FFC9                <1>     dec ecx
   435 000048F6 75EF                <1>     jnz .blockNotDone
   436                              <1> .blockDone:
   437 000048F8 59                  <1>     pop rcx
   438 000048F9 FFC9                <1>     dec ecx
   439 000048FB 75DC                <1>     jnz .nextBlock
   440 000048FD 8B05(FAD80300)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   441 00004903 480345D8            <1>     add rax, qword [rbp - execFrame.pProgBase]
   442 00004907 488945CC            <1>     mov qword [rbp - execFrame.pProgEP], rax
   443 0000490B E99D000000          <1>     jmp .buildChildPSP
   444                              <1> .loadCom:
   445                              <1>     ;File is open here, so just read the file into memory. 
   446                              <1>     ;The file cannot exceed 64Kb in size. COM ONLY for small files!!!!
   447                              <1>     ;Allocate 64Kb of memory, or as much as we can
   448 00004910 807D0003            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   449 00004914 744C                <1>     je .comOverlay
   450 00004916 BBFFFF0000          <1>     mov ebx, 0FFFFh ;64Kb pls
   451 0000491B 895DD0              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   452 0000491E E894F4FFFF          <1>     call allocateMemory
   453 00004923 734A                <1>     jnc .comallocOk
   454 00004925 3C08                <1>     cmp al, errNoMem
   455 00004927 0F8576010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   456                              <1>     ;rbx should have the amount available
   457                              <1>     ;We check if this value is psp_size more than filesize
   458 0000492D 53                  <1>     push rbx    ;Save new minimum size
   459 0000492E B802000000          <1>     mov eax, 2    ;Reposition to end of file
   460 00004933 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   461 00004937 31D2                <1>     xor edx, edx    ;Go to end of file
   462 00004939 E871E4FFFF          <1>     call lseekHdl
   463                              <1>     ;eax has file size
   464 0000493E 5B                  <1>     pop rbx ;Get back max alloc size
   465 0000493F 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   466 00004941 29C2                <1>     sub edx, eax
   467 00004943 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   468 00004949 0F82F0FCFFFF        <1>     jb .insufficientMemory   ;Fail
   469 0000494F 895DD0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   470 00004952 E860F4FFFF          <1>     call allocateMemory
   471 00004957 0F8246010000        <1>     jc .cleanAndFail
   472 0000495D E90D000000          <1>     jmp .comallocOk
   473                              <1> .comOverlay:
   474                              <1>     ;Here we simply read the file into the buffer provided
   475 00004962 488B5DF8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   476 00004966 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   477 00004969 488945D8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   478 0000496D EB0A                <1>     jmp short .comRead
   479                              <1> .comallocOk:
   480                              <1>     ;rax should point to the first byte
   481 0000496F 488945E0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   482 00004973 480500010000        <1>     add rax, psp_size
   483                              <1> .comRead:
   484 00004979 488945D8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   485                              <1> 
   486 0000497D B802000000          <1>     mov eax, 2    ;Reposition to end of file
   487 00004982 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   488 00004986 31D2                <1>     xor edx, edx    ;Go to end of file
   489 00004988 E822E4FFFF          <1>     call lseekHdl
   490                              <1>     ;eax has filesize now
   491 0000498D 50                  <1>     push rax    ;Save filesize
   492 0000498E 31C0                <1>     xor eax, eax    ;Reposition to start of file
   493 00004990 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   494 00004994 31D2                <1>     xor edx, edx    ;Go to start of file
   495 00004996 E814E4FFFF          <1>     call lseekHdl
   496 0000499B 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   497 0000499C 488B55D8            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   498 000049A0 E81A010000          <1>     call .readDataFromHdl   ;Read from the file handle
   499 000049A5 488B45D8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   500 000049A9 488945CC            <1>     mov qword [rbp - execFrame.pProgEP], rax
   501                              <1> .buildChildPSP:
   502                              <1>     ;We can close handle now
   503 000049AD 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   504 000049B1 55                  <1>     push rbp
   505 000049B2 E896E2FFFF          <1>     call closeFileHdl   ;Close the file
   506 000049B7 5D                  <1>     pop rbp
   507                              <1> 
   508                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   509 000049B8 807D0003            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   510 000049BC 0F84BA000000        <1>     je .overlayExit
   511                              <1>     ;Now build the PSP
   512 000049C2 8B75D0              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   513 000049C5 488B55E0            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   514 000049C9 52                  <1>     push rdx
   515 000049CA 55                  <1>     push rbp
   516 000049CB E84DF9FFFF          <1>     call createPSP
   517 000049D0 5D                  <1>     pop rbp
   518 000049D1 5A                  <1>     pop rdx
   519                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   520 000049D2 488915(81C30300)    <1>     mov qword [currentPSP], rdx
   521 000049D9 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   522 000049E0 48893D(79C30300)    <1>     mov qword [currentDTA], rdi ;and set it!
   523                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   524                              <1>     ; and set FS to point to the PSP
   525 000049E7 488B5DF8            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   526 000049EB 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   527 000049EF B980000000          <1>     mov ecx, 80h
   528 000049F4 F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   529                              <1> 
   530 000049F6 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   531 000049FA B925000000          <1>     mov ecx, fcb_size
   532 000049FF 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   533 00004A03 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   534 00004A05 F3A4                <1>     rep movsb   ;Copy fcb 1 over
   535 00004A07 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   536 00004A0B B925000000          <1>     mov ecx, fcb_size
   537 00004A10 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   538 00004A14 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   539 00004A16 F3A4                <1>     rep movsb   ;Copy fcb 2 over
   540                              <1> 
   541 00004A18 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   542 00004A1A 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   543                              <1> 
   544                              <1>     ;Put PSP base value in edx:eax to place in FS, dont rely on this in future!
   545 00004A1D B9000100C0          <1>     mov ecx, 0C0000100h ;R/W FS MSR
   546 00004A22 89D0                <1>     mov eax, edx    ;Move low dword address into rax
   547 00004A24 48C1EA20            <1>     shr rdx, 20h    ;Shift high dword in low dword
   548 00004A28 0F30                <1>     wrmsr   ;Write the new value to FS MSR
   549                              <1> 
   550 00004A2A E8BB060000          <1>     call getUserRegs    ;Need to get Int 42h address from stack
   551 00004A2F 488B4648            <1>     mov rax, qword [rsi + callerFrame.rip]  ;Get parent return address
   552 00004A33 4889470A            <1>     mov qword [rdi + psp.oldInt42h], rax    ;and save it in PSP
   553 00004A37 4889C2              <1>     mov rdx, rax    ;Move return address to rdx to set up the Interrupt Vector
   554 00004A3A B042                <1>     mov al, 42h
   555 00004A3C E8B80C0000          <1>     call setIntVector   ;bx preserved by this call
   556                              <1> 
   557                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   558 00004A41 88D8                <1>     mov al, bl
   559 00004A43 30DB                <1>     xor bl, bl
   560 00004A45 E8C4060000          <1>     call setDrive
   561 00004A4A 7302                <1>     jnc .drive1Ok
   562 00004A4C B3FF                <1>     mov bl, -1
   563                              <1> .drive1Ok:
   564 00004A4E 88F8                <1>     mov al, bh
   565 00004A50 30FF                <1>     xor bh, bh
   566 00004A52 E8B7060000          <1>     call setDrive
   567 00004A57 7302                <1>     jnc .drive2Ok
   568 00004A59 B7FF                <1>     mov bh, -1
   569                              <1> .drive2Ok:
   570                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   571                              <1>     ;rdi has pointer to psp
   572 00004A5B 8B75D0              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   573                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   574 00004A5E 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   575 00004A63 807D0000            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   576 00004A67 741C                <1>     je .xfrProgram
   577 00004A69 488B45CC            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   578 00004A6D 488B55F8            <1>     mov rdx, qword [rbp - execFrame.pParam]
   579 00004A71 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   580 00004A75 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   581 00004A79 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   582                              <1> .overlayExit:
   583 00004A7C 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   584 00004A7F 5D                  <1>     pop rbp ;Point rsp to the return address
   585 00004A80 E9BF0A0000          <1>     jmp extGoodExit ;And return!
   586                              <1> .xfrProgram:
   587 00004A85 FA                  <1>     cli
   588 00004A86 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   589 00004A89 C605(6AC30300)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   590 00004A90 FB                  <1>     sti
   591 00004A91 FF75CC              <1>     push qword [rbp - execFrame.pProgEP]
   592 00004A94 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   593 00004A97 4989F9              <1>     mov r9, rdi
   594 00004A9A 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   595                              <1>     return  ;Return to child task
    18                              <2> %%_ret:
    19 00004A9D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   596                              <1> 
   597                              <1> .badFmtErr:
   598 00004A9E B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   599                              <1> .cleanAndFail:
   600                              <1> ;Close the open file and any open resources and fail
   601 00004AA3 E82D000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   602 00004AA8 E8700A0000          <1>     call dosCrit1Exit
   603 00004AAD 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   604 00004AB1 50                  <1>     push rax    ;Save error code
   605 00004AB2 55                  <1>     push rbp
   606 00004AB3 E895E1FFFF          <1>     call closeFileHdl
   607 00004AB8 58                  <1>     pop rax
   608 00004AB9 5D                  <1>     pop rbp
   609 00004ABA E9C4FAFFFF          <1>     jmp .badExit
   610                              <1> 
   611                              <1> .readDataFromHdl:
   612                              <1> ;Input: bx = File Handle
   613                              <1> ;       ecx = Number of bytes to transfer
   614                              <1> ;       rdx = Ptr to the buffer to use
   615 00004ABF E811000000          <1>     call .clearArenaOwner   ;Entering critical section!
   616 00004AC4 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   617 00004AC8 55                  <1>     push rbp
   618 00004AC9 E8BEE1FFFF          <1>     call readFileHdl
   619 00004ACE 5D                  <1>     pop rbp
   620 00004ACF E810000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   621                              <1>     return
    18                              <2> %%_ret:
    19 00004AD4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   622                              <1> .clearArenaOwner:
   623 00004AD5 53                  <1>     push rbx
   624 00004AD6 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   625 00004AD8 E8360A0000          <1>     call dosCrit1Enter
   626 00004ADD E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   627 00004AE2 5B                  <1>     pop rbx
   628                              <1>     return
    18                              <2> %%_ret:
    19 00004AE3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   629                              <1> .setPSPArenaOwner:
   630                              <1> ;Sets the current PSP as the arena owner
   631 00004AE4 53                  <1>     push rbx
   632 00004AE5 488B1D(81C30300)    <1>     mov rbx, qword [currentPSP]
   633 00004AEC E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   634 00004AF1 E8270A0000          <1>     call dosCrit1Exit
   635 00004AF6 5B                  <1>     pop rbx
   636                              <1>     return
    18                              <2> %%_ret:
    19 00004AF7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   637                              <1> .setProgOrEnvArenaOwnerToRBX:
   638                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   639 00004AF8 9C                  <1>     pushfq
   640 00004AF9 50                  <1>     push rax
   641                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   642                              <1>     ;This is because they are set up at separate points in the routine!
   643 00004AFA 488B45D8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   644 00004AFE E80C000000          <1>     call .writeArenaHeaderOwner
   645 00004B03 488B45E8            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   646 00004B07 E803000000          <1>     call .writeArenaHeaderOwner
   647 00004B0C 58                  <1>     pop rax
   648 00004B0D 9D                  <1>     popfq
   649                              <1>     return
    18                              <2> %%_ret:
    19 00004B0E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   650                              <1> .writeArenaHeaderOwner:
   651                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   652                              <1> ;       rbx = Owner ID
   653 00004B0F 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   654                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004B12 74FA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   655 00004B14 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   656 00004B1A 48895801            <1>     mov qword [rax + 1], rbx
   657                              <1>     return
    18                              <2> %%_ret:
    19 00004B1E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    35                                  %include "./Source/Kernel/Local/Local.asm"
    36                              <1> ;Localisation based functions live here
    37                              <1> 
    38                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    39                              <1> ;al = 0 => Get the switch char
    40                              <1> ;al = 1 => Set the switch char to whats in DL
    41                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
    42                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
    43                              <1> ;       Always returns -1 => /DEV/ optional
    44                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    45                              <1> ;       Input value is ignored
    46 00004B1F 3C01                <1>     cmp al, 01
    47 00004B21 7412                <1>     je .getSC
    48 00004B23 7209                <1>     jb .setSC
    49 00004B25 3C03                <1>     cmp al, 03
    50 00004B27 7214                <1>     jb .getDev
    51 00004B29 741C                <1>     je .setDev
    52 00004B2B B0FF                <1>     mov al, -1
    53                              <1>     return
    18                              <2> %%_ret:
    19 00004B2D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> .setSC:
    55 00004B2E 8815(33C30300)      <1>     mov byte [switchChar], dl
    56                              <1>     return
    18                              <2> %%_ret:
    19 00004B34 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    57                              <1> .getSC:
    58 00004B35 8A15(33C30300)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    59 00004B3B EB02                <1>     jmp short .getRet
    60                              <1> .getDev:
    61 00004B3D B2FF                <1>     mov dl, -1
    62                              <1> .getRet:
    63 00004B3F E8A6050000          <1>     call getUserRegs
    64 00004B44 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    65                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    66                              <1>     return
    18                              <2> %%_ret:
    19 00004B47 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    67                              <1> 
    68                              <1> 
    69                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    70                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    71                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    72 00004B48 C3                  <1>     ret
    36                                  %include "./Source/Kernel/ctrlc.asm"
    37                              <1> diskDevErr:
    38                              <1> ;Called, NOT Jumped to. 
    39                              <1> ;Input: rdi = Disk Buffer pointer
    40                              <1> ;       eax = Status word (Zero Extended)
    41                              <1> ;       rbp = Disk DPB pointer
    42                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    43                              <1> ;Output: al = Int 44h response (0-3)
    44                              <1> ; All other registers preserved
    45 00004B49 48893D(71C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    46 00004B50 89C7                <1>     mov edi, eax    ;Store status word in rdi
    47 00004B52 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    48 00004B55 8A25(C9C30300)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    49 00004B5B 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    50                              <1>     ;Test for correct buffer data type
    51 00004B5E 53                  <1>     push rbx    ;Save rbx temporarily
    52 00004B5F 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    53 00004B62 F6C301              <1>     test bl, dosBuffer
    54 00004B65 7505                <1>     jnz .df0
    55 00004B67 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    56 00004B6A EB17                <1>     jmp short .df3
    57                              <1> .df0:
    58 00004B6C F6C302              <1>     test bl, fatBuffer
    59 00004B6F 7505                <1>     jnz .df1
    60 00004B71 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    61 00004B74 EB0D                <1>     jmp short .df3
    62                              <1> .df1:
    63 00004B76 F6C304              <1>     test bl, dirBuffer
    64 00004B79 7505                <1>     jnz .df2
    65 00004B7B 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    66 00004B7E EB03                <1>     jmp short .df3
    67                              <1> .df2:
    68 00004B80 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    69                              <1> .df3:
    70 00004B83 5B                  <1>     pop rbx
    71 00004B84 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    72 00004B88 E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    73 00004B8D 488B2D(E0C60300)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    74 00004B94 488B3D(71C30300)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    75                              <1>     return
    18                              <2> %%_ret:
    19 00004B9B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    76                              <1> 
    77                              <1> charDevErr:
    78                              <1> ;Called with ah with additional bits
    79 00004B9C 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
    80                              <1> criticalErrorSetup:
    81 00004B9F 8825(C9C30300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    82 00004BA5 48892D(E0C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
    83 00004BAC 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    84                              <1>     ;For now, fall through, but need much work to change it later! 
    85                              <1> 
    86                              <1> 
    87                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    88                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    89                              <1> ; to the critical error handler.
    90                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    91                              <1> ; and with Int44Bitfield set
    92                              <1> ;               AH = Critical Error Bitfield
    93                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    94                              <1> ;               Bit 6 - Reserved
    95                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    96                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    97                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    98                              <1> ;               Bits [2-1] = Affected Disk Error
    99                              <1> ;                     0 0   DOS area
   100                              <1> ;                     0 1   FAT area
   101                              <1> ;                     1 0   Directory area
   102                              <1> ;                     1 1   Data area
   103                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   104                              <1> ;               AL  = Failing drive number if AH[7] = 0
   105                              <1> ;               DIL = Error code for errorMsg
   106                              <1> ;               RSI = EA of Device Header for which device the error occured
   107                              <1> ;Return:
   108                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   109                              <1> ;                  = 1 - Retry the Operation    (Retry)
   110                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   111                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   112                              <1> ; Return response from int 44h in al
   113                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   114                              <1> ; This function will terminate the program if an abort was requested!
   115                              <1> ; This function also destroys RBP
   116 00004BB2 803D(69C30300)01    <1>     cmp byte [critErrFlag], 1
   117 00004BB9 7204                <1>     jb .noIntError  ;If not 0, enter
   118 00004BBB B003                <1>     mov al, critFail    ;Else, return Fail always
   119 00004BBD EB4F                <1>     jmp short .exit     ;Don't translate fail to abort
   120                              <1> .noIntError:
   121 00004BBF FA                  <1>     cli ;Disable Interrupts
   122 00004BC0 FE05(69C30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   123 00004BC6 FE0D(6AC30300)      <1>     dec byte [inDOS]    ;Exiting DOS
   124 00004BCC 488925(C1C30300)    <1>     mov qword [xInt44hRSP], rsp
   125 00004BD3 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   126 00004BDA 31ED                <1>     xor ebp, ebp    ;Always zeroed
   127 00004BDC CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   128 00004BDE 488B25(C1C30300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   129 00004BE5 C605(69C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   130 00004BEC FE05(6AC30300)      <1>     inc byte [inDOS]    ;Reenter DOS
   131 00004BF2 FB                  <1>     sti ;Reenable Interrupts
   132                              <1>     ;Now we check that the response given was allowed, and translate if needed
   133                              <1> .checkResponse:
   134 00004BF3 3C01                <1>     cmp al, critRetry
   135 00004BF5 721F                <1>     jb .checkIgnore
   136 00004BF7 7428                <1>     je .checkRetry
   137 00004BF9 3C03                <1>     cmp al, critFail
   138 00004BFB 752F                <1>     jne .abort   ;Must be abort
   139                              <1> .setFail:   ;Here is for fail
   140 00004BFD B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   141 00004BFF FE05(CBC30300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   142 00004C05 F605(C9C30300)08    <1>     test byte [Int44bitfld], critFailOK
   143 00004C0C 751E                <1>     jnz .abort  ;If fail not permitted, abort
   144                              <1> .exit:
   145 00004C0E C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   146                              <1>     return
    18                              <2> %%_ret:
    19 00004C15 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   147                              <1> .checkIgnore:
   148 00004C16 F605(C9C30300)20    <1>     test byte [Int44bitfld], critIgnorOK
   149 00004C1D 75EF                <1>     jnz .exit
   150 00004C1F EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   151                              <1> .checkRetry:
   152 00004C21 F605(C9C30300)10    <1>     test byte [Int44bitfld], critRetryOK
   153 00004C28 75E4                <1>     jnz .exit   
   154 00004C2A EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   155                              <1> .abort:
   156                              <1> ;Prepare to abort. We abort from within!
   157                              <1>     ;First check if the process is it's own parent.
   158                              <1>     ;If it is, we exit fail and return to the process
   159 00004C2C 488B05(81C30300)    <1>     mov rax, qword [currentPSP] ;Get the current psp
   160 00004C33 53                  <1>     push rbx
   161 00004C34 488B5822            <1>     mov rbx, qword [rax + psp.parentPtr]
   162 00004C38 4839C3              <1>     cmp rbx, rax    ;Check if the process is it's own parent
   163 00004C3B 5B                  <1>     pop rbx
   164 00004C3C 7509                <1>     jne .kill   ;If the process is not it's own parent, we kill the process
   165 00004C3E C605(F7C30300)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   166 00004C45 EBB6                <1>     jmp short .setFail
   167                              <1> .kill:
   168 00004C47 66893D(6DC30300)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   169 00004C4E 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   170 00004C50 C605(60C60300)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   171 00004C57 E9DFF7FFFF          <1>     jmp terminateClean.altEP
   172                              <1> 
   173                              <1> ctrlBreakHdlr:
   174 00004C5C B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   175 00004C5E E88DD8FFFF          <1>     call printCaretASCII
   176 00004C63 E8B8D8FFFF          <1>     call printCRLF
   177                              <1>     ;Reset the console back to 0
   178 00004C68 C605(F5C30300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   179                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   180 00004C6F FA                  <1> 	cli
   181 00004C70 488B25(DCC30300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   182 00004C77 E869080000          <1> 	call dosPopRegs ;Get user state back
   183 00004C7C 488925(89C30300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   184 00004C83 F8                  <1>     clc
   185 00004C84 CD43                <1>     int 43h ;Call critical error handler
   186 00004C86 FA                  <1>     cli ;Clear interrupts again
   187 00004C87 488905(95C30300)    <1>     mov qword [oldRAX], rax ;Save rax
   188 00004C8E 9C                  <1>     pushfq  ;Get flags in rax
   189 00004C8F 58                  <1>     pop rax 
   190 00004C90 483B25(89C30300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   191 00004C97 750C                <1>     jne .checkCF
   192                              <1> .returnToDOS:
   193 00004C99 488B05(95C30300)    <1>     mov rax, qword [oldRAX]
   194 00004CA0 E9E6060000          <1>     jmp functionDispatch    ;Goto int 41h
   195                              <1> .checkCF:
   196 00004CA5 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   197 00004CAC A801                <1>     test al, 1  ;CF set?
   198 00004CAE 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   199 00004CB0 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   200 00004CB5 C605(EDC30300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   201 00004CBC E9CA060000          <1>     jmp functionDispatch
   202                              <1> 
    37                                  %include "./Source/Kernel/dosPrim.asm"
    38                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    39                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    40                              <1> 
    41                              <1> dosDefCritErrHdlr:
    42                              <1> ;The DOS default critical error handler always returns FAIL
    43 00004CC1 B003                <1>     mov al, critFail
    44 00004CC3 48CF                <1>     iretq
    45                              <1> goDriverChar:
    46                              <1> ;Shortcut for Char requests, make a driver request
    47                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    48 00004CC5 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    49                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    50                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    51                              <1> ;       rbx = Ptr to the request header for the driver call!
    52 00004CC9 E859080000          <1>     call dosCrit2Enter
    53 00004CCE FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    54 00004CD1 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    55 00004CD4 E858080000          <1>     call dosCrit2Exit
    56                              <1>     return
    18                              <2> %%_ret:
    19 00004CD9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    57                              <1> 
    58                              <1> setupPhysicalDiskRequest:
    59                              <1> ;Ensure that al has valid disk number
    60                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    61                              <1> ;If CF=NC, rbp = DPB ptr.
    62                              <1> ;If CF=CY, exit error
    63 00004CDA 84C0                <1>     test al, al
    64 00004CDC 723F                <1>     jc .diskError
    65 00004CDE 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
    66 00004CE4 7337                <1>     jae .diskError
    67 00004CE6 50                  <1>     push rax
    68 00004CE7 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    69 00004CE9 E889040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    70 00004CEE 58                  <1>     pop rax
    71 00004CEF 7235                <1>     jc .error
    72 00004CF1 8805(63C60300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    73 00004CF7 488B2D(6CC60300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    74 00004CFE 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    75 00004D06 750A                <1>     jnz .netError
    76 00004D08 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    77 00004D0C E864030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    78                              <1>     return
    18                              <2> %%_ret:
    19 00004D11 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    79                              <1> .netError:
    80 00004D12 66C705(6DC30300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    80 00004D1A 00                  <1>
    81 00004D1B EB09                <1>     jmp short .error
    82                              <1> .diskError:
    83 00004D1D 66C705(6DC30300)0F- <1>     mov word [errorExCde], errBadDrv
    83 00004D25 00                  <1>
    84                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    85 00004D26 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk
    86 00004D2D C605(6FC30300)07    <1>     mov byte [errorAction], eActRetUsr
    87 00004D34 C605(70C30300)09    <1>     mov byte [errorClass], eClsBadFmt
    88 00004D3B F9                  <1>     stc
    89                              <1>     return
    18                              <2> %%_ret:
    19 00004D3C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    90                              <1> 
    91                              <1> setupAbsDiskEntry:
    92                              <1> ;Prepares to sets up the CDS and DPB for the request
    93 00004D3D FE05(6AC30300)      <1>     inc byte [inDOS]
    94 00004D43 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    95 00004D44 FC                  <1>     cld ;Set string ops in the right direction
    96 00004D45 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    97 00004D4A 7223                <1>     jc .exit    ;Error exit
    98 00004D4C C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    99 00004D53 56                  <1>     push rsi
   100 00004D54 50                  <1>     push rax
   101 00004D55 488D35(7FC40300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
   102 00004D5C 8806                <1>     mov byte [rsi], al  ;Construct a path
   103 00004D5E 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
   104 00004D61 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
   105 00004D65 F8                  <1>     clc
   106                              <1> ;++++++++++++++++++++++++++++
   107                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
   108                              <1> ;Entered with path in rsi (ah=03h)
   109 00004D66 B800030000          <1>     mov eax, 0300h  
   110 00004D6B CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   111                              <1> ;++++++++++++++++++++++++++++
   112 00004D6D 58                  <1>     pop rax
   113 00004D6E 5E                  <1>     pop rsi
   114                              <1> .exit:
   115 00004D6F 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   116                              <1>     return
    18                              <2> %%_ret:
    19 00004D71 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   117                              <1> 
   118                              <1> absDiskWrite:       ;Int 46h
   119                              <1> ;al = Drive number
   120                              <1> ;rbx = Memory Buffer address to read from
   121                              <1> ;ecx = Number of sectors to write
   122                              <1> ;rdx = Start LBA to write to
   123 00004D72 FA                  <1>     cli
   124 00004D73 488925(DCC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   125 00004D7A 488D25(E0D80300)    <1>     lea rsp, DiskStakTop
   126 00004D81 55                  <1>     push rbp
   127 00004D82 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   128 00004D83 E8B5FFFFFF          <1>     call setupAbsDiskEntry
   129 00004D88 7252                <1>     jc absDiskExit
   130 00004D8A E8D3010000          <1>     call primReqWriteSetup
   131 00004D8F EB1D                <1>     jmp short absDiskReadWriteCommon
   132                              <1> absDiskRead:        ;Int 45h
   133                              <1> ;al = Drive number
   134                              <1> ;rbx = Memory Buffer address to write to
   135                              <1> ;ecx = Number of sectors to read
   136                              <1> ;rdx = Start LBA to read from
   137 00004D91 FA                  <1>     cli 
   138 00004D92 488925(DCC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   139 00004D99 488D25(E0D80300)    <1>     lea rsp, DiskStakTop
   140 00004DA0 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   141 00004DA1 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   142 00004DA2 E896FFFFFF          <1>     call setupAbsDiskEntry
   143 00004DA7 7233                <1>     jc absDiskExit
   144 00004DA9 E8BF010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   145                              <1> absDiskReadWriteCommon:
   146                              <1> ;Entered with the appropriate function number in ah
   147                              <1> ; and primary request header in rbx
   148 00004DAE E83B000000          <1>     call absDiskDriverCall
   149 00004DB3 7427                <1>     jz absDiskExit  ;Skip error code checking
   150 00004DB5 8A05(25C40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   151                              <1>     ;DOS uses the following pairs in a table
   152                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   153 00004DBB B480                <1>     mov ah, 80h ;Attachment failure
   154 00004DBD 3C0C                <1>     cmp al, 0Ch ;Gen error
   155 00004DBF 741A                <1>     je .absExit
   156 00004DC1 B440                <1>     mov ah, 40h ;Seek error
   157 00004DC3 3C06                <1>     cmp al, 06h
   158 00004DC5 7414                <1>     je .absExit
   159 00004DC7 B408                <1>     mov ah, 08h ;Bad CRC
   160 00004DC9 3C04                <1>     cmp al, 04h
   161 00004DCB 740E                <1>     je .absExit
   162 00004DCD B404                <1>     mov ah, 04h ;Sector not found
   163 00004DCF 3C08                <1>     cmp al, 08h
   164 00004DD1 7408                <1>     je .absExit
   165 00004DD3 30E4                <1>     xor ah, ah  ;Write Protect Violation
   166 00004DD5 84C0                <1>     test al, al
   167 00004DD7 7402                <1>     je .absExit
   168 00004DD9 B402                <1>     mov ah, 02h ;Other Error
   169                              <1> .absExit:
   170 00004DDB F9                  <1>     stc
   171                              <1> absDiskExit:
   172 00004DDC 5B                  <1>     pop rbx
   173 00004DDD 5D                  <1>     pop rbp
   174 00004DDE FA                  <1>     cli
   175 00004DDF FE0D(6AC30300)      <1>     dec byte [inDOS]
   176 00004DE5 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP]
   177 00004DEC FB                  <1>     sti ;Reenable interrupts
   178                              <1>     return ;Return from interrupt without popping flags!
    18                              <2> %%_ret:
    19 00004DED C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   179                              <1> absDiskDriverCall:
   180                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   181                              <1> ;       rbx = Request header address
   182                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   183                              <1> ;       eax = Status word from request
   184                              <1> ;       ecx = Number of sectors transferred
   185 00004DEE 56                  <1>     push rsi
   186                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   187 00004DEF 8B0D(38C40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   188                              <1>     ;Prepare for goDriver now
   189 00004DF5 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   190 00004DF9 E8CBFEFFFF          <1>     call goDriver   ;Make request
   191 00004DFE 5E                  <1>     pop rsi
   192 00004DFF 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   193 00004E05 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   194 00004E07 0FB705(25C40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   195 00004E0E 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   196                              <1>     return
    18                              <2> %%_ret:
    19 00004E12 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> getDiskDPB:
   199                              <1> ;Gets the disk DPB if the Disk is valid
   200                              <1> ;Otherwise will return a pointer to the drive DPB
   201                              <1> ;Called with rdi pointing to the CDS
   202                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   203 00004E13 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   204 00004E17 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   205 00004E1A 8805(63C60300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   206 00004E20 E850020000          <1>     call setWorkingDPB
   207 00004E25 57                  <1>     push rdi    ;Save the CDS ptr
   208 00004E26 E85A000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   209 00004E2B 5F                  <1>     pop rdi
   210 00004E2C 7233                <1>     jc .exitBad ;Preserve CF
   211 00004E2E 7530                <1>     jnz .exit
   212                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   213 00004E30 8A0D(70C00300)      <1>     mov cl, byte [lastdrvNum]
   214 00004E36 31C0                <1>     xor eax, eax
   215 00004E38 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   216 00004E3B 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   217 00004E3F 488B3D(5DC00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   218                              <1> .checkCDS:
   219 00004E46 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   220 00004E4A 7509                <1>     jne .next
   221 00004E4C 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   222 00004E50 7403                <1>     jz .next    ;IF yes, skip it
   223 00004E52 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   224                              <1> .next:
   225 00004E55 4881C75B000000      <1>     add rdi, cds_size
   226 00004E5C FEC9                <1>     dec cl
   227 00004E5E 75E6                <1>     jnz .checkCDS
   228                              <1> .exit:
   229 00004E60 F8                  <1>     clc
   230                              <1> .exitBad:
   231                              <1>     return
    18                              <2> %%_ret:
    19 00004E61 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   232                              <1> 
   233                              <1> checkIfMedCheck:
   234                              <1> ;Input: rsi = DPB for disk
   235 00004E62 50                  <1>     push rax
   236 00004E63 53                  <1>     push rbx
   237                              <1>     ;!!!!!!!!!!!!
   238                              <1>     ;For now just if its the same disk, be ok with it.
   239                              <1>     ;!!!!!!!!!!!!
   240                              <1>     ;Read the clock record. Cross Day Bndry will always force a new operation
   241                              <1>     ;Read the time fields directly.
   242 00004E64 E803D5FFFF          <1>     call swapPrimaryHeader  ;Save the primary header temporarily
   243 00004E69 E850DBFFFF          <1>     call readDateTimeRecord ;Update the time
   244 00004E6E F9                  <1>     stc ;Set CF, write backup to primary header
   245 00004E6F E8F8D4FFFF          <1>     call swapPrimaryHeader
   246                              <1> 
   247                              <1> 
   248 00004E74 8A06                <1>     mov al, byte [rsi + dpb.bDriveNumber] 
   249 00004E76 3805(ACD90300)      <1>     cmp byte [lastDiskNum], al
   250 00004E7C 7500                <1>     jnz .exit
   251                              <1> 
   252                              <1> .exit:
   253 00004E7E 5B                  <1>     pop rbx
   254 00004E7F 58                  <1>     pop rax
   255                              <1>     return
    18                              <2> %%_ret:
    19 00004E80 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   256                              <1> .okTime:
   257 00004E81 31DB                <1>     xor ebx, ebx
   258 00004E83 EBF9                <1>     jmp short .exit
   259                              <1> ensureDiskValid:
   260                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   261                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   262                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   263                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   264                              <1> .medChk:
   265 00004E85 E82C010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   266                              <1> ;Return in rbx the req hdr address
   267 00004E8A 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   268 00004E8E E836FEFFFF          <1>     call goDriver   ;Request!
   269 00004E93 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   270 00004E97 F7C700800000        <1>     test edi, drvErrStatus
   271 00004E9D 756F                <1>     jnz .diskDrvCritErrMedChk
   272                              <1> .medChkIgnore:
   273 00004E9F 8A05(63C60300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   274 00004EA5 30E4                <1>     xor ah, ah
   275 00004EA7 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   276 00004EAA 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   277 00004EAD 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   278 00004EAF 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   279 00004EB1 E894BAFFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   280 00004EB6 F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   281 00004EB7 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   282                              <1>     ;ZF=NZ from test for dirty buffers
   283                              <1> .exit:
   284                              <1>     return
    18                              <2> %%_ret:
    19 00004EB9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   285                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   286 00004EBA C605(E8D80300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   287 00004EC1 E8A8BAFFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   288                              <1>     ;Get a buffer to read BPB into in rdi
   289 00004EC6 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   290 00004EC8 E88DBCFFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   291 00004ECD 72EA                <1>     jc .exit    ;Immediately exit with the carry flag set
   292 00004ECF 4889DF              <1>     mov rdi, rbx
   293                              <1> .repeatEP:
   294 00004ED2 E80B010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   295 00004ED7 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   296 00004EDB E8E9FDFFFF          <1>     call goDriver   ;Request!
   297 00004EE0 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   298 00004EE4 A900800000          <1>     test eax, drvErrStatus
   299 00004EE9 7561                <1>     jnz .diskDrvCritErrBPB
   300                              <1>     ;Now rebuild the dpb fields for this drive
   301 00004EEB 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   302 00004EEF E819090000          <1>     call createDPB  
   303 00004EF4 E8A6BAFFFF          <1>     call setBufferReferenced    ;We are now done with the buffer
   304                              <1>     ;Adjust the buffer header information
   305 00004EF9 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   306 00004EFC 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   307 00004EFF 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   308 00004F02 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   309 00004F05 30E4                <1>     xor ah, ah
   310 00004F07 8825(E8D80300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   311                              <1>     return
    18                              <2> %%_ret:
    19 00004F0D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   312                              <1> .diskDrvCritErrMedChk:
   313                              <1> ;Critical Errors fall through here
   314                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   315 00004F0E 48893D(71C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   316 00004F15 48892D(E0C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   317 00004F1C 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   318 00004F1F B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   319 00004F21 8825(C9C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   320 00004F27 E886FCFFFF          <1>     call criticalDOSError
   321 00004F2C 488B3D(71C30300)    <1>     mov rdi, qword [xInt44RDI]
   322 00004F33 488B2D(E0C60300)    <1>     mov rbp, qword [tmpDPBPtr]
   323 00004F3A 3C01                <1>     cmp al, critRetry
   324 00004F3C 0F8443FFFFFF        <1>     je .medChk
   325 00004F42 3C00                <1>     cmp al, critIgnore
   326 00004F44 0F8455FFFFFF        <1>     je .medChkIgnore
   327 00004F4A F9                  <1>     stc ;Set error flag to indicate fail
   328                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00004F4B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> .diskDrvCritErrBPB:
   331                              <1>     ;eax has status word, rbp has dpb ptr
   332                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   333 00004F4C C605(C9C30300)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   334 00004F53 E8F1FBFFFF          <1>     call diskDevErr
   335 00004F58 3C01                <1>     cmp al, critRetry
   336 00004F5A 0F8472FFFFFF        <1>     je .repeatEP
   337                              <1>     ;Else we fail (Ignore=Fail here)
   338 00004F60 F9                  <1>     stc ;Set error flag to indicate fail
   339                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00004F61 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   340                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   341                              <1> ;           Primitive Driver Requests
   342                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   343                              <1> ;First are Disk requests, then Char device requests
   344                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   345                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   346                              <1> 
   347                              <1> primReqWriteSetup:
   348 00004F62 50                  <1>     push rax
   349 00004F63 B408                <1>     mov ah, drvWRITE    ;Command code
   350 00004F65 0225(32C30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   351 00004F6B EB03                <1>     jmp short primReqRWCommon
   352                              <1> primReqReadSetup:
   353 00004F6D 50                  <1>     push rax
   354 00004F6E B404                <1>     mov ah, drvREAD
   355                              <1> primReqRWCommon:
   356                              <1> ;Sets up the IO request packet with:
   357                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   358                              <1> ; rbx = Data storage buffer ptr
   359                              <1> ; ecx = Number of sectors to transfer
   360                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   361                              <1> ; ~~~~ Set by entry function ~~~~ 
   362                              <1> ; ah = Command code
   363                              <1> ; All regs preserved EXCEPT rbx.
   364                              <1> ; Return: rbx = Transfer Address
   365 00004F70 48891D(30C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   366 00004F77 890D(38C40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   367 00004F7D C605(22C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   368 00004F84 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   369 00004F89 8905(23C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   370 00004F8F 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   371 00004F92 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   372                              <1>     ;Disk operations only here!
   373 00004F94 488915(3CC40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   374 00004F9B 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   375 00004F9E 8805(2FC40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   376 00004FA4 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   377 00004FA7 8805(23C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   378                              <1> primReqCommonExit:
   379                              <1> ;Returns in rbx the primary request header as these functions
   380                              <1> ; setup the request in the primary request header space
   381 00004FAD 58                  <1>     pop rax
   382 00004FAE 488D1D(22C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   383                              <1>     return
    18                              <2> %%_ret:
    19 00004FB5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   384                              <1> 
   385                              <1> primReqMedCheckSetup:
   386                              <1> ;Prepare the diskIO packet for mediacheck
   387                              <1> ;rbp has DPB pointer for device to check media on
   388 00004FB6 50                  <1>     push rax
   389 00004FB7 C605(22C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   390 00004FBE 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   391 00004FC1 8805(2FC40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   392 00004FC7 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   393 00004FCA 8805(23C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   394 00004FD0 C605(24C40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   395 00004FD7 66C705(25C40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   395 00004FDF 00                  <1>
   396 00004FE0 EBCB                <1>     jmp short primReqCommonExit
   397                              <1> 
   398                              <1> primReqGetBPBSetup:
   399                              <1> ;rbp has DPB pointer for device
   400                              <1> ;rdi has sector buffer header pointer for transfer
   401 00004FE2 50                  <1>     push rax
   402 00004FE3 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   403 00004FE7 48893D(30C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   404 00004FEE C605(22C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   405 00004FF5 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   406 00004FF8 8805(2FC40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   407 00004FFE 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   408 00005001 8805(23C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   409 00005007 C605(24C40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   410 0000500E 66C705(25C40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   410 00005016 00                  <1>
   411 00005017 EB94                <1>     jmp short primReqCommonExit
   412                              <1> 
   413                              <1> primReqOpenSetup:
   414                              <1> ;al = unit number if a disk device. Undefined otherwise
   415 00005019 50                  <1>     push rax
   416 0000501A B40D                <1>     mov ah, drvOPEN
   417                              <1> primReqCloseSetup:
   418                              <1> ;al = unit number if a disk device. Undefined otherwise
   419 0000501C 50                  <1>     push rax
   420 0000501D B40E                <1>     mov ah, drvCLOSE
   421                              <1> primReqOCcommon:
   422 0000501F C605(22C40300)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   423 00005026 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   424 00005027 8905(23C40300)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   425                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   426 0000502D E97BFFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   427                              <1> 
   428                              <1> secdReqCharIOReq:
   429                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   430                              <1> ;Input:
   431                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   432                              <1> ; ecx = Length of buffer
   433                              <1> ; rdi = Buffer pointer
   434                              <1> ;Output: 
   435                              <1> ; rbx = Transfer Address 
   436 00005032 488D1D(F8C30300)    <1>     lea rbx, secdReqHdr
   437 00005039 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   438 0000503C 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   439 0000503F 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   440 00005045 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   441 00005049 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   442                              <1>     return
    18                              <2> %%_ret:
    19 0000504C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   443                              <1> ;If the device which will process this request is a disk device
   444                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   445                              <1> ;Then we will read the appropriate byte from that buffer to the 
   446                              <1> ; singleIOByt buffer.
   447                              <1> ;Such a request will require additional setup with the following fields:
   448                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    38                                  %include "./Source/Kernel/dosUtils.asm"
    39                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    40                              <1> 
    41                              <1> readFSRegister:
    42                              <1> ;Output: rax = Value of fs
    43 0000504D 51                  <1>     push rcx
    44 0000504E 52                  <1>     push rdx
    45 0000504F B9000100C0          <1>     mov ecx, 0C0000100h
    46 00005054 0F32                <1>     rdmsr   ;Get fs in edx:eax
    47 00005056 48C1E220            <1>     shl rdx, 20h
    48 0000505A 4809D0              <1>     or rax, rdx
    49 0000505D 5A                  <1>     pop rdx
    50 0000505E 59                  <1>     pop rcx
    51                              <1>     return
    18                              <2> %%_ret:
    19 0000505F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    52                              <1> 
    53                              <1> writeFSRegister:
    54                              <1> ;Input: rax = Value to write to fs
    55 00005060 51                  <1>     push rcx
    56 00005061 52                  <1>     push rdx
    57 00005062 4889C2              <1>     mov rdx, rax    ;Split rax to edx:eax
    58 00005065 48C1EA20            <1>     shr rdx, 20h    ;Shift the upper dword low
    59 00005069 09C0                <1>     or eax, eax     ;Clear upper dword
    60 0000506B B9000100C0          <1>     mov ecx, 0C0000100h
    61 00005070 0F30                <1>     wrmsr
    62 00005072 5A                  <1>     pop rdx
    63 00005073 59                  <1>     pop rcx
    64                              <1>     return
    18                              <2> %%_ret:
    19 00005074 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    65                              <1> 
    66                              <1> ;Basic Drive related Utilities
    67                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    68                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    69                              <1> ; that gets set up)
    70                              <1> 
    71                              <1> setWorkingDPB:
    72                              <1> ;Gets dpb in rbp and saves to workingDPB
    73 00005075 48892D(64C60300)    <1>     mov qword [workingDPB], rbp
    74                              <1>     return
    18                              <2> %%_ret:
    19 0000507C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    75                              <1> 
    76                              <1> testCDSNet:
    77                              <1> ;Checks if the workingCDS is a redirector drive
    78                              <1> ;Returns: CF=NC => Not net
    79                              <1> ;         CF=CY => Network redirector
    80                              <1> ;         ZF=ZE => Net without CDS (\\ paths only)
    81                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    82                              <1> ;         rdi = workingCDS ptr
    83 0000507D 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
    84 00005084 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    85 0000508B 7409                <1>     je .net
    86 0000508D 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    87 00005093 7501                <1>     jnz .net ;Net with CDS
    88                              <1>     return  ;CF=NC => Not net
    18                              <2> %%_ret:
    19 00005095 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    89                              <1> .net:
    90 00005096 F9                  <1>     stc ;Set Net bit
    91                              <1>     return
    18                              <2> %%_ret:
    19 00005097 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    92                              <1> 
    93                              <1> getDiskData:
    94                              <1> ;This function returns:
    95                              <1> ;al = sectors per cluster
    96                              <1> ;ah = media ID byte
    97                              <1> ;ebx = total clusters
    98                              <1> ;cx = bytes per sector
    99                              <1> ;edx = number of available clusters
   100                              <1> ;
   101                              <1> ;If CF=CY on exit, al contains the error code
   102 00005098 E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
   103 0000509D 7308                <1>     jnc .physical
   104                              <1>     ;Beep a redir request out
   105 0000509F B80C110000          <1>     mov eax, 110Ch 
   106 000050A4 CD4F                <1>     int 4Fh
   107                              <1>     return
    18                              <2> %%_ret:
    19 000050A6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   108                              <1> .physical:
   109                              <1> ;Now we must lock the structures
   110 000050A7 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk
   111 000050AE E860040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   112 000050B3 E85BFDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
   113 000050B8 721C                <1>     jc .exit
   114 000050BA E89ABCFFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
   115 000050BF 7215                <1>     jc .exit
   116 000050C1 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   117 000050C4 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   118 000050C6 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
   119 000050C9 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
   120 000050CC FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
   121 000050CE 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
   122 000050D2 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
   123 000050D5 F8                  <1>     clc
   124                              <1> .exit:
   125 000050D6 E842040000          <1>     call dosCrit1Exit
   126                              <1>     return
    18                              <2> %%_ret:
    19 000050DB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
   129                              <1> ;Input: al = Interrupt number
   130                              <1> ;Output: rbx = Interrupt Vector
   131 000050DC 50                  <1>     push rax    ;Preserve rax, segment selector returned by call
   132 000050DD 52                  <1>     push rdx    ;Preserve rdx, Attribute Word returned by call
   133 000050DE 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   134 000050E0 B807F00000          <1>     mov eax, 0F007h
   135 000050E5 CD35                <1>     int 35h
   136 000050E7 5A                  <1>     pop rdx
   137 000050E8 58                  <1>     pop rax
   138                              <1>     return
    18                              <2> %%_ret:
    19 000050E9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   139                              <1> 
   140                              <1> getUserRegs:   ;Int 4Fh AX=1218h
   141                              <1> ;Returns ptr to user regs in rsi
   142 000050EA 488B35(DCC30300)    <1>     mov rsi, qword [oldRSP]
   143                              <1>     return
    18                              <2> %%_ret:
    19 000050F1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> 
   145                              <1> walkDPBchain:
   146                              <1> ;Called with al = 0 based drive number
   147                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
   148 000050F2 488B35(3BC00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
   149                              <1> .walk:
   150 000050F9 4881FEFFFFFFFF      <1>     cmp rsi, -1
   151 00005100 740A                <1>     je .exitBad
   152 00005102 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   153 00005104 7407                <1>     je .exit    ;Drive found
   154 00005106 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   155 0000510A EBED                <1>     jmp short .walk
   156                              <1> .exitBad:
   157 0000510C F9                  <1>     stc
   158                              <1> .exit:
   159                              <1>     return
    18                              <2> %%_ret:
    19 0000510D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   160                              <1> setDrive:   
   161                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
   162                              <1> ;Input: al = 1-based drive number
   163                              <1> ;Output: al = 0-based drive number
   164                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
   165                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
   166                              <1> ;            set.
   167 0000510E E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   168 00005113 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   169 00005115 56                  <1>     push rsi
   170 00005116 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   171 0000511D 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   172 00005123 5E                  <1>     pop rsi
   173 00005124 7401                <1>     jz .exit
   174 00005126 F9                  <1>     stc
   175                              <1> .exit:
   176                              <1>     return
    18                              <2> %%_ret:
    19 00005127 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   177                              <1> 
   178                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   179                              <1> ;Allows a redirector or subst/join to build a CDS
   180                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   181                              <1> ; volumes, that are made at system boot.
   182                              <1> ;Input: al = Drive Letter for drive
   183                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   184                              <1> ;Output: rdi = newly filled in workingCDS
   185                              <1> ;CF=NC => CDS valid and has a DPB
   186                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   187 00005128 50                  <1>     push rax
   188 00005129 2C40                <1>     sub al, "A"-1
   189 0000512B 3A05(6FC00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   190 00005131 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   191 00005138 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   192 0000513E 58                  <1>     pop rax
   193 0000513F 7235                <1>     jb .exit    ;Exit with CF=CY
   194 00005141 50                  <1>     push rax
   195 00005142 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   196 00005147 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   197 00005149 58                  <1>     pop rax
   198 0000514A 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   199 00005150 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   200 00005157 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   201 0000515F 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   202                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   203 00005165 50                  <1>     push rax
   204 00005166 56                  <1>     push rsi
   205 00005167 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   206 00005169 E884FFFFFF          <1>     call walkDPBchain
   207 0000516E 7204                <1>     jb .skipSettingDPB
   208 00005170 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   209                              <1> .skipSettingDPB:
   210 00005174 5E                  <1>     pop rsi
   211 00005175 58                  <1>     pop rax
   212                              <1> .exit:
   213                              <1>     return
    18                              <2> %%_ret:
    19 00005176 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   214                              <1> 
   215                              <1> getCDS:     ;Int 4Fh AX=1219h
   216                              <1> ;Gets the device DPB and saves it in the DOS variable
   217                              <1> ;This can be called to get CDS for network drives too!
   218                              <1> ;Input: al = 1 based drive number
   219                              <1> ;Sets workingCDS var with the CDS for the device. 
   220                              <1> ;   If device on a network, sets CF
   221                              <1> ;Returns al with 0-based drive number
   222 00005177 84C0                <1>     test al, al
   223 00005179 7508                <1>     jnz .skip
   224 0000517B 8A05(93C30300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   225 00005181 FEC0                <1>     inc al
   226                              <1> .skip:
   227 00005183 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   228 00005185 56                  <1>     push rsi
   229 00005186 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   230 0000518D F605(5CC60300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   231 00005194 7423                <1>     jz .physDrive
   232                              <1>     ;Invokation via 21/5D00
   233 00005196 50                  <1>     push rax
   234 00005197 57                  <1>     push rdi
   235 00005198 488D3D(FBC50300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   236 0000519F 48893D(6CC60300)    <1>     mov qword [workingCDS], rdi ;Make it current
   237 000051A6 0441                <1>     add al, "A" ;Convert to a drive letter
   238 000051A8 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   239 000051AD 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   240 000051B3 5F                  <1>     pop rdi
   241 000051B4 58                  <1>     pop rax
   242 000051B5 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   243 000051B7 EB17                <1>     jmp short .exitOk   ;All oki
   244                              <1> .physDrive:
   245 000051B9 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   246 000051BE 7208                <1>     jc .exitBad
   247 000051C0 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   248 000051C6 7508                <1>     jnz .exitOk ;Exit with flag cleared
   249                              <1>     ;Else Return to unknown error locus
   250                              <1> .exitBad:
   251 000051C8 C605(6CC30300)01    <1>     mov byte [errorLocus], eLocUnk
   252                              <1> .exitBad1:
   253 000051CF F9                  <1>     stc
   254                              <1> .exitOk:
   255 000051D0 5E                  <1>     pop rsi
   256                              <1>     return
    18                              <2> %%_ret:
    19 000051D1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   259                              <1>     ;Gets the CDS for the current drive in al
   260                              <1>     ;Input: al = Drive number, 0 = A ...
   261                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   262                              <1>     ;        CF=CY => al not valid
   263 000051D2 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
   264 000051D8 7202                <1>     jb .ctn
   265 000051DA F9                  <1>     stc 
   266                              <1>     return
    18                              <2> %%_ret:
    19 000051DB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   267                              <1> .ctn:
   268 000051DC 50                  <1>     push rax
   269 000051DD 52                  <1>     push rdx
   270 000051DE 0FB6C0              <1>     movzx eax, al
   271 000051E1 48BE5B000000000000- <1>     mov rsi, cds_size
   271 000051EA 00                  <1>
   272 000051EB 31D2                <1>     xor edx, edx
   273 000051ED F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   274 000051EF 488B35(5DC00300)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   275 000051F6 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   276 000051F9 488935(6CC60300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   277 00005200 5A                  <1>     pop rdx
   278 00005201 58                  <1>     pop rax
   279 00005202 F8                  <1>     clc
   280                              <1>     return
    18                              <2> %%_ret:
    19 00005203 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> 
   283                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   284                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   285                              <1> ;Input: AL = Char to normalise.
   286                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   287                              <1> ;If path separator, set ZF=ZE
   288 00005204 3C5C                <1>     cmp al, "\"
   289 00005206 7406                <1>     je .exit
   290 00005208 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   291 0000520A 7502                <1>     jne .exit
   292 0000520C B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   293                              <1> .exit:
   294                              <1>     return
    18                              <2> %%_ret:
    19 0000520E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   295                              <1> 
   296                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   297                              <1> ;Convert a lowercase char to uppercase
   298                              <1> ; Leave alone uppercase chars and invalid chars
   299                              <1> ;Input: al = Char to convert to uppercase
   300                              <1> ;Output: al = Processed char
   301 0000520F 53                  <1>     push rbx
   302 00005210 3C61                <1>     cmp al, "a"
   303 00005212 7214                <1>     jb .exit
   304 00005214 3C7A                <1>     cmp al, "z"
   305 00005216 7702                <1>     ja .checkExt
   306 00005218 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   307                              <1> .checkExt:
   308 0000521A 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   309 0000521C 720A                <1>     jb .exit
   310 0000521E 2C80                <1>     sub al, 80h ;Turn into table offset
   311 00005220 488D1DA9AFFFFF      <1>     lea rbx, extAsciiTbl
   312 00005227 D7                  <1>     xlatb   ;Get converted extended byte into al
   313                              <1> .exit:
   314 00005228 50                  <1>     push rax    ;Save al temporarily
   315 00005229 488D1D20B0FFFF      <1>     lea rbx, extAsciiSig
   316 00005230 D7                  <1>     xlatb   ;Get the signature in al
   317 00005231 A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   318 00005233 58                  <1>     pop rax
   319 00005234 5B                  <1>     pop rbx
   320                              <1>     return
    18                              <2> %%_ret:
    19 00005235 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   321                              <1> 
   322                              <1> strlen: ;Int 4Fh, AX=1212h
   323                              <1> ;Gets the length of a ASCIIZ string
   324                              <1> ;Input: rdi = Source buffer
   325                              <1> ;Output: ecx = Length of string
   326 00005236 50                  <1>     push rax
   327 00005237 57                  <1>     push rdi
   328 00005238 30C0                <1>     xor al, al
   329 0000523A 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   330 0000523C FFC9                <1>     dec ecx ;rcx = -1
   331 0000523E F2AE                <1>     repne scasb
   332 00005240 F7D1                <1>     not ecx
   333 00005242 5F                  <1>     pop rdi
   334 00005243 58                  <1>     pop rax
   335                              <1>     return
    18                              <2> %%_ret:
    19 00005244 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   336                              <1> 
   337                              <1> strcpy:
   338                              <1> ;Copies a null terminated string from rsi to rdi
   339 00005245 AC                  <1>     lodsb
   340 00005246 AA                  <1>     stosb
   341 00005247 84C0                <1>     test al, al
   342                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00005249 74F9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   343 0000524B EBF8                <1>     jmp short strcpy
   344                              <1> 
   345                              <1> strcmp:
   346                              <1> ;Compares two ASCIIZ strings for equality.
   347                              <1> ;Input: rsi = First string
   348                              <1> ;       rdi = Second string
   349                              <1> ;       ecx = Number of bytes to compare
   350                              <1> ;Output: ZF=ZE => Equal
   351                              <1> ;        ZF=NZ => Not equal
   352 0000524D 56                  <1>     push rsi
   353 0000524E 57                  <1>     push rdi
   354 0000524F F3A6                <1>     repe cmpsb
   355 00005251 5F                  <1>     pop rdi
   356 00005252 5E                  <1>     pop rsi
   357                              <1>     return
    18                              <2> %%_ret:
    19 00005253 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   358                              <1> 
   359                              <1> 
   360                              <1> normaliseFileName:  ;Int 4Fh, AX=1211h
   361                              <1> ;Converts lowercase to uppercase and / to "\"
   362                              <1> ;Input: rsi = Source buffer
   363                              <1> ;       rdi = Buffer to place normalised path
   364 00005254 50                  <1>     push rax
   365 00005255 56                  <1>     push rsi
   366 00005256 57                  <1>     push rdi
   367                              <1> .scan:
   368 00005257 AC                  <1>     lodsb
   369 00005258 84C0                <1>     test al, al
   370 0000525A 740D                <1>     jz .exit
   371 0000525C E8A3FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   372 00005261 E8A9FFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   373 00005266 AA                  <1>     stosb
   374 00005267 EBEE                <1>     jmp short .scan
   375                              <1> .exit:
   376 00005269 5F                  <1>     pop rdi
   377 0000526A 5E                  <1>     pop rsi
   378 0000526B 58                  <1>     pop rax
   379                              <1>     return
    18                              <2> %%_ret:
    19 0000526C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   380                              <1> 
   381                              <1> compareFileNames:   ;Int 4Fh, AX=121Eh
   382                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   383                              <1> ;Input: rsi = One ASCIIZ pathname
   384                              <1> ;       rdi = Second ASCIIZ pathname
   385                              <1> ;Return:
   386                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   387 0000526D 50                  <1>     push rax
   388 0000526E 56                  <1>     push rsi
   389 0000526F 57                  <1>     push rdi
   390                              <1> .scan:
   391 00005270 8A06                <1>     mov al, byte [rsi]
   392 00005272 84C0                <1>     test al, al
   393 00005274 7424                <1>     jz .endOfString
   394 00005276 8A27                <1>     mov ah, byte [rdi]
   395 00005278 E887FFFFFF          <1>     call swapPathSeparator  ;Convert al to \ if pathsep
   396 0000527D 7410                <1>     jz .pathseps
   397 0000527F 660D2020            <1>     or ax, 2020h    ;Convert both chars to lower case
   398 00005283 38E0                <1>     cmp al, ah
   399 00005285 7515                <1>     jnz .exit
   400                              <1> .nextChar:
   401 00005287 48FFC6              <1>     inc rsi
   402 0000528A 48FFC7              <1>     inc rdi
   403 0000528D EBE1                <1>     jmp short .scan
   404                              <1> .pathseps:
   405 0000528F 86E0                <1>     xchg ah, al
   406 00005291 E86EFFFFFF          <1>     call swapPathSeparator  ;If ah is not a pathsep, then exit ZF=NZ
   407 00005296 7504                <1>     jnz .exit
   408 00005298 EBED                <1>     jmp short .nextChar ;Else get the next chars
   409                              <1> .endOfString:
   410 0000529A 84E4                <1>     test ah, ah ;If ah is also the end of the path, then ZF=ZE else ZF=NZ
   411                              <1> .exit:
   412 0000529C 5F                  <1>     pop rdi
   413 0000529D 5E                  <1>     pop rsi
   414 0000529E 58                  <1>     pop rax
   415                              <1>     return
    18                              <2> %%_ret:
    19 0000529F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   416                              <1> checkPathspecOK:
   417                              <1> ;Input:
   418                              <1> ;rsi -> points to a path to verify if it is ok.
   419                              <1> ;Output:
   420                              <1> ;CF=NC => The path is totally clean and ok to use.
   421                              <1> ;CF=CY => the path is malformed and may be used ONLY if ZF=ZE. 
   422                              <1> ; If ZF=ZE then the only bad char in the path is followed by a ASCII null
   423                              <1> ;Here we check for OK chars only. Hence \ / ? * and . are considered acceptable
   424                              <1> 
   425                              <1> ;Full paths may start with \\<15-char machine name>\...
   426                              <1> ; or <Drive Letter>:\...
   427                              <1> ;CWD relative paths start with <Drive Letter>:...
   428                              <1> ;Current Drive Root Relative paths may start with \...
   429                              <1> ;Current Drive CWD relative paths start with any other char
   430                              <1> ;Server calls are checked separately. 
   431                              <1> ;Must be X:\ and cannot have . or .. entries or any "G L O B A L" chars
   432                              <1> 
   433                              <1> ;We accept lc and uc characters in this check function.
   434 000052A0 50                  <1>     push rax
   435 000052A1 51                  <1>     push rcx
   436 000052A2 56                  <1>     push rsi
   437 000052A3 57                  <1>     push rdi
   438                              <1>     ;First we verify that the first two chars are ok (either X: or \\ or chars)
   439 000052A4 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   440 000052A7 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
   441 000052AE 7539                <1>     jnz .serverCallCheck
   442 000052B0 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   443 000052B4 7417                <1>     je .okToScan
   444 000052B6 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   445 000052BA 7411                <1>     je .okToScan
   446 000052BC 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   447 000052BF 7402                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   448                              <1>     ;Is this a current drive CWD relative or current drive root relative path?
   449                              <1>     ;If so the pathspec is not different to normal, goto scanLoop
   450 000052C1 EB11                <1>     jmp short .scanLoop
   451                              <1> .diskPath:
   452                              <1> ;Disk Letter must be A-Z (or a-z)
   453 000052C3 0C20                <1>     or al, 20h  ;Force an UC char to LC
   454 000052C5 3C61                <1>     cmp al, "a"
   455 000052C7 7217                <1>     jb .badExit
   456 000052C9 3C7A                <1>     cmp al, "z"
   457 000052CB 7713                <1>     ja .badExit
   458                              <1> .okToScan:
   459 000052CD 4881C602000000      <1>     add rsi, 2  ;Skip first two chars now
   460                              <1> .scanLoop:
   461 000052D4 AC                  <1>     lodsb   ;Get char, inc rsi
   462 000052D5 84C0                <1>     test al, al  ;Is al=0, i.e string terminator?
   463 000052D7 740B                <1>     je .exit    ;Clear CF if al = 0
   464 000052D9 E851000000          <1>     call checkCharOk    ;Check if char ok
   465 000052DE 75F4                <1>     jnz .scanLoop    ;If it is not, fall thru
   466                              <1> .badExit:
   467                              <1> ;Before we bad exit, we check if the next char is ascii null.
   468                              <1> ;If it is we set ZF
   469 000052E0 AC                  <1>     lodsb
   470 000052E1 84C0                <1>     test al, al ;Set ZF if only last char is malformed, else clear ZF
   471                              <1> .servBadExit:   ;Server paths must be null terminated
   472 000052E3 F9                  <1>     stc ;And set CF to indicate bad path
   473                              <1> .exit:
   474 000052E4 5F                  <1>     pop rdi
   475 000052E5 5E                  <1>     pop rsi
   476 000052E6 59                  <1>     pop rcx
   477 000052E7 58                  <1>     pop rax
   478                              <1>     return
    18                              <2> %%_ret:
    19 000052E8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   479                              <1> .serverCallCheck:
   480                              <1> ;Server calls are a bit stricter, . and .. are forbidden but dir and filenames
   481                              <1> ; may contain an extension separated by a .
   482 000052E9 80FC3A              <1>     cmp ah, ":"
   483 000052EC 75F5                <1>     jne .servBadExit
   484 000052EE 0C20                <1>     or al, 20h  ;Force an UC char to LC
   485 000052F0 3C61                <1>     cmp al, "a"
   486 000052F2 72EF                <1>     jb .servBadExit
   487 000052F4 3C7A                <1>     cmp al, "z"
   488 000052F6 77EB                <1>     ja .servBadExit
   489                              <1>     ;If a dot is found, must check if the . is within 4 chars of a pathsep or 0
   490                              <1> .servScanLoop:
   491 000052F8 AC                  <1>     lodsb
   492 000052F9 84C0                <1>     test al, al
   493 000052FB 74E7                <1>     je .exit
   494 000052FD 3C2E                <1>     cmp al, "." ;Handle dots separately
   495 000052FF 7409                <1>     je .secondDotCheck
   496 00005301 E829000000          <1>     call checkCharOk
   497 00005306 75F0                <1>     jnz .servScanLoop
   498 00005308 EBEE                <1>     jmp short .servScanLoop
   499                              <1> .secondDotCheck:
   500 0000530A AC                  <1>     lodsb
   501 0000530B 84C0                <1>     test al, al ;cannot be a dot followed by a null
   502 0000530D 74D4                <1>     jz .servBadExit
   503 0000530F 3C2E                <1>     cmp al, "." ;Was this a .. entry?
   504 00005311 74D0                <1>     je .servBadExit
   505 00005313 E8ECFEFFFF          <1>     call swapPathSeparator  ;Was second char a pathsep? Not allowed.
   506 00005318 74C9                <1>     jz .servBadExit ;... else check if the char was valid
   507 0000531A EBDC                <1>     jmp short .servScanLoop ;Else keep searching.
   508                              <1> scanPathWC:
   509                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   510                              <1> ; even in the final path componant.
   511                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   512                              <1> ;Output: CF=NC => No wildcards present
   513                              <1> ;        CF=CY => Wildcards found
   514 0000531C 50                  <1>     push rax
   515 0000531D 56                  <1>     push rsi
   516                              <1> .scan:
   517 0000531E AC                  <1>     lodsb
   518 0000531F 84C0                <1>     test al, al
   519 00005321 7409                <1>     jz .exit
   520 00005323 3C3F                <1>     cmp al, "?"
   521 00005325 7404                <1>     je .wcFnd
   522 00005327 3C2A                <1>     cmp al, "*"
   523 00005329 75F3                <1>     jne .scan
   524                              <1> .wcFnd:
   525 0000532B F9                  <1>     stc
   526                              <1> .exit:
   527 0000532C 5E                  <1>     pop rsi
   528 0000532D 58                  <1>     pop rax
   529                              <1>     return
    18                              <2> %%_ret:
    19 0000532E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> 
   532                              <1> checkCharOk:
   533                              <1> ;Same as checkCharValid except DOES not return error on * ? \ / .
   534                              <1> ;If ZF=ZE => Invalid Char
   535                              <1> ;If ZF=NZ => Ok Char
   536 0000532F 3C2E                <1>     cmp al, "."
   537 00005331 740F                <1>     je .exitOk
   538 00005333 3C2A                <1>     cmp al, "*"
   539 00005335 740B                <1>     je .exitOk
   540 00005337 3C3F                <1>     cmp al, "?"
   541 00005339 7407                <1>     je .exitOk
   542 0000533B E8C4FEFFFF          <1>     call swapPathSeparator  ;check if al is a path separator
   543 00005340 7505                <1>     jnz checkCharValid
   544                              <1> .exitOk:
   545 00005342 50                  <1>     push rax
   546 00005343 0C01                <1>     or al, 1    ;Always clears the ZF
   547 00005345 58                  <1>     pop rax
   548                              <1>     return
    18                              <2> %%_ret:
    19 00005346 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   549                              <1> checkCharValid:
   550                              <1> ;If ZF=ZE => Invalid Char
   551                              <1> ;If ZF=NZ => Valid Char
   552 00005347 51                  <1>     push rcx
   553 00005348 57                  <1>     push rdi
   554 00005349 B930000000          <1>     mov ecx, badDirNameCharL    ;Get table length
   555 0000534E 488D3D4BAEFFFF      <1>     lea rdi, badDirNameChar ;Point to bad char table
   556 00005355 F2AE                <1>     repne scasb ;Scan. Stop when equal
   557 00005357 5F                  <1>     pop rdi
   558 00005358 59                  <1>     pop rcx
   559                              <1>     return
    18                              <2> %%_ret:
    19 00005359 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> compareFarPointers: ;Int 4Fh, AX = 1214h
   562                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   563                              <1> ;Input: rsi = One pointer
   564                              <1> ;       rdi = Second pointer
   565                              <1> ;Output: ZF=ZE if equal
   566                              <1> ;        ZF=NZ if not
   567 0000535A 4839FE              <1>     cmp rsi, rdi
   568                              <1>     return
    18                              <2> %%_ret:
    19 0000535D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   569                              <1> 
   570                              <1> checkPathNet:
   571                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   572                              <1> ;Output: ZF=ZE => Path is a net path
   573                              <1> ;        ZF=NZ => Path is not a net path
   574 0000535E 50                  <1>     push rax
   575 0000535F 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   576 00005362 E89DFEFFFF          <1>     call swapPathSeparator
   577 00005367 7505                <1>     jnz .exit
   578 00005369 E896FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   579                              <1> .exit:
   580 0000536E 58                  <1>     pop rax
   581                              <1>     return
    18                              <2> %%_ret:
    19 0000536F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   582                              <1> 
   583                              <1> getCharDevDriverPtr:
   584                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   585                              <1> ;Input: rax = Device Driver name (space padded)
   586                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   587 00005370 488D3D(73C00300)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   588                              <1> .lp:
   589 00005377 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   590                              <1>     rete    ;Exit if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000537B 74F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   591 0000537D 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   592 00005380 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   593 00005387 75EE                <1>     jne .lp ;If not loop
   594 00005389 F9                  <1>     stc ;Else bad exit
   595                              <1>     return
    18                              <2> %%_ret:
    19 0000538A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    39                                  %include "./Source/Kernel/dosMain.asm"
    40                              <1> ;-----------------------------------:
    41                              <1> ;        Main Kernel dispatch       :
    42                              <1> ;            and routines           :
    43                              <1> ;-----------------------------------:
    44                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    45                              <1> ;ah = Function number, all other registers have various meanings
    46                              <1>  %if DEBUG
    47                              <1>     ;Entry function
    48                              <1>     debugEnterM
    49                              <1>     lea rbp, .l0000
    50                              <1>     call debPrintNullString
    51                              <1>     call debPrintFunctionName
    52                              <1>     jmp short .l0001
    53                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    54                              <1> .l0001:    
    55                              <1>     debugExitM
    56                              <1>     %endif
    57 0000538B FA                  <1>     cli ;Halt external interrupts
    58 0000538C FC                  <1>     cld ;Ensure all string ops occur in the right direction
    59 0000538D 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    60 00005390 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    61                              <1>     ;Cherry pick functions
    62 00005396 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    63 00005399 722C                <1>     jb .fsbegin   ;If below skip these checks
    64 0000539B 0F8470020000        <1>     je ctrlBreakCheck
    65 000053A1 80FC64              <1>     cmp ah, 64h
    66 000053A4 0F84B0020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    67 000053AA 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    68 000053AC 80FC51              <1>     cmp ah, 51h
    69 000053AF 0F8493020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    70 000053B5 80FC62              <1>     cmp ah, 62h
    71 000053B8 0F8493020000        <1>     je getPSPaddr          ;Calls the above function
    72 000053BE 80FC50              <1>     cmp ah, 50h
    73 000053C1 0F8478020000        <1>     je setCurrProcessID
    74                              <1> .fsbegin:
    75 000053C7 E830010000          <1>     call dosPushRegs ;Push the usual prologue registers
    76 000053CC 48891D(E4C30300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    77 000053D3 66C705(A5C30300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    77 000053DB 00                  <1>
    78 000053DC 488B05(DCC30300)    <1>     mov rax, qword [oldRSP]
    79 000053E3 488905(CCC30300)    <1>     mov qword [oldoldRSP], rax
    80 000053EA FE05(6AC30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    81 000053F0 488925(DCC30300)    <1>     mov qword [oldRSP], rsp
    82                              <1> ;Network related variable resetting
    83 000053F7 C605(5CC60300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    84                              <1> ;Here, we want to save oldRSP in the callers PSP
    85 000053FE 803D(6AC30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    86 00005405 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    87 00005407 488B05(81C30300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    88 0000540E 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    89                              <1> .fsb1:
    90 00005412 58                  <1>     pop rax     ;Get old rax back
    91 00005413 50                  <1>     push rax    ;and push it back onto the stack
    92                              <1> .abortEP:
    93                              <1> .charFun0CEP:
    94                              <1> .serverEP:
    95 00005414 488D25(11CC0300)    <1>     lea rsp, critStakTop
    96 0000541B FB                  <1>     sti         ;Reenable interrupts
    97                              <1> 
    98 0000541C 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    99 0000541E 881D(F5C30300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
   100 00005424 C605(F6C30300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   101 0000542B 881D(CBC30300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
   102 00005431 881D(ECC30300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
   103                              <1> 
   104 00005437 50                  <1>     push rax        ;Save rax to use temporarily as table base 
   105 00005438 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
   106 0000543A D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
   107 0000543C 488D058DAEFFFF      <1>     lea rax, kDispTbl
   108 00005443 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   109 00005446 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   110 0000544A 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   111 0000544D 58                  <1>     pop rax
   112                              <1> 
   113 0000544E 84E4                <1>     test ah, ah     ;Simple Terminate function?
   114 00005450 741C                <1>     jz .fddiskOp
   115 00005452 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   116 00005455 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   117 00005457 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   118 0000545A 7712                <1>     ja .fddiskOp
   119                              <1> ;Char operations here
   120 0000545C F605(69C30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   121 00005463 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   122 00005465 488D25(A0D20300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   123 0000546C EB40                <1>     jmp short .fdGoToFunction
   124                              <1> .fddiskOp:
   125                              <1>     ;Disk operations go here
   126                              <1>     ;Save rax on entry to a disk funciton
   127 0000546E 488905(95C30300)    <1>     mov qword [oldRAX], rax
   128                              <1>     ;Clear up error info
   129 00005475 C605(6CC30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   130 0000547C C605(69C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   131 00005483 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   132                              <1> 
   133 0000548A 50                  <1>     push rax
   134 0000548B B482                <1>     mov ah, 82h ;Cancel all critical section!
   135 0000548D CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   136 0000548F 58                  <1>     pop rax
   137                              <1> 
   138 00005490 C605(F6C30300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   139 00005497 488D25(E0D80300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   140 0000549E F605(94C30300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   141 000054A5 7407                <1>     jz .fdGoToFunction
   142                              <1> ; HANDLE CTRL+BREAK HERE!
   143 000054A7 50                  <1>     push rax
   144 000054A8 E881D0FFFF          <1>     call checkBreak   ; Check for a ^C
   145 000054AD 58                  <1>     pop rax
   146                              <1> .fdGoToFunction:
   147 000054AE 48871D(E4C30300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   148                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   149                              <1>     ;
   150                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   151                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   152                              <1>     ;
   153                              <1>     %if DEBUG && REGS
   154                              <1>     ;Print stack if necessary function
   155                              <1>     debugEnterM
   156                              <1>     call debPrintDOSStack
   157                              <1>     debugExitM
   158                              <1>     %endif
   159 000054B5 FF15(E4C30300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   160                              <1>     %if DEBUG
   161                              <1>     ;Entry function
   162                              <1>     debugEnterM
   163                              <1>     lea rbp, .l0002
   164                              <1>     call debPrintNullString
   165                              <1>     jmp short .l0003
   166                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   167                              <1> .l0003:    
   168                              <1>     debugExitM
   169                              <1>     %endif
   170                              <1>     %if DEBUG && REGS
   171                              <1>     ;Exit function
   172                              <1>     debugEnterM
   173                              <1>     call debPrintDOSStack
   174                              <1>     debugExitM
   175                              <1>     %endif
   176                              <1> .fdExit:
   177 000054BB FA                  <1>     cli     ;Redisable interrupts
   178 000054BC FE0D(6AC30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   179 000054C2 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   180 000054C9 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   181 000054CC 488B05(CCC30300)    <1>     mov rax, qword [oldoldRSP]
   182 000054D3 488905(DCC30300)    <1>     mov qword [oldRSP], rax
   183 000054DA E806000000          <1>     call dosPopRegs  ;Pop the frame
   184 000054DF 48CF                <1>     iretq
   185                              <1> .fdExitBad:
   186 000054E1 30C0                <1>     xor al, al
   187                              <1> defaultIretq:
   188 000054E3 48CF                <1>     iretq
   189                              <1> dosPopRegs:
   190 000054E5 8F05(D4C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   191 000054EB 58                  <1>     pop rax
   192 000054EC 5B                  <1>     pop rbx
   193 000054ED 59                  <1>     pop rcx
   194 000054EE 5A                  <1>     pop rdx
   195 000054EF 5E                  <1>     pop rsi
   196 000054F0 5F                  <1>     pop rdi
   197 000054F1 5D                  <1>     pop rbp
   198 000054F2 4158                <1>     pop r8
   199 000054F4 4159                <1>     pop r9
   200 000054F6 FF25(D4C30300)      <1>     jmp qword [dosReturn]
   201                              <1> dosPushRegs:
   202 000054FC 8F05(D4C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   203 00005502 4151                <1>     push r9
   204 00005504 4150                <1>     push r8
   205 00005506 55                  <1>     push rbp
   206 00005507 57                  <1>     push rdi
   207 00005508 56                  <1>     push rsi
   208 00005509 52                  <1>     push rdx
   209 0000550A 51                  <1>     push rcx
   210 0000550B 53                  <1>     push rbx
   211 0000550C 50                  <1>     push rax
   212 0000550D FF25(D4C30300)      <1>     jmp qword [dosReturn]
   213                              <1> dosCrit1Enter:
   214                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    18                              <2> %%_ret:
    19 00005513 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   215 00005514 B801800000          <1>     mov eax, 8001h
   216 00005519 CD4A                <1>     int 4ah
   217 0000551B 58                  <1>     pop rax
   218                              <1>     return
    18                              <2> %%_ret:
    19 0000551C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   219                              <1> dosCrit1Exit:
   220                              <1>     return
    18                              <2> %%_ret:
    19 0000551D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   221 0000551E B801810000          <1>     mov eax, 8101h
   222 00005523 CD4A                <1>     int 4ah
   223 00005525 58                  <1>     pop rax
   224                              <1>     return
    18                              <2> %%_ret:
    19 00005526 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   225                              <1> dosCrit2Enter:
   226                              <1>     return
    18                              <2> %%_ret:
    19 00005527 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   227 00005528 B802800000          <1>     mov eax, 8002h
   228 0000552D CD4A                <1>     int 4ah
   229 0000552F 58                  <1>     pop rax
   230                              <1>     return
    18                              <2> %%_ret:
    19 00005530 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   231                              <1> dosCrit2Exit:
   232                              <1>     return
    18                              <2> %%_ret:
    19 00005531 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   233 00005532 B802810000          <1>     mov eax, 8102h
   234 00005537 CD4A                <1>     int 4ah
   235 00005539 58                  <1>     pop rax
   236                              <1>     return
    18                              <2> %%_ret:
    19 0000553A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   237                              <1> 
   238                              <1> ;All good exits destroy AT LEAST ax 
   239                              <1> extGoodExit2:
   240                              <1> ;Good exit with an extended return code in eax
   241 0000553B E8AAFBFFFF          <1>     call getUserRegs
   242 00005540 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   243 00005542 EB08                <1>     jmp short extGoodExit.extGoodCommon
   244                              <1> extGoodExit:
   245                              <1> ;Good exit
   246                              <1> ;Return code in ax
   247 00005544 E8A1FBFFFF          <1>     call getUserRegs
   248 00005549 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   249                              <1> .extGoodCommon:
   250 0000554C 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   251 00005550 F8                  <1>     clc
   252                              <1>     return
    18                              <2> %%_ret:
    19 00005551 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   253                              <1> extErrExit:
   254                              <1> ;The extended error exit from DOS
   255                              <1> ;Jumped to with AL=Extended error code
   256                              <1> ;Can be called too.
   257                              <1> ;Input: al = Extended error code
   258                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   259                              <1> ;   Returns with: eax = xLat Error
   260                              <1> ;                 rsi = callerFrame
   261 00005552 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   262 00005555 E813000000          <1>     call xLatError
   263 0000555A E891000000          <1>     call checkFail
   264 0000555F E886FBFFFF          <1>     call getUserRegs
   265 00005564 668906              <1>     mov word [rsi + callerFrame.rax], ax
   266 00005567 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   267 0000556B F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   268                              <1>     return
    18                              <2> %%_ret:
    19 0000556C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   269                              <1> xLatError:
   270                              <1> ;Translates the error code given in ax and sets error code in the var
   271                              <1> ; Input: ax = Extended Error Code
   272                              <1> ; Output: ax = Potentially translated Error Code
   273                              <1> ;         [errorExCde] = Original Error Code
   274                              <1> ;Preserves all registers except ax
   275                              <1> ;AH is always returned as 0
   276 0000556D 53                  <1>     push rbx
   277 0000556E 51                  <1>     push rcx
   278 0000556F 56                  <1>     push rsi
   279 00005570 668905(6DC30300)    <1>     mov word [errorExCde], ax
   280 00005577 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   281 00005579 488D3510ABFFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   282                              <1> .readEntry:
   283 00005580 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   284 00005582 3CFF                <1>     cmp al, -1
   285 00005584 741F                <1>     je .skipXlat
   286 00005586 3A05(96C30300)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   287 0000558C 7408                <1>     je .found
   288                              <1>     ;Here, entry not found, goto next entry
   289 0000558E 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   290 00005591 4801C6              <1>     add rsi, rax    ;Goto next entry
   291 00005594 EBEA                <1>     jmp short .readEntry
   292                              <1> .found:
   293                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   294 00005596 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   295                              <1> .mainSearch:
   296 00005599 AC                  <1>     lodsb   ;Get one byte into al
   297 0000559A 38C3                <1>     cmp bl, al  ;Check against the error code
   298 0000559C 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   299 0000559E FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   300 000055A0 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   301                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   302 000055A2 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   303                              <1> .skipXlat:
   304 000055A5 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   305 000055A7 5E                  <1>     pop rsi
   306 000055A8 59                  <1>     pop rcx
   307 000055A9 5B                  <1>     pop rbx
   308                              <1>     return
    18                              <2> %%_ret:
    19 000055AA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   309                              <1> setErrorVars:
   310                              <1> ;Looks up the error code in the variable and sets the other error vars
   311                              <1> ;Called with the lookup table in rsi
   312                              <1> ;All regs preserved
   313 000055AB 50                  <1>     push rax
   314 000055AC 53                  <1>     push rbx
   315 000055AD 51                  <1>     push rcx
   316 000055AE 56                  <1>     push rsi
   317 000055AF 0FB71D(6DC30300)    <1>     movzx ebx, word [errorExCde]
   318 000055B6 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   319                              <1> .readEntry:
   320 000055BB AD                  <1>     lodsd   ;Read the dword table entry into eax
   321 000055BC 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   322 000055C1 7428                <1>     je .exit    
   323 000055C3 38D8                <1>     cmp al, bl  ;Compare the error codes
   324 000055C5 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   325 000055C7 D3E8                <1>     shr eax, cl
   326 000055C9 3CFF                <1>     cmp al, -1
   327 000055CB 7406                <1>     je .skipClass
   328 000055CD 8805(70C30300)      <1>     mov byte [errorClass], al
   329                              <1> .skipClass:
   330 000055D3 D3E8                <1>     shr eax, cl
   331 000055D5 3CFF                <1>     cmp al, -1
   332 000055D7 7406                <1>     je .skipAct
   333 000055D9 8805(6FC30300)      <1>     mov byte [errorAction], al
   334                              <1> .skipAct:
   335 000055DF D3E8                <1>     shr eax, cl
   336 000055E1 3CFF                <1>     cmp al, -1
   337 000055E3 7406                <1>     je .exit
   338 000055E5 8805(6CC30300)      <1>     mov byte [errorLocus], al
   339                              <1> .exit:
   340 000055EB 5E                  <1>     pop rsi
   341 000055EC 59                  <1>     pop rcx
   342 000055ED 5B                  <1>     pop rbx
   343 000055EE 58                  <1>     pop rax
   344                              <1>     return
    18                              <2> %%_ret:
    19 000055EF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   345                              <1> checkFail:
   346                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   347                              <1> ; and swaps the var error code if so
   348 000055F0 803D(CBC30300)00    <1>     cmp byte [Int44Fail], 0
   349 000055F7 7509                <1>     jnz .skipFail
   350 000055F9 66C705(6DC30300)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   350 00005601 00                  <1>
   351                              <1> .skipFail:
   352 00005602 56                  <1>     push rsi
   353 00005603 488D3522ABFFFF      <1>     lea rsi, extErrTbl
   354 0000560A E89CFFFFFF          <1>     call setErrorVars
   355 0000560F 5E                  <1>     pop rsi
   356                              <1>     return
    18                              <2> %%_ret:
    19 00005610 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   357                              <1> ;========================================:
   358                              <1> ;      Reentrant Kernel Functions        :
   359                              <1> ;========================================:
   360                              <1> ctrlBreakCheck:    ;ah = 33h
   361 00005611 84C0                <1>     test al, al
   362 00005613 7508                <1>     jnz .cbcget  ;Get the state or other functions
   363 00005615 8A15(94C30300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   364 0000561B 48CF                <1>     iretq
   365                              <1> .cbcget:
   366 0000561D 3C02                <1>     cmp al, 02h
   367 0000561F 771A                <1>     ja .cbcBad
   368 00005621 740D                <1>     jz .cbcxchg ;Function 2
   369 00005623 52                  <1>     push rdx
   370 00005624 80E201              <1>     and dl, 1   ;Get only the bottom bit
   371 00005627 8815(94C30300)      <1>     mov byte [breakFlag], dl    ;Set the state
   372 0000562D 5A                  <1>     pop rdx
   373 0000562E 48CF                <1>     iretq
   374                              <1> .cbcxchg:
   375 00005630 80E201              <1>     and dl, 1
   376 00005633 8615(94C30300)      <1>     xchg byte [breakFlag], dl
   377 00005639 48CF                <1>     iretq
   378                              <1> .cbcBad:
   379 0000563B B0FF                <1>     mov al, -1
   380 0000563D 48CF                <1>     iretq
   381                              <1> 
   382                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   383 0000563F 48891D(81C30300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   384 00005646 48CF                <1>     iretq
   385                              <1> 
   386                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   387 00005648 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   388 0000564F 48CF                <1>     iretq
   389                              <1> 
   390                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   391 00005651 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   392 00005658 48CF                <1>     iretq
   393                              <1> 
   394                              <1> setDriverLookahead:;ah = 64h, reserved
   395 0000565A 48CF                <1>     iretq
   396                              <1> 
   397                              <1> ;========================================:
   398                              <1> ;            Kernel Functions            :
   399                              <1> ;========================================:
   400                              <1> diskReset:         ;ah = 0Dh
   401                              <1> ;Flush all dirty buffers to disk
   402 0000565C E8B2FEFFFF          <1>     call dosCrit1Enter
   403 00005661 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   404                              <1> .drCheckBuffer:
   405 00005668 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   406 0000566C 7407                <1>     jz .drGotoNextBuffer
   407                              <1> .drFlushBuffer:
   408 0000566E E80CB2FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   409 00005673 720C                <1>     jc .drExit
   410                              <1> .drGotoNextBuffer:
   411 00005675 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   412 00005678 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   413 0000567F 75E7                <1>     jne .drCheckBuffer
   414                              <1> .drExit:
   415 00005681 E897FEFFFF          <1>     call dosCrit1Exit
   416 00005686 B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   417 0000568B CD4F                <1>     int 4fh
   418                              <1>     return
    18                              <2> %%_ret:
    19 0000568D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   419                              <1> 
   420                              <1> selectDisk:        ;ah = 0Eh
   421                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   422 0000568E 88D0                <1>     mov al, dl
   423 00005690 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   424 00005692 E877FAFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   425 00005697 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   426 00005699 8805(93C30300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   427                              <1> .skipSettingCurrent:
   428 0000569F 0FB605(70C00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   429                              <1>     return
    18                              <2> %%_ret:
    19 000056A6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   430                              <1> 
   431                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   432 000056A7 8A05(93C30300)      <1>     mov al, byte [currentDrv]
   433                              <1>     return
    18                              <2> %%_ret:
    19 000056AD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   434                              <1> 
   435                              <1> FATinfoDefault:    ;ah = 1Bh
   436 000056AE 30D2                <1>     xor dl, dl
   437                              <1> FATinfoDevice:     ;ah = 1Ch
   438                              <1> ;Input: dl = 1 based drive number
   439                              <1> ;Output:
   440                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   441                              <1> ;cx = bytes per sector
   442                              <1> ;edx = total number of clusters
   443                              <1> ;rbx = Ptr to media ID byte
   444 000056B0 88D0                <1>     mov al, dl  ;Move drive number into al
   445 000056B2 E8C0FAFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   446 000056B7 7307                <1>     jnc .fidCDSFound
   447 000056B9 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   448 000056BE EB2E                <1>     jmp short .error 
   449                              <1> .fidCDSFound:
   450 000056C0 E8D3F9FFFF          <1>     call getDiskData
   451 000056C5 7227                <1>     jc .error
   452                              <1> ;Now we have that:
   453                              <1> ;al = sectors per cluster
   454                              <1> ;ah = media ID byte
   455                              <1> ;ebx = total clusters
   456                              <1> ;cx = bytes per sector
   457                              <1> ;edx = number of available clusters
   458 000056C7 E81EFAFFFF          <1>     call getUserRegs
   459 000056CC 8825(E8C60300)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   460 000056D2 30E4                <1>     xor ah, ah
   461 000056D4 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   462 000056D7 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   463 000056DB 488D1D(E8C60300)    <1>     lea rbx, mediaByte
   464 000056E2 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   465 000056E6 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   466                              <1> .badExit:
   467 000056EA 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   468                              <1>     return
    18                              <2> %%_ret:
    19 000056ED C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   469                              <1> .error:
   470 000056EE E85FFEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   471 000056F3 66B8FFFF            <1>     mov ax, -1
   472 000056F7 EBF1                <1>     jmp short .badExit
   473                              <1> 
   474                              <1> setIntVector:      ;ah = 25h
   475                              <1> ;Called with:
   476                              <1> ;   rdx = Pointer to interrupt handler
   477                              <1> ;   al = Interrupt number
   478 000056F9 50                  <1>     push rax    ;Preserve all registers in call
   479 000056FA 53                  <1>     push rbx
   480 000056FB 51                  <1>     push rcx
   481 000056FC 52                  <1>     push rdx
   482 000056FD 56                  <1>     push rsi
   483 000056FE 55                  <1>     push rbp
   484 000056FF 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   485 00005701 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   486                              <1> ;First call to get default BIOS segement selector and attribute word
   487 00005707 88C3                <1>     mov bl, al  ;Set interrupt number 
   488 00005709 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   489 0000570E CD35                <1>     int 35h
   490 00005710 E8D5F9FFFF          <1>     call getUserRegs
   491 00005715 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   492 00005719 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   493 0000571B 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   494                              <1> ;dx preserves the attribute word
   495 0000571D B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   496 00005722 CD35                <1>     int 35h
   497 00005724 5D                  <1>     pop rbp
   498 00005725 5E                  <1>     pop rsi
   499 00005726 5A                  <1>     pop rdx
   500 00005727 59                  <1>     pop rcx
   501 00005728 5B                  <1>     pop rbx
   502 00005729 58                  <1>     pop rax
   503                              <1>     return
    18                              <2> %%_ret:
    19 0000572A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   504                              <1> 
   505                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   506 0000572B 8805(32C30300)      <1>     mov byte [verifyFlag], al
   507 00005731 8025(32C30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   508                              <1>     return
    18                              <2> %%_ret:
    19 00005738 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   509                              <1> getDOSversion:     ;ah = 30h
   510 00005739 E8ACF9FFFF          <1>     call getUserRegs
   511 0000573E 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   512 00005740 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   513 00005743 668B05B6A8FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   514 0000574A 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   515                              <1>     return
    18                              <2> %%_ret:
    19 0000574D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   516                              <1> 
   517                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   518                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   519 0000574E 30D2                <1>     xor dl, dl
   520                              <1> getDeviceDPBptr:   ;ah = 32h
   521                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   522                              <1> ;On exit: rbx = DPB pointer
   523 00005750 88D0                <1>     mov al, dl
   524 00005752 E820FAFFFF          <1>     call getCDS
   525 00005757 722C                <1>     jc .bad
   526 00005759 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   527 00005760 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   528 00005766 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   529                              <1>     ;Here ONLY if accessing critical Disk data structures
   530 00005768 E8A6FDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   531 0000576D E8A1F6FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   532 00005772 E8A6FDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   533 00005777 720C                <1>     jc .bad
   534 00005779 E86CF9FFFF          <1>     call getUserRegs
   535 0000577E 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   536 00005782 30C0                <1>     xor al, al
   537                              <1>     return
    18                              <2> %%_ret:
    19 00005784 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   538                              <1> .bad:
   539 00005785 B0FF                <1>     mov al, -1
   540                              <1>     return
    18                              <2> %%_ret:
    19 00005787 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   541                              <1> 
   542                              <1> getInDOSflagPtr:   ;ah = 34h
   543 00005788 488D15(6AC30300)    <1>     lea rdx, inDOS
   544 0000578F E856F9FFFF          <1>     call getUserRegs
   545 00005794 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   546                              <1>     return
    18                              <2> %%_ret:
    19 00005798 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   547                              <1> 
   548                              <1> getIntVector:      ;ah = 35h
   549                              <1> ;Called with:
   550                              <1> ;   al = Interrupt Number
   551                              <1> ;Returns:
   552                              <1> ;   rbx = Pointer to interrupt handler
   553 00005799 E83EF9FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   554 0000579E E847F9FFFF          <1>     call getUserRegs
   555 000057A3 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   556 000057A7 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   557                              <1>     return
    18                              <2> %%_ret:
    19 000057A9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   558                              <1> 
   559                              <1> getDiskFreeSpace:  ;ah = 36h
   560                              <1> ;Input: Drive number in dl (0 = Current)
   561                              <1> ;Output:    ax = sectors per cluster
   562                              <1> ;           ebx = number of free clusters
   563                              <1> ;           cx = bytes per sector
   564                              <1> ;           edx = total clusters on drive
   565 000057AA 88D0                <1>     mov al, dl
   566 000057AC E8C6F9FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   567 000057B1 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   568                              <1> ;Else, we at an error.
   569                              <1> ;Simply return with CY set and error code in al with extended error info
   570 000057B3 B80F000000          <1>     mov eax, errBadDrv
   571 000057B8 E895FDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   572                              <1>     ;extErrExit sets rsi to caller regs
   573 000057BD 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   574                              <1>     return
    18                              <2> %%_ret:
    19 000057C2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   575                              <1> .gdfsCDSFound:
   576 000057C3 E8D0F8FFFF          <1>     call getDiskData
   577 000057C8 7219                <1>     jc .error
   578                              <1> ;Now we have that:
   579                              <1> ;al = sectors per cluster
   580                              <1> ;ah = media ID byte
   581                              <1> ;ebx = total clusters
   582                              <1> ;cx = bytes per sector
   583                              <1> ;edx = number of available clusters
   584 000057CA E81BF9FFFF          <1>     call getUserRegs
   585 000057CF 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   586 000057D1 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   587 000057D4 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   588 000057D8 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   589 000057DB 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   590                              <1> .badExit:
   591 000057DF 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   592                              <1>     return
    18                              <2> %%_ret:
    19 000057E2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   593                              <1> .error:
   594 000057E3 E86AFDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   595 000057E8 66B8FFFF            <1>     mov ax, -1
   596 000057EC EBF1                <1>     jmp short .badExit
   597                              <1> 
   598                              <1> 
   599                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   600 000057EE 31C0                <1>     xor eax, eax
   601 000057F0 668705(91C30300)    <1>     xchg ax, word [errorLevel]
   602 000057F7 E948FDFFFF          <1>     jmp extGoodExit
   603                              <1> 
   604                              <1> getSysVarsPtr:     ;ah = 52h
   605 000057FC 488D15(33C00300)    <1>     lea rdx, sysVarsPtr
   606 00005803 E8E2F8FFFF          <1>     call getUserRegs
   607 00005808 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   608                              <1>     return
    18                              <2> %%_ret:
    19 0000580C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   609                              <1> 
   610                              <1> 
   611                              <1> ;AH = 53h - CREATE DPB
   612                              <1> createDPB:         ;generates a DPB from a given BPB
   613                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   614                              <1> ;This is done so that the other fields of the DPB can be recycled
   615                              <1> ;Input: rsi = ptr to the BPB
   616                              <1> ;       rbp = ptr to the DPB
   617                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   618                              <1> ;bMediaDescriptor
   619 0000580D 8A4615              <1>     mov al, byte [rsi + bpb.media]
   620 00005810 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   621                              <1> ;dFirstFreeCluster
   622 00005813 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   623                              <1> ;dNumberOfFreeClusters
   624 0000581A C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   625                              <1> ;wBytesPerSector
   626 00005821 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   627 00005825 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   628                              <1> ;bMaxSectorInCluster
   629 00005829 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   630 0000582C FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   631 0000582E 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   632                              <1> ;bSectorsPerClusterShift
   633 00005831 FEC0                <1>     inc al
   634 00005833 30C9                <1>     xor cl, cl
   635                              <1> .cd2:
   636 00005835 D0E8                <1>     shr al, 1
   637 00005837 7404                <1>     jz .cd3
   638 00005839 FEC1                <1>     inc cl
   639 0000583B EBF8                <1>     jmp short .cd2
   640                              <1> .cd3:
   641 0000583D 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   642                              <1> ;wFAToffset, number of reserved sectors in partition
   643 00005840 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   644 00005844 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   645                              <1> ;bNumberOfFATs
   646 00005848 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   647 0000584B 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   648                              <1> ;wNumberRootDirEntries
   649                              <1> ;Gets the number of 32 byte entries in the root directory
   650                              <1> ;Only valid for FAT 12/16
   651 0000584E 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   652 00005852 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   653                              <1> ;dFATlength, get the FAT length
   654 00005856 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   655 0000585A 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   656 0000585D 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   657 0000585F 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   658 00005862 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   659                              <1> ;Complex cases below...
   660                              <1> ;dClusterHeapOffset, start sector of the data area
   661 00005865 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   662 00005869 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   663 0000586C 85C0                <1>     test eax, eax
   664 0000586E 0F44C3              <1>     cmovz eax, ebx
   665                              <1> ;eax = FATsz
   666 00005871 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   667 00005875 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   668 00005878 85DB                <1>     test ebx, ebx
   669 0000587A 0F44D9              <1>     cmovz ebx, ecx 
   670                              <1> ;ebx = TotSec
   671 0000587D 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   672 00005880 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   673                              <1> .cd4:
   674 00005882 01C2                <1>     add edx, eax
   675 00005884 FEC9                <1>     dec cl
   676 00005886 75FA                <1>     jnz .cd4
   677 00005888 89D0                <1>     mov eax, edx    ;Store product in eax
   678 0000588A 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   679 0000588E 01D0                <1>     add eax, edx
   680                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   681 00005890 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   682 00005894 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   683 00005897 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   684 0000589B 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   685 0000589C 89D0                <1>     mov eax, edx
   686 0000589E 31D2                <1>     xor edx, edx
   687 000058A0 F7F1                <1>     div ecx
   688 000058A2 89C2                <1>     mov edx, eax
   689 000058A4 58                  <1>     pop rax
   690 000058A5 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   691                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   692                              <1>     ;aka eax = Start sector of the data area in volume
   693 000058A7 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   694                              <1> ;dClusterCount
   695 000058AA 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   696 000058AC 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   697 000058AE 31D2                <1>     xor edx, edx
   698 000058B0 BB01000000          <1>     mov ebx, 1
   699 000058B5 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   700 000058B8 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   701 000058BA F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   702 000058BC FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   703 000058BE 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   704                              <1> ;dFirstUnitOfRootDir
   705 000058C1 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   706 000058C6 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   707 000058C9 770F                <1>     ja .cd5
   708                              <1>     ;Else, we need to find the first sector of the root directory
   709                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   710 000058CB 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   711 000058CF 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   712                              <1> .cd51:
   713 000058D3 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   714 000058D6 FFC9                <1>     dec ecx
   715 000058D8 75F9                <1>     jnz .cd51
   716                              <1> .cd5:
   717 000058DA 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   718                              <1> ;Exit epilogue
   719 000058DD 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   720 000058E4 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   721                              <1>     %if DEBUG && DPBINFO
   722                              <1>     ;Print DPB 
   723                              <1>     debugEnterM
   724                              <1>     push rbp
   725                              <1>     lea rbp, .l0000
   726                              <1>     call debPrintNullString
   727                              <1>     pop rbp
   728                              <1>     call debDPBBPBptr
   729                              <1>     call debMakeDebuggerRespond
   730                              <1>     jmp short .l0001
   731                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   732                              <1> .l0001:
   733                              <1>     debugExitM
   734                              <1>     %endif
   735                              <1>     return
    18                              <2> %%_ret:
    19 000058E6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   736                              <1> 
   737                              <1> getVerifySetting:  ;ah = 54h
   738 000058E7 8A05(32C30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   739                              <1>     return
    18                              <2> %%_ret:
    19 000058ED C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   740                              <1> 
   741                              <1> getExtendedError:  ;ah = 59h
   742 000058EE E8F7F7FFFF          <1>     call getUserRegs
   743 000058F3 668B05(6DC30300)    <1>     mov ax, word [errorExCde]
   744 000058FA 8A2D(6CC30300)      <1>     mov ch, byte [errorLocus]
   745 00005900 8A3D(70C30300)      <1>     mov bh, byte [errorClass]
   746 00005906 8A1D(6FC30300)      <1>     mov bl, byte [errorAction]
   747 0000590C 668906              <1>     mov word [rsi + callerFrame.rax], ax
   748 0000590F 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   749 00005913 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   750                              <1>     return
    18                              <2> %%_ret:
    19 00005916 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   751                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   752                              <1> noOp:
   753                              <1>     return
    18                              <2> %%_ret:
    19 00005917 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    40                                  %include "./Source/Kernel/Net/server.asm"
    41                              <1> ;Network functions here
    42                              <1> 
    43                              <1> dosServer:  ;ah = 5Dh
    44                              <1> ;Dispatches the server function in al. Many of these are share hooks.
    45                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
    46                              <1> ;   rdx = Pointer to DPL
    47 00005918 3C07                <1>     cmp al, 07h
    48 0000591A 7204                <1>     jb .skip
    49 0000591C 3C09                <1>     cmp al, 09h
    50 0000591E 7619                <1>     jbe .skip2
    51                              <1> .skip:
    52 00005920 4889D6              <1>     mov rsi, rdx
    53 00005923 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    54 00005927 66891D(A5C30300)    <1>     mov word [machineNum], bx
    55 0000592E 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    56 00005932 48891D(9DC30300)    <1>     mov qword [serverPSP], rbx
    57                              <1>     
    58                              <1> .skip2:
    59                              <1> serverDispatch: ;AX=5D00h
    60                              <1> ;Input: rsi points to the DOS parameter list
    61 00005939 58                  <1>     pop rax
    62 0000593A 56                  <1>     push rsi    ;Put dpl ptr in rdi
    63 0000593B 5F                  <1>     pop rdi
    64 0000593C E8A9F7FFFF          <1>     call getUserRegs
    65 00005941 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    66 00005944 56                  <1>     push rsi
    67 00005945 B906000000          <1>     mov ecx, 6
    68 0000594A F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    69 0000594D 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    70 00005954 48A5                <1>     movsq   ;Transfer r8...
    71 00005956 48A5                <1>     movsq   ;... and r9
    72 00005958 5E                  <1>     pop rsi
    73 00005959 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    74 0000595C 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    75 00005960 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    76 00005964 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    77 00005968 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    78 0000596C 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    79 00005970 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    80 00005974 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    81 00005978 48891D(E4C30300)    <1>     mov qword [oldRBX], rbx
    82 0000597F C605(5CC60300)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    83 00005986 E989FAFFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    84                              <1> 
    85                              <1> 
    86                              <1> netServices:   ;ah = 5Eh, do nothing
    87                              <1> netRedir:;ah = 5Fh, do nothing
    88                              <1>     return
    18                              <2> %%_ret:
    19 0000598B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    41                                  %include "./Source/Kernel/Net/multiplx.asm"
    42                              <1> ;Default multiplexer. Current only installed function is ah=12h
    43                              <1> 
    44                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    45 0000598C 80FC12              <1>     cmp ah, 12h
    46 0000598F 751C                <1>     jne .exit       ;Exit if not for us
    47 00005991 3C05                <1>     cmp al, mDispTblL / 2
    48 00005993 7318                <1>     jae .exit   ;If above or equal, exit
    49 00005995 53                  <1>     push rbx
    50 00005996 51                  <1>     push rcx
    51 00005997 31C9                <1>     xor ecx, ecx
    52 00005999 488D1D04AAFFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    53 000059A0 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    54 000059A2 D1E1                <1>     shl ecx, 1   ;multiply by 2
    55 000059A4 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    56 000059A7 FFD3                <1>     call rbx
    57 000059A9 59                  <1>     pop rcx
    58 000059AA 5B                  <1>     pop rbx
    59 000059AB 48CF                <1>     iretq
    60                              <1> .exit:
    61 000059AD 804C241001          <1>     or byte [rsp + 8h*2], 1
    62 000059B2 48CF                <1>     iretq
    63                              <1> multiplexTest:
    64 000059B4 B0FF                <1>     mov al, -1
    65 000059B6 C3                  <1>     ret
    66                              <1> getDosDataSeg:  ;Int 4Fh, AX=1203h
    67                              <1> ;Return: r8 = Dos Data Segment Pointer
    68 000059B7 4C8D05(00C00300)    <1>     lea r8, dosDataArea
    69                              <1>     return
    18                              <2> %%_ret:
    19 000059BE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    42                                  %include "./Source/Misc/int44h.asm"
    43                              <1> critErrorHandler:   ;Int 44h
    44                              <1> ;User Stack in usage here, must be swapped to before this is called
    45                              <1> ;Entered with:  
    46                              <1> ;               AH = Critical Error Bitfield
    47                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    48                              <1> ;               Bit 6 - Reserved
    49                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    50                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    51                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    52                              <1> ;               Bits [2-1] = Affected Disk Error
    53                              <1> ;                     0 0   DOS area
    54                              <1> ;                     0 1   FAT area
    55                              <1> ;                     1 0   Directory area
    56                              <1> ;                     1 1   Data area
    57                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    58                              <1> ;               AL  = Failing drive number if AH[7] = 0
    59                              <1> ;               DIL = Error code for errorMsg
    60                              <1> ;               RSI = EA of Device Header for which device the error occured
    61                              <1> ;Return:
    62                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    63                              <1> ;                  = 1 - Retry the Operation    (Retry)
    64                              <1> ;                  = 2 - Terminate the Program  (Abort)
    65                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    66 000059BF 53                  <1>     push rbx
    67 000059C0 51                  <1>     push rcx
    68 000059C1 52                  <1>     push rdx
    69 000059C2 57                  <1>     push rdi
    70 000059C3 56                  <1>     push rsi
    71 000059C4 FC                  <1>     cld         ;Make String ops go forward
    72                              <1> 
    73 000059C5 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    74 000059C8 488D155E020000      <1>     lea rdx, qword [.crlf]
    75 000059CF B409                <1>     mov ah, 09h ;Print String
    76 000059D1 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    77                              <1> 
    78 000059D3 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    79 000059D9 B90C000000          <1>     mov ecx, 0Ch
    80 000059DE 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    81 000059E0 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    82 000059E3 480FB7FF            <1>     movzx rdi, di
    83 000059E7 4889FA              <1>     mov rdx, rdi    ;Copy error code
    84 000059EA 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    85 000059EE 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    86 000059F1 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    87 000059F4 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    88 000059FB 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    89 000059FF B409                <1>     mov ah, 09h ;Print String
    90 00005A01 CD41                <1>     int 41h     ;Call DOS to print first part of message
    91                              <1> 
    92 00005A03 488D1505020000      <1>     lea rdx, qword [.readmsg]
    93 00005A0A 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    94 00005A11 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    95 00005A14 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    96 00005A18 B409                <1>     mov ah, 09h ;Print String
    97 00005A1A CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    98                              <1> 
    99 00005A1C F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
   100 00005A1F 0F85DF000000        <1>     jnz .charError
   101                              <1> ;Disk error continues here
   102 00005A25 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
   103 00005A2C B409                <1>     mov ah, 09h
   104 00005A2E CD41                <1>     int 41h
   105 00005A30 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   106 00005A32 80C241              <1>     add dl, "A" ;Add ASCII code
   107 00005A35 B402                <1>     mov ah, 02h ;Print char in dl
   108 00005A37 CD41                <1>     int 41h
   109                              <1> .userInput:
   110 00005A39 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   111 00005A40 B409                <1>     mov ah, 09h
   112 00005A42 CD41                <1>     int 41h
   113                              <1> ;Abort, Retry, Ignore, Fail is word order
   114                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   115                              <1> .userAbort:
   116                              <1> ;Abort is always an option
   117 00005A44 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   118 00005A4B B409                <1>     mov ah, 09h
   119 00005A4D CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   120                              <1> .userRetry:
   121 00005A4F F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   122 00005A52 7416                <1>     jz .userIgnore    ;If clear, dont print message
   123 00005A54 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   124 00005A5B B409                <1>     mov ah, 09h
   125 00005A5D CD41                <1>     int 41h
   126 00005A5F 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   127 00005A66 B409                <1>     mov ah, 09h
   128 00005A68 CD41                <1>     int 41h
   129                              <1> .userIgnore:
   130 00005A6A F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   131 00005A6D 7416                <1>     jz .userFail
   132 00005A6F 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   133 00005A76 B409                <1>     mov ah, 09h
   134 00005A78 CD41                <1>     int 41h
   135 00005A7A 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   136 00005A81 B409                <1>     mov ah, 09h
   137 00005A83 CD41                <1>     int 41h
   138                              <1> .userFail:
   139 00005A85 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   140 00005A88 7416                <1>     jz .userMsgEnd
   141 00005A8A 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   142 00005A91 B409                <1>     mov ah, 09h
   143 00005A93 CD41                <1>     int 41h
   144 00005A95 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   145 00005A9C B409                <1>     mov ah, 09h
   146 00005A9E CD41                <1>     int 41h
   147                              <1> .userMsgEnd:
   148 00005AA0 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   149 00005AA7 B409                <1>     mov ah, 09h
   150 00005AA9 CD41                <1>     int 41h
   151                              <1> ;Get user input now 
   152 00005AAB 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   153 00005AAD 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   154 00005AB4 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   155 00005AB6 CD41                <1>     int 41h ;Get char in al
   156 00005AB8 3C61                <1>     cmp al, "a" ;Chack if lowercase
   157 00005ABA 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   158 00005ABC 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   159                              <1> .uip1:
   160 00005ABE AE                  <1>     scasb   ;Compare char to list, offset gives return code
   161 00005ABF 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   162 00005AC1 FFC1                <1>     inc ecx
   163 00005AC3 81F904000000        <1>     cmp ecx, 4
   164 00005AC9 75F3                <1>     jne .uip1
   165 00005ACB E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   166                              <1> .validInput:
   167 00005AD0 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   168                              <1> ;Now check if the input is permitted
   169 00005AD2 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   170 00005AD4 7427                <1>     je .cehExit
   171 00005AD6 84C0                <1>     test al, al ;Check if 0 => Ignore
   172 00005AD8 740F                <1>     je .viIgnore
   173 00005ADA 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   174 00005ADC 7416                <1>     je .viRetry
   175                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   176 00005ADE F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   177 00005AE1 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   178 00005AE7 EB14                <1>     jmp short .cehExit
   179                              <1> .viIgnore:
   180 00005AE9 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   181 00005AEC 0F8447FFFFFF        <1>     jz .userInput
   182 00005AF2 EB09                <1>     jmp short .cehExit
   183                              <1> .viRetry:
   184 00005AF4 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   185 00005AF7 0F843CFFFFFF        <1>     jz .userInput
   186                              <1> .cehExit:
   187 00005AFD 5E                  <1>     pop rsi
   188 00005AFE 5F                  <1>     pop rdi
   189 00005AFF 5A                  <1>     pop rdx
   190 00005B00 59                  <1>     pop rcx
   191 00005B01 5B                  <1>     pop rbx
   192 00005B02 48CF                <1>     iretq
   193                              <1> .charError:
   194 00005B04 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   195 00005B09 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   196                              <1> .ce1:
   197 00005B10 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   198 00005B11 88C2                <1>     mov dl, al  ;Move char into dl
   199 00005B13 B402                <1>     mov ah, 02h
   200 00005B15 CD41                <1>     int 41h ;Print char
   201 00005B17 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   202 00005B19 E91BFFFFFF          <1>     jmp .userInput
   203                              <1> 
   204                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   205 00005B1E 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   205 00005B27 746563742024202020  <1>
   206 00005B30 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   206 00005B39 6E6974202420202020  <1>
   207 00005B42 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   207 00005B4B 202420202020202020  <1>
   208 00005B54 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   208 00005B5D 6F6D6D616E64202420  <1>
   209 00005B66 446174612024202020- <1>             db "Data $            "       ;Error 4
   209 00005B6F 202020202020202020  <1>
   210 00005B78 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   210 00005B81 737420242020202020  <1>
   211 00005B8A 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   211 00005B93 202020202020202020  <1>
   212 00005B9C 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   212 00005BA5 656469612024202020  <1>
   213 00005BAE 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   213 00005BB7 7420466F756E642024  <1>
   214 00005BC0 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   214 00005BC9 706572202420202020  <1>
   215 00005BD2 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   215 00005BDB 6C7420242020202020  <1>
   216 00005BE4 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   216 00005BED 742024202020202020  <1>
   217 00005BF6 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   217 00005BFF 61696C757265202420  <1>
   218                              <1> 
   219 00005C08 64726976652024      <1> .drive      db "drive $"
   220 00005C0F 6572726F7220726561- <1> .readmsg    db "error reading $"
   220 00005C18 64696E672024        <1>
   221 00005C1E 6572726F7220777269- <1> .writemsg   db "error writing $"
   221 00005C27 74696E672024        <1>
   222 00005C2D 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   223 00005C30 41626F727424        <1> .abortmsg   db "Abort$" 
   224 00005C36 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   225 00005C3D 526574727924        <1> .retrymsg   db "Retry$"
   226 00005C43 4661696C24          <1> .failmsg    db "Fail$"
   227 00005C48 2C2024              <1> .betweenMsg db ", $"
   228 00005C4B 3F2024              <1> .endMsg     db "? $"
   229 00005C4E 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    43                                  %include "./Source/Drivers/drvData.asm"
    44                              <1> ;-----------------------------------:
    45                              <1> ;          Driver routines          :
    46                              <1> ;-----------------------------------:
    47                              <1> drivers:
    48                              <1> conHdr:
    49 00005C52 [745C000000000000]  <1>     dq auxHdr
    50 00005C5A 1380                <1>     dw 08013h
    51 00005C5C [F25D000000000000]  <1>     dq commonStrat
    52 00005C64 [015E000000000000]  <1>     dq conDriver
    53 00005C6C 434F4E2020202020    <1>     db "CON     "
    54                              <1> auxHdr:
    55 00005C74 [965C000000000000]  <1>     dq prnHdr
    56 00005C7C 0080                <1>     dw 08000h
    57 00005C7E [F25D000000000000]  <1>     dq commonStrat
    58 00005C86 [B660000000000000]  <1>     dq com1Intr
    59 00005C8E 4155582020202020    <1>     db "AUX     "
    60                              <1> prnHdr:
    61 00005C96 [B85C000000000000]  <1>     dq clkHdr
    62 00005C9E 40A0                <1>     dw 0A040h
    63 00005CA0 [FA5D000000000000]  <1>     dq nulStrat
    64 00005CA8 [005E000000000000]  <1>     dq nulIntr
    65 00005CB0 50524E2020202020    <1>     db "PRN     "
    66                              <1> clkHdr:
    67 00005CB8 [DA5C000000000000]  <1>     dq msdHdr
    68 00005CC0 0880                <1>     dw 08008h
    69 00005CC2 [F25D000000000000]  <1>     dq commonStrat
    70 00005CCA [4E5F000000000000]  <1>     dq clkDriver
    71 00005CD2 434C4F434B242020    <1>     db "CLOCK$  "
    72                              <1> msdHdr:
    73 00005CDA [FC5C000000000000]  <1>     dq com1Hdr
    74 00005CE2 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    75 00005CE4 [F25D000000000000]  <1>     dq commonStrat
    76 00005CEC [5B62000000000000]  <1>     dq msdDriver
    77 00005CF4 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    78                              <1> com1Hdr:
    79 00005CFC [1E5D000000000000]  <1>     dq com2Hdr
    80 00005D04 0080                <1>     dw 08000h
    81 00005D06 [F25D000000000000]  <1>     dq commonStrat
    82 00005D0E [B660000000000000]  <1>     dq com1Intr
    83 00005D16 434F4D3120202020    <1>     db "COM1    "
    84                              <1> com2Hdr:
    85 00005D1E [405D000000000000]  <1>     dq com3Hdr
    86 00005D26 0080                <1>     dw 08000h
    87 00005D28 [F25D000000000000]  <1>     dq commonStrat
    88 00005D30 [BF60000000000000]  <1>     dq com2Intr
    89 00005D38 434F4D3220202020    <1>     db "COM2    "
    90                              <1> com3Hdr:
    91 00005D40 [625D000000000000]  <1>     dq com4Hdr
    92 00005D48 0080                <1>     dw 08000h
    93 00005D4A [F25D000000000000]  <1>     dq commonStrat
    94 00005D52 [C860000000000000]  <1>     dq com3Intr
    95 00005D5A 434F4D3320202020    <1>     db "COM3    "
    96                              <1> com4Hdr:
    97 00005D62 [845D000000000000]  <1>     dq lpt1Hdr
    98 00005D6A 0080                <1>     dw 08000h
    99 00005D6C [F25D000000000000]  <1>     dq commonStrat
   100 00005D74 [D160000000000000]  <1>     dq com4Intr
   101 00005D7C 434F4D3420202020    <1>     db "COM4    "
   102                              <1> lpt1Hdr:
   103 00005D84 [A65D000000000000]  <1>     dq lpt2Hdr
   104 00005D8C 40A0                <1>     dw 0A040h
   105 00005D8E [FA5D000000000000]  <1>     dq nulStrat
   106 00005D96 [005E000000000000]  <1>     dq nulIntr
   107 00005D9E 4C50543120202020    <1>     db "LPT1    "
   108                              <1> lpt2Hdr:
   109 00005DA6 [C85D000000000000]  <1>     dq lpt3Hdr
   110 00005DAE 40A0                <1>     dw 0A040h
   111 00005DB0 [FA5D000000000000]  <1>     dq nulStrat
   112 00005DB8 [005E000000000000]  <1>     dq nulIntr
   113 00005DC0 4C50543220202020    <1>     db "LPT2    "
   114                              <1> lpt3Hdr:
   115 00005DC8 FFFFFFFFFFFFFFFF    <1>     dq -1
   116 00005DD0 40A0                <1>     dw 0A040h
   117 00005DD2 [FA5D000000000000]  <1>     dq nulStrat
   118 00005DDA [005E000000000000]  <1>     dq nulIntr
   119 00005DE2 4C50543320202020    <1>     dq "LPT3    "
   120 00005DEA 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    44                                  %include "./Source/Drivers/charDrv.asm"
    45                              <1> commonStrat:
    46                              <1> ;DOS calls this function with rbx=Ptr to request header
    47 00005DF2 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    48 00005DF9 C3                  <1>     ret
    49                              <1> nulStrat:
    50 00005DFA 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    51                              <1> nulIntr:
    52 00005E00 C3                  <1>     ret
    53                              <1> conDriver:
    54 00005E01 50                  <1>     push rax
    55 00005E02 53                  <1>     push rbx
    56 00005E03 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    57 00005E0A B003                <1>     mov al, 03h ;Unknown Command
    58 00005E0C 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    59 00005E10 7739                <1>     ja .conWriteErrorCode ;If yes, error!
    60                              <1> 
    61 00005E12 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    62 00005E15 3C04                <1>     cmp al, 4
    63 00005E17 7441                <1>     jz .conRead
    64 00005E19 3C05                <1>     cmp al, 5
    65 00005E1B 0F847F000000        <1>     jz .conNondestructiveRead
    66 00005E21 3C06                <1>     cmp al, 6
    67 00005E23 0F84A8000000        <1>     jz .conInputStatus
    68 00005E29 3C07                <1>     cmp al, 7
    69 00005E2B 0F84B0000000        <1>     jz .conFlushInputBuffers
    70 00005E31 3C08                <1>     cmp al, 8
    71 00005E33 0F84CA000000        <1>     jz .conWrite
    72 00005E39 3C09                <1>     cmp al, 9
    73 00005E3B 0F84C2000000        <1>     jz .conWrite
    74 00005E41 3C0A                <1>     cmp al, 0Ah
    75 00005E43 0F84E3000000        <1>     jz .conOutputStatus
    76 00005E49 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    77                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    78 00005E4B B480                <1>     mov ah, 80h ;Set error bit
    79 00005E4D 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    80                              <1> .conExit:
    81 00005E51 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    82 00005E57 5B                  <1>     pop rbx
    83 00005E58 58                  <1>     pop rax
    84 00005E59 C3                  <1>     ret
    85                              <1> .conRead:    ;Function 4
    86 00005E5A B005                <1>     mov al, 05h ;Bad request structure length?
    87 00005E5C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    88 00005E5F 75EA                <1>     jne .conWriteErrorCode
    89                              <1> 
    90 00005E61 57                  <1>     push rdi
    91 00005E62 51                  <1>     push rcx
    92 00005E63 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    93 00005E67 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    94                              <1> .cre1:
    95 00005E69 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    96 00005E6C 741C                <1>     je .cre2
    97 00005E6E 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    98 00005E75 751A                <1>     jnz .cre3   ;No, get the buffer value
    99 00005E77 31C0                <1>     xor eax, eax
   100 00005E79 CD36                <1>     int 36h
   101                              <1> .cre11:
   102 00005E7B AA                  <1>     stosb
   103 00005E7C 84C0                <1>     test al, al ;Was the ascii code stored 0?
   104 00005E7E 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
   105 00005E80 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   106                              <1> .cre12:
   107 00005E86 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   108 00005E88 EBDF                <1>     jmp short .cre1
   109                              <1> .cre2:
   110 00005E8A 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   111 00005E8D 59                  <1>     pop rcx
   112 00005E8E 5F                  <1>     pop rdi
   113 00005E8F EBC0                <1>     jmp short .conExit
   114                              <1> .cre3:
   115 00005E91 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   116 00005E97 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   117 00005E9E EBDB                <1>     jmp short .cre11
   118                              <1> 
   119                              <1> .conNondestructiveRead:  ;Function 5
   120 00005EA0 B005                <1>     mov al, 05h ;Bad request structure length?
   121 00005EA2 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   122 00005EA5 75A4                <1>     jne .conWriteErrorCode
   123 00005EA7 803D8E00000000      <1>     cmp byte [.conBuf], 0
   124 00005EAE 7519                <1>     jnz .cnr2
   125 00005EB0 B401                <1>     mov ah, 01h     ;Get key if exists
   126 00005EB2 CD36                <1>     int 36h
   127 00005EB4 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   128                              <1>     ;Keystroke available
   129                              <1> .cnr0:
   130 00005EB6 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   131 00005EB9 E993FFFFFF          <1>     jmp .conExit
   132                              <1> .cnr1: ;No keystroke available
   133 00005EBE 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   134 00005EC4 E988FFFFFF          <1>     jmp .conExit
   135                              <1> .cnr2:
   136 00005EC9 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   137 00005ECF EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   138                              <1> 
   139                              <1> .conInputStatus:         ;Function 6
   140 00005ED1 B005                <1>     mov al, 05h ;Bad request structure length?
   141 00005ED3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   142 00005ED6 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   143 00005EDC E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   144                              <1> 
   145                              <1> .conFlushInputBuffers:   ;Function 7
   146 00005EE1 B005                <1>     mov al, 05h ;Bad request structure length?
   147 00005EE3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   148 00005EE6 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   149 00005EEC C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   150                              <1> .cfib0:
   151 00005EF3 B401                <1>     mov ah, 01      ;Get buffer status
   152 00005EF5 CD36                <1>     int 36h
   153 00005EF7 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   154 00005EFD 30E4                <1>     xor ah, ah
   155 00005EFF CD36                <1>     int 36h ;Read key to flush from buffer
   156 00005F01 EBF0                <1>     jmp short .cfib0
   157                              <1> 
   158                              <1> .conWrite:   ;Function 8 and 9
   159 00005F03 B005                <1>     mov al, 05h ;Bad request structure length?
   160 00005F05 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   161 00005F08 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   162                              <1> 
   163 00005F0E 56                  <1>     push rsi
   164 00005F0F 51                  <1>     push rcx
   165 00005F10 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   166 00005F14 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   167                              <1> .cw1: 
   168 00005F16 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   169 00005F19 7407                <1>     je .cw2
   170 00005F1B AC                  <1>     lodsb   ;Get char into al, and inc rsi
   171 00005F1C CD49                <1>     int 49h ;Fast print char
   172 00005F1E FFC1                <1>     inc ecx
   173 00005F20 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   174                              <1> .cw2:
   175 00005F22 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   176 00005F25 59                  <1>     pop rcx
   177 00005F26 5E                  <1>     pop rsi
   178 00005F27 E925FFFFFF          <1>     jmp .conExit
   179                              <1> .conOutputStatus:   ;Function 0Ah
   180 00005F2C B005                <1>     mov al, 05h ;Bad request structure length?
   181 00005F2E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   182 00005F31 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   183 00005F37 E915FFFFFF          <1>     jmp .conExit
   184                              <1> 
   185 00005F3C 00                  <1> .conBuf db 0    ;Single byte buffer
   186                              <1> fastOutput:         ;This CON driver supports Int 49h
   187                              <1> ;Called with char to transfer in al
   188 00005F3D 50                  <1>     push rax
   189 00005F3E B40E                <1>     mov ah, 0Eh
   190 00005F40 CD30                <1>     int 30h
   191 00005F42 58                  <1>     pop rax
   192 00005F43 48CF                <1>     iretq
   193                              <1> ctrlBreak:
   194                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   195 00005F45 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   196 00005F4C 48CF                <1>     iretq
   197                              <1> 
   198                              <1> clkDriver:
   199 00005F4E 50                  <1>     push rax
   200 00005F4F 53                  <1>     push rbx
   201 00005F50 51                  <1>     push rcx
   202 00005F51 52                  <1>     push rdx
   203 00005F52 56                  <1>     push rsi
   204 00005F53 55                  <1>     push rbp
   205 00005F54 488B1D8FFEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   206 00005F5B B003                <1>     mov al, 03h ;Unknown Command
   207 00005F5D 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   208 00005F61 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   209                              <1> 
   210 00005F63 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   211 00005F66 3C04                <1>     cmp al, 04h
   212 00005F68 7437                <1>     jz .clkRead
   213 00005F6A 3C06                <1>     cmp al, 06h
   214 00005F6C 0F8494000000        <1>     jz .clkInputStatus
   215 00005F72 3C07                <1>     cmp al, 07h
   216 00005F74 0F8498000000        <1>     jz .clkFlushInputBuffers
   217 00005F7A 3C08                <1>     cmp al, 08h
   218 00005F7C 0F84A0000000        <1>     jz .clkWrite
   219 00005F82 3C09                <1>     cmp al, 09h
   220 00005F84 0F8498000000        <1>     jz .clkWrite
   221 00005F8A EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   222                              <1> .clkNotFunctioning:
   223 00005F8C B002                <1>     mov al, 02h ;Device not ready error
   224                              <1> .clkWriteErrorCode:
   225 00005F8E B480                <1>     mov ah, 80h ;Set error bit
   226 00005F90 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   227                              <1> .clkExit:
   228 00005F94 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   229 00005F9A 5D                  <1>     pop rbp
   230 00005F9B 5E                  <1>     pop rsi
   231 00005F9C 5A                  <1>     pop rdx
   232 00005F9D 59                  <1>     pop rcx
   233 00005F9E 5B                  <1>     pop rbx
   234 00005F9F 58                  <1>     pop rax
   235 00005FA0 C3                  <1>     ret
   236                              <1> 
   237                              <1> .clkRead:           ;Function 4
   238 00005FA1 B005                <1>     mov al, 05h ;Bad request structure length?
   239 00005FA3 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   240 00005FA6 75E6                <1>     jne .clkWriteErrorCode
   241                              <1> 
   242 00005FA8 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   243 00005FAB 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   244 00005FAF 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   245 00005FB6 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   246 00005FBA 30E4                <1>     xor ah, ah
   247 00005FBC CD3A                <1>     int 3Ah         ;Read the system timer
   248 00005FBE 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   249 00005FC0 740D                <1>     jz .clkr1       ;Nope, now just time 
   250 00005FC2 30E4                <1>     xor ah, ah
   251                              <1>     ;This works as al should keep count of the # of days passed since last read
   252 00005FC4 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   253 00005FC8 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   254                              <1> .clkr1:
   255 00005FCF 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   256 00005FD2 0FB7D2              <1>     movzx edx, dx
   257 00005FD5 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   258 00005FD7 89D0                <1>     mov eax, edx
   259 00005FD9 31D2                <1>     xor edx, edx
   260 00005FDB 89D8                <1>     mov eax, ebx
   261 00005FDD B944040000          <1>     mov ecx, 1092   
   262 00005FE2 F7F1                <1>     div ecx
   263 00005FE4 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   264 00005FE7 89D0                <1>     mov eax, edx    ;Get remainder in eax
   265 00005FE9 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   266 00005FED 31D2                <1>     xor edx, edx
   267 00005FEF B95B000000          <1>     mov ecx, 91 ;5*18.2
   268 00005FF4 F7F1                <1>     div ecx
   269 00005FF6 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   270 00005FF9 89D0                <1>     mov eax, edx    ;Get remainder in eax
   271                              <1>     ;lea eax, dword [eax + 4*eax]
   272                              <1>     ;add eax, edx    ;Essentially multiply by 6
   273 00005FFB 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   274 00005FFE 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   275 00006001 E98EFFFFFF          <1>     jmp .clkExit
   276                              <1> 
   277                              <1> .clkInputStatus:    ;Function 6
   278                              <1> ;Always return ready
   279 00006006 B005                <1>     mov al, 05h ;Bad request structure length?
   280 00006008 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   281 0000600B 7581                <1>     jne .clkWriteErrorCode
   282 0000600D E982FFFFFF          <1>     jmp .clkExit
   283                              <1> .clkFlushInputBuffers:  ;Function 7
   284                              <1> ;Always return done immediately
   285 00006012 B005                <1>     mov al, 05h ;Bad request structure length?
   286 00006014 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   287 00006017 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   288 0000601D E972FFFFFF          <1>     jmp .clkExit
   289                              <1> 
   290                              <1> .clkWrite:          ;Functions 8 and 9
   291 00006022 B005                <1>     mov al, 05h ;Bad request structure length?
   292 00006024 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   293 00006027 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   294                              <1> 
   295 0000602D 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   296 00006030 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   297 00006034 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   298 00006038 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   299                              <1> 
   300 0000603F 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   301 00006041 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   302 00006045 B105                <1>     mov cl, 5
   303 00006047 F6F1                <1>     div cl          ;Divide al by 5
   304 00006049 30E4                <1>     xor ah, ah      ;Remove the remainder
   305 0000604B 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   306                              <1> ;Using the decimal part of this formula for the low count
   307                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   308 0000604D 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   309 00006050 B912000000          <1>     mov ecx, 18
   310 00006055 F7E1                <1>     mul ecx  
   311 00006057 01C3                <1>     add ebx, eax
   312                              <1> 
   313 00006059 31D2                <1>     xor edx, edx
   314 0000605B 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   315 0000605F B944040000          <1>     mov ecx, 1092
   316 00006064 F7E1                <1>     mul ecx
   317 00006066 01C3                <1>     add ebx, eax
   318 00006068 89DA                <1>     mov edx, ebx    ;edx now has low count
   319 0000606A 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   320 0000606E B401                <1>     mov ah, 01h     ;Set the system time
   321 00006070 CD3A                <1>     int 3Ah
   322                              <1> 
   323 00006072 4889F3              <1>     mov rbx, rsi
   324 00006075 E91AFFFFFF          <1>     jmp .clkExit
   325                              <1> 
   326                              <1> .clkBCDtoHex:
   327                              <1> ;Converts a BCD value to a Hex byte
   328                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   329 0000607A 51                  <1>     push rcx
   330 0000607B 0FB6C0              <1>     movzx eax, al   ;Zero extend
   331 0000607E 89C1                <1>     mov ecx, eax    ;Save al in ecx
   332 00006080 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   333 00006085 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   334 0000608B C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   335                              <1> .cbth0:
   336 0000608E 050A000000          <1>     add eax, 10
   337 00006093 E2F9                <1>     loop .cbth0
   338 00006095 59                  <1>     pop rcx
   339 00006096 C3                  <1>     ret
   340                              <1> 
   341                              <1> .clkHexToBCD:
   342                              <1> ;Converts a Hex byte into two BCD digits
   343                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   344 00006097 51                  <1>     push rcx
   345 00006098 0FB6C0              <1>     movzx eax, al   ;Zero extend
   346 0000609B 31C9                <1>     xor ecx, ecx
   347                              <1> .chtb0:
   348 0000609D 3D0A000000          <1>     cmp eax, 10
   349 000060A2 7209                <1>     jb .chtb1
   350 000060A4 2D0A000000          <1>     sub eax, 10
   351 000060A9 FFC1                <1>     inc ecx
   352 000060AB EBF0                <1>     jmp short .chtb0
   353                              <1> .chtb1:
   354 000060AD C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   355 000060B0 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   356 000060B2 59                  <1>     pop rcx
   357 000060B3 C3                  <1>     ret
   358 000060B4 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   359                              <1> 
   360                              <1> ;COM Driver headers and main interrupt strat
   361                              <1> com1Intr:
   362 000060B6 C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   363 000060BD EB19                <1>     jmp short comIntr
   364                              <1> com2Intr:
   365 000060BF C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   366 000060C6 EB10                <1>     jmp short comIntr
   367                              <1> com3Intr:
   368 000060C8 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   369 000060CF EB07                <1>     jmp short comIntr
   370                              <1> com4Intr:
   371 000060D1 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   372                              <1> comIntr:
   373 000060D8 50                  <1>     push rax
   374 000060D9 53                  <1>     push rbx
   375 000060DA 51                  <1>     push rcx
   376 000060DB 52                  <1>     push rdx
   377 000060DC 56                  <1>     push rsi
   378 000060DD 57                  <1>     push rdi
   379 000060DE 488B1D05FDFFFF      <1>     mov rbx, qword [reqHdrPtr]
   380 000060E5 B003                <1>     mov al, 03h ;Unknown Command
   381 000060E7 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   382 000060EB 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   383                              <1> 
   384 000060ED 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   385 000060F0 3C04                <1>     cmp al, 4   ;Read Character(s)
   386 000060F2 7462                <1>     jz .comRead
   387 000060F4 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   388 000060F6 0F849B000000        <1>     jz .comNondestructiveRead   
   389 000060FC 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   390 000060FE 0F8484000000        <1>     jz .comReadInputStatus
   391 00006104 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   392 00006106 0F84B9000000        <1>     jz .comFlushInputBuffers
   393 0000610C 3C08                <1>     cmp al, 8
   394 0000610E 0F84DB000000        <1>     jz .comWrite
   395 00006114 3C09                <1>     cmp al, 9
   396 00006116 0F84D3000000        <1>     jz .comWrite
   397 0000611C 3C0A                <1>     cmp al, 0Ah
   398 0000611E 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   399 00006124 EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   400                              <1> .comErrorNoCount:
   401 00006126 B002                <1>     mov al, 02h ;Unknown device
   402 00006128 EB19                <1>     jmp short .comWriteErrorCode
   403                              <1> .comReadError:
   404 0000612A BA0B000000          <1>     mov edx, 0Bh
   405                              <1> .comWriteError:
   406 0000612F BA0A000000          <1>     mov edx, 0Ah
   407                              <1> .comError:
   408 00006134 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   409 00006137 B902000000          <1>     mov ecx, 02h    ;Unknown device
   410 0000613C 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   411 0000613E 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   412 00006141 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   413                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   414 00006143 B480                <1>     mov ah, 80h ;Set error bit
   415 00006145 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   416                              <1> .comExit:
   417 00006149 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   418 0000614F 5F                  <1>     pop rdi
   419 00006150 5E                  <1>     pop rsi
   420 00006151 5A                  <1>     pop rdx
   421 00006152 59                  <1>     pop rcx
   422 00006153 5B                  <1>     pop rbx
   423 00006154 58                  <1>     pop rax
   424 00006155 C3                  <1>     ret
   425                              <1> 
   426                              <1> .comRead:
   427 00006156 B005                <1>     mov al, 05h ;Bad request structure length?
   428 00006158 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   429 0000615B 75E6                <1>     jne .comWriteErrorCode
   430                              <1> 
   431 0000615D 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   432 00006161 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   433                              <1> .cr1:
   434 00006163 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   435 00006166 741B                <1>     je .cre2
   436                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   437 00006168 B802000000          <1>     mov eax, 02h    ;Recieve 
   438 0000616D 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   439 00006173 6698                <1>     cbw     ;Zero extend to upper byte
   440 00006175 CD34                <1>     int 34h ;Recieve Char
   441 00006177 72BB                <1>     jc .comError
   442 00006179 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   443 0000617C 74EA                <1>     je .cr11
   444 0000617E AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   445 0000617F FFC1                <1>     inc ecx
   446 00006181 EBE0                <1>     jmp short .cr1
   447                              <1> .cre2:
   448 00006183 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   449 00006186 EBC1                <1>     jmp short .comExit
   450                              <1> 
   451                              <1> .comReadInputStatus:
   452 00006188 B005                <1>     mov al, 05h ;Bad request structure length?
   453 0000618A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   454 0000618D 75B4                <1>     jne .comWriteErrorCode
   455 0000618F 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   456 00006195 EBB2                <1>     jmp short .comExit
   457                              <1> 
   458                              <1> .comNondestructiveRead:
   459                              <1> ;Acts like a "read one character if there is one" function
   460 00006197 B005                <1>     mov al, 05h ;Bad request structure length?
   461 00006199 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   462 0000619C 75A5                <1>     jne .comWriteErrorCode
   463                              <1> .cndr1:
   464 0000619E B802000000          <1>     mov eax, 02h    ;Recieve 
   465 000061A3 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   466 000061A9 6698                <1>     cbw     ;Zero extend to upper byte
   467 000061AB CD34                <1>     int 34h ;Recieve Char
   468 000061AD 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   469 000061B3 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   470 000061B6 7405                <1>     je .cndr2
   471 000061B8 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Get next char
   472 000061BB EB8C                <1>     jmp short .comExit
   473                              <1> .cndr2:
   474 000061BD 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 200h ;Busy bit set
   475 000061C3 EB84                <1>     jmp short .comExit
   476                              <1> 
   477                              <1> .comFlushInputBuffers:
   478 000061C5 B005                <1>     mov al, 05h ;Bad request structure length?
   479 000061C7 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   480 000061CA 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   481                              <1> .cfib0:
   482 000061D0 8A1584000000        <1>     mov dl, byte [.comDevice]
   483 000061D6 6698                <1>     cbw
   484 000061D8 B802000000          <1>     mov eax, 02h    ;Recieve
   485 000061DD CD34                <1>     int 34h
   486 000061DF 0F8241FFFFFF        <1>     jc .comErrorNoCount
   487 000061E5 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   488 000061E8 75E6                <1>     jne .cfib0
   489 000061EA E95AFFFFFF          <1>     jmp .comExit
   490                              <1> 
   491                              <1> .comWrite:
   492 000061EF B005                <1>     mov al, 05h ;Bad request structure length?
   493 000061F1 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   494 000061F4 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   495                              <1> 
   496 000061FA 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   497 000061FE 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   498                              <1> .cw1: 
   499 00006200 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   500 00006203 7417                <1>     je .cw2
   501 00006205 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   502 00006206 B401                <1>     mov ah, 01h ;Move function number into ah
   503 00006208 8A154C000000        <1>     mov dl, byte [.comDevice]
   504 0000620E 6698                <1>     cbw     ;Zero extend to upper byte
   505 00006210 CD34                <1>     int 34h ;Transmit char
   506 00006212 0F821CFFFFFF        <1>     jc .comError
   507 00006218 FFC1                <1>     inc ecx
   508 0000621A EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   509                              <1> .cw2:
   510 0000621C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   511 0000621F E925FFFFFF          <1>     jmp .comExit
   512                              <1> 
   513                              <1> .comOutputStatus:
   514                              <1> ;Read MODEM status
   515 00006224 B005                <1>     mov al, 05h ;Bad request structure length?
   516 00006226 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   517 00006229 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   518                              <1> 
   519 0000622F 8A1525000000        <1>     mov dl, byte [.comDevice]
   520 00006235 6698                <1>     cbw     ;Zero extend to upper byte
   521 00006237 B403                <1>     mov ah, 03h     ;Get status
   522 00006239 CD34                <1>     int 34h
   523 0000623B 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   524 00006241 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   525 00006246 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   526 00006249 F7D0                <1>     not eax      ;Bitwise inversion
   527 0000624B 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   528 00006250 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   529 00006255 E9EFFEFFFF          <1>     jmp .comExit
   530 0000625A 00                  <1> .comDevice   db 0
    45                                  %include "./Source/Drivers/diskDrv.asm"
    46                              <1> msdDriver:
    47 0000625B 50                  <1>     push rax
    48 0000625C 53                  <1>     push rbx
    49 0000625D 51                  <1>     push rcx
    50 0000625E 52                  <1>     push rdx
    51 0000625F 56                  <1>     push rsi
    52 00006260 57                  <1>     push rdi
    53 00006261 55                  <1>     push rbp
    54 00006262 4150                <1>     push r8
    55 00006264 488B1D7FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    56 0000626B 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    57 0000626F B003                <1>     mov al, drvBadCmd
    58 00006271 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    59 00006277 B001                <1>     mov al, drvBadUnit 
    60 00006279 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    61 0000627D 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    62 00006283 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    63 0000628A 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    64 0000628E C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    65 00006291 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    66 00006295 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    67 00006299 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    68 0000629B 488D0D9A000000      <1>     lea rcx, .msdTable
    69 000062A2 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    70 000062A6 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    71 000062A8 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    72 000062AA 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    73 000062AD FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    74                              <1> .msdDriverExit:
    75 000062AF 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    76 000062B5 4158                <1>     pop r8
    77 000062B7 5D                  <1>     pop rbp
    78 000062B8 5F                  <1>     pop rdi
    79 000062B9 5E                  <1>     pop rsi
    80 000062BA 5A                  <1>     pop rdx
    81 000062BB 59                  <1>     pop rcx
    82 000062BC 5B                  <1>     pop rbx
    83 000062BD 58                  <1>     pop rax
    84 000062BE C3                  <1>     ret
    85                              <1> 
    86                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    87 000062BF 4889FB              <1>     mov rbx, rdi
    88 000062C2 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    89 000062C5 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    90 000062C7 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    91                              <1> ;Now fall through to general error
    92                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    93 000062CA B401                <1>     mov ah, 01h
    94 000062CC CD33                <1>     int 33h ;Read status of last operation
    95 000062CE 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    96 000062D1 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    97 000062D3 7460                <1>     je .msdWriteErrorCode 
    98 000062D5 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    99 000062D7 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   100 000062DA 7459                <1>     je .msdWriteErrorCode 
   101 000062DC 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   102 000062DF 7454                <1>     je .msdWriteErrorCode
   103                              <1> ;Device Not Ready
   104 000062E1 B002                <1>     mov al, 02h  ;Device not ready code
   105 000062E3 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   106 000062E6 744D                <1>     je .msdWriteErrorCode
   107 000062E8 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   108 000062EC 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   109                              <1> ;Write Protected
   110 000062F0 30C0                <1>     xor al, al
   111 000062F2 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   112 000062F7 743C                <1>     je .msdWriteErrorCode
   113                              <1> ;CRC Error
   114 000062F9 B004                <1>     mov al, 04h     ;CRC error code
   115 000062FB 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   116 00006300 7433                <1>     je .msdWriteErrorCode
   117 00006302 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   118 00006307 742C                <1>     je .msdWriteErrorCode
   119 00006309 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   120 0000630E 7425                <1>     je .msdWriteErrorCode
   121                              <1> ;Seek Error
   122 00006310 B006                <1>     mov al, 06h     ;Seek error code
   123 00006312 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   124 00006315 741E                <1>     je .msdWriteErrorCode
   125                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   126                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   127 00006317 B007                <1>     mov al, 07h
   128 00006319 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   129 0000631C 7417                <1>     je .msdWriteErrorCode
   130                              <1> ;Sector Not Found
   131 0000631E B008                <1>     mov al, 08h     ;Sector not found code
   132 00006320 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   133 00006323 7410                <1>     je .msdWriteErrorCode
   134                              <1> ;Write faults
   135 00006325 B00A                <1>     mov al, 0Ah     ;Write fault
   136 00006327 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   137 0000632A 7409                <1>     je .msdWriteErrorCode
   138                              <1> ;Read faults
   139 0000632C B00B                <1>     mov al, 0Bh     ;Read fault
   140 0000632E 80F911              <1>     cmp cl, 11h     ;Read error
   141 00006331 7402                <1>     je .msdWriteErrorCode
   142                              <1> ;General Errors
   143 00006333 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   144                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   145 00006335 B480                <1>     mov ah, 80h ;Set error bit
   146 00006337 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   147 0000633B C3                  <1>     ret ;Return to set done bit
   148                              <1> .msdTable:
   149 0000633C 0000                <1>     dw 0                            ;Function 0
   150 0000633E 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   151 00006340 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   152 00006342 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   153 00006344 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   154 00006346 0000                <1>     dw 0                            ;Function 5
   155 00006348 0000                <1>     dw 0                            ;Function 6
   156 0000634A 0000                <1>     dw 0                            ;Function 7
   157 0000634C 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   158 0000634E 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   159 00006350 0000                <1>     dw 0                            ;Function 10
   160 00006352 0000                <1>     dw 0                            ;Function 11
   161 00006354 C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   162 00006356 D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   163 00006358 ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   164 0000635A 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   165 0000635C 0000                <1>     dw 0                            ;Function 16
   166 0000635E 0000                <1>     dw 0                            ;Function 17
   167 00006360 0000                <1>     dw 0                            ;Function 18
   168 00006362 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   169 00006364 0000                <1>     dw 0                            ;Function 20
   170 00006366 0000                <1>     dw 0                            ;Function 21
   171 00006368 0000                <1>     dw 0                            ;Function 22
   172 0000636A 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   173 0000636C 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   174                              <1> 
   175                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   176                              <1> .msdMedChk:          ;Function 1
   177 0000636E B005                <1>     mov al, 05h ;Bad request structure length
   178 00006370 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   179 00006373 75C0                <1>     jne .msdWriteErrorCode
   180                              <1> 
   181 00006375 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   182 0000637A 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   183 00006381 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   184 00006384 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   185 00006387 753F                <1>     jnz .mmcNoChange
   186                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   187 00006389 B416                <1>     mov ah, 16h 
   188 0000638B CD33                <1>     int 33h
   189 0000638D 0F8237FFFFFF        <1>     jc .msdGenDiskError
   190 00006393 80FC80              <1>     cmp ah, 80h
   191 00006396 740E                <1>     je .mmcNoChangeLine
   192 00006398 80FC86              <1>     cmp ah, 86h
   193 0000639B 7409                <1>     je .mmcNoChangeLine
   194 0000639D 84E4                <1>     test ah, ah ;No change?
   195 0000639F 7427                <1>     jz .mmcNoChange
   196 000063A1 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   197 000063A4 750D                <1>     jnz .mmcChange
   198                              <1> ;If nothing, fall through and test manually, should never happen though
   199                              <1> .mmcNoChangeLine:
   200                              <1> ;Now we test Media Descriptor
   201 000063A6 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   202 000063AB 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   203 000063AE 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   204 000063B1 7410                <1>     je .mmcUnsure
   205                              <1> .mmcChange:
   206 000063B3 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   207 000063B7 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   208 000063BE 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   209                              <1>     ;Check here if there were any open handles on the device when it was changed
   210 000063C2 C3                  <1>     ret
   211                              <1> .mmcUnsure:
   212 000063C3 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   213 000063C7 C3                  <1>     ret
   214                              <1> .mmcNoChange:
   215 000063C8 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   216 000063CC C3                  <1>     ret
   217                              <1> 
   218                              <1> 
   219                              <1> .msdBuildBPB:        ;Function 2
   220 000063CD B005                <1>     mov al, 05h ;Bad request structure length
   221 000063CF 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   222 000063D2 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   223                              <1> 
   224 000063D8 4889DE              <1>     mov rsi, rbx
   225 000063DB 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   226 000063E0 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   227 000063E7 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   228 000063EA 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   229 000063EE 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   230 000063F0 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   231 000063F3 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   232 000063F8 CD33                <1>     int 33h
   233 000063FA 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   234                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   235 00006400 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   236 00006404 7418                <1>     je .mbbpb0
   237 00006406 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   238 0000640A 7412                <1>     je .mbbpb0
   239 0000640C 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   240 00006410 740C                <1>     je .mbbpb0
   241 00006412 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   242 00006416 B007                <1>     mov al, 07h ;Unknown media error code
   243 00006418 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   244                              <1> .mbbpb0:
   245 0000641E 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   246 00006421 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   247 00006426 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   248 0000642D 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   249 00006431 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   250 00006434 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   251 00006438 B90F000000          <1>     mov ecx, bpbEx_size/8
   252 0000643D F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   253 00006440 C3                  <1>     ret
   254                              <1> .msdIOCTLRead:       ;Function 3, returns done
   255 00006441 B005                <1>     mov al, drvBadDrvReq
   256 00006443 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   257 00006446 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   258 0000644C C3                  <1>     ret
   259                              <1> .msdRead:            ;Function 4
   260                              <1> ;Will read one sector at a time.
   261 0000644D B005                <1>     mov al, 05h ;Bad request structure length
   262 0000644F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   263 00006452 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   264                              <1> 
   265 00006458 4889DF              <1>     mov rdi, rbx
   266 0000645B 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   267                              <1> .msdr0:
   268 0000645D B682                <1>     mov dh, 82h ;LBA Read Sectors
   269 0000645F E841010000          <1>     call .msdBlkIOCommon
   270 00006464 0F8255FEFFFF        <1>     jc .msdIOError
   271 0000646A 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   272 00006472 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   273 0000647A FFC6                <1>     inc esi
   274 0000647C 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   275 0000647F 75DC                <1>     jne .msdr0
   276 00006481 4889FB              <1>     mov rbx, rdi
   277 00006484 C3                  <1>     ret
   278                              <1> .msdWrite:           ;Function 8
   279                              <1> ;Will write one sector at a time.
   280 00006485 B005                <1>     mov al, 05h ;Bad request structure length
   281 00006487 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   282 0000648A 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   283                              <1> 
   284 00006490 4889DF              <1>     mov rdi, rbx
   285 00006493 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   286                              <1> .msdw0:
   287 00006495 B683                <1>     mov dh, 83h ;LBA Write Sectors
   288 00006497 E809010000          <1>     call .msdBlkIOCommon
   289 0000649C 0F821DFEFFFF        <1>     jc .msdIOError
   290 000064A2 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   291 000064AA 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   292 000064B2 FFC6                <1>     inc esi
   293 000064B4 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   294 000064B7 75DC                <1>     jne .msdw0
   295 000064B9 4889FB              <1>     mov rbx, rdi
   296 000064BC C3                  <1>     ret
   297                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   298                              <1> ;Will write one sector at a time and then verify it.
   299 000064BD B005                <1>     mov al, 05h ;Bad request structure length
   300 000064BF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   301 000064C2 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   302                              <1> 
   303 000064C8 4889DF              <1>     mov rdi, rbx
   304 000064CB 31F6                <1>     xor esi, esi  ;Set counter to zero
   305                              <1> .msdwv0:
   306 000064CD B683                <1>     mov dh, 83h ;LBA Write Sectors
   307 000064CF E8D1000000          <1>     call .msdBlkIOCommon
   308 000064D4 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   309 000064DA B684                <1>     mov dh, 84h ;LBA Verify Sectors
   310 000064DC E8C4000000          <1>     call .msdBlkIOCommon
   311 000064E1 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   312 000064E7 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   313 000064EF 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   314 000064F7 FFC6                <1>     inc esi
   315 000064F9 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   316 000064FC 75CF                <1>     jne .msdwv0
   317 000064FE 4889FB              <1>     mov rbx, rdi
   318 00006501 C3                  <1>     ret
   319                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   320 00006502 B005                <1>     mov al, drvBadDrvReq
   321 00006504 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   322 00006507 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   323                              <1> 
   324 0000650D C3                  <1>     ret
   325                              <1> .msdDevOpen:         ;Function 13
   326 0000650E B005                <1>     mov al, drvBadDrvReq
   327 00006510 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   328 00006513 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   329                              <1> 
   330 00006519 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   331 0000651E 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   332 00006525 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   333 00006528 C3                  <1>     ret
   334                              <1> .msdDevClose:        ;Function 14
   335 00006529 B005                <1>     mov al, drvBadDrvReq
   336 0000652B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   337 0000652E 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   338                              <1> 
   339 00006534 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   340 00006539 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   341 00006540 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   342 00006543 C3                  <1>     ret
   343                              <1> .msdRemovableMedia:  ;Function 15
   344 00006544 B005                <1>     mov al, drvBadDrvReq
   345 00006546 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   346 00006549 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   347                              <1> 
   348 0000654F 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   349 00006554 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   350 0000655B 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   351 0000655E B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   352 00006563 31D2                <1>     xor edx, edx    ;Busy bit clear
   353 00006565 A880                <1>     test al, 80h
   354 00006567 0F44CA              <1>     cmovz ecx, edx
   355 0000656A 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   356 0000656E C3                  <1>     ret
   357                              <1> .msdGenericIOCTL:    ;Function 19
   358 0000656F B005                <1>     mov al, drvBadDrvReq
   359 00006571 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   360 00006574 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   361                              <1> 
   362 0000657A C3                  <1>     ret
   363                              <1> .msdGetLogicalDev:   ;Function 23
   364 0000657B B005                <1>     mov al, drvBadDrvReq
   365 0000657D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   366 00006580 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   367                              <1> 
   368 00006586 8A0541000000        <1>     mov al, byte [.msdCurDev]
   369 0000658C 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   370 0000658F C3                  <1>     ret
   371                              <1> .msdSetLogicalDev:   ;Function 24
   372 00006590 B005                <1>     mov al, drvBadDrvReq
   373 00006592 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   374 00006595 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   375                              <1> 
   376 0000659B 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   377 0000659E 880529000000        <1>     mov byte [.msdCurDev], al
   378 000065A4 C3                  <1>     ret
   379                              <1> 
   380                              <1> .msdBlkIOCommon:  ;Does block IO
   381                              <1> ;Called with rdi containing old rbx value and ah with function number
   382                              <1> ;rbp points to bpb
   383                              <1> ;Error handled by caller
   384                              <1> ;Sector count handled by caller
   385                              <1> ;Called with dh = BIOS function number
   386 000065A5 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   387 000065AA 8A90[CE650000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   388 000065B0 31C9                <1>     xor ecx, ecx
   389 000065B2 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   390 000065B5 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   391 000065B9 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   392 000065BD 88F4                <1>     mov ah, dh
   393 000065BF B001                <1>     mov al, 01h ;Do one sector at a time 
   394 000065C1 CD33                <1>     int 33h
   395 000065C3 C3                  <1>     ret
   396                              <1> 
   397 000065C4 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   398                              <1> ;LASTDRIVE default is 5
   399                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   400                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   401 000065CD 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   402                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   403 000065CE FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   404 000065D3 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   405 000065D8 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   405 000065E1 000000000000000000- <1>
   405 000065EA 000000000000000000- <1>
   405 000065F3 000000000000000000- <1>
   405 000065FC 00000000            <1>
   406 00006600 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   406 00006609 000000000000000000- <1>
   406 00006612 000000000000000000- <1>
   406 0000661B 000000000000000000- <1>
   406 00006624 000000000000000000- <1>
   406 0000662D 000000000000000000- <1>
   406 00006636 000000000000000000- <1>
   406 0000663F 000000000000000000- <1>
   406 00006648 000000000000000000- <1>
   406 00006651 000000000000000000- <1>
   406 0000665A 000000000000000000- <1>
   406 00006663 000000000000000000- <1>
   406 0000666C 000000000000000000- <1>
   406 00006675 000000000000000000- <1>
   406 0000667E 000000000000000000- <1>
   406 00006687 000000000000000000- <1>
   406 00006690 000000000000000000- <1>
   406 00006699 000000000000000000- <1>
   406 000066A2 000000000000000000- <1>
   406 000066AB 000000000000000000- <1>
   406 000066B4 000000000000000000- <1>
   406 000066BD 000000000000000000- <1>
   406 000066C6 000000000000000000- <1>
   406 000066CF 000000000000000000- <1>
   406 000066D8 000000000000000000- <1>
   406 000066E1 000000000000000000- <1>
   406 000066EA 000000000000000000- <1>
   406 000066F3 000000000000000000- <1>
   406 000066FC 000000000000000000- <1>
   406 00006705 000000000000000000- <1>
   406 0000670E 000000000000000000- <1>
   406 00006717 000000000000000000- <1>
   406 00006720 000000000000000000- <1>
   406 00006729 000000000000000000- <1>
   406 00006732 000000000000000000- <1>
   406 0000673B 000000000000000000- <1>
   406 00006744 000000000000000000- <1>
   406 0000674D 000000000000000000- <1>
   406 00006756 000000000000000000- <1>
   406 0000675F 000000000000000000- <1>
   406 00006768 000000000000000000- <1>
   406 00006771 000000000000000000- <1>
   406 0000677A 000000000000000000- <1>
   406 00006783 000000000000000000- <1>
   406 0000678C 000000000000000000- <1>
   406 00006795 000000000000000000- <1>
   406 0000679E 000000000000000000- <1>
   406 000067A7 000000000000000000- <1>
   406 000067B0 000000000000000000- <1>
   406 000067B9 000000000000000000- <1>
   406 000067C2 000000000000000000- <1>
   406 000067CB 000000000000000000- <1>
   406 000067D4 000000000000000000- <1>
   406 000067DD 000000000000000000- <1>
   406 000067E6 000000000000000000- <1>
   406 000067EF 000000000000000000- <1>
   406 000067F8 000000000000000000- <1>
   406 00006801 000000000000000000- <1>
   406 0000680A 000000000000000000- <1>
   406 00006813 000000000000000000- <1>
   406 0000681C 000000000000000000- <1>
   406 00006825 000000000000000000- <1>
   406 0000682E 000000000000000000- <1>
   406 00006837 000000000000000000- <1>
   406 00006840 000000000000000000- <1>
   406 00006849 000000000000000000- <1>
   406 00006852 000000000000        <1>
   407                              <1> 
   408                              <1> endptr equ $
    46                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    47                                  ;Paragraph alignment
    48                                  %include "./Source/BSS/dosDynaDataArea.asm"
    49                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    50                              <1> ; the MCB chain!
    51                              <1> ddaStart:
    52 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    53                              <1> 
    54                              <1> ;Create DPB chain of first 5 available DPB slots
    55                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    56 00000010 <res 35h>           <1> firstDPB        resb dpb_size
    57 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    58                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    59                              <1> ;Always jettison this space
    60 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    61 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    62 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    63                              <1> 
    64 00000119 <res 30h>           <1> tmpBufHdr       resb bufferHdr_size
    65 00000149 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    66                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    67                              <1> dynamicDataAreaLength equ $ - ddaStart
    67          ------------------  <1>  info: assembly required 1+12+2 passes

