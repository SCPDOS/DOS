     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    13 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    14                              <1> 
    15                              <1> endstruc
    16                              <1> 
    17                              <1> ;Command Code equates
    18                              <1>     drvINIT         equ 0
    19                              <1>     drvMEDCHK       equ 1
    20                              <1>     drvBUILDBPB     equ 2
    21                              <1>     drvIOCTLREAD    equ 3
    22                              <1>     drvREAD         equ 4
    23                              <1>     drvNONDESTREAD  equ 5
    24                              <1>     drvINSTATUS     equ 6
    25                              <1>     drvFLUSHINBUF   equ 7
    26                              <1>     drvWRITE        equ 8
    27                              <1>     drvWRITEVERIFY  equ 9
    28                              <1>     drvOUTSTATUS    equ 10
    29                              <1>     drvFLUSHOUTBUF  equ 11
    30                              <1>     drvIOCTLWRITE   equ 12
    31                              <1>     drvOPEN         equ 13
    32                              <1>     drvCLOSE        equ 14
    33                              <1>     drvREMMEDCHECK  equ 15
    34                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    35                              <1>     drvIOCTL        equ 19
    36                              <1>     drvGETDRVMAP    equ 23
    37                              <1>     drvSETDRVMAP    equ 24
    38                              <1>     
    39                              <1> ;Driver Error equates 
    40                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    41                              <1>     drvBadUnit      equ 1   ;Unknown unit
    42                              <1>     drvNotReady     equ 2   ;Device not ready
    43                              <1>     drvBadCmd       equ 3   ;Unknown command
    44                              <1>     drvCRCErr       equ 4   ;CRC Error
    45                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    46                              <1>     drvBadSeek      equ 6   ;Seek error
    47                              <1>     drvBadMed       equ 7   ;Unknown media
    48                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    49                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    50                              <1>     drvWriteFault   equ 10  ;Write Fault
    51                              <1>     drvReadFault    equ 11  ;Read Fault
    52                              <1>     drvGenFault     equ 12  ;General Fault
    53                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    54                              <1> 
    55                              <1> ;Driver status word status bit meanings
    56                              <1>     drvErrStatus    equ 8000h  
    57                              <1>     drvDonStatus    equ 0100h
    58                              <1>     drvBsyStatus    equ 0200h
    59                              <1> 
    60                              <1> ;Driver Attribute Word bit meanings
    61                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    62                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    63                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    64                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    65                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    66                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    67                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    68                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    69                              <1>     devDrvChar     equ 8000h ;If set, Char device
    70                              <1> ;Bit 0 1=console input
    71                              <1> ;    1 1=console output (character devices)
    72                              <1> ;    2 1=NUL device
    73                              <1> ;    3 1=CLOCK device
    74                              <1> ;    4 1=INT 49 output (CON)
    75                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    76                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    77                              <1> ;   11 1=open/close/removable media supported (3.0+)
    78                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    79                              <1> ;      1=media descriptor in FAT required (block devices)
    80                              <1> ;   14 1=IOCTL supported
    81                              <1> ;   15 0=block device
    82                              <1> ;      1=character device
    83                              <1> 
    84                              <1> ;Driver structures
    85                              <1> 
    86                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    87                              <1> 
    88                              <1>     .hdrlen resb 1  ;Length of the request header
    89                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    90                              <1>     .cmdcde resb 1  ;Command code
    91                              <1>     .status resw 1  ;Status word
    92                              <1>     .devptr resq 1  ;Device queue pointer field
    93                              <1> 
    94                              <1> %endmacro
    95                              <1> 
    96                              <1> struc drvReqHdr
    97                              <1>     drvReqHdrM
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
    98                              <1> endstruc
    99                              <1> 
   100                              <1> struc initReqPkt  ;Init Request Packet
   101                              <1> 
   102                              <1>     drvReqHdrM   ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   103 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   104 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   105 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   106 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   107                              <1> 
   108                              <1> endstruc
   109                              <1> 
   110                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   111                              <1> 
   112                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   113 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   114 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   115 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   116                              <1> 
   117                              <1> endstruc
   118                              <1> 
   119                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   120                              <1> 
   121                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   122 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   123 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   124 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   125                              <1> 
   126                              <1> endstruc
   127                              <1> 
   128                              <1> struc ioReqPkt   ;IO Request Packet
   129                              <1> 
   130                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   131 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   132 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   133 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   134 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   135 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   136                              <1> 
   137                              <1> endstruc
   138                              <1> 
   139                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   140                              <1>     
   141                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   142 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   143                              <1> 
   144                              <1> endstruc
   145                              <1> 
   146                              <1> struc statusReqPkt   ;Status Request Packet
   147                              <1> 
   148                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   149                              <1> 
   150                              <1> endstruc
   151                              <1> 
   152                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   153                              <1> 
   154                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   155                              <1>      
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc openReqPkt ;Open Device Request Packet
   159                              <1> 
   160                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   161                              <1>      
   162                              <1> endstruc
   163                              <1> 
   164                              <1> struc closeReqPkt ;Close Device Request Packet
   165                              <1> 
   166                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   167                              <1>      
   168                              <1> endstruc
   169                              <1> 
   170                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   171                              <1> 
   172                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   173                              <1>      
   174                              <1> endstruc
   175                              <1> 
   176                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   177                              <1> 
   178                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   179 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   180 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   181 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   182 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   183 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   184                              <1> 
   185                              <1> endstruc
   186                              <1> 
   187                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   188                              <1>     
   189                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   190                              <1> 
   191                              <1> endstruc
   192                              <1> 
   193                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   194                              <1>     
   195                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   196                              <1> 
   197                              <1> endstruc
   198                              <1> 
   199                              <1> 
   200                              <1> struc genioctlGetParamsTable
   201 00000000 ??                  <1>     .size           resb 1
   202 00000001 ??????????????      <1>     .res            resb 7
   203 00000008 ????????????????    <1>     .sectorSize     resb 8  ;Only the lower dword is valid here
   204 00000010 ????????????????    <1>     .numSectors     resb 8
   205                              <1> endstruc
   206                              <1> 
   207                              <1> ;THE WRITE STRUCT MUST BE A STRICT SUPERSET OF THE FORMAT STRUCT ALWAYS
   208                              <1> struc genioctlLBAformat
   209 00000000 ??                  <1>     .size           resb 1
   210 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to format
   211 00000002 ????????????        <1>     .res            resb 6
   212 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start format at
   213                              <1> endstruc
   214                              <1> 
   215                              <1> struc genioctlLBAwrite
   216 00000000 ??                  <1>     .size           resb 1
   217 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to write
   218 00000002 ????????????        <1>     .res            resb 6
   219 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start write at
   220 00000010 ????????????????    <1>     .xferBuffer     resb 8  ;Transfer buffer for data
   221                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    19                              <1> 
    20 00000000 ??????              <1>     .jmpBoot    resb 3 
    21 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    22 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    23 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    24 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    25 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    26 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    27 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    28 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    29 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    30 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    31 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    32 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    33 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    34                              <1> 
    35 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    36 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    37 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    38 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    39 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    40 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    41                              <1> 
    42                              <1> endstruc
    43                              <1> 
    44                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    45                              <1> 
    46 00000000 ??????              <1>     .jmpBoot    resb 3
    47 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    48 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    49 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    50 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    51 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    52 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    53 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    54 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    55 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    56 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    57 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    58 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    59 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    60                              <1> 
    61 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    62 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    63 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    64 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    65 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    66 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    67 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    68                              <1> 
    69 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    70 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    71 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    72 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    73 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    74 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    75                              <1> 
    76                              <1> endstruc
    77                              <1> 
    78                              <1> struc mbr
    79 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    80 000001B8 ????????            <1>     .diskID     resb 4
    81 000001BC ????                <1>     .reserved   resb 2
    82 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    83 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    84 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    85 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    86 000001FE ????                <1>     .mbrSig     resb 2
    87                              <1> endstruc
    88                              <1> 
    89                              <1> struc mbrEntry
    90 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    91 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    92 00000004 ??                  <1>     .ptnType    resb 1  ;This being 00 means free
    93 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    94 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    95 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    96                              <1> endstruc
    97                              <1> 
    98                              <1> struc ebr
    99 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   100 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   101 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   102 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   103 000001FE ????                <1>     .mbrSig     resb 2
   104                              <1> endstruc
   105                              <1> 
   106                              <1> 
   107                              <1> struc fatDirEntry
   108                              <1> 
   109 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   110 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   111 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   112 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   113 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   114 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   115 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   116 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   117 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   118 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   119 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   120 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   121                              <1> 
   122                              <1> endstruc
   123                              <1> ;Directory attribute equates
   124                              <1>     dirReadOnly     equ 01h
   125                              <1>     dirHidden       equ 02h
   126                              <1>     dirSystem       equ 04h
   127                              <1>     dirVolumeID     equ 08h
   128                              <1>     dirDirectory    equ 10h
   129                              <1>     dirArchive      equ 20h
   130                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   131                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   132                              <1>     ;If any of the three bits are set, then ALL three bits are set
   133                              <1>     ; in addition to whatever the user passed to search for.
   134                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   135                              <1>     dirIncFiles     equ dirHidden | dirSystem
   136                              <1> 
   137                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   138                              <1> 
   139 00000000 ??????              <1>     .jmpBoot                resb 3 
   140 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   141 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   142 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   143 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   144 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   145 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   146 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   147 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   148 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   149 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   150 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   151 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   152 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   153 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   154 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   155 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   156 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   157 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc FSInfo
   162                              <1> 
   163 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   164 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   165 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   166 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   167 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   168 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   169 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   170                              <1> 
   171                              <1> endstruc
   172                              <1> 
   173                              <1> %macro defaultBPB 0
   174                              <1>     db 0E9h
   175                              <1>     db 00h
   176                              <1>     db 90h
   177                              <1>     db 'SCPDOSv1'
   178                              <1>     dw 0200h                       
   179                              <1>     db 01h                         
   180                              <1>     dw 0001h                           
   181                              <1>     db 02h                              
   182                              <1>     dw 00E0h            
   183                              <1>     dw 0B40h   
   184                              <1>     db 0F0h                   
   185                              <1>     dw 0009h                   
   186                              <1>     dw 0012h                     
   187                              <1>     dw 0002h                  
   188                              <1>     dd 0                 
   189                              <1>     dd 0 
   190                              <1>     db 00h
   191                              <1>     db 00h
   192                              <1>     db 29h
   193                              <1>     dd 0
   194                              <1>     db 'NO NAME    '
   195                              <1>     db 'FAT12   '
   196                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   197                              <1> %endmacro
     8                                  %include "./Source/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     9                                  %include "./Source/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    57 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    58                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    59                              <1> ; another, we save the number of chars to skip to that deep level).
    60                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    61                              <1> ; Only affects for SUBST drives, not JOIN
    62                              <1> ; Flags: Bit 15 set = Network drive
    63                              <1> ;        Bit 14 set = Physical drive
    64                              <1> ;        Bit 13 set = JOIN'ed drive
    65                              <1> ;        Bit 12 set = SUBST'ed drive
    66                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    67                              <1> endstruc
    68                              <1> ;CDS equates
    69                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    70                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    71                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    72                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    73                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    74                              <1> ;------------------------------------------------------------------------;
    75                              <1> ; The SFT is a way to allow applications to open file handles to files 
    76                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    77                              <1> ; under the first header, and then a second header will be linked to the 
    78                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    79                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    80                              <1> ; using the FCBS= command. Default FCBS=5.
    81                              <1> ;
    82                              <1> ; A file handle describes the file, and the location within the file that
    83                              <1> ; we are reading. The file handle can be manipulated without the file
    84                              <1> ; being in memory, thus allowing the user to access data without needing 
    85                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    86                              <1> ; accessing devices, by treating them as files with their drivers 
    87                              <1> ; responding and translating the manipulations of the file handle itself.
    88                              <1> ; Neither the driver nor the application should see or use the SFT for
    89                              <1> ; the handle, as it is subject to change (and will change when file 
    90                              <1> ; sharing provisions are included). The DOS will make requests to the 
    91                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    92                              <1> ; track of the information in the SFT entry for that handle. 
    93                              <1> ;
    94                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    95                              <1> ; can point to the same file. It all depends on what the applications 
    96                              <1> ; want to do with the File.
    97                              <1> ;
    98                              <1> ; !!!!IMPORTANT!!!!
    99                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   100                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   101                              <1> ;
   102                              <1> ;Each SFT may look like this:
   103                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   104                              <1> ;            |                |
   105                              <1> ;       wNumFiles*sft    wNumFiles*sft
   106                              <1> ;
   107                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   108                              <1> ; System FCBs.
   109                              <1> ;
   110                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   111                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   112                              <1> ;
   113                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   114                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   115                              <1> ;------------------------------------------------------------------------;
   116                              <1> struc sfth   ;System file table header
   117                              <1> ; This is the SFT header.
   118                              <1> ; This structure comes before the start of the first file in the array/table.
   119 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   120 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   121                              <1> endstruc
   122                              <1> 
   123                              <1> struc sft
   124                              <1> ;This is the file struc itself
   125 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   126 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   127 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   128 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   129 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   130 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   131 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   132 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   133 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   134 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   135 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   136 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   137 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   138 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   139 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   140 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   141 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   142 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   143 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   144                              <1> ;                           0 means no record
   145                              <1> endstruc
   146                              <1> ;Open Mode equates
   147                              <1> ;Access modes   Bits[2:0]
   148                              <1> ReadAccess      equ 0h
   149                              <1> WriteAccess     equ 1h
   150                              <1> RWAccess        equ 2h
   151                              <1> ;Bit 3 reserved 0
   152                              <1> ;Sharing modes  Bits[6:4]
   153                              <1> CompatShare     equ 0h
   154                              <1> denyRWShare     equ 10h
   155                              <1> denyWriteShare  equ 20h
   156                              <1> denyReadShare   equ 30h
   157                              <1> denyNoneShare   equ 40h
   158                              <1> netFCBShare     equ 70h
   159                              <1> noInherit       equ 80h
   160                              <1> ;Bits 8-12 reserved 0
   161                              <1> 
   162                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   163                              <1> ;Buffering on writes
   164                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   165                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   166                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   167                              <1> ;Attribute Byte
   168                              <1> readOnlyFile    equ 1h
   169                              <1> hiddenFile      equ 2h
   170                              <1> systemFile      equ 4h
   171                              <1> volumeLabel     equ 8h
   172                              <1> directoryFile   equ 10h ;Directory entry
   173                              <1> archiveFile     equ 20h
   174                              <1> ;Device Info equates
   175                              <1> ;For a block device, bits [5:0] contain the drive number
   176                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   177                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   178                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   179                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   180                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   181                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   182                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   183                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   184                              <1> devCharDev      equ 80h ;If set, it is a char device!
   185                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   186                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   187                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   188                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   189                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   190                              <1>  
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   214 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   215                              <1>     .dataarea:             ;Points to the start of the data area
   216                              <1> endstruc
   217                              <1> ;Buffer Flag equates
   218                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   219                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   220                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   221                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   222                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   223                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   224                              <1> ;Note! A buffer is marked as referenced only when the application 
   225                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   226                              <1> ;------------------------------------------------------------------------;
   227                              <1> ; Memory control block for each memory arena
   228                              <1> ;------------------------------------------------------------------------;
   229                              <1> struc mcb
   230 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   231 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   232 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   233 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   234                              <1>     .program:
   235                              <1> endstruc
   236                              <1> ;MCB equates
   237                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   238                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   239                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   240                              <1> mcbMarkCtn      equ "M"
   241                              <1> mcbMarkEnd      equ "Z"
   242                              <1> 
   243                              <1> memFirstFit     equ 0   ;First free block goes to application
   244                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   245                              <1> memLastFit      equ 2   ;Last free block goes to application
   246                              <1> 
   247                              <1> ;Owner = Para aligned address => Owning application PSP
   248                              <1> ;...To consider...
   249                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   250                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   251                              <1> ;------------------------------------------------------------------------;
   252                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   253                              <1> ; following order, thus allowing for return values to be placed in the 
   254                              <1> ; registers by accessing the caller register stack frame.
   255                              <1> ;------------------------------------------------------------------------;
   256                              <1> struc callerFrame
   257 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   258 00000008 ????????????????    <1>     .rbx    resq 1    
   259 00000010 ????????????????    <1>     .rcx    resq 1
   260 00000018 ????????????????    <1>     .rdx    resq 1
   261 00000020 ????????????????    <1>     .rsi    resq 1
   262 00000028 ????????????????    <1>     .rdi    resq 1
   263 00000030 ????????????????    <1>     .rbp    resq 1
   264 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   265 00000040 ????????????????    <1>     .r9     resq 1
   266                              <1> ;Pushed by Processor when invoked via Interrupt
   267 00000048 ????????????????    <1>     .rip    resq 1
   268 00000050 ????????????????    <1>     .cs     resq 1
   269 00000058 ????????????????    <1>     .flags  resq 1
   270                              <1> endstruc
   271                              <1> 
   272                              <1> struc dpl
   273                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   274                              <1> ; server calls
   275 00000000 ????????????????    <1>     .rax    resq 1
   276 00000008 ????????????????    <1>     .rbx    resq 1
   277 00000010 ????????????????    <1>     .rcx    resq 1
   278 00000018 ????????????????    <1>     .rdx    resq 1
   279 00000020 ????????????????    <1>     .rsi    resq 1
   280 00000028 ????????????????    <1>     .rdi    resq 1
   281 00000030 ????????????????    <1>     .r8     resq 1
   282 00000038 ????????????????    <1>     .r9     resq 1
   283 00000040 ????????????????    <1>     .align  resq 1
   284 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   285 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   286                              <1> endstruc
   287                              <1> 
   288                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   289 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   290 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   291 00000010 ????????????????    <1>     .newSFTVal      resq 1
   292 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   293 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   294 00000028 ????????????????    <1>     .newLastdrive   resq 1
   295 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   296 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   297 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   298 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   299 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   300 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   301 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   302                              <1> endstruc
   303                              <1> 
   304                              <1> struc filename
   305                              <1> ;8.3 File name struct
   306 00000000 ????????????????    <1>     .fName  resb 8
   307 00000008 ??????              <1>     .fExt   resb 3
   308                              <1> endstruc
   309                              <1> 
   310                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   311 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   312 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   313 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   314 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   315 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   316 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   317 00000016 ????                <1>     .fileTime   resw 1  ;File time
   318 00000018 ????                <1>     .fileDate   resw 1  ;File date
   319 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   320 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   321                              <1> endstruc
   322                              <1> 
   323                              <1> struc psp
   324 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   325 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   326 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   327 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   328 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   329 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   330 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   331                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   332 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   333 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   334 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   335 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   336 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   337 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   338 0000005B ??                  <1>                 resb 1  ;Reserved byte
   339                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   340                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   341                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   342                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   343                              <1> ; always used and xtraHdlSz.
   344                              <1> ;Will need to add two SYSCALLS for future expansion:
   345                              <1> ;       1) Get Program Environment Pointer
   346                              <1> ;       2) Get Command Line arguments pointer
   347                              <1> ;The below are in the same place as in DOS.
   348                              <1>     .cmdLineArgPtr: ;Symbol for future use
   349 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   350 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   351                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   352 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   353 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   354                              <1> endstruc
   355                              <1> 
   356                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   357                              <1> 
   358                              <1> struc clkStruc
   359 00000000 ????                <1>     .dateWord   resw 1
   360 00000002 ??                  <1>     .minutes    resb 1
   361 00000003 ??                  <1>     .hours      resb 1
   362 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   363 00000005 ??                  <1>     .seconds    resb 1
   364                              <1> endstruc
   365                              <1> 
   366                              <1> struc countryStruc
   367 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   368                              <1>                         ;0 = month day year hh:mm:ss
   369                              <1>                         ;1 = day month year hh:mm:ss
   370                              <1>                         ;2 = year month day hh:mm:ss
   371 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   372 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   373 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   374 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   375 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   376 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   377                              <1>                         ;0 = Symbol leads, without space
   378                              <1>                         ;1 = Symbol follows, without space
   379                              <1>                         ;2 = Symbol leads, one space
   380                              <1>                         ;3 = Symbol follows, one space
   381                              <1>                         ;4 = Symbol replace decimal separator
   382 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   383 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   384 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   385 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   386 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   387                              <1> endstruc
   388                              <1> 
   389                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   390                              <1> ;for a space of 64Gb
   391                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   392                              <1> dosLowBase  equ 600h    ;Low load address
   393                              <1> 
   394                              <1> ;Critical Error AH bitfield equates
   395                              <1> critRead    equ 0h
   396                              <1> critWrite   equ 1h
   397                              <1> critDOS     equ 0h
   398                              <1> critFAT     equ 2h
   399                              <1> critDir     equ 4h
   400                              <1> critData    equ 6h
   401                              <1> critFailOK  equ 8h
   402                              <1> critRetryOK equ 10h
   403                              <1> critIgnorOK equ 20h
   404                              <1> critCharDev equ 80h
   405                              <1> 
   406                              <1> critIgnore  equ 0
   407                              <1> critRetry   equ 1
   408                              <1> critAbort   equ 2
   409                              <1> critFail    equ 3
   410                              <1> 
   411                              <1> ;MISC ASCII control chars
   412                              <1> NUL equ 00h ;^@         | ASCII Null
   413                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   414                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   415                              <1> BEL equ 07h ;^G         | ASCII Bell
   416                              <1> BSP equ 08h ;^H         | ASCII Backspace
   417                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   418                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   419                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   420                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   421                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   422                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   423                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   424                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   425                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   426                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   427                              <1> SPC equ 20h ;Printable  | ASCII Space
   428                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   429                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   430                              <1> 
   431                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   432                              <1> ;Extended Ascii Codes
   433                              <1> eF1     equ 3Bh ;F1 second byte
   434                              <1> eF2     equ 3Ch ;F2 second byte
   435                              <1> eF3     equ 3Dh ;F3 second byte
   436                              <1> eF4     equ 3Eh ;F4 second byte
   437                              <1> eF5     equ 3Fh ;F5 second byte
   438                              <1> eF6     equ 40h ;F6 second byte
   439                              <1> eF7     equ 41h ;F7 second byte
   440                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   441                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   442                              <1> eIns    equ 52h ;Insert second byte
   443                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   444                              <1> 
   445                              <1> ;Default Configuration for the system
   446                              <1> 
   447                              <1> buffersDefault  equ 30
   448                              <1> filesDefault    equ 20
   449                              <1> fcbsDefault     equ 4
   450                              <1> safeFcbsDeflt   equ 0
   451                              <1> lastDriveDeflt  equ 5   
    10                                  %include "./Source/Debug/debSym.inc"
     1                              <1> ;This file will include the debuging symbols
     2                              <1> 
     3                              <1> %define true 1
     4                              <1> %define false 0
     5                              <1> 
     6                              <1> ;Switch the DEBUG to false in production!
     7                              <1> %define DEBUG false
     8                              <1> %define DPBINFO false
     9                              <1> %define REGS false
    10                              <1> %define ENDSTATUS false
    11                              <1> %define ALLOCTEST false
    12                              <1> 
    13                              <1> 
    14                              <1> ;Use this space as the debug stack
    15                              <1> %define debStackTop 80000h
    11                                  %include "./Source/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on INT 44h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    12                                  %include "./Source/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 41h/4Bh
     3                              <1> 
     4                              <1> ;Int 41h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> 
    11                              <1> struc execFrame
    12 00000000 ????????????????    <1>     .oldRBP     resq 1  
    13 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    14 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    15 00000018 ????????????????    <1>     .wEnvSize   resq 1  ;Size of the environment block
    16 00000020 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000028 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000030 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000038 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000040 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000048 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000050 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000058 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    26                              <1> .pProgEP:   ;Program EP, recycle this qword
    27 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    28 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    29                              <1> .qRelocVal:  ;Used when computing relocations, Rebasing factor
    30                              <1> endstruc
    31                              <1> 
    32                              <1> ;Possible blocks to be pointed to by rbx
    33                              <1> 
    34                              <1> struc execProg 
    35 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    36 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    37 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    38 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    39                              <1> endstruc
    40                              <1> 
    41                              <1> struc loadProg
    42 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    43 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    44 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    45 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    46 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    47 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    48                              <1> endstruc
    49                              <1> 
    50                              <1> struc loadOvly
    51 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    52 00000008 ????????            <1>     .dRelocFct  resd 1  ;Relocation factor for 
    53                              <1> endstruc
    54                              <1> 
    55                              <1> ;----------------------------
    56                              <1> ;   EXE header structures   :
    57                              <1> ;----------------------------
    58                              <1> 
    59                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    60                              <1> dosMagicSignature   equ "MZ"
    61                              <1> dosMagicSignature2  equ "ZM"
    62                              <1> struc imageDosHdr
    63 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    64 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    65 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    66 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    67 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    68 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    69 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    70 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    71 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    72 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    73 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    74 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    75 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    76 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    77 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    78 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    79 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    80 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    81 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    82                              <1> endstruc
    83                              <1> 
    84                              <1> ;Pssobile signatures pointed to by e_lfanew
    85                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    86                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    87                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    88                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    89                              <1> 
    90                              <1> ;COFF File header @ [e_lfanew]
    91                              <1> 
    92                              <1> struc imageFileHeader
    93 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    94 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    95 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    96 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    97 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    98 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
    99 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   100 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   101                              <1> endstruc
   102                              <1> 
   103                              <1> ;The only valid values in the .machineType field
   104                              <1> 
   105                              <1> imageFileMachineUnknown equ 0
   106                              <1> imageFileMachineAMD64   equ 08664h 
   107                              <1> 
   108                              <1> ;Characteristics to check for
   109                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   110                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   111                              <1> 
   112                              <1> ;Optional header, immediately follows COFF header
   113                              <1> 
   114                              <1> struc imageFileOptionalHeader
   115 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   116 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   117 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   118 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   119 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   120 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   121 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   122 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   123 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   124 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   125 00000024 ????????            <1> 	.dFileAlignment             resd 1
   126 00000028 ????                <1> 	.wMajOSVer                  resw 1
   127 0000002A ????                <1> 	.wMinOSVer                  resw 1
   128 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   129 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   130 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   131 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   132 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   133 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   134 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   135 00000040 ????????            <1> 	.dCheckSum                  resd 1
   136 00000044 ????                <1> 	.wSubsystem                 resw 1
   137 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   138 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   139 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   140 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   141 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   142 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   143 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   144                              <1> endstruc
   145                              <1> 
   146                              <1> romMagicNum     equ 0107h
   147                              <1> pe32MagicNum    equ 010Bh
   148                              <1> pe64MagicNum    equ 020Bh
   149                              <1> 
   150                              <1> ;Data directory header structure
   151                              <1> 
   152                              <1> struc imageDataDirectory
   153 00000000 ????????            <1>     .virtualAddress  resd 1
   154 00000004 ????????            <1>     .size    resd 1
   155                              <1> endstruc
   156                              <1> 
   157                              <1> struc baseRelocBlock
   158 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   159 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   160                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   161                              <1> endstruc
   162                              <1> ;Section headers that form the Section Table.
   163                              <1> ;There are wNumberOfSections many entries in this table.
   164                              <1> ;Each entry is one imageSectionHdr
   165                              <1> 
   166                              <1> struc imageSectionHdr       ;size 40 bytes
   167 00000000 ????????????????    <1>     .qName                  resb 8
   168 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   169 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   170 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   171 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   172 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   173 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   174 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   175 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   176 00000024 ????????            <1> 	.dCharacteristics       resd 1
   177                              <1> endstruc
   178                              <1> 
   179                              <1> ;Section Hdr characteristics flags 
   180                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   181                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   182                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    13                                  Segment .text align=1   ;Init code
    14                                  %define currSegVBase 0
    15                                  %include "./Source/Sysinit/sysinit.asm"
     1                              <1> ; We arrive here with the following values in the registers.
     2                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
     3                              <1> ; dx  = Int 33h boot device number
     4                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
     5                              <1> 
     6 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
     7 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
     8 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
     9 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    10 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    11 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    12 0000001A F348A5              <1>     rep movsq   ;Copy over
    13 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    14 00000022 50                  <1>     push rax
    15 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    16                              <1> sysInitldr:
    17                              <1> ;Now the tough part, load DOS to 800
    18 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    19                              <1> .read:
    20 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    21 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    21 00000035 00                  <1>
    22 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    23 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    24 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    25 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    26 0000003F CD33                <1>     int 33h
    27 00000041 7206                <1>     jc .readFail
    28 00000043 6800080000          <1>     push qword 800h
    29 00000048 C3                  <1>     ret   ;No error? Yay, DOS loaded.
    30                              <1> .readFail:
    31 00000049 FFCE                <1>     dec esi
    32 0000004B 75DC                <1>     jnz .read
    33 0000004D 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    34 00000054 B804130000          <1>     mov eax, 1304h
    35 00000059 CD30                <1>     int 30h
    36 0000005B CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    37 0000005D 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    37 00000066 6F6164204572726F72- <1>
    37 0000006F 0A0D00              <1>
    38 00000072 000000000000000000- <1>     db 100h-($-$$) dup 00h ;Fill with nulls  
    38 0000007B 000000000000000000- <1>
    38 00000084 000000000000000000- <1>
    38 0000008D 000000000000000000- <1>
    38 00000096 000000000000000000- <1>
    38 0000009F 000000000000000000- <1>
    38 000000A8 000000000000000000- <1>
    38 000000B1 000000000000000000- <1>
    38 000000BA 000000000000000000- <1>
    38 000000C3 000000000000000000- <1>
    38 000000CC 000000000000000000- <1>
    38 000000D5 000000000000000000- <1>
    38 000000DE 000000000000000000- <1>
    38 000000E7 000000000000000000- <1>
    38 000000F0 000000000000000000- <1>
    38 000000F9 00000000000000      <1>
    39                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    40                              <1>     ;Store space for a static PSP
    41 00000100 000000000000000000- <1>     db 100h dup 00h
    41 00000109 000000000000000000- <1>
    41 00000112 000000000000000000- <1>
    41 0000011B 000000000000000000- <1>
    41 00000124 000000000000000000- <1>
    41 0000012D 000000000000000000- <1>
    41 00000136 000000000000000000- <1>
    41 0000013F 000000000000000000- <1>
    41 00000148 000000000000000000- <1>
    41 00000151 000000000000000000- <1>
    41 0000015A 000000000000000000- <1>
    41 00000163 000000000000000000- <1>
    41 0000016C 000000000000000000- <1>
    41 00000175 000000000000000000- <1>
    41 0000017E 000000000000000000- <1>
    41 00000187 000000000000000000- <1>
    41 00000190 000000000000000000- <1>
    41 00000199 000000000000000000- <1>
    41 000001A2 000000000000000000- <1>
    41 000001AB 000000000000000000- <1>
    41 000001B4 000000000000000000- <1>
    41 000001BD 000000000000000000- <1>
    41 000001C6 000000000000000000- <1>
    41 000001CF 000000000000000000- <1>
    41 000001D8 000000000000000000- <1>
    41 000001E1 000000000000000000- <1>
    41 000001EA 000000000000000000- <1>
    41 000001F3 000000000000000000- <1>
    41 000001FC 00000000            <1>
    42                              <1> ;END OF FIRST SECTOR!!
    43                              <1> ;DOS SYSINIT BEGINS HERE
    44                              <1> ;First move the alignment of the DOSSEG to 4Kb
    45                              <1> initBegin:
    46 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    47 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    48 00000206 0F32                <1>     rdmsr
    49 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    50 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    51 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    52 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    53 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    54 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    55 00000221 89F8                <1>     mov eax, edi
    56 00000223 4889FA              <1>     mov rdx, rdi
    57 00000226 48C1EA20            <1>     shr rdx, 20h
    58 0000022A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    59                              <1> ;------------------------------------------------;
    60                              <1> ;              Connect Debugger                  ;
    61                              <1> ;------------------------------------------------;
    62                              <1> %if DEBUG
    63                              <1> ;Only connect if in debug mode
    64                              <1>     mov eax, 0C501h ;Connect debugger
    65                              <1>     int 35h
    66                              <1> %endif
    67                              <1> ;------------------------------------------------;
    68                              <1> ;           Sanitise the data area               ;
    69                              <1> ;------------------------------------------------;
    70                              <1> ; This call initialises ALL fields in the DOS    ;
    71                              <1> ; data area with 0's. Thus any fields, which     ;
    72                              <1> ; need to be initialised with a 0 value, are     ;
    73                              <1> ; initialised for free.                          ;
    74                              <1> ;------------------------------------------------;
    75 0000022C B9[BCDA0300]        <1>     mov ecx, dSegLen
    76 00000231 30C0                <1>     xor al, al
    77 00000233 57                  <1>     push rdi    ;Temp save rdi on the stack
    78 00000234 F3AA                <1>     rep stosb
    79 00000236 5F                  <1>     pop rdi
    80                              <1> ;------------------------------------------------;
    81                              <1> ;          Start saving Basic DOS data           ;
    82                              <1> ;------------------------------------------------;
    83 00000237 6444883C25-         <1>     mov byte fs:[bootDrive], r15b ;Save the boot drive in memory
    83 0000023C [10C00300]          <1>
    84                              <1> ;Copy DOS to its final resting place
    85 00000240 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    85 00000245 [00C00300]          <1>
    86 00000249 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    86 0000024E [08C00300]          <1>
    87 00000252 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    88 00000255 4881C7[BCDA0300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    89 0000025C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    90 00000263 B900100000          <1>     mov ecx, 1000h
    91 00000268 F348A5              <1>     rep movsq
    92                              <1> 
    93 0000026B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    94 0000026D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    95 00000271 664489C0            <1>     mov ax, r8w
    96 00000275 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
    97 0000027D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    98 00000285 64C60425[7EC00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    98 0000028D 05                  <1>
    99 0000028E 64C60425[A3C00300]- <1>     mov byte fs:[numFiles], 5      ;Default 20 files, at start 5
    99 00000296 05                  <1>
   100 00000297 64C60425[7FC00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
   100 0000029F 01                  <1>
   101 000002A0 6466C70425-         <1>     mov word fs:[shareCount], 3    ;Retry the repeat 3 times before failing
   101 000002A5 [25C00300]0300      <1>
   102 000002AB 6466C70425-         <1>     mov word fs:[shareDelay], 1    ;Go through one multiple of countdown loop
   102 000002B0 [27C00300]0100      <1>
   103                              <1>     ;If no detected Int 33h devices, halt 
   104 000002B6 49C1E810            <1>     shr r8, 2*8
   105 000002BA 4584C0              <1>     test r8b, r8b
   106 000002BD 0F8429100000        <1>     jz errorInit
   107                              <1> ;------------------------------------------------;
   108                              <1> ;          Add additional page tables            ;
   109                              <1> ;------------------------------------------------;
   110                              <1> ;This will allow for up to 64Gb of addressible space
   111 000002C3 4889EF              <1>     mov rdi, rbp
   112                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
   113 000002C6 B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
   114 000002CB 57                  <1>     push rdi
   115 000002CC 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
   115 000002D5 00                  <1>
   116                              <1> pdtLoop:
   117 000002D6 48AB                <1>     stosq
   118 000002D8 480500002000        <1>     add rax, 200000h
   119 000002DE FFC9                <1>     dec ecx
   120 000002E0 75F4                <1>     jnz pdtLoop
   121 000002E2 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   122                              <1> ;Now we add every 4kb page to the page directory pointer table
   123                              <1> ;15 4kb pages to consider
   124 000002E3 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   125 000002E6 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   126 000002E9 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   127 000002F0 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   128 000002F7 B93C000000          <1>     mov ecx, 60
   129 000002FC 480D03000000        <1>     or rax, 3h      ;present and r/w
   130                              <1> pdptLoop:
   131 00000302 48AB                <1>     stosq
   132 00000304 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   133 0000030A FFC9                <1>     dec ecx
   134 0000030C 75F4                <1>     jnz pdptLoop
   135 0000030E 0F20DF              <1>     mov rdi, cr3
   136 00000311 0F22DF              <1>     mov cr3, rdi
   137                              <1> ;------------------------------------------------;
   138                              <1> ;                   MCB inits                    ;
   139                              <1> ;------------------------------------------------;
   140                              <1> mcbInit:
   141 00000314 B820E80000          <1>     mov eax, 0E820h
   142 00000319 CD35                <1>     int 35h
   143                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   144 0000031B E804010000          <1>     call .mcbFindAddress
   145 00000320 7349                <1>     jnc .mcbi1  ;If found, proceed
   146                              <1>     ;Here, we try use E801h
   147 00000322 B801E80000          <1>     mov eax, 0E801h
   148 00000327 CD35                <1>     int 35h
   149 00000329 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   150 0000032C 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   151 0000032F 85C0                <1>     test eax, eax
   152 00000331 741B                <1>     jz .worst
   153 00000333 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   154 00000336 C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   155 00000339 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   156 00000341 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   157 00000349 E909010000          <1>     jmp mcbBuild
   158                              <1> .worst:
   159                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   160 0000034E B800002000          <1>     mov eax, 200000h
   161 00000353 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   161 00000358 [08C00300]          <1>
   162 0000035C 29D8                <1>     sub eax, ebx
   163 0000035E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   164 00000366 E9EC000000          <1>     jmp mcbBuild 
   165                              <1> .mcbi1:
   166 0000036B 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   167 0000036E 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   167 00000377 00                  <1>
   168 00000378 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   169 0000037C 0F85C2000000        <1>     jne .mcbFail
   170 00000382 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   171                              <1>     ;PCI hole always exists so this value will always be a dword
   172 00000386 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   173 0000038E 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   174 00000391 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   175 00000394 4881FB00000001      <1>     cmp rbx, 1000000h  
   176 0000039B 773C                <1>     ja .skipISA
   177                              <1> ;Here we deal with ISA hole issues
   178 0000039D B820E80000          <1>     mov eax, 0E820h
   179 000003A2 CD35                <1>     int 35h
   180 000003A4 48B800000001000000- <1>     mov rax, 1000000h
   180 000003AD 00                  <1>
   181 000003AE E871000000          <1>     call .mcbFindAddress
   182 000003B3 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   183 000003B9 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   183 000003C2 00                  <1>
   184 000003C3 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   185 000003C7 0F858A000000        <1>     jne mcbBuild  
   186 000003CD 488B5808            <1>     mov rbx, qword [rax + 8]
   187 000003D1 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   188                              <1> .skipISA:
   189 000003D9 B820E80000          <1>     mov eax, 0E820h
   190 000003DE CD35                <1>     int 35h
   191 000003E0 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   191 000003E9 00                  <1>
   192 000003EA E835000000          <1>     call .mcbFindAddress
   193 000003EF 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   194 000003F1 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   194 000003FA 00                  <1>
   195 000003FB 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   196 000003FF 7556                <1>     jne mcbBuild   
   197 00000401 488B5808            <1>     mov rbx, qword [rax + 8]
   198                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   199 00000405 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   199 0000040E 00                  <1>
   200 0000040F 4839CB              <1>     cmp rbx, rcx
   201 00000412 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   202 00000416 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   202 0000041B [1BC00300]          <1>
   203 0000041F E933000000          <1>     jmp mcbBuild
   204                              <1> .mcbFindAddress:
   205                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   206                              <1> ;Entry: rax = Address of arena to search for
   207                              <1> ;       rsi = Pointer to memory map
   208                              <1> ;       ecx = Number of 24 byte entries
   209                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   210                              <1> ;       CF=CY : value in rax not found
   211 00000424 56                  <1>     push rsi
   212 00000425 51                  <1>     push rcx
   213 00000426 50                  <1>     push rax
   214                              <1> .mfa0:
   215 00000427 483B06              <1>     cmp rax, qword [rsi]
   216 0000042A 7410                <1>     je .mcbAddressFound
   217 0000042C 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   218 00000433 FFC9                <1>     dec ecx
   219 00000435 79F0                <1>     jns .mfa0
   220                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   221 00000437 58                  <1>     pop rax
   222 00000438 59                  <1>     pop rcx
   223 00000439 5E                  <1>     pop rsi
   224 0000043A F9                  <1>     stc
   225 0000043B C3                  <1>     ret
   226                              <1> .mcbAddressFound:
   227 0000043C 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   228 0000043F 59                  <1>     pop rcx ;Pop old rax value off
   229 00000440 59                  <1>     pop rcx
   230 00000441 5E                  <1>     pop rsi
   231 00000442 F8                  <1>     clc
   232 00000443 C3                  <1>     ret
   233                              <1> .mcbFail:
   234 00000444 488D2DD70E0000      <1>     lea rbp, mcbFailmsg
   235 0000044B B804130000          <1>     mov eax, 1304h
   236 00000450 CD30                <1>     int 30h
   237 00000452 E9950E0000          <1>     jmp errorInit
   238                              <1> 
   239                              <1> mcbBuild:
   240                              <1> ;Actually build the MCB chain here
   241                              <1> ;Start by computing the difference between userbase and DOS area
   242                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   243 00000457 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   243 0000045C [08C00300]          <1>
   244 00000460 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   245 00000467 56                  <1>     push rsi    ;Save ptr
   246 00000468 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   247 0000046F 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   248 00000472 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   249 0000047A 5B                  <1>     pop rbx
   250 0000047B C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   251 0000047E 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   252 00000486 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   253 0000048E C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   254 00000491 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   255 00000494 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   255 00000499 [39C00300]          <1>
   256                              <1> 
   257                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   258 0000049D 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   258 000004A5 00000000            <1>
   259 000004A9 746E                <1>     jz .skipISA
   260                              <1>     ;Here if an ISA hole exists, place a MCB around it
   261 000004AB 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   262                              <1>     ;Remove one MCB worth of space from alloc
   263 000004B2 31C9                <1>     xor ecx, ecx
   264 000004B4 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   265 000004B7 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   266 000004BD C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   267 000004C0 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   268 000004C3 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   269 000004C6 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   270 000004C9 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   271 000004D1 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   271 000004DA 00                  <1>
   272 000004DB 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   273 000004DE 480510000000        <1>     add rax, mcb_size
   274 000004E4 4829C1              <1>     sub rcx, rax    ;Take their difference
   275 000004E7 C1E904              <1>     shr ecx, 4
   276 000004EA 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   277 000004ED C1E104              <1>     shl ecx, 4  ;Get bytes again
   278 000004F0 4881C310000000      <1>     add rbx, mcb_size
   279 000004F7 4801CB              <1>     add rbx, rcx
   280                              <1>     ;RBX should now be at 16Mb
   281 000004FA C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   282 000004FD 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   283 00000505 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   284 0000050D C1E904              <1>     shr ecx, 4  ;Get paragraphs
   285 00000510 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   286 00000516 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   287                              <1> .skipISA:
   288                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   289                              <1>     ;rbx points to a block with "Z" marker
   290 00000519 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   290 00000521 00000000            <1>
   291 00000525 7470                <1>     jz .exit
   292                              <1>     ;Add PCI hole MCB
   293 00000527 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   294                              <1>     ;Remove one MCB worth of space from alloc
   295 0000052E 31C9                <1>     xor ecx, ecx
   296 00000530 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   297 00000533 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   298 00000539 C1E104              <1>     shl ecx, 4  ;Get bytes
   299 0000053C C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   300 0000053F 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   301 00000542 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   302 00000545 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   303 0000054D 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   303 00000556 00                  <1>
   304 00000557 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   305 0000055A 480510000000        <1>     add rax, mcb_size
   306 00000560 4829C1              <1>     sub rcx, rax    ;Take their difference
   307 00000563 C1E904              <1>     shr ecx, 4
   308 00000566 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   309 00000569 C1E104              <1>     shl ecx, 4  ;Get bytes again
   310 0000056C 4881C310000000      <1>     add rbx, mcb_size
   311 00000573 4801CB              <1>     add rbx, rcx
   312                              <1>     ;RBX should now be at 4Gb
   313 00000576 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   314 00000579 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   315 00000581 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   315 00000586 [1BC00300]          <1>
   316 0000058A 48C1E904            <1>     shr rcx, 4
   317 0000058E 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   318 00000594 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   319                              <1> .exit:
   320                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   321 00000597 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   322                              <1> ;------------------------------------------------;
   323                              <1> ;          Kernel inits and adjustments          ;
   324                              <1> ;------------------------------------------------;
   325                              <1> ;Adjust Interrupt Entries Int 00h-15h
   326                              <1> adjExceptions:
   327 0000059E 30DB                <1>     xor bl, bl
   328 000005A0 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   329 000005A5 CD35                <1>     int 35h
   330 000005A7 31C9                <1>     xor ecx, ecx    ;Start from interrupt 00h
   331 000005A9 488D3D280E0000      <1>     lea rdi, exceptData
   332 000005B0 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   333                              <1> .ai0:
   334 000005B2 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   335 000005B7 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   336 000005BA 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   337                              <1> .ai1:
   338 000005BD CD35                <1>     int 35h
   339 000005BF 4881C708000000      <1>     add rdi, 8
   340 000005C6 FFC1                <1>     inc ecx
   341 000005C8 81F915000000        <1>     cmp ecx, 21
   342 000005CE 75E2                <1>     jne .ai0
   343                              <1> ;Adjust Interrupt Entries Int 40h-49h
   344                              <1> adjInts:
   345 000005D0 B340                <1>     mov bl, 40h
   346 000005D2 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   347 000005D7 CD35                <1>     int 35h
   348 000005D9 B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   349 000005DE 488D3DA30E0000      <1>     lea rdi, intData
   350 000005E5 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   351                              <1> .ai0:
   352 000005E7 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   353 000005EC 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   354 000005EF 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   355                              <1> .ai1:
   356 000005F2 CD35                <1>     int 35h
   357 000005F4 4881C708000000      <1>     add rdi, 8
   358 000005FB FFC1                <1>     inc ecx
   359 000005FD 81F950000000        <1>     cmp ecx, 50h
   360 00000603 75E2                <1>     jne .ai0
   361                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   362                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   363                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   364                              <1>     %if DEBUG
   365                              <1> debugPopUpMsg:
   366                              <1>     push rbx
   367                              <1>     push rbp
   368                              <1>     push rcx
   369                              <1>     push rdx
   370                              <1>     mov ecx, 53 ;A large number of lines
   371                              <1>     xor edx, edx    ;COM 1
   372                              <1> .cls:
   373                              <1>     mov eax, 010Ah ;Transmit Line feed
   374                              <1>     int 34h
   375                              <1>     dec ecx
   376                              <1>     jnz .cls
   377                              <1>     lea rbx, qword [debPrintNullString + rbp]
   378                              <1>     lea rbp, .msg
   379                              <1>     call rbx
   380                              <1>     jmp short .exit
   381                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   382                              <1> .exit:
   383                              <1>     pop rdx
   384                              <1>     pop rcx
   385                              <1>     pop rbp
   386                              <1>     pop rbx
   387                              <1>     %endif
   388                              <1> 
   389                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   390 00000605 488D15E00C0000      <1>     lea rdx, errorInit ;Get segment start address
   391 0000060C B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   392 00000611 CD41                <1>     int 41h
   393 00000613 488D15D20C0000      <1>     lea rdx, errorInit ;Get segment start address
   394 0000061A B844250000          <1>     mov eax, 2544h
   395 0000061F CD41                <1>     int 41h
   396                              <1> ;------------------------------------------------;
   397                              <1> ;          Driver Adjustments and inits          ;
   398                              <1> ;------------------------------------------------;
   399                              <1> ;Modify the pointers in nData before putting them in the data area
   400 00000621 48012DE00E0000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   401 00000628 48012DE30E0000      <1>     add qword [nData + drvHdr.strPtr], rbp
   402 0000062F 48012DE40E0000      <1>     add qword [nData + drvHdr.intPtr], rbp
   403                              <1> ;Copy the Null driver to its location in Sysvars
   404 00000636 B922000000          <1>     mov ecx, drvHdr_size
   405 0000063B 488D35C60E0000      <1>     lea rsi, qword [nData]
   406 00000642 488DBD[80C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   407 00000649 F3A4                <1>     rep movsb   
   408                              <1> 
   409                              <1> ;Adjust the addresses in the other driver headers 
   410 0000064B 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   410 0000064D [3173000000000000]  <1>
   411 00000655 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   412 0000065A 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   413                              <1> adjDrivers:
   414 0000065E E86D0C0000          <1>     call adjustDrvHdr
   415 00000663 E2F9                <1>     loop adjDrivers
   416                              <1> ;Open NUL
   417                              <1> ;NUL opened
   418                              <1> ;Open CON
   419                              <1> conInit:    ;Rather than keeping this resident... do it here
   420                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   421 00000665 488D95[1C760000]    <1>     lea rdx, qword [rbp + fastOutput]
   422 0000066C B849250000          <1>     mov eax, 2549h
   423 00000671 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   424 00000673 488D95[24760000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   425 0000067A B83B250000          <1>     mov eax, 253Bh
   426 0000067F CD41                <1>     int 41h ;Hook int 3Bh
   427                              <1> .ci0:
   428 00000681 B401                <1>     mov ah, 01      ;Get buffer status
   429 00000683 CD36                <1>     int 36h
   430 00000685 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   431 00000687 30E4                <1>     xor ah, ah
   432 00000689 CD36                <1>     int 36h ;Read key to flush from buffer
   433 0000068B EBF4                <1>     jmp short .ci0
   434                              <1> .ci1:
   435 0000068D B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   436 00000692 CD30                <1>     int 30h
   437 00000694 B402                <1>     mov ah, 02h
   438 00000696 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   439 00000698 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   440 0000069A CD30                <1>     int 30h
   441 0000069C B707                <1>     mov bh, 07h     ;Grey/Black attribs
   442 0000069E B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   443 000006A3 CD30                <1>     int 30h
   444                              <1> 
   445                              <1>     ;Save ptr to ConHdr in Sysvars
   446 000006A5 488D85[31730000]    <1>     lea rax, qword [rbp + conHdr]
   447 000006AC 6448890425-         <1>     mov qword fs:[vConPtr], rax
   447 000006B1 [59C00300]          <1>
   448                              <1> 
   449                              <1>     ;Fix the ext ESC function handler address
   450 000006B5 488D85[6F250000]    <1>     lea rax, qword [rbp + editKeys]
   451 000006BC 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   451 000006C1 [58000000]          <1>
   452                              <1> 
   453                              <1> ;CLOCK init prock
   454                              <1> ;Set the time and date using the RTC (if present)
   455                              <1> clkInit:
   456                              <1>    ;Save ptr to ClkHdr in Sysvars first
   457 000006C5 488D85[97730000]    <1>     lea rax, qword [rbp + clkHdr]
   458 000006CC 6448890425-         <1>     mov qword fs:[clockPtr], rax
   458 000006D1 [51C00300]          <1>
   459                              <1> ;CH - Hours, in BCD
   460                              <1> ;CL - Minutes, in BCD
   461                              <1> ;DH - Seconds, in BCD
   462 000006D5 B402                <1>     mov ah, 02  ;Read RTC Time
   463 000006D7 CD3A                <1>     int 3Ah
   464 000006D9 7271                <1>     jc .clkEnd  ;if error, just exit
   465                              <1>     ;Now set the driver time. Convert From BCD to Decimal
   466 000006DB 0FB6C5              <1>     movzx eax, ch   ;Hours
   467 000006DE E84D000000          <1>     call .bcd2Bin
   468 000006E3 88C5                <1>     mov ch, al
   469 000006E5 0FB6C1              <1>     movzx eax, cl     ;Mins
   470 000006E8 E843000000          <1>     call .bcd2Bin
   471 000006ED 88C1                <1>     mov cl, al
   472 000006EF 0FB6C6              <1>     movzx eax, dh   ;Seconds
   473 000006F2 E839000000          <1>     call .bcd2Bin
   474 000006F7 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
   475 000006F9 89C2                <1>     mov edx, eax
   476 000006FB B42D                <1>     mov ah, 2Dh ;DOS Set Time
   477 000006FD CD41                <1>     int 41h
   478                              <1> ;Now get the date from RTC
   479                              <1> ;CL - Year, in BCD
   480                              <1> ;DH - Month, in BCD
   481                              <1> ;DL - Day, in BCD
   482 000006FF B404                <1>     mov ah, 04  ;Read RTC Date
   483 00000701 CD3A                <1>     int 3Ah
   484 00000703 7247                <1>     jc .clkEnd
   485                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
   486 00000705 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
   487 00000708 E823000000          <1>     call .bcd2Bin
   488 0000070D 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
   489 00000710 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
   490 00000716 0FB6C6              <1>     movzx eax, dh   ;Get Months
   491 00000719 E812000000          <1>     call .bcd2Bin
   492 0000071E 88C6                <1>     mov dh, al  
   493 00000720 0FB6C2              <1>     movzx eax, dl   ;Get day
   494 00000723 E808000000          <1>     call .bcd2Bin
   495 00000728 88C2                <1>     mov dl, al
   496 0000072A B42B                <1>     mov ah, 2Bh ;DOS Set Date
   497 0000072C CD41                <1>     int 41h
   498 0000072E EB1C                <1>     jmp short .clkEnd
   499                              <1> .bcd2Bin:
   500                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   501 00000730 51                  <1>     push rcx
   502 00000731 89C1                <1>     mov ecx, eax
   503 00000733 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   504 00000738 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   505 0000073E 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   506 00000741 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   507                              <1> .b2blp:
   508 00000744 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   509 00000746 FFC9                <1>     dec ecx
   510 00000748 75FA                <1>     jnz .b2blp
   511                              <1> .b2bexit:
   512 0000074A 59                  <1>     pop rcx
   513 0000074B C3                  <1>     ret
   514                              <1> .clkEnd:
   515                              <1> ;------------------------------------------------;
   516                              <1> ;         Link DOS to temporary Buffer           ;
   517                              <1> ;------------------------------------------------;
   518                              <1> tempBufferInit:
   519 0000074C 488DBD[E0020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   520 00000753 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   520 00000758 [63C00300]          <1>
   521 0000075C 31C0                <1>     xor eax, eax
   522 0000075E 48FFC8              <1>     dec rax
   523 00000761 48AB                <1>     stosq   ;.nextBufPtr, end of list
   524 00000763 AA                  <1>     stosb   ;.driveNumber, Free entry
   525 00000764 48FFC0              <1>     inc rax
   526 00000767 AA                  <1>     stosb   ;.bufferFlags, No flags
   527                              <1> ;------------------------------------------------;
   528                              <1> ;         Init msd driver, create DPB            ;
   529                              <1> ;------------------------------------------------;
   530                              <1> storageInits:
   531                              <1> ;First save dpb pointer in sysvars
   532 00000768 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   533 0000076F 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   533 00000774 [41C00300]          <1>
   534                              <1> ;Open Mass Storage
   535 00000778 55                  <1>     push rbp
   536 00000779 E8AC0D0000          <1>     call diskInit
   537 0000077E 5D                  <1>     pop rbp
   538 0000077F 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   539 00000782 648A0425[7DC00300]  <1>     mov al, byte fs:[numPhysVol]
   540 0000078A 84C0                <1>     test al, al ;If no media with valid filesystems were detected, stop boot
   541 0000078C 0F845A0B0000        <1>     jz errorInit
   542 00000792 488D95[BB7D0000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   543 00000799 30C9                <1>     xor cl, cl  ;Clear counter
   544 0000079B 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   544 000007A0 [41C00300]          <1>
   545                              <1> .si0:   
   546 000007A4 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   547 000007A7 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   548 000007A9 CD41                <1>     int 41h
   549                              <1> ;Add other data to DPB
   550 000007AB 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   551 000007AE 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   552 000007B1 50                  <1>     push rax
   553 000007B2 488D87[B9730000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   554 000007B9 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   555 000007BD 58                  <1>     pop rax
   556 000007BE FEC1                <1>     inc cl
   557 000007C0 64380C25[7DC00300]  <1>     cmp byte fs:[numPhysVol], cl  ;When equal, we are have finished
   558 000007C8 7416                <1>     je .si1
   559 000007CA 50                  <1>     push rax
   560 000007CB 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   561 000007CF 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   562 000007D3 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   563 000007D6 58                  <1>     pop rax
   564 000007D7 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   565 000007DE EBC4                <1>     jmp short .si0
   566                              <1> .si1:
   567                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   568 000007E0 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   569 000007E8 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   570                              <1> 
   571                              <1> ;----------------------------------------:
   572                              <1> ;END OF IMPLEMENTERS SYSINIT PORTION ^^^ :
   573                              <1> ;========================================:
   574                              <1> ;START OF COMMON DOS SYSINIT PORTION VVV :
   575                              <1> ;----------------------------------------:
   576                              <1> 
   577                              <1> ;------------------------------------------------;
   578                              <1> ;          Find largest sector size              ;
   579                              <1> ;------------------------------------------------;
   580                              <1> sectorSizeSearch:
   581                              <1> ;Done by reading DPB's for each drive
   582                              <1>     ;lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   583 000007EB 31C0                <1>     xor eax, eax
   584 000007ED 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get ptr to first DPB
   584 000007F2 [41C00300]          <1>
   585                              <1>     ;Go thru each block individually
   586                              <1> .findLargest:
   587 000007F6 663B4202            <1>     cmp ax, word [rdx + dpb.wBytesPerSector]    ;Is current bigger than max?
   588 000007FA 660F424202          <1>     cmovb ax, word [rdx + dpb.wBytesPerSector]  ;Move if so
   589 000007FF 488B5225            <1>     mov rdx, qword [rdx + dpb.qNextDPBPtr]  ;Goto next DPB
   590 00000803 4881FAFFFFFFFF      <1>     cmp rdx, -1 ;We at the end?
   591 0000080A 75EA                <1>     jne short .findLargest  ;If not, keep checking
   592 0000080C 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   592 00000811 [61C00300]          <1>
   593                              <1> ;------------------------------------------------;
   594                              <1> ;                CDS array inits                 ;
   595                              <1> ;------------------------------------------------;
   596 00000815 B905000000          <1>     mov ecx, 5    ;Use as a counter, build 5 CDS entries
   597 0000081A 488DBD[19010000]    <1>     lea rdi, qword [rbp + cdsArray] ;Setup array
   598 00000821 E802000000          <1>     call makeCDSArray
   599 00000826 EB50                <1>     jmp short initialCDSWritten ;Go past the function
   600                              <1> makeCDSArray:
   601                              <1> ;Input: ecx = Size of array
   602                              <1> ;       rdi = Pointer to the start of the CDS array
   603                              <1> ;Ouput: rdi = first byte past the end of the table
   604 00000828 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   604 0000082D [6BC00300]          <1>
   605 00000831 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]
   605 00000836 [41C00300]          <1>
   606 0000083A B8413A5C00          <1>     mov eax, 005C3A41h      ;"A:\"+NULL char
   607                              <1> .tempCDS:
   608 0000083F 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax
   609 00000841 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   610 00000845 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir for all!
   611 0000084C 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the X:
   612 00000852 31D2                <1>     xor edx, edx    ;Use edx for flags
   613 00000854 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Is rbx an invalid DPB ptr?
   614 0000085B 7409                <1>     je .skipValidCDS
   615 0000085D BA00400000          <1>     mov edx, cdsValidDrive  ;If not, set drive to valid and...
   616 00000862 488B5B25            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]  ;... go to next DPB
   617                              <1> .skipValidCDS:
   618 00000866 66895743            <1>     mov word [rdi + cds.wFlags], dx ;Store the flags now
   619 0000086A FFC0                <1>     inc eax ;Increment the drive letter
   620 0000086C 4881C75B000000      <1>     add rdi, cds_size   ;Goto next array entry
   621 00000873 FFC9                <1>     dec ecx
   622 00000875 75C8                <1>     jnz .tempCDS
   623 00000877 C3                  <1>     ret
   624                              <1> initialCDSWritten:
   625                              <1> ;------------------------------------------------;
   626                              <1> ;     Set up general PSP areas and DOS vars      ;
   627                              <1> ;------------------------------------------------;
   628                              <1> ;Additional DOS Vars init and fixups
   629 00000878 64C60425[FEC30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   629 00000880 FF                  <1>
   630 00000881 64C60425[C6C30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   630 00000889 2F                  <1>
   631 0000088A 488DBD[CF010000]    <1>     lea rdi, qword [rbp + extAsciiTbl]  ;Get the load of dflt extascii tbl
   632 00000891 6448893C25-         <1>     mov qword fs:[ctryTbl + countryStruc.mapaddr], rdi ;Store in country table
   632 00000896 [2C000000]          <1>
   633                              <1> 
   634                              <1> ;Server Table setup
   635 0000089A 488D3D(F3030000)    <1>     lea rdi, serverDispTbl  ;Get pointer to table
   636 000008A1 48893D(83DA0300)    <1>     mov qword [serverDispTblPtr], rdi   ;Store to use
   637                              <1> 
   638                              <1> ;Set network machine name to... nothing!
   639 000008A8 488DBD[CBC30300]    <1>     lea rdi, qword [rbp + machineName]
   640 000008AF B910000000          <1>     mov ecx, 10h    ;16 chars long
   641 000008B4 B020                <1>     mov al, SPC ;Space char
   642 000008B6 F3AA                <1>     rep stosb   ;Fill with space chars
   643                              <1> 
   644                              <1> 
   645                              <1> ;Patch Data Table init
   646 000008B8 488DBD[DBC30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   647 000008BF 488D85[D26A0000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   648 000008C6 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   649 000008C8 488D85[DC6A0000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   650 000008CF 48AB                <1>     stosq
   651 000008D1 488D85[E66A0000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   652 000008D8 48AB                <1>     stosq
   653 000008DA 488D85[F06A0000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   654 000008E1 48AB                <1>     stosq
   655                              <1> 
   656                              <1> ;Initial PSP Init
   657 000008E3 488D1D16F8FFFF      <1>     lea rbx, qword [tempPSP]
   658 000008EA 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   658 000008EF [14C40300]          <1>
   659 000008F3 53                  <1>     push rbx
   660 000008F4 4881C380000000      <1>     add rbx, psp.dta
   661 000008FB 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   661 00000900 [0CC40300]          <1>
   662 00000904 5B                  <1>     pop rbx
   663 00000905 66C703CD40          <1>     mov word [rbx + psp.return], 040CDh ;DOS return function
   664 0000090A 66C74350CD41        <1>     mov word [rbx + psp.unixEntry], 041CDh  ;Int 41h!
   665 00000910 C64352CB            <1>     mov byte [rbx + psp.unixEntry + 2], 0CBh    ;Return!
   666 00000914 48C7430200000000    <1>     mov qword [rbx + psp.allocSize], 0    ;Size of allocation (dummy value)
   667 0000091C 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   668 00000920 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   669 00000924 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   670 00000928 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   670 00000931 FF                  <1>
   671 00000932 48AB                <1>     stosq   ;8 bytes
   672 00000934 31C0                <1>     xor eax, eax
   673 00000936 50                  <1>     push rax    ;Save 0 on the stack
   674 00000937 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   675 0000093A 48AB                <1>     stosq   ;16 bytes
   676 0000093C AB                  <1>     stosd   ;20 bytes
   677 0000093D 58                  <1>     pop rax ;Get 0 back
   678 0000093E 4889433E            <1>     mov qword [rbx + psp.envPtr], rax   ;No environment
   679 00000942 66C7434E1400        <1>     mov word [rbx + psp.jftSize], 20  ;PSP JFT array size
   680 00000948 4889DA              <1>     mov rdx, rbx
   681 0000094B B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   682 00000950 CD41                <1>     int 41h
   683 00000952 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   684 00000956 B843350000          <1>     mov eax, 3543h
   685 0000095B CD41                <1>     int 41h
   686 0000095D 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   687 00000961 B844350000          <1>     mov eax, 3544h
   688 00000966 CD41                <1>     int 41h
   689 00000968 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   690                              <1> 
   691 0000096C 31C0                <1>     xor eax, eax
   692 0000096E B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   693 00000973 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   694 00000977 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   695                              <1> ;------------------------------------------------;
   696                              <1> ;          Default File Handle Creation          ;
   697                              <1> ;                                                ;
   698                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   699                              <1> ;------------------------------------------------;
   700                              <1> defaultFileHandles:
   701                              <1> ;Fill in the default file table entries
   702 00000979 488D9D[2CC10300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   703 00000980 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   704 00000987 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   705 0000098D 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   705 00000992 [49C00300]          <1>
   706 00000996 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   706 0000099F 20                  <1>
   707                              <1> ;GOTO FIRST FILE 
   708 000009A0 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   709                              <1> ;Write AUX
   710 000009A7 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   711 000009AC 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   712 000009B2 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   713 000009B6 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   714                              <1>     ;No EOF when reading from the device
   715 000009BA 488B85[53730000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   716 000009C1 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   717                              <1>     ;Ignore disk related fields and Date/Time of open
   718 000009C5 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   719                              <1>     ;11 chars in 8.3 name
   720 000009C9 488D35C6090000      <1>     lea rsi, auxName
   721 000009D0 B903000000          <1>     mov ecx, 3
   722 000009D5 F3A4                <1>     rep movsb   ;Move the three bytes
   723 000009D7 4889D0              <1>     mov rax, rdx
   724 000009DA 48AB                <1>     stosq   ;Eight spaces left to print
   725 000009DC 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   725 000009E1 [14C40300]          <1>
   726 000009E5 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   727                              <1> ;GOTO NEXT ENTRY
   728 000009E9 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   729                              <1>     ;Write CON
   730 000009F0 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   731 000009F5 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   732 000009FB C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   733 000009FF C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   734                              <1>     ;No EOF when reading from the device
   735 00000A03 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   735 00000A08 [59C00300]          <1>
   736 00000A0C 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   737                              <1>     ;Ignore disk related fields and Date/Time of open
   738 00000A10 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   739                              <1>     ;11 chars in 8.3 name
   740 00000A14 488D3577090000      <1>     lea rsi, conName
   741 00000A1B B903000000          <1>     mov ecx, 3
   742 00000A20 F3A4                <1>     rep movsb   ;Move the three bytes
   743 00000A22 4889D0              <1>     mov rax, rdx
   744 00000A25 48AB                <1>     stosq   ;Eight spaces left to print
   745 00000A27 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   745 00000A2C [14C40300]          <1>
   746 00000A30 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   747                              <1> ;GOTO NEXT ENTRY
   748 00000A34 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   749                              <1> ;Write PRN
   750 00000A3B 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   751 00000A40 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   752 00000A46 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   753 00000A4A C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   754                              <1>     ;Want EOF when reading from to the device
   755 00000A4E 488B85[75730000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   756 00000A55 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   757                              <1>     ;Ignore disk related fields and Date/Time of open
   758 00000A59 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   759                              <1>     ;11 chars in 8.3 name
   760 00000A5D 488D3536090000      <1>     lea rsi, prnName
   761 00000A64 B903000000          <1>     mov ecx, 3
   762 00000A69 F3A4                <1>     rep movsb   ;Move the three bytes
   763 00000A6B 4889D0              <1>     mov rax, rdx
   764 00000A6E 48AB                <1>     stosq   ;Eight spaces left to print
   765 00000A70 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   765 00000A75 [14C40300]          <1>
   766 00000A79 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   767                              <1> ;Zero word 0 of entry 4 and 5
   768 00000A7D 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   769 00000A84 31C0                <1>     xor eax, eax
   770                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   771                              <1>     ; which is ok as these are empty entries, ready to be used)
   772 00000A86 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   773 00000A88 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   774 00000A8F 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   775                              <1> ;------------------------------------------------;
   776                              <1> ;              Setup DLLMGR Hooks                ;
   777                              <1> ;------------------------------------------------;   
   778 00000A91 488DBD[A4C00300]    <1>     lea rdi, qword [rbp + dllHooks]
   779 00000A98 488D85[F4710000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = CY
   780 00000A9F 48AB                <1>     stosq
   781 00000AA1 48AB                <1>     stosq
   782                              <1> ;------------------------------------------------;
   783                              <1> ;               Setup Share Hooks                ;
   784                              <1> ;------------------------------------------------;
   785 00000AA3 488DBD[B4C00300]    <1>     lea rdi, qword [rbp + shareHooks]
   786 00000AAA 488D9D[F4710000]    <1>     lea rbx, qword [rbp + goodDfltShareHook]
   787 00000AB1 488D85[EE710000]    <1>     lea rax, qword [rbp + badDfltShareHook]
   788 00000AB8 48AB                <1>     stosq   ;Store bad for openFileCheck
   789 00000ABA 4893                <1>     xchg rax, rbx
   790 00000ABC 48AB                <1>     stosq   ;Store good for open
   791 00000ABE 48AB                <1>     stosq   ;Store good for close
   792 00000AC0 4893                <1>     xchg rax, rbx
   793                              <1> ;Store bad for close for machine, task, name, lock and unlock file
   794 00000AC2 B905000000          <1>     mov ecx, 5
   795 00000AC7 F348AB              <1>     rep stosq
   796 00000ACA 4893                <1>     xchg rax, rbx
   797 00000ACC 48AB                <1>     stosq   ;Store good for check file lock exists
   798 00000ACE 4893                <1>     xchg rax, rbx
   799                              <1> ;Store bad for open file, update fcb from sft and get fst cluster of fcb
   800 00000AD0 B903000000          <1>     mov ecx, 3
   801 00000AD5 F348AB              <1>     rep stosq
   802 00000AD8 4893                <1>     xchg rax, rbx
   803 00000ADA 48AB                <1>     stosq   ;Store good for close dup file share
   804 00000ADC 4893                <1>     xchg rax, rbx
   805 00000ADE 48AB                <1>     stosq   ;Store bad for close handles for new file opened 
   806 00000AE0 48AB                <1>     stosq   ;Store bad for update dir information
   807                              <1> ;------------------------------------------------;
   808                              <1> ;             Print Welcome Message              ;
   809                              <1> ;------------------------------------------------;
   810 00000AE2 488D1523080000      <1>     lea rdx, strtmsg
   811 00000AE9 B409                <1>     mov ah, 09h
   812 00000AEB CD41                <1>     int 41h    
   813                              <1> ;------------------------------------------------;
   814                              <1> ;               Load CONFIG.SYS                  ;
   815                              <1> ;------------------------------------------------;
   816                              <1> ;Setup stackframe, workout base 
   817 00000AED 488DBD[45000000]    <1>     lea rdi, qword [rbp + secondDPB]
   818                              <1>     ;Check if this DPB is the last dpb. The first two ALWAYS exist.
   819 00000AF4 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   820 00000AF8 483DFFFFFFFF        <1>     cmp rax, -1 ;Was second DPB the last one?
   821 00000AFE 7421                <1>     je setupFrame   ;If so, jump
   822 00000B00 4889C7              <1>     mov rdi, rax    ;Move rdi to thirdDPB
   823 00000B03 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   824 00000B07 483DFFFFFFFF        <1>     cmp rax, -1 ;Was third DPB the last one?
   825 00000B0D 7412                <1>     je setupFrame   ;If so, jump
   826 00000B0F 4889C7              <1>     mov rdi, rax    ;Move rdi to fourthDPB
   827 00000B12 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   828 00000B16 483DFFFFFFFF        <1>     cmp rax, -1 ;Was fourth DPB the last one?
   829 00000B1C 7403                <1>     je setupFrame   ;If so, jump
   830 00000B1E 4889C7              <1>     mov rdi, rax    ;Move rdi to fifthDPB
   831                              <1> setupFrame:
   832 00000B21 4881C735000000      <1>     add rdi, dpb_size   ;Else, goto end of the dpb rdi points to
   833 00000B28 55                  <1>     push rbp
   834 00000B29 4889E5              <1>     mov rbp, rsp
   835 00000B2C 4881EC68000000      <1>     sub rsp, cfgFrame_size
   836 00000B33 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Store the end pointer here
   837 00000B37 48C745F81E000000    <1>     mov qword [rbp - cfgFrame.newBuffers], buffersDefault
   838 00000B3F 48C745F014000000    <1>     mov qword [rbp - cfgFrame.newSFTVal], filesDefault
   839 00000B47 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   840 00000B4F 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   841 00000B57 48C745D805000000    <1>     mov qword [rbp - cfgFrame.newLastdrive], lastDriveDeflt
   842                              <1> 
   843 00000B5F 648A0425[10C00300]  <1>     mov al, byte fs:[bootDrive]
   844 00000B67 A880                <1>     test al, 80h    ;Was boot drive hard disk?
   845 00000B69 7406                <1>     jz notHDD
   846                              <1> ;Set Current Drive to C:
   847 00000B6B B202                <1>     mov dl, 2
   848 00000B6D B40E                <1>     mov ah, 0Eh ;Select C: Drive
   849 00000B6F CD41                <1>     int 41h
   850                              <1> notHDD:
   851 00000B71 488D1526080000      <1>     lea rdx, cfgspec    ;CONFIG.SYS, must be on bootdrive for now
   852 00000B78 B43D                <1>     mov ah, 3Dh ;Open file for reading
   853 00000B7A B000                <1>     mov al, ReadAccess
   854 00000B7C CD41                <1>     int 41h
   855 00000B7E 0F8267050000        <1>     jc noCfg  ;If no CONFIG.SYS found, just use defaults that are already setup
   856                              <1> ;------------------------------------------------;
   857                              <1> ;              Process CONFIG.SYS                ;
   858                              <1> ;------------------------------------------------;
   859                              <1> ;Create a stack frame with the following order.
   860                              <1> ;Values greater than max are set to max. Values less than min are set to min.
   861                              <1> ; New Buffers value.        Default = 30, Min = 1, Max = 99
   862                              <1> ; New SFT value.            Default = 20, Min = 8, Max = 254
   863                              <1> ; New FCBS value.           Default = 4,  Min = 4, Max = 254
   864                              <1> ; New protected FCBS value. Default = 0,  Min = 0, Max = New FCBS value
   865                              <1> ; New CDS value.            Default = 5,  Min = 5, Max = 26
   866                              <1> ;
   867                              <1> ;Remember to maintain the base of occupied memory on stack (endPtr)
   868                              <1> ;-------------------------------------------------------------------------;
   869                              <1> ; CONFIG.SYS processing pseudocode:-
   870                              <1> ;
   871                              <1> ; _START:
   872                              <1> ; Read file one byte at a time a until a EOF or CR encountered.
   873                              <1> ; If (EOF encountered)
   874                              <1> ;   Insert a terminating ^Z to the end of the line. 
   875                              <1> ;   Close handle.
   876                              <1> ; Parse the line from beginning looking for a DOS terminating char.
   877                              <1> ;   If (CR or EOF encoutered before terminating char)
   878                              <1> ;       Bad line error msg. 
   879                              <1> ;       If (CR encountered)
   880                              <1> ;           Goto _START
   881                              <1> ;       Else
   882                              <1> ;           Goto _EXIT
   883                              <1> ;   Else 
   884                              <1> ;       If (Keyword AND not DEVICE) 
   885                              <1> ;           Store it's value on stack or change internal variable value
   886                              <1> ;       If (DEVICE)
   887                              <1> ;           Move endPtr after end of line and try load the driver.
   888                              <1> ;           If (driver doesn't exist or fails to init)
   889                              <1> ;               print bad driver error msg.
   890                              <1> ;       Else 
   891                              <1> ;           Bad line error msg
   892                              <1> ;       If (line terminated by CR)
   893                              <1> ;           Goto _START
   894                              <1> ; _EXIT:
   895                              <1> ;-------------------------------------------------------------------------;
   896                              <1> ; Note:
   897                              <1> ; If driver a Block Device Driver, build all the DPB's for it (up until max)
   898                              <1> ;   directly after the driver pointer as returned by the driver. Then, 
   899                              <1> ;   adjust the memory pointer and start loading next line.
   900                              <1> ;   The space marked as "endPtr" can be used as a buffer by the disk buffers.
   901                              <1> ; Once EOF has been reached, we jmp to noCfg which configures the other
   902                              <1> ;   data structures according to the values on the stack frame.
   903                              <1> ;-------------------------------------------------------------------------;
   904                              <1> ;Start CONFIG.SYS parsing here
   905                              <1> configParse:
   906 00000B84 488945B8            <1>     mov qword [rbp - cfgFrame.cfgHandle], rax
   907 00000B88 48C745B000000000    <1>     mov qword [rbp - cfgFrame.lastLine], 0
   908                              <1> .newLine:
   909                              <1> ;Keeps the new line unless a DEVICE= command read it, which adjusts endPtr
   910 00000B90 488B55A8            <1>     mov rdx, qword [rbp - cfgFrame.endPtr]  ;Start reading into here
   911 00000B94 488955A0            <1>     mov qword [rbp - cfgFrame.linePtr], rdx	;Use var for start of line ptr
   912                              <1> .nextChar:
   913 00000B98 488B5DB8            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into ebx
   914 00000B9C 6681FBFFFF          <1>     cmp bx, -1
   915 00000BA1 0F84D4000000        <1>     je .stopProcessError
   916 00000BA7 B8003F0000          <1>     mov eax, 3F00h  ;Read handle
   917 00000BAC B901000000          <1>     mov ecx, 1  ;Read one byte
   918 00000BB1 CD41                <1>     int 41h
   919 00000BB3 0F82C2000000        <1>     jc .stopProcessError
   920 00000BB9 85C9                <1>     test ecx, ecx	;If this is zero, EOF reached
   921 00000BBB 7508                <1>     jnz .notEOF
   922 00000BBD 48C745B0FFFFFFFF    <1>     mov qword [rbp - cfgFrame.lastLine], -1	;Note we are at EOF
   923                              <1> .notEOF:
   924 00000BC5 48FF45A8            <1>     inc qword [rbp - cfgFrame.endPtr]	;Goto next byte
   925 00000BC9 0FB602              <1>     movzx eax, byte [rdx]
   926 00000BCC 3C0D                <1>     cmp al, CR
   927 00000BCE 741C                <1>     je .endOfLine
   928 00000BD0 3C0A                <1>     cmp al, LF
   929 00000BD2 7418                <1>     je .endOfLine
   930 00000BD4 3C61                <1>     cmp al, "a"
   931 00000BD6 720F                <1>     jb .notChar
   932 00000BD8 3C7A                <1>     cmp al, "z"
   933 00000BDA 770B                <1>     ja .notChar
   934 00000BDC 50                  <1>     push rax    ;Push rax on stack as the argument to normalise
   935 00000BDD B813120000          <1>     mov eax, 1213h  ;Uppercase the char
   936 00000BE2 CD4F                <1>     int 4fh
   937 00000BE4 8802                <1>     mov byte [rdx], al  ;Replace the char with the capitalised form
   938 00000BE6 58                  <1>     pop rax ;Pop into rax to renormalise the stack
   939                              <1> .notChar:
   940 00000BE7 48FFC2              <1>     inc rdx ;Now move our local pointer to the next byte
   941 00000BEA EBAC                <1>     jmp short .nextChar
   942                              <1> .endOfLine:
   943                              <1> ;rdx points to terminating char
   944                              <1> ;First find the length of the instruction word
   945 00000BEC 31C9                <1>     xor ecx, ecx
   946                              <1> .cmdNameLenGet:
   947 00000BEE AC                  <1>     lodsb
   948 00000BEF E875000000          <1>     call .isCharTerminal
   949 00000BF4 740A                <1>     jz .endOfCommandFound
   950 00000BF6 FFC1                <1>     inc ecx
   951 00000BF8 81F90A000000        <1>     cmp ecx, 10 ;If shorter than longest command, keep looping
   952 00000BFE 72EE                <1>     jb .cmdNameLenGet
   953                              <1> ;Else, fall through in error
   954                              <1> .endOfCommandFound:
   955                              <1> ;ecx has the length of the command
   956 00000C00 81F90A000000        <1>     cmp ecx, 10
   957 00000C06 7473                <1>     je .stopProcessError
   958 00000C08 488D3DCE000000      <1>     lea rdi, .keyTbl ;Put rdi at the table to search for
   959                              <1> .cmdSearch:
   960 00000C0F 803FFF              <1>     cmp byte [rdi], -1
   961 00000C12 7467                <1>     je .stopProcessError
   962 00000C14 380F                <1>     cmp byte [rdi], cl
   963 00000C16 7544                <1>     jne .gotoNextCmd
   964                              <1>     ;Candidate command found, check said command is the command we want
   965 00000C18 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   966 00000C1C 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Error?
   967 00000C23 7456                <1>     je .stopProcessError
   968 00000C25 57                  <1>     push rdi
   969 00000C26 51                  <1>     push rcx
   970 00000C27 48FFC7              <1>     inc rdi ;Go to next char
   971 00000C2A F3A6                <1>     repe cmpsb  ;Compare whilst the strings are equal
   972 00000C2C 59                  <1>     pop rcx
   973 00000C2D 5F                  <1>     pop rdi
   974 00000C2E 752C                <1>     jne .gotoNextCmd    ;If not equal, just goto next command
   975                              <1>     ;Else, rdi + rcx points to the word ptr of the function
   976                              <1>     ;rdx points to the terminating char of the line 
   977 00000C30 52                  <1>     push rdx    ;This is to know whether we continue processing or end now
   978 00000C31 488D35A5000000      <1>     lea rsi, .keyTbl
   979 00000C38 4889F0              <1>     mov rax, rsi    ;Keep a copy in rax
   980 00000C3B 4803740F01          <1>     add rsi, qword [rdi + rcx + 1]  ;This is the offset from .keyTbl
   981 00000C40 4801C6              <1>     add rsi, rax    ;So add the EA of the head of the tbl before calling
   982 00000C43 F8                  <1>     clc ;Esure flags are happy before entering
   983 00000C44 FFD6                <1>     call rsi    ;Call this function
   984 00000C46 5A                  <1>     pop rdx
   985 00000C47 7232                <1>     jc .stopProcessError    ;If the function returns CF=CY, error exit
   986 00000C49 48F745B0FFFFFFFF    <1>     test qword [rbp - cfgFrame.lastLine], -1 ;If we concluded at EOF, exit
   987 00000C51 0F8589040000        <1>     jnz .cfgExit
   988 00000C57 E934FFFFFF          <1>     jmp .newLine
   989                              <1> .gotoNextCmd:
   990 00000C5C 0FB607              <1>     movzx eax, byte [rdi]
   991 00000C5F 0503000000          <1>     add eax, 3
   992 00000C64 4801C7              <1>     add rdi, rax
   993 00000C67 EBA6                <1>     jmp short .cmdSearch
   994                              <1> .isCharTerminal:
   995                              <1> ;Input: AL = Char to check
   996                              <1> ;Output: ZF=ZE -> Char terminal
   997                              <1> ;        ZF=NZ -> Char not terminal
   998 00000C69 3C3D                <1>     cmp al, "="
   999                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34 00000C6B 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000C6D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
  1000 00000C6E 3C20                <1>     cmp al, SPC
  1001                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000C70 74(6D)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1002 00000C72 3C09                <1>     cmp al, TAB
  1003                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000C74 74(6D)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1004 00000C76 3C3B                <1>     cmp al, ";"
  1005                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000C78 74(6D)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1006                              <1>     return
    13                              <2> %%_ret:
    14 00000C7A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1007                              <1> .stopProcessError:
  1008 00000C7B 488D1534000000      <1>     lea rdx, .speLine
  1009 00000C82 B800090000          <1>     mov eax, 0900h
  1010 00000C87 CD41                <1>     int 41h
  1011                              <1>     ;Reset all values to default
  1012 00000C89 48C745F81E000000    <1>     mov qword [rbp - cfgFrame.newBuffers], buffersDefault
  1013 00000C91 48C745F014000000    <1>     mov qword [rbp - cfgFrame.newSFTVal], filesDefault
  1014 00000C99 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
  1015 00000CA1 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
  1016 00000CA9 48C745D805000000    <1>     mov qword [rbp - cfgFrame.newLastdrive], lastDriveDeflt
  1017 00000CB1 E92A040000          <1>     jmp .cfgExit
  1018 00000CB6 0D0A556E7265636F67- <1> .speLine:   db CR,LF,"Unrecognised command in CONFIG.SYS",CR,LF,"$"
  1018 00000CBF 6E6973656420636F6D- <1>
  1018 00000CC8 6D616E6420696E2043- <1>
  1018 00000CD1 4F4E4649472E535953- <1>
  1018 00000CDA 0D0A24              <1>
  1019                              <1> .keyTbl: 
  1020 00000CDD 05425245414B        <1>     db 5, "BREAK"           ;DONE
  1021 00000CE3 5D00                <1> 	dw .breakHandler - .keyTbl
  1022 00000CE5 0742554646455253    <1>     db 7, "BUFFERS"         ;DONE
  1023 00000CED 8A00                <1> 	dw .bufHandler - .keyTbl
  1024 00000CEF 07434F554E545259    <1> 	db 7, "COUNTRY"         ;Ignored for now
  1025 00000CF7 FC00                <1> 	dw .countryScan - .keyTbl
  1026 00000CF9 06444556494345      <1> 	db 6, "DEVICE"          ;DONE
  1027 00000D00 FD00                <1> 	dw .drvLoader - .keyTbl
  1028 00000D02 0446434253          <1> 	db 4, "FCBS"            ;DONE (to be ignored for a while now)
  1029 00000D07 2B03                <1> 	dw .fcbHandler - .keyTbl
  1030 00000D09 0546494C4553        <1> 	db 5, "FILES"           ;DONE
  1031 00000D0F 2C03                <1> 	dw .sftHandler - .keyTbl
  1032 00000D11 094C41535444524956- <1> 	db 9, "LASTDRIVE"       ;DONE
  1032 00000D1A 45                  <1>
  1033 00000D1B B203                <1> 	dw .lastdriveHandler - .keyTbl
  1034 00000D1D 055348454C4C        <1> 	db 5, "SHELL"           ;Ignored for now
  1035 00000D23 0004                <1> 	dw .shellHandler - .keyTbl
  1036 00000D25 06535441434B53      <1> 	db 6, "STACKS"          ;Ignored for now
  1037 00000D2C 0104                <1> 	dw .stacksHandler - .keyTbl
  1038 00000D2E 08445249565041524D  <1>     db 8, "DRIVPARM"
  1039 00000D37 0204                <1>     dw .drivParm - .keyTbl  ;Ignored for now
  1040 00000D39 FF                  <1> 	db -1	;End of table marker
  1041                              <1> .breakHandler:
  1042 00000D3A 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1043 00000D3E 4881C606000000      <1>     add rsi, 6  ;Go past BREAK=
  1044                              <1>     ;This must be the word ON or OFF 
  1045 00000D45 31D2                <1>     xor edx, edx    ;Clear CF and default to OFF
  1046 00000D47 66813E4F4E          <1>     cmp word [rsi], "ON"
  1047 00000D4C 740F                <1>     je .breakOn
  1048 00000D4E 66813E4F46          <1>     cmp word [rsi], "OF"
  1049 00000D53 7506                <1>     jne .breakBad
  1050 00000D55 807E0246            <1>     cmp byte [rsi + 2], "F"
  1051 00000D59 7404                <1>     je .breakCommon
  1052                              <1> .breakBad:
  1053 00000D5B F9                  <1>     stc
  1054                              <1>     return
    13                              <2> %%_ret:
    14 00000D5C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1055                              <1> .breakOn:
  1056 00000D5D FFC2                <1>     inc edx ;Go from OFF to ON  (keeps CF=NC)
  1057                              <1> .breakCommon:
  1058 00000D5F B801330000          <1>     mov eax, 3301h  ;Set break to value in dl
  1059 00000D64 CD41                <1>     int 41h
  1060                              <1>     return
    13                              <2> %%_ret:
    14 00000D66 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1061                              <1> 
  1062                              <1> .bufHandler:
  1063 00000D67 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1064 00000D6B 4881C608000000      <1>     add rsi, 8  ;Go past BUFFERS=
  1065                              <1>     ;This must be at most three digits, anything else is a failure
  1066 00000D72 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
  1067 00000D75 31C9                <1>     xor ecx, ecx
  1068 00000D77 AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
  1069 00000D78 3C30                <1>     cmp al, "0"
  1070 00000D7A 724A                <1>     jb .bufHandlerErr
  1071 00000D7C 3C39                <1>     cmp al, "9"
  1072 00000D7E 7746                <1>     ja .bufHandlerErr
  1073 00000D80 FFC1                <1>     inc ecx ;Increment char counter
  1074 00000D82 AC                  <1>     lodsb   ;Get second char
  1075 00000D83 E840000000          <1>     call .bufHandlerTermCheck
  1076 00000D88 7410                <1>     je .bufHandlerProcess   ;If it is a terminating char, exit
  1077 00000D8A 3C30                <1>     cmp al, "0"
  1078 00000D8C 7238                <1>     jb .bufHandlerErr
  1079 00000D8E 3C39                <1>     cmp al, "9"
  1080 00000D90 7734                <1>     ja .bufHandlerErr
  1081 00000D92 AC                  <1>     lodsb   ;Check no more chars!
  1082 00000D93 E830000000          <1>     call .bufHandlerTermCheck
  1083 00000D98 752C                <1>     jne .bufHandlerErr
  1084                              <1> .bufHandlerProcess:
  1085 00000D9A 31D2                <1>     xor edx, edx    ;Accumulate value in edx
  1086 00000D9C 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
  1087                              <1> .bufHandlerLp:
  1088 00000D9F AC                  <1>     lodsb   ;Get the digit
  1089 00000DA0 E817000000          <1>     call .bufHandlerMul
  1090 00000DA5 67E304              <1>     jecxz .bufHandlerPrepExit
  1091 00000DA8 FFC9                <1>     dec ecx
  1092 00000DAA EBF3                <1>     jmp short .bufHandlerLp 
  1093                              <1> .bufHandlerPrepExit:
  1094                              <1> ;edx has the value now, so place it in stack
  1095 00000DAC B91E000000          <1>     mov ecx, buffersDefault
  1096 00000DB1 85D2                <1>     test edx, edx
  1097 00000DB3 0F44D1              <1>     cmovz edx, ecx  ;Replace zero with default if the user specified 0 buffers
  1098 00000DB6 488955F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rdx
  1099 00000DBA F8                  <1>     clc
  1100                              <1>     return
    13                              <2> %%_ret:
    14 00000DBB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1101                              <1> .bufHandlerMul:
  1102 00000DBC 2C30                <1>     sub al, "0" ;Convert to a binary value
  1103 00000DBE F6E1                <1>     mul cl  ;Multiply al by cl, answer in ax
  1104 00000DC0 0FB7C0              <1>     movzx eax, ax
  1105 00000DC3 01C2                <1>     add edx, eax
  1106                              <1>     return
    13                              <2> %%_ret:
    14 00000DC5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1107                              <1> .bufHandlerErr:
  1108 00000DC6 F9                  <1>     stc
  1109                              <1>     return
    13                              <2> %%_ret:
    14 00000DC7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1110                              <1> .bufHandlerTermCheck:
  1111 00000DC8 3C20                <1>     cmp al, SPC
  1112                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000DCA 74(C7)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1113 00000DCC 3C09                <1>     cmp al, TAB
  1114                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000DCE 74(C7)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1115 00000DD0 3C0D                <1>     cmp al, CR
  1116                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000DD2 74(C7)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1117 00000DD4 3C0A                <1>     cmp al, LF
  1118                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000DD6 74(C7)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1119                              <1>     return
    13                              <2> %%_ret:
    14 00000DD8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1120                              <1> .countryScan:
  1121                              <1>     return
    13                              <2> %%_ret:
    14 00000DD9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1122                              <1> .drvLoader:
  1123                              <1> ;We first try to read the driver into the byte after rdx.
  1124                              <1> ;If we cannot open the file, or we can open but not read the whole file
  1125                              <1> ; we error with Bad or missing filename msg, and proceed as if nothing happened 
  1126                              <1> ; (CF=NC). 
  1127                              <1> ; Thus we DO NOT adjust .endPtr or .linePtr and recycle that space for the 
  1128                              <1> ; next line.
  1129                              <1> ;If the open succeeded and we were able to read the whole driver into memory, 
  1130                              <1> ; we pass the lineptr to the driver and call init for the driver.
  1131                              <1> ; Once the driver returns, if the DONE bit is set, we read the offset of 
  1132                              <1> ; free memory above the driver and add that to the endPtr. If the driver
  1133                              <1> ; is a block driver, we add to the endPtr the space for "Units supported" 
  1134                              <1> ; number of DPBs.
  1135 00000DDA 4889D6              <1>     mov rsi, rdx    ;Save the ptr to past the end of the line in rsi
  1136 00000DDD 488B7DA0            <1>     mov rdi, qword [rbp - cfgFrame.linePtr]
  1137 00000DE1 4881C707000000      <1>     add rdi, 7  ;Go past DEVICE= to the pathname
  1138 00000DE8 4889FA              <1>     mov rdx, rdi    ;Prepare rdx for the open
  1139 00000DEB B820000000          <1>     mov eax, SPC
  1140                              <1> .drvFindEndOfFileName:
  1141 00000DF0 AE                  <1>     scasb  ;Is this char the space?
  1142 00000DF1 7416                <1>     je .fileNameFound
  1143                              <1>     ;Was the char terminal?
  1144 00000DF3 807FFF0D            <1>     cmp byte [rdi - 1], CR
  1145 00000DF7 0F84A0010000        <1>     je .drvBad
  1146 00000DFD 807FFF0A            <1>     cmp byte [rdi - 1], LF
  1147 00000E01 0F8496010000        <1>     je .drvBad
  1148 00000E07 EBE7                <1>     jmp short .drvFindEndOfFileName
  1149                              <1> .fileNameFound:
  1150 00000E09 C647FF00            <1>     mov byte [rdi - 1], 0   ;Null terminate the path to the file
  1151 00000E0D B8003D0000          <1>     mov eax, 3D00h  ;Read only file
  1152 00000E12 CD41                <1>     int 41h
  1153 00000E14 0F8283010000        <1>     jc .drvBad
  1154 00000E1A C647FF20            <1>     mov byte [rdi - 1], " " ;Replace the null with a space now again
  1155 00000E1E 0FB7D8              <1>     movzx ebx, ax   ;Get the handle in ebx
  1156 00000E21 668905DE010000      <1>     mov word [.drvHandle], ax   ;Save the handle in variable
  1157 00000E28 31D2                <1>     xor edx, edx    ;Move the handle to the end of the file
  1158 00000E2A B802420000          <1>     mov eax, 4202h  ;LSEEK to SEEK_END
  1159 00000E2F CD41                <1>     int 41h
  1160 00000E31 89C1                <1>     mov ecx, eax    ;Get the file size in ecx
  1161 00000E33 31D2                <1>     xor edx, edx    ;Move the handle to the start of the file
  1162 00000E35 B800420000          <1>     mov eax, 4200h  ;LSEEK to SEEK_SET (start of the file)
  1163 00000E3A CD41                <1>     int 41h
  1164                              <1>     ;Now we read ecx bytes to rsi as rsi points to first byte past the end
  1165                              <1>     ; of the DEVICE= line 
  1166 00000E3C 4889F2              <1>     mov rdx, rsi    ;Point to first byte past the end of DEVICE= line
  1167 00000E3F 89CE                <1>     mov esi, ecx    ;Save the number of bytes to read in esi
  1168 00000E41 B8003F0000          <1>     mov eax, 3F00h  ;Read handle    
  1169 00000E46 CD41                <1>     int 41h
  1170 00000E48 0F8241010000        <1>     jc .drvBadClose
  1171 00000E4E 39CE                <1>     cmp esi, ecx    ;Were all bytes read in?
  1172 00000E50 0F8539010000        <1>     jne .drvBadClose
  1173                              <1>     ;Ok, full file read in, now prepare to call driver init routine
  1174 00000E56 4889D6              <1>     mov rsi, rdx    ;Move ptr to driver header to rsi
  1175 00000E59 488D1D87010000      <1>     lea rbx, .drvInitStruc
  1176 00000E60 C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
  1177 00000E63 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], drvINIT
  1178 00000E67 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0
  1179 00000E6D C6430D00            <1>     mov byte [rbx + initReqPkt.numunt], 0
  1180 00000E71 488B45A0            <1>     mov rax, qword [rbp - cfgFrame.linePtr] ;Get the line pointer
  1181 00000E75 480507000000        <1>     add rax, 7  ;Goto the first byte past DEVICE=
  1182 00000E7B 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
  1183 00000E7F 48C7431600000000    <1>     mov qword [rbx + initReqPkt.optptr], 0
  1184 00000E87 640FB60425-         <1>     movzx eax, byte fs:[numPhysVol]
  1184 00000E8C [7DC00300]          <1>
  1185 00000E90 FFC8                <1>     dec eax ;Get a 0 based count
  1186 00000E92 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al
  1187 00000E95 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
  1188 00000E98 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
  1189 00000E9B 66F743030001        <1>     test word [rbx + initReqPkt.status], drvDonStatus
  1190 00000EA1 0F84E8000000        <1>     jz .drvBadClose
  1191 00000EA7 66F743030080        <1>     test word [rbx + initReqPkt.status], drvErrStatus
  1192 00000EAD 0F85DC000000        <1>     jnz .drvBadClose
  1193                              <1>     ;Now check that the driver wants to be installed
  1194 00000EB3 483B730E            <1>     cmp rsi, qword [rbx + initReqPkt.endptr]    ;This is for char and blk devs
  1195 00000EB7 0F84C2000000        <1>     je .drvWantsClose
  1196 00000EBD 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
  1197 00000EC3 750A                <1>     jnz .drvChar
  1198 00000EC5 807B0D00            <1>     cmp byte [rbx + initReqPkt.numunt], 0
  1199 00000EC9 0F84B0000000        <1>     je .drvWantsClose
  1200                              <1> .drvChar:
  1201                              <1>     ;Otherwise, this init passed, now build the structures we need.
  1202                              <1>     ;First adjust .endPtr
  1203 00000ECF 488B430E            <1>     mov rax, qword [rbx + initReqPkt.endptr]    ;Get the end pointer
  1204 00000ED3 488945A8            <1>     mov qword [rbp - cfgFrame.endPtr], rax  ;Move it here
  1205                              <1>     ;Now we link the driver into the driver chain
  1206 00000ED7 488B3D(80C00300)    <1>     mov rdi, qword [nulDevHdr + drvHdr.nxtPtr]  ;Get next ptr from nul drvr
  1207 00000EDE 48893E              <1>     mov qword [rsi + drvHdr.nxtPtr], rdi    ;And store it here
  1208 00000EE1 488935(80C00300)    <1>     mov qword [nulDevHdr + drvHdr.nxtPtr], rsi  ;And link nul to this driver
  1209                              <1>     ;Now if we are a char device, we are done so check here
  1210 00000EE8 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
  1211 00000EEE 0F85B9000000        <1>     jnz .drvWantsCloseChar  ;We are complete
  1212                              <1>     ;Now for block devices, we get the BPB ptr array and numUnits supported
  1213 00000EF4 0FB64B0D            <1>     movzx ecx, byte [rbx + initReqPkt.numunt]
  1214 00000EF8 488B5B16            <1>     mov rbx, qword [rbx + initReqPkt.optptr]    ;Get the BPB array pointer
  1215                              <1> 
  1216 00000EFC 4889F2              <1>     mov rdx, rsi    ;Move the driver pointer to rdx
  1217 00000EFF 488B75A8            <1>     mov rsi, qword [rbp - cfgFrame.endPtr]  ;Build DPB array here
  1218 00000F03 4889F7              <1>     mov rdi, rsi    ;Move rdi here too, to point to first new DPB later
  1219 00000F06 51                  <1>     push rcx
  1220 00000F07 52                  <1>     push rdx
  1221 00000F08 31D2                <1>     xor edx, edx
  1222 00000F0A B835000000          <1>     mov eax, dpb_size
  1223 00000F0F F7E1                <1>     mul ecx ;Multiply the number of DPB's needed with the size of a dpb
  1224 00000F11 480145A8            <1>     add qword [rbp - cfgFrame.endPtr], rax  ;Add this value to endPtr
  1225 00000F15 5A                  <1>     pop rdx ;Get back the driver ptr in rdx
  1226 00000F16 59                  <1>     pop rcx ;Get back the number of units count
  1227                              <1>     
  1228 00000F17 4887EB              <1>     xchg rbp, rbx   ;Swap stack frame ptr and BPB array ptr
  1229 00000F1A 4887F5              <1>     xchg rsi, rbp   ;Swap BPB array and DPB space ptrs
  1230                              <1> .drvBuildDPB:
  1231 00000F1D B800530000          <1>     mov eax, 5300h
  1232 00000F22 CD41                <1>     int 41h
  1233 00000F24 4881C678000000      <1>     add rsi, bpbEx_size ;Goto next bpb in array
  1234                              <1>     ;Adjust fields in DPB
  1235 00000F2B 64FE0425[7DC00300]  <1>     inc byte fs:[numPhysVol] 
  1236 00000F33 648A0425[7DC00300]  <1>     mov al, byte fs:[numPhysVol]
  1237 00000F3B 884500              <1>     mov byte [rbp + dpb.bDriveNumber], al
  1238 00000F3E 886D01              <1>     mov byte [rbp + dpb.bUnitNumber], ch
  1239 00000F41 4889551B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rdx
  1240 00000F45 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Point to next DPB
  1241 00000F49 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
  1242 00000F4D FEC5                <1>     inc ch  ;Increment unit number 
  1243 00000F4F 38E9                <1>     cmp cl, ch  ;Are we done?
  1244 00000F51 7409                <1>     je .dpbInitDone
  1245 00000F53 4881C535000000      <1>     add rbp, dpb_size   ;Go to space for next DPB
  1246 00000F5A EBC1                <1>     jmp short .drvBuildDPB
  1247                              <1> .dpbInitDone:
  1248                              <1> ;Make sure we now make the last qNextDPBPtr = -1
  1249 00000F5C 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
  1250                              <1>     ;Now we set the old last dpb to point to the first one
  1251 00000F64 64488B3425-         <1>     mov rsi, qword fs:[dpbHeadPtr]
  1251 00000F69 [41C00300]          <1>
  1252                              <1> .drvDPBLp:
  1253 00000F6D 807E25FF            <1>     cmp byte [rsi + dpb.qNextDPBPtr], -1
  1254 00000F71 7406                <1>     je .drvLastDPBFound
  1255 00000F73 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Goto next DPB
  1256 00000F77 EBF4                <1>     jmp short .drvDPBLp
  1257                              <1> .drvLastDPBFound:
  1258 00000F79 48893E              <1>     mov qword [rsi], rdi    ;Chain this dpb now to the first new dpb
  1259 00000F7C 4889DD              <1>     mov rbp, rbx    ;Return the stack frame ptr to rbp
  1260                              <1> ;And we are done!
  1261                              <1> .drvWantsClose:
  1262                              <1> ;If the driver wants to not install silently, it can here
  1263 00000F7F 0FB71D80000000      <1>     movzx ebx, word [.drvHandle] ;Get the handle back, close it and proceed
  1264 00000F86 B8003E0000          <1>     mov eax, 3E00h  
  1265 00000F8B CD41                <1>     int 41h 
  1266 00000F8D F8                  <1>     clc ;Never return with CF=CY
  1267                              <1>     return  
    13                              <2> %%_ret:
    14 00000F8E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1268                              <1> .drvBadClose:
  1269 00000F8F 0FB71D70000000      <1>     movzx ebx, word [.drvHandle]    ;Get back handle to close
  1270 00000F96 B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
  1271 00000F9B CD41                <1>     int 41h
  1272                              <1> .drvBad:
  1273 00000F9D 488D1529000000      <1>     lea rdx, .drvBadMsg
  1274 00000FA4 B800090000          <1>     mov eax, 0900h
  1275 00000FA9 CD41                <1>     int 41h
  1276 00000FAB F8                  <1>     clc ;Never return with CF=CY
  1277                              <1>     return
    13                              <2> %%_ret:
    14 00000FAC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1278                              <1> .drvWantsCloseChar:
  1279                              <1> ;Final checks, to see if we are CLOCK$ or CON
  1280 00000FAD 66F746080100        <1>     test word [rsi + drvHdr.attrib], devDrvConIn
  1281 00000FB3 7407                <1>     jz .dwccClock
  1282 00000FB5 488935(59C00300)    <1>     mov qword [vConPtr], rsi
  1283                              <1> .dwccClock:
  1284 00000FBC 66F746080800        <1>     test word [rsi + drvHdr.attrib], devDrvClockDev
  1285 00000FC2 74BB                <1>     jz .drvWantsClose
  1286 00000FC4 488935(51C00300)    <1>     mov qword [clockPtr], rsi
  1287 00000FCB EBB2                <1>     jmp short .drvWantsClose
  1288 00000FCD 426164206F72206D69- <1> .drvBadMsg: db "Bad or missing filename",CR,LF,"$"
  1288 00000FD6 7373696E672066696C- <1>
  1288 00000FDF 656E616D650D0A24    <1>
  1289 00000FE7 000000000000000000- <1> .drvInitStruc: db initReqPkt_size dup (0)  
  1289 00000FF0 000000000000000000- <1>
  1289 00000FF9 000000000000000000- <1>
  1289 00001002 00000000            <1>
  1290 00001006 FFFF                <1> .drvHandle: dw -1
  1291                              <1> 
  1292                              <1> .fcbHandler:
  1293                              <1>     return
    13                              <2> %%_ret:
    14 00001008 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1294                              <1> .sftHandler:
  1295                              <1> ;This reads the line to set the number of FILE to between 1 and 254
  1296 00001009 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1297 0000100D 4881C606000000      <1>     add rsi, 6  ;Go past FILES=
  1298                              <1>     ;This must be at most three digits, anything else is a failure
  1299 00001014 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
  1300 00001017 31C9                <1>     xor ecx, ecx
  1301 00001019 AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
  1302 0000101A 3C30                <1>     cmp al, "0"
  1303 0000101C 725E                <1>     jb .sftHandlerErr
  1304 0000101E 3C39                <1>     cmp al, "9"
  1305 00001020 775A                <1>     ja .sftHandlerErr
  1306 00001022 FFC1                <1>     inc ecx ;Increment char counter
  1307 00001024 AC                  <1>     lodsb   ;Get second char
  1308 00001025 E854000000          <1>     call .sftHandlerTermCheck
  1309 0000102A 7420                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
  1310 0000102C 3C30                <1>     cmp al, "0"
  1311 0000102E 724C                <1>     jb .sftHandlerErr
  1312 00001030 3C39                <1>     cmp al, "9"
  1313 00001032 7748                <1>     ja .sftHandlerErr
  1314 00001034 FFC1                <1>     inc ecx ;Increment char counter
  1315 00001036 AC                  <1>     lodsb   ;Get third char
  1316 00001037 E842000000          <1>     call .sftHandlerTermCheck
  1317 0000103C 3C30                <1>     cmp al, "0"
  1318 0000103E 723C                <1>     jb .sftHandlerErr
  1319 00001040 3C32                <1>     cmp al, "2" ;Max BUFFERS=254 soooo, sorry buddy!
  1320 00001042 7738                <1>     ja .sftHandlerErr
  1321 00001044 AC                  <1>     lodsb   ;Check no more chars!
  1322 00001045 E834000000          <1>     call .sftHandlerTermCheck
  1323 0000104A 7530                <1>     jne .sftHandlerErr
  1324                              <1> .sftHandlerProcess:
  1325 0000104C 31D2                <1>     xor edx, edx    ;Accumulate value in edx
  1326 0000104E 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
  1327                              <1> .sftHandlerLp:
  1328 00001051 AC                  <1>     lodsb   ;Get the digit
  1329 00001052 E81B000000          <1>     call .sftHandlerMul
  1330 00001057 67E304              <1>     jecxz .sftHandlerPrepExit
  1331 0000105A FFC9                <1>     dec ecx
  1332 0000105C EBF3                <1>     jmp short .sftHandlerLp 
  1333                              <1> .sftHandlerPrepExit:
  1334                              <1> ;edx has the value now, so place it in stack
  1335 0000105E B914000000          <1>     mov ecx, filesDefault  ;Get default if the user specifies less than min
  1336 00001063 81FA08000000        <1>     cmp edx, 8
  1337 00001069 0F42D1              <1>     cmovb edx, ecx
  1338 0000106C 488955F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rdx
  1339 00001070 F8                  <1>     clc
  1340                              <1>     return
    13                              <2> %%_ret:
    14 00001071 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1341                              <1> .sftHandlerMul:
  1342 00001072 2C30                <1>     sub al, "0" ;Convert to a binary value
  1343 00001074 F6E1                <1>     mul cl  ;Multiply al by cl, answer in ax
  1344 00001076 0FB7C0              <1>     movzx eax, ax
  1345 00001079 01C2                <1>     add edx, eax
  1346                              <1>     return
    13                              <2> %%_ret:
    14 0000107B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1347                              <1> .sftHandlerErr:
  1348 0000107C F9                  <1>     stc
  1349                              <1>     return
    13                              <2> %%_ret:
    14 0000107D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1350                              <1> .sftHandlerTermCheck:
  1351 0000107E 3C20                <1>     cmp al, SPC
  1352                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001080 74(7D)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1353 00001082 3C09                <1>     cmp al, TAB
  1354                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001084 74(7D)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1355 00001086 3C0D                <1>     cmp al, CR
  1356                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001088 74(7D)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1357 0000108A 3C0A                <1>     cmp al, LF
  1358                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000108C 74(7D)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1359                              <1>     return
    13                              <2> %%_ret:
    14 0000108E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1360                              <1> .lastdriveHandler:
  1361 0000108F 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1362 00001093 4881C60A000000      <1>     add rsi, 10  ;Go past LASTDRIVE=
  1363 0000109A AC                  <1>     lodsb   ;Get this char
  1364 0000109B 0FB6C0              <1>     movzx eax, al   ;Zero extend to eax
  1365 0000109E 50                  <1>     push rax    ;Push on stack
  1366 0000109F B813120000          <1>     mov eax, 1213h  ;Uppercase the char
  1367 000010A4 CD4F                <1>     int 4Fh
  1368 000010A6 5B                  <1>     pop rbx
  1369 000010A7 3C5A                <1>     cmp al, "Z"
  1370 000010A9 77D1                <1>     ja .sftHandlerErr
  1371 000010AB 3C41                <1>     cmp al, "A"
  1372 000010AD 72CD                <1>     jb .sftHandlerErr
  1373 000010AF 803E0D              <1>     cmp byte [rsi], CR
  1374 000010B2 740F                <1>     je .ldProceed
  1375 000010B4 803E0A              <1>     cmp byte [rsi], LF
  1376 000010B7 740A                <1>     je .ldProceed
  1377 000010B9 803E09              <1>     cmp byte [rsi], TAB
  1378 000010BC 7405                <1>     je .ldProceed
  1379 000010BE 803E20              <1>     cmp byte [rsi], SPC
  1380 000010C1 75B9                <1>     jne .sftHandlerErr
  1381                              <1> .ldProceed:
  1382 000010C3 2C41                <1>     sub al, "A" ;Convert into a number
  1383 000010C5 0FB6C0              <1>     movzx eax, al   ;Zero extend in case DOS rets something dumb in upper bits
  1384 000010C8 BA05000000          <1>     mov edx, lastDriveDeflt
  1385 000010CD 3D05000000          <1>     cmp eax, lastDriveDeflt
  1386 000010D2 0F42C2              <1>     cmovb eax, edx
  1387 000010D5 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
  1388 000010D9 F8                  <1>     clc
  1389                              <1>     return
    13                              <2> %%_ret:
    14 000010DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1390                              <1> .ldBad:
  1391 000010DB F9                  <1>     stc
  1392                              <1>     return
    13                              <2> %%_ret:
    14 000010DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1393                              <1> .shellHandler:
  1394                              <1>     return
    13                              <2> %%_ret:
    14 000010DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1395                              <1> .stacksHandler:
  1396                              <1>     return
    13                              <2> %%_ret:
    14 000010DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1397                              <1> .drivParm:
  1398                              <1>     return
    13                              <2> %%_ret:
    14 000010DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1399                              <1> 
  1400                              <1> .cfgExit:
  1401 000010E0 488B5DB8            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle] ;Get the handle back
  1402 000010E4 B83E000000          <1>     mov eax, 3eh    ;Close the handle
  1403 000010E9 CD41                <1>     int 41h ;bx already has the handle
  1404                              <1> ;------------------------------------------------;
  1405                              <1> ;   Setup Final Data Areas With Overrides from   ;
  1406                              <1> ;                  CONFIG.SYS                    ;
  1407                              <1> ;------------------------------------------------;
  1408                              <1> ;Add additional buffers. Start from tmpBufHdr
  1409                              <1> ;Add additional SFT entries. By default, 1 new SFT header, with 15 SFT entries
  1410                              <1> ;Add additional FCBS.
  1411                              <1> ;Create a larger CDS if needed.
  1412                              <1> noCfg:
  1413                              <1> ;Start with buffers:
  1414 000010EB 488B4DF8            <1>     mov rcx, qword [rbp - cfgFrame.newBuffers]    ;Get new buffers size
  1415 000010EF 64880C25[7FC00300]  <1>     mov byte fs:[numBuffers], cl    ;Store this value in var
  1416                              <1>     ;Now do the allocation at rdi. Each buffer = maxSectorSize + bufferHdr_size
  1417 000010F7 640FB71C25-         <1>     movzx ebx, word fs:[maxBytesSec]    ;Get buffer sector size
  1417 000010FC [61C00300]          <1>
  1418 00001100 81C330000000        <1>     add ebx, bufferHdr_size ;rbx has the size to add
  1419                              <1>     ;Each buffer has no flags, drive number must be -1
  1420 00001106 488B7DA8            <1>     mov rdi, qword [rbp - cfgFrame.endPtr]  ;Get current allocation end pointer
  1421 0000110A 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Reset the var here
  1421 0000110F [63C00300]          <1>
  1422 00001113 4889FE              <1>     mov rsi, rdi    ;Points rsi to first new buffer space
  1423 00001116 31C0                <1>     xor eax, eax    ;Use for sanitising buffer headers
  1424 00001118 67E325              <1>     jecxz .lastBuffer
  1425                              <1> .bufferLoop:
  1426 0000111B 4801DF              <1>     add rdi, rbx    ;Goto next buffer space
  1427 0000111E 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Point to next buffer
  1428 00001121 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1429 00001127 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1430 0000112B 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1431 0000112E 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1432 00001131 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1433 00001135 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
  1434 00001139 4889FE              <1>     mov rsi, rdi    ;Move rsi to next buffer position
  1435 0000113C FFC9                <1>     dec ecx
  1436 0000113E 75DB                <1>     jnz .bufferLoop
  1437                              <1> .lastBuffer:
  1438 00001140 4801DF              <1>     add rdi, rbx    ;Goto past the last buffer
  1439 00001143 48C706FFFFFFFF      <1>     mov qword [rsi + bufferHdr.nextBufPtr], -1 ;Point to no buffer
  1440 0000114A 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1441 00001150 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1442 00001154 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1443 00001157 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1444 0000115A 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1445 0000115E 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
  1446 00001162 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1447                              <1> 
  1448                              <1> ;Now build a new SFT header for the number of files specified by user
  1449 00001166 488B4DF0            <1>     mov rcx, qword [rbp - cfgFrame.newSFTVal]
  1450 0000116A 81F905000000        <1>     cmp ecx, 5  ;If we are not adding anything, skip building SFT
  1451 00001170 7430                <1>     je .skipSFT
  1452 00001172 64488B3425-         <1>     mov rsi, qword fs:[sftHeadPtr]  ;Get the current only SFT head pointer
  1452 00001177 [49C00300]          <1>
  1453 0000117B 48893E              <1>     mov qword [rsi + sfth.qNextSFTPtr], rdi ;Move rdi as new SFT pointer
  1454 0000117E 662B4E08            <1>     sub cx, word [rsi + sfth.wNumFiles] ;Remove the number of files we already have
  1455 00001182 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move remaining files here
  1456 00001186 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;Last table in chain
  1457 0000118D 4881C70A000000      <1>     add rdi, sfth_size  ;Goto sft area, now need to compute size
  1458 00001194 B84F000000          <1>     mov eax, sft_size
  1459 00001199 F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
  1460 0000119B 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
  1461 0000119E 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1462                              <1> .skipSFT:
  1463                              <1> ;FCBS at rdi
  1464 000011A2 6448893C25-         <1>     mov qword fs:[fcbsHeadPtr], rdi ;Setup the fcbs var here
  1464 000011A7 [73C00300]          <1>
  1465 000011AB 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;No more FCBS headers for now
  1466 000011B2 488B4DE8            <1>     mov rcx, qword [rbp - cfgFrame.newFCBSVal]
  1467 000011B6 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move this value here
  1468 000011BA B84F000000          <1>     mov eax, sft_size
  1469 000011BF F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
  1470 000011C1 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
  1471 000011C4 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1472 000011C8 488B4DE0            <1>     mov rcx, qword [rbp - cfgFrame.newProtFCBSVal] ;Get number of safe FCBs
  1473 000011CC 6466890C25-         <1>     mov word fs:[numSafeSFCB], cx   ;And save that there
  1473 000011D1 [7BC00300]          <1>
  1474                              <1> ;And CDS now
  1475 000011D5 488B4DD8            <1>     mov rcx, qword [rbp - cfgFrame.newLastdrive]
  1476 000011D9 64880C25[7EC00300]  <1>     mov byte fs:[lastdrvNum], cl ;Save this value
  1477 000011E1 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi  ;Point cdsHeadPtr here
  1477 000011E6 [6BC00300]          <1>
  1478 000011EA E839F6FFFF          <1>     call makeCDSArray
  1479 000011EF 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1480                              <1> 
  1481                              <1> ;Computation of new space is complete, now work out how many bytes this is
  1482 000011F3 4889EC              <1>     mov rsp, rbp    ;Return stack pointer to original position
  1483 000011F6 5D                  <1>     pop rbp
  1484 000011F7 488D9D[10000000]    <1>     lea rbx, qword [rbp + dosDynamicArea]
  1485 000011FE 4829DF              <1>     sub rdi, rbx    ;Gives difference now
  1486 00001201 678D5F11            <1>     lea ebx, dword [edi + 11h]  ;Add 11 to round up a paragraph
  1487 00001205 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
  1488                              <1> ;Resize DOS allocation before loading COMMAND.COM
  1489 00001208 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
  1489 0000120D [39C00300]          <1>
  1490 00001211 4981C010000000      <1>     add r8, mcb.program
  1491 00001218 B44A                <1>     mov ah, 4Ah
  1492 0000121A CD41                <1>     int 41h
  1493                              <1> ;Now we close all five default handles and open AUX, CON and PRN.
  1494 0000121C 644C8B0425-         <1>     mov r8, qword fs:[currentPSP]
  1494 00001221 [14C40300]          <1>
  1495 00001225 31DB                <1>     xor ebx, ebx
  1496                              <1> closeHandlesLoop:
  1497 00001227 B8003E0000          <1>     mov eax, 3e00h  ;Close
  1498 0000122C CD41                <1>     int 41h
  1499 0000122E FFC3                <1>     inc ebx ;Goto next handle
  1500 00001230 81FB06000000        <1>     cmp ebx, 6
  1501 00001236 75EF                <1>     jne closeHandlesLoop
  1502 00001238 488D1557010000      <1>     lea rdx, auxName
  1503 0000123F B8023D0000          <1>     mov eax, 3D02h   ;Open read/write
  1504 00001244 CD41                <1>     int 41h
  1505 00001246 89C3                <1>     mov ebx, eax
  1506 00001248 B903000000          <1>     mov ecx, 3  ;
  1507 0000124D B800460000          <1>     mov eax, 4600h  ;DUP2
  1508 00001252 CD41                <1>     int 41h
  1509 00001254 B8003E0000          <1>     mov eax, 3e00h
  1510 00001259 CD41                <1>     int 41h ;Close the original handle
  1511 0000125B B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
  1512 00001260 488D152B010000      <1>     lea rdx, conName
  1513 00001267 CD41                <1>     int 41h
  1514 00001269 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
  1515 0000126B B800450000          <1>     mov eax, 4500h  ;DUP
  1516 00001270 CD41                <1>     int 41h
  1517 00001272 B800450000          <1>     mov eax, 4500h  ;DUP
  1518 00001277 CD41                <1>     int 41h
  1519 00001279 488D151A010000      <1>     lea rdx, prnName
  1520 00001280 B8023D0000          <1>     mov eax, 3D02h
  1521 00001285 CD41                <1>     int 41h       ;Open file
  1522                              <1> 
  1523                              <1>     
  1524                              <1>     %if DEBUG && ALLOCTEST
  1525                              <1> ;Test Allocation, Growth and Deallocation
  1526                              <1>     mov r15, qword fs:[currentPSP]
  1527                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
  1528                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
  1529                              <1>     mov ah, 48h ;Allocate
  1530                              <1>     int 41h
  1531                              <1> 
  1532                              <1>     mov byte [rax - 10h], 0 ;Trash chain
  1533                              <1>     mov r8, rax ;Move the pointer to r8
  1534                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
  1535                              <1>     mov ah, 4Ah
  1536                              <1>     int 41h
  1537                              <1> 
  1538                              <1>     mov ah, 49h ;Free r8
  1539                              <1>     int 41h
  1540                              <1>     mov qword fs:[currentPSP], r15
  1541                              <1>     %endif
  1542                              <1> 
  1543                              <1>     %if ENDSTATUS
  1544                              <1> debugFinal:
  1545                              <1>     ;Print system state
  1546                              <1>     push rbp    ;Only rbp really matters here
  1547                              <1>     mov r8, rbp
  1548                              <1> 
  1549                              <1>     lea rbp, .msg2
  1550                              <1>     lea r9, qword [r8 + debPrintNullString]
  1551                              <1>     call r9
  1552                              <1> 
  1553                              <1>     lea rbx, qword [.msg + 15]
  1554                              <1>     mov rax, qword fs:[biosUBase]
  1555                              <1> 
  1556                              <1>     lea r9, qword [r8 + overlayQword]
  1557                              <1>     call r9
  1558                              <1> 
  1559                              <1>     add rbx, 19+8
  1560                              <1>     mov rax, qword fs:[dosSegPtr]
  1561                              <1>     call r9
  1562                              <1> 
  1563                              <1>     add rbx, 19+8
  1564                              <1>     mov rax, qword fs:[mcbChainPtr]
  1565                              <1>     call r9
  1566                              <1> 
  1567                              <1>     add rbx, 20+8
  1568                              <1>     lea r9, qword [r8 + overlayDword]
  1569                              <1>     mov eax, dword fs:[loProtMem]
  1570                              <1>     call r9
  1571                              <1> 
  1572                              <1>     add rbx, 10+8
  1573                              <1>     mov eax, dword fs:[hiProtMem]
  1574                              <1>     call r9
  1575                              <1> 
  1576                              <1>     add rbx, 10+8
  1577                              <1>     mov rax, qword fs:[longMem]
  1578                              <1>     lea r9, qword [r8 + overlayQword]
  1579                              <1>     call r9
  1580                              <1> 
  1581                              <1>     add rbx, 19+8
  1582                              <1>     mov rax, qword fs:[dpbHeadPtr]
  1583                              <1>     call r9
  1584                              <1> 
  1585                              <1>     add rbx, 19+8
  1586                              <1>     mov rax, qword fs:[sftHeadPtr]
  1587                              <1>     call r9
  1588                              <1> 
  1589                              <1>     add rbx, 19+8
  1590                              <1>     mov rax, qword fs:[bufHeadPtr]
  1591                              <1>     call r9
  1592                              <1> 
  1593                              <1>     add rbx, 19+8
  1594                              <1>     mov rax, qword fs:[cdsHeadPtr]
  1595                              <1>     call r9
  1596                              <1> 
  1597                              <1>     lea r9, qword [r8 + overlayByte]
  1598                              <1> 
  1599                              <1>     add rbx, 25+19
  1600                              <1>     movzx rax, byte fs:[numPhysVol]
  1601                              <1>     call r9
  1602                              <1> 
  1603                              <1>     add rbx, 30
  1604                              <1>     movzx rax, byte fs:[numFixDrv]
  1605                              <1>     call r9
  1606                              <1> 
  1607                              <1>     add rbx, 30
  1608                              <1>     movzx rax, byte fs:[numRemDrv]
  1609                              <1>     call r9
  1610                              <1> 
  1611                              <1>     add rbx, 16
  1612                              <1>     movzx rax, byte fs:[bootDrive]
  1613                              <1>     add al, "A"
  1614                              <1>     mov byte [rbx], al
  1615                              <1> 
  1616                              <1>     lea rbp, .msg
  1617                              <1>     lea r9, qword [r8 + debPrintNullString]
  1618                              <1>     call r9
  1619                              <1>     pop rbp
  1620                              <1>     jmp l1
  1621                              <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
  1622                              <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1623                              <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
  1624                              <1>         db "Arena1: FFFFFFFFh ",
  1625                              <1>         db "Arena2: FFFFFFFFh ",
  1626                              <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1627                              <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1628                              <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1629                              <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1630                              <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1631                              <1>         db "Number of Logical Drives FFh",0Ah,0Dh
  1632                              <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
  1633                              <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
  1634                              <1>         db "Boot drive Z:",0Ah,0Dh
  1635                              <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
  1636                              <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
  1637                              <1>     %endif
  1638                              <1> l1:
  1639                              <1>     ;Load COMMAND.COM
  1640                              <1>     ;Get currentPSP ptr
  1641 00001287 B462                <1>     mov ah, 62h ;Get current PSP ptr in rdx
  1642 00001289 CD41                <1>     int 41h
  1643 0000128B B419                <1>     mov ah, 19h ;Get current Drive letter in al
  1644 0000128D CD41                <1>     int 41h
  1645 0000128F 0441                <1>     add al, "A"
  1646 00001291 880512010000        <1>     mov byte [cmdLine], al  ;Store drive letter at start of command line
  1647 00001297 488D1D1A010000      <1>     lea rbx, cmdBlock
  1648 0000129E 488D425C            <1>     lea rax, qword [rdx + psp.fcb1]
  1649 000012A2 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1650 000012A6 488D426C            <1>     lea rax, qword [rdx + psp.fcb2]
  1651 000012AA 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1652 000012AE 488D15F4000000      <1>     lea rdx, cmdLine
  1653 000012B5 48895308            <1>     mov qword [rbx + execProg.pCmdLine], rdx    ;Store command line here
  1654 000012B9 B8004B0000          <1>     mov eax, 4B00h  ;Exec Prog
  1655 000012BE CD41                <1>     int 41h
  1656 000012C0 488D15A6000000      <1>     lea rdx, badCom
  1657 000012C7 B409                <1>     mov ah, 09h ;Print message
  1658 000012C9 CD41                <1>     int 41h
  1659 000012CB E92A000000          <1>     jmp errorInit.ei0
  1660                              <1>     
  1661                              <1> ;--------------------------------
  1662                              <1> ;       PROCS FOR SYSINIT       :
  1663                              <1> ;--------------------------------
  1664                              <1> adjustDrvHdr:
  1665                              <1> ;Input: rsi = Effective address of driver in DOS segment
  1666                              <1> ;       rbp = Ptr to the start of the DOS segment
  1667                              <1> ;Output: rsi = EA of next header in DOS segment
  1668 000012D0 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
  1669 000012D4 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
  1670 000012D8 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
  1671 000012DF 740A                <1>     je .exit
  1672 000012E1 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
  1673 000012E4 4881C622000000      <1>     add rsi, drvHdr_size
  1674                              <1> .exit:
  1675 000012EB C3                  <1>     ret
  1676                              <1> errorInit:
  1677                              <1> ;If a critical error occurs during sysinit, fail through here
  1678                              <1> ;Int 42h, 43h and 44h point here during sysinit
  1679 000012EC 488D2D49000000      <1>     lea rbp, hltmsg
  1680 000012F3 B804130000          <1>     mov eax, 1304h
  1681 000012F8 CD30                <1>     int 30h
  1682                              <1>     ;cli ;Clear interrupts
  1683                              <1>     ;mov al, -1
  1684                              <1>     ;mov dx, 0A1h    ;PIC2 data
  1685                              <1>     ;out dx, al      ;Mask all lines
  1686                              <1>     ;mov dx, 21h     ;PIC1 data
  1687                              <1>     ;out dx, al      ;Mask all lines
  1688                              <1> .ei0:
  1689 000012FA F4                  <1>     hlt
  1690 000012FB F390                <1>     pause
  1691 000012FD EBFB                <1>     jmp short .ei0
  1692                              <1> noCmdCom:
  1693 000012FF 488D1567000000      <1>     lea rdx, badCom
  1694 00001306 B409                <1>     mov ah, 09h
  1695 00001308 CD41                <1>     int 41h
  1696 0000130A EBEE                <1>     jmp short errorInit.ei0
  1697                              <1> ;--------------------------------
  1698                              <1> ;       DATA FOR SYSINIT        :
  1699                              <1> ;--------------------------------
  1700 0000130C 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
  1700 00001315 5343502F444F532E2E- <1>
  1700 0000131E 2E0A0D24            <1>
  1701 00001322 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
  1701 0000132B 6C6F636174696F6E20- <1>
  1701 00001334 4572726F720A0D00    <1>
  1702 0000133C 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
  1702 00001345 7469616C6973696E67- <1>
  1702 0000134E 20534350444F532E53- <1>
  1702 00001357 59532E205379737465- <1>
  1702 00001360 6D2068616C74696E67- <1>
  1702 00001369 2E2E2E00            <1>
  1703 0000136D 426164206F72206D69- <1> badCom  db "Bad or missing Command interpreter",0Ah,0Dh,"$"
  1703 00001376 7373696E6720436F6D- <1>
  1703 0000137F 6D616E6420696E7465- <1>
  1703 00001388 727072657465720A0D- <1>
  1703 00001391 24                  <1>
  1704 00001392 434F4E00            <1> conName db "CON",0
  1705 00001396 41555800            <1> auxName db "AUX",0
  1706 0000139A 50524E00            <1> prnName db "PRN",0
  1707                              <1> 
  1708 0000139E 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
  1708 000013A7 5300                <1>
  1709 000013A9 5F3A5C434F4D4D414E- <1> cmdLine db "_:\COMMAND.COM",0
  1709 000013B2 442E434F4D00        <1>
  1710                              <1> cmdBlock:
  1711                              <1>     istruc execProg
  1712 000013B8 0000000000000000    <1>     at execProg.pEnv,       dq 0    ;Keep at 0 to "copy" DOS's environment ptr
  1713 000013C0 0000000000000000    <1>     at execProg.pCmdLine,   dq 0
  1714 000013C8 0000000000000000    <1>     at execProg.pfcb1,      dq 0    ;Set to DOS's fcb 1 and 2
  1715 000013D0 0000000000000000    <1>     at execProg.pfcb2,      dq 0
  1716                              <1>     iend
  1717                              <1> exceptData:
  1718 000013D8 [175E000000000000]  <1>     dq i0
  1719 000013E0 [1E5E000000000000]  <1>     dq i1
  1720 000013E8 [285E000000000000]  <1>     dq i2
  1721 000013F0 [325E000000000000]  <1>     dq i3
  1722 000013F8 [3C5E000000000000]  <1>     dq i4
  1723 00001400 [465E000000000000]  <1>     dq i5
  1724 00001408 [4D5E000000000000]  <1>     dq i6
  1725 00001410 [545E000000000000]  <1>     dq i7
  1726 00001418 [5B5E000000000000]  <1>     dq i8
  1727 00001420 [625E000000000000]  <1>     dq i9
  1728 00001428 [695E000000000000]  <1>     dq i10
  1729 00001430 [705E000000000000]  <1>     dq i11
  1730 00001438 [775E000000000000]  <1>     dq i12
  1731 00001440 [7E5E000000000000]  <1>     dq i13
  1732 00001448 [855E000000000000]  <1>     dq i14
  1733 00001450 [8C5E000000000000]  <1>     dq i15
  1734 00001458 [935E000000000000]  <1>     dq i16
  1735 00001460 [9A5E000000000000]  <1>     dq i17
  1736 00001468 [A15E000000000000]  <1>     dq i18
  1737 00001470 [A85E000000000000]  <1>     dq i19
  1738 00001478 [AF5E000000000000]  <1>     dq i20
  1739 00001480 [B65E000000000000]  <1>     dq i21
  1740                              <1> 
  1741                              <1> intData:
  1742 00001488 [A852000000000000]  <1>     dq terminateProcess ;Int 40h
  1743 00001490 [4A69000000000000]  <1>     dq functionDispatch ;Int 41h
  1744 00001498 [EC12000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
  1745 000014A0 [A26A000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
  1746 000014A8 [4B62000000000000]  <1>     dq dosDefCritErrHdlr 
  1747 000014B0 [1B63000000000000]  <1>     dq absDiskRead      ;Int 45h
  1748 000014B8 [FC62000000000000]  <1>     dq absDiskWrite     ;Int 46h
  1749 000014C0 [AF52000000000000]  <1>     dq terminateRes     ;Int 47h
  1750 000014C8 [A26A000000000000]  <1>     dq defaultIretq     ;Int 48h
  1751 000014D0 [A26A000000000000]  <1>     dq defaultIretq     ;Int 49h
  1752 000014D8 [A26A000000000000]  <1>     dq defaultIretq     ;Int 4Ah
  1753 000014E0 [A26A000000000000]  <1>     dq defaultIretq     ;Int 4Bh
  1754 000014E8 [A26A000000000000]  <1>     dq defaultIretq     ;Int 4Ch
  1755 000014F0 [A26A000000000000]  <1>     dq defaultIretq     ;Int 4Dh
  1756 000014F8 [A26A000000000000]  <1>     dq defaultIretq     ;Int 4Eh
  1757 00001500 [8371000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
  1758                              <1> nData:
  1759 00001508 [3173000000000000]  <1>     dq conHdr
  1760 00001510 0480                <1>     dw 08004h
  1761 00001512 [D974000000000000]  <1>     dq nulStrat
  1762 0000151A [DF74000000000000]  <1>     dq nulIntr
  1763 00001522 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1764                              <1> 
  1765                              <1> diskInit:
  1766                              <1>     ;We create a function to deal with BPB parsing etc
  1767                              <1>     ;Start with the first primary partition on each hard disk (until max)
  1768                              <1>     ;   They dont have to be bootable
  1769                              <1>     ;Then go back and look for other partitions partitions. 
  1770                              <1>     ;   Add each other primary or logical ptn (until max)
  1771                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
  1772                              <1>     ;Use r8 as device counter
  1773                              <1>     ;Use r15 as the pointer to the next free BPB entry
  1774                              <1>     ;First set up the two default BPB's if no removable drives
  1775 0000152A 4C8DBD[E37D0000]    <1>     lea r15, [rbp + msdDriver.msdBPBblks]    ;Point to the BPB storage place
  1776 00001531 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
  1776 00001539 00                  <1>
  1777 0000153A 0F8480000000        <1>     jz .remInit ;No? Go to removables
  1778 00001540 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
  1778 00001549 00                  <1>
  1779 0000154A B280                <1>     mov dl, 80h ;Start with HDD 0
  1780                              <1> .primary:
  1781 0000154C 64803C25[7DC00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1781 00001554 03                  <1>
  1782 00001555 7469                <1>     je .remInit
  1783 00001557 31C9                <1>     xor ecx, ecx    ;Sector 0
  1784 00001559 E8EC000000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
  1785 0000155E 724F                <1>     jc .primaryEpilog
  1786                              <1>     ;Here, check MBR or BPB
  1787 00001560 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
  1788 00001569 7544                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
  1789                              <1>     ;Now check if BPB or MBR
  1790 0000156B 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1791 0000156D 8A6302              <1>     mov ah, byte [rbx + 2]
  1792 00001570 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1793 00001574 7439                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
  1794                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
  1795                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
  1796 00001576 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
  1797 0000157D B104                <1>     mov cl, 4
  1798                              <1> .checkPrimary:
  1799 0000157F 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
  1800 00001582 3C01                <1>     cmp al, 01
  1801 00001584 7421                <1>     je .primaryFound
  1802 00001586 3C04                <1>     cmp al, 04
  1803 00001588 741D                <1>     je .primaryFound
  1804 0000158A 3C06                <1>     cmp al, 06
  1805 0000158C 7419                <1>     je .primaryFound
  1806 0000158E 3C0B                <1>     cmp al, 0Bh
  1807 00001590 7415                <1>     je .primaryFound
  1808 00001592 3C0C                <1>     cmp al, 0Ch
  1809 00001594 7411                <1>     je .primaryFound
  1810 00001596 3C0E                <1>     cmp al, 0Eh
  1811 00001598 740D                <1>     je .primaryFound
  1812 0000159A 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1813 000015A1 FEC9                <1>     dec cl
  1814 000015A3 740A                <1>     jz .primaryEpilog
  1815 000015A5 EBD8                <1>     jmp short .checkPrimary
  1816                              <1> .primaryFound:
  1817                              <1>     ;Copy the first sector of this partition into memory
  1818 000015A7 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1819 000015AA E8A9000000          <1>     call .readSectorAndAddDataToTables
  1820                              <1> .primaryEpilog:
  1821 000015AF FEC2                <1>     inc dl  ;Goto next BIOS drive
  1822 000015B1 88D6                <1>     mov dh, dl
  1823 000015B3 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1824 000015B6 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1825 000015BE 758C                <1>     jne .primary    ;Whilst we have fewer, go back
  1826                              <1> .extended:
  1827                              <1> ;We have gone through all the devices once
  1828                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1829                              <1>     ;je .remInit ;If yes, get removable devices
  1830                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1831                              <1>     ;xor ecx, ecx    ;Get MBR back
  1832                              <1>     ;call .initReadSector
  1833                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1834                              <1> .remInit:
  1835                              <1> ;Start by linking the default BPB's in the pointers table in the event that
  1836                              <1> ; for some reason the removable drives stop working or dont exist.
  1837 000015C0 488DB5[3B800000]    <1>     lea rsi, qword [rbp + msdDriver.dfltBPB]  ;Point to the default BPB
  1838 000015C7 488DBD[BB7D0000]    <1>     lea rdi, qword [rbp + msdDriver.msdBPBTbl]  ;Point to the BPB ptr table
  1839 000015CE 488937              <1>     mov qword [rdi], rsi    ;Store the pointer in the first two entries
  1840 000015D1 48897708            <1>     mov qword [rdi + 8], rsi
  1841                              <1> ;This forces the hard drives to start at C:
  1842 000015D5 4D89C1              <1>     mov r9, r8  ;Save number of next device after fixed drive in r9
  1843 000015D8 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1844 000015DA 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1845                              <1>     ;rdi points to the space for the subsequent bpb's
  1846 000015DD 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 0  ;Just skip removable init if no rem drives
  1846 000015E5 00                  <1>
  1847 000015E6 750A                <1>     jnz .removables
  1848 000015E8 64800425[7DC00300]- <1>     add byte fs:[numPhysVol], 2 ;Pretend we have two more drives (A: and B:)
  1848 000015F0 02                  <1>
  1849 000015F1 C3                  <1>     ret ;and return!
  1850                              <1> .removables:
  1851 000015F2 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1852 000015F4 E85F000000          <1>     call .readSectorAndAddDataToTables
  1853                              <1> .removableEpilogue:
  1854 000015F9 FEC2                <1>     inc dl  ;Goto next BIOS device now
  1855 000015FB 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1856 00001603 7412                <1>     je .end
  1857 00001605 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1858 0000160C 7503                <1>     jne .re0
  1859 0000160E 4588C8              <1>     mov r8b, r9b    ;Return to this drive number
  1860                              <1> .re0:
  1861 00001611 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1862 00001615 72DB                <1>     jb .removables
  1863                              <1> .end:
  1864 00001617 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1864 0000161F 01                  <1>
  1865 00001620 7401                <1>     je .singleRemDev
  1866 00001622 C3                  <1>     ret
  1867                              <1> .singleRemDev:
  1868                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1869 00001623 488D9D[B17D0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1870 0000162A 8A95[B17D0000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1871 00001630 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1872 00001633 488D9D[BB7D0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1873 0000163A 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1874 0000163D 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1875 00001641 64FE0425[7DC00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1876 00001649 C3                  <1>     ret
  1877                              <1> .initReadSector:
  1878                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1879 0000164A B482                <1>     mov ah, 82h ;Read
  1880 0000164C B001                <1>     mov al, 1   ;One sector
  1881 0000164E 488D9D[10030000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1882 00001655 CD33                <1>     int 33h
  1883 00001657 C3                  <1>     ret
  1884                              <1> 
  1885                              <1> .readSectorAndAddDataToTables:
  1886                              <1> ;Input:
  1887                              <1> ;ecx = Sector number to read
  1888                              <1> ;r15 -> bpb array entry for the BPB
  1889                              <1> ;r8 = Logical Drive number (offset into arrays)
  1890 00001658 E8EDFFFFFF          <1>     call .initReadSector
  1891                              <1>     retc   ;Goto next device
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000165D 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000165F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1892                              <1>     ;Now verify this is a BPB
  1893 00001660 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1894 00001662 8A6302              <1>     mov ah, byte [rbx + 2]
  1895 00001665 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1896                              <1>     retne   ;If not, skip
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001669 75(5F)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1897                              <1>     ;Now copy data to internal tables
  1898 0000166B 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1899 0000166E 51                  <1>     push rcx
  1900 0000166F B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1901 00001674 4C89FF              <1>     mov rdi, r15
  1902 00001677 F348A5              <1>     rep movsq   ;Copy the BPB
  1903 0000167A 59                  <1>     pop rcx
  1904                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1905 0000167B 4A8D9C05[B17D0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1906                              <1>     ;Add device count to rbx to point to correct entry
  1907 00001683 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1908 00001685 4A8D9CC5[BB7D0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1909 0000168D 4C893B              <1>     mov qword [rbx], r15
  1910 00001690 49FFC0              <1>     inc r8  ;Goto next logical drive
  1911 00001693 64FE0425[7DC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1912 0000169B 4981C778000000      <1>     add r15, bpbEx_size  ;Goto next table entry
  1913                              <1>     return
    13                              <2> %%_ret:
    14 000016A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    16                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    17                                  %include "./Source/BSS/dosSeg.asm"
     1                              <1> ;This file contains the main DOS data segment
     2                              <1> dosAPT: ;Additional Page tables
     3 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
     4                              <1> dosDataArea:
     5 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
     6 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
     7 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
     8 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
     9 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    10 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    11 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    12 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    13                              <1> ;Above is the system stats
    14                              <1> ;Below is the DOS vars, DO NOT TOUCH FROM SHARE TO NUMJOINDRV
    15                              <1> ;Both below variables can be edited with Int 41h AX=440Bh
    16 0003C023 ????                <1>     validNetNam resw 1    ;Flag if machinename valid, deflt no=0
    17 0003C025 ????                <1>     shareCount  resw 1    ;Share Retry Count, number of repeats before fail.
    18 0003C027 ????                <1>     shareDelay  resw 1    ;Share Delay, in multiples of ms. (TEMP, just loop)
    19 0003C029 ????????????????    <1>                 resq 1    ;Unused ptr for future, current disk buffer
    20 0003C031 ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    21                              <1>     ;   A value of 0 means no chars buffered.
    22 0003C039 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    23                              <1> sysVarsPtr:
    24 0003C041 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    25 0003C049 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    26 0003C051 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    27                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    28 0003C059 ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    29                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    30 0003C061 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    31 0003C063 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    32 0003C06B ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    33 0003C073 ????????????????    <1>     fcbsHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    34 0003C07B ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    35                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    36 0003C07D ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    37 0003C07E ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    38 0003C07F ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    39 0003C080 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    40 0003C0A2 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    41                              <1> ;Additional internal variables
    42 0003C0A3 ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    43                              <1> 
    44                              <1>     ;DLL Manager hook functions here
    45                              <1>     ;All DLLMGR hooks are 8 byte pointers and are new to the DOS kernel.
    46                              <1>     ;They allow for the installation of a DLL manager program, which hooks
    47                              <1>     ; these pointers, to point to their own subroutines in the DLLMGR prog.
    48                              <1>     ;These hooks are called from within EXEC, only for PE type executables
    49                              <1>     ; and from within EXIT. 
    50                              <1>     ;
    51                              <1>     ;In EXEC mode, modes 0 and 1 create a PSP for the task and thus the 
    52                              <1>     ; task is self standing and has a PSP as a Unique ID. 
    53                              <1>     ;If mode 3, this is an overlay EXE. This means it is not it's own task and 
    54                              <1>     ; is an extension of the parent task. In such a case, the DLL Manager must 
    55                              <1>     ; look at where the overlay is to be loaded (execFrame.pProgBase), and if 
    56                              <1>     ; there is already an overlay there, to remove it's functions from the 
    57                              <1>     ; registery, replacing them with the new overlay's functions. All overlay
    58                              <1>     ; exports must be flagged as belonging to the parent task PSP so that
    59                              <1>     ; on EXIT, they can be removed from the registry. 
    60                              <1>     ;
    61                              <1>     ;In EXIT, the PSP of the ending task must be taken
    62                              <1>     ; into consideration, as if the PSP isn't registered then the task ending
    63                              <1>     ; is a .COM file or an .EXE with no exports.
    64                              <1>     ;Furthermore, if register fails (due to memory or namespace constraints),
    65                              <1>     ; it must return CF=CY.
    66                              <1> dllHooks:
    67 0003C0A4 ????????????????    <1>     registerDLL     resq 1  ;Entered with rbp = execFrame
    68 0003C0AC ????????????????    <1>     unloadDLLHook   resq 1  ;
    69                              <1>     ;Share hook functions here
    70                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
    71                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
    72                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
    73                              <1> 
    74                              <1>     ;Note to programmer - Please adjust as necessary:
    75                              <1>     ;Functions which are nowhere called (yet) are noted as UNUSED in caps.
    76                              <1>     ;Those which are not meant to be used are noted as unused in lower case.
    77                              <1>     ;Those suffixed with a ? have their future in question.
    78                              <1>     ;Those suffixed with a / are done partially wrt MSDOS.
    79                              <1> 
    80                              <1>     ;SCPDOS has an optional handle, openFileCheck. This function can be used 
    81                              <1>     ; to see if there are any open handles. Its implementation is completely
    82                              <1>     ; optional, and an equivalent form of the function is provided for older
    83                              <1>     ; SHARE versions that might be ported that don't have a particular function.
    84                              <1>     ;This function is defined as follows:
    85                              <1>     ; Input: fname1Ptr -> Filename we want to see if there are any open records
    86                              <1>     ;                       for.
    87                              <1>     ; Output: CF=CY -> Handle not supported.
    88                              <1>     ;         CF=NC -> Handle supported. 
    89                              <1>     ;           ZF=ZE -> No Files open.
    90                              <1>     ;           ZF=NZ -> Some files are open.
    91                              <1> shareHooks:
    92                              <1>     ;markerShare resq 1  ;Marker Share hook
    93 0003C0B4 ????????????????    <1>     openFileCheck   resq 1  ;Check if share record for file exist       DONE
    94 0003C0BC ????????????????    <1>     openShare   resq 1  ;Share called on open.                          DONE 
    95 0003C0C4 ????????????????    <1>     closeShare  resq 1  ;Share called on close.                         DONE/
    96 0003C0CC ????????????????    <1>     closeCompShare  resq 1  ;Share to close all files for a machine.    DONE
    97 0003C0D4 ????????????????    <1>     closeTaskShare  resq 1  ;Share to close all files for a task.       DONE
    98 0003C0DC ????????????????    <1>     closeNameShare  resq 1  ;Share to close file by name.               DONE/
    99 0003C0E4 ????????????????    <1>     lockFileShare   resq 1  ;Share to lock file region.                 DONE
   100 0003C0EC ????????????????    <1>     unlockFileShare resq 1  ;Share to unlock file region.               DONE
   101 0003C0F4 ????????????????    <1>     checkFileLockShare  resq 1  ;Share to check file region locked.     DONE
   102 0003C0FC ????????????????    <1>     openFileListShare   resq 1  ;Share to get open file list entry.     DONE
   103 0003C104 ????????????????    <1>     updateFCBfromSFTShr resq 1  ;Share to update FCB from the SFT.      UNUSED?
   104 0003C10C ????????????????    <1>     fstClstOfFCBShare   resq 1  ;Share to get first cluster of FCB.     UNUSED?
   105 0003C114 ????????????????    <1>     closeDupFileShare   resq 1  ;Share to close file if dup for proc.   DONE
   106 0003C11C ????????????????    <1>     closeNewHdlShare    resq 1  ;Share to close hdls of rec opened file. DONE
   107 0003C124 ????????????????    <1>     updateDirShare      resq 1  ;Share to update dir info in SFT.       DONE 
   108                              <1> ;Create SFT header and corresponding array of five default sft entries
   109 0003C12C <res Ah>            <1>     firstSftHeader  resb sfth_size
   110 0003C136 <res 4Fh>           <1>     firstSft    resb sft_size
   111 0003C185 <res 4Fh>           <1>     secondSft   resb sft_size
   112 0003C1D4 <res 4Fh>           <1>     thirdSft    resb sft_size
   113 0003C223 <res 4Fh>           <1>     fourthSft   resb sft_size
   114 0003C272 <res 4Fh>           <1>     fifthSft    resb sft_size
   115                              <1> 
   116                              <1> ;Virtual CONsole Buffers
   117 0003C2C1 ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
   118                              <1>     ;Only incremented when CON device runs vCon
   119                              <1> vConBuf:    ;Proper buffer symbol
   120 0003C2C2 ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
   121 0003C2C3 <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
   122                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
   123 0003C343 <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
   124 0003C3C3 ??                  <1>     bufpad      resb 1     ;Used to pad with LF
   125                              <1> 
   126 0003C3C4 ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
   127 0003C3C5 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
   128 0003C3C6 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
   129 0003C3C7 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
   130                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   131                              <1> 
   132 0003C3C8 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
   133                              <1> ;Server stuff. Default to all zeros (blank)
   134 0003C3C9 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
   135                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   136 0003C3CA ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5E01h call
   137 0003C3CB <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5E01h) (set to SPC)    
   138                              <1> ;Swappable Data Area
   139 0003C3DB <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
   140 0003C3FB ??                  <1>                 resb 1  ;Alignment byte
   141                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   142 0003C3FC ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
   143 0003C3FD ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
   144 0003C3FE ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
   145 0003C3FF ??                  <1>     errorLocus  resb 1  ;Where the error took place  
   146 0003C400 ????                <1>     errorExCde  resw 1  ;Extended Error Code
   147 0003C402 ??                  <1>     errorAction resb 1  ;Suggested action for error  
   148 0003C403 ??                  <1>     errorClass  resb 1  ;Error Class
   149 0003C404 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
   150 0003C40C ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   151 0003C414 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   152                              <1> 
   153 0003C41C ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   154 0003C424 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   155                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   156                              <1>     ;Lower byte: User Specified
   157 0003C426 ??                  <1>     currentDrv  resb 1  ;Default drive x
   158 0003C427 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   159                              <1> ;SDA, needs to be replaced between processes
   160                              <1> sdaMainSwap:
   161 0003C428 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   162 0003C430 ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   163 0003C438 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   164 0003C43A ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   165 0003C442 ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   166 0003C44A ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   167 0003C452 ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   168 0003C454 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   169 0003C45C ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   170 0003C45D ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   171 0003C45E ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   172                              <1> 
   173 0003C45F ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   174 0003C467 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   175 0003C46F ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   176 0003C477 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   177 0003C47F ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   178                              <1> ;The below flag tells DOS to print ^C in the termination function
   179 0003C480 ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   180 0003C481 ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   181                              <1> ;Time stuff
   182                              <1> ;Read the below two as a word
   183 0003C482 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   184 0003C483 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   185 0003C484 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   186 0003C485 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   187 0003C487 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   188                              <1> 
   189 0003C488 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   190 0003C489 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   191 0003C48A ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   192                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   193                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   194                              <1> ; without forcing to re-build the whole primary request block.
   195                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   196                              <1> ; with secondary char output going through the secondary header
   197                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   198                              <1> ; for output)
   199                              <1> ;ioReqPkt is the largest possible packet
   200 0003C48B <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   201 0003C4B5 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   202                              <1>     altRet: ;Accessed as a qword
   203 0003C4DF <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   204 0003C509 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   205                              <1> ;Swappable Buffers
   206 0003C50A ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   207                              <1>     ;We add an additional byte to save ah too
   208 0003C510 ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   209 0003C512 <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   210 0003C592 <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   211 0003C612 ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   212 0003C61A ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   213 0003C622 ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   214                              <1> ;Misc bookkeeping flags and vars
   215 0003C623 <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal search block (fullsize unlike DOS)
   216 0003C64E <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   217 0003C66E <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need a tmp CDS
   218 0003C6C9 <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   219 0003C6D5 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards for rename
   220 0003C6E1 ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   221                              <1> 
   222 0003C6E9 ??                  <1>     volIncmpFCB resb 1  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   223 0003C6EA ??                  <1>     extFCBAttr  resb 1  ;Extended FCB file attribute
   224 0003C6EB ??                  <1>     extFCBFlag  resb 1  ;Set to -1 if Extended FCB
   225 0003C6EC ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   226 0003C6ED ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   227 0003C6EE ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   228 0003C6EF ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   229 0003C6F0 ??                  <1>     rwFlag      resb 1  ;00h=Read, -1=Write, read/write/share error reporting
   230 0003C6F1 ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   231 0003C6F2 ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   232                              <1> 
   233 0003C6F3 ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   234 0003C6F4 ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   235 0003C6F5 ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   236 0003C6F6 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlvl
   237 0003C6F7 ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   238 0003C6F8 ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   239 0003C6F9 ??                  <1>     workingDrv  resb 1  ;Working drive number, 0 based, from DPB
   240                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   241                              <1> workingDD:  ;Create a symbol for the working device driver too
   242 0003C6FA ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   243 0003C702 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   244 0003C70A ????????????????    <1>     workingFCB  resq 1  ;Ptr to the caller FCB for FCB function
   245                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   246                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   247 0003C712 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   248 0003C71A ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   249 0003C722 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   250 0003C72A ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   251 0003C72C ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   252 0003C72E ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   253                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   254                              <1> ; and 32 byte offset into the sector for directory
   255 0003C736 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   256                              <1> sectTfr:    ;Symbol to use this var to hold a counter on disk read/write ops 
   257                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   258 0003C73E ????                <1>     entry       resw 1  ;32 byte offset into a sector or #fats sectors/fat
   259                              <1> ;***************************************************|
   260                              <1> ; Needs to be set up before any file access         |
   261                              <1> ; These vars keep track of file access properties   |
   262                              <1> ;   and must be used only for such purposes.        |
   263                              <1> ;***************************************************|
   264 0003C740 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   265 0003C744 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   266                              <1> 
   267 0003C748 ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   268 0003C74C ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   269 0003C74D ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   270                              <1> 
   271 0003C755 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   272 0003C757 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   273                              <1> ;***************************************************|
   274 0003C75B ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   275 0003C75F ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   276 0003C763 ??                  <1>     fileGrowing resb 1  ;Flag to indicate the file is growing
   277 0003C764 ????????            <1>     bytesAppend resd 1  ;Number of bytes by which a file has been extended by
   278 0003C768 ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   279 0003C76C ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   280                              <1> ;Directory stuff
   281 0003C770 ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   282 0003C774 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   283 0003C778 ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   284 0003C77A ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   285                              <1> ;Error DPB 
   286 0003C77E ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary situations
   287 0003C786 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   288                              <1>     
   289 0003C787 <res 2Bh>           <1>     renameFFBlk resb ffBlock_size   ;Source file "find first" block
   290 0003C7B2 <res 20h>           <1>     renameDir   resb fatDirEntry_size   ;Build new file dir entry here
   291                              <1> ;Stacks and scratch SFT
   292 0003C7D2 ????????????        <1>     alignb  8
   293 0003C7D8 <res 528h>          <1>     critStack   resq 165
   294 0003CD00 ????????????????    <1>     critStakTop resq 1
   295                              <1> 
   296 0003CD08 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   297                              <1>     
   298 0003CD57 ??                  <1>     alignb  8
   299 0003CD58 <res 638h>          <1>     AuxStack    resq 199
   300 0003D390 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   301 0003D398 <res 638h>          <1>     DiskStack   resq 199
   302 0003D9D0 ????????????????    <1>     DiskStakTop resq 1
   303                              <1> 
   304 0003D9D8 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   305 0003D9D9 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls! 
   306                              <1> ;Putting this in SDA as multiple tasks can try to parse EXE's simultaneously
   307 0003D9DA <res 70h>           <1>     exeHdrSpace resb imageFileOptionalHeader_size   ;Use for parsing an EXE hdr
   308 0003DA4A <res 28h>           <1>     sectHdr     resb imageSectionHdr_size   ;Use to load one sctn hdr at a time
   309                              <1> ;Exception handler vars in SDA now 
   310 0003DA72 <res 10h>           <1>     byteBuffer  resb 16 ;Used by DOS exception handler to build strings
   311 0003DA82 ??                  <1>     haltDOS     resb 1  ;Set by DOS exception handler to indicate DOS will halt
   312                              <1>     sdaLen      equ     $ - sda 
   313                              <1>     sdaMSLen    equ     $ - sdaMainSwap
   314                              <1> 
   315                              <1> ;Additional variables NOT in the SDA
   316 0003DA83 ????????????????    <1>     serverDispTblPtr    resq 1  ;DO NOT MOVE! Used to find server dispatch tbl
   317 0003DA8B ??                  <1>     xActDrv     resb 1  ;0 based number of last drive to transact
   318 0003DA8C <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   319                              <1>     ;for saving the current header when quickly doing a second request
   320                              <1> 
   321 0003DAB6 ??                  <1>     lastDiskNum resb 1  ;Last drive that operated
   322 0003DAB7 ????                <1>     lastOpTime  resw 1  ;Packed Time of last successful disk operation
   323                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   324                              <1> inExtASCII:
   325 0003DAB9 ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   326 0003DABA ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   327                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   328                              <1>     ; copy of the date/time record
   329                              <1> 
   330                              <1>     dSegLen     equ     $
    18                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    19                                  %define currSegVBase section.resSeg.vstart
    20                                  %include "./Source/Data/staticData.asm"
     1                              <1> 
     2                              <1> ;-----------------------------------:
     3                              <1> ;       Static Data Variables       :
     4                              <1> ;-----------------------------------:
     5 00000000 00                  <1> dosMajor    db 00h      ;Version 0
     6 00000001 5F                  <1> dosMinor    db 95      ;.95
     7 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
     7 0000000B 535953              <1>
     8 0000000E 534350444F5320202E- <1> dosKernName db "SCPDOS  .SYS"
     8 00000017 535953              <1>
     9                              <1> ;-----------------------------------:
    10                              <1> ;        Static Data Tables         :
    11                              <1> ;-----------------------------------:
    12                              <1> ctryTbl:
    13                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
    14 0000001A 0100                <1>     dw 1            
    15 0000001C 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
    16 00000021 2C00                <1>     db ",",0
    17 00000023 2E00                <1>     db ".",0
    18 00000025 2D00                <1>     db "-",0
    19 00000027 3A00                <1>     db ":",0
    20 00000029 00                  <1>     db 0
    21 0000002A 02                  <1>     db 2 
    22 0000002B 00                  <1>     db 0 
    23 0000002C 0000000000000000    <1>     dq 0 
    24 00000034 2C00                <1>     db ",",0    
    25 00000036 000000000000000000- <1>     db 0,0,0,0,0,0,0,0,0,0
    25 0000003F 00                  <1>
    26                              <1> 
    27                              <1> ;IO Char table
    28                              <1> ;This table has Request header length, command code and error flags
    29                              <1> ; as a packed DWORD entry
    30                              <1> ioRqCmdErrTbl:
    31                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    32                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    33 00000040 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    34 00000044 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    35 00000048 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    36 0000004C 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    37 00000050 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    38 00000054 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    39                              <1> 
    40                              <1> 
    41                              <1> 
    42                              <1> ;Keyboard vCon static data that can be edited and replaced by a user if they
    43                              <1> ; wish to install their own custom logic.
    44 00000058 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    45 00000060 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    46 00000061 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    47                              <1> ;Extended ASCII keys with special meanings
    48 00000062 3B                  <1> extKeyTbl   db eF1
    49 00000063 5924                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    50 00000065 3C                  <1>             db eF2
    51 00000066 4B24                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    52 00000068 3D                  <1>             db eF3
    53 00000069 5224                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    54 0000006B 3E                  <1>             db eF4
    55 0000006C 8724                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    56 0000006E 3F                  <1>             db eF5
    57 0000006F CC24                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    58 00000071 40                  <1>             db eF6
    59 00000072 E224                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    60 00000074 41                  <1>             db eF7
    61 00000075 E924                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    62 00000077 4B                  <1>             db eCursL
    63 00000078 B023                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    64 0000007A 4D                  <1>             db eCursR
    65 0000007B 5924                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    66 0000007D 52                  <1>             db eIns
    67 0000007E F424                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    68 00000080 53                  <1>             db eDel
    69 00000081 FB24                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    70                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    71                              <1> 
    72                              <1> ;When counting the number of days, first compute the number of years since
    73                              <1> ; 1980 and your year. 
    74                              <1> ;Then, using the table below, find the number of leap years between 1980
    75                              <1> ; and (YourYear - 1). 
    76                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
    77                              <1> ; days since 01/01/1980 and 01/01/YourYear.
    78                              <1> ;
    79                              <1> ;Use the months table to get the number of days in a normal month as leap 
    80                              <1> ; years are added using the previous comment.
    81                              <1> 
    82                              <1> ;This table is the number of days in the month
    83                              <1> ;The function which updates the days in Feb writes the number to this table
    84                              <1> monthsTbl:  
    85 00000083 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    85 0000008C 1F1E1F              <1>
    86                              <1> 
    87                              <1> ;Error tables
    88                              <1> errXlatTbl:
    89                              <1> ;Each entry is n bytes long, defined as
    90                              <1> ; Byte 0      : DOS function number for which translation will occur
    91                              <1> ; Byte 1      : Length of the table entry - 2
    92                              <1> ; Bytes n - 3 : Acceptable Error codes
    93                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
    94                              <1> ;The table is terminated with a single -1 byte
    95                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
    96                              <1> ; only on entry to a disk function
    97 0000008F 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
    98 00000093 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
    99 00000098 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   100 0000009E 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   101 000000A2 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   102 000000A8 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   103 000000AF 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   104 000000B2 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   105 000000B6 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   106 000000BA 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   107 000000BF 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   108 000000C3 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   109 000000C9 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   110 000000D0 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   111 000000D4 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   112 000000D8 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   113 000000DB 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   114 000000DF 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   115 000000E3 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   116 000000E8 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   117 000000F0 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   118 000000F2 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   119 000000F7 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   120 000000FA 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   121 00000100 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   122 00000104 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   123 00000107 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   124 0000010D 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   125 00000114 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   126 0000011A 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   127 0000011E 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   128 00000122 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   129 00000127 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   130 0000012A FF                  <1>     db -1   ;End Of Table marker
   131                              <1> 
   132                              <1> 
   133                              <1> extErrTbl:
   134                              <1> ;This table contains the default values for how to respond
   135                              <1> ; to particular errors. Fields with -1 need to be filled in before
   136                              <1> ; setting variables using this table.
   137                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   138                              <1> ; Byte 0: Extended Error Code as a byte
   139                              <1> ; Byte 1: Error Class
   140                              <1> ; Byte 2: Error Suggested Action
   141                              <1> ; Byte 3: Error Locus
   142                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   143                              <1> ;
   144                              <1> ;Error 01: Invalid function number
   145 0000012B 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   146                              <1> ;Error 02: File not found
   147 0000012F 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   148                              <1> ;Error 03: Path not found
   149 00000133 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   150                              <1> ;Error 04: Too many open handles, and no handles are left
   151 00000137 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   152                              <1> ;Error 05: Access being denied
   153 0000013B 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   154                              <1> ;Error 06: Invalid File handle being provided
   155 0000013F 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   156                              <1> ;Error 07: MCB chain destroyed
   157 00000143 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   158                              <1> ;Error 08: No Memory remaining
   159 00000147 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   160                              <1> ;Error 09: Invalid MCB block Address
   161 0000014B 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   162                              <1> ;Error 0A: Bad Environment block
   163 0000014F 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   164                              <1> ;Error 0B: Data provided in a bad format
   165 00000153 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   166                              <1> ;Error 0C: Access Code Invalid
   167 00000157 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   168                              <1> ;Error 0D: Error due to Invalid Data provided
   169 0000015B 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   170                              <1> ;Error 0F: Error due to a bad drive letter being provided
   171 0000015F 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   172                              <1> ;Error 10: Error due to attempting to delete the CWD
   173 00000163 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   174                              <1> ;Error 11: Error due to a unknown device being used
   175 00000167 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   176                              <1> ;Error 12: No more file handles available
   177 0000016B 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   178                              <1> ;Error 50: Network request not supported
   179 0000016F 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   180                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   181 00000173 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   182                              <1> ;Error 21: File Locking Violation
   183 00000177 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   184                              <1> ;Error 54: Too many levels of redirection error
   185 0000017B 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   186                              <1> ;Error 56: Bad resource password provided
   187 0000017F 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   188                              <1> ;Error 52: Directory already exists
   189 00000183 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   190                              <1> ;Error 32: Network request not supported by DOS
   191 00000187 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   192                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   193 0000018B 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   194                              <1> ;Error 57: Bad parameter in request
   195 0000018F 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   196                              <1> ;Error 53: Fail was returned from Int 44h
   197 00000193 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   198                              <1> ;Error 24: Sharing Buffer Full
   199 00000197 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   200 0000019B FFFFFFFF            <1>     dd -1   ;End of table signature
   201                              <1> 
   202                              <1> badDirNameChar: ;This table needs to be replaced in other Codepages (i.e. Kanji)
   203 0000019F 000102030405060708- <1>     db 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
   203 000001A8 090A0B0C0D0E0F      <1>
   204 000001AF 101112131415161718- <1>     db 10h,11h,12h,13h,14h,15h,16h,17h,18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
   204 000001B8 191A1B1C1D1E1F      <1>
   205 000001BF 222A2B2C2E2F3A3B3C- <1>     db '"', "*", "+",",",".","/",":",";","<","=",">","?","[","\","]","|"
   205 000001C8 3D3E3F5B5C5D7C      <1>
   206                              <1> badDirNameCharL equ $ - badDirNameChar
   207                              <1> ;The chars * ? . \ / need to always be handled separately
   208                              <1> 
   209                              <1> extAsciiTbl:    ;This table needs to be replaced in other Codepages
   210 000001CF 809A45418E418F8045- <1>     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 45h, 45h, 45h, 49h, 49h, 49h
   210 000001D8 4545494949          <1>
   211 000001DD 8E8F9092924F994F55- <1>     db 8Eh, 8Fh, 90h, 92h, 92h, 4Fh, 99h, 4Fh, 55h, 55h, 59h, 99h, 9Ah, 9Bh
   211 000001E6 5559999A9B          <1>
   212 000001EB 9C9D9E9F41494F55A5- <1>     db 9Ch, 9Dh, 9Eh, 9Fh, 41h, 49h, 4Fh, 55h, 0A5h, 0A5h, 0A6h, 0A7h, 0A8h
   212 000001F4 A5A6A7A8            <1>
   213 000001F8 A9AAABACADAEAFB0B1- <1>     db 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h
   213 00000201 B2B3B4              <1>
   214 00000204 B5B6B7B8B9BABBBCBD- <1>     db 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h 
   214 0000020D BEBFC0              <1>
   215 00000210 C1C2C3C4C5C6C7C8C9- <1>     db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh
   215 00000219 CACBCC              <1>
   216 0000021C CDCECFD0D1D2D3D4D5- <1>     db 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h 
   216 00000225 D6D7D8              <1>
   217 00000228 D9DADBDCDDDEDFE0E1- <1>     db 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
   217 00000231 E2E3E4              <1>
   218 00000234 E5E6E7E8E9EAEBECED- <1>     db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h
   218 0000023D EEEFF0              <1>
   219 00000240 F1F2F3F4F5F6F7F8F9- <1>     db 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh
   219 00000249 FAFBFC              <1>
   220 0000024C FDFEFF              <1>     db 0FDh, 0FEh, 0FFh
   221                              <1> 
   222                              <1> asciiCharProperties:   ;This table needs to replaces in other Codepages
   223 0000024F F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F0h, 0F6h, 0F6h 
   223 00000258 F0F6F6              <1>
   224 0000025B F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h
   224 00000264 F6F6F6              <1>
   225 00000267 F6F6F6F6F6F6F6F6F8- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F8h, 0FFh, 0F6h, 0FFh 
   225 00000270 FFF6FF              <1>
   226 00000273 FFFFFFFFFFFFFFF4F4- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h 
   226 0000027C FFFEF6              <1>
   227 0000027F FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h 
   227 00000288 FFF4F4              <1>
   228 0000028B F4F4F4FFFFFFFFFFFF- <1>     db 0F4h, 0F4h, 0F4h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   228 00000294 FFFFFF              <1>
   229 00000297 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   229 000002A0 FFFFFF              <1>
   230 000002A3 FFFFFFFFFFFFFFF6F6- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh 
   230 000002AC F6FFFF              <1>
   231 000002AF FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   231 000002B8 FFFFFF              <1>
   232 000002BB FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   232 000002C4 FFFFFF              <1>
   233 000002C7 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   
   234                              <1> 
   235                              <1> hardErrorStack:
   236 000002CF 13                  <1>     db errWpd
   237 000002D0 0B                  <1>     db eClsMedia
   238 000002D1 07                  <1>     db eActRetUsr
   239 000002D2 02                  <1>     db eLocDsk
    21                                  %include "./Source/Data/dispTbl.asm"
     1                              <1> ;Kernel Dispatch Function Table
     2                              <1> 
     3                              <1> kDispTbl:
     4 000002D3 FD50                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
     5 000002D5 C41B                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
     6 000002D7 D11B                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
     7 000002D9 A51C                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
     8 000002DB CE1C                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
     9 000002DD D61C                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    10 000002DF EE1C                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    11 000002E1 211D                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    12 000002E3 461D                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    13 000002E5 A51D                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    14 000002E7 5820                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    15 000002E9 B41D                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    16 000002EB C01D                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    17 000002ED 8D69                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    18 000002EF BF69                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    19 000002F1 0E28                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    20 000002F3 0E28                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    21 000002F5 9725                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    22 000002F7 5026                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    23 000002F9 D726                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    24 000002FB 0E28                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    25 000002FD 0E28                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    26 000002FF F927                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    27 00000301 0627                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    28 00000303 4C6C                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    29 00000305 D869                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    30 00000307 C427                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    31 00000309 DF69                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    32 0000030B E169                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    33 0000030D 4C6C                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    34 0000030F 4C6C                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    35 00000311 7F6A                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    36 00000313 4C6C                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    37 00000315 0E28                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    38 00000317 0E28                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    39 00000319 7127                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    40 0000031B 0E28                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    41 0000031D 2A6A                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    42 0000031F 0250                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    43 00000321 0E28                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    44 00000323 0E28                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    45 00000325 EA27                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    46 00000327 D122                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    47 00000329 F822                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    48 0000032B FE22                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    49 0000032D 1F23                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    50 0000032F 5C6A                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    51 00000331 D727                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    52 00000333 6A6A                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    53 00000335 CF50                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    54 00000337 816A                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    55 00000339 0969                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    56 0000033B B96A                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    57 0000033D CA6A                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    58 0000033F DB6A                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    59 00000341 4259                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    60 00000343 6B59                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    61 00000345 9E12                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    62 00000347 CE14                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    63 00000349 A716                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    64 0000034B 032A                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    65 0000034D 142A                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    66 0000034F 3E2B                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    67 00000351 7D2B                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    68 00000353 B82B                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    69 00000355 C42B                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    70 00000357 292C                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    71 00000359 982C                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    72 0000035B 3845                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    73 0000035D B02D                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    74 0000035F EB2D                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    75 00000361 6F17                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    76 00000363 7E4A                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    77 00000365 A84C                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    78 00000367 B04D                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    79 00000369 4352                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    80 0000036B FF50                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
    81 0000036D 1F6B                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
    82 0000036F 002E                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
    83 00000371 6B2E                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
    84 00000373 3769                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
    85 00000375 4069                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
    86 00000377 2D6B                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
    87 00000379 3E6B                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
    88 0000037B 1C6C                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
    89 0000037D EF4F                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
    90 0000037F 9B2E                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
    91 00000381 272F                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
    92 00000383 4E4F                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
    93 00000385 236C                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
    94 00000387 6F2F                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
    95 00000389 3730                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
    96 0000038B 4B30                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
    97 0000038D 4D6C                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
    98 0000038F 0E6E                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
    99 00000391 746E                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   100 00000393 F217                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   101 00000395 5A69                <1>     dw systemServices - kDispTbl      ;AH = 61H, PROCESS MANAGEMENT, NEW
   102 00000397 4969                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   103 00000399 4C6C                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   104 0000039B 5269                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   105 0000039D 9A59                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   106 0000039F 9A59                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   107 000003A1 B730                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   108 000003A3 F431                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   109 000003A5 4C6C                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   110                              <1> kDispTblL  equ $ - kDispTbl 
   111                              <1> 
   112                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   113 000003A7 2E6E                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   114 000003A9 0D3A                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   115 000003AB C062                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   116 000003AD 316E                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   117 000003AF E863                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   118 000003B1 FF1A                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   119 000003B3 5A59                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   120 000003B5 6300                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   121 000003B7 F543                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   122 000003B9 9500                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   123 000003BB 146F                <1>     dw shareCriticalError - mDispTbl    ;AX=120Ah, Signal Share Critical Error
   124 000003BD 9C6E                <1>     dw shareCheckOpenViolation - mDispTbl  ;AX=120Bh, Signal Sharing Violation 
   125 000003BF D836                <1>     dw openDriverMux - mDispTbl ;AX=120Ch, Open device
   126 000003C1 B024                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   127 000003C3 A300                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   128 000003C5 BD00                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   129 000003C7 CB00                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   130 000003C9 4464                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   131 000003CB 2664                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   132 000003CD F463                <1>     dw uppercaseChar - mDispTbl ;AX=1213h, Uppercase Char
   133 000003CF 7265                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   134 000003D1 DE00                <1>     dw flushBuffer - mDispTbl   ;AX=1215h
   135 000003D3 0D43                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   136 000003D5 B663                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   137 000003D7 CE62                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   138 000003D9 5B63                <1>     dw getCDS - mDispTbl    ;AX=1219h
   139 000003DB FB0B                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   140 000003DD 4324                <1>     dw setDaysInFeb - mDispTbl  ;AX=121Bh
   141 000003DF 786B                <1>     dw noOp - mDispTbl  ;AX=121Ch -> Old Checksum memory
   142 000003E1 786B                <1>     dw noOp - mDispTbl  ;AX=121Dh -> Old Sum Memory
   143 000003E3 5D64                <1>     dw compareFileNames - mDispTbl ;AX=121Eh, Compare Filenames
   144 000003E5 0C63                <1>     dw buildNewCDS - mDispTbl   ;AX=121Fh, Build CDS
   145 000003E7 4243                <1>     dw getJFTPtr - mDispTbl     ;AX=1220h, Get JFT entry
   146 000003E9 1417                <1>     dw trueNameMultiplex - mDispTbl     ;AX=1221h, Truename
   147 000003EB CF67                <1>     dw setErrorVars - mDispTbl ;AX=1222h, Set Extended Error Info
   148 000003ED 3711                <1>     dw checkIfCharDevice - mDispTbl  ;AX=1223, Check If Char Device
   149 000003EF 796E                <1>     dw shareRetryCountdown - mDispTbl   ;AX=1224h, Share Retry
   150 000003F1 1B64                <1>     dw strlen2 - mDispTbl   ;AX=1225h, strlen
   151                              <1> mDispTblL   equ     $ - mDispTbl
   152                              <1> 
   153                              <1> serverDispTbl:  ;Server Dispatch functions
   154 000003F3 0B                  <1>     db 0Bh  ;Number of entries
   155 000003F4 746B                <1>     dw serverDispatch - serverDispTbl           ;AX=5D00h
   156 000003F6 C66B                <1>     dw commitAllFilesForProcess - serverDispTbl ;AX=5D01h
   157 000003F8 1F6C                <1>     dw closeFilesByName - serverDispTbl         ;AX=5D02h
   158 000003FA 306C                <1>     dw closeFilesByComputer - serverDispTbl     ;AX=5D03h
   159 000003FC 386C                <1>     dw closeFilesByProcess - serverDispTbl      ;AX=5D04h
   160 000003FE 406C                <1>     dw getOpenFileListEntry - serverDispTbl     ;AX=5D05h
   161 00000400 5B6C                <1>     dw getSDAData - serverDispTbl               ;AX=5D06h
   162 00000402 856C                <1>     dw printerRedir - serverDispTbl             ;AX=5D07h
   163 00000404 856C                <1>     dw printerRedir - serverDispTbl             ;AX=5D08h
   164 00000406 856C                <1>     dw printerRedir - serverDispTbl             ;AX=5D09h
   165 00000408 926C                <1>     dw setExtendedErrorInfo - serverDispTbl     ;AX=5D0Ah
    22                                  %if DEBUG
    23                                  %include "./Source/Debug/debug.asm"
    24                                  %endif
    25                                  %include "./Source/Kernel/FAT/buffun.asm"
     1                              <1> ;This file contains FAT disk buffer related functions that
     2                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
     3                              <1> ;----------------------------------------------------
     4                              <1> ;           Externally referenced functions         :
     5                              <1> ;----------------------------------------------------
     6                              <1> 
     7                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
     8                              <1> ;Sets the buffer in rdi to the head of the chain
     9                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    10                              <1> ;Output: Buffer header set to the head of the chain
    11 0000040A 48393D(63C00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    12 00000411 7428                <1>     je .exit
    13 00000413 56                  <1>     push rsi
    14 00000414 488B35(63C00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    15                              <1> .mainlp:
    16 0000041B 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    17 0000041E 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    18 00000420 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    19 00000423 EBF6                <1>     jmp short .mainlp
    20                              <1> .fnd:
    21 00000425 57                  <1>     push rdi
    22 00000426 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    23 00000429 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    24 0000042C 5F                  <1>     pop rdi ;Get original buf back
    25 0000042D 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    26 00000430 488735(63C00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    27 00000437 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    28 0000043A 5E                  <1>     pop rsi
    29                              <1> .exit:
    30                              <1>     return
    13                              <2> %%_ret:
    14 0000043B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> 
    32                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h 
    33                              <1> ;1 External reference
    34                              <1> ;Input: rdi = Buffer header to flush and free
    35 0000043C E844000000          <1>     call flushBuffer
    36 00000441 7206                <1>     jc .exit
    37                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    38 00000443 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    39                              <1> .exit:
    40                              <1>     return
    13                              <2> %%_ret:
    14 00000449 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    41                              <1> 
    42                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    43                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    44                              <1> ;Output: rdi = First disk buffer
    45 0000044A 488B3D(63C00300)    <1>     mov rdi, [bufHeadPtr]
    46 00000451 57                  <1>     push rdi
    47                              <1> .lp:
    48 00000452 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    49 00000456 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    50 00000459 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    51 00000460 75F0                <1>     jne .lp
    52 00000462 5F                  <1>     pop rdi
    53                              <1>     return
    13                              <2> %%_ret:
    14 00000463 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> 
    55                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    56                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    57                              <1> ; second buffer in the chain in rdi
    58                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    59                              <1> ;Output: rdi = Second buffer in the chain
    60 00000464 52                  <1>     push rdx
    61 00000465 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    62 00000468 E89DFFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    63 0000046D 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    64 00000470 5A                  <1>     pop rdx
    65                              <1>     return
    13                              <2> %%_ret:
    14 00000471 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    66                              <1> 
    67                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    68                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    69                              <1> ;Input: rdi = Buffer header to start searching at
    70                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    71                              <1> ;        ZF=ZE => No unreferenced buffer found
    72 00000472 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    73 00000476 750C                <1>     jnz .exit
    74 00000478 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    75 0000047B 4881FFFFFFFFFF      <1>     cmp rdi, -1
    76 00000482 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    77                              <1> .exit:
    78                              <1>     return
    13                              <2> %%_ret:
    14 00000484 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    79                              <1> 
    80                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
    81                              <1> ;Flushes the data in a sector buffer to disk!
    82                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
    83                              <1> ;Exit:  CF=NC : Success
    84                              <1> ;       CF=CY : Fail, terminate the request
    85                              <1> ;First make request to device driver
    86 00000485 50                  <1>     push rax
    87 00000486 53                  <1>     push rbx
    88 00000487 51                  <1>     push rcx
    89 00000488 52                  <1>     push rdx
    90 00000489 56                  <1>     push rsi
    91 0000048A 55                  <1>     push rbp
    92                              <1> ;If the buffer is freed, skip flushing to avoid issues
    93 0000048B 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
    94 0000048F 7454                <1>     je .fbFreeExit  ;If it is free exit
    95 00000491 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
    96 00000495 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
    97                              <1> .fbRequest0:
    98 00000497 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
    99 0000049C F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   100 000004A0 7406                <1>     jz .fbRequest1
   101 000004A2 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   102                              <1> .fbRequest1:
   103 000004A8 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   104 000004AB B901000000          <1>     mov ecx, 1  ;One sector to copy
   105 000004B0 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   106 000004B4 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   107 000004B8 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   108 000004BC E852600000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   109 000004C1 E8D05E0000          <1>     call absDiskDriverCall    ;Make Driver Request
   110 000004C6 7525                <1>     jnz .fbFail
   111                              <1> ;Now check if the buffer was a FAT, to write additional copies
   112 000004C8 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   113 000004CC 7417                <1>     jz .fbFreeExit  ;If not, exit
   114 000004CE FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   115 000004D1 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   116 000004D3 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   117 000004D6 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   118 000004DA E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   119                              <1> .fbFreeExit1:
   120 000004DF 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   121 000004E2 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   122                              <1> .fbFreeExit:
   123 000004E5 F8                  <1>     clc
   124                              <1> .fbExitFail:
   125 000004E6 5D                  <1>     pop rbp
   126 000004E7 5E                  <1>     pop rsi
   127 000004E8 5A                  <1>     pop rdx
   128 000004E9 59                  <1>     pop rcx
   129 000004EA 5B                  <1>     pop rbx
   130 000004EB 58                  <1>     pop rax
   131                              <1>     return
    13                              <2> %%_ret:
    14 000004EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   132                              <1> .fbFail:
   133                              <1> ;Enter here only if the request failed
   134 000004ED FFCE                <1>     dec esi
   135 000004EF 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   136                              <1> ;Request failed thrice, critical error call
   137 000004F1 C605(5CC40300)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   138 000004F8 E89B570000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   139 000004FD 3C01                <1>     cmp al, critRetry
   140 000004FF 7496                <1>     je .fbRequest0
   141                              <1>     ;Else we fail (Ignore=Fail here)
   142 00000501 F9                  <1>     stc ;Set error flag to indicate fail
   143 00000502 E9DFFFFFFF          <1>     jmp .fbExitFail
   144                              <1> 
   145                              <1> testDirtyBufferForDrive:    ;External linkage
   146                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   147                              <1> ;Input: al = Drive number (0 based)
   148                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   149                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   150 00000507 53                  <1>     push rbx
   151 00000508 488B1D(63C00300)    <1>     mov rbx, qword [bufHeadPtr]
   152                              <1> .tdbfdCheckBuffer:
   153 0000050F 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   154 00000512 7509                <1>     jne .tdbfdGotoNextBuffer
   155 00000514 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   156 00000518 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   157 0000051A F9                  <1>     stc ;Else dirty buffer found, set carry flag
   158                              <1> .tdbfdExit:
   159 0000051B 5B                  <1>     pop rbx
   160                              <1>     return
    13                              <2> %%_ret:
    14 0000051C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   161                              <1> .tdbfdGotoNextBuffer:
   162 0000051D 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   163 00000520 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   164 00000527 74F2                <1>     je .tdbfdExit
   165 00000529 EBE4                <1>     jmp short .tdbfdCheckBuffer
   166                              <1> 
   167                              <1> 
   168                              <1> cancelWriteThroughBuffers:  ;External linkage
   169                              <1> ; Frees all buffers for the workingDPB
   170                              <1> ; Alternative symbol for the same function. Used on Fails and Aborts.
   171                              <1> freeBuffersForDPB:  ;External Linkage (Before Get BPB in medchk)
   172                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   173                              <1> ; to have a drive number of -1, thus freeing it
   174                              <1> ;Given DPB is in rbp
   175 0000052B 53                  <1>     push rbx
   176 0000052C 488B1D(63C00300)    <1>     mov rbx, qword [bufHeadPtr]
   177                              <1> .i0:
   178 00000533 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   179 00000537 7506                <1>     jne .i1 ;If no, skip freeing
   180 00000539 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   181                              <1> .i1:
   182 0000053F 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   183 00000542 4881FBFFFFFFFF      <1>     cmp rbx, -1
   184 00000549 75E8                <1>     jne .i0
   185                              <1> .exit:
   186 0000054B 5B                  <1>     pop rbx
   187                              <1>     return
    13                              <2> %%_ret:
    14 0000054C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   188                              <1> 
   189                              <1> ;******* NEW BUFFER HANDLING *******
   190                              <1> writeThroughBuffer: ;External linkage
   191                              <1> ; Flushes the current disk buffer to disk.
   192                              <1> ; Returns: CF=NC => All is well, buffer flushed and dirty bit cleaned
   193                              <1> ;          CF=CY => Buffer failed to flush, marked as dirty and return 
   194 0000054D 57                  <1>     push rdi
   195 0000054E 488B3D(2EC70300)    <1>     mov rdi, qword [currBuff]
   196 00000555 E82BFFFFFF          <1>     call flushBuffer
   197 0000055A 7204                <1>     jc short .exit
   198 0000055C 806709BF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~dirtyBuffer
   199                              <1> .exit:
   200 00000560 5F                  <1>     pop rdi
   201                              <1>     return
    13                              <2> %%_ret:
    14 00000561 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   202                              <1> ;******* NEW BUFFER HANDLING *******
   203                              <1> 
   204                              <1> writeThroughBuffers:    ;External linkage
   205                              <1> ; Flushes and resets the dirty bit for all dirty bufs for working drive
   206                              <1> ; Returns: CF=NC => All is well, buffer flushed and dirty bit cleaned
   207                              <1> ;          CF=CY => Buffer failed to flush, marked as dirty and return
   208 00000562 50                  <1>     push rax
   209 00000563 57                  <1>     push rdi
   210 00000564 488B05(FAC60300)    <1>     mov rax, qword [workingDPB]    ;Get current DPB to compare with
   211 0000056B 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   212                              <1> .mainLp:
   213 00000572 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;When we get to the end of the buffer chain, exit
   214 00000579 7416                <1>     je .exit   
   215 0000057B 48394717            <1>     cmp qword [rdi + bufferHdr.driveDPBPtr], rax  ;Compare dpb numbers
   216 0000057F 750B                <1>     jne .nextBuffer
   217 00000581 E8FFFEFFFF          <1>     call flushBuffer    ;Flush this buffer if it on dpb we want
   218 00000586 7209                <1>     jc .exit  ;If something went wrong, exit
   219 00000588 806709BF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~dirtyBuffer
   220                              <1> .nextBuffer:
   221 0000058C 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Goto next buffer
   222 0000058F EBE1                <1>     jmp short .mainLp
   223                              <1> .exit:
   224 00000591 5F                  <1>     pop rdi
   225 00000592 58                  <1>     pop rax
   226                              <1>     return
    13                              <2> %%_ret:
    14 00000593 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> markBufferDirty:
   229 00000594 55                  <1>     push rbp
   230 00000595 9C                  <1>     pushfq
   231 00000596 488B2D(2EC70300)    <1>     mov rbp, qword [currBuff]
   232 0000059D 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   233 000005A1 9D                  <1>     popfq
   234 000005A2 5D                  <1>     pop rbp
   235                              <1>     return
    13                              <2> %%_ret:
    14 000005A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   236                              <1> 
   237                              <1> 
   238                              <1> getBuffer: ;Internal Linkage ONLY
   239                              <1> ;
   240                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   241                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   242                              <1> ;Flushes if not in disk change mode. 
   243                              <1> ;If in disk change mode, will check to see if the selected buffer 
   244                              <1> ; has data referring a device using the same DPB as we are changing.
   245                              <1> ; If it is, skip flushing, if not, flush first!
   246                              <1> ;
   247                              <1> ;This function will return a pointer to the desired data sector OR 
   248                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   249                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   250                              <1> ;Entry: rax = Sector to read
   251                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   252                              <1> ;       rsi = DPB to use for transaction
   253                              <1> ;Exit:  CF=NC => 
   254                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   255                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   256 000005A4 51                  <1>     push rcx
   257 000005A5 52                  <1>     push rdx
   258 000005A6 56                  <1>     push rsi
   259 000005A7 57                  <1>     push rdi
   260 000005A8 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   261 000005AA E832010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   262 000005AF 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   263 000005B6 7418                <1>     je .rbReadNewSector
   264 000005B8 48893D(2EC70300)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   265 000005BF 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer ;Only set if in buf chain
   266                              <1> .rbExit:
   267 000005C3 F8                  <1>     clc
   268                              <1> .rbExitNoFlag:
   269 000005C4 5F                  <1>     pop rdi
   270 000005C5 5E                  <1>     pop rsi
   271 000005C6 5A                  <1>     pop rdx
   272 000005C7 59                  <1>     pop rcx
   273 000005C8 488B1D(2EC70300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   274                              <1>     return
    13                              <2> %%_ret:
    14 000005CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   275                              <1> .rbReadNewSector:
   276 000005D0 E8B5000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   277 000005D5 803D(D8D90300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   278 000005DC 7506                <1>     jne .flush  ;We are not, flush buffer
   279 000005DE 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   280 000005E2 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used. Lose the sector
   281                              <1> .flush:
   282 000005E4 E853FEFFFF          <1>     call flushAndFreeBuffer
   283 000005E9 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   284                              <1> .skipFlush:
   285                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   286                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   287                              <1>     ; is no longer owned by that File so we mark the owner as none
   288 000005EB 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   289 000005F3 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   290 000005F6 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   291 000005F9 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   292 000005FD 80F902              <1>     cmp cl, fatBuffer
   293 00000600 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   294 00000602 7503                <1>     jne .rbNonFATbuffer
   295 00000604 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   296                              <1> .rbNonFATbuffer:
   297 00000607 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   298 0000060A 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   299 0000060D 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   300 00000610 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   301 00000614 C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   302 00000618 E804000000          <1>     call readSectorBuffer ;Carry the flag from the request
   303 0000061D 72A5                <1>     jc .rbExitNoFlag
   304 0000061F EBA2                <1>     jmp short .rbExit
   305                              <1> 
   306                              <1> readSectorBuffer:   ;Internal Linkage
   307                              <1> ;Reads a sector into a built sector buffer
   308                              <1> ;Entry: rdi = Pointer to buffer header
   309                              <1> ;Exit:  CF=NC : Success
   310                              <1> ;       CF=CY : Fail, terminate the request
   311                              <1> ;       rbx pointing to buffer header
   312                              <1> ;First make request to device driver
   313 00000621 50                  <1>     push rax
   314 00000622 53                  <1>     push rbx
   315 00000623 51                  <1>     push rcx
   316 00000624 52                  <1>     push rdx
   317 00000625 56                  <1>     push rsi
   318 00000626 55                  <1>     push rbp
   319                              <1> .rsRequest0:
   320 00000627 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   321 0000062C F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   322 00000630 7406                <1>     jz .rsRequest1
   323 00000632 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   324                              <1> .rsRequest1:
   325 00000638 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   326 0000063B B901000000          <1>     mov ecx, 1  ;One sector to copy
   327 00000640 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   328 00000644 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   329 00000648 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   330 0000064C E8CD5E0000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   331 00000651 E8405D0000          <1>     call absDiskDriverCall    ;Make Driver Request
   332 00000656 7508                <1>     jnz .rsFail
   333                              <1> .rsExit:
   334 00000658 F8                  <1>     clc
   335                              <1> .rsExitFail:
   336 00000659 5D                  <1>     pop rbp
   337 0000065A 5E                  <1>     pop rsi
   338 0000065B 5A                  <1>     pop rdx
   339 0000065C 59                  <1>     pop rcx
   340 0000065D 5B                  <1>     pop rbx
   341 0000065E 58                  <1>     pop rax
   342                              <1>     return
    13                              <2> %%_ret:
    14 0000065F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   343                              <1> .rsFail:
   344                              <1> ;Enter here only if the request failed
   345 00000660 FFCE                <1>     dec esi
   346 00000662 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   347                              <1> ;Request failed thrice, critical error call
   348                              <1> ;First free the buffer if we failed to read data into it 
   349 00000664 0FB74F08            <1>     movzx ecx, word [rdi + bufferHdr.driveNumber]   ;Save drv num for retry
   350 00000668 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh ;Free buffer and clear flags
   351 0000066E C605(5CC40300)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   352 00000675 E81E560000          <1>     call diskDevErr
   353 0000067A 3C01                <1>     cmp al, critRetry
   354 0000067C 7506                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   355 0000067E 66894F08            <1>     mov word [rdi + bufferHdr.driveNumber], cx ;Put drvNm + flgs if trying again
   356 00000682 EBA3                <1>     jmp short .rsRequest0
   357                              <1> .fail:
   358 00000684 F9                  <1>     stc ;Set error flag to indicate fail
   359 00000685 E9CFFFFFFF          <1>     jmp .rsExitFail
   360                              <1>     
   361                              <1> findLRUBuffer: ;Internal Linkage
   362                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   363                              <1> ; in rbx and the currBuff variable
   364                              <1> ;Input: Nothing
   365                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   366                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   367 0000068A 52                  <1>     push rdx
   368 0000068B 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   369 00000692 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   370 00000696 7436                <1>     je .flbExit 
   371 00000698 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   372 0000069F 742D                <1>     je .flbExit
   373                              <1> .flbWalk:
   374 000006A1 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   375 000006A4 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   376 000006A7 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   377 000006AB 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   378 000006AD 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   379 000006B4 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   380 000006B6 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   381                              <1> .flbHeadLink:
   382 000006BD 488B15(63C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   383 000006C4 48893D(63C00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   384 000006CB 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   385                              <1> .flbExit:
   386 000006CE 5A                  <1>     pop rdx
   387 000006CF 48893D(2EC70300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   388                              <1>     return
    13                              <2> %%_ret:
    14 000006D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   389                              <1> .flbFreeLink:
   390 000006D7 51                  <1>     push rcx
   391 000006D8 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   392 000006DB 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   393 000006DE 59                  <1>     pop rcx
   394 000006DF EBDC                <1>     jmp short .flbHeadLink
   395                              <1> 
   396                              <1> findSectorInBuffer:     ;Internal linkage
   397                              <1> ;Finds the Buffer for a sector belonging to a particular dpb device
   398                              <1> ;If the sector is not in a buffer, returns with a -1
   399                              <1> ;Input: rax = Sector number
   400                              <1> ;       dl = Drive number
   401                              <1> ;Output: rdi = Buffer hdr pointer or -1
   402 000006E1 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   403                              <1> .fsiCheckBuffer:
   404 000006E8 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   405 000006EB 7507                <1>     jne .fsiGotoNextBuffer
   406 000006ED 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   407 000006F1 7501                <1>     jne .fsiGotoNextBuffer
   408                              <1> .fsiExit:
   409                              <1>     return
    13                              <2> %%_ret:
    14 000006F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   410                              <1> .fsiGotoNextBuffer:
   411 000006F4 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   412 000006F7 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   413 000006FE 74F3                <1>     je .fsiExit
   414 00000700 EBE6                <1>     jmp short .fsiCheckBuffer
   415                              <1> 
   416                              <1> ;-----------------------------------------------------------------------------
   417                              <1> ;SPECIAL BUFFER FUNCTIONS
   418                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   419                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   420                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   421                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   422                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   423                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   424                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   425                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   426                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   427                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   428                              <1> ;-----------------------------------------------------------------------------
   429                              <1> getBufForDataNoFile:
   430                              <1> ;Returns a buffer to use for disk data in rbx
   431                              <1> ;Requires a File Handle.
   432                              <1> ;Input: [workingDPB] = DPB to transact on
   433                              <1> ;       rax = Sector to transfer
   434                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   435 00000702 51                  <1>     push rcx
   436 00000703 B108                <1>     mov cl, dataBuffer
   437 00000705 56                  <1>     push rsi
   438 00000706 57                  <1>     push rdi
   439 00000707 488B35(FAC60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   440 0000070E E891FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   441 00000713 725F                <1>     jc getBufCommon.exit
   442 00000715 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   443 0000071D EB55                <1>     jmp short getBufCommon.exit
   444                              <1> getBufForDirNoFile:
   445                              <1> ;Returns a buffer to use for disk dir data in rbx
   446                              <1> ;Requires a File Handle.
   447                              <1> ;Input: [workingDPB] = DPB to transact on
   448                              <1> ;       rax = Sector to transfer
   449                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   450 0000071F 51                  <1>     push rcx
   451 00000720 B104                <1>     mov cl, dirBuffer
   452 00000722 56                  <1>     push rsi
   453 00000723 57                  <1>     push rdi
   454 00000724 488B35(FAC60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   455 0000072B E874FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   456 00000730 7242                <1>     jc getBufCommon.exit
   457 00000732 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   458 0000073A EB38                <1>     jmp short getBufCommon.exit
   459                              <1> getBufForFat:
   460                              <1> ;Returns a buffer to use for fat data in rbx
   461                              <1> ;Input: [workingDPB] = DPB to transact on
   462                              <1> ;       rax = Sector to transfer
   463                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   464 0000073C 51                  <1>     push rcx
   465 0000073D B102                <1>     mov cl, fatBuffer
   466 0000073F EB03                <1>     jmp short getBufCommon2
   467                              <1> getBufForDOS:
   468                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   469                              <1> ;Input: [workingDPB] = DPB to transact on
   470                              <1> ;       rax = Sector to transfer
   471                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   472 00000741 51                  <1>     push rcx
   473 00000742 B101                <1>     mov cl, dosBuffer
   474                              <1> getBufCommon2:
   475 00000744 56                  <1>     push rsi
   476 00000745 57                  <1>     push rdi    ;Push rdi to preserve it
   477 00000746 488B35(FAC60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   478 0000074D EB15                <1>     jmp short getBufCommon.makeReq
   479                              <1> getBufForDir:
   480                              <1> ;Returns a buffer to use for disk directory data in rbx
   481                              <1> ;Input: [currentSFT] = File to manipulate
   482                              <1> ;       rax = Sector to transfer
   483                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   484 0000074F 51                  <1>     push rcx
   485 00000750 B104                <1>     mov cl, dirBuffer
   486 00000752 EB03                <1>     jmp short getBufCommon
   487                              <1> getBufForData:
   488                              <1> ;Returns a buffer to use for disk data in rbx
   489                              <1> ;Requires a File Handle.
   490                              <1> ;Input: [currentSFT] = File to manipulate
   491                              <1> ;       rax = Sector to transfer
   492                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   493 00000754 51                  <1>     push rcx
   494 00000755 B108                <1>     mov cl, dataBuffer
   495                              <1> getBufCommon:
   496 00000757 56                  <1>     push rsi
   497 00000758 57                  <1>     push rdi
   498 00000759 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
   499 00000760 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   500                              <1> .makeReq:
   501 00000764 E83BFEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   502 00000769 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   503                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   504                              <1>     ; flushed to the file!
   505                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   506                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   507                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   508 0000076B F6C103              <1>     test cl, dosBuffer | fatBuffer
   509 0000076E 7504                <1>     jnz .exit
   510 00000770 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   511                              <1> .exit:
   512 00000774 5F                  <1>     pop rdi
   513 00000775 5E                  <1>     pop rsi
   514 00000776 59                  <1>     pop rcx
   515                              <1>     return
    13                              <2> %%_ret:
    14 00000777 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   516                              <1> 
   517                              <1> flushFile:
   518                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   519                              <1> ; FAT/DOS buffers to flush
   520                              <1> ; We flush and free, and set to head of chain before continuing to search
   521                              <1> ;Input: rdi = is the file (sft) we wish to flush
   522                              <1> ;Output: CF=NC => All ok
   523                              <1> ;        CF=CY => A sector failed, exit. 
   524 00000778 57                  <1>     push rdi
   525 00000779 56                  <1>     push rsi
   526                              <1>     ;First check if the file has been written to?
   527 0000077A 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   528 00000780 7534                <1>     jnz .exitNoFlush ;Exit without flushing if set
   529 00000782 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   530 00000785 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   531                              <1> .ffLoop:
   532 0000078C 4881FFFFFFFFFF      <1>     cmp rdi, -1
   533 00000793 741B                <1>     je .exit
   534 00000795 F6470907            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer | dirBuffer
   535 00000799 751E                <1>     jnz .found  ;Flush if either bit is set
   536 0000079B 48817F1FFFFFFFFF    <1>     cmp qword [rdi + bufferHdr.owningFile], -1  ;If owning file is -1, flush too
   537 000007A3 7414                <1>     je .found
   538 000007A5 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   539 000007A9 740E                <1>     je .found
   540 000007AB 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   541 000007AE EBDC                <1>     jmp short .ffLoop
   542                              <1> .exit:
   543                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   544 000007B0 66814E054000        <1>     or word [rsi + sft.wDeviceInfo], blokFileNoFlush  ;Set that bit again!
   545                              <1> .exitNoFlush:
   546 000007B6 5E                  <1>     pop rsi
   547 000007B7 5F                  <1>     pop rdi
   548                              <1>     return
    13                              <2> %%_ret:
    14 000007B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> .found:
   550                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   551                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   552 000007B9 E87EFCFFFF          <1>     call flushAndFreeBuffer ;Flush and free buffer
   553 000007BE 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   554                              <1>     ;If the sector has been successfully flushed, then it
   555                              <1>     ; is no longer owned by that File so we mark the owner as none
   556 000007C0 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   557 000007C8 E897FCFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   558 000007CD EBBD                <1>     jmp short .ffLoop
    26                                  %include "./Source/Kernel/FAT/fat.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;       File System routines        :
     3                              <1> ;-----------------------------------:
     4                              <1> getFATtype:
     5                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
     6                              <1> ;Entry: rbp = DPB to ascertain FAT
     7                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
     8 000007CF 53                  <1>     push rbx
     9 000007D0 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    10 000007D3 B902000000          <1>     mov ecx, 2  ;FAT 32 marker
    11 000007D8 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    12 000007DE 730C                <1>     jae .exit
    13 000007E0 FFC9                <1>     dec ecx     ;FAT 16 marker
    14 000007E2 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    15 000007E8 7302                <1>     jae .exit
    16 000007EA FFC9                <1>     dec ecx     ;FAT 12 marker
    17                              <1> .exit:
    18 000007EC 5B                  <1>     pop rbx
    19                              <1>     return
    13                              <2> %%_ret:
    14 000007ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> clust2FATEntry:
    22                              <1> ;Converts a cluster number to a offset in the FAT
    23                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    24                              <1> ;        eax = Cluster number to look for
    25                              <1> ;Exit:   eax = Sector on disk of FAT 
    26                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    27                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    28 000007EE 53                  <1>     push rbx
    29 000007EF 55                  <1>     push rbp
    30 000007F0 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
    31 000007F7 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    32 000007FA 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    33 00000800 731E                <1>     jae .fat32
    34 00000802 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    35 00000808 7209                <1>     jb .fat12
    36                              <1> ;FAT16
    37 0000080A D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    38 0000080C 6801000000          <1>     push qword 1
    39 00000811 EB15                <1>     jmp short .common
    40                              <1> .fat12:
    41 00000813 89C1                <1>     mov ecx, eax    ;ecx = eax
    42 00000815 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    43 00000817 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    44 00000819 6800000000          <1>     push qword 0
    45 0000081E EB08                <1>     jmp short .common
    46                              <1> .fat32:
    47 00000820 6802000000          <1>     push qword 2
    48 00000825 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    49                              <1> .common:
    50                              <1> ;eax has the FAToffset
    51 00000828 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    52 0000082C 31D2                <1>     xor edx, edx    ;edx = 0
    53 0000082E F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    54 00000830 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    55 00000834 01D8                <1>     add eax, ebx
    56 00000836 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    57 00000837 5D                  <1>     pop rbp
    58 00000838 5B                  <1>     pop rbx
    59                              <1>     return
    13                              <2> %%_ret:
    14 00000839 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> getStartSectorOfCluster:
    62                              <1> ;Input: eax = Cluster Number
    63                              <1> ;       rbp = dpb pointer
    64                              <1> ;Output: rax = Starting Sector number for cluster
    65                              <1> ;Gives the data sector we are at in the current cluster
    66                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    67 0000083A 51                  <1>     push rcx
    68 0000083B 09C0                <1>     or eax, eax ;Zero upper dword
    69 0000083D 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    70                              <1> .fat32Root:
    71 0000083F 482D02000000        <1>     sub rax, 2
    72 00000845 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    73 00000848 48D3E0              <1>     shl rax, cl
    74 0000084B 31C9                <1>     xor ecx, ecx
    75 0000084D 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    76 00000850 4801C8              <1>     add rax, rcx
    77                              <1>     ;rax now has the first sector of the current cluster
    78 00000853 59                  <1>     pop rcx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00000854 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .rootDir:
    81 00000855 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
    82 00000858 E872FFFFFF          <1>     call getFATtype
    83 0000085D 81F902000000        <1>     cmp ecx, 2
    84 00000863 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
    85                              <1>     ;Else rax has the first sector of the Root Dir
    86 00000865 59                  <1>     pop rcx
    87                              <1>     return
    13                              <2> %%_ret:
    14 00000866 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> 
    90                              <1> getLastClusterInChain:
    91                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
    92                              <1> ;Input: eax = Cluster to start searching at
    93                              <1> ;Output: eax = Last cluster in chain
    94                              <1> ;If input eax = 0, output eax = 0
    95 00000867 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
    96                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000869 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    97 0000086B 53                  <1>     push rbx
    98                              <1> .lp:
    99 0000086C 89C3                <1>     mov ebx, eax
   100 0000086E E8C9010000          <1>     call readFAT
   101 00000873 7209                <1>     jc .exit
   102 00000875 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   103 0000087A 75F0                <1>     jne .lp
   104 0000087C 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   105                              <1> .exit: 
   106 0000087E 5B                  <1>     pop rbx
   107                              <1>     return
    13                              <2> %%_ret:
    14 0000087F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> getNumberOfClustersInChain:
   110                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   111                              <1> ;Input: eax = Cluster to start searching at
   112                              <1> ;Output: eax = Number of clusters in the chain
   113                              <1> ;If input eax = 0, output eax = 0
   114 00000880 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   115                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000882 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   116 00000884 51                  <1>     push rcx
   117 00000885 31C9                <1>     xor ecx, ecx
   118                              <1> .lp:
   119 00000887 FFC1                <1>     inc ecx
   120 00000889 E8AE010000          <1>     call readFAT
   121 0000088E 7209                <1>     jc .exit
   122 00000890 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   123 00000895 75F0                <1>     jne .lp
   124 00000897 89C8                <1>     mov eax, ecx    ;Get the count
   125                              <1> .exit: 
   126 00000899 59                  <1>     pop rcx
   127                              <1>     return
    13                              <2> %%_ret:
    14 0000089A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> getClusterInChain:
   130                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   131                              <1> ;If an EOC is encountered, then ecx will not be 
   132                              <1> ;Input: eax = Start Cluster to start searching from
   133                              <1> ;       ecx = Number of clusters to go forwards by;
   134                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   135                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   136                              <1> ;Also usual CF babble.
   137 0000089B 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   138                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000089D 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   139 0000089F 53                  <1>     push rbx
   140 000008A0 67E30F              <1>     jecxz .exit
   141                              <1> .lp:
   142 000008A3 89C3                <1>     mov ebx, eax
   143 000008A5 E892010000          <1>     call readFAT
   144 000008AA 7206                <1>     jc .exit
   145 000008AC FFC9                <1>     dec ecx
   146 000008AE 75F3                <1>     jnz .lp
   147 000008B0 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   148                              <1> .exit:
   149 000008B2 5B                  <1>     pop rbx
   150                              <1>     return
    13                              <2> %%_ret:
    14 000008B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> startNewChain:
   153                              <1> ;Working dpb must be set
   154                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   155                              <1> ;If CF=CY, hard error
   156 000008B4 53                  <1>     push rbx
   157 000008B5 56                  <1>     push rsi
   158 000008B6 E862000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   159 000008BB 721A                <1>     jc .exit    ;Disk read error?
   160 000008BD 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   161 000008C2 7413                <1>     je .exit
   162 000008C4 BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   163 000008C9 89C3                <1>     mov ebx, eax
   164 000008CB E80D020000          <1>     call writeFAT   ;Propagate the CF 
   165 000008D0 89D8                <1>     mov eax, ebx
   166 000008D2 E8BC020000          <1>     call decrementFreeClusterCount
   167                              <1> .exit:
   168 000008D7 5E                  <1>     pop rsi
   169 000008D8 5B                  <1>     pop rbx
   170                              <1>     return
    13                              <2> %%_ret:
    14 000008D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   171                              <1> 
   172                              <1> allocateClusters:
   173                              <1> ;Working dpb must be set. 
   174                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   175                              <1> ;       ebx = Cluster to link to the new cluster
   176                              <1> ;Output:    
   177                              <1> ;   CF=NC => Complete.
   178                              <1> ;   If eax = -1, then no more free clusters. 
   179                              <1> ;   CF=CY => Hard error, exit
   180                              <1> ; ecx always has number of allocated clusters
   181 000008DA F8                  <1>     clc ;Always clear the flags before starting
   182 000008DB 53                  <1>     push rbx
   183 000008DC 56                  <1>     push rsi
   184 000008DD 51                  <1>     push rcx    ;Save tfr count on stack
   185 000008DE 67E332              <1>     jecxz .exit ;Allocating nothing? Exit
   186                              <1> .allocateLoop:
   187 000008E1 E837000000          <1>     call findFreeCluster
   188 000008E6 722B                <1>     jc .exit
   189 000008E8 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   190 000008ED 7424                <1>     je .exit    ;If the cluster number is -1, return immediately
   191                              <1>     ;eax has first free cluster value to use
   192                              <1>     ;First we link the previous cluster to this cluster
   193 000008EF BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   194 000008F4 50                  <1>     push rax
   195 000008F5 E8E3010000          <1>     call writeFAT   ;Allocate this cluster first
   196 000008FA 58                  <1>     pop rax
   197 000008FB 7216                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   198 000008FD E891020000          <1>     call decrementFreeClusterCount
   199                              <1>     ;eax points to this allocated cluster
   200                              <1>     ;ebx points to the previous last cluster
   201 00000902 89C6                <1>     mov esi, eax    ;New cluster as "value"
   202 00000904 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   203 00000906 E8D2010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   204 0000090B 7206                <1>     jc .exit
   205 0000090D 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   206 0000090F FFC9                <1>     dec ecx ;One less cluster allocated
   207 00000911 75CE                <1>     jnz .allocateLoop
   208                              <1> .exit:
   209 00000913 5E                  <1>     pop rsi ;Pop the tfr count into esi
   210 00000914 9C                  <1>     pushfq
   211 00000915 F7D9                <1>     neg ecx
   212 00000917 01F1                <1>     add ecx, esi
   213 00000919 9D                  <1>     popfq
   214 0000091A 5E                  <1>     pop rsi
   215 0000091B 5B                  <1>     pop rbx
   216                              <1>     return
    13                              <2> %%_ret:
    14 0000091C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> 
   218                              <1> findFreeCluster:
   219                              <1> ;Walks the FAT to find a free cluster and returns the 
   220                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   221                              <1> ;Works on the workingDPB
   222                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   223 0000091D 53                  <1>     push rbx
   224 0000091E 52                  <1>     push rdx
   225 0000091F 55                  <1>     push rbp
   226 00000920 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   227                              <1>     ;Use readFAT
   228                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   229                              <1>     ;If readFAT returns 0 then its a free cluster
   230 00000927 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   231                              <1> .fatLoop:
   232 0000092C 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   233 0000092E E809010000          <1>     call readFAT    ;Read the value at eax, if it is 0, then eax is free
   234 00000933 7210                <1>     jc .exitFail    ;If something goes wrong, just return
   235 00000935 85C0                <1>     test eax, eax   ;Is this cluster free?
   236 00000937 7409                <1>     jz .exit    ;If yes, exit
   237 00000939 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   238 0000093D 3B450F              <1>     cmp eax, dword [rbp + dpb.dClusterCount]
   239 00000940 76EA                <1>     jbe .fatLoop
   240                              <1> .exit:
   241 00000942 89D8                <1>     mov eax, ebx
   242 00000944 F8                  <1>     clc
   243                              <1> .exitFail:      ;Keep carry flag
   244 00000945 5D                  <1>     pop rbp
   245 00000946 5A                  <1>     pop rdx
   246 00000947 5B                  <1>     pop rbx
   247                              <1>     return
    13                              <2> %%_ret:
    14 00000948 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   248                              <1> 
   249                              <1> findFreeClusterData:
   250                              <1> ;Walks the FAT to find a free cluster and returns the 
   251                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   252                              <1> ; Also finds NumberOfFreeCLusters, if it is unknown. 
   253                              <1> ; Both fields get filled in the workingDPB
   254                              <1> ;Works on the workingDPB
   255                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   256 00000949 53                  <1>     push rbx
   257 0000094A 52                  <1>     push rdx
   258 0000094B 55                  <1>     push rbp
   259 0000094C 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   260 00000953 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   261                              <1>     ;Mark dFirstFreeCluster as -1, unknown
   262 00000957 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dFirstFreeCluster], -1
   263                              <1>     ;Use readFAT
   264                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   265                              <1>     ;If readFAT returns 0 then its a free cluster
   266 0000095E B802000000          <1>     mov eax, 2  ;Start with cluster 2
   267 00000963 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   268                              <1> .fatLoop:
   269 00000966 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   270 00000968 E8CF000000          <1>     call readFAT
   271 0000096D 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   272 0000096F 85C0                <1>     test eax, eax   ;Is this cluster free?
   273 00000971 750C                <1>     jne .fatProceed
   274 00000973 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   275 0000097A 7413                <1>     je .fatFirst
   276 0000097C FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   277                              <1> .fatProceed:
   278 0000097F 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   279 00000983 39D0                <1>     cmp eax, edx
   280 00000985 76DF                <1>     jbe .fatLoop
   281                              <1> .exit:
   282 00000987 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   283 0000098A F8                  <1>     clc
   284                              <1> .exitFail:      ;Keep carry flag
   285 0000098B 5D                  <1>     pop rbp
   286 0000098C 5A                  <1>     pop rdx
   287 0000098D 5B                  <1>     pop rbx
   288                              <1>     return
    13                              <2> %%_ret:
    14 0000098E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   289                              <1> .fatFirst:
   290                              <1> ;Set the first free cluster value in the DPB and check if we need to get a count
   291 0000098F 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   292 00000992 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1 ;If unknown, get count
   293 00000999 74E4                <1>     je .fatProceed
   294 0000099B EBEA                <1>     jmp short .exit ;Else, we have valid count so just exit
   295                              <1> 
   296                              <1> getNextSectorOfFile:
   297                              <1> ;This function will read the next sector for a file into a buffer.
   298                              <1> ;If the next sector to be read lives in the next cluster, it will update
   299                              <1> ; the vars appropriately
   300                              <1> ;
   301                              <1> ;Input: rbp = dpb pointer
   302                              <1> ;Output:
   303                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   304                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   305                              <1> ;       CF=CY => Critical error occurred and was FAILed
   306                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   307                              <1> ; next cluster and read first sector 
   308                              <1>     ;Check if we need to go to next cluster
   309 0000099D 8A05(4CC70300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   310 000009A3 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   311 000009A6 7416                <1>     je .gotoNextCluster
   312                              <1>     ;Goto next sector in same cluster
   313 000009A8 FE05(4CC70300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   314 000009AE 48FF05(4DC70300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   315 000009B5 488B05(4DC70300)    <1>     mov rax, qword [currSectD]
   316                              <1> .exitOK:
   317 000009BC F8                  <1>     clc
   318                              <1> .exitFail:
   319                              <1>     return
    13                              <2> %%_ret:
    14 000009BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   320                              <1> .gotoNextCluster:
   321 000009BE 8B05(44C70300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   322 000009C4 E873000000          <1>     call readFAT
   323 000009C9 72F2                <1>     jc .exitFail
   324                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   325 000009CB 3DFFFFFFFF          <1>     cmp eax, -1
   326 000009D0 74EA                <1>     je .exitOK
   327                              <1> ;Update the new cluster and sector information
   328 000009D2 8905(44C70300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   329 000009D8 FF05(40C70300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   330 000009DE E857FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   331 000009E3 488905(4DC70300)    <1>     mov qword [currSectD], rax  ;Save it
   332 000009EA C605(4CC70300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   333 000009F1 EBC9                <1>     jmp short .exitOK
   334                              <1> 
   335                              <1> unlinkFAT:
   336                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   337                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   338                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   339                              <1> ; cluster must be set to EOC before this proc is called.
   340                              <1> ;Stops at first invalid cluster number.
   341                              <1> ;
   342                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   343                              <1> ;       rbp = Current DPB to use for disk
   344                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   345                              <1> 
   346 000009F3 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   347 000009F4 56                  <1>     push rsi
   348 000009F5 E813000000          <1>     call truncateFAT    ;Preserved eax
   349 000009FA 720E                <1>     jc .exit
   350 000009FC 31F6                <1>     xor esi, esi  ;Free first cluster too
   351 000009FE E8DA000000          <1>     call writeFAT
   352 00000A03 7205                <1>     jc .exit
   353 00000A05 E87A010000          <1>     call incrementFreeClusterCount  ;One more cluster freed
   354                              <1> .exit:
   355 00000A0A 5E                  <1>     pop rsi
   356 00000A0B 58                  <1>     pop rax
   357                              <1>     return
    13                              <2> %%_ret:
    14 00000A0C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   358                              <1> 
   359                              <1> truncateFAT:
   360                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   361                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   362                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   363                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   364                              <1> ;Stops at first invalid cluster number.
   365                              <1> ;
   366                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   367                              <1> ;       rbp = Current DPB to use for disk
   368                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   369 00000A0D 50                  <1>     push rax
   370 00000A0E 53                  <1>     push rbx
   371 00000A0F 51                  <1>     push rcx
   372 00000A10 56                  <1>     push rsi
   373 00000A11 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   374                              <1> .lp:
   375 00000A13 E824000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   376 00000A18 721D                <1>     jc .exit    ;Error exit
   377 00000A1A 89C1                <1>     mov ecx, eax   ;Move chain marker to ecx
   378 00000A1C 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   379 00000A1D 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   380 00000A1F E8B9000000          <1>     call writeFAT
   381 00000A24 7211                <1>     jc .exit    ;Error exit
   382 00000A26 E859010000          <1>     call incrementFreeClusterCount  ;Successfully freed the cluster
   383 00000A2B 81F9FFFFFFFF        <1>     cmp ecx, -1 ;End of chain?
   384 00000A31 7404                <1>     je .exit
   385 00000A33 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   386 00000A35 EBDC                <1>     jmp short .lp
   387                              <1> .exit:
   388 00000A37 5E                  <1>     pop rsi
   389 00000A38 59                  <1>     pop rcx
   390 00000A39 5B                  <1>     pop rbx
   391 00000A3A 58                  <1>     pop rax
   392                              <1>     return
    13                              <2> %%_ret:
    14 00000A3B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   393                              <1> readFAT:
   394                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   395                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   396                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   397                              <1> ;       rbp = DPB
   398                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   399                              <1> ;If carry set, getBuffer failed!
   400 00000A3C 53                  <1>     push rbx
   401 00000A3D 51                  <1>     push rcx
   402 00000A3E 52                  <1>     push rdx
   403 00000A3F 57                  <1>     push rdi
   404 00000A40 55                  <1>     push rbp
   405 00000A41 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   406 00000A43 E8A6FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   407                              <1>     ;and FAT type in ecx
   408 00000A48 E8EFFCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   409 00000A4D 7237                <1>     jc .exitFail
   410                              <1>     ;Check if FAT 12, 16, 32
   411 00000A4F 85C9                <1>     test ecx, ecx
   412 00000A51 7439                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   413 00000A53 F7C101000000        <1>     test ecx, 1
   414 00000A59 7413                <1>     jz .goToNextClusterFat32
   415                              <1>     ;Here we handle FAT16
   416 00000A5B 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   417 00000A60 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   418 00000A65 721E                <1>     jb .exit
   419 00000A67 B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   420 00000A6C EB17                <1>     jmp short .exit
   421                              <1> .goToNextClusterFat32:
   422 00000A6E 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   423 00000A72 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   424 00000A77 7207                <1>     jb .validCluster32   
   425 00000A79 B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   426 00000A7E EB05                <1>     jmp short .exit
   427                              <1> .validCluster32:
   428 00000A80 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   429                              <1> .exit:
   430 00000A85 F8                  <1>     clc
   431                              <1> .exitFail:
   432 00000A86 5D                  <1>     pop rbp
   433 00000A87 5F                  <1>     pop rdi
   434 00000A88 5A                  <1>     pop rdx
   435 00000A89 59                  <1>     pop rcx
   436 00000A8A 5B                  <1>     pop rbx
   437                              <1>     return
    13                              <2> %%_ret:
    14 00000A8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> .gotoNextClusterFat12:
   439                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   440                              <1> ;eax has the sector number of the FAT
   441                              <1> ;edx has byte offset into the sector
   442                              <1> ;edi has current cluster number
   443                              <1> ;rbx has ptr to buffer header
   444 00000A8C F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   445 00000A92 742E                <1>     jz .gotoNextClusterFat12Even
   446                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   447 00000A94 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   448 00000A98 29D1                <1>     sub ecx, edx
   449 00000A9A FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   450 00000A9C 751A                <1>     jnz .gotoNextClusterFat12NoCross
   451                              <1>     ;Boundary cross, build entry properly
   452 00000A9E 0FB65C1330          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   453 00000AA3 FFC0                <1>     inc eax ;Get next FAT sector
   454 00000AA5 53                  <1>     push rbx
   455 00000AA6 E891FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   456 00000AAB 59                  <1>     pop rcx ;Get bl in ecx, the last entry from the previous buffer
   457 00000AAC 72D8                <1>     jc .exitFail
   458 00000AAE 89C8                <1>     mov eax, ecx    ;Move the entry if all ok
   459 00000AB0 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   460 00000AB3 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   461 00000AB6 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   462                              <1> .gotoNextClusterFat12NoCross:
   463 00000AB8 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   464 00000ABD C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   465 00000AC0 EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   466                              <1> .gotoNextClusterFat12Even:
   467                              <1>     ;Here the cluster is even and can't cross a sector boundary
   468 00000AC2 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   469 00000AC7 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   470                              <1> .checkIfLastFAT12Cluster:
   471 00000ACC 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   472 00000AD1 72B2                <1>     jb .exit         ;If so, exit with it in eax (and clear CF)
   473 00000AD3 B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   474 00000AD8 E9A8FFFFFF          <1>     jmp .exit
   475                              <1> 
   476                              <1> writeFAT:
   477                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   478                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   479                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   480                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   481                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   482 00000ADD 53                  <1>     push rbx
   483 00000ADE 51                  <1>     push rcx
   484 00000ADF 52                  <1>     push rdx
   485 00000AE0 56                  <1>     push rsi
   486 00000AE1 57                  <1>     push rdi
   487 00000AE2 55                  <1>     push rbp
   488 00000AE3 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   489 00000AE5 E804FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   490                              <1>     ;and FAT type in ecx
   491 00000AEA E84DFCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   492 00000AEF 7223                <1>     jc .exitFail
   493                              <1>     ;Check if FAT 12, 16, 32
   494 00000AF1 85C9                <1>     test ecx, ecx
   495 00000AF3 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   496 00000AF5 F7C101000000        <1>     test ecx, 1
   497 00000AFB 7407                <1>     jz .goToNextClusterFat32
   498                              <1>     ;Here we handle FAT16
   499 00000AFD 6689741330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], si ;Store the value
   500 00000B02 EB0A                <1>     jmp short .exit
   501                              <1> .goToNextClusterFat32:
   502 00000B04 81E6FFFFFF0F        <1>     and esi, 0FFFFFFFh  ;Zero upper nybble
   503 00000B0A 89741330            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], esi
   504                              <1> .exit:
   505 00000B0E E881FAFFFF          <1>     call markBufferDirty
   506 00000B13 F8                  <1>     clc
   507                              <1> .exitFail:
   508 00000B14 5D                  <1>     pop rbp
   509 00000B15 5F                  <1>     pop rdi
   510 00000B16 5E                  <1>     pop rsi
   511 00000B17 5A                  <1>     pop rdx
   512 00000B18 59                  <1>     pop rcx
   513 00000B19 5B                  <1>     pop rbx
   514                              <1>     return
    13                              <2> %%_ret:
    14 00000B1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   515                              <1> .gotoNextClusterFat12:
   516                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   517                              <1> ;eax has the sector number of the FAT
   518                              <1> ;edx has byte offset into the sector
   519                              <1> ;edi has current cluster number
   520                              <1> ;rbx has ptr to buffer header
   521 00000B1B 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   522 00000B21 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   523 00000B27 7445                <1>     jz .gotoNextClusterFat12Even
   524                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   525 00000B29 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   526 00000B2D 29D1                <1>     sub ecx, edx
   527 00000B2F FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   528 00000B31 752C                <1>     jnz .gotoNextClusterFat12NoCross
   529                              <1>     ;Boundary cross, build entry properly
   530                              <1>     ;Replace the high nybble of the low byte 
   531                              <1>     ;breakpoint
   532 00000B33 0FB64C1330          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   533 00000B38 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   534 00000B3E C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   535 00000B41 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   536 00000B43 C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   537 00000B46 884C1330            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   538 00000B4A E845FAFFFF          <1>     call markBufferDirty
   539 00000B4F FFC0                <1>     inc eax ;Get next FAT sector
   540 00000B51 E8E6FBFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   541 00000B56 72BC                <1>     jc .exitFail
   542 00000B58 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   543 00000B5A 884B30              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   544 00000B5D EBAF                <1>     jmp short .exit
   545                              <1> .gotoNextClusterFat12NoCross:
   546 00000B5F 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   547 00000B64 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   548 00000B69 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   549 00000B6C EB0A                <1>     jmp short .fat12common
   550                              <1> .gotoNextClusterFat12Even:
   551                              <1>     ;Here the cluster is even and can't cross a sector boundary
   552 00000B6E 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   553 00000B73 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   554                              <1> .fat12common:
   555 00000B78 09F0                <1>     or eax, esi     ;Add the new entry bits
   556 00000B7A 6689441330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   557 00000B7F E98AFFFFFF          <1>     jmp .exit
   558                              <1> 
   559                              <1> incrementFreeClusterCount:
   560                              <1> ;Cluster Deallocated Function
   561 00000B84 9C                  <1>     pushfq
   562 00000B85 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   563 00000B8C 7403                <1>     je .exit
   564 00000B8E FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters]
   565                              <1> .exit:
   566 00000B91 9D                  <1>     popfq
   567                              <1>     return
    13                              <2> %%_ret:
    14 00000B92 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   568                              <1> decrementFreeClusterCount:
   569                              <1> ;Cluster Allocated Function
   570 00000B93 9C                  <1>     pushfq
   571 00000B94 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   572 00000B9B 7403                <1>     je .exit
   573 00000B9D FF4D31              <1>     dec dword [rbp + dpb.dNumberOfFreeClusters]
   574                              <1> .exit:
   575 00000BA0 9D                  <1>     popfq
   576                              <1>     return
    13                              <2> %%_ret:
    14 00000BA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    27                                  %include "./Source/Kernel/FAT/findfile.asm"
     1                              <1> ;Generic Find First and Find Next functions here
     2                              <1> findNextMain:
     3 00000BA2 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
     4 00000BA9 F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
     5 00000BAC 7408                <1>     jz .notNet
     6 00000BAE B81C110000          <1>     mov eax, 0111Ch ;Netowrk find next
     7 00000BB3 CD4F                <1>     int 4Fh
     8                              <1>     return  ;Return propagating the error code
    13                              <2> %%_ret:
    14 00000BB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> .notNet:
    10 00000BB6 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    11 00000BB8 FEC0                <1>     inc al  ;Convert into 1 based number
    12 00000BBA E8135F0000          <1>     call dosCrit1Enter
    13 00000BBF E8D55A0000          <1>     call setDrive   ;Set CDS and current drive vars
    14 00000BC4 720C                <1>     jc .critError   ;Return error if this fails
    15 00000BC6 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] 
    16 00000BCD E8E9570000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    17                              <1> .critError:
    18 00000BD2 E8055F0000          <1>     call dosCrit1Exit
    19                              <1>     retc    ;Return error if this fails
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000BD7 72DC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    20 00000BD9 E801000000          <1>     call searchMoreDir
    21                              <1>     return
    13                              <2> %%_ret:
    14 00000BDE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> searchMoreDir:
    23                              <1> ;The three directory variables are set up from the ffblock. 
    24                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    25                              <1> ;Current DTA is also used to contain the ff block address
    26                              <1> ;All registers can be trashed
    27 00000BDF 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
    28                              <1>     ;First setup dirClustA and dirSect vars
    29 00000BE6 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA]
    30 00000BED 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    31 00000BF0 8805(ECC60300)      <1>     mov byte [searchAttr], al   ;And save it
    32 00000BF6 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    33 00000BF9 8905(74C70300)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    34 00000BFF 8905(70C70300)      <1>     mov dword [dirClustPar], eax
    35                              <1>     ;Get number of 32 byte entries in a sector
    36 00000C05 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    37 00000C08 8905(7AC70300)      <1>     mov dword [dirEntry], eax
    38                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    39 00000C0E C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    40                              <1>     ;Now get bytes per cluster
    41 00000C11 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    42 00000C13 813D(74C70300)0000- <1>     cmp dword [dirClustA], 0   ;If we at cluster 0, we are in old style root dir
    42 00000C1B 0000                <1>
    43 00000C1D 0F8496000000        <1>     je .oldFat
    44 00000C23 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    45 00000C27 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    46 00000C2B D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    47 00000C2D 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    48 00000C2F 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    49 00000C31 31D2                <1>     xor edx, edx
    50 00000C33 F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    51                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    52                              <1>     ;edx has byte offset into cluster (or Root dir)
    53 00000C35 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    54                              <1>     ;Now compute sector offset into cluster
    55 00000C37 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    56 00000C3B 89D0                <1>     mov eax, edx    ;Move offset into cluster
    57 00000C3D 31D2                <1>     xor edx, edx
    58 00000C3F F7F1                <1>     div ecx 
    59                              <1>     ;eax now has sector offset into cluster
    60                              <1>     ;edx has byte offset into sector 
    61 00000C41 668905(78C70300)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    62 00000C48 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    63                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    64 00000C4E 89D9                <1>     mov ecx, ebx
    65 00000C50 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    66                              <1> .fatlp:
    67 00000C53 E8E4FDFFFF          <1>     call readFAT
    68 00000C58 3DFFFFFFFF          <1>     cmp eax, -1
    69 00000C5D 7477                <1>     je .errorExit
    70 00000C5F FFC9                <1>     dec ecx
    71 00000C61 75F0                <1>     jnz .fatlp
    72 00000C63 8905(74C70300)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    73                              <1> .skipFatWalk:
    74 00000C69 488D05AA000000      <1>     lea rax, searchDir.nextEp
    75 00000C70 50                  <1>     push rax    ;Push the return address onto stack
    76 00000C71 8B05(74C70300)      <1>     mov eax, dword [dirClustA]
    77 00000C77 E8BEFBFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
    78 00000C7C 0FB71D(78C70300)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
    79 00000C83 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
    80                              <1> .common:
    81 00000C86 E8B6FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
    82 00000C8B 0F8224010000        <1>     jc searchDir.hardError
    83 00000C91 E822010000          <1>     call adjustDosDirBuffer  ;rbx has the buffer ptr for this dir sector
    84 00000C96 E8DE010000          <1>     call findInBuffer.getNumberOfEntries    ;Get in ecx # of entries in sector
    85 00000C9B 8B05(7AC70300)      <1>     mov eax, dword [dirEntry]
    86 00000CA1 250F000000          <1>     and eax, 0Fh    ;Get the value modulo 16
    87 00000CA6 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
    88 00000CA8 C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
    89 00000CAB 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
    90                              <1>     ;We continue AS IF this entry was bad
    91                              <1>     ;Now setup al as upon normal entry 
    92 00000CAE 8A05(ECC60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
    93 00000CB4 E96D010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within function
    94                              <1>     ;The return address on the stack will return to the ep's pushed
    95                              <1> .oldFat:
    96                              <1> ;Old FAT 12/16 root dirs fall thru here only
    97                              <1> ;esi = byte ptr in root dir of entry
    98 00000CB9 488D05D9000000      <1>     lea rax, searchDir.oldNextEP
    99 00000CC0 50                  <1>     push rax    ;Push return address onto the stack
   100 00000CC1 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   101 00000CC5 31D2                <1>     xor edx, edx
   102 00000CC7 96                  <1>     xchg esi, eax
   103 00000CC8 F7F6                <1>     div esi ;Divide dir file position by bytes per sector
   104                              <1>     ;eax = Sector number 
   105                              <1>     ;edx = Byte offset within the sector
   106 00000CCA 668905(78C70300)    <1>     mov word [dirSect], ax ;Set the root directory sector offset
   107 00000CD1 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   108 00000CD4 EBB0                <1>     jmp short .common
   109                              <1> .errorExit:
   110 00000CD6 F9                  <1>     stc
   111                              <1>     return
    13                              <2> %%_ret:
    14 00000CD7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   112                              <1> searchDir:
   113                              <1> ;Called in a level 1 critical section. 
   114                              <1> ;The directory variables are set and fcbName has the pattern to match
   115                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   116                              <1> ;All registers can be trashed
   117                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   118                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   119                              <1> 
   120                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   121                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   122 00000CD8 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   123 00000CDF 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   124 00000CE5 7408                <1>     jz .notNet
   125 00000CE7 B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   126 00000CEC CD4F                <1>     int 4fh
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000CEE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> .notNet:
   129 00000CEF 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   130 00000CF6 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   131 00000CFC 85C0                <1>     test eax, eax
   132 00000CFE 747E                <1>     jz .oldRoot
   133 00000D00 E835FBFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   134                              <1> .sectorLoop:
   135 00000D05 E837FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   136 00000D0A 0F82A5000000        <1>     jc .hardError
   137 00000D10 E8A3000000          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   138                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   139 00000D15 E8B2000000          <1>     call findInBuffer
   140                              <1> .nextEp:
   141                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000D1A 73D2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   142 00000D1C 0F848F000000        <1>     jz .fnfError    ;CF=CY AND ZF=ZE => File not found
   143                              <1>     ;If ZF=ZE then fnfError (i.e. we hit an entry starting with 00)
   144                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   145                              <1>     ;IF however, the next cluster is -1, then we return fail
   146 00000D22 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   147 00000D28 8905(44C70300)      <1>     mov dword [currClustD], eax
   148 00000D2E 668B05(78C70300)    <1>     mov ax, word [dirSect]
   149 00000D35 8805(4CC70300)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   150 00000D3B 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   151 00000D3F 488905(4DC70300)    <1>     mov qword [currSectD], rax  
   152 00000D46 C705(40C70300)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   152 00000D4E 0000                <1>
   153 00000D50 E848FCFFFF          <1>     call getNextSectorOfFile
   154 00000D55 725E                <1>     jc .hardError
   155 00000D57 3DFFFFFFFF          <1>     cmp eax, -1
   156 00000D5C 7453                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   157 00000D5E 66FF05(78C70300)    <1>     inc word [dirSect]  ;Goto next sector
   158 00000D65 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   159 00000D6B 3B05(44C70300)      <1>     cmp eax, dword [currClustD] ;Did it change?
   160 00000D71 7492                <1>     je .sectorLoop  ;If not, we advanced sectors only
   161 00000D73 66C705(78C70300)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   161 00000D7B 00                  <1>
   162 00000D7C EB87                <1>     jmp short .sectorLoop 
   163                              <1> 
   164                              <1> .oldRoot:
   165                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   166                              <1> ; one large contiguous cluster.
   167                              <1> .oldSectorLp:
   168 00000D7E 0FB705(78C70300)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   169 00000D85 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   170 00000D88 E8B4F9FFFF          <1>     call getBufForDOS
   171 00000D8D 7226                <1>     jc .hardError
   172 00000D8F E824000000          <1>     call adjustDosDirBuffer      ;rbx has the buffer pointer for this dir sector
   173 00000D94 E833000000          <1>     call findInBuffer
   174                              <1> .oldNextEP:
   175                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000D99 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000D9B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   176 00000D9C 7413                <1>     jz .fnfError
   177 00000D9E 66FF05(78C70300)    <1>     inc word [dirSect]  ;Goto next sector in directory
   178 00000DA5 0FB74509            <1>     movzx eax, word [rbp + dpb.wNumberRootDirEntries]
   179 00000DA9 3905(7AC70300)      <1>     cmp dword [dirEntry], eax ;Have we reached the last dir entry?
   180 00000DAF 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   181                              <1> .fnfError:
   182 00000DB1 B012                <1>     mov al, errNoFil
   183 00000DB3 F9                  <1>     stc
   184                              <1>     return
    13                              <2> %%_ret:
    14 00000DB4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> .hardError:
   186 00000DB5 B0FF                <1>     mov al, -1
   187                              <1>     return
    13                              <2> %%_ret:
    14 00000DB7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   188                              <1> adjustDosDirBuffer:
   189 00000DB8 804B0904            <1>     or byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   190 00000DBC 806309FE            <1>     and byte [rbx + bufferHdr.bufferFlags], ~dosBuffer
   191 00000DC0 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   192 00000DC4 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   193 00000DC8 C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   194                              <1>     return
    13                              <2> %%_ret:
    14 00000DCB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   195                              <1> 
   196                              <1> findInBuffer:
   197                              <1> ;Input:  rsi = Sector buffer data area
   198                              <1> ;Output: CF=CY => No entries found
   199                              <1> ;        ZF=NE => Keep searching in subsequent directories
   200                              <1> ;        ZF=ZE => End of directory reached early, stop
   201                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   202                              <1> ;        rsi = Points to start of the disk buffer directory entry
   203 00000DCC E8A8000000          <1>     call .getNumberOfEntries    ;Get in ecx # of entries in sector
   204 00000DD1 8A05(ECC60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   205 00000DD7 E8AE000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   206                              <1> .searchMainLp:
   207                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   208 00000DDC 8A25(F8C60300)      <1>     mov ah, byte [delChar]
   209 00000DE2 803E00              <1>     cmp byte [rsi], 00h
   210 00000DE5 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   211 00000DE7 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   212 00000DE9 750F                <1>     jne .notLookingForEmpty
   213                              <1> .emptySlot:
   214                              <1> ;Here we check if we are looking for an empty directory entry or
   215                              <1> ; we have reached the end of the file (if the first byte is 00h)
   216                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   217 00000DEB 3A25(C9C60300)      <1>     cmp ah, byte [fcbName] 
   218                              <1>     rete    ;Return if equal (CF=NC too)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000DF1 74D8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   219                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   220 00000DF3 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   221 00000DF6 752E                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   222 00000DF8 F9                  <1>     stc
   223                              <1>     return
    13                              <2> %%_ret:
    14 00000DF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   224                              <1> .notLookingForEmpty:
   225 00000DFA 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   226 00000DFD 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   227 00000E00 803D(5DC40300)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   228 00000E07 7434                <1>     je .exclusiveDir
   229 00000E09 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume only?
   230 00000E0B 7437                <1>     je .volFile ;If so, go here
   231 00000E0D 80FC08              <1>     cmp ah, 08h ;Is this file a volume lbl that we are not looking for?
   232 00000E10 7414                <1>     je .nextEntry
   233 00000E12 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   234 00000E14 7710                <1>     ja .nextEntry
   235                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   236                              <1> .scanName:
   237 00000E16 56                  <1>     push rsi
   238 00000E17 488D3D(C9C60300)    <1>     lea rdi, fcbName ;Goto name template to search for
   239 00000E1E E83E000000          <1>     call .nameCompare
   240 00000E23 5E                  <1>     pop rsi
   241 00000E24 7424                <1>     je .searchEntryFound
   242                              <1> .nextEntry:
   243                              <1> ;Go to next entry
   244 00000E26 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   245 00000E2D FF05(7AC70300)      <1>     inc dword [dirEntry] ;And denote that in variable
   246 00000E33 FFC9                <1>     dec ecx
   247 00000E35 75A5                <1>     jnz .searchMainLp
   248                              <1> .badExit:
   249 00000E37 31C0                <1>     xor eax, eax
   250 00000E39 FFC0                <1>     inc eax ;Clear ZF
   251 00000E3B F9                  <1>     stc
   252                              <1>     return
    13                              <2> %%_ret:
    14 00000E3C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   253                              <1> .exclusiveDir:
   254                              <1> ;Used when going down a path, dir bit simply need be set
   255 00000E3D F6C410              <1>     test ah, dirDirectory
   256 00000E40 75D4                <1>     jnz .scanName
   257 00000E42 EBE2                <1>     jmp short .nextEntry
   258                              <1> 
   259                              <1> .volFile:
   260 00000E44 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   261 00000E46 74CE                <1>     je .scanName       ;If so, scan the name agrees
   262 00000E48 EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   263                              <1> 
   264                              <1> .searchEntryFound:
   265                              <1> ;Here a good entry was found!
   266 00000E4A 56                  <1>     push rsi
   267 00000E4B 57                  <1>     push rdi
   268 00000E4C 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   269 00000E4E 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
   270 00000E55 B904000000          <1>     mov ecx, 32/8
   271 00000E5A F348A5              <1>     rep movsq   ;Copy the directory to SDA
   272 00000E5D 5F                  <1>     pop rdi
   273 00000E5E 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   274 00000E5F F8                  <1>     clc
   275                              <1>     return
    13                              <2> %%_ret:
    14 00000E60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> 
   277                              <1> .nameCompare:
   278                              <1> ;Input: rsi = source string
   279                              <1> ;       rdi = string template to compare against
   280                              <1> ;Output: ZF=ZE => Strings are ok
   281                              <1> ;        ZF=NZ => Strings not ok
   282                              <1> ;Accepts wildcards. Trashes al
   283 00000E61 51                  <1>     push rcx
   284 00000E62 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   285                              <1> .ncLp:
   286 00000E64 81F90B000000        <1>     cmp ecx, 11
   287 00000E6A 740B                <1>     je .ncExit
   288 00000E6C FFC1                <1>     inc ecx
   289 00000E6E A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   290 00000E6F 74F3                <1>     je .ncLp    ;If equal, keep going
   291 00000E71 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   292 00000E75 74ED                <1>     je .ncLp
   293                              <1> .ncExit:
   294 00000E77 59                  <1>     pop rcx
   295                              <1>     return
    13                              <2> %%_ret:
    14 00000E78 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> .getNumberOfEntries:
   297 00000E79 55                  <1>     push rbp
   298 00000E7A 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   299 00000E81 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   300 00000E85 C1E905              <1>     shr ecx, 5  ;Divide by 32
   301 00000E88 5D                  <1>     pop rbp
   302                              <1>     return
    13                              <2> %%_ret:
    14 00000E89 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   303                              <1> adjustSearchAttr:
   304                              <1> ;Converts the byte to a system only if the bit is set
   305                              <1> ;Input: eax = User selected search mask
   306                              <1> ;Output: eax = Modified search mask
   307 00000E8A 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   308 00000E8F A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   309                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E94 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   310 00000E96 B808000000          <1>     mov eax, dirVolumeID
   311                              <1>     return
    13                              <2> %%_ret:
    14 00000E9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   312                              <1> 
   313                              <1> asciiToFCB:
   314                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   315                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   316                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   317                              <1> ;Name is space padded.
   318                              <1> ;Input: rsi = ASCII string buffer
   319                              <1> ;       rdi = FCB name buffer
   320                              <1> ;Output: al = Char that terminated the source string 
   321 00000E9C 53                  <1>     push rbx    
   322 00000E9D 57                  <1>     push rdi
   323 00000E9E B90B000000          <1>     mov ecx, 11
   324 00000EA3 B020                <1>     mov al, " "
   325 00000EA5 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   326 00000EA7 5F                  <1>     pop rdi
   327 00000EA8 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   328                              <1> .processName:
   329 00000EAB AC                  <1>     lodsb   ;Get the char in al
   330 00000EAC E8EA580000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   331 00000EB1 84C0                <1>     test al, al
   332 00000EB3 742D                <1>     jz .exit
   333 00000EB5 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   334 00000EB7 740E                <1>     je .extSpace
   335 00000EB9 3C2E                <1>     cmp al, "."
   336 00000EBB 7413                <1>     je .ext
   337                              <1>     ;Test if the char is valid
   338 00000EBD E81A5A0000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   339 00000EC2 741E                <1>     jz .exit    ;If the char invalid, consider it a terminator
   340 00000EC4 AA                  <1>     stosb   ;Store the char
   341 00000EC5 EBE4                <1>     jmp short .processName
   342                              <1> .extSpace:
   343                              <1> ;Now we scan for a period in the name
   344 00000EC7 AC                  <1>     lodsb   ;Get a char and increase rsi
   345 00000EC8 84C0                <1>     test al, al
   346 00000ECA 7416                <1>     jz .exit
   347 00000ECC 3C2E                <1>     cmp al, "."     ;If al is not a period...
   348 00000ECE 75F7                <1>     jne .extSpace   ; keep searching
   349                              <1> .ext:
   350 00000ED0 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   351                              <1> .processExt:
   352 00000ED4 AC                  <1>     lodsb
   353 00000ED5 84C0                <1>     test al, al
   354 00000ED7 7409                <1>     jz .exit
   355 00000ED9 3C20                <1>     cmp al, " "
   356 00000EDB 7405                <1>     je .exit
   357 00000EDD AA                  <1>     stosb
   358 00000EDE EBF4                <1>     jmp short .processExt
   359                              <1> .exitBadChar:
   360 00000EE0 30C0                <1>     xor al, al  ;Return a null terminator
   361                              <1> .exit:
   362 00000EE2 5B                  <1>     pop rbx
   363                              <1>     return
    13                              <2> %%_ret:
    14 00000EE3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> 
   365                              <1> FCBToAsciiz:
   366                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   367                              <1> ;Name is space padded too
   368                              <1> ;Input: rsi = FCB name buffer
   369                              <1> ;       rdi = ASCIIZ string buffer
   370 00000EE4 B908000000          <1>     mov ecx, 8
   371 00000EE9 F3A4                <1>     rep movsb   ;Move the name over
   372                              <1> .scanNameSpace:
   373 00000EEB 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   374 00000EEF 750D                <1>     jne .ext
   375 00000EF1 48FFCF              <1>     dec rdi
   376 00000EF4 FFC1                <1>     inc ecx
   377 00000EF6 81F908000000        <1>     cmp ecx, 8
   378 00000EFC 72ED                <1>     jb .scanNameSpace
   379                              <1> .ext:
   380 00000EFE 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   381 00000F03 7506                <1>     jne .validExt
   382 00000F05 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   383 00000F09 7415                <1>     je .exit
   384                              <1> .validExt:
   385 00000F0B B02E                <1>     mov al, "." ;We have a valid extension, store a period
   386 00000F0D AA                  <1>     stosb
   387 00000F0E B903000000          <1>     mov ecx, 3
   388 00000F13 F3A4                <1>     rep movsb   ;Move the three extension chars over
   389                              <1> .scanExtSpace:
   390 00000F15 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   391 00000F19 7505                <1>     jne .exit
   392 00000F1B 48FFCF              <1>     dec rdi
   393 00000F1E EBF5                <1>     jmp short .scanExtSpace
   394                              <1> .exit:
   395 00000F20 31C0                <1>     xor eax, eax
   396 00000F22 AA                  <1>     stosb   ;Store a null at the end
   397                              <1>     return
    13                              <2> %%_ret:
    14 00000F23 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> setupFFBlock:
   400                              <1> ;Sets up the find first block for the search
   401                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   402 00000F24 50                  <1>     push rax
   403 00000F25 53                  <1>     push rbx
   404 00000F26 56                  <1>     push rsi
   405 00000F27 57                  <1>     push rdi
   406 00000F28 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   407 00000F2B 8A05(ECC60300)      <1>     mov al, byte [searchAttr]
   408 00000F31 243F                <1>     and al, 3Fh ;Clear upper two bits
   409 00000F33 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   410 00000F36 0FB605(F9C60300)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   411 00000F3D 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   412                              <1>     ;xchg bx, bx
   413 00000F3F 488D35(C9C60300)    <1>     lea rsi, fcbName
   414 00000F46 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   415 00000F4A 57                  <1>     push rdi
   416 00000F4B 48B820202020202020- <1>     mov rax, "        "
   416 00000F54 20                  <1>
   417 00000F55 48AB                <1>     stosq
   418 00000F57 66AB                <1>     stosw
   419 00000F59 AA                  <1>     stosb
   420 00000F5A 5F                  <1>     pop rdi
   421 00000F5B 48A5                <1>     movsq   ;Move 8 chars
   422 00000F5D 66A5                <1>     movsw   ;Move 2 chars
   423 00000F5F A4                  <1>     movsb   ;Move the final char
   424                              <1> 
   425 00000F60 8B05(7AC70300)      <1>     mov eax, dword [dirEntry]
   426 00000F66 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   427 00000F69 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]
   428 00000F6F 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   429 00000F72 8A05(59C60300)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   430 00000F78 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   431 00000F7B 8B05(64C60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   432 00000F81 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   433 00000F84 8B05(6AC60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   434 00000F8A 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   435 00000F8D 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   436 00000F91 488D35(4EC60300)    <1>     lea rsi, curDirCopy
   437 00000F98 E847FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   438                              <1> 
   439 00000F9D 5F                  <1>     pop rdi
   440 00000F9E 5E                  <1>     pop rsi
   441 00000F9F 5B                  <1>     pop rbx
   442 00000FA0 58                  <1>     pop rax
   443                              <1>     return
    13                              <2> %%_ret:
    14 00000FA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> getDrvLetterFromPath:   ;Int 4Fh, AX=121Ah
   446                              <1> ;Gets the drive letter for the path in al
   447                              <1> ;Input: rsi = Buffer to process
   448                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   449                              <1> ;       ZF=ZE and al = 0 => Null path
   450                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   451                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   452                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   453 00000FA2 30C0                <1>     xor al, al
   454 00000FA4 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   455                              <1>     retz    ;Return if a null path
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FA7 74F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   456 00000FA9 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   457                              <1>     retne   ;If not equal, Relative path or network path
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FAD 75F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   458 00000FAF 66AD                <1>     lodsw   ;Get first word, rsi += 2
   459                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   460 00000FB1 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   461 00000FB3 2C60                <1>     sub al, 60h
   462                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FB5 75EA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   463 00000FB7 B0FF                <1>     mov al, -1  ;Else not a valid drive number
   464                              <1>     return
    13                              <2> %%_ret:
    14 00000FB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   465                              <1> canonicaliseFileName:
   466                              <1> ;Always trying to build and qualify a full pathname
   467                              <1> ;Does getPath without hitting the disk
   468 00000FBA B0FF                <1>     mov al, -1
   469 00000FBC 8805(5DC40300)      <1>     mov byte [fileDirFlag], al  
   470 00000FC2 8805(F1C60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   471 00000FC8 48893D(12C60300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   472 00000FCF FEC0                <1>     inc al  ;make al = 0
   473 00000FD1 8805(22C60300)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   474 00000FD7 E854000000          <1>     call getPath.epAlt
   475                              <1>     retc    ;Return if an error
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FDC 72DB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   476 00000FDE 48FFCF              <1>     dec rdi ;Point to what should be the null char
   477 00000FE1 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Was the prev char a drive sep?
   478 00000FE5 7503                <1>     jne .storeNull
   479 00000FE7 B05C                <1>     mov al, "\"
   480 00000FE9 AA                  <1>     stosb   ;Store the pathsep and increment rdi
   481                              <1> .storeNull:
   482 00000FEA 803F00              <1>     cmp byte [rdi], 0   ;Ensure path is null terminated (and clear CF)
   483                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FED 74CA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   484 00000FEF C60700              <1>     mov byte [rdi], 0   ;Store a terminating zero if necessary
   485                              <1>     return
    13                              <2> %%_ret:
    14 00000FF2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   486                              <1> getDirPathNoCanon:
   487 00000FF3 31C0                <1>     xor eax, eax
   488 00000FF5 4889FE              <1>     mov rsi, rdi
   489 00000FF8 EB1B                <1>     jmp short getPath.noCanon
   490                              <1> getFilePathNoCanon:
   491                              <1> ;Used when the path is constructed internally (as for FCB functions)
   492                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   493 00000FFA B0FF                <1>     mov al, -1
   494 00000FFC 4889FE              <1>     mov rsi, rdi
   495 00000FFF EB14                <1>     jmp short getPath.noCanon
   496                              <1> getDirPath:
   497 00001001 30C0                <1>     xor al, al   ;Set to Directory
   498 00001003 EB02                <1>     jmp short getPath
   499                              <1> getFilePath:
   500 00001005 B0FF                <1>     mov al, -1  ;Set to File
   501                              <1> getPath:
   502                              <1> ;Determines whether the path is spliced or not and transfers the chars
   503                              <1> ; from the user buffer into an internal buffer, normalising them.
   504                              <1> ; Single and double dot entries are left as is, but the wildcard * is converted
   505                              <1> ; to ?. Wildcards can only be present in the LAST portion of the given path.
   506                              <1> ; If the portion with wildcards does not end with an ASCII null, we fail the 
   507                              <1> ; request with pnf. If there is a redirector which needs to normalise the path, 
   508                              <1> ; we let it do its thing and return.
   509                              <1> ;If the user requests data from a remote server (i.e. a pathspec starting with
   510                              <1> ; \\) then wildcards, the colon and dots are forbidden.
   511                              <1> ;If a remote user requests data (dosInvoke = -1), then the pathspec must be an
   512                              <1> ; absolute path (no wildcards or dots) and must begin with a drive letter 
   513                              <1> ; (converted from using machine name by the net client program).
   514                              <1> ;We check if we are a net invoke to ensure that the pathspec that was recieved
   515                              <1> ; was good.
   516                              <1> ;Called with:
   517                              <1> ; rdi = SDA Buffer for filename
   518                              <1> ; rsi = Potentially unqualified filename
   519                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   520 00001007 50                  <1>     push rax
   521 00001008 57                  <1>     push rdi
   522 00001009 E8ACFFFFFF          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   523 0000100E 5F                  <1>     pop rdi
   524 0000100F 58                  <1>     pop rax
   525 00001010 4889FE              <1>     mov rsi, rdi    ;Use the newly built path as the source
   526                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001013 72DD                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   527                              <1> .noCanon:
   528 00001015 8805(5DC40300)      <1>     mov byte [fileDirFlag], al  
   529 0000101B B0FF                <1>     mov al, -1
   530 0000101D 8805(F1C60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   531 00001023 48893D(12C60300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   532 0000102A 8805(22C60300)      <1>     mov byte [skipDisk], al  ;Store -1 to NOT skip checking the file on disk
   533                              <1> .epAlt:
   534 00001030 C605(F5C60300)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   535 00001037 C605(F4C60300)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   536 0000103E F605(F2C60300)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   537 00001045 7428                <1>     jz .notServer
   538                              <1>     ;In this case, the client network program will have correctly
   539                              <1>     ; substituted the drive letter for the path before making the request.
   540                              <1>     ;Thus we can immediately assume the existance of a drive letter in the path 
   541 00001047 E856FFFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in X:    call getCDS ;Get the cds for the drive letter on the path
   543                              <1>     ;REMEMBER, FOR ALL THE LOGIC TO WORK, HERE WE MUST ENSURE THE PATH
   544                              <1>     ; CONTAINS NO . or .., NO INVALID CHARS OR MULTIPLE \\ AND IS 0 TERMINATED.
   545                              <1>     ;We do not scan for this criteria but the client program must adhere to 
   546                              <1>     ; these requirements.
   547                              <1>     ;When a server request is made, the request can ONLY be for a file on
   548                              <1>     ; a CDS drive.
   549 0000104C FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   550 0000104E 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   551 00001055 50                  <1>     push rax
   552 00001056 E8775A0000          <1>     call dosCrit1Enter
   553 0000105B E85B530000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   554 00001060 E8775A0000          <1>     call dosCrit1Exit
   555 00001065 58                  <1>     pop rax
   556 00001066 0F8382000000        <1>     jnc .driveOk
   557                              <1> .serverExit:
   558 0000106C B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   559                              <1>     return
    13                              <2> %%_ret:
    14 0000106E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   560                              <1> .notServer:
   561                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   562 0000106F 48C705(02C70300)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   562 00001077 FFFFFF              <1>
   563 0000107A B823110000          <1>     mov eax, 1123h
   564 0000107F CD4F                <1>     int 4fh ;CF=CY if not resolved. CF=NC if resolved
   565                              <1>     retnc  ;Return if resolved
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001081 73EB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   566 00001083 E81AFFFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   567 00001088 9C                  <1>     pushfq  ;Save the flag state on stack
   568 00001089 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   569 0000108A 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   570 0000108D E8FD560000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   571 00001092 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. \\)
   572 00001094 E8F6560000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   573 00001099 7543                <1>     jnz .notNet
   574 0000109B 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   575 0000109D 753F                <1>     jne .notNet
   576 0000109F 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   577 000010A0 9D                  <1>     popfq
   578 000010A1 66AD                <1>     lodsw
   579 000010A3 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   580 000010A7 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   581                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   582                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   583                              <1> ; redirector Find First Without CDS
   584                              <1> 
   585 000010A9 8A1D(22C60300)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   586 000010AF C605(22C60300)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   587 000010B6 53                  <1>     push rbx
   588                              <1> .moveNetChars:
   589 000010B7 AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   590 000010B8 E8DE560000          <1>     call uppercaseChar  ;Make char in al uppercase
   591 000010BD 84C0                <1>     test al, al
   592 000010BF 740F                <1>     jz .netEnd
   593 000010C1 E8C9560000          <1>     call swapPathSeparator  ;If path sep, swap it
   594 000010C6 AA                  <1>     stosb
   595 000010C7 75EE                <1>     jnz .moveNetChars  ;If not a path separating char in al, keep looking
   596 000010C9 E85C000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   597 000010CE EBE7                <1>     jmp short .moveNetChars
   598                              <1> .netEnd:
   599 000010D0 5B                  <1>     pop rbx
   600 000010D1 AA                  <1>     stosb
   601 000010D2 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   602                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000010D4 7498                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   603 000010D6 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   604 000010DB CD4F                <1>     int 4Fh
   605                              <1>     return
    13                              <2> %%_ret:
    14 000010DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   606                              <1> .notNet:
   607                              <1> ;This is the normal case; paths can be relative, or absolute.
   608 000010DE 58                  <1>     pop rax ;Get the drive letter back
   609 000010DF 9D                  <1>     popfq   ;Get the flag state back
   610 000010E0 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   611                              <1> .pnfErr:
   612 000010E2 B003                <1>     mov al, errPnf  ;Null path error
   613 000010E4 F9                  <1>     stc
   614                              <1>     return
    13                              <2> %%_ret:
    14 000010E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   615                              <1> .notNull:
   616 000010E6 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   617 000010E8 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   618 000010EA B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   619 000010EC F9                  <1>     stc
   620                              <1>     return
    13                              <2> %%_ret:
    14 000010ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   621                              <1> .driveOk:
   622 000010EE 84C0                <1>     test al, al
   623 000010F0 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   624                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   625 000010F2 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   626 000010F5 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   627 000010F7 50                  <1>     push rax    ;Save the drive letter
   628 000010F8 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   629 000010F9 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   630 000010FC E88E560000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   631                              <1>     ;If al is a path separator, then this path is absolute.
   632 00001101 58                  <1>     pop rax ;Get back the drive letter
   633 00001102 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   634                              <1> .absoPath:
   635                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   636 00001104 48FFC6              <1>     inc rsi
   637 00001107 EB1A                <1>     jmp short .commonDir
   638                              <1> .curPath:
   639                              <1> ;This is only jumped to if we are relative the current drive
   640                              <1> ;rsi points to first char in path
   641                              <1> ;If this char is \ or /, then it is an absolute path.
   642 00001109 8A05(26C40300)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   643 0000110F FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   644 00001111 50                  <1>     push rax    ;Save the current drive number
   645 00001112 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   646 00001114 E876560000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   647 00001119 58                  <1>     pop rax ;Get back the current drive number
   648 0000111A 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   649                              <1> .relMain:
   650 0000111C C605(F1C60300)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   651                              <1> .commonDir:
   652                              <1> ;rsi points to the start of the string we will be appending
   653                              <1> ;Fall through now
   654                              <1> pathWalk:
   655                              <1> ;Input: rsi must point to source buffer for path to expand
   656                              <1> ;       rdi must point to a destination buffer
   657                              <1> ;       al must contain the drive 1 based number
   658 00001123 E8B5000000          <1>     call prepareDir    ;Prepare the dir if the drive is subst/join drive
   659 00001128 727C                <1>     jc .badDriveExit
   660                              <1>     ;If the user requests to .. to a point before rbx, we fail if a disk
   661                              <1>     ; resolution
   662                              <1> .netEp: ;For net path resolution (resolution ONLY) ptrs must point past "\\"
   663 0000112A 4889FB              <1>     mov rbx, rdi
   664                              <1>     ;If rsi at the end of the string, exit for ROOT dir
   665 0000112D 803E00              <1>     cmp byte [rsi], 0
   666 00001130 7512                <1>     jnz .mainlp
   667                              <1>     ;Setup dummy dir data
   668 00001132 31C0                <1>     xor eax, eax
   669 00001134 668905(62C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   670 0000113B 668905(68C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   671 00001142 EB68                <1>     jmp short .exitGood
   672                              <1> .mainlp:
   673 00001144 E868010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   674 00001149 84C0                <1>     test al, al
   675 0000114B 7507                <1>     jnz .notFile
   676 0000114D C605(F5C60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   677                              <1> .notFile:
   678 00001154 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   679 00001155 E856030000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   680 0000115A 58                  <1>     pop rax
   681 0000115B 736B                <1>     jnc .deviceFound
   682 0000115D E816020000          <1>     call searchForPathspec  ;and search the directory
   683 00001162 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   684 00001164 E865020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   685 00001169 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   686 0000116B 84C0                <1>     test al, al ;Exit if this pathspec was a file
   687 0000116D 743D                <1>     jz .exitGood
   688                              <1>     ;Here I have to take the cluster data from the found directory entry
   689                              <1>     ; and setup the search for the next pathspec portion
   690                              <1>     ;Copy necessary data from the current directory copy
   691 0000116F 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   692 00001176 74CC                <1>     jz .mainlp
   693 00001178 0FB705(62C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   694 0000117F C1E010              <1>     shl eax, 10h    ;Shift it high
   695 00001182 668B05(68C60300)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   696                              <1>     ;eax now has the cluster number of the search
   697 00001189 8905(74C70300)      <1>     mov dword [dirClustA], eax
   698 0000118F 8905(70C70300)      <1>     mov dword [dirClustPar], eax
   699 00001195 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   700 00001197 8905(7AC70300)      <1>     mov dword [dirEntry], eax
   701 0000119D 668905(78C70300)    <1>     mov word [dirSect], ax
   702 000011A4 EB9E                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   703                              <1> .badDriveExit:
   704 000011A6 B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   705                              <1>     return
    13                              <2> %%_ret:
    14 000011AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   706                              <1> .exitGood:
   707 000011AC C605(F4C60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   708                              <1> .exit:
   709                              <1>     return
    13                              <2> %%_ret:
    14 000011B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   710                              <1> .checkDev:
   711                              <1> ;If the return code is errNoFil AND Int44Fail = 0, then we check to see if 
   712                              <1> ; we are in \DEV pseudo dir
   713 000011B4 F605(5EC40300)FF    <1>     test byte [Int44Fail], -1   ;Make sure we are not returning from a FAIL
   714 000011BB 751D                <1>     jnz .nodev  ;If any bits set, ignore this check
   715                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   716 000011BD 56                  <1>     push rsi
   717 000011BE 57                  <1>     push rdi
   718 000011BF E87A020000          <1>     call checkDevPath
   719 000011C4 5F                  <1>     pop rdi
   720 000011C5 5E                  <1>     pop rsi
   721 000011C6 72EB                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   722                              <1> .deviceFound:
   723 000011C8 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   724 000011CA C605(F5C60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   725 000011D1 C605(F4C60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   726 000011D8 EBD9                <1>     jmp short .exit   
   727                              <1> .nodev:
   728 000011DA F9                  <1>     stc
   729 000011DB EBD6                <1>     jmp short .exit
   730                              <1> 
   731                              <1> prepareDir:
   732                              <1> ;Used to transfer the current directory if it is necessary.
   733                              <1> ;Always necessary if the user specified a subst/join drive. Else only if 
   734                              <1> ; relative
   735                              <1> ;Input: al = 1-based drive letter
   736                              <1> ;Output: rdi = Pointing at where to place chars from source string
   737                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   738 000011DD 56                  <1>     push rsi
   739 000011DE E8EF580000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   740 000011E3 E8B1540000          <1>     call setDrive   ;Set internal variables, working CDS etc etc
   741 000011E8 720D                <1>     jc .critExit    ;If the drive number in al is too great or drive invalid
   742 000011EA 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] 
   743 000011F1 57                  <1>     push rdi    ;Push CDS pointer on stack...
   744 000011F2 E8C4510000          <1>     call getDiskDPB  ;Update working DPB and drv before searching, dpbptr in rbp
   745                              <1> .critExit:
   746 000011F7 E8E0580000          <1>     call dosCrit1Exit
   747 000011FC 5E                  <1>     pop rsi     ; ...and get CDS pointer in rsi
   748 000011FD 724A                <1>     jc .badDriveExit 
   749 000011FF 488B3D(12C60300)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   750                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   751                              <1>     ;If this CDS is a join drive, copy the first 3 chars and up to the next 
   752                              <1>     ;   terminating char (\, / or Null)
   753                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   754                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   755 00001206 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive
   756 0000120C 753D                <1>     jnz .prepDirJoin
   757 0000120E 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   758 00001214 7556                <1>     jnz .prepDirSubst
   759                              <1> .prepMain:
   760                              <1> ;Ok so now preliminary copy complete, now we check if path spliced
   761 00001216 F605(F1C60300)FF    <1>     test byte [spliceFlag], -1
   762 0000121D 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   763                              <1>     ;Else we copy the first two chars only (X:)
   764 0000121F 66A5                <1>     movsw  
   765 00001221 B05C                <1>     mov al, "\"
   766 00001223 AA                  <1>     stosb   ;Store the path separator and increment rdi
   767 00001224 31C0                <1>     xor eax, eax    ;Get cluster 0
   768 00001226 EB1B                <1>     jmp short .prepDirExitSkip
   769                              <1> .prepLoop:
   770 00001228 AC                  <1>     lodsb
   771 00001229 84C0                <1>     test al, al ;If al was null, then we stop
   772 0000122B 7403                <1>     jz .prepDirExit
   773 0000122D AA                  <1>     stosb
   774 0000122E EBF8                <1>     jmp short .prepLoop
   775                              <1> .prepDirExit:
   776 00001230 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   777 00001234 7403                <1>     je .prepDirExitSkipPathsep
   778 00001236 B05C                <1>     mov al, "\"
   779 00001238 AA                  <1>     stosb   ;Store the path separator and increment rdi
   780                              <1> .prepDirExitSkipPathsep:
   781 00001239 488B35(02C70300)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   782 00001240 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   783                              <1> .prepDirExitSkip:
   784 00001243 E837000000          <1>     call .prepSetupDirSearchVars
   785 00001248 F8                  <1>     clc ;Clear carry before exiting
   786                              <1> .badDriveExit:
   787 00001249 5E                  <1>     pop rsi
   788                              <1>     return
    13                              <2> %%_ret:
    14 0000124A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   789                              <1> .prepDirJoin:
   790 0000124B 51                  <1>     push rcx
   791 0000124C 56                  <1>     push rsi
   792 0000124D 4881C602000000      <1>     add rsi, 2  ;Goto the backslash for the dir
   793 00001254 B902000000          <1>     mov ecx, 2  ;Instantiate ecx to copy X:
   794                              <1> .prepDirJoin1:
   795 00001259 AC                  <1>     lodsb   ;Get the char
   796 0000125A 84C0                <1>     test al, al ;Null char?
   797 0000125C 740B                <1>     jz .prepDirJoin2
   798 0000125E E82C550000          <1>     call swapPathSeparator
   799 00001263 7404                <1>     jz .prepDirJoin2
   800 00001265 FFC1                <1>     inc ecx ;Accrue length to copy
   801 00001267 EBF0                <1>     jmp short .prepDirJoin1
   802                              <1> .prepDirJoin2:
   803 00001269 5E                  <1>     pop rsi ;Return rsi to the start of the buffer
   804 0000126A EB05                <1>     jmp short .prepDirCopy1
   805                              <1> .prepDirSubst:
   806 0000126C 51                  <1>     push rcx
   807 0000126D 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   808                              <1> .prepDirCopy1:
   809 00001271 F3A4                <1>     rep movsb   ;Copy the string over
   810 00001273 59                  <1>     pop rcx
   811 00001274 F605(F1C60300)FF    <1>     test byte [spliceFlag], -1
   812 0000127B 75B3                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   813 0000127D EBA9                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   814                              <1> .prepSetupDirSearchVars:
   815                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   816                              <1> ;       rbp = DPB pointer for the device which will do transaction
   817 0000127F 51                  <1>     push rcx
   818 00001280 31C9                <1>     xor ecx, ecx
   819 00001282 66890D(78C70300)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   820 00001289 890D(7AC70300)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   821 0000128F E83BF5FFFF          <1>     call getFATtype ;Get type of fat
   822 00001294 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   823 0000129A 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   824                              <1>     ;FAT 32 here
   825 0000129C 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   826 0000129E 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   827 000012A0 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   828                              <1> .psdsvExit:
   829 000012A3 8905(74C70300)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   830 000012A9 8905(70C70300)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   831 000012AF 59                  <1>     pop rcx
   832                              <1>     return 
    13                              <2> %%_ret:
    14 000012B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   833                              <1> 
   834                              <1> copyPathspec:
   835                              <1> ;1) Copies a path portion from the source buffer to the destination
   836                              <1> ;2) Advances rsi to the next null, \ or /
   837                              <1> ;3) Expands all * to ?'s
   838                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   839                              <1> ;    next path separator and rdi pointing to the previous pathsep
   840                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   841                              <1> ;    with rsi moving to path separator
   842                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   843                              <1> ;
   844                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   845                              <1> ;           rdi = Points to where to store it
   846                              <1> ;
   847                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   848                              <1> ;           rdi = First char of next space to store next pathspec
   849                              <1> ;           al = Last char stored (either \ or NULL)
   850                              <1> ;           CF=NC = OK path
   851                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   852                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   853 000012B1 57                  <1>     push rdi    ;Save the pointer into the user buffer
   854 000012B2 C605(81C40300)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   855 000012B9 488D3D(C9C60300)    <1>     lea rdi, fcbName
   856 000012C0 57                  <1>     push rdi
   857 000012C1 B903000000          <1>     mov ecx, 3
   858 000012C6 B820202020          <1>     mov eax, "    " ;Four spaces
   859 000012CB F3AB                <1>     rep stosd   ;Store 12 spaces
   860 000012CD 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   861                              <1> 
   862 000012CE 488D1D(D4C60300)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   863 000012D5 AC                  <1>     lodsb   ;Get first char from user path in al
   864 000012D6 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   865 000012D8 745B                <1>     je .cpsDots
   866 000012DA 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   867                              <1> ;First char is not a dot, so now check if starts with E5h? 
   868                              <1> ;If so, store 05h in its place! KANJI SUPPORT WOOHOO!
   869 000012DD 3CE5                <1>     cmp al, 0E5h
   870 000012DF 7506                <1>     jne .cpsMainLoop
   871 000012E1 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   872 000012E4 B005                <1>     mov al, 05h
   873 000012E6 AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   874                              <1> .cpsMainLoop:
   875 000012E7 AC                  <1>     lodsb   ;Get the char in al and advance rsi
   876 000012E8 84C0                <1>     test al, al ;Is it the null char?
   877 000012EA 7471                <1>     jz .cpsStore  ;If so, terminate immediately
   878 000012EC E89E540000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   879 000012F1 746A                <1>     jz .cpsStore ; and then exit with the final converted pathsep in al
   880 000012F3 3C2E                <1>     cmp al, "." ;Filename extension separator
   881 000012F5 7420                <1>     je .cpsExtension
   882                              <1>     ;If we have space in the filename, we check to see if the next char is *
   883 000012F7 3C2A                <1>     cmp al, "*" ;Wildcard?
   884 000012F9 7430                <1>     je .cpsWildcard
   885 000012FB 3C3F                <1>     cmp al, "?" ;Good wildcard?
   886 000012FD 740C                <1>     je .store
   887 000012FF E897540000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   888 00001304 E8D3550000          <1>     call checkCharValid ; and check it is a valid char
   889 00001309 7408                <1>     je .cpsInvalidChar  ;If it is not valid, replace with 0 and exit
   890                              <1> .store:
   891 0000130B 4839DF              <1>     cmp rdi, rbx
   892 0000130E 742D                <1>     je .cpsProcessName ;Skip any non-terminating chars
   893 00001310 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   894 00001311 EBD4                <1>     jmp short .cpsMainLoop
   895                              <1> .cpsInvalidChar:
   896 00001313 30C0                <1>     xor al, al
   897 00001315 EB26                <1>     jmp short .cpsProcessName
   898                              <1> .cpsExtension:
   899                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   900 00001317 B903000000          <1>     mov ecx, 3 
   901 0000131C 488D3D(D1C60300)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   902 00001323 57                  <1>     push rdi
   903 00001324 B020                <1>     mov al, " "
   904 00001326 F3AA                <1>     rep stosb
   905 00001328 5F                  <1>     pop rdi
   906 00001329 EBBC                <1>     jmp short .cpsMainLoop
   907                              <1> .cpsWildcard:
   908 0000132B B03F                <1>     mov al, "?"
   909                              <1> .cpsWildcardLp:
   910 0000132D AA                  <1>     stosb
   911 0000132E 4839DF              <1>     cmp rdi, rbx
   912 00001331 75FA                <1>     jne .cpsWildcardLp
   913 00001333 EBB2                <1>     jmp short .cpsMainLoop
   914                              <1> 
   915                              <1> .cpsDots:
   916 00001335 AA                  <1>     stosb   ;Store the first dot
   917 00001336 8A06                <1>     mov al, byte [rsi]
   918 00001338 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   919 0000133A 752B                <1>     jne .oneDotResolve
   920 0000133C A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   921                              <1> 
   922                              <1> .cpsProcessName:
   923                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
   924 0000133D 84C0                <1>     test al, al 
   925 0000133F 741C                <1>     jz .cpsStore
   926 00001341 E849540000          <1>     call swapPathSeparator
   927 00001346 7415                <1>     jz .cpsStore
   928                              <1> .cpsFindTerminator:
   929 00001348 AC                  <1>     lodsb
   930 00001349 84C0                <1>     test al, al 
   931 0000134B 7410                <1>     jz .cpsStore
   932 0000134D E83D540000          <1>     call swapPathSeparator
   933 00001352 7409                <1>     jz .cpsStore
   934 00001354 E883550000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
   935 00001359 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
   936                              <1>     ;If we encounter a terminator, convert to 0
   937 0000135B 30C0                <1>     xor al, al
   938                              <1> .cpsStore:
   939 0000135D 488D3D(D4C60300)    <1>     lea rdi, fcbName+11
   940 00001364 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   941 00001365 5F                  <1>     pop rdi
   942                              <1>     return
    13                              <2> %%_ret:
    14 00001366 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   943                              <1> .oneDotResolve:
   944 00001367 488D3D(D4C60300)    <1>     lea rdi, fcbName+11
   945 0000136E AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   946 0000136F 5F                  <1>     pop rdi ;rdi points to fresh space
   947 00001370 48FFCF              <1>     dec rdi ;Point to the previous path separator
   948 00001373 AA                  <1>     stosb   ;Store this separator as if it is what we had before
   949                              <1>     return
    13                              <2> %%_ret:
    14 00001374 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   950                              <1> .cpsBadChar:
   951 00001375 30C0                <1>     xor al, al  ;Convert the char to a terminator
   952                              <1>     return
    13                              <2> %%_ret:
    14 00001377 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   953                              <1> 
   954                              <1> searchForPathspec:
   955                              <1>     ;Now search the current directory for this filename
   956                              <1>     ;Find first using SDA ffBlock
   957                              <1>     ;If al = 0, we have final file name or directory name
   958                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
   959                              <1>     ;Output: CF=CY => Error occured
   960                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
   961                              <1>     ;                 FF block somewhat setup
   962                              <1>     ;Preserves rax, rbx, rsi,  rdi
   963 00001378 50                  <1>     push rax
   964 00001379 53                  <1>     push rbx
   965 0000137A 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
   966 0000137B 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
   967 0000137C 0FB61D(5DC40300)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
   968 00001383 53                  <1>     push rbx    ;and push it onto the stack
   969                              <1> ;Evaluate whether we are searching for a file for a directory
   970 00001384 84C0                <1>     test al, al
   971 00001386 741D                <1>     jz .sfpPNfile
   972                              <1>     ;Fall if subdir
   973 00001388 488D3D(C9C60300)    <1>     lea rdi, fcbName
   974 0000138F B03F                <1>     mov al, "?" ;Search for wildcard
   975 00001391 B90B000000          <1>     mov ecx, 11
   976 00001396 F2AE                <1>     repne scasb
   977 00001398 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
   978 0000139A B010                <1>     mov al, dirDirectory    ;We want a directory only search.
   979 0000139C C605(5DC40300)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
   980 000013A3 EB07                <1>     jmp short .sfpPNMain
   981                              <1> .sfpPNfile:
   982                              <1>     ;Here if we are searching for a file or directory as setup by search init
   983 000013A5 0FB605(ECC60300)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
   984                              <1> .sfpPNMain:
   985 000013AC 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
   986 000013B3 7405                <1>     je .sfpPNNoDisk
   987 000013B5 E81EF9FFFF          <1>     call searchDir
   988                              <1> .sfpPNNoDisk:
   989 000013BA 5B                  <1>     pop rbx
   990 000013BB 881D(5DC40300)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
   991 000013C1 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
   992 000013C2 5E                  <1>     pop rsi
   993 000013C3 5B                  <1>     pop rbx
   994 000013C4 58                  <1>     pop rax
   995                              <1>     return
    13                              <2> %%_ret:
    14 000013C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   996                              <1> .sfpPnf:
   997 000013C6 B803000000          <1>     mov eax, errPnf
   998                              <1> .sfpErrExit:
   999 000013CB F9                  <1>     stc ;Set carry
  1000 000013CC EBEC                <1>     jmp short .sfpPNNoDisk
  1001                              <1> 
  1002                              <1> addPathspecToBuffer:
  1003                              <1> ;Input: fcbName = Qualified pathname portion
  1004                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
  1005                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
  1006                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
  1007                              <1> ;rbx points to the "head of the path"
  1008 000013CE F605(22C60300)FF    <1>     test byte [skipDisk], -1
  1009                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000013D5 75EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1010 000013D7 803D(C9C60300)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
  1011 000013DE 741F                <1>     je .aptbPNDots
  1012                              <1>     ;Copy filename over to internal buffer
  1013 000013E0 56                  <1>     push rsi    ;Save source pointer position
  1014 000013E1 488D35(C9C60300)    <1>     lea rsi, fcbName
  1015 000013E8 E8F7FAFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1016 000013ED 48FFCF              <1>     dec rdi ;Go back to the copied Null char
  1017 000013F0 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1018                              <1> .aptbOkExit:
  1019 000013F1 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the prev pathspec term char in al
  1020 000013F4 E896530000          <1>     call swapPathSeparator
  1021 000013F9 7402                <1>     jz .aptbPNexit
  1022 000013FB 30C0                <1>     xor al, al  ;Set al to 0 else (all other chars are terminators)
  1023                              <1> .aptbPNexit:
  1024 000013FD AA                  <1>     stosb   ;Store this final char (either \ or NULL) and return
  1025                              <1>     return
    13                              <2> %%_ret:
    14 000013FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1026                              <1> .aptbPNDots:
  1027                              <1> ;For one dot, we leave rdi where it is
  1028                              <1> ;For two dots, we search backwards for the previous "\"
  1029 000013FF 803D(CAC60300)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1030 00001406 F8                  <1>     clc ;Ensure we clear CF if we return via here
  1031 00001407 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the previous char in al if we return
  1032                              <1>     retne   ;Return with rdi untouched and rsi advanced.
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000140A 75F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1033                              <1>     ;Here we have two dots
  1034                              <1>     ;Walk rdi backwards until a \ is found
  1035 0000140C 48FFCF              <1>     dec rdi  ;rdi points to current char. Preceeding it is a \. Skip that
  1036 0000140F 66817FFF3A5C        <1>     cmp word [rdi - 1], ":\" ;IF the char preceeding \ is :, then error out
  1037 00001415 7420                <1>     je .aptbPnf
  1038 00001417 66817FFF5C5C        <1>     cmp word [rdi - 1], "\\" ;Similar net name check
  1039 0000141D 7418                <1>     je .aptbPnf
  1040                              <1> .aptbPNDotsLp:
  1041 0000141F 48FFCF              <1>     dec rdi
  1042 00001422 803F5C              <1>     cmp byte [rdi], "\"
  1043 00001425 75F8                <1>     jne .aptbPNDotsLp  ;Keep looping around until it is a "\"
  1044                              <1>     ;Don't go past the pathsep, since we may need to replace it with a null
  1045 00001427 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;Are we in name resolution mode?
  1046 0000142E 74C1                <1>     je .aptbOkExit    ;If clear, we are, so just return
  1047 00001430 4839DF              <1>     cmp rdi, rbx    ;Are we before the start of the path? (i.e in subst?)
  1048 00001433 7202                <1>     jb .aptbPnf
  1049 00001435 EBBA                <1>     jmp short .aptbOkExit
  1050                              <1> ;.aptbSearchError:
  1051                              <1> ;    mov eax, errFnf
  1052                              <1> ;    jmp short .aptbErrExit
  1053                              <1> .aptbPnf:
  1054 00001437 B803000000          <1>     mov eax, errPnf
  1055                              <1> .aptbErrExit:
  1056 0000143C F9                  <1>     stc ;Set carry
  1057                              <1>     return
    13                              <2> %%_ret:
    14 0000143D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1058                              <1> 
  1059                              <1> checkDevPath:
  1060                              <1> ;Called only if the file/directory was not found on disk.
  1061                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1062                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1063                              <1> ; and check to see if it is a char device. If it is, build a directory
  1064                              <1> ; If it is not, proceed with the request fail.
  1065                              <1> ;
  1066                              <1> ;Input: rsi = Pointer to the next path spec
  1067                              <1> ;Output: CF=NC => Char device found, directory built
  1068                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1069 0000143E 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1070                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001445 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1071 00001447 803D(D4C60300)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1072 0000144E 7459                <1>     je .notOk                      
  1073                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1074 00001450 50                  <1>     push rax
  1075 00001451 48B844455620202020- <1>     mov rax, "DEV     "
  1075 0000145A 20                  <1>
  1076 0000145B 483905(C9C60300)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1077 00001462 58                  <1>     pop rax
  1078 00001463 7544                <1>     jne .notOk
  1079 00001465 813D(D1C60300)2020- <1>     cmp dword [fcbName + 8], "   \"
  1079 0000146D 205C                <1>
  1080 0000146F 7538                <1>     jne .notOk
  1081                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1082                              <1>     ; looking for a device driver
  1083                              <1>     ;First append it to rdi 
  1084 00001471 B84445565C          <1>     mov eax, "DEV\" 
  1085 00001476 AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1086 00001477 57                  <1>     push rdi
  1087 00001478 488D3D(C9C60300)    <1>     lea rdi, fcbName
  1088 0000147F E818FAFFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1089                              <1>     ;Returns in al the terminating char of the source string
  1090 00001484 5F                  <1>     pop rdi
  1091                              <1>     ;If al is a pathsep, fail
  1092 00001485 E805530000          <1>     call swapPathSeparator
  1093 0000148A 741D                <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1094 0000148C 30C0                <1>     xor al, al
  1095 0000148E 8805(D4C60300)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1096 00001494 53                  <1>     push rbx
  1097 00001495 E844000000          <1>     call checkIfCharDevice
  1098 0000149A 5B                  <1>     pop rbx ;Don't need bh yet
  1099 0000149B 720C                <1>     jc .notOk
  1100 0000149D E873000000          <1>     call buildCharDir
  1101                              <1>     ;Here the device was determined to be a char device.
  1102                              <1>     ;A dummy directory entry was built for it.
  1103                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1104                              <1>     ; Do not Find Next!
  1105                              <1> .copyName:
  1106 000014A2 E83DFAFFFF          <1>     call FCBToAsciiz    ;Copy the ASCII form of the name over 
  1107 000014A7 F8                  <1>     clc
  1108                              <1>     return
    13                              <2> %%_ret:
    14 000014A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1109                              <1> .notOk:
  1110 000014A9 B802000000          <1>     mov eax, errFnf
  1111 000014AE F9                  <1>     stc
  1112                              <1>     return
    13                              <2> %%_ret:
    14 000014AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1113                              <1> .charDevSearch:
  1114 000014B0 53                  <1>     push rbx
  1115 000014B1 E828000000          <1>     call checkIfCharDevice
  1116 000014B6 5B                  <1>     pop rbx ;Dont need bh yet
  1117 000014B7 72F0                <1>     jc .notOk
  1118 000014B9 E857000000          <1>     call buildCharDir
  1119 000014BE 803D(D4C60300)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1120 000014C5 750C                <1>     jne .cds2
  1121 000014C7 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1122 000014CB 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1123 000014CD 48FFCF              <1>     dec rdi
  1124 000014D0 B02F                <1>     mov al, "/" ;Replace \ with "/"
  1125 000014D2 AA                  <1>     stosb   ;Store that and let the dir write the filename
  1126                              <1> .cds2:
  1127 000014D3 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1128 000014DA 75C6                <1>     jne .copyName    ;Now jump if in disk search
  1129 000014DC F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1130                              <1>     return
    13                              <2> %%_ret:
    14 000014DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1131                              <1> 
  1132                              <1> checkIfCharDevice:  ;Int 4Fh AX=1223h
  1133                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1134                              <1> ; device driver chain. 
  1135                              <1> ;Output: CF=CY if not found
  1136                              <1> ;        CF=NC if found
  1137                              <1> ;           BH = Low byte of the device attribute word
  1138 000014DE 50                  <1>     push rax
  1139 000014DF 57                  <1>     push rdi
  1140 000014E0 488B05(C9C60300)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1141 000014E7 488D3D(80C00300)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1142                              <1> .checkName:
  1143 000014EE 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1144 000014F2 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1145 000014F4 F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1146 000014F7 740C                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1147 000014F9 80CF20              <1>     or bh, 20h  ;RBIL says Bit 5 set and Bits 6-7 clear if Char dev
  1148 000014FC 80E73F              <1>     and bh, ~(80h|40h) ;Clear the upper two bits
  1149 000014FF 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1150 00001503 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1151                              <1> .walkList:
  1152 00001505 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1153 00001508 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1154 0000150F 75DD                <1>     jne .checkName  ;If no, rdi points to char device
  1155 00001511 F9                  <1>     stc
  1156                              <1> .exit:
  1157 00001512 5F                  <1>     pop rdi
  1158 00001513 58                  <1>     pop rax
  1159                              <1>     return
    13                              <2> %%_ret:
    14 00001514 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1160                              <1> 
  1161                              <1> buildCharDir:
  1162                              <1> ;Build a dummy directory entry for the char device in FCBName
  1163                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1164 00001515 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1165                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000151C 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1166 0000151E 50                  <1>     push rax
  1167 0000151F 57                  <1>     push rdi
  1168 00001520 C605(D4C60300)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1169 00001527 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
  1170                              <1>     ;Zero the directory copy (32 bytes)
  1171 0000152E 50                  <1>     push rax
  1172 0000152F 51                  <1>     push rcx
  1173 00001530 57                  <1>     push rdi
  1174 00001531 31C0                <1>     xor eax, eax    ;Zero rax
  1175 00001533 B904000000          <1>     mov ecx, 4
  1176 00001538 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1177 0000153B 5F                  <1>     pop rdi
  1178 0000153C 59                  <1>     pop rcx
  1179 0000153D 58                  <1>     pop rax
  1180 0000153E 488B05(C9C60300)    <1>     mov rax, qword [fcbName]
  1181 00001545 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1182 00001548 B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1183 0000154D 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1184 00001550 C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1185                              <1>     ;Get date and time and set the write time in the directory entry
  1186 00001554 E8C9110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1187 00001559 E8AF120000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1188 0000155E 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1189 00001561 31C0                <1>     xor eax, eax
  1190 00001563 5F                  <1>     pop rdi
  1191 00001564 58                  <1>     pop rax
  1192                              <1>     return
    13                              <2> %%_ret:
    14 00001565 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1193                              <1> 
  1194                              <1> checkFailingComp:
  1195                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1196                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1197                              <1> ;Returns: ZF=ZE => Last path componant
  1198                              <1> ;         ZF=NZ => Not last path componant
  1199 00001566 50                  <1>     push rax
  1200 00001567 8A05(D4C60300)      <1>     mov al, byte [fcbName + 11]
  1201 0000156D 84C0                <1>     test al, al
  1202 0000156F 58                  <1>     pop rax
  1203                              <1>     return
    13                              <2> %%_ret:
    14 00001570 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    28                                  %include "./Source/Kernel/FAT/dirfun.asm"
     1                              <1> ;---------------------------------------------------:
     2                              <1> ;                   KERNEL FUNCTIONS                :
     3                              <1> ;---------------------------------------------------:
     4                              <1> makeDIR:           ;ah = 39h
     5                              <1> ;For make, the path must exist but the final componant must not exist.
     6                              <1> ;Input: rdx = Pointer to ASCIIZ string
     7 00001571 4889D7              <1>     mov rdi, rdx
     8 00001574 E854520000          <1>     call strlen
     9 00001579 81F940000000        <1>     cmp ecx, 64
    10 0000157F 7607                <1>     jbe .okLength
    11                              <1> .badPath:
    12 00001581 B003                <1>     mov al, errPnf
    13 00001583 E995550000          <1>     jmp extErrExit
    14                              <1> .okLength:
    15 00001588 4889D6              <1>     mov rsi, rdx
    16 0000158B E8A7520000          <1>     call checkPathspecOK
    17 00001590 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
    18                              <1> .pathOk:
    19 00001592 E832530000          <1>     call scanPathWC
    20 00001597 72E8                <1>     jc .badPath ;Dont allow wildcards
    21                              <1>     ;Path is ok, now proceed
    22 00001599 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
    23 000015A0 E860FAFFFF          <1>     call getFilePath ;Get a Directory path in buffer1, hitting the disk
    24                              <1>     ;If the path exists, exit error
    25 000015A5 0F8372550000        <1>     jnc extErrExit
    26                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    27 000015AB E8B6FFFFFF          <1>     call checkFailingComp
    28 000015B0 0F8567550000        <1>     jnz extErrExit
    29                              <1>     ;So all is well, the new subdirectories name is in fcbName
    30                              <1>     ;The parent dir's directory entry is in the curDirCopy
    31 000015B6 E84D500000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    32                              <1>     ;returns in rdi the working cds ptr
    33 000015BB 7312                <1>     jnc .notNet
    34 000015BD B803110000          <1>     mov eax, 1103h
    35 000015C2 CD4F                <1>     int 4fh
    36 000015C4 0F8253550000        <1>     jc extErrExit
    37 000015CA E940550000          <1>     jmp extGoodExit
    38                              <1> .notNet:
    39 000015CF E8FE540000          <1>     call dosCrit1Enter
    40                              <1>     ;Current dpb ptr is already set
    41                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    42                              <1>     ;First we make a dummy dir in curDirCopy
    43 000015D4 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
    44 000015DB 488D35(C9C60300)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    45 000015E2 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
    46 000015E9 48A5                <1>     movsq   ;Copy the name over
    47 000015EB A5                  <1>     movsd
    48 000015EC E831110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    49 000015F1 E817120000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    50 000015F6 8905(5CC60300)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    51 000015FC 8905(64C60300)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    52 00001602 31C0                <1>     xor eax, eax
    53 00001604 8905(6AC60300)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    54 0000160A C605(59C60300)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    55 00001611 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]
    56                              <1> .searchForDirSpace:
    57 00001617 8905(74C70300)      <1>     mov dword [dirClustA], eax
    58 0000161D 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    59 0000161F 668905(78C70300)    <1>     mov word [dirSect], ax
    60 00001626 8905(7AC70300)      <1>     mov dword [dirEntry], eax
    61 0000162C E8CE040000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    62 00001631 7328                <1>     jnc .dirEntryFnd
    63 00001633 813D(70C70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    63 0000163B 0000                <1>
    64 0000163D 0F844A010000        <1>     je .bad ;Set CF and exit
    65 00001643 E801060000          <1>     call growDirectory  ;Increase directory size by 1 cluster, writes to buffer
    66 00001648 0F823F010000        <1>     jc .bad
    67 0000164E 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    68 00001653 0F8434010000        <1>     je .bad
    69                              <1>     ;Else eax = Newly allocated cluster
    70 00001659 EBBC                <1>     jmp short .searchForDirSpace
    71                              <1> .dirEntryFnd:
    72                              <1> ;rdi points to current directory copy
    73                              <1> ;rsi now points to offset in the buffer to write the entry to
    74                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
    75 0000165B 488B1D(2EC70300)    <1>     mov rbx, qword [currBuff]
    76 00001662 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
    77                              <1>      
    78 00001666 488905(36C70300)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
    79 0000166D 4881C330000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
    80 00001674 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
    81 00001677 668935(3EC70300)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
    82                              <1> ;Must now request a cluster and sanitise it
    83 0000167E E831F2FFFF          <1>     call startNewChain  ;Get cluster number in eax
    84 00001683 0F8209010000        <1>     jc .badExit
    85 00001689 E8EE050000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax, writes to buf
    86 0000168E 0F82FE000000        <1>     jc .badExit
    87                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
    88 00001694 668905(68C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
    89 0000169B C1E810              <1>     shr eax, 10h    ;Get high word low
    90 0000169E 668905(62C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
    91 000016A5 488B05(36C70300)    <1>     mov rax, qword [tempSect]   ;Get the sector back
    92 000016AC E86EF0FFFF          <1>     call getBufForDirNoFile
    93 000016B1 0F82DB000000        <1>     jc .badExit
    94 000016B7 0FB705(3EC70300)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
    95 000016BE 488D35(4EC60300)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
    96 000016C5 488D7C0330          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
    97 000016CA B904000000          <1>     mov ecx, 4
    98 000016CF F348A5              <1>     rep movsq   ;Copy over the buffered directory
    99 000016D2 E8BDEEFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   100                              <1>     ;Now need to read in data sector and make two entries . and ..
   101 000016D7 57                  <1>     push rdi
   102 000016D8 51                  <1>     push rcx
   103 000016D9 B90B000000          <1>     mov ecx, 11
   104 000016DE 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
   105 000016E5 B020                <1>     mov al, " "
   106 000016E7 F3AA                <1>     rep stosb
   107 000016E9 59                  <1>     pop rcx
   108 000016EA 5F                  <1>     pop rdi
   109 000016EB 48B82E000000000000- <1>     mov rax, "."
   109 000016F4 00                  <1>
   110 000016F5 8805(4EC60300)      <1>     mov byte [curDirCopy], al
   111 000016FB 0FB705(68C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   112 00001702 0FB715(62C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   113 00001709 C605(59C60300)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
   114 00001710 C1E210              <1>     shl edx, 10h
   115 00001713 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   116 00001715 E820F1FFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   117 0000171A E800F0FFFF          <1>     call getBufForDirNoFile
   118 0000171F 7271                <1>     jc .badExit
   119                              <1>     ;rbx has buffer pointer now
   120 00001721 488D35(4EC60300)    <1>     lea rsi, curDirCopy
   121 00001728 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   122 0000172C B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   123 00001731 F348A5              <1>     rep movsq
   124                              <1>     ;Now create .. entry
   125 00001734 C605(4FC60300)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   126 0000173B 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   127 00001741 E889F0FFFF          <1>     call getFATtype
   128 00001746 81F902000000        <1>     cmp ecx, 2
   129 0000174C 7207                <1>     jb .notFAT32
   130 0000174E 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   131 00001751 7502                <1>     jne .notFAT32
   132 00001753 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   133                              <1> .notFAT32:
   134 00001755 668905(68C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   135 0000175C C1E810              <1>     shr eax, 10h
   136 0000175F 668905(62C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   137 00001766 488D35(4EC60300)    <1>     lea rsi, curDirCopy
   138 0000176D B904000000          <1>     mov ecx, 4
   139 00001772 F348A5              <1>     rep movsq
   140 00001775 E81AEEFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   141 0000177A E8E3EDFFFF          <1>     call writeThroughBuffers    ;Write the buffers to disk
   142 0000177F 7211                <1>     jc .badExit
   143                              <1> .okExit:
   144                              <1>     ;AND WE ARE DONE!
   145 00001781 E856530000          <1>     call dosCrit1Exit
   146 00001786 31C0                <1>     xor eax, eax
   147 00001788 E982530000          <1>     jmp extGoodExit
   148                              <1> .bad:
   149 0000178D B805000000          <1>     mov eax, errAccDen
   150                              <1> .badExit:
   151 00001792 E894EDFFFF          <1>     call cancelWriteThroughBuffers
   152 00001797 E840530000          <1>     call dosCrit1Exit
   153 0000179C E97C530000          <1>     jmp extErrExit
   154                              <1> 
   155                              <1> removeDIR:         ;ah = 3Ah
   156 000017A1 4889D7              <1>     mov rdi, rdx
   157 000017A4 E824500000          <1>     call strlen
   158 000017A9 81F940000000        <1>     cmp ecx, 64
   159 000017AF 7607                <1>     jbe .okLength
   160                              <1> .badPath:
   161 000017B1 B003                <1>     mov al, errPnf
   162 000017B3 E965530000          <1>     jmp extErrExit
   163                              <1> .okLength:
   164 000017B8 4889D6              <1>     mov rsi, rdx
   165 000017BB E877500000          <1>     call checkPathspecOK
   166 000017C0 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   167                              <1> .pathOk:
   168 000017C2 E802510000          <1>     call scanPathWC
   169 000017C7 72E8                <1>     jc .badPath ;Dont allow wildcards
   170                              <1>     ;Path is ok, now proceed
   171 000017C9 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   172 000017D0 E82CF8FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   173 000017D5 72DA                <1>     jc .badPath    ;Path Doesn't exist
   174 000017D7 E82C4E0000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   175 000017DC 7312                <1>     jnc .notNet
   176 000017DE B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   177 000017E3 CD4F                <1>     int 4fh
   178 000017E5 0F8232530000        <1>     jc extErrExit
   179 000017EB E91F530000          <1>     jmp extGoodExit
   180                              <1> .notNet:
   181 000017F0 E8DD520000          <1>     call dosCrit1Enter
   182 000017F5 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   183                              <1>     ;Now let use check that our directory is not the CDS currentdir
   184 000017FC 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
   185 00001803 488D3D(12C50300)    <1>     lea rdi, buffer1
   186 0000180A E8BE4F0000          <1>     call strlen ;Get the length of the full qualified name in ecx
   187 0000180F 66890D(3EC70300)    <1>     mov word [pathLen], cx
   188 00001816 E8C94F0000          <1>     call strcmp ;Then compare rdi to CDS string
   189 0000181B 750F                <1>     jnz .notEqual
   190 0000181D B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   191 00001822 E8B5520000          <1>     call dosCrit1Exit
   192 00001827 E9F1520000          <1>     jmp extErrExit
   193                              <1> .notEqual:
   194 0000182C 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   195                              <1>     ;If the given path length is one more than the backslash offset
   196                              <1>     ; due to the terminating null, then the user is trying to delete the 
   197                              <1>     ; root dir. Fail this.
   198 0000182F 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   199 00001833 FFC1                <1>     inc ecx
   200 00001835 663B0D(3EC70300)    <1>     cmp cx, word [pathLen]
   201 0000183C 0F8423010000        <1>     je .accessDenied
   202 00001842 E8CB020000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   203                              <1>     ;for the entry in the sector we are hoping to delete
   204 00001847 0FB705(62C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   205 0000184E C1E010              <1>     shl eax, 10h
   206 00001851 0FB71D(68C60300)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   207 00001858 09D8                <1>     or eax, ebx
   208 0000185A 8905(70C70300)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   209 00001860 E8D5EFFFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   210 00001865 E8B5EEFFFF          <1>     call getBufForDirNoFile
   211 0000186A 0F82FA000000        <1>     jc .exitBad
   212                              <1>     ;rbx points to buffer
   213 00001870 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   214 00001874 48B82E202020202020- <1>     mov rax, ".       "
   214 0000187D 20                  <1>
   215 0000187E 483906              <1>     cmp qword [rsi], rax
   216 00001881 0F85DE000000        <1>     jne .accessDenied
   217 00001887 B42E                <1>     mov ah, "." ;Screw the partial stall
   218 00001889 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   219 0000188D 0F85D2000000        <1>     jne .accessDenied
   220 00001893 4881C620000000      <1>     add rsi, fatDirEntry_size
   221 0000189A 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
   222 000018A1 B904000000          <1>     mov ecx, 4
   223 000018A6 F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   224                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   225                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   226 000018A9 488D3D(C9C60300)    <1>     lea rdi, fcbName
   227 000018B0 B03F                <1>     mov al, "?"
   228 000018B2 B90B000000          <1>     mov ecx, 11
   229 000018B7 F3AA                <1>     rep stosb   ;Store the pattern to search for
   230 000018B9 30C0                <1>     xor al, al  ;Store a terminating zero
   231 000018BB AA                  <1>     stosb
   232 000018BC 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   233 000018C2 50                  <1>     push rax    ;Save on stack temporarily
   234 000018C3 8905(74C70300)      <1>     mov dword [dirClustA], eax
   235 000018C9 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   236 000018CB 668905(78C70300)    <1>     mov word [dirSect], ax
   237 000018D2 C705(7AC70300)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   237 000018DA 0000                <1>
   238 000018DC C605(ECC60300)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   239 000018E3 58                  <1>     pop rax
   240 000018E4 E851EFFFFF          <1>     call getStartSectorOfCluster
   241 000018E9 E853EEFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   242 000018EE 727A                <1>     jc .exitBad
   243 000018F0 E8C3F4FFFF          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   244 000018F5 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   245 000018FC 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   246 00001902 C605(5DC40300)FF    <1>     mov byte [fileDirFlag], -1  ;Make sure we are searching for everythin
   247 00001909 E807F4FFFF          <1>     call searchDir.rmdirEP
   248 0000190E 7355                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   249                              <1>     ;Else, this is a empty dir, we can remove it
   250                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   251 00001910 488B05(36C70300)    <1>     mov rax, qword [tempSect]
   252 00001917 E825EEFFFF          <1>     call getBufForDOS
   253 0000191C 724C                <1>     jc .exitBad
   254 0000191E E895F4FFFF          <1>     call adjustDosDirBuffer
   255 00001923 0FB705(3EC70300)    <1>     movzx eax, word [entry]
   256 0000192A 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   257 0000192E 4801C6              <1>     add rsi, rax    
   258 00001931 8A05(F8C60300)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   259 00001937 8806                <1>     mov byte [rsi], al  ;Store delchar there
   260 00001939 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   261 0000193D 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   262 00001941 E84EECFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   263 00001946 C1E210              <1>     shl edx, 10h
   264 00001949 09D0                <1>     or eax, edx
   265                              <1>     ;Now remove the FAT chain
   266 0000194B E8A3F0FFFF          <1>     call unlinkFAT
   267 00001950 7218                <1>     jc .exitBad
   268 00001952 E80BECFFFF          <1>     call writeThroughBuffers
   269 00001957 7211                <1>     jc .exitBad
   270 00001959 E87E510000          <1>     call dosCrit1Exit
   271 0000195E 31C0                <1>     xor eax, eax
   272 00001960 E9AA510000          <1>     jmp extGoodExit
   273                              <1> .accessDenied:
   274 00001965 B805000000          <1>     mov eax, errAccDen
   275                              <1> .exitBad:
   276 0000196A E8BCEBFFFF          <1>     call cancelWriteThroughBuffers
   277 0000196F F9                  <1>     stc
   278 00001970 E867510000          <1>     call dosCrit1Exit
   279 00001975 E9A3510000          <1>     jmp extErrExit
   280                              <1> 
   281                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   282                              <1> ;Input: rdx = Pointer to ASCIIZ string
   283 0000197A 4889D7              <1>     mov rdi, rdx
   284 0000197D E84B4E0000          <1>     call strlen
   285 00001982 81F940000000        <1>     cmp ecx, 64
   286 00001988 7607                <1>     jbe .okLength
   287                              <1> .badPath:
   288 0000198A B003                <1>     mov al, errPnf
   289 0000198C E98C510000          <1>     jmp extErrExit
   290                              <1> .okLength:
   291 00001991 4889D6              <1>     mov rsi, rdx
   292 00001994 E89E4E0000          <1>     call checkPathspecOK
   293 00001999 72EF                <1>     jc .badPath  ;Don't allow any malformed chars or wildcards
   294 0000199B E87D4F0000          <1>     call checkPathNet
   295 000019A0 74E8                <1>     jz .badPath ;Or Net paths
   296                              <1>     ;Path is ok, now proceed
   297 000019A2 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   298 000019A9 E853F6FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   299 000019AE 0F8269510000        <1>     jc extErrExit   ;Exit with error code in eax
   300                              <1>     ;The path must've been ok, so now copy the path into the CDS
   301                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   302 000019B4 488B35(02C70300)    <1>     mov rsi, qword [workingCDS] ;Copy the CDS to the tmpCDS
   303 000019BB 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   304 000019C1 756D                <1>     jnz .net    ;This is done by the redirector for redirector drives
   305 000019C3 488D3D(6EC60300)    <1>     lea rdi, tmpCDS
   306 000019CA B95B000000          <1>     mov ecx, cds_size
   307 000019CF F3A4                <1>     rep movsb
   308                              <1>     ;If the path is longer than 67, call it an invalid path
   309 000019D1 488D3D(12C50300)    <1>     lea rdi, buffer1
   310 000019D8 E8F04D0000          <1>     call strlen ;Get the length of this path
   311 000019DD 81F943000000        <1>     cmp ecx, 67
   312 000019E3 77A5                <1>     ja .badPath
   313 000019E5 4889FE              <1>     mov rsi, rdi    ;Move buffer source to rsi
   314 000019E8 488D3D(6EC60300)    <1>     lea rdi, tmpCDS
   315 000019EF F3A4                <1>     rep movsb   ;Copy the path over
   316                              <1>     ;Now get the start cluster from the directory copy
   317 000019F1 0FB715(68C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   318 000019F8 0FB705(62C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   319 000019FF C1E010              <1>     shl eax, 10h
   320 00001A02 09D0                <1>     or eax, edx ;Add low bits to eax
   321 00001A04 8905(BBC60300)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   322 00001A0A 488D35(6EC60300)    <1>     lea rsi, tmpCDS
   323 00001A11 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   324 00001A18 B95B000000          <1>     mov ecx, cds_size
   325 00001A1D E8B0500000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   326 00001A22 F3A4                <1>     rep movsb
   327 00001A24 E8B3500000          <1>     call dosCrit1Exit
   328 00001A29 31C0                <1>     xor eax, eax
   329 00001A2B E9DF500000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   330                              <1> .net:
   331                              <1> ;SDA Vars are setup for this request
   332 00001A30 B805110000          <1>     mov eax, 1105h
   333 00001A35 CD4F                <1>     int 4fh
   334 00001A37 0F82E0500000        <1>     jc extErrExit
   335 00001A3D E9CD500000          <1>     jmp extGoodExit
   336                              <1> getCurrentDIR:     ;ah = 47h
   337                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   338                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   339 00001A42 E88B500000          <1>     call dosCrit1Enter
   340 00001A47 88D0                <1>     mov al, dl  ;Move drive number into al
   341 00001A49 E84B4C0000          <1>     call setDrive ;Set drive variables if it is valid and NOT join
   342 00001A4E 730F                <1>     jnc .okDrive
   343                              <1> .badExit:
   344 00001A50 E887500000          <1>     call dosCrit1Exit
   345 00001A55 B80F000000          <1>     mov eax, errBadDrv
   346 00001A5A E9BE500000          <1>     jmp extErrExit
   347                              <1> .okDrive:
   348                              <1>     ;Now we update the DPB, to be accurate for swapped disks
   349 00001A5F 56                  <1>     push rsi
   350 00001A60 57                  <1>     push rdi
   351 00001A61 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] ;Get CDS ptr in rdi
   352 00001A68 E84E490000          <1>     call getDiskDPB
   353 00001A6D 5F                  <1>     pop rdi
   354 00001A6E 5E                  <1>     pop rsi
   355 00001A6F 0F82A8500000        <1>     jc extErrExit
   356                              <1>     ;Here, work needs to be done to ensure that the path built is proper
   357 00001A75 4889F7              <1>     mov rdi, rsi    ;Save destination buffer in rdi
   358 00001A78 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]  ;Get pointer to current CDS in rsi
   359 00001A7F 31C0                <1>     xor eax, eax
   360 00001A81 FFC8                <1>     dec eax
   361 00001A83 39464D              <1>     cmp dword [rsi + cds.dStartCluster], eax    ;StartCluster != -1 is all ok
   362 00001A86 7516                <1>     jne .writePathInBuffer
   363 00001A88 FFC0                <1>     inc eax
   364 00001A8A 89464D              <1>     mov dword [rsi + cds.dStartCluster], eax    ;Set to root dir
   365 00001A8D 66817E430000        <1>     cmp word [rsi + cds.wFlags], 0  ;Is this a newly deactivated drive?
   366 00001A93 74BB                <1>     je .badExit ;TEMP, ERROR IF SO (WAS A SUBST DRIVE)
   367                              <1>     ;Here we now add a terminating null at wBackslashOffset
   368 00001A95 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   369 00001A99 C644060100          <1>     mov byte [rsi + rax + 1], 0 ;Store a zero just past the backslash
   370                              <1> .writePathInBuffer:
   371 00001A9E 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   372 00001AA2 FFC0                <1>     inc eax ;Go past the backslash
   373 00001AA4 4801C6              <1>     add rsi, rax ;Add this many chars to rsi to point to first char to copy
   374 00001AA7 E8304D0000          <1>     call strcpy
   375 00001AAC E82B500000          <1>     call dosCrit1Exit
   376 00001AB1 B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   377 00001AB6 E954500000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   378                              <1> 
   379                              <1> trueNameMultiplex:  ;Int 4Fh, AX=1221h
   380 00001ABB 50                  <1>     push rax
   381 00001ABC B800600000          <1>     mov eax, 6000h
   382 00001AC1 CD41                <1>     int 41h
   383 00001AC3 58                  <1>     pop rax
   384                              <1>     return
    13                              <2> %%_ret:
    14 00001AC4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1>     
   386                              <1> trueName:          ;ah = 60h, get fully qualified name. 
   387                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   388 00001AC5 E86D4D0000          <1>     call checkPathspecOK    ;This preserves rsi
   389 00001ACA 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   390 00001ACC 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   391                              <1> .badPath:
   392 00001ACE B803000000          <1>     mov eax, errPnf
   393 00001AD3 E945500000          <1>     jmp extErrExit
   394                              <1> .pathspecOk:
   395 00001AD8 57                  <1>     push rdi    ;Save the destination
   396 00001AD9 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   397 00001AE0 E8D5F4FFFF          <1>     call canonicaliseFileName
   398 00001AE5 5F                  <1>     pop rdi
   399 00001AE6 0F8231500000        <1>     jc extErrExit
   400 00001AEC 488D35(12C50300)    <1>     lea rsi, buffer1
   401 00001AF3 E8E44C0000          <1>     call strcpy
   402 00001AF8 31C0                <1>     xor eax, eax
   403 00001AFA E910500000          <1>     jmp extGoodExit
   404                              <1> 
   405                              <1> ;-----------------------------------
   406                              <1> ;    General Directory Routines    :
   407                              <1> ;-----------------------------------
   408                              <1> 
   409                              <1> findFreeDiskDirEntry:
   410                              <1> ;Find a space in the directory we are searching for a directory entry
   411                              <1> ;Accept first entry starting with a 0E5h or 00h
   412                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   413                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   414                              <1> ; be called for CDS's that are NOT net CDS's).
   415                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   416                              <1> ;       Directory vars must be set up for the directory we are searching in
   417                              <1> ;Output: CF=CY => Error, eax has error code
   418                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   419                              <1>     ;breakpoint
   420 00001AFF 8A05(F8C60300)      <1>     mov al, byte [delChar]
   421 00001B05 8805(C9C60300)      <1>     mov byte [fcbName], al
   422 00001B0B E8C8F1FFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   423                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001B10 72B2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   424                              <1> ;Free entry found, dir variables are set for the free entry. 
   425                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   426                              <1> getDiskDirectoryEntry:
   427                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   428                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   429                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   430                              <1> ;        qword [tempSect] = Disk sector number of directory
   431                              <1> ;        word [entry] = 32 byte offset into sector
   432                              <1> ;        CF=CY => Error, exit 
   433 00001B12 53                  <1>     push rbx
   434 00001B13 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  
   435                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   436                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   437 00001B19 0FB71D(78C70300)    <1>     movzx ebx, word [dirSect]
   438 00001B20 85C0                <1>     test eax, eax
   439 00001B22 7407                <1>     jz .skipCluster
   440 00001B24 E811EDFFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   441 00001B29 EB1B                <1>     jmp short .skipOldFat
   442                              <1> .skipCluster:
   443 00001B2B 55                  <1>     push rbp
   444 00001B2C 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   445 00001B33 0FB705(78C70300)    <1>     movzx eax, word [dirSect]
   446 00001B3A 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   447                              <1>     ;If dirSect is greater than wNumberRootDirEntries, then ret fail
   448 00001B3D 663B4509            <1>     cmp ax, word [rbp + dpb.wNumberRootDirEntries]
   449 00001B41 5D                  <1>     pop rbp
   450 00001B42 7202                <1>     jb .skipOldFat
   451 00001B44 F9                  <1>     stc
   452                              <1>     return
    13                              <2> %%_ret:
    14 00001B45 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   453                              <1> .skipOldFat:
   454 00001B46 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   455 00001B49 488905(36C70300)    <1>     mov qword [tempSect], rax   ;Save this sector number
   456 00001B50 E8ECEBFFFF          <1>     call getBufForDOS   ;Get buffer for DOS in rbx
   457 00001B55 5B                  <1>     pop rbx
   458                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001B56 72ED                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   459 00001B58 53                  <1>     push rbx
   460 00001B59 488B1D(2EC70300)    <1>     mov rbx, qword [currBuff]
   461 00001B60 E853F2FFFF          <1>     call adjustDosDirBuffer ;Change buffer to Dir buffer
   462                              <1>     ;Above function gets data buffer ptr in rsi
   463 00001B65 0FB705(78C70300)    <1>     movzx eax, word [dirSect]   ;Get the sector in which the offset lies
   464 00001B6C 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   465 00001B70 F7E3                <1>     mul ebx ;Multiply these two words so eax has number of bytes to
   466                              <1>     ; the current sector
   467 00001B72 C1E805              <1>     shr eax, 5  ;Divide by 32 to get the number of dir entries we are skipping
   468 00001B75 8B1D(7AC70300)      <1>     mov ebx, dword [dirEntry]   ;Get offset into dir file cluster
   469 00001B7B 29C3                <1>     sub ebx, eax    ;Now ebx has the dir entry offset in the current sector
   470 00001B7D C1E305              <1>     shl ebx, 5  ;Multiply by 32 to get byte offset
   471 00001B80 66891D(3EC70300)    <1>     mov word [entry], bx  ;Save 32 byte offset into sector
   472 00001B87 4801DE              <1>     add rsi, rbx    ;rsi now points to the entry
   473 00001B8A 5B                  <1>     pop rbx
   474                              <1>     return
    13                              <2> %%_ret:
    14 00001B8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   475                              <1> 
   476                              <1> 
   477                              <1> updateDirectoryEntryForFile:    
   478                              <1> ;Updates the directory entry for disk files
   479                              <1> ;Called with:
   480                              <1> ;   [workingDPB] = DPB pointer for the disk device
   481                              <1> ;   [currentSFT] = Current SFT pointer
   482 00001B8C 50                  <1>     push rax
   483 00001B8D 53                  <1>     push rbx
   484 00001B8E 57                  <1>     push rdi
   485 00001B8F 55                  <1>     push rbp
   486                              <1> 
   487 00001B90 E83D4F0000          <1>     call dosCrit1Enter
   488 00001B95 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
   489 00001B9C 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   490 00001BA3 66F74705C000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush | devCharDev
   491 00001BA9 0F8581000000        <1>     jnz .exit   ;If it is a char dev or hasn't been written to yet, skip this
   492 00001BAF 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
   493 00001BB5 751B                <1>     jnz .skipDT
   494                              <1>     ;Get date and time words and add them to the directory entry
   495 00001BB7 E8660B0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   496                              <1>     ;Build date and time words
   497 00001BBC E84C0C0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   498                              <1>     ;Update SFT fields
   499 00001BC1 66894713            <1>     mov word [rdi + sft.wTime], ax
   500 00001BC5 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   501 00001BC8 66894715            <1>     mov word [rdi + sft.wDate], ax
   502 00001BCC 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush  ;We update DT, so flush
   503                              <1> .skipDT:
   504                              <1> ;Before we read the dir sector in, if we never wrote to the disk
   505                              <1> ; we skip all of this
   506 00001BD2 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   507 00001BD8 7556                <1>     jnz .exit ;If the file was never written to, don't bother updating DIR data
   508 00001BDA 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   509 00001BDE E86CEBFFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
   510 00001BE3 7255                <1>     jc .exitBad    ;If an error is to be returned from, we skip the rest of this
   511                              <1>     ;Now we write the changes to the sector
   512                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
   513 00001BE5 488D6B30            <1>     lea rbp, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   514 00001BE9 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   515 00001BED C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   516 00001BF0 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
   517 00001BF3 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
   518 00001BF6 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
   519 00001BF9 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
   520 00001BFD 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
   521 00001C01 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
   522 00001C05 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
   523 00001C09 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
   524 00001C0D 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
   525 00001C10 6689451A            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusLo], ax
   526 00001C14 C1E810              <1>     shr eax, 10h
   527 00001C17 66894514            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusHi], ax
   528                              <1>     ;Directory sector updated and marked to be flushed to disk!
   529 00001C1B 31C0                <1>     xor eax, eax
   530 00001C1D FF15(24C10300)      <1>     call qword [updateDirShare]
   531 00001C23 F8                  <1>     clc ;Clear CF as updateDirShare Defaults to CF=CY
   532 00001C24 E86BE9FFFF          <1>     call markBufferDirty
   533 00001C29 E834E9FFFF          <1>     call writeThroughBuffers
   534 00001C2E 720A                <1>     jc .exitBad
   535                              <1> .exit:
   536 00001C30 E8A74E0000          <1>     call dosCrit1Exit
   537 00001C35 5D                  <1>     pop rbp
   538 00001C36 5F                  <1>     pop rdi
   539 00001C37 5B                  <1>     pop rbx
   540 00001C38 58                  <1>     pop rax
   541                              <1>     return
    13                              <2> %%_ret:
    14 00001C39 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   542                              <1> .exitBad:
   543 00001C3A E8ECE8FFFF          <1>     call cancelWriteThroughBuffers
   544 00001C3F 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
   545 00001C40 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush
   546 00001C46 9D                  <1>     popfq
   547 00001C47 EBE7                <1>     jmp short .exit
   548                              <1>     
   549                              <1> growDirectory:
   550                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   551                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   552                              <1> ;                 eax = New Cluster number
   553                              <1> ;               TWO NON CF ERROR CASES.
   554                              <1> ;               If eax = -1 => disk full!
   555                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   556                              <1> ;        CF=CY => Something went wrong. Rip. 
   557 00001C49 53                  <1>     push rbx
   558 00001C4A 51                  <1>     push rcx
   559 00001C4B 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   560 00001C51 85C0                <1>     test eax, eax
   561 00001C53 7424                <1>     jz .exit
   562 00001C55 E80DECFFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   563 00001C5A 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   564 00001C5C B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   565 00001C61 E874ECFFFF          <1>     call allocateClusters   ;ebx has last cluster value
   566 00001C66 7211                <1>     jc .exit
   567 00001C68 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   568 00001C6A E8CDEDFFFF          <1>     call readFAT
   569 00001C6F 7208                <1>     jc .exit
   570 00001C71 E806000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   571 00001C76 7201                <1>     jc .exit
   572 00001C78 F8                  <1>     clc
   573                              <1> .exit:
   574 00001C79 59                  <1>     pop rcx
   575 00001C7A 5B                  <1>     pop rbx
   576                              <1>     return   
    13                              <2> %%_ret:
    14 00001C7B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   577                              <1> sanitiseCluster:
   578                              <1> ;Sanitises the cluster in eax to all zeros
   579                              <1> ;Does not move file pointers
   580                              <1> ;Currently, is only called to sanitise subdirectory clusters
   581                              <1> ;Input: eax = Cluster number
   582                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   583                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   584                              <1> ;        If CF=CY => Error, exit
   585 00001C7C 50                  <1>     push rax
   586 00001C7D 53                  <1>     push rbx
   587 00001C7E 51                  <1>     push rcx
   588 00001C7F 52                  <1>     push rdx
   589 00001C80 56                  <1>     push rsi
   590 00001C81 55                  <1>     push rbp
   591 00001C82 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   592 00001C89 E8ACEBFFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   593 00001C8E 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   594 00001C92 FFC2                <1>     inc edx ;Make it a count of sectors
   595                              <1> .getSectorInCluster:
   596 00001C94 E869EAFFFF          <1>     call getBufForDataNoFile  ;Get a generic data buffer in rbx
   597 00001C99 721E                <1>     jc .exitBad
   598 00001C9B 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   599 00001C9F 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   600 00001CA3 31C0                <1>     xor eax, eax
   601 00001CA5 F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   602 00001CA7 E8E8E8FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   603                              <1> 
   604 00001CAC FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   605 00001CAE 740A                <1>     jz .exit    ;Jump if we done
   606 00001CB0 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   607 00001CB4 48FFC0              <1>     inc rax ;Goto next sector in cluster
   608 00001CB7 EBDB                <1>     jmp short .getSectorInCluster
   609                              <1> .exitBad:
   610 00001CB9 F9                  <1>     stc
   611                              <1> .exit:
   612 00001CBA 5D                  <1>     pop rbp
   613 00001CBB 5E                  <1>     pop rsi
   614 00001CBC 5A                  <1>     pop rdx
   615 00001CBD 59                  <1>     pop rcx
   616 00001CBE 5B                  <1>     pop rbx
   617 00001CBF 58                  <1>     pop rax
   618                              <1>     return
    13                              <2> %%_ret:
    14 00001CC0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                                  %include "./Source/Kernel/FileIO/devio.asm"
     1                              <1> ;This file contains the primitive dev io function, which will be called 
     2                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
     3                              <1> ; make requests for device IO.
     4                              <1> 
     5                              <1> mainCharIO:
     6                              <1> ;This is the main IO clearing function for Char IO.
     7                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
     8                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
     9                              <1> ;
    10                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    11                              <1> ;       ah = {0,..., 5}, a subfunction number
    12                              <1> ;       Function 0: Read Char (drvREAD)
    13                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    14                              <1> ;       Function 2: Write Char (drvWrite)
    15                              <1> ; In the case the below functions are called for Disk/Net files
    16                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    17                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    18                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    19                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    20                              <1> ;
    21                              <1> ; If and only if ah = 02h, al = Char to write to device
    22                              <1> ;
    23                              <1> ;
    24                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    25                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    26                              <1> ;                                           ZF = NZ => Device ready (not busy)
    27                              <1> ;                                               If ND read, AL = Next Char
    28                              <1> ; For Files/Net:
    29                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    30                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    31                              <1> ;           For Read and ND Read:
    32                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    33                              <1> ;               Read returns ^Z on EOF.
    34                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    35                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    36                              <1> ;
    37                              <1> ;All registers preserved EXCEPT for ax and flags
    38                              <1> 
    39                              <1> ;Reference Request Header
    40                              <1> ;Common Section:
    41                              <1> ;    .hdrlen resb 1  ;Length of the request header
    42                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    43                              <1> ;    .cmdcde resb 1  ;Command code
    44                              <1> ;    .status resw 1  ;Status word
    45                              <1> ;    .devptr resq 1  ;Reserved. Unused
    46                              <1> ;Below used by calls 0,1,2,5
    47                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    48                              <1> ;Below used by calls 0,2
    49                              <1> ;    .bufptr resq 1
    50                              <1> ;    .tfrlen resd 1
    51                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    52                              <1> ;    .strtsc resq 1
    53                              <1> ;    .desptr resq 1
    54                              <1> 
    55                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    56 00001CC1 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    57 00001CC2 488D1D(10C50300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    58 00001CC9 48891D(99C40300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    59 00001CD0 5B                  <1>     pop rbx
    60 00001CD1 C705(A1C40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    60 00001CD9 0000                <1>
    61 00001CDB 668905(10C50300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    62 00001CE2 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    63 00001CE8 0F85A1000000        <1>     jnz .notChar
    64 00001CEE 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    65 00001CF4 0F8495000000        <1>     jz .notChar
    66                              <1> ;Char devices only here
    67 00001CFA E8BC4D0000          <1>     call dosPushRegs    ;Save context here
    68 00001CFF 488D1D3AE3FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    69 00001D06 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    70 00001D09 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    71 00001D0C 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    72 00001D0F 890D(8BC40300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    73                              <1>     ;Now set up cx for status word
    74 00001D15 31C9                <1>     xor ecx, ecx
    75 00001D17 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
    76 00001D1A 7506                <1>     jne .skipBsySet
    77 00001D1C 81C900020000        <1>     or ecx, drvBsyStatus
    78                              <1> .skipBsySet:
    79 00001D22 66870D(8EC40300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
    80                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
    81 00001D29 488D1D(8BC40300)    <1>     lea rbx, secdReqHdr
    82 00001D30 E81A450000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
    83 00001D35 668B3D(8EC40300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
    84 00001D3C F7C700800000        <1>     test edi, drvErrStatus
    85 00001D42 752D                <1>     jnz .error
    86                              <1> .ignoreRet:
    87 00001D44 803D(8DC40300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
    88 00001D4B 750C                <1>     jne .notNDRead
    89 00001D4D 8A05(98C40300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
    90 00001D53 8805(10C50300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
    91                              <1> .notNDRead:
    92 00001D59 8A25(8FC40300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
    93 00001D5F F6D4                <1>     not ah
    94 00001D61 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
    95 00001D64 E83B4D0000          <1>     call dosPopRegs ;Get back the context
    96 00001D69 668B05(10C50300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
    97                              <1>     return ;Return to caller
    13                              <2> %%_ret:
    14 00001D70 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    98                              <1> .error:
    99                              <1>     ;cl has flags
   100 00001D71 88CC                <1>     mov ah, cl
   101 00001D73 E8733F0000          <1>     call charDevErr
   102 00001D78 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   103 00001D7A 750A                <1>     jne .errorIgnore
   104                              <1>     ;Fallthrough => Retry
   105 00001D7C E8234D0000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   106 00001D81 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   107                              <1> .errorIgnore:
   108                              <1>     ;Clear the busy bit in the status word
   109 00001D86 8025(8FC40300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   110 00001D8D EBB5                <1>     jmp short .ignoreRet
   111                              <1> .notChar:
   112                              <1> ;rsi -> SFT to read/write to
   113 00001D8F 84E4                <1>     test ah, ah ;If ah = 0, read 1 byte
   114 00001D91 7409                <1>     jz .makeDiskNetReadReq
   115 00001D93 FECC                <1>     dec ah
   116 00001D95 7421                <1>     jz .makeDiskNetNonDestReq
   117 00001D97 FECC                <1>     dec ah
   118 00001D99 7429                <1>     jz .makeDiskNetWriteReq
   119                              <1>     ;Else just return with ZF=NZ
   120                              <1>     return
    13                              <2> %%_ret:
    14 00001D9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> .makeDiskNetReadReq:
   122 00001D9C E833000000          <1>     call .prepDiskNetIO
   123 00001DA1 E88B200000          <1>     call readBytes
   124 00001DA6 85C9                <1>     test ecx, ecx   ;Set flags for how many bytes we read, ZF=ZE => No read
   125 00001DA8 E850000000          <1>     call .cleanDiskNetIO
   126 00001DAD 8A05(10C50300)      <1>     mov al, byte [singleIObyt]
   127                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001DB3 75E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   128 00001DB5 B01A                <1>     mov al, EOF ;Else return an EOF
   129                              <1>     return
    13                              <2> %%_ret:
    14 00001DB7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   130                              <1> .makeDiskNetNonDestReq:
   131                              <1>     ;Save the SFT file pointer position and read a char
   132 00001DB8 FF761B              <1>     push qword [rsi + sft.dCurntOff]
   133 00001DBB E8DCFFFFFF          <1>     call .makeDiskNetReadReq
   134 00001DC0 8F461B              <1>     pop  qword [rsi + sft.dCurntOff]
   135                              <1>     return
    13                              <2> %%_ret:
    14 00001DC3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   136                              <1> .makeDiskNetWriteReq:
   137 00001DC4 E80B000000          <1>     call .prepDiskNetIO
   138 00001DC9 E8A2230000          <1>     call writeBytes
   139 00001DCE E82A000000          <1>     call .cleanDiskNetIO
   140                              <1>     return
    13                              <2> %%_ret:
    14 00001DD3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> .prepDiskNetIO:
   142                              <1> ;Set up the currentDTA to the internal buffer
   143                              <1> ;We use this here only so we can tweak it for this purpose
   144 00001DD4 8F05(DFC40300)      <1>     pop qword [altRet]
   145 00001DDA E8DC4C0000          <1>     call dosPushRegs
   146 00001DDF FF35(0CC40300)      <1>     push qword [currentDTA]
   147 00001DE5 488D0D(10C50300)    <1>     lea rcx, singleIObyt   ;Get the buffer ptr
   148 00001DEC 48890D(0CC40300)    <1>     mov qword [currentDTA], rcx ;and use it as the current DTA
   149 00001DF3 31C9                <1>     xor ecx, ecx
   150 00001DF5 FFC1                <1>     inc ecx ;IO 1 byte only
   151                              <1> .cleanDNIOReturn:
   152 00001DF7 FF25(DFC40300)      <1>     jmp qword [altRet]
   153                              <1> .cleanDiskNetIO:
   154 00001DFD 8F05(DFC40300)      <1>     pop qword [altRet]
   155 00001E03 8F05(0CC40300)      <1>     pop qword [currentDTA]
   156 00001E09 E8964C0000          <1>     call dosPopRegs
   157 00001E0E EBE7                <1>     jmp short .cleanDNIOReturn
   158                              <1> 
   159                              <1> openSFT:
   160                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   161                              <1> ;Input: rdi = SFT pointer
   162 00001E10 E8A64C0000          <1>     call dosPushRegs
   163 00001E15 B00D                <1>     mov al, drvOPEN
   164 00001E17 EB07                <1>     jmp short openCloseCommon
   165                              <1> closeSFT:
   166                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   167 00001E19 E89D4C0000          <1>     call dosPushRegs
   168 00001E1E B00E                <1>     mov al, drvCLOSE
   169                              <1> openCloseCommon:
   170                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   171 00001E20 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   172 00001E26 7469                <1>     jz .exit    ;Exit if so
   173 00001E28 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   174 00001E2C 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   175 00001E30 7512                <1>     jnz .charDev
   176                              <1>     ;Here a disk drive, rdi is a DPB ptr
   177 00001E32 803D(C9C30300)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   178 00001E39 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   179 00001E3B 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   180 00001E3E 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   181 00001E40 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   182                              <1> .charDev:
   183 00001E44 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   184 00001E4A 7445                <1>     jz .exit    ;No, exit!
   185 00001E4C 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   186 00001E4F 488D1D(B5C40300)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   187 00001E56 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   188                              <1> .retryEP:
   189 00001E59 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   190 00001E5C C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   191 00001E5F 50                  <1>     push rax    ;Save the dword
   192 00001E60 E8EE430000          <1>     call goDriver
   193 00001E65 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   194 00001E6C F7C700800000        <1>     test edi, drvErrStatus
   195 00001E72 741C                <1>     jz .exitPop
   196                              <1>     ;Error here, check if char or block drive
   197 00001E74 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   198 00001E7A 7404                <1>     jz .blockError
   199                              <1>     ;Char error here
   200 00001E7C B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   201 00001E7E EB04                <1>     jmp short .errorCmn
   202                              <1> .blockError:
   203 00001E80 88C8                <1>     mov al, cl  ;Move drive number into al
   204 00001E82 B406                <1>     mov ah, critData    ;Data on block dev error
   205                              <1> .errorCmn:
   206                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   207 00001E84 E8623E0000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   208 00001E89 B001                <1>     mov al, critRetry   ;al returns user response
   209 00001E8B 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   210 00001E8D 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   211 00001E8E EBC9                <1>     jmp short .retryEP  ;Reset
   212                              <1> .exitPop:
   213 00001E90 58                  <1>     pop rax    
   214                              <1> .exit:
   215 00001E91 E80E4C0000          <1>     call dosPopRegs
   216                              <1>     return
    13                              <2> %%_ret:
    14 00001E96 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    30                                  %include "./Source/Kernel/FileIO/charFunc.asm"
     1                              <1> ;-----------------------------------------------------------------------:
     2                              <1> ;                  DOS default char functions live here                 :
     3                              <1> ;                                                                       :
     4                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
     5                              <1> ;                                                                       :
     6                              <1> ;Rules for the naming of the DOS functions                              :
     7                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
     8                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
     9                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    10                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    11                              <1> ;                                                                       :
    12                              <1> ;-----------------------------------------------------------------------:
    13                              <1> 
    14                              <1> charIn_BE:     ;ah = 01h
    15                              <1> ;Return char that has been read and echoed in al
    16 00001E97 E87D010000          <1>     call charIn_B
    17 00001E9C 50                  <1>     push rax
    18 00001E9D E804000000          <1>     call charOut_B.in    ;Output it to screen
    19 00001EA2 58                  <1>     pop rax
    20                              <1>     return
    13                              <2> %%_ret:
    14 00001EA3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> charOut_B:       ;ah = 02h
    23                              <1> ;Bspace is regular cursor left, does not insert a blank
    24 00001EA4 88D0                <1>     mov al, dl
    25                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 4Fh, AX=1205h
    26 00001EA6 3C20                <1>     cmp al, asciiCaret
    27 00001EA8 0F8286000000        <1>     jb .control
    28 00001EAE 3C7F                <1>     cmp al, DEL ;DEL char?
    29 00001EB0 7406                <1>     je .skipCurs
    30 00001EB2 FE05(C1C20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    31                              <1> .skipCurs:
    32 00001EB8 FE05(C7C30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    33 00001EBE 8025(C7C30300)03    <1>     and byte [vConErr], 3
    34 00001EC5 56                  <1>     push rsi
    35 00001EC6 7507                <1>     jnz .skipErrorCheck
    36 00001EC8 50                  <1>     push rax
    37 00001EC9 E897020000          <1>     call vConCtrlCheck
    38 00001ECE 58                  <1>     pop rax
    39                              <1> .skipErrorCheck:
    40 00001ECF E81F020000          <1>     call outputOnStdout
    41 00001ED4 5E                  <1>     pop rsi
    42 00001ED5 F605(C4C30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    43                              <1>     retz    ;If zero, no echo
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001EDC 74C5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    44 00001EDE 53                  <1>     push rbx
    45 00001EDF 56                  <1>     push rsi
    46 00001EE0 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    47 00001EE5 E842030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    48 00001EEA 0F82CE000000        <1>     jc auxOutCmn.exit
    49                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    50 00001EF0 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    51 00001EF4 F7C300800000        <1>     test ebx, devRedirDev
    52 00001EFA 0F85BE000000        <1>     jnz auxOutCmn.exit  ;Exit if STDOUT is redir
    53 00001F00 F7C380000000        <1>     test ebx, devCharDev
    54 00001F06 0F84B2000000        <1>     jz auxOutCmn.exit
    55 00001F0C BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    56 00001F11 E816030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    57 00001F16 0F82A2000000        <1>     jc auxOutCmn.exit   ;Exit if handle closed
    58 00001F1C 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    59 00001F22 0F8491000000        <1>     jz auxOutCmn.diskFileEP
    60 00001F28 C605(C4C30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    61 00001F2F E98A000000          <1>     jmp auxOutCmn.netFileEP
    62                              <1> .control:
    63 00001F34 3C0D                <1>     cmp al, CR
    64 00001F36 7429                <1>     je .newline
    65 00001F38 3C08                <1>     cmp al, BSP
    66 00001F3A 7431                <1>     je .back
    67 00001F3C 3C09                <1>     cmp al, TAB
    68 00001F3E 0F8574FFFFFF        <1>     jne .skipCurs   ;Treat as normal
    69                              <1>     ;TAB key here
    70                              <1> .tab:
    71 00001F44 51                  <1>     push rcx
    72 00001F45 0FB60D(C1C20300)    <1>     movzx ecx, byte [vConCursPos]
    73 00001F4C 80C9F8              <1>     or cl, ~7
    74 00001F4F F6D9                <1>     neg cl
    75 00001F51 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
    76                              <1> .tabloop:
    77 00001F54 B020                <1>     mov al, SPC
    78 00001F56 E84BFFFFFF          <1>     call charOut_B.in   ;Output the char
    79 00001F5B FEC9                <1>     dec cl
    80 00001F5D 75F5                <1>     jnz .tabloop
    81                              <1> .stopTab:
    82 00001F5F 59                  <1>     pop rcx
    83                              <1>     return ;Exit
    13                              <2> %%_ret:
    14 00001F60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    84                              <1> .newline:
    85 00001F61 C605(C1C20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
    86 00001F68 E94BFFFFFF          <1>     jmp .skipCurs   ;And echo 
    87                              <1> .back:
    88 00001F6D FE0D(C1C20300)      <1>     dec byte [vConCursPos]
    89 00001F73 E940FFFFFF          <1>     jmp .skipCurs   ;And echo
    90                              <1> 
    91                              <1> auxIn_B:        ;ah = 03h
    92 00001F78 E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
    93 00001F7D BB03000000          <1>     mov ebx, 3
    94 00001F82 E8A5020000          <1>     call getCharDevSFT
    95                              <1>     retc    ;Return if CF set (handle 3 is closed)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001F87 72D7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    96                              <1> .auxloop:
    97 00001F89 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
    98 00001F8B E831FDFFFF          <1>     call mainCharIO
    99 00001F90 7408                <1>     jz .signalLoop
   100 00001F92 30E4                <1>     xor ah, ah  ;Read the char in
   101 00001F94 E828FDFFFF          <1>     call mainCharIO
   102                              <1>     return
    13                              <2> %%_ret:
    14 00001F99 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .signalLoop:
   104 00001F9A E8A3010000          <1>     call callInt48h
   105 00001F9F EBE8                <1>     jmp short .auxloop
   106                              <1> 
   107                              <1> auxOut_B:       ;ah = 04h
   108 00001FA1 53                  <1>     push rbx
   109 00001FA2 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   110 00001FA7 EB06                <1>     jmp short auxOutCmn
   111                              <1> prnOut_B:       ;ah = 05h
   112 00001FA9 53                  <1>     push rbx
   113 00001FAA BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   114                              <1> auxOutCmn: ;Auxilliary output device common 
   115 00001FAF 88D0                <1>     mov al, dl  ;Get the char into al
   116 00001FB1 50                  <1>     push rax
   117 00001FB2 E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   118 00001FB7 58                  <1>     pop rax
   119 00001FB8 56                  <1>     push rsi
   120                              <1> .diskFileEP:
   121 00001FB9 E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   122                              <1> .netFileEP:
   123                              <1> .exit:
   124 00001FBE 5E                  <1>     pop rsi
   125 00001FBF 5B                  <1>     pop rbx
   126                              <1>     return
    13                              <2> %%_ret:
    14 00001FC0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> directConIO:    ;ah = 06h
   129 00001FC1 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   130 00001FC3 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   131 00001FC5 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   132                              <1> ;Here is the read char direct function
   133 00001FCB 31DB                <1>     xor ebx, ebx    
   134 00001FCD E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   135                              <1>     retc    ;Return error if ebx closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001FD2 72EC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   136 00001FD4 488B2D(6FC40300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   137 00001FDB B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   138 00001FDD E8DFFCFFFF          <1>     call mainCharIO
   139 00001FE2 E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   140 00001FE7 7507                <1>     jnz .readChar
   141 00001FE9 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   142 00001FED 30C0                <1>     xor al, al  ;Set caller return code to 0
   143                              <1>     return
    13                              <2> %%_ret:
    14 00001FEF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   144                              <1> .readChar:
   145 00001FF0 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   146                              <1>     ;Fallthrough here to get the char at STDIN
   147                              <1> charIn:         ;ah = 07h
   148                              <1> ;Return char in al from STDIN without waiting
   149 00001FF4 31DB                <1>     xor ebx, ebx
   150 00001FF6 E831020000          <1>     call getCharDevSFT
   151                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001FFB 72F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   152 00001FFD B401                <1>     mov ah, 01  ;ND read for char
   153 00001FFF E8BDFCFFFF          <1>     call mainCharIO
   154 00002004 750B                <1>     jnz .getChar
   155 00002006 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   156 00002008 CD4A                <1>     int 4Ah
   157 0000200A E833010000          <1>     call callInt48h
   158 0000200F EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   159                              <1> .getChar:
   160                              <1>     ;Get the char in al and exit
   161 00002011 30E4                <1>     xor ah, ah
   162 00002013 E8A9FCFFFF          <1>     call mainCharIO
   163                              <1>     return
    13                              <2> %%_ret:
    14 00002018 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   164                              <1> charIn_B:       ;ah = 08h
   165                              <1> ;Return char in al from STDIN
   166 00002019 56                  <1>     push rsi
   167                              <1> .readAgain:
   168 0000201A E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   169                              <1>     ;Also sets rsi to point to the device SFT for 
   170 0000201F 7543                <1>     jnz .pullChar
   171 00002021 803D(D9D90300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   172 00002028 7507                <1>     jne .skiplookahead
   173 0000202A B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   174 0000202C E890FCFFFF          <1>     call mainCharIO
   175                              <1> .skiplookahead:
   176 00002031 B484                <1>     mov ah, 84h
   177 00002033 CD4A                <1>     int 4ah ;Multitasking keyboard loop
   178 00002035 66813D(BADA0300)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   178 0000203D FF                  <1>
   179 0000203E 751B                <1>     jne .skipClockRead
   180 00002040 E8764A0000          <1>     call dosPushRegs
   181 00002045 F8                  <1>     clc ;Clear CF, write primary header to backup
   182 00002046 E882000000          <1>     call swapPrimaryHeader
   183 0000204B E8D2060000          <1>     call readDateTimeRecord
   184 00002050 F9                  <1>     stc ;Set CF, write backup to primary header
   185 00002051 E877000000          <1>     call swapPrimaryHeader
   186 00002056 E8494A0000          <1>     call dosPopRegs
   187                              <1> .skipClockRead:
   188 0000205B 66FF05(BADA0300)    <1>     inc word [keybTicks]
   189 00002062 EBB6                <1>     jmp short .readAgain
   190                              <1> .pullChar:
   191 00002064 30E4                <1>     xor ah, ah
   192 00002066 E856FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   193 0000206B 5E                  <1>     pop rsi
   194 0000206C 3C00                <1>     cmp al, NUL ;Is this the null char?
   195 0000206E 7507                <1>     jne .exit
   196                              <1>     ;We are mid extended ascii, prevent printer toggling
   197 00002070 C605(B9DA0300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   198                              <1> .exit:
   199                              <1>     return
    13                              <2> %%_ret:
    14 00002077 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printString_B:      ;ah = 09h
   202 00002078 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   203                              <1> .ps0:
   204 0000207B AC                  <1>     lodsb   ;Get char in al and inc rsi
   205 0000207C 3C24                <1>     cmp al, "$" ;End of string char?
   206                              <1>     rete    ;Return if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000207E 74F7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   207 00002080 E821FEFFFF          <1>     call charOut_B.in
   208 00002085 EBF4                <1>     jmp short .ps0
   209                              <1> 
   210                              <1> checkStdinStatus:  ;ah = 0Bh
   211                              <1> ;Returns the status of the driver controlling vCon
   212 00002087 E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   213 0000208C B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   214                              <1>     retz    ;If BSY set (no chars available), return with al=00
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000208E 74E7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   215 00002090 FEC8                <1>     dec al  ;Set al to -1 if char available
   216                              <1>     return  ;Exit
    13                              <2> %%_ret:
    14 00002092 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> clearbuffDoFunc:   ;ah = 0Ch
   218                              <1> ;Clears any buffers and issues a console read command (the command in al)
   219                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   220 00002093 50                  <1>     push rax
   221 00002094 52                  <1>     push rdx
   222 00002095 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   223 00002097 E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   224 0000209C 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   225 0000209E B404                <1>     mov ah, 04h ;Flush input buffers
   226 000020A0 E81CFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   227                              <1> .skipFlush:
   228 000020A5 5A                  <1>     pop rdx
   229 000020A6 58                  <1>     pop rax
   230 000020A7 88C4                <1>     mov ah, al  ;Move function number into ah
   231 000020A9 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   232 000020AB 7507                <1>     jne .others
   233 000020AD 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   234 000020B0 7412                <1>     jz .bad ;Yes, exit
   235 000020B2 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   236                              <1> .others:
   237 000020B4 3C01                <1>     cmp al, 01h
   238 000020B6 740F                <1>     je .callFunction
   239 000020B8 3C07                <1>     cmp al, 07h
   240 000020BA 740B                <1>     je .callFunction
   241 000020BC 3C08                <1>     cmp al, 08h
   242 000020BE 7407                <1>     je .callFunction
   243 000020C0 3C0A                <1>     cmp al, 0Ah
   244 000020C2 7403                <1>     je .callFunction
   245                              <1> .bad:
   246 000020C4 30C0                <1>     xor al, al
   247                              <1>     return
    13                              <2> %%_ret:
    14 000020C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   248                              <1> .callFunction:
   249 000020C7 FA                  <1>     cli ;Prepare to swap stack pointer
   250                              <1>     ;The below address avoids "properly" reentering DOS
   251                              <1>     ;We simply reuse the function dispatch aspect. 
   252                              <1>     ;this means we dont trash the caller's register frame 
   253 000020C8 E906490000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   254                              <1> ;------------------------
   255                              <1> ;  Primitive functions  :
   256                              <1> ;------------------------
   257                              <1> swapPrimaryHeader:
   258                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   259                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   260 000020CD 56                  <1>     push rsi
   261 000020CE 57                  <1>     push rdi
   262 000020CF 51                  <1>     push rcx
   263 000020D0 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   263 000020D9 00                  <1>
   264 000020DA 488D35(B5C40300)    <1>     lea rsi, primReqHdr
   265 000020E1 488D3D(8CDA0300)    <1>     lea rdi, bkupReqHdr
   266 000020E8 7303                <1>     jnc .read
   267 000020EA 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   268                              <1> .read:
   269 000020ED F3A4                <1>     rep movsb   ;Swap
   270 000020EF 59                  <1>     pop rcx
   271 000020F0 5F                  <1>     pop rdi
   272 000020F1 5E                  <1>     pop rsi
   273                              <1>     return
    13                              <2> %%_ret:
    14 000020F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   274                              <1> outputOnStdout:
   275                              <1> ;Input: al = Char to output
   276                              <1> ;Output: CF=CY, all good
   277 000020F3 53                  <1>     push rbx
   278 000020F4 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   279 000020F9 E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   280 000020FE 7217                <1>     jc .exit
   281 00002100 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   282 00002106 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   283 00002108 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   284 0000210C 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   285 00002112 7405                <1>     jz .notCharDevOrFast
   286 00002114 CD49                <1>     int 49h ;Fast output
   287                              <1> .exitOk:
   288 00002116 F8                  <1>     clc
   289                              <1> .exit:
   290 00002117 5B                  <1>     pop rbx
   291                              <1>     return
    13                              <2> %%_ret:
    14 00002118 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   292                              <1> .notCharDevOrFast:
   293 00002119 E809000000          <1>     call outputOnSFT
   294 0000211E 5B                  <1>     pop rbx
   295                              <1>     return
    13                              <2> %%_ret:
    14 0000211F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> 
   297                              <1> outputToHandle:
   298                              <1> ;Char to output must be in al
   299 00002120 E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   300                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002125 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   301                              <1> outputOnSFT:
   302                              <1> ;Output char in al to SFT in rsi
   303                              <1> ;Waits until device is not busy to send char.
   304                              <1> ;Calls int 48h if device busy
   305 00002127 50                  <1>     push rax
   306 00002128 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   307 0000212A E892FBFFFF          <1>     call mainCharIO
   308 0000212F 58                  <1>     pop rax
   309 00002130 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   310 00002132 B402                <1>     mov ah, 02h ;Output char in al
   311 00002134 E888FBFFFF          <1>     call mainCharIO
   312 00002139 F8                  <1>     clc
   313                              <1>     return
    13                              <2> %%_ret:
    14 0000213A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   314                              <1> .signalLoop:
   315 0000213B E802000000          <1>     call callInt48h
   316 00002140 EBE5                <1>     jmp short outputOnSFT
   317                              <1> 
   318                              <1> callInt48h:
   319                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   320 00002142 9C                  <1>     pushfq
   321 00002143 F605(89C40300)FF    <1>     test byte [int48Flag], -1
   322 0000214A 7417                <1>     jz .exit    ;If zero, not safe
   323 0000214C F605(FCC30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   324 00002153 750E                <1>     jnz .exit
   325                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   326 00002155 FF35(89C40300)      <1>     push qword [int48Flag] 
   327 0000215B CD48                <1>     int 48h
   328 0000215D 8F05(89C40300)      <1>     pop qword [int48Flag]    ;Return original value
   329                              <1> .exit:
   330 00002163 9D                  <1>     popfq
   331                              <1>     return
    13                              <2> %%_ret:
    14 00002164 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   332                              <1> 
   333                              <1> 
   334                              <1> vConCtrlCheck:
   335                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   336                              <1> ; the processing. 
   337                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   338                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   339                              <1> ;
   340                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   341                              <1> ;^S will pause screen processing until another key is processed by vCon input
   342                              <1> ;^P will toggle the printer echo feature of the vConsole
   343                              <1> ;
   344                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   345                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   346                              <1> ;
   347                              <1> ;Output: 
   348                              <1> ;   CF=CY : Error
   349                              <1> ;   CF=NC : ...
   350                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   351                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   352 00002165 E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   353 0000216A 53                  <1>     push rbx
   354 0000216B 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   355 0000216D E8BA000000          <1>     call getCharDevSFT
   356 00002172 5B                  <1>     pop rbx
   357                              <1>     retc    ;Return if CF=CY
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002173 72EF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   358 00002175 B401                <1>     mov ah, 01  ;Non destructively read CON
   359 00002177 E845FBFFFF          <1>     call mainCharIO
   360 0000217C 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   361                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   362 0000217E 3C13                <1>     cmp al, DC3 ;^S ?
   363 00002180 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   364 00002182 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   365 00002184 E838FBFFFF          <1>     call mainCharIO
   366 00002189 E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   367                              <1> .checkPrintOrExit:
   368 0000218E 3C10                <1>     cmp al, DLE ;Do we have ^P?
   369 00002190 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   370 00002192 3C03                <1>     cmp al, ETX ;Do we have ^C?
   371 00002194 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   372                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   373                              <1>     return 
    13                              <2> %%_ret:
    14 00002196 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   374                              <1> .printToggle:
   375 00002197 F615(C4C30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   376 0000219D 53                  <1>     push rbx
   377 0000219E BB04000000          <1>     mov ebx, 4  ;PRN handle
   378 000021A3 E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   379 000021A8 5B                  <1>     pop rbx
   380                              <1>     retc    ;If CF=CY, exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000021A9 72EB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   381 000021AB 57                  <1>     push rdi
   382 000021AC 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   383 000021AF 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   384 000021B5 741D                <1>     jz .notNet
   385 000021B7 50                  <1>     push rax
   386 000021B8 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   387 000021BD CD4F                <1>     int 4Fh
   388 000021BF 58                  <1>     pop rax
   389 000021C0 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   390                              <1>     ;If something went wrong, turn off echo
   391 000021C2 C605(C4C30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   392 000021C9 50                  <1>     push rax
   393 000021CA B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   394 000021CF CD4F                <1>     int 4Fh
   395 000021D1 58                  <1>     pop rax
   396 000021D2 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   397                              <1> .notNet:
   398                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   399                              <1> ; 0Dh or 0Eh
   400 000021D4 803D(C4C30300)00    <1>     cmp byte [printEcho], 00
   401 000021DB 7507                <1>     jnz .echoOn
   402 000021DD E837FCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   403 000021E2 EB05                <1>     jmp short .printExit
   404                              <1> .echoOn:
   405 000021E4 E827FCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   406                              <1> .printExit:
   407 000021E9 5F                  <1>     pop rdi
   408                              <1>     return
    13                              <2> %%_ret:
    14 000021EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   410 000021EB E852FFFFFF          <1>     call callInt48h
   411                              <1> .waitNextChar:   ;Here get next char
   412 000021F0 B401                <1>     mov ah, 01h ;ND read
   413 000021F2 E8CAFAFFFF          <1>     call mainCharIO
   414 000021F7 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   415                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   416 000021F9 53                  <1>     push rbx
   417 000021FA 31DB                <1>     xor ebx, ebx
   418 000021FC E82B000000          <1>     call getCharDevSFT
   419 00002201 5B                  <1>     pop rbx
   420                              <1>     retc    ;Return if STDIN closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002202 72E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   421 00002204 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   422 00002206 E8B6FAFFFF          <1>     call mainCharIO
   423 0000220B 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   424 0000220D 7514                <1>     jnz .checkBreak2
   425 0000220F 803D(B9DA0300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   426 00002216 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   427 0000221C C605(B9DA0300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   428                              <1> .checkBreak2:
   429 00002223 3C03                <1>     cmp al, ETX
   430                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002225 75C3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   431 00002227 E9783B0000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   432                              <1> 
   433                              <1> 
   434                              <1> getCharDevSFT:
   435                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   436                              <1> ;Input: bx = zero extended handle number
   437                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   438                              <1> ;        CF=CY => al = Error code, abort operation
   439 0000222C F605(88C40300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   440 00002233 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   441                              <1> .getSFT:
   442 00002235 57                  <1>     push rdi
   443 00002236 E813250000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   444 0000223B 4889FE              <1>     mov rsi, rdi
   445 0000223E 5F                  <1>     pop rdi
   446                              <1>     return  ;Return with CF set
    13                              <2> %%_ret:
    14 0000223F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   447                              <1> .swap:
   448                              <1> ;workingSFT is only set for CON calls
   449 00002240 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   450 00002246 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   451 00002248 488B35(12C70300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   452 0000224F F8                  <1>     clc
   453                              <1>     return
    13                              <2> %%_ret:
    14 00002250 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   454                              <1> 
   455                              <1> ;------------------------
   456                              <1> ;   Utility functions   :
   457                              <1> ;------------------------
   458                              <1> printCaretASCII:
   459                              <1> ;Input: al = Char to print with a caret
   460                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   461                              <1> ;First check if the char should be careted, and then print normally if so
   462 00002251 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   463 00002253 0F834DFCFFFF        <1>     jae charOut_B.in
   464 00002259 3C09                <1>     cmp al, TAB
   465 0000225B 0F8445FCFFFF        <1>     je charOut_B.in
   466 00002261 3C15                <1>     cmp al, NAK
   467 00002263 0F843DFCFFFF        <1>     je charOut_B.in
   468 00002269 3C14                <1>     cmp al, DC4
   469 0000226B 0F8435FCFFFF        <1>     je charOut_B.in
   470 00002271 50                  <1>     push rax
   471 00002272 B05E                <1>     mov al, "^" ;Get caret in place
   472 00002274 E82DFCFFFF          <1>     call charOut_B.in
   473 00002279 58                  <1>     pop rax
   474 0000227A 0440                <1>     add al, "@" ;Turn into an ASCII Char
   475 0000227C E925FCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   476                              <1> printCRLF:
   477 00002281 B00D                <1>     mov al, CR
   478 00002283 E81EFCFFFF          <1>     call charOut_B.in
   479 00002288 B00A                <1>     mov al, LF
   480 0000228A E917FCFFFF          <1>     jmp charOut_B.in
   481                              <1> 
   482                              <1> checkBreak:
   483                              <1> ;Reads bytes from CON if there are any bytes to read and 
   484                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   485 0000228F 803D(FDC30300)01    <1>     cmp byte [inDOS], 1
   486                              <1>     retne    ;Return if not inDOS only once
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002296 75B8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   487                              <1> ;Returns in al the keystroke that is available IF one is available
   488                              <1> ; or al=0 if no keystroke available
   489 00002298 53                  <1>     push rbx
   490 00002299 56                  <1>     push rsi
   491 0000229A 488B35(59C00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   492                              <1>     ;Place command code and a zero status word at the same time
   493 000022A1 C705(E1C40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   493 000022A9 0000                <1>
   494                              <1>     ;Place the packet size in the hdrlen field
   495 000022AB C605(DFC40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   496 000022B2 488D1D(DFC40300)    <1>     lea rbx, critReqHdr
   497 000022B9 E8953F0000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   498                              <1>     ;Check if the busy bit is set (No keystroke available)
   499 000022BE 66F705(E2C40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   499 000022C6 02                  <1>
   500 000022C7 7405                <1>     jz .charFound
   501                              <1> .exit:
   502 000022C9 30C0                <1>     xor al, al
   503 000022CB 5E                  <1>     pop rsi
   504 000022CC 5B                  <1>     pop rbx
   505                              <1>     return
    13                              <2> %%_ret:
    14 000022CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   506                              <1> .charFound:
   507                              <1> ;Keystroke available, proceed
   508 000022CE 8A05(ECC40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   509 000022D4 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   510 000022D6 75F1                <1>     jne .exit   ;If not equal exit
   511                              <1> ;Now we pull the char out of the buffer
   512 000022D8 C705(E1C40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   512 000022E0 0000                <1>
   513 000022E2 C605(DFC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   514                              <1>     ;Place pointers and number of chars
   515 000022E9 C705(F5C40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   515 000022F1 0000                <1>
   516                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   517 000022F3 488D05(ECC40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   518 000022FA 488905(EDC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   519 00002301 E84D3F0000          <1>     call goDriver   ;RSI and RBX as before
   520 00002306 E9993A0000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   521                              <1> 
   522                              <1> vConSwapDriver:
   523                              <1> ;Sets up the vCon to use the alternative SFT pointer
   524 0000230B 57                  <1>     push rdi
   525 0000230C C605(88C40300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   526 00002313 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   527 0000231A 48893D(12C70300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   528 00002321 5F                  <1>     pop rdi
   529                              <1>     return
    13                              <2> %%_ret:
    14 00002322 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> vConRetDriver:
   532                              <1> ;Returns the original driver (sets flag down)
   533 00002323 C605(88C40300)00    <1>     mov byte [vConDrvSwp], 0
   534                              <1>     return
    13                              <2> %%_ret:
    14 0000232A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   535                              <1> 
   536                              <1> ;--------------------------------------------------
   537                              <1> ;      Main Keyboard Buffered Input Function      :
   538                              <1> ;--------------------------------------------------
   539                              <1> buffCharInput_BE:  ;ah = 0Ah
   540                              <1> ;Buffer pointer in rdx
   541                              <1> ; byte [rdx + 0], buffer length
   542                              <1> ; byte [rdx + 1], number of chars in buffer
   543                              <1> ; byte [rdx + 2], buffer start
   544                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   545                              <1> ;Register use
   546                              <1> ; dh = Char offset in internal buffer
   547                              <1> ; dl = Buffer length
   548                              <1> ; bh = Char offset in user buffer
   549                              <1> ; bl = Number of chars already in the buffer
   550                              <1> ; rdi = Internal buffer
   551                              <1> ; rsi = User buffer
   552 0000232B 4889D6              <1>     mov rsi, rdx
   553 0000232E 66AD                <1>     lodsw   ;Get buffer metadata in ax
   554 00002330 84C0                <1>     test al, al
   555                              <1>     retz    ;If buffer length zero, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002332 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   556 00002334 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   557 00002337 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   558 00002339 7606                <1>     jbe .avoidcheck
   559 0000233B 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   560 0000233F 7402                <1>     je .functionKeyOk
   561                              <1> .avoidcheck:
   562 00002341 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   563                              <1> .functionKeyOk:
   564 00002343 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   565 00002346 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   566                              <1> .breakEP:
   567 00002348 8A05(C1C20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   568 0000234E 8805(C2C20300)      <1>     mov byte [vConCurCnt], al
   569 00002354 56                  <1>     push rsi    ;Push user buffer address
   570 00002355 488D3D(C3C20300)    <1>     lea rdi, vConBuffer
   571 0000235C C605(F3C60300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   572                              <1> .mainLoop:
   573 00002363 E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   574 00002368 3C0A                <1>     cmp al, LF
   575 0000236A 7505                <1>     jne .checkControlChars
   576                              <1> .mainLoop2:
   577 0000236C E8A8FCFFFF          <1>     call charIn_B
   578                              <1> .checkControlChars:
   579 00002371 3C06                <1>     cmp al, ACK
   580 00002373 74F7                <1>     je .mainLoop2   ;Get another char
   581 00002375 3A05E5DCFFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   582 0000237B 0F8426010000        <1>     je .escape
   583 00002381 3C7F                <1>     cmp al, DEL
   584 00002383 0F8489000000        <1>     je .delete
   585 00002389 3C08                <1>     cmp al, BSP
   586 0000238B 0F8481000000        <1>     je .delete
   587 00002391 3C17                <1>     cmp al, ETB
   588                              <1>     ;Add space for patched jump instructions
   589 00002393 9090909090          <1>     db 5 dup (90h)  ;NOP
   590 00002398 3C15                <1>     cmp al, NAK
   591 0000239A 9090909090          <1>     db 5 dup (90h)
   592 0000239F 3C0D                <1>     cmp al, CR
   593 000023A1 744C                <1>     je .carriageReturn
   594 000023A3 3C0A                <1>     cmp al, LF
   595 000023A5 7461                <1>     je .lineFeed
   596 000023A7 3A05B4DCFFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   597 000023AD 7429                <1>     je .break
   598                              <1> .checkIfCanInsert:
   599 000023AF 38D6                <1>     cmp dh, dl
   600 000023B1 731C                <1>     jae .bufOflw
   601 000023B3 AA                  <1>     stosb   ;Store the byte and increment rdi!
   602 000023B4 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   603 000023B6 E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   604 000023BB 803D(F3C60300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   605 000023C2 75A8                <1>     jne .mainLoop2
   606                              <1>     ;IF not in insert mode, we fall here
   607                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   608                              <1>     ; or insert chars if needed.
   609 000023C4 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   610 000023C6 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   611 000023C8 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   612 000023CB FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   613 000023CD EB9D                <1>     jmp short .mainLoop2
   614                              <1> .bufOflw:
   615                              <1> ;Buffer overflow
   616 000023CF B007                <1>     mov al, BEL ;Sound the bell
   617 000023D1 E8D0FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   618 000023D6 EB94                <1>     jmp short .mainLoop2
   619                              <1> .break:
   620                              <1> ;Break, Place a "\", and do a CRLF
   621 000023D8 B05C                <1>     mov al, "\"
   622 000023DA E8C7FAFFFF          <1>     call charOut_B.in
   623 000023DF 5E                  <1>     pop rsi ;Realign stack
   624                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   625 000023E0 E89CFEFFFF          <1>     call printCRLF
   626                              <1>     ;Align to next tabstop
   627 000023E5 E85AFBFFFF          <1>     call charOut_B.tab
   628 000023EA E959FFFFFF          <1>     jmp .breakEP
   629                              <1> .carriageReturn:
   630 000023EF AA                  <1>     stosb
   631 000023F0 E8B1FAFFFF          <1>     call charOut_B.in
   632 000023F5 5F                  <1>     pop rdi ;User buffer address was pushed 
   633 000023F6 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   634 000023F9 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   635                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   636 000023FB 488D35(C3C20300)    <1>     lea rsi, vConBuffer
   637 00002402 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   638 00002405 F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   639                              <1>     return
    13                              <2> %%_ret:
    14 00002407 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   640                              <1> .lineFeed:
   641 00002408 E874FEFFFF          <1>     call printCRLF
   642 0000240D E95AFFFFFF          <1>     jmp .mainLoop2
   643                              <1> .delete:
   644 00002412 E805000000          <1>     call .removeChar
   645 00002417 E950FFFFFF          <1>     jmp .mainLoop2
   646                              <1> .removeChar:
   647 0000241C 84F6                <1>     test dh, dh ;Is char count 0?
   648 0000241E 741C                <1>     jz .normalChar   ;If so, skip going back!
   649 00002420 E868000000          <1>     call .vConErase
   650 00002425 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   651 00002427 3C20                <1>     cmp al, SPC
   652 00002429 7311                <1>     jae .normalChar
   653 0000242B 3C09                <1>     cmp al, TAB
   654 0000242D 7420                <1>     je .eraTab
   655 0000242F 3C15                <1>     cmp al, NAK
   656 00002431 7409                <1>     je .normalChar
   657 00002433 3C14                <1>     cmp al, DC4
   658 00002435 7405                <1>     je .normalChar
   659 00002437 E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   660                              <1> .normalChar:
   661 0000243C 803D(F3C60300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   662                              <1>     retne ;Yes, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002443 75C2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   663 00002445 84FF                <1>     test bh, bh ;Beginning of user buffer?
   664                              <1>     retz    ;Yes, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002447 74BE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   665 00002449 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   666 0000244C FECF                <1>     dec bh
   667                              <1>     return
    13                              <2> %%_ret:
    14 0000244E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   668                              <1> .eraTab:
   669                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   670                              <1> ; up to a tab stop worth of space chars printed
   671 0000244F 57                  <1>     push rdi
   672 00002450 48FFCF              <1>     dec rdi
   673 00002453 FD                  <1>     std ;Go backwards
   674 00002454 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   675 00002457 B020                <1>     mov al, SPC
   676 00002459 53                  <1>     push rbx
   677 0000245A BB07000000          <1>     mov ebx, 7
   678 0000245F 67E30D              <1>     jecxz .onTabstop
   679                              <1> .scanString:
   680 00002462 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   681 00002463 7608                <1>     jbe .notChar    ;No, skip handling
   682 00002465 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   683 00002469 740A                <1>     je .tabChar
   684 0000246B FECB                <1>     dec bl
   685                              <1> .notChar:
   686 0000246D E2F3                <1>     loop .scanString
   687                              <1> .onTabstop:
   688 0000246F 2A1D(C2C20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   689                              <1> .tabChar:
   690 00002475 28F3                <1>     sub bl, dh  ;Same on tabstop
   691 00002477 00D9                <1>     add cl, bl
   692 00002479 80E107              <1>     and cl, 7
   693 0000247C 5B                  <1>     pop rbx
   694 0000247D 5F                  <1>     pop rdi
   695 0000247E FC                  <1>     cld
   696 0000247F 74BB                <1>     jz .normalChar
   697                              <1>     ;Now erase all the spaces placed on the vCon
   698                              <1> .vConDelTab:
   699 00002481 E80C000000          <1>     call .vConEraseNoDec
   700 00002486 E2F9                <1>     loop .vConDelTab
   701 00002488 E9AFFFFFFF          <1>     jmp .normalChar
   702                              <1> .vConErase:
   703                              <1> ;Erase the char on the vCon
   704                              <1> ;Return through the output function
   705 0000248D 48FFCF              <1>     dec rdi ;Go back a space in the 
   706 00002490 FECE                <1>     dec dh  ;Decrement char count in the buffer
   707                              <1> .vConEraseNoDec:
   708 00002492 B008                <1>     mov al, BSP ;Move cursor back
   709 00002494 E80DFAFFFF          <1>     call charOut_B.in
   710 00002499 B020                <1>     mov al, SPC ;Replace with a space
   711 0000249B E806FAFFFF          <1>     call charOut_B.in
   712 000024A0 B008                <1>     mov al, BSP ;Move cursor back again
   713 000024A2 E9FFF9FFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   714                              <1> .escape:
   715                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   716                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   717                              <1> ; including the function keys.
   718 000024A7 FF25ABDBFFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   719                              <1> .f2:
   720 000024AD E846000000          <1>     call .fCommon2
   721 000024B2 EB0C                <1>     jmp short .fCommon
   722                              <1> .f3:
   723 000024B4 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   724 000024B7 28F9                <1>     sub cl, bh  ;Sub our current position
   725 000024B9 EB05                <1>     jmp short .fCommon
   726                              <1> .f1:
   727 000024BB B901000000          <1>     mov ecx, 1  ;Get one char
   728                              <1> .fCommon:
   729 000024C0 C605(F3C60300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   730 000024C7 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   731 000024C9 0F849DFEFFFF        <1>     je .mainLoop2
   732 000024CF 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   733 000024D1 0F8495FEFFFF        <1>     je .mainLoop2
   734                              <1>     ;Else, copy byte by byte, and retain char in al
   735 000024D7 AC                  <1>     lodsb
   736 000024D8 AA                  <1>     stosb
   737 000024D9 E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   738 000024DE FEC7                <1>     inc bh
   739 000024E0 FEC6                <1>     inc dh
   740 000024E2 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   741 000024E4 E983FEFFFF          <1>     jmp .mainLoop2
   742                              <1> .f4:
   743 000024E9 E80A000000          <1>     call .fCommon2
   744 000024EE 4801CE              <1>     add rsi, rcx
   745 000024F1 00CF                <1>     add bh, cl
   746 000024F3 E974FEFFFF          <1>     jmp .mainLoop2
   747                              <1> .fCommon2:
   748 000024F8 E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   749 000024FD 3A055DDBFFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   750 00002503 750B                <1>     jne .fnotEscape
   751                              <1>     ;Get another char if they typed escape and force it in the buffer
   752                              <1>     ; Do not return to caller
   753 00002505 E80FFBFFFF          <1>     call charIn_B
   754                              <1> .fforceExit:
   755 0000250A 59                  <1>     pop rcx ;Get original return address from stack
   756 0000250B E95CFEFFFF          <1>     jmp .mainLoop2
   757                              <1> .fnotEscape:
   758 00002510 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   759 00002513 28F9                <1>     sub cl, bh
   760 00002515 74F3                <1>     jz .fforceExit
   761 00002517 FFC9                <1>     dec ecx
   762 00002519 74EF                <1>     jz .fforceExit
   763 0000251B 57                  <1>     push rdi
   764 0000251C 4889F7              <1>     mov rdi, rsi
   765 0000251F 48FFC7              <1>     inc rdi
   766 00002522 F2AE                <1>     repne scasb ;Search for the char to start printing from
   767 00002524 5F                  <1>     pop rdi
   768 00002525 75E3                <1>     jne .fforceExit ;If char not found, return
   769 00002527 F6D1                <1>     not cl
   770 00002529 00D9                <1>     add cl, bl
   771 0000252B 28F9                <1>     sub cl, bh
   772                              <1>     return
    13                              <2> %%_ret:
    14 0000252D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   773                              <1> .f5:
   774 0000252E B040                <1>     mov al, "@"
   775 00002530 E871F9FFFF          <1>     call charOut_B.in   ;Print the char
   776 00002535 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   777 00002536 57                  <1>     push rdi
   778 00002537 E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   779 0000253C 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   780 0000253D 88F3                <1>     mov bl, dh
   781 0000253F E99CFEFFFF          <1>     jmp .breakAlt
   782                              <1> .f6:
   783                              <1> ;If the user wants to insert a EOF, they can use F6
   784 00002544 B01A                <1>     mov al, EOF
   785 00002546 E964FEFFFF          <1>     jmp .checkIfCanInsert
   786                              <1> .f7:
   787                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   788 0000254B 8A050FDBFFFF        <1>     mov al, byte [extESC]
   789 00002551 E959FEFFFF          <1>     jmp .checkIfCanInsert
   790                              <1> .toggleIns:
   791 00002556 F615(F3C60300)      <1>     not byte [vConInsert]   ;Toggle
   792                              <1>     return
    13                              <2> %%_ret:
    14 0000255C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   793                              <1> .eDel:
   794 0000255D 38DF                <1>     cmp bh, bl
   795 0000255F 0F8407FEFFFF        <1>     je .mainLoop2
   796 00002565 FEC7                <1>     inc bh
   797 00002567 48FFC6              <1>     inc rsi
   798 0000256A E9FDFDFFFF          <1>     jmp .mainLoop2
   799                              <1> 
   800                              <1> editKeys:
   801                              <1> ;Our Default Extended keys handler
   802 0000256F E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   803 00002574 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   804 00002579 57                  <1>     push rdi    ;Preserve rdi
   805 0000257A 488D3DE1DAFFFF      <1>     lea rdi, extKeyTbl
   806 00002581 57                  <1>     push rdi
   807                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   808                              <1>     ; offset of function from extKeyTbl
   809                              <1> .lp:
   810 00002582 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   811 00002583 740D                <1>     je .charFound
   812 00002585 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   813 00002587 7414                <1>     jz .notInTable
   814 00002589 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   815 00002590 EBF0                <1>     jmp short .lp
   816                              <1> .charFound:
   817 00002592 59                  <1>     pop rcx ;Pop back the effective address of the table
   818 00002593 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   819 00002597 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   820 0000259A 5F                  <1>     pop rdi
   821 0000259B FFE1                <1>     jmp rcx
   822                              <1> .notInTable:
   823 0000259D 59                  <1>     pop rcx ;Realign stack
   824 0000259E 59                  <1>     pop rcx
   825 0000259F E9C8FDFFFF          <1>     jmp buffCharInput_BE.mainLoop2
    31                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
     1                              <1> ;Major kernel date time functions and subroutines
     2                              <1> 
     3                              <1> getDate:           ;ah = 2Ah
     4 000025A4 E879010000          <1>     call readDateTimeRecord ;Update date if necessary
     5 000025A9 E8C7400000          <1>     call getUserRegs
     6 000025AE 668B15(82C40300)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
     7                              <1> ;    mov dh, byte [monthOfYear]
     8 000025B5 0FB60D(84C40300)    <1>     movzx ecx, byte [years]
     9 000025BC 8A05(87C40300)      <1>     mov al, byte [dayOfWeek]
    10 000025C2 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    11 000025C6 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    12                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 000025CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> setDate:           ;ah = 2Bh
    14                              <1> ;	CX = year (1980-2099)
    15                              <1> ;   DH = month (1-12)
    16                              <1> ;	DL = day (1-31)
    17 000025CB E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    18                              <1>     return
    13                              <2> %%_ret:
    14 000025D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> getTime:           ;ah = 2Ch
    20 000025D1 E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    21 000025D6 E89A400000          <1>     call getUserRegs
    22 000025DB 668B0D(0CC50300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    23 000025E2 668B15(0EC50300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    24 000025E9 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    25 000025ED 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    26                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 000025F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    27                              <1> setTime:           ;ah = 2Dh
    28                              <1> ;   CH = hour (0-23)
    29                              <1> ;	CL = minutes (0-59)
    30                              <1> ;	DH = seconds (0-59)
    31                              <1> ;	DL = hundredths (0-99)
    32 000025F2 80FD17              <1>     cmp ch, 23
    33 000025F5 7749                <1>     ja .exitBad
    34 000025F7 80F93B              <1>     cmp cl, 59
    35 000025FA 7744                <1>     ja .exitBad
    36 000025FC 80FE3B              <1>     cmp dh, 59
    37 000025FF 773F                <1>     ja .exitBad
    38 00002601 80FA63              <1>     cmp dl, 99
    39 00002604 773A                <1>     ja .exitBad
    40                              <1> ;Now we read date (updating internal count if necessary)
    41 00002606 E817010000          <1>     call readDateTimeRecord
    42 0000260B 488D1D(0AC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    43 00002612 0FB705(85C40300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    44 00002619 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    45 0000261C 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    46 00002620 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    47 00002624 B906000000          <1>     mov ecx, 6
    48 00002629 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    49 0000262C E8E23E0000          <1>     call primReqWriteSetup   ;rbx now points to request header
    50 00002631 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    51 00002638 E8163C0000          <1>     call goDriver
    52 0000263D 30C0                <1>     xor al, al
    53                              <1>     return
    13                              <2> %%_ret:
    14 0000263F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> .exitBad:
    55 00002640 B0FF                <1>     mov al, -1
    56                              <1>     return
    13                              <2> %%_ret:
    14 00002642 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    57                              <1> ;------------------------
    58                              <1> ;   Utility functions   :
    59                              <1> ;------------------------
    60                              <1> writeDate:
    61 00002643 6681F97800          <1>     cmp cx, 120
    62 00002648 0F83D1000000        <1>     jae .exitBad
    63 0000264E 80FE0C              <1>     cmp dh, 12
    64 00002651 0F87C8000000        <1>     ja .exitBad
    65 00002657 80FA1F              <1>     cmp dl, 31
    66 0000265A 0F87BF000000        <1>     ja .exitBad
    67 00002660 668915(82C40300)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    68                              <1>     ;mov byte [monthOfYear], dh
    69 00002667 880D(84C40300)      <1>     mov byte [years], cl    ;Save the years count
    70 0000266D E878010000          <1>     call setDaysInFeb   ;Set days in february this year
    71 00002672 88CD                <1>     mov ch, cl ;Get years count in ch
    72 00002674 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
    73 00002677 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
    74 0000267A 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
    75 0000267D BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
    76 00002682 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
    77                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
    78 00002684 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
    79 00002687 67E316              <1>     jecxz .addDay    ;Skip adding years
    80 0000268A 056E010000          <1>     add eax, 366    ;First add for a leap year
    81                              <1> .addYears:
    82 0000268F FFC9                <1>     dec ecx
    83 00002691 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
    84 00002694 056D010000          <1>     add eax, 365    ;Add the days in the normal years
    85 00002699 EBF4                <1>     jmp short .addYears
    86                              <1> .addLeap:
    87 0000269B 056E010000          <1>     add eax, 366    ;Add the days in the leap year
    88                              <1> .addDay:
    89 000026A0 89C2                <1>     mov edx, eax    ;Save this number in edx
    90                              <1>     ;Now to add day offset
    91 000026A2 0FB60D(83C40300)    <1>     movzx ecx, byte [monthOfYear]
    92 000026A9 488D35D3D9FFFF      <1>     lea rsi, monthsTbl
    93                              <1> .addDaysInMonth:
    94 000026B0 FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
    95 000026B2 67E308              <1>     jecxz .addMonthOffset
    96 000026B5 AC                  <1>     lodsb   ;Get the number of days in the month in al
    97 000026B6 0FB6C0              <1>     movzx eax, al
    98 000026B9 01C2                <1>     add edx, eax
    99 000026BB EBF3                <1>     jmp short .addDaysInMonth
   100                              <1> .addMonthOffset:
   101 000026BD 0FB60D(82C40300)    <1>     movzx ecx, byte [dayOfMonth]
   102 000026C4 FFC9                <1>     dec ecx
   103 000026C6 01CA                <1>     add edx, ecx    ;Add month offset
   104                              <1>     ;edx has the number of days since 01/01/1980
   105 000026C8 668915(85C40300)    <1>     mov word [daysOffset], dx   ;Store!
   106                              <1> ;Now read and then write CLOCKrecrd
   107 000026CF 488D1D(0AC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   108 000026D6 B906000000          <1>     mov ecx, 6
   109 000026DB 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   110 000026DE E83B3E0000          <1>     call primReqReadSetup   ;rbx now points to request header
   111 000026E3 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   112 000026EA E8643B0000          <1>     call goDriver
   113                              <1> ;Now we change daycount and write it back
   114 000026EF 0FB705(85C40300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   115 000026F6 488D1D(0AC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   116 000026FD 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   117 00002700 B906000000          <1>     mov ecx, 6
   118 00002705 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   119 00002708 E8063E0000          <1>     call primReqWriteSetup   ;rbx now points to request header
   120 0000270D 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   121 00002714 E83A3B0000          <1>     call goDriver
   122 00002719 E8AE000000          <1>     call setDayofWeek
   123                              <1>     return
    13                              <2> %%_ret:
    14 0000271E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   124                              <1> .exitBad:
   125 0000271F B0FF                <1>     mov al, -1
   126                              <1>     return
    13                              <2> %%_ret:
    14 00002721 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> readDateTimeRecord:
   129                              <1> ;Will read the clock using the primary request header
   130                              <1> ;Preserves all regs except eax and flags
   131 00002722 53                  <1>     push rbx
   132 00002723 51                  <1>     push rcx
   133 00002724 52                  <1>     push rdx
   134 00002725 56                  <1>     push rsi
   135 00002726 55                  <1>     push rbp
   136                              <1> 
   137 00002727 66C705(BADA0300)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   137 0000272F 00                  <1>
   138 00002730 488D1D(0AC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   139 00002737 B906000000          <1>     mov ecx, 6
   140 0000273C 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   141                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   142                              <1> ; rbx = Data storage buffer ptr
   143                              <1> ; ecx = Number of sectors to transfer
   144                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   145 0000273F E8DA3D0000          <1>     call primReqReadSetup   ;rbx now points to request header
   146 00002744 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   147 0000274B E8033B0000          <1>     call goDriver
   148 00002750 0FB705(0AC50300)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   149                              <1> ;Here we have:  ax = Days since 1/1/1980
   150                              <1> ;Updates the internal date fields
   151                              <1> ;Internal time fields are in the clock record
   152                              <1> ;So now we check if the number of days since 1980 are the same.
   153                              <1> ;If so, we can skip updating.
   154 00002757 663B05(85C40300)    <1>     cmp ax, word [daysOffset]
   155 0000275E 7466                <1>     je .exit    ;Return if equal
   156 00002760 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   157 00002765 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   158 00002767 668905(85C40300)    <1>     mov word [daysOffset], ax   ;Save this new offset
   159                              <1>     ;Now want to update years, month and day fields
   160                              <1>     ;ax has the number of days since 01/01/1980
   161                              <1>     ;Get days in a 4 year period
   162 0000276E BBB5050000          <1>     mov ebx, 365*4 + 1
   163 00002773 31D2                <1>     xor edx, edx
   164 00002775 89D1                <1>     mov ecx, edx  ;Zero ecx
   165 00002777 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   166                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   167                              <1>     ;edx has offset into current 4 year bunch
   168 00002779 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   169 0000277E 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   170 00002780 7210                <1>     jb .foundBunch
   171 00002782 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   172 00002784 FFC1                <1>     inc ecx
   173 00002786 FFCB                <1>     dec ebx ;Number of days in a normal year
   174                              <1> .findBunch:
   175 00002788 39DA                <1>     cmp edx, ebx
   176 0000278A 7206                <1>     jb .foundBunch
   177 0000278C 29DA                <1>     sub edx, ebx
   178 0000278E FFC1                <1>     inc ecx
   179 00002790 EBF6                <1>     jmp short .findBunch
   180                              <1> .foundBunch:
   181                              <1>     ;If ecx = 0, february has 29 days!
   182                              <1>     ;eax has number of four year bunches elapsed since 1980
   183 00002792 C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   184 00002795 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   185                              <1>     ;ecx now has the number of years since 1980
   186 00002797 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   187                              <1> ;edx has number of days into the year we are in
   188                              <1> ;eax has number of days in Feb for this year
   189 0000279C 488D35E0D8FFFF      <1>     lea rsi, monthsTbl
   190 000027A3 31C9                <1>     xor ecx, ecx    ;Use as month counter
   191                              <1> .monthSearch:
   192 000027A5 FFC1                <1>     inc ecx ;Start from 1
   193 000027A7 AC                  <1>     lodsb   ;Get value in al and inc rsi
   194 000027A8 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   195 000027AB 39C2                <1>     cmp edx, eax
   196 000027AD 7204                <1>     jb .monthFound
   197 000027AF 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   198 000027B1 EBF2                <1>     jmp short .monthSearch
   199                              <1> .monthFound:
   200                              <1>     ;cl has the month (01h-0Ch)
   201                              <1>     ;dl has the day of the month - 1
   202 000027B3 FFC2                <1>     inc edx
   203 000027B5 880D(83C40300)      <1>     mov byte [monthOfYear], cl
   204 000027BB 8815(82C40300)      <1>     mov byte [dayOfMonth], dl
   205 000027C1 E806000000          <1>     call setDayofWeek
   206                              <1> .exit:
   207 000027C6 5D                  <1>     pop rbp
   208 000027C7 5E                  <1>     pop rsi
   209 000027C8 5A                  <1>     pop rdx
   210 000027C9 59                  <1>     pop rcx
   211 000027CA 5B                  <1>     pop rbx
   212                              <1>     return  ;Return with ZF is date set, or same day
    13                              <2> %%_ret:
    14 000027CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   213                              <1> 
   214                              <1> setDayofWeek:
   215                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   216 000027CC 0FB705(85C40300)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   217 000027D3 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   218                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   219 000027D8 31D2                <1>     xor edx, edx
   220 000027DA B907000000          <1>     mov ecx, 7   
   221 000027DF F7F1                <1>     div ecx  ;Get remainder in dl
   222 000027E1 8815(87C40300)      <1>     mov byte [dayOfWeek], dl
   223                              <1> ;Set ZF to indicate all ok
   224 000027E7 31C0                <1>     xor eax, eax
   225                              <1>     return
    13                              <2> %%_ret:
    14 000027E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> 
   227                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   228                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   229                              <1> ;Input: cl = Year - 1980
   230                              <1> ;Output: al = Number of days in February
   231 000027EA 880D(84C40300)      <1>     mov byte [years], cl    ;Save this figure
   232 000027F0 F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   233 000027F3 51                  <1>     push rcx
   234 000027F4 57                  <1>     push rdi
   235 000027F5 B81C000000          <1>     mov eax, 28  ;Usual days in february
   236 000027FA B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   237 000027FF 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   238 00002802 488D3D7BD8FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   239 00002809 AA                  <1>     stosb   ;Store the word in rdi
   240 0000280A 5F                  <1>     pop rdi
   241 0000280B 59                  <1>     pop rcx
   242                              <1>     return
    13                              <2> %%_ret:
    14 0000280C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> getDirDTwords:
   245                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   246                              <1> ; High word of eax = Date
   247                              <1> ; Low word of eax = Time
   248                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   249                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   250                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   251                              <1> 
   252                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   253                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   254                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   255                              <1> ;Preserves all registers except eax
   256 0000280D 53                  <1>     push rbx
   257 0000280E 0FB61D(0FC50300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   258 00002815 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   259 00002817 89D8                <1>     mov eax, ebx
   260 00002819 0FB61D(0CC50300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   261 00002820 C1E305              <1>     shl ebx, 5
   262 00002823 09D8                <1>     or eax, ebx
   263 00002825 0FB61D(0DC50300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   264 0000282C C1E30B              <1>     shl ebx, 11
   265 0000282F 09D8                <1>     or eax, ebx
   266 00002831 0FB61D(82C40300)    <1>     movzx ebx, byte [dayOfMonth]
   267 00002838 C1E310              <1>     shl ebx, 16
   268 0000283B 09D8                <1>     or eax, ebx
   269 0000283D 0FB61D(83C40300)    <1>     movzx ebx, byte [monthOfYear]
   270 00002844 C1E315              <1>     shl ebx, 21
   271 00002847 09D8                <1>     or eax, ebx
   272 00002849 0FB61D(84C40300)    <1>     movzx ebx, byte [years]
   273 00002850 C1E319              <1>     shl ebx, 25
   274 00002853 09D8                <1>     or eax, ebx
   275 00002855 5B                  <1>     pop rbx
   276                              <1>     return
    13                              <2> %%_ret:
    14 00002856 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   277                              <1> getDateAndTimeOld:  ;INT 4Fh AX=12
   278                              <1> ;Returns edx = time
   279                              <1> ;        eax = date
   280                              <1> ; Formally ax and dx but we clear the upper words
   281 00002857 E8C6FEFFFF          <1>     call readDateTimeRecord
   282 0000285C E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   283 00002861 31D2                <1>     xor edx, edx
   284 00002863 6689C2              <1>     mov dx, ax  ;Save time
   285 00002866 C1E810              <1>     shr eax, 10h    ;Get date into rax
   286                              <1>     return
    13                              <2> %%_ret:
    14 00002869 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
     1                              <1> ;FCB functions.
     2                              <1> ;FCBs may only be generally used for file access FAT 12/16 volumes. 
     3                              <1> ;On FAT 32 volumes things are a bit more restricted.
     4                              <1> 
     5                              <1> ;The following functions ARE currently supported for general FAT 32 files:
     6                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
     7                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
     8                              <1> ;   parseFilename       (I mean, this function is useful anyway)
     9                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    10                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    11                              <1> ;   findNextFileFCB     (ditto the above)
    12                              <1> 
    13                              <1> ;The following functions are NOT currently supported for general FAT 32 files:
    14                              <1> ;   openFCB
    15                              <1> ;   closeFCB
    16                              <1> ;   createFCB
    17                              <1> ;   randomReadFCB
    18                              <1> ;   randomWriteFCB
    19                              <1> ;   randBlockReadFCB
    20                              <1> ;   randBlockWriteFCB
    21                              <1> ;   sequentialReadFCB
    22                              <1> ;   sequentialWriteFCB
    23                              <1> ;An attempt to run these functions on a FAT 32 volume will result in returning 
    24                              <1> ; al = -1 and an extended error code of 05 - Access Denied unless a device
    25                              <1> 
    26                              <1> ;FAT 32 volumes will support all functions for Volume Labels using xFCBs.
    27                              <1> ;Reading and Writing to the Volume label will silently return ok.
    28                              <1> ;Volume labels will be editable by being created/opened/closed.
    29                              <1> ;If the current directory is not the root, Volume Label work will assume the 
    30                              <1> ; root directory always.
    31                              <1> 
    32                              <1> findFirstFileFCB:  ;ah = 11h
    33                              <1> ;Input: rdx -> FCB
    34 0000286A 488915(0AC70300)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    35 00002871 4889D6              <1>     mov rsi, rdx
    36 00002874 803EFF              <1>     cmp byte [rsi], -1
    37 00002877 7407                <1>     je .notExt1
    38 00002879 4881C607000000      <1>     add rsi, exFcb.driveNum
    39                              <1> .notExt1:
    40 00002880 0FB606              <1>     movzx eax, byte [rsi]
    41 00002883 50                  <1>     push rax    ;Push on stack the drive number
    42 00002884 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    43 0000288B E8BF020000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    44 00002890 7306                <1>     jnc .fcbOk
    45 00002892 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    46 00002893 E965420000          <1>     jmp fcbErrExit
    47                              <1> .fcbOk:
    48 00002898 488D3D(12C50300)    <1>     lea rdi, buffer1
    49 0000289F E856E7FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    50 000028A4 7306                <1>     jnc .fileFound
    51 000028A6 5B                  <1>     pop rbx
    52 000028A7 E951420000          <1>     jmp fcbErrExit
    53                              <1> .fileFound:
    54                              <1> ;Now we build an FFBlock internally
    55 000028AC 488D3D(23C60300)    <1>     lea rdi, dosffblock
    56 000028B3 57                  <1>     push rdi
    57 000028B4 E86BE6FFFF          <1>     call setupFFBlock
    58 000028B9 5E                  <1>     pop rsi
    59                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    60 000028BA 488B3D(0AC70300)    <1>     mov rdi, qword [workingFCB]
    61 000028C1 F605(EBC60300)FF    <1>     test byte [extFCBFlag], -1
    62 000028C8 7407                <1>     jz .notExt2
    63 000028CA 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    64                              <1> .notExt2:
    65 000028D1 5B                  <1>     pop rbx ;Get back the drive number in bl
    66 000028D2 85DB                <1>     test ebx, ebx
    67 000028D4 7509                <1>     jnz .notCurrentDrive
    68 000028D6 0FB61D(26C40300)    <1>     movzx ebx, byte [currentDrv]
    69 000028DD FFC3                <1>     inc ebx ;Turn into a 1 based drive number
    70                              <1> .notCurrentDrive:
    71 000028DF AC                  <1>     lodsb   ;Get search drive from FFBlock in al
    72 000028E0 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
    73 000028E3 B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
    74 000028E8 A5                  <1>     movsd
    75 000028E9 AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
    76 000028EA 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
    77 000028F1 488D35(4EC60300)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
    78 000028F8 F605(EBC60300)FF    <1>     test byte [extFCBFlag], -1
    79 000028FF 7412                <1>     jz .notExt3
    80 00002901 B8FFFFFFFF          <1>     mov eax, -1
    81 00002906 AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
    82 00002907 FFC0                <1>     inc eax ;Make it zero
    83 00002909 AB                  <1>     stosd
    84 0000290A AA                  <1>     stosb   ;Store 5 bytes of zero
    85 0000290B 0FB605(ECC60300)    <1>     movzx eax, byte [searchAttr]
    86 00002912 AA                  <1>     stosb   ;Store the search attributes
    87                              <1> .notExt3:
    88 00002913 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
    89 00002915 AA                  <1>     stosb
    90 00002916 B904000000          <1>     mov ecx, fatDirEntry_size/8
    91 0000291B F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
    92 0000291E E9D7410000          <1>     jmp fcbGoodExit
    93                              <1>     
    94                              <1> findNextFileFCB:   ;ah = 12h
    95 00002923 488915(0AC70300)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    96 0000292A C605(EBC60300)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
    97 00002931 C605(ECC60300)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
    98 00002938 4889D6              <1>     mov rsi, rdx
    99                              <1> 
   100 0000293B 803EFF              <1>     cmp byte [rsi], -1
   101 0000293E 7514                <1>     jne .notExt
   102 00002940 FE0D(EBC60300)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
   103 00002946 4881C606000000      <1>     add rsi, exFcb.attribute
   104 0000294D AC                  <1>     lodsb   ;Get search attr in al
   105 0000294E 8805(ECC60300)      <1>     mov byte [searchAttr], al
   106                              <1> .notExt:
   107                              <1>     ;rsi points to drive letter
   108 00002954 488D3D(23C60300)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   109 0000295B 31C0                <1>     xor eax, eax
   110 0000295D AC                  <1>     lodsb   ;Get the FCB drive letter
   111 0000295E 50                  <1>     push rax    ;Push drive letter on the stack
   112 0000295F 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   113 00002962 AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   114 00002963 B905000000          <1>     mov ecx, 5
   115 00002968 F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   116 0000296A FF35(0CC40300)      <1>     push qword [currentDTA] ;Save original currentDTA
   117 00002970 488D3D(23C60300)    <1>     lea rdi, dosffblock
   118 00002977 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   119 00002978 8F05(0CC40300)      <1>     pop qword [currentDTA]
   120 0000297E E81FE2FFFF          <1>     call findNextMain
   121 00002983 8F05(0CC40300)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   122 00002989 0F831DFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   123 0000298F 488B3D(0AC70300)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   124 00002996 F607FF              <1>     test byte [rdi], -1
   125 00002999 7407                <1>     jz .notExt2
   126 0000299B 4881C707000000      <1>     add rdi, exFcb.driveNum
   127                              <1> .notExt2:
   128 000029A2 5B                  <1>     pop rbx ;Get the drive letter back into bl
   129 000029A3 881F                <1>     mov byte [rdi], bl
   130 000029A5 E953410000          <1>     jmp fcbErrExit  ;And exit bad
   131                              <1> 
   132                              <1> deleteFileFCB:     ;ah = 13h
   133 000029AA 488D3D(12C50300)    <1>     lea rdi, buffer1
   134 000029B1 57                  <1>     push rdi
   135 000029B2 E898010000          <1>     call fcbInitRoutine ;Build path and find file to delete
   136 000029B7 5F                  <1>     pop rdi ;Point rdi to the canonised path
   137 000029B8 0F823F410000        <1>     jc fcbErrExit
   138 000029BE E837E6FFFF          <1>     call getFilePathNoCanon ;Get the file
   139 000029C3 0F8234410000        <1>     jc fcbErrExit
   140 000029C9 E85A0F0000          <1>     call outerDeleteMain
   141 000029CE 0F8229410000        <1>     jc fcbErrExit
   142 000029D4 E921410000          <1>     jmp fcbGoodExit
   143                              <1> 
   144                              <1> renameFileFCB:     ;ah = 17h
   145                              <1> ;Input: rdx -> User FCB
   146 000029D9 488915(0AC70300)    <1>     mov qword [workingFCB], rdx
   147                              <1>     ;First we get the drive letter 
   148 000029E0 4889D6              <1>     mov rsi, rdx
   149 000029E3 803EFF              <1>     cmp byte [rsi], -1
   150 000029E6 7507                <1>     jne .notExt
   151 000029E8 4881C607000000      <1>     add rsi, exFcb.driveNum
   152                              <1> .notExt:
   153 000029EF 31C0                <1>     xor eax, eax
   154 000029F1 AC                  <1>     lodsb
   155 000029F2 50                  <1>     push rax    ;Push the drive letter on the stack for now
   156 000029F3 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   157 000029FA E850010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   158 000029FF 723D                <1>     jc .badPop
   159 00002A01 FF35(12C60300)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   160 00002A07 8F05(1AC60300)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   161 00002A0D 58                  <1>     pop rax ;Get drive letter back
   162 00002A0E 488D3D(92C50300)    <1>     lea rdi, buffer2
   163 00002A15 E809010000          <1>     call fcbInitName2
   164 00002A1A 7223                <1>     jc short .bad
   165 00002A1C 488B05(1AC60300)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   166 00002A23 488705(12C60300)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   167 00002A2A 488905(1AC60300)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   168 00002A31 E8F50A0000          <1>     call renameMain
   169 00002A36 0F83BE400000        <1>     jnc fcbGoodExit
   170 00002A3C EB01                <1>     jmp short .bad
   171                              <1> .badPop:
   172 00002A3E 5B                  <1>     pop rbx ;Pop drive number off stack
   173                              <1> .bad:
   174 00002A3F E9B9400000          <1>     jmp fcbErrExit
   175                              <1> 
   176                              <1> getFileSizeFCB:    ;ah = 23h
   177                              <1> ;This function which can be used to test existance of file without opening it 
   178                              <1> ;Input: rdx -> FCB
   179 00002A44 488915(0AC70300)    <1>     mov qword [workingFCB], rdx
   180 00002A4B 488D3D(12C50300)    <1>     lea rdi, buffer1
   181 00002A52 57                  <1>     push rdi
   182 00002A53 E8F7000000          <1>     call fcbInitRoutine
   183 00002A58 5F                  <1>     pop rdi
   184 00002A59 0F829E400000        <1>     jc fcbErrExit
   185 00002A5F E896E5FFFF          <1>     call getFilePathNoCanon
   186 00002A64 0F8293400000        <1>     jc fcbErrExit
   187 00002A6A 8B05(6AC60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   188                              <1>     ;Now we gotta set up FCB randRecrd Field
   189 00002A70 488B35(0AC70300)    <1>     mov rsi, qword [workingFCB]
   190 00002A77 803EFF              <1>     cmp byte [rsi], -1
   191 00002A7A 7507                <1>     jne .notExtended
   192 00002A7C 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   193                              <1> .notExtended:
   194                              <1> ;rsi points to the drive number now
   195 00002A83 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   196 00002A87 F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   197 00002A89 85D2                <1>     test edx, edx
   198 00002A8B 7402                <1>     jz .noRemainder
   199 00002A8D FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   200                              <1> .noRemainder:
   201 00002A8F 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   202 00002A92 E963400000          <1>     jmp fcbGoodExit
   203                              <1> 
   204                              <1> setDTA:            ;ah = 1Ah, Always can be used
   205                              <1> ;Called with:
   206                              <1> ;   rdx = Pointer to the new default DTA
   207 00002A97 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   208 00002A9E 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   209 00002AA2 488915(0CC40300)    <1>     mov qword [currentDTA], rdx
   210 00002AA9 C3                  <1>     ret
   211                              <1> 
   212                              <1> getDTA:            ;ah = 2Fh, Always can be used
   213 00002AAA 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   214 00002AB1 488B1D(0CC40300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   215 00002AB8 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   216                              <1>     return
    13                              <2> %%_ret:
    14 00002ABC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1>     
   218                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   219                              <1> ;Input:
   220                              <1> ;rsi points to a command line to parse
   221                              <1> ;rdi points to a future unopened FCB
   222                              <1> ;al = parsing control bits. 
   223                              <1> ; al[0] = If set, leading filename separators are scanned off
   224                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   225                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   226                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   227                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   228                              <1> ;        al = 1 => Wildcards found
   229                              <1> ;        al = -1 => Drive specifier invalid
   230                              <1> ;rsi -> to the first char past the parsed filename
   231                              <1> ;rdi -> First byte of the FCB 
   232                              <1> 
   233 00002ABD E82D010000          <1>     call parseNameToFCB
   234 00002AC2 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   235 00002AC3 E8AD3B0000          <1>     call getUserRegs
   236 00002AC8 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   237                              <1>     return  ;al now contains dl, the signature, special unique return type
    13                              <2> %%_ret:
    14 00002ACB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   238                              <1> 
   239                              <1> createFileFCB:     ;ah = 16h
   240                              <1> ;rdx -> Extended FCB
   241                              <1> ;       MUST BE EXTENDED. 
   242                              <1> ;       MUST HAVE ATTRIBUTE OF 08h, VOLID, else will fail
   243 00002ACC 803AFF              <1>     cmp byte [rdx + exFcb.extSig], -1
   244 00002ACF 7506                <1>     jne .exit
   245 00002AD1 807A0608            <1>     cmp byte [rdx + exFcb.attribute], dirVolumeID
   246 00002AD5 7500                <1>     jne .exit
   247                              <1>     ;Here we search for a volume ID in the root directory.
   248                              <1>     ; If one exists, we replace the dir entry name field,
   249                              <1>     ; sync the BPB field and invalidate the DPB (to rebuid the BPB).
   250                              <1>     ; Else, we build a dir entry for it, sync the BPB and invalidate the DPB.
   251                              <1>     ;If ANY bits other than ValidCDS are set in the CDS, fail the operation.
   252                              <1> .exit:
   253 00002AD7 B805000000          <1>     mov eax, errAccDen
   254 00002ADC E91C400000          <1>     jmp fcbErrExit
   255                              <1> 
   256                              <1> ;=================================================================
   257                              <1> ;=================================================================
   258                              <1> ;These functions will be marked as reserved for future expansion.
   259                              <1> ; One idea will be to create a handle based record IO interface.
   260                              <1> ; We will be able to do IO on records of predefined length 
   261                              <1> ; on a file handle, thus removing the need for an FCB but still
   262                              <1> ; maintaining the usefulness of record based IO.
   263                              <1> ;=================================================================
   264                              <1> ;=================================================================
   265                              <1> openFileFCB:       ;ah = 0Fh
   266                              <1> closeFileFCB:      ;ah = 10h
   267                              <1> sequentialReadFCB: ;ah = 14h
   268                              <1> sequentialWriteFCB:;ah = 15h
   269                              <1> randomReadFCB:     ;ah = 21h
   270                              <1> randomWriteFCB:    ;ah = 22h
   271                              <1> setRelRecordFCB:   ;ah = 24h
   272                              <1> randBlockReadFCB:  ;ah = 27h
   273                              <1> randBlockWriteFCB: ;ah = 28h
   274 00002AE1 B805000000          <1>     mov eax, errAccDen
   275 00002AE6 E912400000          <1>     jmp fcbErrExit
   276                              <1> 
   277                              <1> 
   278                              <1> ;--------------------------------
   279                              <1> ;  Common FCB related Routines  :
   280                              <1> ;--------------------------------
   281                              <1> fcbCheckDriveType:
   282                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   283                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   284                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   285                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   286                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   287                              <1> ;If a net CDS, automatic fail (for now).
   288 00002AEB C605(E9C60300)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   289 00002AF2 51                  <1>     push rcx
   290 00002AF3 57                  <1>     push rdi
   291 00002AF4 55                  <1>     push rbp
   292 00002AF5 9C                  <1>     pushfq
   293 00002AF6 F605(59C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   294 00002AFD 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   295 00002AFF E8043B0000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   296 00002B04 7218                <1>     jc .exit
   297                              <1>     ;rdi has cds ptr now
   298 00002B06 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   299 00002B0A E8C0DCFFFF          <1>     call getFATtype
   300 00002B0F 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   301 00002B15 7707                <1>     ja .exit
   302                              <1> .okToGo:
   303 00002B17 C605(E9C60300)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   304                              <1> .exit:
   305 00002B1E 9D                  <1>     popfq
   306 00002B1F 5D                  <1>     pop rbp
   307 00002B20 5F                  <1>     pop rdi
   308 00002B21 59                  <1>     pop rcx
   309                              <1>     return
    13                              <2> %%_ret:
    14 00002B22 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   310                              <1> fcbInitName2:
   311                              <1> ;Must be called after fcbInitRoutine has been run once
   312                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   313                              <1> ;       rdx -> UserFCB
   314                              <1> ;       eax[0] = Drive number (0 based)
   315 00002B23 55                  <1>     push rbp
   316 00002B24 4889E5              <1>     mov rbp, rsp
   317 00002B27 4881EC0F000000      <1>     sub rsp, 15
   318 00002B2E 57                  <1>     push rdi
   319 00002B2F 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   320 00002B33 4889D6              <1>     mov rsi, rdx
   321 00002B36 F605(EBC60300)FF    <1>     test byte [extFCBFlag], -1
   322 00002B3D 7407                <1>     jz .notExtended
   323 00002B3F 4881C607000000      <1>     add rsi, exFcb.driveNum
   324                              <1> .notExtended:
   325                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   326 00002B46 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   327 00002B4D EB36                <1>     jmp short fcbInitRoutine.rename2EP
   328                              <1> fcbInitRoutine:
   329                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   330                              <1> ;Input: rdx -> User FCB
   331                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   332 00002B4F 55                  <1>     push rbp
   333 00002B50 4889E5              <1>     mov rbp, rsp
   334 00002B53 4881EC0F000000      <1>     sub rsp, 15    ;Make 15 char space on stack
   335                              <1>     ;This space is used to store X:FILENAME.EXT,0
   336 00002B5A 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   337 00002B5B 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   338 00002B5F C605(EBC60300)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   339 00002B66 C605(ECC60300)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   340 00002B6D E86A000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   341 00002B72 7410                <1>     jz .notExtended
   342 00002B74 C605(EBC60300)FF    <1>     mov byte [extFCBFlag], -1
   343 00002B7B 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   344 00002B7E 8805(ECC60300)      <1>     mov byte [searchAttr], al
   345                              <1> .notExtended:
   346 00002B84 AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   347                              <1> .rename2EP:
   348 00002B85 E8783B0000          <1>     call getCDS ;Get the CDS (preserves rdi)
   349 00002B8A 723F                <1>     jc .badDisk
   350 00002B8C E842000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   351 00002B91 488D1DB7D6FFFF      <1>     lea rbx, asciiCharProperties
   352 00002B98 B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   353 00002B9D 56                  <1>     push rsi    ;rsi -> fcb.filename
   354                              <1> .nameCharCheck:
   355 00002B9E AC                  <1>     lodsb   ;Get the char in al
   356 00002B9F D7                  <1>     xlatb   ;Get the char signature in al
   357 00002BA0 A808                <1>     test al, 8
   358 00002BA2 7427                <1>     jz .badDisk
   359 00002BA4 FFC9                <1>     dec ecx
   360 00002BA6 75F6                <1>     jnz .nameCharCheck
   361 00002BA8 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   362 00002BA9 4889FB              <1>     mov rbx, rdi    ;Save ptr to stackbuffer + 2 (past X:)
   363 00002BAC E833E3FFFF          <1>     call FCBToAsciiz
   364 00002BB1 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   365 00002BB2 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0?
   366 00002BB5 7414                <1>     je .badDisk
   367 00002BB7 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   368 00002BBB 55                  <1>     push rbp
   369 00002BBC E8F9E3FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename
   370 00002BC1 5D                  <1>     pop rbp
   371 00002BC2 7207                <1>     jc .badDisk
   372 00002BC4 E822FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   373 00002BC9 EB03                <1>     jmp short .jiggleStack  ;Skip the error
   374                              <1> .badDisk:
   375 00002BCB B003                <1>     mov al, errPnf  ;DOS does this... so will I
   376 00002BCD F9                  <1>     stc
   377                              <1> .jiggleStack:
   378 00002BCE 4889EC              <1>     mov rsp, rbp
   379 00002BD1 5D                  <1>     pop rbp
   380                              <1> .exit:
   381                              <1>     return
    13                              <2> %%_ret:
    14 00002BD2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   382                              <1> 
   383                              <1> storeZeroBasedDriveNumber:
   384                              <1> ;Input: al => 0 based drive letter
   385                              <1> ;       rdi -> Points to buffer to store the X: in
   386 00002BD3 FEC0                <1>     inc al
   387                              <1> storeOneBasedDriveNumber:
   388                              <1> ;Input: al => 1 based drive letter
   389                              <1> ;       rdi -> Points to buffer to store the X: in
   390 00002BD5 0440                <1>     add al, "@"
   391 00002BD7 B43A                <1>     mov ah, ":"
   392 00002BD9 66AB                <1>     stosw
   393                              <1>     return
    13                              <2> %%_ret:
    14 00002BDB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   394                              <1> 
   395                              <1> isFCBExtended:
   396                              <1> ;Input: rdx = FCB ptr
   397                              <1> ;Output: rsi -> Drive letter of FCB
   398                              <1> ;        rdx -> FCB first byte
   399                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   400 00002BDC 4889D6              <1>     mov rsi, rdx
   401 00002BDF 803EFF              <1>     cmp byte [rsi], -1
   402 00002BE2 7507                <1>     jne .notExtended
   403 00002BE4 4881C607000000      <1>     add rsi, exFcb.driveNum
   404                              <1> .notExtended:
   405 00002BEB 4839F2              <1>     cmp rdx, rsi
   406                              <1>     return
    13                              <2> %%_ret:
    14 00002BEE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   407                              <1> 
   408                              <1> parseNameToFCB:
   409                              <1> ;rsi points to a command line to parse
   410                              <1> ;rdi points to a future unopened FCB
   411                              <1> ;al = parsing control bits. 
   412                              <1> ; al[0] = If set, leading filename separators are scanned off
   413                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   414                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   415                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   416                              <1> ;
   417                              <1> ;Separators include : . ; , = + TAB SPACE
   418                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   419                              <1> 
   420 00002BEF C605(81C40300)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   421 00002BF6 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   422 00002BF8 A802                <1>     test al, 2  ;Set drive letter>
   423 00002BFA 7402                <1>     jz .skipDriveLetter
   424 00002BFC 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   425                              <1> .skipDriveLetter:
   426 00002BFE 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   427 00002C01 B908000000          <1>     mov ecx, 8  ;Copy Filename
   428 00002C06 A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   429 00002C08 93                  <1>     xchg eax, ebx
   430 00002C09 B020                <1>     mov al, " " ;Clear the field
   431 00002C0B 7405                <1>     jz .clearFilenameField
   432 00002C0D 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   433 00002C10 31C9                <1>     xor ecx, ecx
   434                              <1> .clearFilenameField:
   435 00002C12 F3AA                <1>     rep stosb
   436 00002C14 B903000000          <1>     mov ecx, 3
   437 00002C19 F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   438 00002C1C 7405                <1>     jz .clearExtensionField
   439 00002C1E 4801CF              <1>     add rdi, rcx
   440 00002C21 31C9                <1>     xor ecx, ecx
   441                              <1> .clearExtensionField:
   442 00002C23 F3AA                <1>     rep stosb
   443 00002C25 91                  <1>     xchg eax, ecx
   444 00002C26 AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   445 00002C27 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   446 00002C2E F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   447 00002C31 740F                <1>     jz .dontScanOff
   448 00002C33 E8B73C0000          <1>     call skipSpacesAndTabs
   449 00002C38 E8BE3C0000          <1>     call isCharDelimType
   450 00002C3D 7508                <1>     jnz .skipIfDelim
   451 00002C3F 48FFC6              <1>     inc rsi
   452                              <1> .dontScanOff:
   453 00002C42 E8A83C0000          <1>     call skipSpacesAndTabs  ;Skip a char
   454                              <1> .skipIfDelim:
   455 00002C47 E84E3B0000          <1>     call uppercaseCharAtPtr 
   456 00002C4C 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   457 00002C4E 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   458 00002C51 7519                <1>     jne .skipSettingDriveLetter
   459 00002C53 48FFC6              <1>     inc rsi ;Goto next char
   460 00002C56 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   461 00002C58 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   462 00002C5A 50                  <1>     push rax    ;Save the 1 based drive letter
   463 00002C5B E8393A0000          <1>     call setDrive   ;Verifies if this drive letter is valid
   464 00002C60 58                  <1>     pop rax
   465 00002C61 7302                <1>     jnc .validDriveLetter
   466                              <1> .invalidDriveLetter:
   467 00002C63 B2FF                <1>     mov dl, -1
   468                              <1> .validDriveLetter:
   469 00002C65 AA                  <1>     stosb
   470 00002C66 48FFC6              <1>     inc rsi ;Align pointers...
   471 00002C69 48FFCF              <1>     dec rdi 
   472                              <1> .skipSettingDriveLetter:
   473 00002C6C 48FFCE              <1>     dec rsi
   474 00002C6F 48FFC7              <1>     inc rdi
   475                              <1>     
   476                              <1> getFCBFilename:
   477                              <1> ;Input: rsi points to first char of filename
   478                              <1> ;       rdi points to storage buffer for filename
   479                              <1> ;       dl contains the signature if drive invalid
   480                              <1> ;Output:
   481                              <1> ;       Fields filled
   482                              <1> ;       al = Return signature
   483 00002C72 B908000000          <1>     mov ecx, 8
   484 00002C77 E815000000          <1>     call getFCBNameField
   485 00002C7C 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   486 00002C7F 750D                <1>     jne .noExt
   487 00002C81 B903000000          <1>     mov ecx, 3
   488 00002C86 48FFC6              <1>     inc rsi ;Skip this char
   489 00002C89 E814000000          <1>     call forceFCBNameField
   490                              <1> .noExt:
   491 00002C8E 88D0                <1>     mov al, dl  ;Store the return signature
   492                              <1>     return
    13                              <2> %%_ret:
    14 00002C90 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   493                              <1> 
   494                              <1> getFCBNameField:
   495                              <1> ;Checks if the field is appropriate before copying it
   496 00002C91 E8043B0000          <1>     call uppercaseCharAtPtr
   497 00002C96 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   498 00002C98 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   499 00002C9B 48FFCE              <1>     dec rsi ;Point to previous char
   500                              <1>     return
    13                              <2> %%_ret:
    14 00002C9E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   501                              <1> .okName:
   502 00002C9F 48FFCE              <1>     dec rsi ;Go back now a char
   503                              <1> forceFCBNameField:
   504                              <1> ;Forcefully copies the name from rsi to rdi
   505 00002CA2 E8F33A0000          <1>     call uppercaseCharAtPtr
   506 00002CA7 7226                <1>     jc .terminatingSpace
   507 00002CA9 750D                <1>     jnz .notSep
   508 00002CAB F605(81C40300)FF    <1>     test byte [fcbSpaceOk], -1
   509 00002CB2 741B                <1>     jz .terminatingSpace
   510 00002CB4 3C20                <1>     cmp al, " "
   511 00002CB6 7517                <1>     jne .terminatingSpace
   512                              <1> .notSep:
   513 00002CB8 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   514 00002CBB FFC9                <1>     dec ecx
   515 00002CBD 3C2A                <1>     cmp al, "*" ;Big wildcard?
   516 00002CBF 7504                <1>     jne .notBigWildcard
   517 00002CC1 B03F                <1>     mov al, "?"
   518 00002CC3 F3AA                <1>     rep stosb
   519                              <1> .notBigWildcard:
   520 00002CC5 AA                  <1>     stosb   ;Stores the uppercased char
   521 00002CC6 3C3F                <1>     cmp al, "?"
   522 00002CC8 75D8                <1>     jne forceFCBNameField
   523 00002CCA 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   524 00002CCD EBD3                <1>     jmp short forceFCBNameField
   525                              <1> .terminatingSpace:
   526 00002CCF B020                <1>     mov al, " "
   527 00002CD1 AA                  <1>     stosb
   528 00002CD2 48FFCE              <1>     dec rsi ;Point to this trailing space
   529                              <1>     return
    13                              <2> %%_ret:
    14 00002CD5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    33                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;    File Handle Kernel routines    :
     3                              <1> ;-----------------------------------:
     4                              <1> 
     5                              <1> createFileHdl:     ;ah = 3Ch, handle function
     6                              <1> ;Input: cx = File attributes (same as search attributes for find first)
     7                              <1> ;       rdx = Ptr to ASCIZ filename to create
     8                              <1> ;Output: CF=CY => ax = File handle
     9                              <1> ;        CF=NC => al = Error code
    10 00002CD6 51                  <1>     push rcx    ;Save file attributes on stack
    11 00002CD7 488D0D0B0E0000      <1>     lea rcx, createMain
    12 00002CDE C605(ECC60300)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive w/ directory
    13 00002CE5 EB1D                <1>     jmp short openFileHdl.openCommon
    14                              <1> openFileHdl:       ;ah = 3Dh, handle function
    15                              <1> ;Input: al = Open mode, to open file with
    16                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    17                              <1> ;If called from 5D00h, cl = File attributes too
    18                              <1> ;Output: CF=CY => ax = File handle
    19                              <1> ;        CF=NC => al = Error code
    20 00002CE7 BB16000000          <1>     mov ebx, dirInclusive
    21 00002CEC F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
    22 00002CF3 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    23 00002CF6 880D(ECC60300)      <1>     mov byte [searchAttr], cl
    24 00002CFC 488D0DEA0C0000      <1>     lea rcx, openMain  
    25 00002D03 50                  <1>     push rax    ;Save open mode on stack
    26                              <1> .openCommon:
    27 00002D04 4889D6              <1>     mov rsi, rdx
    28 00002D07 E82B3B0000          <1>     call checkPathspecOK
    29 00002D0C 730B                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    30                              <1> .badPath: ;We cant have wildcards when creating or opening a file!
    31 00002D0E 58                  <1>     pop rax
    32 00002D0F B803000000          <1>     mov eax, errPnf
    33 00002D14 E9043E0000          <1>     jmp extErrExit
    34                              <1> .pathOk:
    35 00002D19 E8B43D0000          <1>     call dosCrit1Enter
    36 00002D1E E832190000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    37 00002D23 E8B43D0000          <1>     call dosCrit1Exit
    38 00002D28 0F82AF000000        <1>     jc .exitBad
    39                              <1>     ;Now save variables
    40 00002D2E E85A180000          <1>     call setCurrentSFT
    41 00002D33 66891D(2AC70300)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    42 00002D3A E8DF190000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    43 00002D3F 0F8298000000        <1>     jc .exitBad
    44 00002D45 66891D(2CC70300)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    45 00002D4C 48893D(1AC70300)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    46 00002D53 0FB71D(2AC70300)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    47 00002D5A 881F                <1>     mov byte [rdi], bl  ;And open the file
    48                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    49 00002D5C 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    50 00002D5F 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
    51 00002D66 51                  <1>     push rcx    ;Save the procedure to call on stack
    52 00002D67 E899E2FFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    53 00002D6C 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    54 00002D6D 488D05790C0000      <1>     lea rax, openMain   ;Get EA for open procedure
    55 00002D74 488B35(22C70300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    56 00002D7B 7319                <1>     jnc .proceedCall
    57                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    58                              <1> ;                              For Create New, Bad but handled later.
    59                              <1> ;If CF=CY => Path doesnt all exist:
    60                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    61                              <1> ;Now we check if we are creating or opening.
    62 00002D7D 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    63 00002D80 7409                <1>     je .badPathspec ;Jmp to error if opening file that doesnt exist
    64 00002D82 F605(F5C60300)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    65 00002D89 750B                <1>     jnz .proceedCall    ;If so, proceed.
    66                              <1> .badPathspec:
    67 00002D8B 58                  <1>     pop rax
    68 00002D8C B802000000          <1>     mov eax, errFnf
    69 00002D91 E957000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    70                              <1> .proceedCall:
    71                              <1> ;If the pathspec exists, recall that for create, we truncate.
    72 00002D96 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
    73 00002D98 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    74 00002D9B 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    75 00002D9C 750B                <1>     jne .callProc   ;Jump if we are creating
    76                              <1>     ;al means openmode here
    77 00002D9E A880                <1>     test al, 80h    ;No Inherit bit set?
    78 00002DA0 7407                <1>     jz .callProc
    79 00002DA2 247F                <1>     and al, 7Fh     ;Clear this bit
    80 00002DA4 B900100000          <1>     mov ecx, devNoInherit
    81                              <1> .callProc:
    82 00002DA9 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
    83 00002DAF 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
    84 00002DB5 51                  <1>     push rcx    ;Save the device word 
    85 00002DB6 FFD3                <1>     call rbx    ;Enter with open mode in 
    86 00002DB8 59                  <1>     pop rcx
    87 00002DB9 488B35(22C70300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    88 00002DC0 722B                <1>     jc .exitBad2
    89 00002DC2 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
    90 00002DC7 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
    91 00002DCB 0FB705(2CC70300)    <1>     movzx eax, word [currentHdl]
    92 00002DD2 FF15(14C10300)      <1>     call qword [closeDupFileShare]  ;Close Duplicate Handles if opened file! 
    93 00002DD8 E9323D0000          <1>     jmp extGoodExit ;Save ax and return OK
    94                              <1> .exitBad:
    95 00002DDD FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
    96 00002DDE 5B                  <1>     pop rbx ;Pop the word from the stack
    97 00002DDF 66C705(2AC70300)FF- <1>     mov word [currentNdx], -1
    97 00002DE7 FF                  <1>
    98 00002DE8 E9303D0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
    99                              <1> .exitBad2:
   100                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   101 00002DED 488B35(1AC70300)    <1>     mov rsi, qword [curHdlPtr]
   102 00002DF4 C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   103 00002DF7 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
   104 00002DFE 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   105 00002E03 66C705(2AC70300)FF- <1>     mov word [currentNdx], -1
   105 00002E0B FF                  <1>
   106 00002E0C E90C3D0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   107                              <1> 
   108                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   109                              <1> ;Input: bx = file handle to close
   110 00002E11 E81E190000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   111 00002E16 0F82013D0000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   112 00002E1C E86C170000          <1>     call setCurrentSFT  ;Set this as the current SFT
   113                              <1>     ;Check count to see if we need to check share mode
   114 00002E21 31C0                <1>     xor eax, eax    ;Preset ax to 0
   115 00002E23 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared, no need for share check
   116 00002E28 7406                <1>     je .skipShareCheck
   117                              <1>     ;Now check sharing mode
   118 00002E2A 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   119 00002E2E 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   120                              <1> .skipShareCheck:
   121 00002E30 50                  <1>     push rax    ;Save the share mode on stack
   122 00002E31 E87E0F0000          <1>     call closeMain  ;Call close main!
   123 00002E36 58                  <1>     pop rax 
   124 00002E37 0F82E03C0000        <1>     jc extErrExit   ;If an error, exit through error exit
   125 00002E3D 3C70                <1>     cmp al, netFCBShare ;Do NetFCB check (only if file opened more than once)
   126 00002E3F 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
   127 00002E41 E8A3180000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
   128 00002E46 C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
   129                              <1> .exitOk:
   130 00002E49 31C0                <1>     xor eax, eax    ;Return value
   131 00002E4B E9BF3C0000          <1>     jmp extGoodExit
   132                              <1> 
   133                              <1> readFileHdl:       ;ah = 3Fh, handle function
   134 00002E50 488D35DA0F0000      <1>     lea rsi, readBytes
   135                              <1> .common:
   136 00002E57 E8D8180000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   137 00002E5C 0F82BB3C0000        <1>     jc extErrExit   ;Error code in al and exit
   138 00002E62 E826170000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   139 00002E67 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   140 00002E69 FF35(0CC40300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   141 00002E6F 488915(0CC40300)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   142 00002E76 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   143 00002E78 8F05(0CC40300)      <1>     pop qword [currentDTA]
   144 00002E7E 0F82993C0000        <1>     jc extErrExit   ;Error code in al and exit
   145 00002E84 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   146 00002E86 E97B3C0000          <1>     jmp extGoodExit2    ;and exit!
   147                              <1> 
   148                              <1> writeFileHdl:      ;ah = 40h, handle function
   149 00002E8B 488D35DE120000      <1>     lea rsi, writeBytes
   150 00002E92 E9C0FFFFFF          <1>     jmp readFileHdl.common
   151                              <1> 
   152                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   153                              <1> ;Here don't allow malformed chars unless it is a network CDS
   154 00002E97 BB06000000          <1>     mov ebx, dirIncFiles    ;Inclusive w/o dirs
   155 00002E9C F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   156 00002EA3 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   157 00002EA6 880D(ECC60300)      <1>     mov byte [searchAttr], cl
   158 00002EAC 4889D6              <1>     mov rsi, rdx
   159 00002EAF E883390000          <1>     call checkPathspecOK
   160 00002EB4 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   161 00002EB6 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   162                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   163 00002EB8 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   164 00002EBF 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   165                              <1> .badPath:
   166 00002EC1 B803000000          <1>     mov eax, errPnf
   167 00002EC6 E9523C0000          <1>     jmp extErrExit
   168                              <1> .pathOk:
   169 00002ECB 488D3D(12C50300)    <1>     lea rdi, buffer1
   170 00002ED2 52                  <1>     push rdx
   171 00002ED3 E82DE1FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   172 00002ED8 5A                  <1>     pop rdx
   173 00002ED9 0F823E3C0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   174                              <1>     ;In the case of a wildcard, recall this will return the first file
   175 00002EDF 803D(F4C60300)FF    <1>     cmp byte [fileExist], -1
   176 00002EE6 0F85313C0000        <1>     jnz extErrExit
   177 00002EEC E8370A0000          <1>     call outerDeleteMain
   178 00002EF1 0F82263C0000        <1>     jc extErrExit
   179 00002EF7 E9133C0000          <1>     jmp extGoodExit
   180                              <1> 
   181                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   182                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   183 00002EFC E833180000          <1>     call getSFTPtr
   184 00002F01 0F82163C0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   185 00002F07 3C03                <1>     cmp al, 3
   186 00002F09 720A                <1>     jb .validFunction
   187 00002F0B B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   188 00002F10 E9083C0000          <1>     jmp extErrExit
   189                              <1> .validFunction:
   190 00002F15 3C01                <1>     cmp al, 1
   191 00002F17 7718                <1>     ja .seekend
   192 00002F19 7203                <1>     jb .seekset
   193                              <1> ;Here we are at seekcur, seek from current (signed)
   194 00002F1B 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   195                              <1> .seekset:
   196                              <1> ;Seek from the start (unsigned)
   197 00002F1E 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   198 00002F21 E84F370000          <1>     call getUserRegs    ;Get user regs in rsi
   199 00002F26 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   200                              <1> .seekExit:
   201 00002F29 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   202 00002F2C E9D53B0000          <1>     jmp extGoodExit2    ;Return OK in eax 
   203                              <1> .seekend:
   204                              <1> ;Here we are at seekend, seek from end (signed)
   205 00002F31 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   206 00002F37 7505                <1>     jnz .netCheck
   207                              <1> .proceedDisk:
   208 00002F39 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   209 00002F3C EBE0                <1>     jmp short .seekset
   210                              <1> .netCheck:
   211 00002F3E 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   212 00002F44 75F3                <1>     jnz .proceedDisk
   213 00002F46 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   214                              <1>     ;Check it's share mode
   215 00002F4A 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   216 00002F4F 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   217 00002F54 7407                <1>     je .netSeek
   218 00002F56 3D30000000          <1>     cmp eax, denyReadShare
   219 00002F5B 75DC                <1>     jne .proceedDisk
   220                              <1> .netSeek:
   221 00002F5D B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   222 00002F62 CD4F                <1>     int 4Fh
   223 00002F64 73C3                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   224 00002F66 E9B23B0000          <1>     jmp extErrExit
   225                              <1> 
   226                              <1> 
   227                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   228 00002F6B 3C01                <1>     cmp al, 1
   229 00002F6D 761F                <1>     jbe .subFuncOk
   230 00002F6F B801000000          <1>     mov eax, errInvFnc
   231                              <1> .chmodError:
   232                              <1> ;Call with ax = errorcode
   233 00002F74 C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   234 00002F7B C605(03C40300)07    <1>     mov byte [errorClass], eClsAppFlt
   235 00002F82 C605(02C40300)07    <1>     mov byte [errorAction], eActRetUsr
   236 00002F89 E98F3B0000          <1>     jmp extErrExit
   237                              <1> .subFuncOk:
   238 00002F8E 4889D6              <1>     mov rsi, rdx
   239 00002F91 89C3                <1>     mov ebx, eax    ;Store function code in bl
   240 00002F93 53                  <1>     push rbx
   241 00002F94 51                  <1>     push rcx
   242 00002F95 E89D380000          <1>     call checkPathspecOK
   243 00002F9A 7309                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   244                              <1> .badPath:
   245 00002F9C 59                  <1>     pop rcx
   246 00002F9D 5B                  <1>     pop rbx
   247 00002F9E B803000000          <1>     mov eax, errPnf
   248 00002FA3 EBCF                <1>     jmp short .chmodError
   249                              <1> .pathOk:
   250 00002FA5 E873390000          <1>     call checkPathNet 
   251 00002FAA 74F0                <1>     jz .badPath ;Or Net paths
   252 00002FAC E818390000          <1>     call scanPathWC
   253 00002FB1 72E9                <1>     jc .badPath ;Dont allow wildcards
   254 00002FB3 488D3D(12C50300)    <1>     lea rdi, buffer1
   255 00002FBA 52                  <1>     push rdx
   256 00002FBB C605(ECC60300)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   257 00002FC2 E83EE0FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   258 00002FC7 5A                  <1>     pop rdx
   259 00002FC8 59                  <1>     pop rcx
   260 00002FC9 5B                  <1>     pop rbx
   261 00002FCA 0F824D3B0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   262                              <1>     ;In the case of a wildcard, recall this will return the first file
   263 00002FD0 803D(F4C60300)FF    <1>     cmp byte [fileExist], -1
   264 00002FD7 759B                <1>     jnz .chmodError
   265                              <1> 
   266 00002FD9 E82A360000          <1>     call testCDSNet
   267 00002FDE 730C                <1>     jnc .notNet
   268 00002FE0 750A                <1>     jnz .notNet ;This type of net ok
   269 00002FE2 B805000000          <1>     mov eax, errAccDen
   270 00002FE7 E9313B0000          <1>     jmp extErrExit
   271                              <1> .notNet:
   272 00002FEC 84DB                <1>     test bl, bl
   273 00002FEE 7526                <1>     jnz .setAttribs
   274                              <1>     ;Get attribs here
   275 00002FF0 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   276 00002FF6 7412                <1>     jz .getDiskAttribs
   277 00002FF8 B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   278 00002FFD CD4F                <1>     int 4Fh
   279 00002FFF 0F82183B0000        <1>     jc extErrExit
   280 00003005 E9053B0000          <1>     jmp extGoodExit
   281                              <1> .getDiskAttribs:
   282 0000300A 0FB605(59C60300)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   283 00003011 E9F93A0000          <1>     jmp extGoodExit
   284                              <1> 
   285                              <1> .setAttribs:
   286                              <1>     ;Set attribs here
   287 00003016 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   288 0000301C 7417                <1>     jz .setDiskAttribs
   289 0000301E 0FB7C9              <1>     movzx ecx, cx
   290 00003021 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   291 00003022 B80E110000          <1>     mov eax, 110Eh
   292 00003027 CD4F                <1>     int 4Fh
   293 00003029 59                  <1>     pop rcx
   294 0000302A 0F82ED3A0000        <1>     jc extErrExit
   295 00003030 E9DA3A0000          <1>     jmp extGoodExit
   296                              <1> .setDiskAttribs:
   297 00003035 E87A080000          <1>     call checkNoOpenHandlesForShareAction
   298 0000303A 730A                <1>     jnc .okToSet
   299 0000303C B820000000          <1>     mov eax, errShrVio
   300 00003041 E9D73A0000          <1>     jmp extErrExit
   301                              <1> .okToSet:
   302 00003046 E8C7EAFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   303 0000304B 0F82CC3A0000        <1>     jc extErrExit
   304 00003051 F6C118              <1>     test cl, dirVolumeID | dirDirectory
   305 00003054 740A                <1>     jz .set
   306 00003056 B805000000          <1>     mov eax, errAccDen
   307 0000305B E9BD3A0000          <1>     jmp extErrExit
   308                              <1> .set:
   309 00003060 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   310 00003063 80E518              <1>     and ch, (dirVolumeID | dirDirectory)    ;Keep these two bits
   311 00003066 08E9                <1>     or cl, ch
   312 00003068 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   313 0000306B E8F2D4FFFF          <1>     call writeThroughBuffers
   314 00003070 7207                <1>     jc .setError
   315 00003072 31C0                <1>     xor eax, eax
   316 00003074 E9963A0000          <1>     jmp extGoodExit
   317                              <1> .setError:
   318 00003079 E8ADD4FFFF          <1>     call cancelWriteThroughBuffers
   319 0000307E E99A3A0000          <1>     jmp extErrExit
   320                              <1> 
   321                              <1> duplicateHandle:   ;ah = 45h, handle function
   322                              <1> ;Input: bx = Handle to duplicate
   323                              <1> ;Output: If ok then ax = New handle
   324 00003083 0FB7C3              <1>     movzx eax, bx    ;Move handle to ax
   325 00003086 E893160000          <1>     call findFreeJFTEntry    ;First find a free space in the JFT in rdi
   326                              <1> .duplicateCommon:
   327 0000308B 0F828C3A0000        <1>     jc extErrExit   ;Exit if no space
   328 00003091 4889FE              <1>     mov rsi, rdi    ;Save the free space in rsi
   329 00003094 93                  <1>     xchg eax, ebx
   330 00003095 E89A160000          <1>     call getSFTPtr    ;Get the pointer to the SFT in rdi
   331 0000309A 0F827D3A0000        <1>     jc extErrExit
   332 000030A0 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   333 000030A3 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   334 000030A9 7505                <1>     jnz .netFile
   335 000030AB E8CF090000          <1>     call openDriverMux
   336                              <1> .netFile:
   337 000030B0 E834160000          <1>     call getJFTPtr
   338 000030B5 8A1F                <1>     mov bl, byte [rdi]
   339 000030B7 881E                <1>     mov byte [rsi], bl
   340 000030B9 E9513A0000          <1>     jmp extGoodExit     ;Return handle in ax the entry in the JFT 
   341                              <1> 
   342                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   343                              <1> ;Input: bx = Handle to duplicate
   344                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   345                              <1>     ;First we close cx if it exists
   346 000030BE 0FB7C9              <1>     movzx ecx, cx
   347 000030C1 53                  <1>     push rbx
   348 000030C2 51                  <1>     push rcx
   349 000030C3 89CB                <1>     mov ebx, ecx
   350 000030C5 E847FDFFFF          <1>     call closeFileHdl   ;Close handle 
   351 000030CA 5B                  <1>     pop rbx
   352 000030CB 58                  <1>     pop rax
   353 000030CC E818160000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   354 000030D1 EBB8                <1>     jmp short duplicateHandle.duplicateCommon
   355                              <1> 
   356                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   357                              <1> ;Input: cx = Search Attributes, cl only used
   358                              <1> ;       rdx = Ptr to path to file to look for
   359                              <1> ;       al = Document as needing to be 0 for now
   360                              <1> ;Return:
   361                              <1> ;Data in the DTA or error through AX with CF=CY
   362                              <1> ;CAVEATS!
   363                              <1> ;DTA:attribFnd = 40h => Char dev
   364                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   365 000030D3 880D(ECC60300)      <1>     mov byte [searchAttr], cl
   366 000030D9 4889D6              <1>     mov rsi, rdx
   367 000030DC E856370000          <1>     call checkPathspecOK
   368 000030E1 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   369 000030E3 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   370                              <1> .badPath:
   371 000030E5 B803000000          <1>     mov eax, errPnf
   372 000030EA E92E3A0000          <1>     jmp extErrExit
   373                              <1> .pathspecOk:
   374 000030EF FF35(0CC40300)      <1>     push qword [currentDTA]
   375 000030F5 488D3D(23C60300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   376 000030FC 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi
   377 00003103 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   378 0000310A E8F6DEFFFF          <1>     call getFilePath
   379                              <1> .findfileExit:
   380 0000310F 8F05(0CC40300)      <1>     pop qword [currentDTA]
   381 00003115 0F82023A0000        <1>     jc extErrExit
   382 0000311B 488D3D(23C60300)    <1>     lea rdi, dosffblock
   383 00003122 57                  <1>     push rdi
   384 00003123 E8FCDDFFFF          <1>     call setupFFBlock
   385 00003128 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   386 00003129 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA]
   387 00003130 B92B000000          <1>     mov ecx, ffBlock_size
   388 00003135 F3A4                <1>     rep movsb   ;Copy the whole block. 
   389                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   390 00003137 31C0                <1>     xor eax, eax    ;Return value
   391 00003139 E9D1390000          <1>     jmp extGoodExit ;Exit well
   392                              <1> 
   393                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   394                              <1> ;Input: DTA has the find first block from the previous search
   395 0000313E 488B35(0CC40300)    <1>     mov rsi, qword [currentDTA]
   396 00003145 488D3D(23C60300)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   397 0000314C B92B000000          <1>     mov ecx, ffBlock_size
   398 00003151 F3A4                <1>     rep movsb
   399 00003153 FF35(0CC40300)      <1>     push qword [currentDTA] ;Save the current DTA address
   400 00003159 488D3D(23C60300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   401 00003160 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi
   402 00003167 E836DAFFFF          <1>     call findNextMain
   403 0000316C EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   404                              <1> 
   405                              <1> renameFile:        ;ah = 56h
   406                              <1> ;Input: rdx -> Filespec to rename
   407                              <1> ;       rdi -> New filespec
   408                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   409 0000316E 4889D6              <1>     mov rsi, rdx
   410 00003171 BB16000000          <1>     mov ebx, dirInclusive
   411 00003176 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   412 0000317D 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   413 00003180 880D(ECC60300)      <1>     mov byte [searchAttr], cl
   414                              <1>     ;Step 0, verify both paths provided are valid
   415 00003186 E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   416 0000318B 7249                <1>     jc .pnfError
   417 0000318D 56                  <1>     push rsi
   418 0000318E 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   419 00003191 E84A000000          <1>     call .renamePathCheck
   420 00003196 5E                  <1>     pop rsi
   421 00003197 723D                <1>     jc .pnfError
   422                              <1>     ;Now we canonicalise the filenames to make life easy
   423 00003199 56                  <1>     push rsi
   424 0000319A 4889FE              <1>     mov rsi, rdi
   425 0000319D 488D3D(92C50300)    <1>     lea rdi, buffer2
   426 000031A4 E811DEFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   427 000031A9 5E                  <1>     pop rsi
   428 000031AA 722A                <1>     jc .pnfError
   429                              <1>     ;Now test if first file exists.
   430 000031AC FF35(12C60300)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   431 000031B2 8F05(1AC60300)      <1>     pop qword [fname2Ptr]
   432 000031B8 488D3D(12C50300)    <1>     lea rdi, buffer1
   433 000031BF E8F6DDFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   434 000031C4 7210                <1>     jc .pnfError  
   435 000031C6 E860030000          <1>     call renameMain ;Both pathnames made good and copied internally, lets go!!
   436 000031CB 0F824C390000        <1>     jc extErrExit
   437 000031D1 E939390000          <1>     jmp extGoodExit
   438                              <1> .pnfError:
   439 000031D6 B803000000          <1>     mov eax, errPnf
   440 000031DB E93D390000          <1>     jmp extErrExit
   441                              <1> .renamePathCheck:
   442                              <1> ;Checks if the pathspec in rsi is OK
   443 000031E0 56                  <1>     push rsi
   444 000031E1 57                  <1>     push rdi
   445 000031E2 E850360000          <1>     call checkPathspecOK
   446 000031E7 5F                  <1>     pop rdi
   447 000031E8 5E                  <1>     pop rsi
   448 000031E9 730D                <1>     jnc .pathOk     ;Path ok 
   449 000031EB 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   450                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   451 000031ED F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   452 000031F4 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   453                              <1> .badPath:
   454 000031F6 F9                  <1>     stc
   455                              <1>     return
    13                              <2> %%_ret:
    14 000031F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   456                              <1> .pathOk:
   457 000031F8 F8                  <1>     clc
   458                              <1>     return
    13                              <2> %%_ret:
    14 000031F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   459                              <1> 
   460                              <1> getSetFileDateTime:;ah = 57h
   461 000031FA 3C01                <1>     cmp al, 1
   462 000031FC 760A                <1>     jbe .oksubfun
   463 000031FE B801000000          <1>     mov eax, errInvFnc
   464 00003203 E915390000          <1>     jmp extErrExit
   465                              <1> .oksubfun:
   466 00003208 E827150000          <1>     call getSFTPtr  ;Preserves al unless error returned
   467 0000320D 0F820A390000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   468 00003213 3C01                <1>     cmp al, 1
   469 00003215 741C                <1>     je .setTimeDate
   470                              <1>     ;Here we get the Time/Date
   471 00003217 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   472 0000321B 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   473 0000321F E851340000          <1>     call getUserRegs
   474 00003224 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   475 00003228 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   476 0000322C 31C0                <1>     xor eax, eax
   477 0000322E E9DC380000          <1>     jmp extGoodExit
   478                              <1> .setTimeDate:
   479                              <1>     ;Here we set the Time/Date
   480 00003233 66894F13            <1>     mov word [rdi + sft.wTime], cx
   481 00003237 66895715            <1>     mov word [rdi + sft.wDate], dx
   482 0000323B 31C0                <1>     xor eax, eax
   483 0000323D E9CD380000          <1>     jmp extGoodExit
   484                              <1> 
   485                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   486                              <1> ;Uses the clock to do it's bidding
   487                              <1> ;cx = file attribute 
   488                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   489                              <1> ;       filename
   490 00003242 66F7C1D8FF          <1>     test cx, ~(archiveFile | systemFile | hiddenFile | readOnlyFile)
   491 00003247 740A                <1>     jz .validAttribs
   492 00003249 B805000000          <1>     mov eax, errAccDen
   493 0000324E E9CA380000          <1>     jmp extErrExit
   494                              <1> .validAttribs:
   495 00003253 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   496 00003257 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   497 0000325A B933000000          <1>     mov ecx, 64-13  ;First null must be at furthest, this many chars from rdx
   498 0000325F 31C0                <1>     xor eax, eax
   499 00003261 4889D7              <1>     mov rdi, rdx
   500 00003264 F2AE                <1>     repne scasb
   501 00003266 85C9                <1>     test ecx, ecx
   502 00003268 750A                <1>     jnz .nullFnd
   503                              <1>     ;Bad path
   504 0000326A B803000000          <1>     mov eax, errPnf
   505 0000326F E9A9380000          <1>     jmp extErrExit
   506                              <1> .nullFnd:
   507 00003274 48FFCF              <1>     dec rdi
   508 00003277 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   509 0000327B E80F350000          <1>     call swapPathSeparator
   510 00003280 7403                <1>     jz .pathsepFnd
   511                              <1>     ;If no pathsep found, force one at rdi
   512 00003282 B05C                <1>     mov al, "\"
   513 00003284 AA                  <1>     stosb
   514                              <1> .pathsepFnd:
   515 00003285 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   516                              <1> .fileCreateLoop:
   517 00003288 55                  <1>     push rbp
   518 00003289 E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   519 0000328E 5D                  <1>     pop rbp
   520 0000328F 0FB7C1              <1>     movzx eax, cx
   521 00003292 0FB7D2              <1>     movzx edx, dx
   522 00003295 C1E010              <1>     shl eax, 10h
   523 00003298 09D0                <1>     or eax, edx  ;Add the bits of dx too
   524 0000329A E831000000          <1>     call .writeNybbles
   525 0000329F 31C0                <1>     xor eax, eax
   526 000032A1 AA                  <1>     stosb   ;Store terminating null
   527 000032A2 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   528 000032A5 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   529 000032A8 55                  <1>     push rbp
   530 000032A9 E85C000000          <1>     call createNewFile
   531 000032AE 5D                  <1>     pop rbp
   532 000032AF 0F835A380000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   533 000032B5 0FB705(00C40300)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   534 000032BC 3D05000000          <1>     cmp eax, errAccDen
   535 000032C1 74C5                <1>     je .fileCreateLoop
   536 000032C3 3D50000000          <1>     cmp eax, errFilExist
   537 000032C8 74BE                <1>     je .fileCreateLoop
   538 000032CA F9                  <1>     stc
   539 000032CB E94D380000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   540                              <1> .writeNybbles:
   541                              <1> ;Write the nybbles of eax at rdi
   542 000032D0 B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   543                              <1> .wnLp:
   544 000032D5 C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   545 000032D8 50                  <1>     push rax
   546 000032D9 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   547 000032DE 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   548 000032E3 3D39000000          <1>     cmp eax, '9'
   549 000032E8 7605                <1>     jbe .notExtDigit
   550 000032EA 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   551                              <1> .notExtDigit:
   552 000032EF AA                  <1>     stosb   ;Store the digit
   553 000032F0 58                  <1>     pop rax
   554 000032F1 FFC9                <1>     dec ecx
   555 000032F3 75E0                <1>     jnz .wnLp
   556                              <1>     return
    13                              <2> %%_ret:
    14 000032F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   557                              <1> 
   558                              <1> .uniqueTimeGet:
   559 000032F6 E827F4FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   560 000032FB 668B0D(0CC50300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   561 00003302 668B15(0EC50300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   562                              <1>     return
    13                              <2> %%_ret:
    14 00003309 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> createNewFile:     ;ah = 5Bh
   565 0000330A 51                  <1>     push rcx    ;Save file attributes on stack
   566 0000330B 488D0DC2070000      <1>     lea rcx, createNewMain
   567 00003312 C605(ECC60300)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
   568 00003319 E9E6F9FFFF          <1>     jmp openFileHdl.openCommon
   569                              <1> 
   570                              <1> lockUnlockFile:    ;ah = 5Ch
   571                              <1> ;ah = 5Ch
   572                              <1> ;al = subfunction
   573                              <1> ;       00h lock region of file
   574                              <1> ;       01h unlock region of file
   575                              <1> ;ebx = file handle
   576                              <1> ;ecx = start offset of region within file
   577                              <1> ;edi = length of region in bytes
   578 0000331E 3C01                <1>     cmp al, 1
   579 00003320 7757                <1>     ja .badFunction
   580 00003322 57                  <1>     push rdi
   581 00003323 E826140000          <1>     call derefSFTPtr
   582 00003328 730B                <1>     jnc .validHdl
   583 0000332A 58                  <1>     pop rax ;Discard the qword on the stack
   584 0000332B B806000000          <1>     mov eax, errBadHdl
   585 00003330 E9E8370000          <1>     jmp extErrExit
   586                              <1> .validHdl:
   587 00003335 84C0                <1>     test al, al ;Check if al = 0
   588 00003337 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   589 00003338 7424                <1>     jz .lockFileRegion
   590 0000333A 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   591 00003340 740B                <1>     jz .unlockShare ;Jump if a local file only
   592 00003342 50                  <1>     push rax
   593 00003343 B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   594 00003348 CD4F                <1>     int 4Fh
   595 0000334A 5B                  <1>     pop rbx
   596 0000334B EB06                <1>     jmp short .exitSelect
   597                              <1> .unlockShare:
   598 0000334D FF15(ECC00300)      <1>     call qword [unlockFileShare]    ;Call share hook
   599                              <1> .exitSelect:
   600 00003353 0F82C4370000        <1>     jc extErrExit
   601 00003359 E9B1370000          <1>     jmp extGoodExit
   602                              <1> .lockFileRegion:
   603 0000335E 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   604 00003364 740B                <1>     jz .lockShare   ;Jump if a local file only
   605 00003366 50                  <1>     push rax
   606 00003367 B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   607 0000336C CD4F                <1>     int 4Fh
   608 0000336E 5B                  <1>     pop rbx
   609 0000336F EBE2                <1>     jmp short .exitSelect
   610                              <1> .lockShare:
   611 00003371 FF15(E4C00300)      <1>     call qword [lockFileShare]  ;Call share hook
   612 00003377 EBDA                <1>     jmp short .exitSelect
   613                              <1> .badFunction:
   614 00003379 B801000000          <1>     mov eax, errInvFnc
   615 0000337E 668905(00C40300)    <1>     mov word [errorExCde], ax
   616 00003385 E993370000          <1>     jmp extErrExit
   617                              <1> 
   618                              <1> setHandleCount:    ;ah = 67h
   619                              <1> ;Input: bx = Size of new file handle table for process
   620                              <1> ;Output: CF=NC -> Ok to make more handles
   621                              <1> ;        CF=CY -> ax = Error code
   622                              <1> ;Five cases to consider:
   623                              <1> ;       1) Allocating a new block of memory, copying PSP JFT to it, inc hdl cnt
   624                              <1> ;       2) Freeing a block and returning to the PSP JFT, dec hdl cnt x
   625                              <1> ;       3) Extending an external block, inc hdl cnt. If realloc fails, goto 5)
   626                              <1> ;       4) Reducing an external block, dec hdl cnt, no realloc.
   627                              <1> ;   Special case below, cannot be enacted directly by caller.
   628                              <1> ;       5) Freeing an external block for a bigger external block, inc hdl cnt
   629 0000338A 0FB7DB              <1>     movzx ebx, bx   ;Zero extend to use ebx/rbx
   630 0000338D 488B2D(14C40300)    <1>     mov rbp, qword [currentPSP] ;Get a ptr to the currentPSP
   631 00003394 663B5D4E            <1>     cmp bx, word [rbp + psp.jftSize]    ;Requesting more handles than we have?
   632 00003398 7765                <1>     ja short .moreHdlsReq
   633 0000339A 6681FB1400          <1>     cmp bx, dfltJFTsize ;Requesting more than the default JFT amount?
   634 0000339F 771A                <1>     ja short .reduceExternal
   635                              <1>     ;Here if 20 handles or less requested
   636 000033A1 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;If this is 20 or less, exit
   637 000033A7 7728                <1>     ja short .reduceFree  ;Copying back to the JFT
   638 000033A9 7406                <1>     je short .exitGood    ;Else we are already in the PSP
   639 000033AB 66C7454E1400        <1>     mov word [rbp + psp.jftSize], dfltJFTsize   ;Else, replace with dflt
   640                              <1> .exitGood:
   641 000033B1 E959370000          <1>     jmp extGoodExit
   642                              <1> .exitBad:
   643 000033B6 E962370000          <1>     jmp extErrExit
   644                              <1> .reduceExternal:
   645                              <1> ;We try to reallocate the block to be more appropriate for the new maxhdls.
   646                              <1> ;If it fails, no big deal since we manually prevent the user from using more
   647                              <1> ; files. If we then grow this block again, realloc will try to grow it again
   648                              <1> ; and failing that, it will free it and then allocate a new block.
   649 000033BB 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   650 000033BF E8E8000000          <1>     call .checkOpenHandles
   651 000033C4 72F0                <1>     jc short .exitBad
   652                              <1>     ;Recall ebx has the numebr of handles here
   653 000033C6 E890000000          <1>     call .reallocBlock  ;Try realloc size to be more ok. If it fails, no biggie
   654 000033CB 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Store new handle cnt
   655 000033CF EBE0                <1>     jmp short .exitGood
   656                              <1> .reduceFree:
   657                              <1> ;Entered once we know that we have an external block
   658                              <1> ;Now we close all handles above JFT size
   659 000033D1 488D7D2A            <1>     lea rdi, qword [rbp + psp.externalJFTPtr]   ;Get destination
   660 000033D5 488B37              <1>     mov rsi, qword [rdi]    ;Get source 
   661 000033D8 E8CF000000          <1>     call .checkOpenHandles
   662 000033DD 72D7                <1>     jc short .exitBad
   663 000033DF BB14000000          <1>     mov ebx, dfltJFTsize
   664 000033E4 89D9                <1>     mov ecx, ebx    ;Move count of handles into ecx
   665                              <1> ;No open handles in range to be freed, now we copy the first 20 handles over
   666 000033E6 E8B8000000          <1>     call .copyBlock
   667                              <1>     ;Now we can free the old block
   668 000033EB 4989F0              <1>     mov r8, rsi
   669 000033EE 53                  <1>     push rbx
   670 000033EF E8871B0000          <1>     call freeMemory
   671 000033F4 5B                  <1>     pop rbx
   672 000033F5 72BF                <1>     jc short .exitBad
   673 000033F7 66895D4E            <1>     mov word [rbp + psp.jftSize], bx   ;Now we have dflt number of hdls
   674 000033FB 31C0                <1>     xor eax, eax
   675                              <1> .exitGood2:
   676 000033FD EBB2                <1>     jmp short .exitGood
   677                              <1> .moreHdlsReq:
   678 000033FF 81FBFFFF0000        <1>     cmp ebx, 0FFFFh ;HARD LIMIT ON NUMBER OF HANDLES IS (WORD)-1
   679 00003405 7507                <1>     jne short .okToExpand
   680 00003407 B801000000          <1>     mov eax, errInvFnc
   681                              <1> .exitBad2:
   682 0000340C EBA8                <1>     jmp short .exitBad
   683                              <1> .okToExpand:
   684                              <1> ;Need to check if we are external and reallocating. 
   685                              <1> ;   If we are, can we realloc or do we need to free and save?
   686 0000340E 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;Are we in JFT?
   687 00003414 762E                <1>     jbe short .moreFromJFT
   688 00003416 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   689 0000341A E83C000000          <1>     call .reallocBlock
   690 0000341F 7390                <1>     jnc short .exitGood
   691 00003421 E84D000000          <1>     call .getBlock  ;rsi is preserved across the call
   692 00003426 728E                <1>     jc short .exitBad
   693 00003428 4989F0              <1>     mov r8, rsi ;Free the source block
   694 0000342B 53                  <1>     push rbx
   695 0000342C 57                  <1>     push rdi    ;Save the new pointer here
   696 0000342D 55                  <1>     push rbp
   697 0000342E E8481B0000          <1>     call freeMemory
   698 00003433 5D                  <1>     pop rbp
   699 00003434 5F                  <1>     pop rdi
   700 00003435 5B                  <1>     pop rbx
   701 00003436 7317                <1>     jnc short .freeOk ;Free'd the original block
   702 00003438 50                  <1>     push rax    ;Save error code on stack
   703 00003439 4989F8              <1>     mov r8, rdi ;Free the new block
   704 0000343C E83A1B0000          <1>     call freeMemory
   705 00003441 58                  <1>     pop rax
   706 00003442 EBC8                <1>     jmp short .exitBad2
   707                              <1> .moreFromJFT:
   708 00003444 488D752A            <1>     lea rsi, qword [rbp + psp.jobFileTbl]   ;Get the ptr to the current JFT
   709 00003448 E826000000          <1>     call .getBlock
   710 0000344D 72BD                <1>     jc short .exitBad2
   711                              <1> .freeOk:
   712 0000344F 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Set the new count
   713 00003453 48897D2A            <1>     mov qword [rbp + psp.externalJFTPtr], rdi
   714 00003457 31C0                <1>     xor eax, eax
   715 00003459 EBA2                <1>     jmp short .exitGood2
   716                              <1> .reallocBlock:
   717                              <1> ;Input:
   718                              <1> ;   rsi -> Source block to reallocate
   719                              <1> ;   ebx = Number of handles
   720                              <1> ;   rbp -> Current PSP
   721                              <1> ;Output: CF=NC => rsi -> Source block reallocated in size
   722                              <1> ;                 ebx = Number of handles
   723                              <1> ;        CF=CY => Error, EAX has error code
   724 0000345B 56                  <1>     push rsi ;Save external pointer on stack
   725 0000345C 53                  <1>     push rbx    ;Save number of handles on stack
   726 0000345D 55                  <1>     push rbp
   727 0000345E 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   728 00003464 C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   729 00003467 4989F0              <1>     mov r8, rsi
   730 0000346A E8141C0000          <1>     call reallocMemory
   731 0000346F 5D                  <1>     pop rbp
   732 00003470 5B                  <1>     pop rbx
   733 00003471 5E                  <1>     pop rsi ;Get external pointer back in rsi
   734                              <1>     return
    13                              <2> %%_ret:
    14 00003472 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   735                              <1> .getBlock:
   736                              <1> ;rsi -> Source block for copy 
   737                              <1> ;ebx = Number of new handles
   738                              <1> ;Output: rsi and ebx as before
   739                              <1> ;        rdi -> New block
   740                              <1> ;IF CF=CY, bad exit
   741 00003473 53                  <1>     push rbx    ;bx has the number of handles we want
   742 00003474 56                  <1>     push rsi
   743 00003475 55                  <1>     push rbp
   744 00003476 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   745 0000347C C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   746 0000347F 89D9                <1>     mov ecx, ebx
   747 00003481 C1E104              <1>     shl ecx, 4  ;Get bytes being allocated
   748 00003484 51                  <1>     push rcx    ;Save the actual number of bytes in the alloc
   749 00003485 E8C7180000          <1>     call allocateMemory ;Allocate memory 
   750 0000348A 59                  <1>     pop rcx ;Get back actual number of bytes allocated
   751 0000348B 5D                  <1>     pop rbp ;Get the PSP pointer back
   752 0000348C 5E                  <1>     pop rsi ;Get the source pointer back
   753 0000348D 5B                  <1>     pop rbx ;Get the number of handles to allocate back
   754                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000348E 72E2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   755 00003490 4889C7              <1>     mov rdi, rax    ;Move the ptr of the new block to rdi
   756 00003493 57                  <1>     push rdi
   757 00003494 31C0                <1>     xor eax, eax
   758 00003496 FFC8                <1>     dec eax
   759 00003498 F3AA                <1>     rep stosb   ;Setup the new memory block with all -1's
   760 0000349A 5F                  <1>     pop rdi
   761 0000349B 89D9                <1>     mov ecx, ebx    ;Get the new number of handles to copy over
   762 0000349D E801000000          <1>     call .copyBlock ;Copy all the handles over
   763                              <1>     return
    13                              <2> %%_ret:
    14 000034A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   764                              <1> .copyBlock:
   765                              <1> ;Input: rsi -> Source block
   766                              <1> ;       rdi -> Destination block
   767                              <1> ;       ecx = Number of handles to copy
   768 000034A3 56                  <1>     push rsi
   769 000034A4 57                  <1>     push rdi
   770 000034A5 51                  <1>     push rcx
   771 000034A6 F3A4                <1>     rep movsb
   772 000034A8 59                  <1>     pop rcx
   773 000034A9 5F                  <1>     pop rdi
   774 000034AA 5E                  <1>     pop rsi
   775                              <1>     return
    13                              <2> %%_ret:
    14 000034AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   776                              <1> .checkOpenHandles:
   777                              <1> ;Checks for open handles in the range that is to be freed.
   778                              <1> ;If any found, error exit
   779                              <1> ;Input: rsi -> Where to start searching
   780 000034AC 56                  <1>     push rsi
   781 000034AD 0FB74D4E            <1>     movzx ecx, word [rbp + psp.jftSize] 
   782                              <1> .cohLoop:
   783 000034B1 803EFF              <1>     cmp byte [rsi], -1
   784 000034B4 7509                <1>     jne .checkOpenHandlesBadExit
   785 000034B6 48FFC6              <1>     inc rsi
   786 000034B9 FFC9                <1>     dec ecx
   787 000034BB 75F4                <1>     jnz .cohLoop
   788 000034BD 5E                  <1>     pop rsi
   789                              <1>     return
    13                              <2> %%_ret:
    14 000034BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   790                              <1> .checkOpenHandlesBadExit:
   791 000034BF B804000000          <1>     mov eax, errNhl
   792 000034C4 F9                  <1>     stc
   793 000034C5 5E                  <1>     pop rsi
   794                              <1>     return
    13                              <2> %%_ret:
    14 000034C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   795                              <1> 
   796                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   797                              <1>     ;Input: bx = File to flush
   798 000034C7 E868120000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   799 000034CC 0F824B360000        <1>     jc extErrExit
   800 000034D2 E8B6100000          <1>     call setCurrentSFT  ;Set as current SFT to ensure it is committed
   801                              <1>     ;Now we check if the device is a char, disk or net file and commit
   802 000034D7 E811000000          <1>     call commitMain
   803 000034DC 0F823B360000        <1>     jc extErrExit   ;If an error occured, exit with error code in al
   804                              <1> .exitOk:
   805 000034E2 30C0                <1>     xor al, al
   806 000034E4 E88C310000          <1>     call getUserRegs
   807 000034E9 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   808                              <1>     return
    13                              <2> %%_ret:
    14 000034EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   809                              <1> 
   810                              <1> ;-----------------------------------:
   811                              <1> ;       Main File IO Routines       :
   812                              <1> ;-----------------------------------:
   813                              <1> commitMain:
   814                              <1> ;Commits the current SFT 
   815 000034ED E8A3100000          <1>     call getCurrentSFT  ;Gets currentSFT into rdi
   816 000034F2 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   817 000034F6 A9C0000000          <1>     test eax, devCharDev | blokFileNoFlush
   818                              <1>     retnz   ;Return if nothing has been written or a char dev
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000034FB 75EF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   819 000034FD 66A90080            <1>     test ax, devRedirDev
   820 00003501 7508                <1>     jnz .notNet
   821                              <1>     ;Commit file net redir call and exit
   822 00003503 B807110000          <1>     mov eax, 1107h
   823 00003508 CD4F                <1>     int 4Fh
   824                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 0000350A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   825                              <1> .notNet:
   826 0000350B E8C2350000          <1>     call dosCrit1Enter
   827 00003510 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   828 00003514 E8E7300000          <1>     call setWorkingDPB
   829 00003519 E86EE6FFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   830 0000351E 7205                <1>     jc short .exit    ;Return in error if this fails, exit critical
   831 00003520 E853D2FFFF          <1>     call flushFile  ;Now the file gets flushed
   832                              <1> .exit:
   833                              <1> ;Propagate CF and AL if needed due to error
   834 00003525 E8B2350000          <1>     call dosCrit1Exit
   835                              <1>     return
    13                              <2> %%_ret:
    14 0000352A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   836                              <1> renameMain:
   837                              <1> ;Now, creates a special find first block for the source file
   838                              <1> ; that is in curDirCopy. Then we build a search pattern for the new name, 
   839                              <1> ; following wildcard rules sourcing from the filespec in the special find first 
   840                              <1> ; block. 
   841                              <1> ;Then we search for that file name specifically (again), replacing 
   842                              <1> ; the filename portion of the destination buffer. If it exists or the 
   843                              <1> ; filename is a char device, we crap out. If it doesnt exist, we create
   844                              <1> ; the new directory entry and delete the original file. 
   845                              <1> ;Input:
   846                              <1> ; filenamePtr1 -> Source path + filename pattern
   847                              <1> ; filenamePtr2 -> New path + filename pattern
   848                              <1> ; workingCDS -> CDS for drive we are considering (set by )
   849 0000352B 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   850 00003532 E8D1300000          <1>     call testCDSNet ;CF=NC => Not net
   851 00003537 7308                <1>     jnc .notNet
   852 00003539 B811110000          <1>     mov eax, 1111h
   853 0000353E CD4F                <1>     int 4Fh
   854                              <1>     return
    13                              <2> %%_ret:
    14 00003540 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   855                              <1> .notNet:
   856                              <1> ;First check if both drives are on the same disk
   857 00003541 8A05(12C50300)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
   858 00003547 8A25(92C50300)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
   859 0000354D 38E0                <1>     cmp al, ah
   860 0000354F 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
   861 00003551 B811000000          <1>     mov eax, errDevUnk
   862 00003556 F9                  <1>     stc
   863                              <1>     return
    13                              <2> %%_ret:
    14 00003557 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   864                              <1> .sameDrive:
   865                              <1> ;Now we check if either pathsepc is simply X:\,0
   866                              <1> ; If they are, return fail as we cannot rename the root dir
   867 00003558 E875350000          <1>     call dosCrit1Enter
   868 0000355D 8B05(12C50300)      <1>     mov eax, dword [buffer1]
   869 00003563 30C0                <1>     xor al, al
   870 00003565 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
   871 0000356A 750B                <1>     jne .checkpath2
   872                              <1> .accDen:
   873 0000356C B805000000          <1>     mov eax, errAccDen
   874                              <1> .errorExit:
   875 00003571 F9                  <1>     stc
   876 00003572 E9ED020000          <1>     jmp .exit2
   877                              <1> .checkpath2:
   878 00003577 8B05(92C50300)      <1>     mov eax, dword [buffer2]
   879 0000357D 30C0                <1>     xor al, al
   880 0000357F 3D003A5C00          <1>     cmp eax, 005C3A00h
   881 00003584 74E6                <1>     je .accDen  ;If this is the root, exit access denied
   882                              <1> ;Now we find first the source file
   883 00003586 488B35(12C60300)    <1>     mov rsi, qword [fname1Ptr]
   884 0000358D 4889F7              <1>     mov rdi, rsi
   885 00003590 C605(ECC60300)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   886 00003597 E85EDAFFFF          <1>     call getFilePathNoCanon    ;Get the path for the file to delete
   887 0000359C 0F82C2020000        <1>     jc .exit2    ;Return with CF=CY if file doesn't exist
   888 000035A2 488D35(4EC60300)    <1>     lea rsi, curDirCopy
   889 000035A9 488D3D(B2C70300)    <1>     lea rdi, renameDir
   890 000035B0 B904000000          <1>     mov ecx, fatDirEntry_size/8
   891 000035B5 F348A5              <1>     rep movsq   ;Copy directory over
   892 000035B8 488D3D(87C70300)    <1>     lea rdi, renameFFBlk
   893 000035BF E860D9FFFF          <1>     call setupFFBlock   ;Need this to save the dir entry cluster/sector/offset 
   894                              <1>     ;Now we check this path, if it is a DIR, ensure it is not the current
   895                              <1>     ; dir for any CDS.
   896 000035C4 F605(59C60300)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
   897 000035CB 7543                <1>     jnz .notDirCheck
   898 000035CD 488B3D(12C60300)    <1>     mov rdi, qword [fname1Ptr]
   899 000035D4 57                  <1>     push rdi
   900 000035D5 E8F3310000          <1>     call strlen ;Get asciiz length in ecx
   901 000035DA 5B                  <1>     pop rbx
   902 000035DB FFC9                <1>     dec ecx ;Get one less char to check, we check the last one manually
   903 000035DD 488B35(6BC00300)    <1>     mov rsi, qword [cdsHeadPtr]
   904 000035E4 0FB615(7EC00300)    <1>     movzx edx, byte [lastdrvNum]
   905                              <1> .dirCheck:
   906 000035EB 4889DF              <1>     mov rdi, rbx
   907 000035EE 56                  <1>     push rsi    ;Save rsi pointing to the start of the CDS
   908 000035EF F3A6                <1>     repe cmpsb  ;Compare while they are equal
   909 000035F1 AC                  <1>     lodsb   ;Get the last char to check in al
   910 000035F2 5E                  <1>     pop rsi ;Put rsi back to the start of the string
   911 000035F3 7510                <1>     jne .neqDir
   912 000035F5 3C5C                <1>     cmp al, "\" ;Check the last char manually for pathend
   913 000035F7 0F846FFFFFFF        <1>     je .accDen
   914 000035FD 84C0                <1>     test al, al
   915 000035FF 0F8467FFFFFF        <1>     je .accDen
   916                              <1> .neqDir:
   917 00003605 4881C65B000000      <1>     add rsi, cds_size   ;Goto next CDS
   918 0000360C FFCA                <1>     dec edx
   919 0000360E 75DB                <1>     jnz .dirCheck
   920                              <1> .notDirCheck:
   921                              <1>     ;Now use FFBlock to temp swap out the filename with the source pattern
   922 00003610 B9FFFFFFFF          <1>     mov ecx, -1    ;Just a large number to search
   923 00003615 31C0                <1>     xor eax, eax
   924 00003617 488B3D(12C60300)    <1>     mov rdi, qword [fname1Ptr]
   925 0000361E F2AE                <1>     repne scasb   ;Search for terminating null
   926 00003620 FD                  <1>     std ;Go backwards now, to find the path sep
   927 00003621 B05C                <1>     mov al, "\"
   928 00003623 F2AE                <1>     repne scasb   ;Now rsi points one before
   929 00003625 FC                  <1>     cld ;Go normal ways now
   930 00003626 4881C702000000      <1>     add rdi, 2  ;Goto first char of pathname
   931 0000362D 57                  <1>     push rdi
   932 0000362E 4889FE              <1>     mov rsi, rdi
   933 00003631 488D3D(D5C60300)    <1>     lea rdi, wcdFcbName
   934 00003638 E85FD8FFFF          <1>     call asciiToFCB ;Copy the search pattern to wcdFcbName
   935 0000363D 5F                  <1>     pop rdi
   936 0000363E 57                  <1>     push rdi    ;Save rdi on stack again
   937 0000363F 488D35(A5C70300)    <1>     lea rsi, qword [renameFFBlk + ffBlock.asciizName]
   938                              <1>     ;Copy the asciiz name (including terminating null) to pathspec
   939 00003646 48A5                <1>     movsq
   940 00003648 A5                  <1>     movsd
   941 00003649 A4                  <1>     movsb   ;This is a terminating null if a full 8.3 filename
   942 0000364A 5F                  <1>     pop rdi ;rdi points to first char position
   943 0000364B E864020000          <1>     call checkNoOpenHandlesForShareAction   ;Now do this, all regs saved!
   944 00003650 0F821BFFFFFF        <1>     jc .errorExit   ;Propagate the share error code
   945                              <1>     ;Else return the pattern back to its original position
   946 00003656 488D35(D5C60300)    <1>     lea rsi, wcdFcbName ;rsi -> FCBified pattern, rdi -> First char for name
   947 0000365D E882D8FFFF          <1>     call FCBToAsciiz
   948                              <1>     ;Delete the original directory entry
   949 00003662 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift] 
   950 00003666 FFC1                <1>     inc ecx ;Get sectors/cluster in ecx
   951 00003668 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   952 0000366C F7E1                <1>     mul ecx ;Get bytes per cluster in eax
   953 0000366E 8B0D(94C70300)      <1>     mov ecx, dword [renameFFBlk + ffBlock.dirOffset] ;32 byte offset in cluster
   954 00003674 C1E105              <1>     shl ecx, 5  ;Get byte offset in cluster
   955 00003677 91                  <1>     xchg ecx, eax
   956 00003678 F7F1                <1>     div ecx ;Get Sector in cluster in eax and sector offset in edx
   957 0000367A 89C3                <1>     mov ebx, eax
   958 0000367C 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get the current dir cluster, not start cluster
   959 00003682 E8B3D1FFFF          <1>     call getStartSectorOfCluster    ;Cluster number in eax, sector in rax
   960 00003687 4801D8              <1>     add rax, rbx    ;Goto the sector for the cluster
   961 0000368A E890D0FFFF          <1>     call getBufForDirNoFile ;Get buffer pointer in rbx
   962 0000368F 0F82DA010000        <1>     jc .badExit
   963 00003695 488D741330          <1>     lea rsi, qword [rbx + bufferHdr.dataarea + rdx] ;Goto byte offset in sector
   964                              <1>     ;rsi points to the file entry
   965 0000369A 8A05(F8C60300)      <1>     mov al, byte [delChar]
   966 000036A0 8806                <1>     mov byte [rsi], al
   967 000036A2 E8EDCEFFFF          <1>     call markBufferDirty    ;Set this buffer as having been written to now
   968                              <1> 
   969                              <1>     ;Now we use the destination filename pattern to build the new filename
   970 000036A7 488B3D(1AC60300)    <1>     mov rdi, qword [fname2Ptr]  ;Get the destination path ptr in rdi
   971 000036AE 31C0                <1>     xor eax, eax
   972 000036B0 B943000000          <1>     mov ecx, 67
   973 000036B5 F2AE                <1>     repne scasb   ;Find the null terminator of the destination path
   974                              <1> .findPattern:
   975 000036B7 48FFCF              <1>     dec rdi
   976 000036BA 803F5C              <1>     cmp byte [rdi], "\" ;Is this a pathsep?
   977 000036BD 75F8                <1>     jne .findPattern
   978                              <1> ;rdi points to the pathseparator, unless it is the root pathsep
   979 000036BF C605(EEC60300)00    <1>     mov byte [fileFDflg], 0 ;Clear this byte
   980 000036C6 807FFF3A            <1>     cmp byte [rdi - 1], ":"
   981 000036CA 750D                <1>     jne .notRoot
   982                              <1>     ;The root dir always exists on a volume so can skip the check.
   983 000036CC 48FFC7              <1>     inc rdi ;Goto the first char of the filename
   984 000036CF 57                  <1>     push rdi
   985 000036D0 800D(EEC60300)02    <1>     or byte [fileFDflg], 2  ;Bit 2 means ROOT DIR FILE
   986 000036D7 EB29                <1>     jmp short .skipCheck
   987                              <1> .notRoot:
   988 000036D9 AA                  <1>     stosb   ;Store a null over the "\" and inc rdi to char one of pattern
   989 000036DA 57                  <1>     push rdi    ;Push the new name pattern portion ptr in var
   990                              <1>     ;Now check if the parent directory exists for the destination
   991 000036DB 57                  <1>     push rdi    ;Save the ptr to the first char of the pathsep
   992 000036DC FF35(12C60300)      <1>     push qword [fname1Ptr]  ;Preserve original source buffer
   993 000036E2 488D35(92C50300)    <1>     lea rsi, buffer2
   994 000036E9 4889F7              <1>     mov rdi, rsi
   995 000036EC E802D9FFFF          <1>     call getDirPathNoCanon ;We are searching for a directory ONLY
   996 000036F1 8F05(12C60300)      <1>     pop qword [fname1Ptr]
   997 000036F7 5F                  <1>     pop rdi
   998 000036F8 0F8271010000        <1>     jc .badExit    ;Error if the parent dir doesnt exist
   999 000036FE C647FF5C            <1>     mov byte [rdi - 1], "\" ;Replace the pathseparator
  1000                              <1> .skipCheck:
  1001                              <1>     ;rdi now points to the first char of the pattern
  1002 00003702 4889FE              <1>     mov rsi, rdi
  1003 00003705 488D3D(D5C60300)    <1>     lea rdi, wcdFcbName
  1004 0000370C E88BD7FFFF          <1>     call asciiToFCB ;Convert the asciiz name to FCB format
  1005                              <1>     ;Ensure the destination pattern is not all question marks
  1006 00003711 813D(D5C60300)3F3F- <1>     cmp dword [wcdFcbName], "????"
  1006 00003719 3F3F                <1>
  1007 0000371B 7524                <1>     jne .validRenPattern
  1008 0000371D 813D(D9C60300)3F3F- <1>     cmp dword [wcdFcbName + 4], "????"
  1008 00003725 3F3F                <1>
  1009 00003727 7518                <1>     jne .validRenPattern
  1010 00003729 66813D(DDC60300)3F- <1>     cmp word [wcdFcbName + 8], "??"
  1010 00003731 3F                  <1>
  1011 00003732 750D                <1>     jne .validRenPattern
  1012 00003734 803D(DFC60300)3F    <1>     cmp byte [wcdFcbName + 10], "?"
  1013 0000373B 0F8429010000        <1>     je .bad ;Access denied buddy ol' pal
  1014                              <1> .validRenPattern:
  1015                              <1>     ;curDirCopy has information for the destination directory file we will 
  1016                              <1>     ; write to. The cluster points to the directory file itself to search in
  1017                              <1>     ;Each filename we create must be searched for to ensure it doesnt exist
  1018                              <1>     ;Make new fname in fcbName from asciizname in renameDir
  1019 00003741 488D35(B2C70300)    <1>     lea rsi, renameDir  ;Copy the source filename over
  1020 00003748 488D3D(C9C60300)    <1>     lea rdi, fcbName
  1021 0000374F 57                  <1>     push rdi    ;Preserve this as the destination for copy
  1022 00003750 B90B000000          <1>     mov ecx, 11
  1023 00003755 F3A4                <1>     rep movsb
  1024 00003757 5F                  <1>     pop rdi
  1025 00003758 488D35(D5C60300)    <1>     lea rsi, wcdFcbName ;Now source the chars from here
  1026                              <1> .mnnLp:
  1027 0000375F AC                  <1>     lodsb
  1028 00003760 3C3F                <1>     cmp al, "?" ;Is it a wc?
  1029 00003762 7404                <1>     je .mnnWC   ;Skip overriding this char
  1030 00003764 AA                  <1>     stosb   ;Store new char and go forwards by one
  1031 00003765 48FFCF              <1>     dec rdi ;Now go back by one
  1032                              <1> .mnnWC:
  1033 00003768 48FFC7              <1>     inc rdi ;Goto next letter
  1034 0000376B FFC1                <1>     inc ecx
  1035 0000376D 81F90B000000        <1>     cmp ecx, 11
  1036 00003773 75EA                <1>     jne .mnnLp
  1037 00003775 488D35(C9C60300)    <1>     lea rsi, fcbName
  1038 0000377C 488D3D(B2C70300)    <1>     lea rdi, renameDir
  1039 00003783 B90B000000          <1>     mov ecx, 11
  1040 00003788 F3A4                <1>     rep movsb   ;Move the name over from fcbName to new dir entry name field
  1041 0000378A 5F                  <1>     pop rdi ;Get the first char of the filename place in destination pathspec
  1042 0000378B 57                  <1>     push rdi    ;Push it on stack again to be reused later if a WC spec
  1043 0000378C 488D35(C9C60300)    <1>     lea rsi, fcbName
  1044 00003793 E84CD7FFFF          <1>     call FCBToAsciiz    ;Copy the name over to asciiz 
  1045 00003798 488B35(1AC60300)    <1>     mov rsi, qword [fname2Ptr]
  1046 0000379F 4889F7              <1>     mov rdi, rsi
  1047 000037A2 E853D8FFFF          <1>     call getFilePathNoCanon    ;This must be a non-existant file
  1048 000037A7 0F83C2000000        <1>     jnc .badExit   ;If the file exists, then error
  1049 000037AD 3D02000000          <1>     cmp eax, errFnf ;If Fnf error then we may proceed
  1050 000037B2 0F85B7000000        <1>     jne .badExit
  1051                              <1>     ;Now we search the parent dir (the curDirCopy dir) for free space
  1052                              <1>     ;If the parent is root, deal with special case
  1053 000037B8 488D1D(4EC60300)    <1>     lea rbx, curDirCopy
  1054 000037BF F605(EEC60300)02    <1>     test byte [fileFDflg], 2
  1055 000037C6 C605(EEC60300)00    <1>     mov byte [fileFDflg], 0 ;Clear the flag again
  1056 000037CD 7416                <1>     jz .notRoot2
  1057 000037CF 488D35(C9C60300)    <1>     lea rsi, fcbName
  1058 000037D6 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
  1059 000037DD 48A5                <1>     movsq
  1060 000037DF A5                  <1>     movsd
  1061 000037E0 A4                  <1>     movsb
  1062 000037E1 31C0                <1>     xor eax, eax    ;Dir to search
  1063 000037E3 EB13                <1>     jmp short .getSpace
  1064                              <1> .notRoot2:
  1065 000037E5 0FB715(62C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
  1066 000037EC 0FB705(68C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
  1067 000037F3 C1E210              <1>     shl edx, 10h
  1068 000037F6 09D0                <1>     or eax, edx ;Get first cluster of dir file in eax
  1069                              <1> .getSpace:
  1070 000037F8 E87B000000          <1>     call .searchForDirSpace
  1071 000037FD 726B                <1>     jc .bad
  1072                              <1> ;dir Entry found, rsi points to space in buffer
  1073 000037FF 4889F7              <1>     mov rdi, rsi
  1074 00003802 488D35(B2C70300)    <1>     lea rsi, renameDir
  1075 00003809 B904000000          <1>     mov ecx, fatDirEntry_size/8
  1076 0000380E F348A5              <1>     rep movsq   ;Copy dir over
  1077 00003811 E87ECDFFFF          <1>     call markBufferDirty ;Mark buffer as written to now
  1078                              <1>     ;Now we check if source filename or wcdFcbname has a wildcard
  1079                              <1>     ;If it does, we find next. If not, we exit
  1080 00003816 B03F                <1>     mov al, "?"
  1081 00003818 488B3D(12C60300)    <1>     mov rdi, qword [fname1Ptr]  ;Check filename
  1082 0000381F E8A92F0000          <1>     call strlen ;Get in rcx to get the length of the string
  1083 00003824 F2AE                <1>     repne scasb
  1084 00003826 7534                <1>     jne .exit  ;If source name has no wildcards, exit
  1085 00003828 B90B000000          <1>     mov ecx, 11
  1086 0000382D 8D3D(D5C60300)      <1>     lea edi, wcdFcbName
  1087 00003833 F2AE                <1>     repne scasb
  1088 00003835 7525                <1>     jne .exit
  1089                              <1>     ;Here we gotta do a find next now!
  1090 00003837 FF35(0CC40300)      <1>     push qword [currentDTA]
  1091 0000383D 488D3D(87C70300)    <1>     lea rdi, renameFFBlk
  1092 00003844 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi ;Set renameFFBlk as currentDTA for operation
  1093 0000384B E852D3FFFF          <1>     call findNextMain
  1094 00003850 8F05(0CC40300)      <1>     pop qword [currentDTA]
  1095 00003856 0F83E5FEFFFF        <1>     jnc .validRenPattern    ;If this is ok, now find next file
  1096                              <1>     ;Else propagate the CF if this ends with an error (inc no more files)
  1097                              <1> .exit:
  1098 0000385C 5F                  <1>     pop rdi ;Pop the ptr to the dest pathspec ptr off stack
  1099 0000385D E800CDFFFF          <1>     call writeThroughBuffers
  1100 00003862 720B                <1>     jc .badExit
  1101                              <1> .exit2: ;Bad exit before we push qword on stack 
  1102 00003864 E873320000          <1>     call dosCrit1Exit
  1103                              <1>     return
    13                              <2> %%_ret:
    14 00003869 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1104                              <1> .bad:
  1105 0000386A B805000000          <1>     mov eax, errAccDen  ;Temp return code
  1106                              <1> .badExit:
  1107 0000386F E8B7CCFFFF          <1>     call cancelWriteThroughBuffers
  1108 00003874 F9                  <1>     stc
  1109 00003875 5F                  <1>     pop rdi
  1110 00003876 EBEC                <1>     jmp short .exit2
  1111                              <1> 
  1112                              <1> .searchForDirSpace:
  1113                              <1> ;Input: eax = First directory to search 
  1114 00003878 8905(74C70300)      <1>     mov dword [dirClustA], eax
  1115 0000387E 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1116 00003880 668905(78C70300)    <1>     mov word [dirSect], ax
  1117 00003887 8905(7AC70300)      <1>     mov dword [dirEntry], eax
  1118 0000388D E86DE2FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1119 00003892 731C                <1>     jnc .dirEntryFnd
  1120 00003894 813D(70C70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1120 0000389C 0000                <1>
  1121 0000389E 7412                <1>     je .searchBad ;Set CF and exit
  1122 000038A0 E8A4E3FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1123 000038A5 720B                <1>     jc .searchBad
  1124 000038A7 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1125 000038AC 7404                <1>     je .searchBad
  1126                              <1>     ;Else eax = Newly allocated cluster
  1127 000038AE EBC8                <1>     jmp short .searchForDirSpace
  1128                              <1> .dirEntryFnd:
  1129 000038B0 F8                  <1>     clc
  1130                              <1>     return
    13                              <2> %%_ret:
    14 000038B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1131                              <1> .searchBad:
  1132 000038B2 F9                  <1>     stc
  1133                              <1>     return
    13                              <2> %%_ret:
    14 000038B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1134                              <1> 
  1135                              <1> 
  1136                              <1> checkNoOpenHandlesForShareAction:
  1137                              <1> ;We check that we can proceed. This function will fail IF there are handles
  1138                              <1> ; open, and thus makes it an ideal candidate for checking in RENAME, for 
  1139                              <1> ; both filenames, DELETE and SETFILEATTRIBS if we have any open files. If we
  1140                              <1> ; do, then we should get a Share error and thus it would prevent us from 
  1141                              <1> ; proceeding.
  1142                              <1> ;
  1143                              <1> ;If SHARE not loaded, ALL handles must be closed before Rename or Delete.
  1144                              <1> ;Input: SDA fname1Ptr -> Filename we want to consider
  1145                              <1> ;       currDirCopy = Directory entry for the file
  1146 000038B4 E802320000          <1>     call dosPushRegs    ;Save the context completely
  1147 000038B9 803D(B4C00300)00    <1>     cmp byte [openFileCheck], 0 ;Some 16-bit SHAREs set the marker to 0.
  1148 000038C0 740C                <1>     jz .noOpenFileCheckHandler
  1149 000038C2 FF15(B4C00300)      <1>     call qword [openFileCheck]
  1150 000038C8 7204                <1>     jc .noOpenFileCheckHandler  ;If CF=CY, this function not defined
  1151 000038CA 7449                <1>     jz .exit    ;If CF=NC && ZF=ZE, Function defined and No open files, proceed.
  1152 000038CC EB4E                <1>     jmp short .errorMain    ;If ZF=NZ -> Have some open files, error out!
  1153                              <1> .noOpenFileCheckHandler:
  1154                              <1>     ;The following closes most recent shared handles referencing it
  1155                              <1>     ;Only if sharePSP, shareMachineNumber are equal and openMode not Compat
  1156                              <1>     ; mode and if there is precisely 1  
  1157 000038CE FF15(1CC10300)      <1>     call qword [closeNewHdlShare]    
  1158                              <1>     ;The close of the handle will only happen if there is 1 file referring to it
  1159 000038D4 488D3D(08CD0300)    <1>     lea rdi, scratchSFT
  1160 000038DB 48893D(22C70300)    <1>     mov qword [currentSFT], rdi
  1161 000038E2 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1162 000038E7 C605(F7C60300)00    <1>     mov byte [openCreate], 0    ;Make sure we are just opening the file
  1163                              <1>     ;This is to avoid needing to put the file attributes on the stack
  1164 000038EE 57                  <1>     push rdi
  1165 000038EF E884020000          <1>     call buildSFTEntry
  1166 000038F4 5F                  <1>     pop rdi
  1167 000038F5 7225                <1>     jc .errorMain
  1168 000038F7 66C7070100          <1>     mov word [rdi + sft.wNumHandles], 1   ;One "reference"
  1169 000038FC 66C747021000        <1>     mov word [rdi + sft.wOpenMode], denyRWShare ;Prevent everything temporarily
  1170 00003902 57                  <1>     push rdi
  1171 00003903 E85E390000          <1>     call shareFile
  1172 00003908 5F                  <1>     pop rdi
  1173 00003909 7211                <1>     jc .errorMain
  1174 0000390B 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0
  1175 00003910 E8E8380000          <1>     call closeShareCallWrapper
  1176                              <1> .exit:
  1177 00003915 E88A310000          <1>     call dosPopRegs
  1178 0000391A F8                  <1>     clc
  1179                              <1>     return
    13                              <2> %%_ret:
    14 0000391B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1180                              <1> .errorMain:
  1181 0000391C E883310000          <1>     call dosPopRegs
  1182 00003921 B820000000          <1>     mov eax, errShrVio  ;Share issue so return failed with share
  1183 00003926 F9                  <1>     stc
  1184                              <1>     return
    13                              <2> %%_ret:
    14 00003927 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1185                              <1> 
  1186                              <1> outerDeleteMain:
  1187                              <1> ;Internal current dir must be populated with dir entry
  1188                              <1> ; and internal DOS directory variables now point to this entry.
  1189                              <1> ;Checks if the file is a char device or read only.
  1190                              <1> ;Input: curDirCopy must has dir for the file to be deleted
  1191                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
  1192                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
  1193                              <1> ;         CF=NC => File deleted
  1194 00003928 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
  1195 0000392F E8D42C0000          <1>     call testCDSNet ;CF=NC => Not net
  1196 00003934 7308                <1>     jnc .notNet
  1197 00003936 B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
  1198 0000393B CD4F                <1>     int 4Fh
  1199                              <1>     return
    13                              <2> %%_ret:
    14 0000393D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1200                              <1> .notNet:
  1201 0000393E B805000000          <1>     mov eax, errAccDen  
  1202 00003943 F605(59C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
  1203 0000394A 754F                <1>     jnz .exitBad  ;Can't delete a char dev
  1204 0000394C F605(59C60300)01    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirReadOnly
  1205 00003953 7546                <1>     jnz .exitBad  ;Can't delete a read only file
  1206 00003955 E843000000          <1>     call deleteMain
  1207 0000395A 723F                <1>     jc .exitBad
  1208                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
  1209 0000395C B03F                <1>     mov al, "?"
  1210 0000395E 488D3D(C9C60300)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
  1211 00003965 B90B000000          <1>     mov ecx, 11
  1212 0000396A F2AE                <1>     repne scasb   ;Scan for the wildcard char
  1213 0000396C 7402                <1>     je .serverWCloop   ;This is not possible if entered via 21/41h
  1214 0000396E F8                  <1>     clc
  1215                              <1>     return  ;Return ok!
    13                              <2> %%_ret:
    14 0000396F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1216                              <1> .serverWCloop:
  1217 00003970 FF35(0CC40300)      <1>     push qword [currentDTA] ;Save the current DTA address
  1218 00003976 488D3D(23C60300)    <1>     lea rdi, dosffblock
  1219 0000397D 57                  <1>     push rdi    ;Push this address onto the stack
  1220 0000397E E8A1D5FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
  1221 00003983 8F05(0CC40300)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
  1222 00003989 E814D2FFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
  1223 0000398E 8F05(0CC40300)      <1>     pop qword [currentDTA]
  1224 00003994 E804000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
  1225 00003999 73D5                <1>     jnc .serverWCloop     
  1226                              <1> ;Stop as soon as an error occurs
  1227                              <1> .exitBad:
  1228 0000399B F9                  <1>     stc
  1229                              <1>     return
    13                              <2> %%_ret:
    14 0000399C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1230                              <1> 
  1231                              <1> deleteMain:
  1232                              <1> ;Now unlink FAT chain and then clear directory entry
  1233                              <1> ;Get the start cluster of this file
  1234                              <1> ;Input:
  1235                              <1> ; The file must have NOT be read-only.
  1236                              <1> ; If the CDS is NOT a net cds then the following must hold:
  1237                              <1> ;     - curDirCopy must be filled with the file directory information
  1238                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
  1239                              <1> ;Output: CF=NC => Success, 
  1240                              <1> ; If not net CDS:
  1241                              <1> ;   rsi keeps pointing to directory entry.
  1242                              <1> ;   al = First char of the file that was deleted.
  1243                              <1> ;        CF=CY => Error
  1244                              <1> ;The dir buffer must be marked as referenced once we are done with it
  1245 0000399D E812FFFFFF          <1>     call checkNoOpenHandlesForShareAction   ;Also cannot delete if open handle
  1246                              <1>     retc    ;Return immediately if CF=CY and propagate error code
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000039A2 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1247 000039A4 52                  <1>     push rdx
  1248 000039A5 0FB715(68C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
  1249 000039AC 0FB705(62C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
  1250 000039B3 C1E010              <1>     shl eax, 10h
  1251 000039B6 09D0                <1>     or eax, edx ;Add low bits to eax
  1252 000039B8 5A                  <1>     pop rdx
  1253 000039B9 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
  1254 000039BB 740E                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
  1255 000039BD 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
  1256 000039C4 E82AD0FFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
  1257 000039C9 721B                <1>     jc .exitBad
  1258                              <1> .skipUnlink:
  1259                              <1>     ;Now replace the first char of the directory to 0E5h
  1260                              <1>     ;Get the disk directory in a buffer to manipulate the entry
  1261 000039CB E842E1FFFF          <1>     call getDiskDirectoryEntry
  1262 000039D0 7214                <1>     jc .exitBad
  1263 000039D2 8A05(F8C60300)      <1>     mov al, byte [delChar]
  1264 000039D8 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
  1265 000039DA E8B5CBFFFF          <1>     call markBufferDirty
  1266                              <1>     ;CF must be clear
  1267 000039DF E87ECBFFFF          <1>     call writeThroughBuffers
  1268                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000039E4 73B6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1269                              <1> .exitBad:
  1270 000039E6 E840CBFFFF          <1>     call cancelWriteThroughBuffers
  1271 000039EB F9                  <1>     stc
  1272                              <1>     return
    13                              <2> %%_ret:
    14 000039EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1273                              <1> 
  1274                              <1> openMain:
  1275                              <1> ;Input: ax (formally al) = Open mode
  1276                              <1> ;       [currentSFT] = SFT we are building
  1277                              <1> ;       [workingCDS] = CDS of drive to access
  1278                              <1> ;       [workingDPB] = DPB of drive to access
  1279                              <1> ;Ouput: CF=CY => Error, eax has error code
  1280 000039ED E8AE000000          <1>     call setOpenMode
  1281                              <1>     retc    ;Error Exit 
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000039F2 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1282 000039F4 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1283 000039FB 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
  1284 00003A02 30E4                <1>     xor ah, ah  ;al has the access mode
  1285 00003A04 66894702            <1>     mov word [rdi + sft.wOpenMode], ax  ;Set the SFT access mode
  1286 00003A08 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1287 00003A0F 750A                <1>     jne .notNet
  1288                              <1> .redirOpen:
  1289 00003A11 50                  <1>     push rax    ;Push open mode onto stack
  1290 00003A12 B816110000          <1>     mov eax, 1116h  ;Open remote file on \\ pathspec drives
  1291 00003A17 CD4F                <1>     int 4Fh
  1292 00003A19 58                  <1>     pop rax
  1293                              <1>     return
    13                              <2> %%_ret:
    14 00003A1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1294                              <1> .notNet:
  1295 00003A1B 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1296 00003A21 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1297 00003A23 E8AA300000          <1>     call dosCrit1Enter
  1298 00003A28 C605(F7C60300)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1299 00003A2F C605(F8C60300)E5    <1>     mov byte [delChar], 0E5h
  1300 00003A36 E83D010000          <1>     call buildSFTEntry  ;ax must have the open mode
  1301 00003A3B 7227                <1>     jc .errorExit
  1302                              <1> .openShareLoop:
  1303                              <1> ;Now we attempt to register the file with SHARE
  1304 00003A3D 0FB70D(25C00300)    <1>     movzx ecx, word [shareCount]    
  1305                              <1> .openShareTryAgain: 
  1306 00003A44 51                  <1>     push rcx
  1307 00003A45 E8AC370000          <1>     call openShareCallWrapper
  1308 00003A4A 59                  <1>     pop rcx
  1309 00003A4B 731D                <1>     jnc .fileSharedOk
  1310 00003A4D E8CE370000          <1>     call shareRetryCountdown
  1311 00003A52 FFC9                <1>     dec ecx
  1312 00003A54 75EE                <1>     jnz .openShareTryAgain
  1313 00003A56 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1314 00003A5D E8E1370000          <1>     call shareCheckOpenViolation
  1315 00003A62 73D9                <1>     jnc .openShareLoop  ;If user selects retry, we retry!
  1316                              <1> .errorExit:
  1317 00003A64 E873300000          <1>     call dosCrit1Exit   ;Else we error out
  1318                              <1>     return
    13                              <2> %%_ret:
    14 00003A69 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1319                              <1> .fileSharedOk:
  1320 00003A6A B803000000          <1>     mov eax, 3  ;Update date/time and everything in the share dir sync call
  1321 00003A6F E8210B0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1322 00003A74 FF15(24C10300)      <1>     call qword [updateDirShare] ;Now call the dir sync, this default sets CF 
  1323 00003A7A E85D300000          <1>     call dosCrit1Exit
  1324                              <1> openDriverMux:  ;Int 4Fh, AX=120Ch, jumped to by Create
  1325 00003A7F 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1326 00003A86 E885E3FFFF          <1>     call openSFT
  1327 00003A8B 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1328 00003A91 7501                <1>     jnz .netOpen
  1329                              <1>     return
    13                              <2> %%_ret:
    14 00003A93 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1330                              <1> .netOpen:
  1331 00003A94 488B05(14C40300)    <1>     mov rax, qword [currentPSP]
  1332 00003A9B 48894745            <1>     mov qword [rdi + sft.qPSPOwner], rax
  1333                              <1>     return
    13                              <2> %%_ret:
    14 00003A9F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1334                              <1> 
  1335                              <1> setOpenMode:
  1336                              <1> ;Input: al = Open mode for the file open
  1337 00003AA0 8805(EDC60300)      <1>     mov byte [fileOpenMd], al
  1338 00003AA6 53                  <1>     push rbx
  1339 00003AA7 88C3                <1>     mov bl, al
  1340 00003AA9 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1341 00003AAC 803D(F2C60300)FF    <1>     cmp byte [dosInvoke], -1    
  1342 00003AB3 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1343 00003AB5 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
  1344 00003AB8 7405                <1>     je .s2
  1345                              <1> .s1:
  1346 00003ABA 80FB40              <1>     cmp bl, denyNoneShare
  1347 00003ABD 770D                <1>     ja .somBad
  1348                              <1> .s2:
  1349 00003ABF 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1350 00003AC1 80E30F              <1>     and bl, 0Fh
  1351 00003AC4 80FB02              <1>     cmp bl, RWAccess
  1352 00003AC7 7703                <1>     ja .somBad
  1353 00003AC9 5B                  <1>     pop rbx
  1354 00003ACA F8                  <1>     clc
  1355                              <1>     return
    13                              <2> %%_ret:
    14 00003ACB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1356                              <1> .somBad:
  1357 00003ACC 5B                  <1>     pop rbx
  1358 00003ACD B80C000000          <1>     mov eax, errAccCde
  1359 00003AD2 F9                  <1>     stc
  1360                              <1>     return
    13                              <2> %%_ret:
    14 00003AD3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1361                              <1> 
  1362                              <1> createNewMain:
  1363                              <1> ;Input: ax (formally al) = File attributes
  1364                              <1> ;       [currentSFT] = SFT we are building
  1365                              <1> ;       [workingCDS] = CDS of drive to access
  1366                              <1> ;       [workingDPB] = DPB of drive to access
  1367 00003AD4 0FB6C0              <1>     movzx eax, al
  1368 00003AD7 B401                <1>     mov ah, 1    ;Tell redir to create new file
  1369 00003AD9 F605(F4C60300)FF    <1>     test byte [fileExist], -1
  1370 00003AE0 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1371 00003AE2 B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1372 00003AE7 F9                  <1>     stc
  1373                              <1>     return
    13                              <2> %%_ret:
    14 00003AE8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1374                              <1> createMain:
  1375                              <1> ;Input: ax (formally al) = File attributes
  1376                              <1> ;       [currentSFT] = SFT we are building
  1377                              <1> ;       [workingCDS] = CDS of drive to access
  1378                              <1> ;       [workingDPB] = DPB of drive to access
  1379 00003AE9 0FB6C0              <1>     movzx eax, al
  1380                              <1> .createNewEP:
  1381 00003AEC A8C0                <1>     test al, 80h | 40h   ;Invalid bits?
  1382 00003AEE 750A                <1>     jnz .invalidAttrib
  1383 00003AF0 A808                <1>     test al, dirVolumeID
  1384 00003AF2 7506                <1>     jnz .invalidAttrib  ;Creating volume label with this function is forbidden
  1385 00003AF4 0C20                <1>     or al, dirArchive   ;Set archive bit
  1386 00003AF6 A810                <1>     test al, dirDirectory   
  1387 00003AF8 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1388                              <1> .invalidAttrib:
  1389 00003AFA B805000000          <1>     mov eax, errAccDen
  1390 00003AFF F9                  <1>     stc
  1391                              <1>     return
    13                              <2> %%_ret:
    14 00003B00 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1392                              <1> .validAttr:
  1393 00003B01 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1394 00003B08 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
  1395 00003B0F 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1396 00003B16 750A                <1>     jne .diskFile
  1397 00003B18 50                  <1>     push rax    ;Save the new attributes
  1398 00003B19 B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1399 00003B1E CD4F                <1>     int 4Fh
  1400 00003B20 5B                  <1>     pop rbx
  1401                              <1>     return
    13                              <2> %%_ret:
    14 00003B21 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1402                              <1> .diskFile:
  1403 00003B22 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1404 00003B28 740A                <1>     jz .hardFile
  1405 00003B2A 50                  <1>     push rax    ;Save the new attributes
  1406 00003B2B B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1407 00003B30 CD4F                <1>     int 4Fh
  1408 00003B32 5B                  <1>     pop rbx
  1409                              <1>     return
    13                              <2> %%_ret:
    14 00003B33 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1410                              <1> .hardFile:
  1411 00003B34 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
  1412 00003B3A C605(F7C60300)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1413 00003B41 C605(F8C60300)E5    <1>     mov byte [delChar], 0E5h
  1414 00003B48 E8852F0000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1415 00003B4D 57                  <1>     push rdi
  1416 00003B4E 50                  <1>     push rax    ;Save the file attributes on stack
  1417 00003B4F B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1418 00003B54 E81F000000          <1>     call buildSFTEntry
  1419 00003B59 5B                  <1>     pop rbx ;Pop the word off (though it has been used already!)
  1420 00003B5A 5F                  <1>     pop rdi
  1421 00003B5B 7215                <1>     jc .errorExit
  1422 00003B5D B802000000          <1>     mov eax, 2
  1423 00003B62 FF15(24C10300)      <1>     call qword [updateDirShare]
  1424 00003B68 E86F2F0000          <1>     call dosCrit1Exit
  1425 00003B6D E90DFFFFFF          <1>     jmp openDriverMux
  1426                              <1> .errorExit:
  1427 00003B72 E8652F0000          <1>     call dosCrit1Exit
  1428                              <1>     return
    13                              <2> %%_ret:
    14 00003B77 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1429                              <1> buildSFTEntry:
  1430                              <1> ;Called in a critical section.
  1431                              <1> ;Input: al = Open mode
  1432                              <1> ;       STACK: File attributes if creating a file
  1433                              <1> ;       [currentSFT] = SFT we are building
  1434                              <1> ;       [workingCDS] = CDS of drive to access
  1435                              <1> ;       [workingDPB] = DPB of drive to access
  1436                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1437                              <1> ;
  1438                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1439                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1440                              <1> ;        If CF=CY: - Return fail
  1441                              <1> ;
  1442                              <1> ;
  1443                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1444                              <1> ;   If not, create disk entry.
  1445                              <1> ;Check if the device was a char device by checking curDirCopy.
  1446                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1447                              <1> 
  1448                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1449                              <1> ; to start of file fields of the SFT
  1450 00003B78 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1451 00003B79 4889E5              <1>     mov rbp, rsp
  1452 00003B7C 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
  1453                              <1> ;Set the open mode
  1454 00003B83 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
  1455                              <1> ;Get current time
  1456 00003B87 E896EBFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1457 00003B8C E87CECFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1458 00003B91 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1459                              <1> ;Set current Owner
  1460 00003B94 488B05(14C40300)    <1>     mov rax, qword [currentPSP]
  1461 00003B9B 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
  1462                              <1> ;Set file pointer to first byte
  1463 00003B9F C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1464                              <1> ;Common fields set
  1465 00003BA6 F605(F7C60300)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1466 00003BAD 0F849D010000        <1>     jz .openProc
  1467                              <1>     ;Here if Creating a file.
  1468 00003BB3 F605(F4C60300)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1469 00003BBA 0F84D9000000        <1>     jz .createFile
  1470 00003BC0 F605(59C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev ;Char dev?
  1471 00003BC7 0F858C010000        <1>     jnz .charDev
  1472                              <1>     ;Here disk file exists, so recreating the file.
  1473                              <1>     ;If recreating, check we are not overwriting a Dir
  1474 00003BCD F605(59C60300)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
  1475 00003BD4 0F85CD010000        <1>     jnz .bad    ;Directories are not allowed to be created
  1476 00003BDA 55                  <1>     push rbp
  1477 00003BDB FF35(22C70300)      <1>     push qword [currentSFT]
  1478 00003BE1 E8B7FDFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1479 00003BE6 8F05(22C70300)      <1>     pop qword [currentSFT]
  1480 00003BEC 5D                  <1>     pop rbp
  1481 00003BED 0F82B4010000        <1>     jc .bad
  1482                              <1>     ;al has the char for the filename
  1483                              <1>     ;Sets vars for the sector/offset into the sector
  1484 00003BF3 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1485 00003BFA 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1486 00003BFC 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1487                              <1>     ;al has file attributes.
  1488 00003C00 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1489 00003C02 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1490 00003C05 31C0                <1>     xor eax, eax
  1491                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1492 00003C07 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1493 00003C0B 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1494 00003C0F 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1495 00003C12 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1496 00003C15 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1497 00003C18 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1498 00003C1B 57                  <1>     push rdi    ;Save SFT pointer
  1499 00003C1C 488D3D(4EC60300)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1500 00003C23 B920000000          <1>     mov ecx, fatDirEntry_size
  1501 00003C28 F3A4                <1>     rep movsb
  1502 00003C2A E865C9FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1503 00003C2F 5F                  <1>     pop rdi
  1504                              <1> .createCommon:  ;rdi must point to the current SFT 
  1505                              <1>     ;Now populate the remaining SFT fields 
  1506 00003C30 488D35(4EC60300)    <1>     lea rsi, curDirCopy
  1507 00003C37 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1508 00003C3A 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1509 00003C3D 488B05(36C70300)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1510 00003C44 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1511 00003C48 0FB705(3EC70300)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1512 00003C4F C1E805              <1>     shr eax, 5   ;Divide by 32 to get directory entry number
  1513 00003C52 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1514 00003C55 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1515 00003C58 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1516 00003C5B 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1517 00003C5F 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1518 00003C63 C1E210              <1>     shl edx, 10h
  1519 00003C66 09D0                <1>     or eax, edx
  1520 00003C68 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1521                              <1> 
  1522 00003C6B 31C0                <1>     xor eax, eax
  1523                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1524 00003C6D 8A05(F9C60300)      <1>     mov al, byte [workingDrv]
  1525 00003C73 0C40                <1>     or al, blokFileNoFlush  ;Dont flush until it is accessed
  1526 00003C75 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1527 00003C79 488B05(FAC60300)    <1>     mov rax, qword [workingDPB]
  1528 00003C80 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1529                              <1>     ;Last thing, copy the filename over
  1530                              <1>     ;Now save the name
  1531                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1532 00003C84 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1533 00003C88 488D35(4EC60300)    <1>     lea rsi, curDirCopy
  1534 00003C8F 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1535 00003C91 66A5                <1>     movsw
  1536 00003C93 A4                  <1>     movsb
  1537                              <1>     ;SFT filled
  1538 00003C94 E905010000          <1>     jmp .exit
  1539                              <1> .createFile:
  1540                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1541                              <1>     ;rsi points to current sda entry
  1542 00003C99 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
  1543                              <1>     ;Clear out the dir entry
  1544 00003CA0 57                  <1>     push rdi
  1545 00003CA1 B904000000          <1>     mov ecx, 4
  1546 00003CA6 31C0                <1>     xor eax, eax
  1547 00003CA8 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1548 00003CAB 5F                  <1>     pop rdi
  1549                              <1>     ;Copy the FCB name over    
  1550 00003CAC 56                  <1>     push rsi
  1551 00003CAD 57                  <1>     push rdi
  1552 00003CAE B90B000000          <1>     mov ecx, 11
  1553 00003CB3 488D35(C9C60300)    <1>     lea rsi, fcbName
  1554 00003CBA F3A4                <1>     rep movsb   ;Move over the FCB name
  1555 00003CBC 5F                  <1>     pop rdi
  1556 00003CBD 5E                  <1>     pop rsi
  1557                              <1> 
  1558 00003CBE 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1559                              <1>     ;al has file attributes.
  1560 00003CC2 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1561 00003CC4 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1562 00003CC7 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1563 00003CCA 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1564 00003CCD 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1565 00003CD0 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1566                              <1> .searchForDirSpace:
  1567 00003CD6 8905(74C70300)      <1>     mov dword [dirClustA], eax
  1568 00003CDC 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1569 00003CDE 668905(78C70300)    <1>     mov word [dirSect], ax
  1570 00003CE5 8905(7AC70300)      <1>     mov dword [dirEntry], eax
  1571 00003CEB 57                  <1>     push rdi
  1572 00003CEC E80EDEFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1573 00003CF1 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1574 00003CF2 7328                <1>     jnc .dirEntryFnd
  1575 00003CF4 813D(70C70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1575 00003CFC 0000                <1>
  1576 00003CFE 0F84A3000000        <1>     je .bad ;Set CF and exit
  1577 00003D04 E840DFFFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1578 00003D09 0F828F000000        <1>     jc .exit
  1579 00003D0F 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1580 00003D14 0F848D000000        <1>     je .bad
  1581                              <1>     ;Else eax = Newly allocated cluster
  1582 00003D1A EBBA                <1>     jmp short .searchForDirSpace
  1583                              <1> .dirEntryFnd:
  1584 00003D1C 4887FE              <1>     xchg rdi, rsi
  1585 00003D1F B904000000          <1>     mov ecx, 4
  1586 00003D24 F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1587 00003D27 E868C8FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1588 00003D2C 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1589 00003D33 E9F8FEFFFF          <1>     jmp .createCommon
  1590                              <1> .open:
  1591                              <1> ;curdircopy has a copy of the disk file directory
  1592                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1593 00003D38 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1594 00003D3F 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1595                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  1596 00003D46 E8C7DDFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  1597 00003D4B E9E0FEFFFF          <1>     jmp .createCommon
  1598                              <1> .openProc:
  1599                              <1>     ;Here if Opening a file.
  1600 00003D50 F605(59C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
  1601 00003D57 74DF                <1>     jz .open
  1602                              <1> .charDev:
  1603 00003D59 488B05(4EC60300)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  1604 00003D60 E8CA2B0000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  1605 00003D65 7307                <1>     jnc .notBadCharDevName
  1606 00003D67 B805000000          <1>     mov eax, errAccDen
  1607 00003D6C EB30                <1>     jmp short .exit ;CF already set
  1608                              <1> .notBadCharDevName:
  1609 00003D6E 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
  1610 00003D75 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  1611 00003D79 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  1612 00003D7D 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1613 00003D80 80CBC0              <1>     or bl, devCharDev | charDevNoEOF ;Set charDev & noEOF on read
  1614 00003D83 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1615 00003D87 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1616 00003D8E 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1617 00003D92 B820202020          <1>     mov eax, "    "
  1618 00003D97 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1619 00003D9B 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1620                              <1> .exit:
  1621 00003D9E E8080A0000          <1>     call writeThroughBuffersForHandle
  1622 00003DA3 7207                <1>     jc .bad2
  1623 00003DA5 5D                  <1>     pop rbp
  1624                              <1>     return
    13                              <2> %%_ret:
    14 00003DA6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1625                              <1> .bad:   ;Set Access Denied
  1626 00003DA7 B805000000          <1>     mov eax, errAccDen
  1627                              <1> .bad2:  ;Error propagating error code
  1628 00003DAC E82A0A0000          <1>     call cancelWriteThroughBuffersForHandle
  1629 00003DB1 F9                  <1>     stc
  1630 00003DB2 5D                  <1>     pop rbp
  1631                              <1>     return
    13                              <2> %%_ret:
    14 00003DB3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1632                              <1> 
  1633                              <1> closeMain: ;Int 4Fh AX=1201h
  1634                              <1> ;Gets the directory entry for a file
  1635                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1636                              <1> ;If CF=CY on return: Error, return error with al = error code
  1637                              <1> ;Preserve all regs except eax and rdi
  1638                              <1> ; If CF=NC on return: eax = Unknown
  1639                              <1> ;                     rdi = current SFT ptr
  1640 00003DB4 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
  1641 00003DBB 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
  1642 00003DC1 7408                <1>     jz .physical
  1643                              <1>     ;Here we beep out the request to the network redirector (Int 4Fh AX=1106h)
  1644 00003DC3 B806110000          <1>     mov eax, 1106h  ;Make request
  1645 00003DC8 CD4F                <1>     int 4Fh ;Beep!
  1646                              <1>     return  ;Returns with CF set or clear as appropriate
    13                              <2> %%_ret:
    14 00003DCA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1647                              <1> .physical:  
  1648                              <1> ; We make a request to the dev dir to close the device
  1649                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1650 00003DCB E8022D0000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1651 00003DD0 53                  <1>     push rbx
  1652 00003DD1 56                  <1>     push rsi
  1653 00003DD2 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
  1654 00003DD6 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1655 00003DDC 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
  1656                              <1>     ;rsi has DPB pointer here
  1657                              <1>     ;rdi has the SFT pointer
  1658 00003DDE 55                  <1>     push rbp
  1659 00003DDF 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
  1660 00003DE2 E819280000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
  1661 00003DE7 E8A0DDFFFF          <1>     call updateDirectoryEntryForFile
  1662 00003DEC 5D                  <1>     pop rbp
  1663                              <1>     ;If CF is set, Fail was requested and ax has an error code
  1664 00003DED 7234                <1>     jc .exit
  1665 00003DEF E884C9FFFF          <1>     call flushFile
  1666 00003DF4 722D                <1>     jc .exit    ;If something went wrong, exit
  1667 00003DF6 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
  1668 00003DFA 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
  1669                              <1> .charClose:
  1670                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
  1671                              <1>     ;We now decrement handle count in SFT structure
  1672 00003DFE E899090000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
  1673 00003E03 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
  1674 00003E06 7503                <1>     jnz .driverClose
  1675 00003E08 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
  1676                              <1> .driverClose:
  1677 00003E0B 50                  <1>     push rax
  1678 00003E0C 51                  <1>     push rcx
  1679 00003E0D E8EB330000          <1>     call closeShareCallWrapper  ;The SFT count has been decremented
  1680 00003E12 59                  <1>     pop rcx
  1681 00003E13 58                  <1>     pop rax
  1682 00003E14 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
  1683                              <1>     ;and if the device is a disk device, cl will have the unit number
  1684 00003E15 9C                  <1>     pushfq
  1685 00003E16 E8FEDFFFFF          <1>     call closeSFT   ;Called with rdi -> Current SFT
  1686 00003E1B 9D                  <1>     popfq
  1687 00003E1C E88A090000          <1>     call writeThroughBuffersForHandle
  1688 00003E21 7306                <1>     jnc short .exitOk
  1689                              <1> .exit:
  1690 00003E23 E8B3090000          <1>     call cancelWriteThroughBuffersForHandle
  1691 00003E28 F9                  <1>     stc
  1692                              <1> .exitOk:
  1693 00003E29 5E                  <1>     pop rsi
  1694 00003E2A 5B                  <1>     pop rbx
  1695 00003E2B E8AC2C0000          <1>     call dosCrit1Exit
  1696                              <1>     return
    13                              <2> %%_ret:
    14 00003E30 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1697                              <1> 
  1698                              <1> readBytes:
  1699                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1700                              <1> ;Input: ecx = Number of bytes to read
  1701                              <1> ;Output: ecx = Number of bytes read
  1702                              <1> ;Number of bytes read 
  1703                              <1> ;If CF=CY, return with error code in ax
  1704 00003E31 E85F070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1705 00003E36 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1706 00003E3A 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1707 00003E3C 3C01                <1>     cmp al, WriteAccess
  1708 00003E3E 7509                <1>     jne .readable
  1709 00003E40 B805000000          <1>     mov eax, errAccDen
  1710 00003E45 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1711 00003E47 F9                  <1>     stc
  1712                              <1>     return
    13                              <2> %%_ret:
    14 00003E48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1713                              <1> .readable:
  1714 00003E49 E889070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1715 00003E4E 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1716 00003E51 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1717 00003E57 740A                <1>     jz .notRedir
  1718 00003E59 B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1719 00003E5E CD4F                <1>     int 4Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1720                              <1>     return 
    13                              <2> %%_ret:
    14 00003E60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1721                              <1> .exitOk:
  1722 00003E61 F8                  <1>     clc
  1723                              <1>     return 
    13                              <2> %%_ret:
    14 00003E62 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1724                              <1> .notRedir:
  1725 00003E63 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1726 00003E69 7510                <1>     jnz readCharDev
  1727 00003E6B E8622C0000          <1>     call dosCrit1Enter
  1728 00003E70 E89C010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1729 00003E75 E8622C0000          <1>     call dosCrit1Exit
  1730                              <1>     return 
    13                              <2> %%_ret:
    14 00003E7A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1731                              <1> readCharDev:
  1732                              <1> ;rdi points to sft for char dev to read
  1733                              <1> ;ecx has the number of bytes to transfer
  1734                              <1> ;Vars have been set up and DTA has the transfer address
  1735                              <1> ;Returns in ecx, the actual bytes transferred
  1736                              <1> ;If CF=CY, return with error code in ax
  1737 00003E7B C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1738 00003E82 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1739 00003E86 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1740 00003E8D F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
  1741 00003E90 0F84CE020000        <1>     jz readExitOk    ;If it does, jump to exit as if EOF has been hit
  1742 00003E96 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
  1743 00003E99 7407                <1>     jz .notNul
  1744                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
  1745                              <1>     ;NUL never transfers bytes 
  1746 00003E9B 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1747 00003E9D E9C2020000          <1>     jmp readExitOk    ;Goto exit
  1748                              <1> .notNul:
  1749 00003EA2 F6C320              <1>     test bl, charDevBinary
  1750 00003EA5 0F857F000000        <1>     jnz .binary
  1751                              <1>     ;Here if the device is in ASCII mode
  1752 00003EAB F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
  1753 00003EAE 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1754                              <1> .consoleInput:
  1755                              <1>     ;Console input here
  1756 00003EB4 E852E4FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1757                              <1>     ;Get current offset into buffer (if one exists)
  1758 00003EB9 488B35(31C00300)    <1>     mov rsi, qword [vConHdlOff]
  1759 00003EC0 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1760 00003EC3 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1761 00003EC5 803D(43C30300)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1762 00003ECC 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1763                              <1>     ;Else, reset the buffer
  1764 00003ECE 66C705(43C30300)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1764 00003ED6 FF                  <1>
  1765                              <1> .oldBuf:
  1766                              <1> ;Preserve the dta and number of chars to tfr
  1767 00003ED7 51                  <1>     push rcx
  1768 00003ED8 57                  <1>     push rdi
  1769 00003ED9 488D15(43C30300)    <1>     lea rdx, vConInBuf
  1770 00003EE0 E846E4FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1771 00003EE5 5F                  <1>     pop rdi
  1772 00003EE6 59                  <1>     pop rcx
  1773 00003EE7 488D35(45C30300)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1774 00003EEE 803E1A              <1>     cmp byte [rsi], EOF
  1775 00003EF1 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1776 00003EF3 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1777 00003EF6 B00A                <1>     mov al, LF
  1778 00003EF8 E8A9DFFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1779 00003EFD 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1780 00003EFF EB18                <1>     jmp short .exit
  1781                              <1> .tfrBuf:
  1782 00003F01 AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1783 00003F02 AA                  <1>     stosb
  1784 00003F03 3C0D                <1>     cmp al, CR 
  1785 00003F05 7503                <1>     jne .noCRLF
  1786 00003F07 C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1787                              <1> .noCRLF:
  1788 00003F0A 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1789 00003F0C E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1790 00003F0E 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1791                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1792 00003F10 E891DFFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1793 00003F15 31F6                <1>     xor esi, esi
  1794 00003F17 0C01                <1>     or al, 1    ;Set ZF = NZ
  1795                              <1> .exit:
  1796 00003F19 E805E4FFFF          <1>     call vConRetDriver
  1797 00003F1E 488935(31C00300)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1798 00003F25 E93A020000          <1>     jmp readExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
  1799                              <1> 
  1800                              <1> .binary:
  1801                              <1>     ;Setup registers for transfer
  1802 00003F2A 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1803 00003F2D 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1804                              <1>     ;ecx has the number of bytes to transfer directly
  1805 00003F30 E8E9250000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1806 00003F35 488B35(FAC60300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1807 00003F3C E812230000          <1>     call goDriver   ;Make the request
  1808 00003F41 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1809 00003F44 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1810 00003F4B F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1811 00003F51 7422                <1>     jz .binNoError
  1812                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
  1813 00003F53 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1814 00003F55 E8911D0000          <1>     call charDevErr   ;ah = has part of the error 
  1815                              <1>     ;al now has the response
  1816 00003F5A 3C00                <1>     cmp al, critIgnore
  1817 00003F5C 7417                <1>     je .binNoError ;Simply proceed as normal
  1818 00003F5E 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1819 00003F61 3C03                <1>     cmp al, critFail
  1820 00003F63 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1821                              <1>     ;Fallthrough here for fail!
  1822                              <1> .failExit:
  1823 00003F65 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1824 00003F6C 31C9                <1>     xor ecx, ecx
  1825 00003F6E B805000000          <1>     mov eax, errAccDen
  1826 00003F73 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1827                              <1>     return
    13                              <2> %%_ret:
    14 00003F74 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1828                              <1> .binNoError:
  1829                              <1>     ;Get number of bytes transferred into 
  1830 00003F75 8B05(CBC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1831 00003F7B F7D8                <1>     neg eax ;make it into -eax
  1832 00003F7D 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1833                              <1>     ;ecx now has bytes left to transfer
  1834 00003F81 50                  <1>     push rax    ;Save value on stack
  1835 00003F82 31C0                <1>     xor eax, eax ;Set ZF
  1836 00003F84 FFC0                <1>     inc eax ;Clear ZF
  1837 00003F86 58                  <1>     pop rax ;Get back the original value
  1838 00003F87 E9D8010000          <1>     jmp readExitOk    ;GoExit with ecx=Bytes left to read
  1839                              <1> .generalASCII:
  1840                              <1>     ;ecx has bytes to transfer here
  1841                              <1>     ;Setup registers for transfer
  1842 00003F8C 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1843 00003F8F 51                  <1>     push rcx
  1844 00003F90 B901000000          <1>     mov ecx, 1  ;Get one char
  1845 00003F95 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1846 00003F98 E881250000          <1>     call primReqReadSetup   ;Setup request
  1847 00003F9D 59                  <1>     pop rcx
  1848                              <1>     ;rbx now has request header ptr
  1849 00003F9E 488B35(FAC60300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1850                              <1> .asciiReadChar:
  1851 00003FA5 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1852 00003FA8 E8E2E2FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1853 00003FAD E8A1220000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1854 00003FB2 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1855 00003FB9 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1856 00003FBF 741E                <1>     jz .asciiNoError
  1857 00003FC1 E8251D0000          <1>     call charDevErr    ;Call Int 44h
  1858                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1859 00003FC6 C705(CBC40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1859 00003FCE 0000                <1>
  1860 00003FD0 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1861 00003FD3 3C03                <1>     cmp al, critFail
  1862 00003FD5 748E                <1>     je .failExit
  1863 00003FD7 3C01                <1>     cmp al, critRetry
  1864 00003FD9 74CA                <1>     je .asciiReadChar
  1865                              <1>     ;Ignore here, pretend NULL CHAR was read
  1866 00003FDB 30C0                <1>     xor al, al
  1867 00003FDD EB15                <1>     jmp short .asciiIgnoreEP
  1868                              <1> .asciiNoError:
  1869                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1870                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1871                              <1> ;Preserve RBX, RSI
  1872                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1873 00003FDF 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1874 00003FE2 813D(CBC40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1874 00003FEA 0000                <1>
  1875 00003FEC 0F8572010000        <1>     jne readExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1876 00003FF2 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1877                              <1> .asciiIgnoreEP:
  1878 00003FF4 48FF05(C3C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1879 00003FFB 48FFC7              <1>     inc rdi ;Also advance register pointer
  1880 00003FFE 3C1A                <1>     cmp al, EOF ;Was this char EOF?
  1881 00004000 0F845E010000        <1>     je readExitOk
  1882 00004006 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1883 00004008 E09B                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1884                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1885 0000400A FEC0                <1>     inc al  ;make ZF=NZ
  1886 0000400C E953010000          <1>     jmp readExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1887                              <1> 
  1888                              <1> readDiskFile:
  1889                              <1> ;rdi = Current SFT
  1890                              <1> ;rbp = WorkingDPB
  1891                              <1> ;ecx = Bytes to transfer
  1892 00004011 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  1893 00004018 C605(F0C60300)00    <1>     mov byte [rwFlag], 0    ;Read operation
  1894                              <1>     ;We have the following vars setup:
  1895                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  1896                              <1>     ;currClustF
  1897                              <1>     ;Now convert currSectC to disk sector by using currClustF
  1898                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  1899 0000401F 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1900 00004022 85D2                <1>     test edx, edx
  1901 00004024 0F843A010000        <1>     jz readExitOk  ;Return with zero bytes transferred
  1902 0000402A 8B15(40C70300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  1903 00004030 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  1904 00004033 8905(44C70300)      <1>     mov dword [currClustD], eax
  1905 00004039 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  1906 0000403B 0F8423010000        <1>     jz readExitOk
  1907 00004041 3DFFFFFFFF          <1>     cmp eax, -1 ;If left in an indeterminate state somehow, exit no bytes
  1908 00004046 0F8418010000        <1>     jz readExitOk   
  1909 0000404C 8B0D(68C70300)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  1910                              <1>     ;Check if we have opened a volume label (should never happen)
  1911 00004052 66F747020800        <1>     test word [rdi + sft.wOpenMode], volumeLabel    ;If we try read from vollbl
  1912 00004058 7407                <1>     jz .shareCheck
  1913 0000405A B805000000          <1>     mov eax, errAccDen
  1914 0000405F F9                  <1>     stc
  1915                              <1>     return
    13                              <2> %%_ret:
    14 00004060 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1916                              <1> .shareCheck:
  1917                              <1> ;Entered with rdi -> SFT and ecx=number of bytes to read (to check if possible)
  1918 00004061 E89E310000          <1>     call retryShareIODelay
  1919 00004066 7308                <1>     jnc .shareOk
  1920 00004068 E898320000          <1>     call shareCheckReadLockViolation
  1921 0000406D 73F2                <1>     jnc .shareCheck ;IF the user selected retry, lets try again
  1922                              <1>     return  ;Otherwise, return with the share error code in eax and CF=CY
    13                              <2> %%_ret:
    14 0000406F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1923                              <1> .shareOk:
  1924 00004070 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  1925 00004072 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  1926 00004074 7426                <1>     jz .skipWalk
  1927                              <1> .goToCurrentCluster:
  1928 00004076 E8C1C9FFFF          <1>     call readFAT    ;Get in eax the next cluster
  1929 0000407B 0F82D4000000        <1>     jc .badExit   ;This can only return Fail
  1930 00004081 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  1931 00004086 0F84D8000000        <1>     je readExitOk ;Exit with no bytes transferred
  1932 0000408C 8905(44C70300)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  1933 00004092 FFCA                <1>     dec edx ;Decrement counter
  1934 00004094 75E0                <1>     jnz .goToCurrentCluster
  1935                              <1> ;Now we fall out with ebx = Current cluster
  1936 00004096 8B05(44C70300)      <1>     mov eax, dword [currClustD]    ;Get the current cluster in eax
  1937                              <1>     ;mov eax, ebx
  1938                              <1> .skipWalk:
  1939 0000409C E899C7FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  1940                              <1>     ;Now we add the offset to this
  1941 000040A1 0FB61D(4CC70300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  1942 000040A8 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  1943 000040AB 488905(4DC70300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  1944                              <1> ;Main
  1945                              <1> .mainRead:
  1946 000040B2 F605(27C40300)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  1947 000040B9 7407                <1>     jz .mainReadNoBreak
  1948 000040BB 50                  <1>     push rax
  1949 000040BC E8CEE1FFFF          <1>     call checkBreak
  1950 000040C1 58                  <1>     pop rax
  1951                              <1> .mainReadNoBreak:
  1952 000040C2 E88DC6FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuff var for sector in rax
  1953 000040C7 0F8288000000        <1>     jc .badExit
  1954 000040CD 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  1955 000040D1 0FB71D(55C70300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  1956 000040D8 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  1957                              <1>     ;Now we read the smallest of the following from the sector buffer:
  1958                              <1>     ; 1) Sector size, 2) Bytes left in File, 
  1959                              <1>     ; 3) Bytes left to read from Request, 4) Bytes left in sector
  1960                              <1> 
  1961 000040DB 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  1962 000040DE 2B0D(57C70300)      <1>     sub ecx, dword [currByteF]  ;Get bytes left to read in file in ecx
  1963 000040E4 8B1D(6CC70300)      <1>     mov ebx, dword [tfrCntr]
  1964 000040EA 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  1965 000040EC 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  1966 000040EF 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  1967 000040F3 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  1968 000040F5 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  1969                              <1>     
  1970 000040F8 57                  <1>     push rdi
  1971 000040F9 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA]
  1972 00004100 51                  <1>     push rcx
  1973 00004101 F3A4                <1>     rep movsb
  1974 00004103 59                  <1>     pop rcx
  1975 00004104 010D(57C70300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  1976 0000410A 290D(6CC70300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  1977 00004110 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  1978 00004117 8B05(57C70300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  1979 0000411D 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  1980 00004121 31D2                <1>     xor edx, edx    ;Zero rdx
  1981 00004123 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  1982 00004125 668915(55C70300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  1983 0000412C 5F                  <1>     pop rdi
  1984 0000412D 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  1985 00004133 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  1986 00004135 742D                <1>     jz readExitOk ;Exit if so!
  1987 00004137 E861C8FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  1988 0000413C 7217                <1>     jc .badExit
  1989                              <1>     ;If ZF=ZE then currClustF has last cluster
  1990 0000413E 7424                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  1991                              <1>     ;Else repeat
  1992                              <1>     ;currSectD has been updated, we now set currByteS = 0
  1993 00004140 66C705(55C70300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  1993 00004148 00                  <1>
  1994 00004149 488B05(4DC70300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  1995 00004150 E95DFFFFFF          <1>     jmp .mainRead
  1996                              <1> .badExit:
  1997                              <1>     ;When a disk error occurs within the bit where vars have changed,
  1998                              <1>     ; we need to update the SFT before returning
  1999 00004155 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  2000 0000415B 30C0                <1>     xor al, al  ;Set ZF flag
  2001 0000415D E802000000          <1>     call readExitOk   ;We call this
  2002 00004162 F9                  <1>     stc ;All calls which end up here return Fail!
  2003 00004163 C3                  <1>     ret
  2004                              <1> 
  2005                              <1> readExitOk:
  2006                              <1> ;Input: ecx = Number of bytes left to transfer!
  2007                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
  2008 00004164 890D(6CC70300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  2009                              <1>     ;I argue as this is a simply read-only exit vector, this is unnecessary
  2010                              <1>     ;jnz .skipbitClear
  2011                              <1>     ;call getCurrentSFT  ;Get currentSFT in rdi
  2012                              <1>     ;The disk transfer must've flushed by now. 
  2013                              <1>     ;and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2014                              <1> .skipbitClear:  ;Or skip that entirely
  2015 0000416A E82E040000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  2016                              <1>     return 
    13                              <2> %%_ret:
    14 0000416F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2017                              <1> 
  2018                              <1> writeBytes:
  2019                              <1> ;Writes the bytes from the user buffer
  2020                              <1> ;Input: ecx = Bytes to xfr
  2021                              <1> ;Returns number of bytes written in ecx
  2022 00004170 E820040000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  2023 00004175 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  2024 00004179 240F                <1>     and al, 0Fh ;Eliminate except access mode
  2025 0000417B 3C00                <1>     cmp al, ReadAccess
  2026 0000417D 7509                <1>     jne .writeable
  2027                              <1> .noWrite:
  2028 0000417F B805000000          <1>     mov eax, errAccDen
  2029 00004184 31C9                <1>     xor ecx, ecx
  2030 00004186 F9                  <1>     stc
  2031 00004187 C3                  <1>     ret
  2032                              <1> .writeable:
  2033 00004188 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  2034 0000418E 7406                <1>     jz .skipAttribCheck ;FCB files don't check file attributes
  2035 00004190 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  2036 00004194 74E9                <1>     je .noWrite ;If the file is read only, RIP
  2037                              <1> .skipAttribCheck:
  2038 00004196 E83C040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  2039 0000419B 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  2040 000041A1 7408                <1>     jz .notRedir
  2041 000041A3 B809110000          <1>     mov eax, 1109h  ;Write to redir
  2042 000041A8 CD4F                <1>     int 4Fh
  2043                              <1>     return
    13                              <2> %%_ret:
    14 000041AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2044                              <1> .notRedir:
  2045 000041AB 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2046 000041B1 7510                <1>     jnz writeCharDev
  2047 000041B3 E81A290000          <1>     call dosCrit1Enter
  2048 000041B8 E84C010000          <1>     call writeDiskFile
  2049 000041BD E81A290000          <1>     call dosCrit1Exit
  2050                              <1>     return
    13                              <2> %%_ret:
    14 000041C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2051                              <1> writeCharDev:
  2052 000041C3 C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr
  2053                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  2054 000041CA 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  2055 000041D0 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  2056                              <1>     ;If ecx = 0, we exit
  2057 000041D4 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  2058 000041D6 85C9                <1>     test ecx, ecx
  2059 000041D8 0F849F030000        <1>     jz writeExitChar
  2060 000041DE 488B1D(0CC40300)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  2061 000041E5 4889DF              <1>     mov rdi, rbx
  2062 000041E8 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  2063 000041EA A820                <1>     test al, charDevBinary
  2064 000041EC 744A                <1>     jz .asciiDev
  2065                              <1> ;Write binary transfer here
  2066                              <1> .binaryLp:
  2067 000041EE 31C0                <1>     xor eax, eax
  2068 000041F0 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2069 000041F3 E81B230000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2070 000041F8 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
  2071 000041FF E84B200000          <1>     call goDriverChar
  2072 00004204 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  2073 00004207 B487                <1>     mov ah, critCharDev | critData | critWrite
  2074 00004209 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  2075 00004210 F7C700800000        <1>     test edi, drvErrStatus
  2076 00004216 7415                <1>     jz .binXfrOk
  2077 00004218 E8CE1A0000          <1>     call charDevErr ;Invoke Int 44h
  2078 0000421D 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  2079 00004220 3C00                <1>     cmp al, critIgnore
  2080 00004222 7409                <1>     je .binXfrOk
  2081 00004224 3C01                <1>     cmp al, critRetry
  2082 00004226 74C6                <1>     je .binaryLp
  2083 00004228 E9D5000000          <1>     jmp .exitFail
  2084                              <1> .binXfrOk:
  2085 0000422D 8B05(CBC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  2086 00004233 E945030000          <1>     jmp writeExitChar   ;Exit oki with # bytes xfrd in eax
  2087                              <1> .asciiDev:
  2088 00004238 A802                <1>     test al, charDevConOut
  2089 0000423A 0F859E000000        <1>     jnz .conDev
  2090 00004240 A804                <1>     test al, charDevNulDev
  2091 00004242 0F858F000000        <1>     jnz .nulDev
  2092                              <1>     ;Here we transfer for a generic character device in ascii mode
  2093 00004248 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  2094 0000424A 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  2095 0000424D 0F842A030000        <1>     je writeExitChar
  2096 00004253 51                  <1>     push rcx
  2097 00004254 B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  2098 00004259 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2099 0000425C E8B2220000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2100 00004261 59                  <1>     pop rcx
  2101 00004262 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
  2102 00004269 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  2103                              <1> .asciiLp:
  2104 0000426D E81DE0FFFF          <1>     call checkBreak
  2105 00004272 E8DC1F0000          <1>     call goDriver
  2106 00004277 57                  <1>     push rdi
  2107 00004278 B487                <1>     mov ah, critCharDev | critData | critWrite
  2108 0000427A 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  2109 00004281 F7C700800000        <1>     test edi, drvErrStatus
  2110 00004287 741D                <1>     jz .asciiNoError
  2111 00004289 E85D1A0000          <1>     call charDevErr ;Invoke Int 44h
  2112 0000428E 5F                  <1>     pop rdi
  2113 0000428F C705(CBC40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  2113 00004297 0000                <1>
  2114 00004299 3C01                <1>     cmp al, critRetry
  2115 0000429B 74D0                <1>     je .asciiLp
  2116 0000429D 3C00                <1>     cmp al, critIgnore
  2117 0000429F 7412                <1>     je .ignoreEp
  2118 000042A1 E95C000000          <1>     jmp .exitFail
  2119                              <1> .asciiNoError:
  2120 000042A6 5F                  <1>     pop rdi
  2121 000042A7 813D(CBC40300)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  2121 000042AF 0000                <1>
  2122 000042B1 741D                <1>     je .bytesXfrdOk
  2123                              <1> .ignoreEp:
  2124 000042B3 FFC2                <1>     inc edx ;One more char has been xfrd
  2125 000042B5 FF05(C3C40300)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  2126 000042BB 48FFC7              <1>     inc rdi ;And our copy... 
  2127 000042BE 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  2128 000042C1 740D                <1>     je .bytesXfrdOk
  2129 000042C3 66C705(B8C40300)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  2129 000042CB 00                  <1>
  2130 000042CC FFC9                <1>     dec ecx
  2131 000042CE 759D                <1>     jnz .asciiLp
  2132                              <1> .bytesXfrdOk:
  2133 000042D0 89D0                <1>     mov eax, edx
  2134 000042D2 E9A6020000          <1>     jmp writeExitChar
  2135                              <1> .nulDev:
  2136 000042D7 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  2137 000042D9 E99F020000          <1>     jmp writeExitChar
  2138                              <1> .conDev:
  2139 000042DE E828E0FFFF          <1>     call vConSwapDriver
  2140 000042E3 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  2141 000042E6 51                  <1>     push rcx
  2142                              <1> .conDevLp:
  2143 000042E7 AC                  <1>     lodsb
  2144 000042E8 3C1A                <1>     cmp al, EOF
  2145 000042EA 7409                <1>     je .conDevExit
  2146 000042EC E8B5DBFFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  2147 000042F1 FFC9                <1>     dec ecx
  2148 000042F3 75F2                <1>     jnz .conDevLp
  2149                              <1> .conDevExit:
  2150 000042F5 58                  <1>     pop rax ;Get initial ecx back into eax
  2151 000042F6 29C8                <1>     sub eax, ecx
  2152 000042F8 E826E0FFFF          <1>     call vConRetDriver
  2153 000042FD E97B020000          <1>     jmp writeExitChar   ;Input: eax = bytes xfrd
  2154                              <1> .exitFail:
  2155 00004302 B805000000          <1>     mov eax, errAccDen
  2156 00004307 F9                  <1>     stc
  2157                              <1>     return
    13                              <2> %%_ret:
    14 00004308 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2158                              <1> writeDiskFile:
  2159                              <1>     ;rdi has SFT ptr
  2160 00004309 8B0D(68C70300)      <1>     mov ecx, dword [tfrLen] ;Get the transfer length 
  2161 0000430F C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk 
  2162 00004316 C605(F0C60300)FF    <1>     mov byte [rwFlag], -1    ;Write operation
  2163 0000431D 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  2164 00004323 0F850B020000        <1>     jnz .badExit
  2165 00004329 85C9                <1>     test ecx, ecx
  2166 0000432B 7505                <1>     jnz .nonZeroWrite
  2167 0000432D B9FFFFFFFF          <1>     mov ecx, -1 ;If write cnt is 0 (i.e. truncating file), check for NO locks
  2168                              <1> .nonZeroWrite:
  2169                              <1>     ;Now do share check here
  2170 00004332 E8CD2E0000          <1>     call retryShareIODelay
  2171 00004337 7308                <1>     jnc .proceedWithWrite   ;No lock for rdi and ecx, all good!
  2172 00004339 E8BE2F0000          <1>     call shareCheckWriteLockViolation
  2173 0000433E 73F2                <1>     jnc .nonZeroWrite   ;If returned retry, retry the request
  2174                              <1>     return  ;Else return with CF=CY
    13                              <2> %%_ret:
    14 00004340 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2175                              <1> .proceedWithWrite:
  2176 00004341 31DB                <1>     xor ebx, ebx
  2177 00004343 891D(64C70300)      <1>     mov dword [bytesAppend], ebx    ;Used for file extends (not writes!)
  2178 00004349 881D(63C70300)      <1>     mov byte [fileGrowing], bl   ;Reset the file growth flag!
  2179 0000434F 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  2180                              <1>     ;If the start cluster is 0, we create a new cluster chain
  2181 00004352 85C0                <1>     test eax, eax
  2182 00004354 7520                <1>     jnz .notStart
  2183 00004356 E859C5FFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  2184 0000435B 0F82BA010000        <1>     jc .exitPrepHardErr
  2185 00004361 3DFFFFFFFF          <1>     cmp eax, -1
  2186 00004366 0F84DA010000        <1>     je writeExit
  2187                              <1>     ;Now eax has the first cluster of chain
  2188 0000436C 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  2189 0000436F C605(63C70300)FF    <1>     mov byte [fileGrowing], -1  ;Set to true as this only occurs for new files!
  2190                              <1> .notStart:
  2191                              <1> ;eax has the start cluster of the file
  2192                              <1> ;Now we go to CurntOff
  2193 00004376 8905(44C70300)      <1>     mov dword [currClustD], eax ;Store in var
  2194 0000437C 31DB                <1>     xor ebx, ebx
  2195 0000437E 8B15(40C70300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2196 00004384 85D2                <1>     test edx, edx
  2197 00004386 7458                <1>     jz .skipWalk
  2198                              <1> .goToCurrentCluster:
  2199 00004388 E8AFC6FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2200 0000438D 0F8288010000        <1>     jc .exitPrepHardErr   ;This can only return Fail
  2201 00004393 3DFFFFFFFF          <1>     cmp eax, -1 ;Is this cluster the last cluster?
  2202 00004398 7536                <1>     jne .stillInFile
  2203                              <1> .addCluster:
  2204                              <1>     ;Here we extend by one cluster
  2205 0000439A 8B05(44C70300)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2206 000043A0 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2207 000043A2 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2208 000043A7 E82EC5FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2209 000043AC 0F8269010000        <1>     jc .exitPrepHardErr
  2210 000043B2 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2211 000043B4 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
  2212 000043B8 010D(64C70300)      <1>     add dword [bytesAppend], ecx    ;Add a bytes per sector to filesize
  2213 000043BE C605(63C70300)FF    <1>     mov byte [fileGrowing], -1
  2214 000043C5 E872C6FFFF          <1>     call readFAT    ;Get in eax the new cluster
  2215 000043CA 0F824B010000        <1>     jc .exitPrepHardErr
  2216                              <1> .stillInFile:
  2217 000043D0 8905(44C70300)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2218 000043D6 FFCA                <1>     dec edx ;Decrement counter
  2219 000043D8 75AE                <1>     jnz .goToCurrentCluster
  2220                              <1> ;Now we fall out
  2221 000043DA 8B05(44C70300)      <1>     mov eax, dword [currClustD]
  2222                              <1> .skipWalk:
  2223 000043E0 E855C4FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2224                              <1>     ;Now we add the offset to this
  2225 000043E5 0FB61D(4CC70300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2226 000043EC 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2227 000043EF 488905(4DC70300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2228 000043F6 8B0D(68C70300)      <1>     mov ecx, dword [tfrLen]
  2229 000043FC 85C9                <1>     test ecx, ecx   ;If this is not zero, goto write
  2230 000043FE 751F                <1>     jnz .mainWrite  
  2231                              <1> ;Here we have a zero byte write, so either truncate or have an extend
  2232 00004400 F605(63C70300)FF    <1>     test byte [fileGrowing], -1
  2233 00004407 750B                <1>     jnz .extend
  2234                              <1> ;Here we truncate where needed
  2235 00004409 8B05(44C70300)      <1>     mov eax, dword [currClustD] ;We must free the chain from currClustD
  2236 0000440F E8F9C5FFFF          <1>     call truncateFAT    ;Truncate from the current cluster 
  2237                              <1> .extend:
  2238 00004414 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2239 00004417 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  2240 0000441A E91C010000          <1>     jmp .noByteExit ;Exit ok!
  2241                              <1> .mainWrite:
  2242 0000441F F605(27C40300)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  2243 00004426 7407                <1>     jz .mainWriteNoBreak
  2244 00004428 50                  <1>     push rax
  2245 00004429 E861DEFFFF          <1>     call checkBreak
  2246 0000442E 58                  <1>     pop rax
  2247                              <1> .mainWriteNoBreak:
  2248 0000442F E820C3FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuff var for sector in rax
  2249 00004434 0F82FA000000        <1>     jc .badExit
  2250 0000443A 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rdi
  2251 0000443E 0FB71D(55C70300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2252 00004445 4801DF              <1>     add rdi, rbx    ;Shift rdi by that amount into the sector
  2253                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2254                              <1>     ; 1) Sector size, 2) Bytes left to read from Request, 
  2255                              <1>     ; 3) Number of bytes left free in the sector
  2256 00004448 31C0                <1>     xor eax, eax
  2257 0000444A 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2258 0000444E 89D8                <1>     mov eax, ebx
  2259 00004450 662B05(55C70300)    <1>     sub ax, word [currByteS]   ;Get # of bytes in sector we are in
  2260 00004457 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]
  2261                              <1> 
  2262 0000445D 39D9                <1>     cmp ecx, ebx    ;If tfrCntr - wBytesPerSector < 0
  2263 0000445F 0F47CB              <1>     cmova ecx, ebx
  2264 00004462 39C1                <1>     cmp ecx, eax    ;If small - #bytesleft < 0 
  2265 00004464 0F47C8              <1>     cmova ecx, eax
  2266                              <1> 
  2267 00004467 56                  <1>     push rsi
  2268 00004468 488B35(0CC40300)    <1>     mov rsi, qword [currentDTA]
  2269 0000446F 51                  <1>     push rcx
  2270 00004470 F3A4                <1>     rep movsb
  2271 00004472 59                  <1>     pop rcx
  2272 00004473 E81CC1FFFF          <1>     call markBufferDirty   ;Preserves all CPU state 
  2273                              <1> 
  2274 00004478 010D(57C70300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2275 0000447E 290D(6CC70300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2276 00004484 488935(0CC40300)    <1>     mov qword [currentDTA], rsi ;rsi has been shifted by ecx on entry amount
  2277                              <1> 
  2278 0000448B 488B35(2EC70300)    <1>     mov rsi, qword [currBuff]    ;Get current disk buffer
  2279 00004492 488D7630            <1>     lea rsi, qword [rsi + bufferHdr.dataarea]   ;Shift the ptr to the first data byte
  2280 00004496 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] 
  2281 0000449A 4801DE              <1>     add rsi, rbx    ;Point rsi to the end of the disk buffer
  2282 0000449D 4839F7              <1>     cmp rdi, rsi    ;If current pos - end < 0, jump
  2283 000044A0 5E                  <1>     pop rsi
  2284 000044A1 7207                <1>     jb short .skipWritethrough
  2285 000044A3 E8A5C0FFFF          <1>     call writeThroughBuffer ;Write thru this disk buffer now it is full
  2286 000044A8 7271                <1>     jc .exitPrepHardErr
  2287                              <1> .skipWritethrough:
  2288 000044AA 8B05(68C70300)      <1>     mov eax, dword [tfrLen] ;Get total length
  2289 000044B0 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2290 000044B6 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2291 000044B8 0F8488000000        <1>     jz writeExit
  2292 000044BE E8DAC4FFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
  2293 000044C3 7256                <1>     jc .exitPrepHardErr
  2294 000044C5 3DFFFFFFFF          <1>     cmp eax, -1
  2295 000044CA 753A                <1>     jne .noExtend
  2296                              <1>     ;Here we need to extend by a cluster
  2297 000044CC 8B05(44C70300)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2298 000044D2 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2299 000044D4 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2300 000044D9 E8FCC3FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2301 000044DE 723B                <1>     jc .exitPrepHardErr
  2302 000044E0 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2303 000044E2 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2304 000044E6 011D(64C70300)      <1>     add dword [bytesAppend], ebx    ;Add a bytes per sector to filesize
  2305 000044EC C605(63C70300)FF    <1>     mov byte [fileGrowing], -1
  2306 000044F3 E8A5C4FFFF          <1>     call getNextSectorOfFile    ;Now we walk to chain to the new cluster
  2307 000044F8 7221                <1>     jc .exitPrepHardErr
  2308 000044FA 3DFFFFFFFF          <1>     cmp eax, -1
  2309 000044FF B805000000          <1>     mov eax, errAccDen
  2310 00004504 7415                <1>     je .exitPrepHardErr
  2311                              <1> .noExtend:
  2312 00004506 66C705(55C70300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2312 0000450E 00                  <1>
  2313 0000450F 488B05(4DC70300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2314 00004516 E904FFFFFF          <1>     jmp .mainWrite
  2315                              <1> .exitPrepHardErr:
  2316 0000451B 50                  <1>     push rax    ;Save error code
  2317 0000451C E825000000          <1>     call writeExit
  2318 00004521 58                  <1>     pop rax
  2319                              <1> .badExitHard:    ;AL has error code already
  2320 00004522 E804C0FFFF          <1>     call cancelWriteThroughBuffers
  2321 00004527 B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2322 0000452C FF15(24C10300)      <1>     call qword [updateDirShare]
  2323 00004532 F9                  <1>     stc
  2324                              <1>     return
    13                              <2> %%_ret:
    14 00004533 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2325                              <1> .badExit:
  2326                              <1> ;Might need to do some weird stuff later. Leave for now
  2327 00004534 B805000000          <1>     mov eax, errAccDen
  2328 00004539 EBE7                <1>     jmp short .badExitHard
  2329                              <1> 
  2330                              <1> .noByteExit:
  2331 0000453B B802000000          <1>     mov eax, 2  ;Update last accessed fields of SFT
  2332 00004540 FF15(24C10300)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default so keep xor after
  2333                              <1> writeExit:
  2334                              <1> ;Advances the bytes on the file pointer
  2335                              <1> ;Return: ecx = Number of bytes transferred
  2336 00004546 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  2337 0000454D E84B000000          <1>     call updateCurrentSFT
  2338 00004552 85C9                <1>     test ecx, ecx   ;If no bytes transferred, dont flush
  2339 00004554 7404                <1>     jz .noFlush
  2340 00004556 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2341                              <1> .noFlush:
  2342 0000455A 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2343 00004560 750E                <1>     jnz .exit
  2344 00004562 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]
  2345 00004565 39471B              <1>     cmp dword [rdi + sft.dCurntOff], eax
  2346 00004568 7606                <1>     jbe .exit   ;Don't change filesize unless offset is past the Filesize
  2347 0000456A 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2348 0000456D 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  2349                              <1> .exit:
  2350 00004570 B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2351 00004575 FF15(24C10300)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2352 0000457B F8                  <1>     clc
  2353                              <1>     return
    13                              <2> %%_ret:
    14 0000457C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2354                              <1> writeExitChar:
  2355                              <1> ;Input: eax = Number of chars transferred
  2356 0000457D 8B0D(68C70300)      <1>     mov ecx, dword [tfrLen]
  2357 00004583 29C1                <1>     sub ecx, eax    ;Get chars left to xfr
  2358 00004585 890D(6CC70300)      <1>     mov dword [tfrCntr], ecx
  2359 0000458B EBB9                <1>     jmp short writeExit
  2360                              <1> ;-----------------------------------:
  2361                              <1> ;        File Handle routines       :
  2362                              <1> ;-----------------------------------:
  2363                              <1> 
  2364                              <1> setCurrentSFT:
  2365                              <1> ;Set the pointer in rdi as current SFT 
  2366 0000458D 48893D(22C70300)    <1>     mov qword [currentSFT], rdi
  2367                              <1>     return 
    13                              <2> %%_ret:
    14 00004594 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2368                              <1> getCurrentSFT:
  2369                              <1> ;Get the current SFT pointer in rdi
  2370 00004595 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  2371                              <1>     return 
    13                              <2> %%_ret:
    14 0000459C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2372                              <1> updateCurrentSFT:
  2373                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2374                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2375 0000459D 57                  <1>     push rdi
  2376 0000459E 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  2377 000045A5 E8BF010000          <1>     call getBytesTransferred
  2378 000045AA 67E327              <1>     jecxz .exit ;Skip this if ecx = 0
  2379                              <1>     ;ecx has bytes transferred
  2380 000045AD 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2381 000045B3 751F                <1>     jnz .exit
  2382 000045B5 50                  <1>     push rax
  2383 000045B6 8B05(44C70300)      <1>     mov eax, dword [currClustD]
  2384 000045BC 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2385 000045BF 8B05(40C70300)      <1>     mov eax, dword [currClustF]
  2386 000045C5 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2387 000045C8 58                  <1>     pop rax
  2388 000045C9 51                  <1>     push rcx
  2389 000045CA 8B0D(57C70300)      <1>     mov ecx, dword [currByteF]
  2390 000045D0 894F1B              <1>     mov dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  2391 000045D3 59                  <1>     pop rcx
  2392                              <1> .exit:
  2393 000045D4 5F                  <1>     pop rdi
  2394 000045D5 F8                  <1>     clc
  2395                              <1>     return 
    13                              <2> %%_ret:
    14 000045D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2396                              <1> 
  2397                              <1> setupVarsForTransfer:
  2398                              <1> ;Computes the actual bytes to be transferred and 
  2399                              <1> ; sets up internal variables for the transfer. 
  2400                              <1> ;Works for both reading and writing
  2401                              <1> ;Input: ecx = User desired Bytes to transfer
  2402                              <1> ;       rdi = SFT pointer for the file
  2403                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2404                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2405                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2406                              <1> ;
  2407                              <1> ;Note: Does not account for a FULL disk. When writing,
  2408                              <1> ; if the disk will get full as a result of the write,
  2409                              <1> ; stop at the last byte before the transfer. If the 
  2410                              <1> ; file pointer is past the last free byte, write 0
  2411 000045D7 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2412 000045DB 488935(FAC60300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2413 000045E2 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2414 000045E5 8905(57C70300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2415 000045EB 890D(68C70300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2416 000045F1 890D(6CC70300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2417 000045F7 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2418 000045FD 7402                <1>     jz setupVarsForDiskTransfer
  2419 000045FF F8                  <1>     clc
  2420                              <1>     return
    13                              <2> %%_ret:
    14 00004600 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2421                              <1> setupVarsForDiskTransfer:
  2422                              <1> ;Extension of the above, but for Disk files only
  2423                              <1> ;Input: ecx = User desired Bytes to transfer
  2424                              <1> ;       rdi = SFT pointer for the file
  2425                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred, if it is possible
  2426                              <1> ;        CF=CY: Error exit
  2427 00004601 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2428 00004604 8905(57C70300)      <1>     mov dword [currByteF], eax
  2429 0000460A 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2430                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2431 0000460E 48892D(FAC60300)    <1>     mov qword [workingDPB], rbp
  2432 00004615 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2433 00004618 881D(F9C60300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2434 0000461E 8B05(57C70300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2435 00004624 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2436 00004628 31D2                <1>     xor edx, edx    ;Zero rdx
  2437 0000462A F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2438                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2439                              <1>     ;edx has the offset into that sector
  2440 0000462C 8905(48C70300)      <1>     mov dword [currSectF], eax
  2441 00004632 668915(55C70300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2442 00004639 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2443 0000463B 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2444 0000463E 8805(4CC70300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2445 00004644 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2446 00004646 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  2447 00004649 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2448 0000464B 8915(40C70300)      <1>     mov dword [currClustF], edx ;Save in var
  2449 00004651 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2450                              <1> .exit:
  2451 00004653 F8                  <1>     clc
  2452                              <1>     return 
    13                              <2> %%_ret:
    14 00004654 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2453                              <1> findFreeSFT:
  2454                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2455                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2456                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2457                              <1> ;        CF=CY => eax = errNhl, error exit
  2458 00004655 31DB                <1>     xor ebx, ebx
  2459                              <1> .mainLp:
  2460 00004657 53                  <1>     push rbx    ;Save the sft ndx
  2461 00004658 E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2462 0000465D 5B                  <1>     pop rbx
  2463 0000465E 7307                <1>     jnc .sftExists
  2464 00004660 B804000000          <1>     mov eax, errNhl
  2465 00004665 F9                  <1>     stc
  2466                              <1>     return
    13                              <2> %%_ret:
    14 00004666 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2467                              <1> .sftExists:
  2468 00004667 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2469 0000466C 7427                <1>     je .sftFound
  2470 0000466E 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2471 00004673 751C                <1>     jne .gotoNextNdx
  2472                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2473 00004675 53                  <1>     push rbx
  2474 00004676 488B1D(30C40300)    <1>     mov rbx, qword [serverPSP]
  2475 0000467D 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  2476 00004681 750B                <1>     jne .netGoToNextNdx
  2477 00004683 0FB71D(38C40300)    <1>     movzx ebx, word [machineNum]
  2478 0000468A 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  2479                              <1> .netGoToNextNdx:
  2480 0000468E 5B                  <1>     pop rbx
  2481 0000468F 7404                <1>     je .sftFound
  2482                              <1> .gotoNextNdx:
  2483 00004691 FFC3                <1>     inc ebx
  2484 00004693 EBC2                <1>     jmp short .mainLp
  2485                              <1> .sftFound:
  2486 00004695 53                  <1>     push rbx
  2487 00004696 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2488 0000469B 488B1D(30C40300)    <1>     mov rbx, qword [serverPSP]
  2489 000046A2 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  2490 000046A6 0FB71D(38C40300)    <1>     movzx ebx, word [machineNum]
  2491 000046AD 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  2492 000046B1 5B                  <1>     pop rbx
  2493 000046B2 F8                  <1>     clc
  2494                              <1>     return
    13                              <2> %%_ret:
    14 000046B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2495                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216h
  2496                              <1> ;Return a pointer to the SFT entry in rdi
  2497                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2498                              <1> ;Output: rdi = SFT pointer
  2499 000046B4 488B3D(49C00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2500                              <1> .walk:
  2501 000046BB 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2502 000046BF 7212                <1>     jb .thisTable
  2503 000046C1 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2504 000046C5 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2505 000046C8 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2506 000046CF 75EA                <1>     jne .walk
  2507 000046D1 F9                  <1>     stc
  2508                              <1>     return
    13                              <2> %%_ret:
    14 000046D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2509                              <1> .thisTable:
  2510 000046D3 50                  <1>     push rax
  2511 000046D4 52                  <1>     push rdx
  2512 000046D5 B84F000000          <1>     mov eax, sft_size
  2513 000046DA F7E3                <1>     mul ebx
  2514 000046DC 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2515 000046DF 5A                  <1>     pop rdx
  2516 000046E0 58                  <1>     pop rax
  2517 000046E1 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2518                              <1>     return
    13                              <2> %%_ret:
    14 000046E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2519                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
  2520                              <1> ;Return a zero extended value in rdi for the SFT entry
  2521                              <1> ;Input: bx = JFT handle (we zero extend)
  2522                              <1> ;Output: CF=NC => rdi = Points to first SFT ndx or -1 => free space
  2523                              <1> ;        CF=CY => al = Error code, Fail
  2524 000046E9 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  2525 000046EC 488B3D(14C40300)    <1>     mov rdi, qword [currentPSP]
  2526 000046F3 663B5F4E            <1>     cmp bx, word [rdi + psp.jftSize] ;jftSize is the size of the JFT array
  2527 000046F7 7204                <1>     jb .ok
  2528 000046F9 B006                <1>     mov al, errBadHdl
  2529 000046FB F9                  <1>     stc
  2530                              <1>     return
    13                              <2> %%_ret:
    14 000046FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2531                              <1> .ok:
  2532 000046FD 66817F4E1400        <1>     cmp word [rdi + psp.jftSize], dfltJFTsize   ;Are we in PSP JFT or external?
  2533 00004703 7412                <1>     je .pspJftOk    ;If dfltJFTsize, its a good PSP JFT.
  2534 00004705 720A                <1>     jb .pspJftBelow ;If < dfltJFTsize, in PSP and needs to be corrected
  2535 00004707 488B7F2A            <1>     mov rdi, qword [rdi + psp.externalJFTPtr]   ;Get the ptr to the external JFT
  2536 0000470B 488D3C1F            <1>     lea rdi, qword [rdi + rbx]  ;Get pointer into JFT
  2537 0000470F EB0B                <1>     jmp short .pspOkExit
  2538                              <1> .pspJftBelow:
  2539 00004711 66C7474E1400        <1>     mov word [rdi + psp.jftSize], dfltJFTsize  ;Reset to dfltJFTsize if needed!
  2540                              <1> .pspJftOk:
  2541 00004717 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  2542                              <1> .pspOkExit:
  2543 0000471C F8                  <1>     clc
  2544                              <1>     return
    13                              <2> %%_ret:
    14 0000471D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2545                              <1> findFreeJFTEntry:
  2546                              <1> ;Finds a free JFT entry in the currentPSP.
  2547                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  2548                              <1> ;        CF=CY => al=errNhl
  2549 0000471E 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  2550                              <1> .searchLp:
  2551 00004720 E8C4FFFFFF          <1>     call getJFTPtr
  2552 00004725 7209                <1>     jc .badExit
  2553 00004727 803FFF              <1>     cmp byte [rdi], -1
  2554                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000472A 74F1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2555 0000472C FFC3                <1>     inc ebx
  2556 0000472E EBF0                <1>     jmp short .searchLp
  2557                              <1> .badExit:
  2558 00004730 B004                <1>     mov al, errNhl
  2559 00004732 F9                  <1>     stc
  2560                              <1>     return
    13                              <2> %%_ret:
    14 00004733 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2561                              <1> getSFTPtr:
  2562                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  2563                              <1> ;Input: bx = JFT handle
  2564                              <1> ;Output: CF=NC: rdi = SFT pointer
  2565                              <1> ;        CF=CY: Error, ax=Error code
  2566 00004734 E815000000          <1>     call derefSFTPtr
  2567                              <1>     retc    ;Return if carry
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004739 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2568 0000473B 50                  <1>     push rax
  2569 0000473C 0FB705(38C40300)    <1>     movzx eax, word [machineNum]
  2570 00004743 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  2571 00004747 58                  <1>     pop rax
  2572                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004748 74E9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2573 0000474A B006                <1>     mov al, errBadHdl   ;Error code
  2574 0000474C F9                  <1>     stc         ;Reset CF
  2575                              <1>     return
    13                              <2> %%_ret:
    14 0000474D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2576                              <1> 
  2577                              <1> derefSFTPtr:
  2578                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  2579                              <1> ;Input: bx = File handle (gets zero extended)
  2580                              <1> ;Output: CF=NC: rdi = SFT pointer
  2581                              <1> ;        CF=CY: Error, ax=Error code
  2582 0000474E E896FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  2583 00004753 7205                <1>     jb .fail
  2584 00004755 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  2585 00004758 7504                <1>     jne .ok
  2586                              <1> .fail:
  2587 0000475A B006                <1>     mov al, errBadHdl
  2588 0000475C F9                  <1>     stc
  2589                              <1>     return
    13                              <2> %%_ret:
    14 0000475D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2590                              <1> .ok:
  2591 0000475E 53                  <1>     push rbx    ;Preserve the JFT handle
  2592 0000475F 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  2593 00004762 E84DFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  2594 00004767 5B                  <1>     pop rbx 
  2595                              <1>     return
    13                              <2> %%_ret:
    14 00004768 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2596                              <1> 
  2597                              <1> getBytesTransferred:
  2598 00004769 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2599 0000476F F7D9                <1>     neg ecx ;Multiply by -1
  2600 00004771 030D(68C70300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2601                              <1>     return ;Return bytes transferred in ecx
    13                              <2> %%_ret:
    14 00004777 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2602                              <1> 
  2603                              <1> getSFTndxInheritable:
  2604                              <1> ;Given a SFTndx this function will verify if it is inheritable
  2605                              <1> ;Input: ebx = SFTndx (word)
  2606                              <1> ;Output: 
  2607                              <1> ;   ZF=ZE => Inheritable
  2608                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  2609 00004778 57                  <1>     push rdi
  2610 00004779 E836FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  2611 0000477E 7208                <1>     jc .badNdx
  2612 00004780 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  2613 00004786 5F                  <1>     pop rdi
  2614                              <1>     return
    13                              <2> %%_ret:
    14 00004787 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2615                              <1> .badNdx:
  2616 00004788 31FF                <1>     xor edi, edi
  2617 0000478A FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  2618 0000478C F8                  <1>     clc
  2619 0000478D 5F                  <1>     pop rdi
  2620                              <1>     return
    13                              <2> %%_ret:
    14 0000478E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2621                              <1> 
  2622                              <1> incrementOpenCount:
  2623                              <1> ;Given a SFTndx, this function will increment it's open count
  2624                              <1> ;Output:
  2625                              <1> ;   CF=NC => sftndx ok, count incremented
  2626                              <1> ;   CF=CY => Bad ndx
  2627 0000478F 57                  <1>     push rdi
  2628 00004790 E81FFFFFFF          <1>     call getSFTPtrfromSFTNdx
  2629 00004795 7203                <1>     jc .exit
  2630 00004797 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  2631                              <1> .exit:
  2632 0000479A 5F                  <1>     pop rdi
  2633                              <1>     return
    13                              <2> %%_ret:
    14 0000479B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2634                              <1> 
  2635                              <1> decrementOpenCount: ;Int 4Fh AX = 1208h
  2636                              <1> ;Input: rdi = SFT pointer
  2637                              <1> ;Output: ax = Original wNumHandles count
  2638 0000479C 9C                  <1>     pushfq
  2639 0000479D 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2640 000047A0 FFC8                <1>     dec eax     ;Decrement count
  2641 000047A2 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2642 000047A4 FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2643                              <1> .exit:
  2644 000047A6 9D                  <1>     popfq
  2645 000047A7 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2646                              <1>     return
    13                              <2> %%_ret:
    14 000047AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2647                              <1> 
  2648                              <1> ;Buffer Wrappers
  2649                              <1> writeThroughBuffersForHandle:
  2650                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2651 000047AB 57                  <1>     push rdi
  2652 000047AC 55                  <1>     push rbp
  2653 000047AD 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  2654 000047B4 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2655 000047BA 751C                <1>     jnz .exit
  2656 000047BC FF35(FAC60300)      <1>     push qword [workingDPB]
  2657 000047C2 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2658 000047C6 48892D(FAC60300)    <1>     mov qword [workingDPB], rbp
  2659 000047CD E890BDFFFF          <1>     call writeThroughBuffers
  2660 000047D2 8F05(FAC60300)      <1>     pop qword [workingDPB]
  2661                              <1> .exit:
  2662 000047D8 5D                  <1>     pop rbp
  2663 000047D9 5F                  <1>     pop rdi
  2664                              <1>     return
    13                              <2> %%_ret:
    14 000047DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2665                              <1> 
  2666                              <1> cancelWriteThroughBuffersForHandle:
  2667                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2668 000047DB 57                  <1>     push rdi
  2669 000047DC 55                  <1>     push rbp
  2670 000047DD 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  2671 000047E4 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2672 000047EA 751C                <1>     jnz .exit
  2673 000047EC FF35(FAC60300)      <1>     push qword [workingDPB]
  2674 000047F2 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2675 000047F6 48892D(FAC60300)    <1>     mov qword [workingDPB], rbp
  2676 000047FD E829BDFFFF          <1>     call cancelWriteThroughBuffers
  2677 00004802 8F05(FAC60300)      <1>     pop qword [workingDPB]
  2678                              <1> .exit:
  2679 00004808 5D                  <1>     pop rbp
  2680 00004809 5F                  <1>     pop rdi
  2681                              <1>     return
    13                              <2> %%_ret:
    14 0000480A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    34                                  %include "./Source/Kernel/FileIO/ioctl.asm"
     1                              <1> ioctrl:            ;ah = 44h, handle function
     2                              <1> ;Possible subfunctions
     3                              <1> ;======================================================
     4                              <1> ;Handle Information Functions                         |
     5                              <1> ;al = 00h => Get Handle Information word in dx        x
     6                              <1> ;al = 01h => Set Handle Information word              x
     7                              <1> ;======================================================
     8                              <1> ;IO Control String Functions (optionally implemented) |
     9                              <1> ;al = 02h => Read from Char device                    x
    10                              <1> ;al = 03h => Write to Char device                     x
    11                              <1> ;al = 04h => Read from Block device                   x
    12                              <1> ;al = 05h => Write to Block device                    x
    13                              <1> ;======================================================
    14                              <1> ;IO Status Functions (optionally implemented)         |
    15                              <1> ;al = 06h => Get input status                         x
    16                              <1> ;al = 07h => Get output status                        x
    17                              <1> ;======================================================
    18                              <1> ;Device information (optionally implemented)          |  
    19                              <1> ;al = 08h => Is a block device removable?       
    20                              <1> ;al = 09h => Is a logical device local or remote?   
    21                              <1> ;al = 0Ah => Is a handle to a local or remote file?
    22                              <1> ;======================================================
    23                              <1> ;SHARE.EXE control                                    |
    24                              <1> ;al = 0Bh => Change sharing retry count               x  
    25                              <1> ;======================================================
    26                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    27                              <1> ;======================================================
    28                              <1> ;Generic IOCTL string (optionally implemented)
    29                              <1> ;al = 0Dh => Block device Generic IOCTL request    
    30                              <1> ;======================================================
    31                              <1> ;Disk Drive change drive (optionally implemented)
    32                              <1> ;al = 0Eh => Get logical device                 
    33                              <1> ;al = 0Fh => Set logical device  
    34                              <1> ;======================================================
    35 0000480B 3C0F                <1>     cmp al, 15
    36 0000480D 7747                <1>     ja .invalidFunction
    37 0000480F 84C0                <1>     test al, al
    38 00004811 745B                <1>     jz .getDevWord
    39 00004813 3C01                <1>     cmp al, 1
    40 00004815 746E                <1>     je .setDevWord
    41 00004817 2C02                <1>     sub al, 2
    42 00004819 3C03                <1>     cmp al, 3
    43 0000481B 7673                <1>     jbe .ioctlStringFunctions
    44 0000481D 2C04                <1>     sub al, 4
    45 0000481F 3C01                <1>     cmp al, 1
    46 00004821 0F8681010000        <1>     jbe .ioStatusFunctions
    47 00004827 2C02                <1>     sub al, 2
    48 00004829 3C02                <1>     cmp al, 2
    49 0000482B 0F8644020000        <1>     jbe .devControl
    50 00004831 2C03                <1>     sub al, 3
    51 00004833 0F840F030000        <1>     jz .setSharingCount
    52 00004839 FEC8                <1>     dec al
    53 0000483B 0F8425030000        <1>     jz .genericCharDevIOCTL
    54 00004841 FEC8                <1>     dec al
    55 00004843 0F844B030000        <1>     jz .genericBlokDevIOCTL
    56 00004849 FEC8                <1>     dec al
    57 0000484B 0F840A040000        <1>     jz .getDrvLogicalDevice
    58 00004851 E981040000          <1>     jmp .setDrvLogicalDevice
    59                              <1> .invalidFunction:
    60 00004856 B801000000          <1>     mov eax, errInvFnc
    61                              <1> .ifExit:
    62 0000485B E9BD220000          <1>     jmp extErrExit
    63                              <1> .accessDeniedError:
    64 00004860 B805000000          <1>     mov eax, errAccDen
    65 00004865 EBF4                <1>     jmp short .ifExit
    66                              <1> .badHandle:
    67 00004867 B806000000          <1>     mov eax, errBadHdl
    68 0000486C EBED                <1>     jmp short .ifExit
    69                              <1> 
    70                              <1> ;...Functions...
    71                              <1> .getDevWord:
    72                              <1> ;Input: bx = File Handle
    73 0000486E E8DBFEFFFF          <1>     call derefSFTPtr
    74 00004873 72F2                <1>     jc .badHandle
    75 00004875 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    76 00004879 30C0                <1>     xor al, al
    77 0000487B E8F51D0000          <1>     call getUserRegs
    78 00004880 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00004884 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .setDevWord:
    81                              <1> ;Input: bx = File Handle
    82                              <1> ;       dl = Low byte of Device information word
    83 00004885 E8C4FEFFFF          <1>     call derefSFTPtr
    84 0000488A 72DB                <1>     jc .badHandle 
    85 0000488C 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    86                              <1>     return
    13                              <2> %%_ret:
    14 0000488F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    87                              <1> .ioctlStringFunctions:
    88                              <1> ;al = 0 -> ReadCharDev
    89                              <1> ;al = 1 -> WriteCharDev
    90                              <1> ;al = 2 -> ReadDiskDev
    91                              <1> ;al = 3 -> WriteDiskDev
    92                              <1> ;Input: bx = File handle/drive number
    93                              <1> ;       ecx = Bytes to transfer
    94                              <1> ;       rdx = Ptr to string to transfer
    95 00004890 0FB6F3              <1>     movzx esi, bl
    96 00004893 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
    97 0000489A C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
    98 000048A1 C605(5CC40300)00    <1>     mov byte [Int44bitfld], 0
    99                              <1> ;Get in rdi the ptr to the SFT for the handle we are looking at
   100                              <1> ;Setup the common ioReqPkt fields and the read/write 
   101 000048A8 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   102 000048AB 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   103 000048AE 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   104 000048B2 51                  <1>     push rcx
   105 000048B3 52                  <1>     push rdx
   106 000048B4 B903000000          <1>     mov ecx, drvIOCTLREAD
   107 000048B9 BA0C000000          <1>     mov edx, drvIOCTLWRITE
   108 000048BE A801                <1>     test al, 1  ;If set, this is a write operation
   109 000048C0 0F45CA              <1>     cmovnz ecx, edx ;Move write command into ecx
   110 000048C3 7507                <1>     jnz .notWrite
   111 000048C5 800D(5CC40300)01    <1>     or byte [Int44bitfld], critWrite
   112                              <1> .notWrite:
   113 000048CC 5A                  <1>     pop rdx
   114 000048CD 59                  <1>     pop rcx
   115 000048CE 884B02              <1>     mov byte [rbx + ioReqPkt.cmdcde], cl
   116 000048D1 3C01                <1>     cmp al, 1
   117 000048D3 772F                <1>     ja .ioctlStringBlockDevice
   118                              <1>     ;Here we are for char devices only
   119 000048D5 4887DE              <1>     xchg rbx, rsi    ;Save the driver ptr to rsi and the handle to ebx 
   120 000048D8 E871FEFFFF          <1>     call derefSFTPtr    ;Get the sft ptr in rdi
   121 000048DD 7288                <1>     jc .badHandle 
   122 000048DF C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr
   123 000048E6 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Bit must be set
   124 000048EC 0F8464FFFFFF        <1>     jz .invalidFunction
   125                              <1> 
   126 000048F2 488B5F07            <1>     mov rbx, qword [rdi + sft.qPtr] ;Get ptr to device driver
   127 000048F6 800D(5CC40300)80    <1>     or byte [Int44bitfld], critCharDev
   128 000048FD 4887DE              <1>     xchg rbx, rsi   ;Swap back
   129 00004900 31C0                <1>     xor eax, eax
   130 00004902 EB38                <1>     jmp short .ioctlStringCommon
   131                              <1> .ioctlStringBlockDevice:
   132                              <1>     ;Here we are for block devices only
   133                              <1>     ;esi has the drive number
   134 00004904 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
   135 0000490B 89F0                <1>     mov eax, esi
   136 0000490D 53                  <1>     push rbx
   137 0000490E E8EF1D0000          <1>     call getCDS ;Returns in al the unit number of the drive
   138 00004913 5B                  <1>     pop rbx
   139 00004914 730A                <1>     jnc .okDrive
   140 00004916 B80F000000          <1>     mov eax, errBadDrv
   141 0000491B E9FD210000          <1>     jmp extErrExit
   142                              <1> .okDrive:
   143 00004920 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
   144 00004927 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]
   145 0000492B 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   146 0000492E 884301              <1>     mov byte [rbx + ioReqPkt.unitnm], al
   147 00004931 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   148 00004935 8A4623              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   149 00004938 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] 
   150                              <1> .ioctlStringCommon:
   151                              <1>     ;rsi -> Device Driver header
   152                              <1>     ;rbx -> Request Header
   153                              <1>     ;al = Media descriptor
   154 0000493C 88430D              <1>     mov byte [rbx + ioReqPkt.medesc], al
   155 0000493F 66F746080040        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLRW
   156 00004945 0F840BFFFFFF        <1>     jz .invalidFunction ;If not supported, invalid function error 
   157                              <1>     ;Make request now
   158                              <1> .ioctlStringCommonRetry:
   159 0000494B 51                  <1>     push rcx    ;Push xfrctr
   160 0000494C 52                  <1>     push rdx    ;Buffer Ptr
   161 0000494D 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   162 00004953 E8FB180000          <1>     call goDriver
   163 00004958 5A                  <1>     pop rdx
   164 00004959 59                  <1>     pop rcx
   165                              <1> ;Check status, if bad, reuse ecx and rdx for tfrlen and bufptr and go again
   166 0000495A 66F743030080        <1>     test word [rbx + ioReqPkt.status], drvErrStatus
   167 00004960 0F84A9210000        <1>     jz extGoodExit
   168 00004966 800D(5CC40300)18    <1>     or byte [Int44bitfld], critFailOK | critRetryOK | critFailOK
   169 0000496D 8A4301              <1>     mov al, byte [rbx + ioReqPkt.unitnm]
   170 00004970 8A25(5CC40300)      <1>     mov ah, byte [Int44bitfld]
   171 00004976 48893D(04C40300)    <1>     mov qword [xInt44RDI], rdi
   172 0000497D 480FB67B03          <1>     movzx rdi, byte [rbx + ioReqPkt.status] ;Get low word of status (errorcde)
   173 00004982 E87A130000          <1>     call criticalDOSError
   174 00004987 488B3D(04C40300)    <1>     mov rdi, qword [xInt44RDI]
   175 0000498E 3C00                <1>     cmp al, critIgnore
   176 00004990 0F8479210000        <1>     je extGoodExit 
   177 00004996 3C01                <1>     cmp al, critRetry
   178 00004998 74B1                <1>     je .ioctlStringCommonRetry
   179 0000499A 0FB64303            <1>     movzx eax, byte [rbx + ioReqPkt.status]    ;Get the error code into al
   180 0000499E 0513000000          <1>     add eax, drvErrShft ;Convert to general error code
   181 000049A3 E975210000          <1>     jmp extErrExit
   182                              <1> 
   183                              <1> 
   184                              <1> .ioStatusFunctions:
   185                              <1> ;al = 0 -> Get input status 
   186                              <1> ;al = 1 -> Get output status
   187 000049A8 E8A1FDFFFF          <1>     call derefSFTPtr
   188 000049AD 0F82B4FEFFFF        <1>     jc .badHandle 
   189 000049B3 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   190 000049BA C6030D              <1>     mov byte [rbx + statusReqPkt.hdrlen], statusReqPkt_size
   191 000049BD C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   192 000049C4 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;File cannot be redir!
   193 000049CA 0F8586FEFFFF        <1>     jnz .invalidFunction
   194 000049D0 C605(5CC40300)00    <1>     mov byte [Int44bitfld], 0
   195 000049D7 B906000000          <1>     mov ecx, drvINSTATUS
   196 000049DC BA0A000000          <1>     mov edx, drvOUTSTATUS
   197 000049E1 84C0                <1>     test al, al
   198 000049E3 0F45CA              <1>     cmovnz ecx, edx
   199 000049E6 884B02              <1>     mov byte [rbx + statusReqPkt.cmdcde], cl
   200 000049E9 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   201 000049EF 7416                <1>     jz .ioStatDisk
   202 000049F1 C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr
   203 000049F8 800D(5CC40300)80    <1>     or byte [Int44bitfld], critCharDev
   204 000049FF 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr]
   205 00004A03 30C0                <1>     xor al, al
   206 00004A05 EB15                <1>     jmp short .ioStatCommon
   207                              <1> .ioStatDisk:
   208 00004A07 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
   209 00004A0E 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB ptr
   210 00004A12 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   211 00004A15 884301              <1>     mov byte [rbx + statusReqPkt.unitnm], al
   212 00004A18 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   213                              <1> .ioStatCommon:
   214 00004A1C E832180000          <1>     call goDriver
   215 00004A21 66F743030080        <1>     test word [rbx + statusReqPkt.status], drvErrStatus
   216 00004A27 743E                <1>     jz .ioStatOk
   217                              <1>     ;Error handling here
   218                              <1> 
   219 00004A29 800D(5CC40300)18    <1>     or byte [Int44bitfld], critFailOK | critRetryOK | critFailOK
   220 00004A30 8A4301              <1>     mov al, byte [rbx + statusReqPkt.unitnm]
   221 00004A33 8A25(5CC40300)      <1>     mov ah, byte [Int44bitfld]
   222 00004A39 48893D(04C40300)    <1>     mov qword [xInt44RDI], rdi
   223 00004A40 480FB67B03          <1>     movzx rdi, byte [rbx + statusReqPkt.status]
   224 00004A45 E8B7120000          <1>     call criticalDOSError
   225 00004A4A 488B3D(04C40300)    <1>     mov rdi, qword [xInt44RDI]
   226 00004A51 3C00                <1>     cmp al, critIgnore
   227 00004A53 7412                <1>     je .ioStatOk 
   228 00004A55 3C01                <1>     cmp al, critRetry
   229 00004A57 74C3                <1>     je .ioStatCommon
   230 00004A59 0FB64303            <1>     movzx eax, byte [rbx + statusReqPkt.status]    ;Get the error code into al
   231 00004A5D 0513000000          <1>     add eax, drvErrShft ;Convert to general error code
   232 00004A62 E9B6200000          <1>     jmp extErrExit
   233                              <1> 
   234                              <1> .ioStatOk:
   235 00004A67 66F743030002        <1>     test word [rbx + statusReqPkt.status], drvBsyStatus
   236 00004A6D 7403                <1>     jz .notBusyExit
   237 00004A6F B0FF                <1>     mov al, -1  ;Device Busy/EOF
   238                              <1>     return 
    13                              <2> %%_ret:
    14 00004A71 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> .notBusyExit:
   240                              <1> ;Device ready/NotEOF
   241 00004A72 31C0                <1>     xor eax, eax
   242                              <1>     return
    13                              <2> %%_ret:
    14 00004A74 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> .devControl:
   245                              <1> ;al = 0 -> Is media removable?
   246                              <1> ;al = 1 -> Is device local or remote?
   247                              <1> ;al = 2 -> Is handle local or remote?
   248 00004A75 84C0                <1>     test al, al
   249 00004A77 746D                <1>     jz .remTest
   250 00004A79 A801                <1>     test al, 1
   251 00004A7B 751B                <1>     jnz .deviceTest
   252                              <1> ;Handle Local or Remote
   253 00004A7D E8CCFCFFFF          <1>     call derefSFTPtr    ;Get ptr in rdi
   254 00004A82 0F82DFFDFFFF        <1>     jc .badHandle 
   255 00004A88 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo]
   256                              <1> .devControlExit:
   257 00004A8C E8E41B0000          <1>     call getUserRegs
   258 00004A91 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   259 00004A95 31C0                <1>     xor eax, eax
   260                              <1>     return 
    13                              <2> %%_ret:
    14 00004A97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   261                              <1> .deviceTest:
   262                              <1> ;Drive Local or Remote
   263                              <1> ;For more compat, get the driver attrib word if local with bit 12 clear
   264                              <1> ;Else, just get the CDS word and swap subst and net
   265 00004A98 88D8                <1>     mov al, bl
   266 00004A9A E8631C0000          <1>     call getCDS
   267 00004A9F 730A                <1>     jnc .devTestOkDrive
   268 00004AA1 B80F000000          <1>     mov eax, errBadDrv
   269 00004AA6 E972200000          <1>     jmp extErrExit
   270                              <1> .devTestOkDrive:
   271 00004AAB 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   272 00004AB2 668B5743            <1>     mov dx, word [rdi + cds.wFlags]
   273 00004AB6 66F7C20080          <1>     test dx, cdsRedirDrive   ;Check the remote bit
   274 00004ABB 7513                <1>     jnz .remoteDrive
   275 00004ABD 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   276 00004AC1 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   277 00004AC5 668B5708            <1>     mov dx, word [rdi + drvHdr.attrib]
   278 00004AC9 6681E2FFCF          <1>     and dx, ~3000h  ;Clear bits 12 and 13
   279 00004ACE EBBC                <1>     jmp short .devControlExit
   280                              <1> .remoteDrive:
   281 00004AD0 6689D3              <1>     mov bx, dx
   282 00004AD3 6681CA0010          <1>     or dx, 1000h    ;Set bit 12 for remote (its at subst)
   283 00004AD8 6681E30010          <1>     and bx, cdsSubstDrive   ;Isolate the subst bit
   284 00004ADD 74AD                <1>     jz short .devControlExit    ;Jump to exit if no subst bit
   285 00004ADF 6681CA0080          <1>     or dx, 8000h    ;Else, set bit 15 for subst in returning word!
   286 00004AE4 EBA6                <1>     jmp short .devControlExit   ;Store it
   287                              <1> 
   288                              <1> .remTest:
   289                              <1> ;Drive letter in bl
   290 00004AE6 88D8                <1>     mov al, bl
   291 00004AE8 E8151C0000          <1>     call getCDS
   292 00004AED 730A                <1>     jnc .remTestOkDrive
   293                              <1> .remTestBadDrv:
   294 00004AEF B80F000000          <1>     mov eax, errBadDrv
   295 00004AF4 E924200000          <1>     jmp extErrExit
   296                              <1> .remTestOkDrive:
   297 00004AF9 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] ;Get the CDS
   298 00004B00 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   299 00004B06 75E7                <1>     jnz .remTestBadDrv
   300 00004B08 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   301 00004B0F 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]
   302 00004B13 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]    ;Get the unit number
   303 00004B16 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr in rsi
   304 00004B1A 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL
   305 00004B20 0F8430FDFFFF        <1>     jz .invalidFunction
   306 00004B26 C6030D              <1>     mov byte [rbx + remMediaReqPkt.hdrlen], remMediaReqPkt_size
   307 00004B29 C643020F            <1>     mov byte [rbx + remMediaReqPkt.cmdcde], drvREMMEDCHECK
   308 00004B2D 66C743030000        <1>     mov word [rbx + remMediaReqPkt.status], 0
   309 00004B33 884301              <1>     mov byte [rbx + remMediaReqPkt.unitnm], al
   310 00004B36 E818170000          <1>     call goDriver
   311 00004B3B 0FB74303            <1>     movzx eax, word [rbx + remMediaReqPkt.status]   ;Get the status
   312 00004B3F 2500020000          <1>     and eax, drvBsyStatus   ;Clear all but bit 9
   313 00004B44 C1E809              <1>     shr eax, 9  ;Move the busy bit to al[0]
   314                              <1>     return
    13                              <2> %%_ret:
    14 00004B47 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   315                              <1> 
   316                              <1> .setSharingCount:
   317                              <1> ;Input: cx = Share Count
   318                              <1> ;       dx = Share Retry
   319 00004B48 66890D(25C00300)    <1>     mov word [shareCount], cx
   320 00004B4F 6685D2              <1>     test dx, dx
   321 00004B52 0F84FEFCFFFF        <1>     jz .invalidFunction
   322 00004B58 668915(27C00300)    <1>     mov word [shareDelay], dx
   323 00004B5F 31C0                <1>     xor eax, eax
   324 00004B61 E9A91F0000          <1>     jmp extGoodExit
   325                              <1> 
   326                              <1> .genericCharDevIOCTL:
   327 00004B66 E8C9FBFFFF          <1>     call getSFTPtr  ;Get in rdi the SFT ptr
   328 00004B6B 7311                <1>     jnc .okHandle
   329                              <1> .ioctrlBadHandle:
   330 00004B6D C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr
   331 00004B74 B806000000          <1>     mov eax, errBadHdl
   332 00004B79 E99F1F0000          <1>     jmp extErrExit
   333                              <1> .okHandle:
   334 00004B7E 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   335 00004B84 75E7                <1>     jnz .ioctrlBadHandle
   336 00004B86 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   337 00004B8C 74DF                <1>     jz .ioctrlBadHandle
   338 00004B8E 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the driver ptr in rsi
   339 00004B92 EB49                <1>     jmp short .ioctlReqMake
   340                              <1> .genericBlokDevIOCTL:
   341 00004B94 88D8                <1>     mov al, bl  ;Move the drive number from bl to al
   342 00004B96 51                  <1>     push rcx
   343 00004B97 52                  <1>     push rdx
   344 00004B98 E8651B0000          <1>     call getCDS ;Sets the current CDS
   345 00004B9D 5A                  <1>     pop rdx
   346 00004B9E 59                  <1>     pop rcx
   347 00004B9F 7217                <1>     jc .badDrv
   348                              <1>     ;Check the CDS not net, subst or join
   349 00004BA1 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
   350 00004BA8 0FB74643            <1>     movzx eax, word [rsi + cds.wFlags]
   351 00004BAC 66A90040            <1>     test ax, cdsValidDrive  ;If not valid, fail
   352 00004BB0 7406                <1>     jz .badDrv
   353 00004BB2 66A980B0            <1>     test ax, cdsRedirDrive|cdsJoinDrive|cdsSubstDrive|cdsRdirLocDrive
   354 00004BB6 7411                <1>     jz .goodDrive
   355                              <1> .badDrv:
   356 00004BB8 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
   357 00004BBF B80F000000          <1>     mov eax, errBadDrv  ;Error code if error
   358 00004BC4 E9541F0000          <1>     jmp extErrExit
   359                              <1> .goodDrive:
   360                              <1>     ;CDS is good,now get the DPB
   361 00004BC9 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]  ;DPB ptr in rsi
   362 00004BCD 488B7E1B            <1>     mov rdi, qword [rsi + dpb.qDriverHeaderPtr] ;Driver ptr in rdi
   363 00004BD1 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   364 00004BD4 8805(B6C40300)      <1>     mov byte [primReqHdr + ioctlReqPkt.unitnm], al
   365 00004BDA 4889FE              <1>     mov rsi, rdi   ;Get the driver ptr in rsi 
   366                              <1> .ioctlReqMake:
   367                              <1> ;rsi must point to the driver header here
   368 00004BDD 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   369 00004BE3 7511                <1>     jnz .supportsIOCTL
   370                              <1> .badFunction:
   371 00004BE5 C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   372 00004BEC B801000000          <1>     mov eax, errInvFnc
   373 00004BF1 E9271F0000          <1>     jmp extErrExit
   374                              <1> .supportsIOCTL:
   375                              <1>     ;Setup the request header
   376 00004BF6 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   377 00004BFD C60327              <1>     mov byte [rbx + ioctlReqPkt.hdrlen], ioctlReqPkt_size
   378 00004C00 C6430213            <1>     mov byte [rbx + ioctlReqPkt.cmdcde], drvIOCTL
   379 00004C04 66C743030000        <1>     mov word [rbx + ioctlReqPkt.status], 0
   380 00004C0A 66894B0D            <1>     mov word [rbx + ioctlReqPkt.majfun], cx ;Store maj and min together
   381 00004C0E 4889531F            <1>     mov qword [rbx + ioctlReqPkt.ctlptr], rdx
   382 00004C12 4889F7              <1>     mov rdi, rsi    ;Save the driver header ptr in rdi
   383 00004C15 E85B1A0000          <1>     call getUserRegs
   384 00004C1A 488B4620            <1>     mov rax, qword [rsi + callerFrame.rsi]
   385 00004C1E 4889430F            <1>     mov qword [rbx + ioctlReqPkt.rsival], rax
   386 00004C22 488B4628            <1>     mov rax, qword [rsi + callerFrame.rdi]
   387 00004C26 48894317            <1>     mov qword [rbx + ioctlReqPkt.rdival], rax
   388 00004C2A 4889FE              <1>     mov rsi, rdi
   389 00004C2D E821160000          <1>     call goDriver
   390 00004C32 66F743030080        <1>     test word [rbx + ioctlReqPkt.status], drvErrStatus
   391 00004C38 0F84D11E0000        <1>     jz extGoodExit
   392 00004C3E 0FB77B03            <1>     movzx edi, word [rbx + ioctlReqPkt.status]
   393 00004C42 81E7FF000000        <1>     and edi, 0FFh   ;Save the low byte only
   394 00004C48 89F8                <1>     mov eax, edi
   395 00004C4A E826100000          <1>     call xlatHardError
   396 00004C4F 0FB705(00C40300)    <1>     movzx eax, word [errorExCde] 
   397 00004C56 E9C21E0000          <1>     jmp extErrExit
   398                              <1> 
   399                              <1> .getDrvLogicalDevice:
   400 00004C5B 88D8                <1>     mov al, bl
   401 00004C5D 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   402 00004C64 C6430217            <1>     mov byte [rbx + getDevReqPkt.cmdcde], drvGETDRVMAP
   403 00004C68 C6030D              <1>     mov byte [rbx + getDevReqPkt.hdrlen], getDevReqPkt_size
   404 00004C6B 66C743030000        <1>     mov word [rbx + getDevReqPkt.status], 0
   405 00004C71 53                  <1>     push rbx
   406 00004C72 E88B1A0000          <1>     call getCDS
   407 00004C77 8805(F9C60300)      <1>     mov byte [workingDrv], al
   408 00004C7D 5B                  <1>     pop rbx
   409 00004C7E 0F826BFEFFFF        <1>     jc .remTestBadDrv
   410 00004C84 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   411 00004C8B 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   412 00004C8F 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   413 00004C93 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   414 00004C96 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   415                              <1> 
   416 00004C99 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   417 00004C9F 0F84B1FBFFFF        <1>     jz .invalidFunction
   418 00004CA5 E8A9150000          <1>     call goDriver
   419 00004CAA 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   420 00004CB0 7421                <1>     jz .getDrvOk
   421                              <1>     ;Can only Fail, Ignore and Abort.
   422 00004CB2 0FB605(F9C60300)    <1>     movzx eax, byte [workingDrv]  
   423 00004CB9 80CC28              <1>     or ah, critRead | critIgnorOK | critFailOK
   424 00004CBC 0FB77B03            <1>     movzx edi, word [rbx + getDevReqPkt.status]
   425 00004CC0 E83C100000          <1>     call criticalDOSError
   426 00004CC5 3C00                <1>     cmp al, critIgnore
   427 00004CC7 740A                <1>     je .getDrvOk
   428 00004CC9 B801000000          <1>     mov eax, errInvFnc
   429 00004CCE E94A1E0000          <1>     jmp extErrExit
   430                              <1> .getDrvOk:
   431 00004CD3 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]    ;Get the byte
   432                              <1>     return
    13                              <2> %%_ret:
    14 00004CD6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   433                              <1> .setDrvLogicalDevice:
   434 00004CD7 88D8                <1>     mov al, bl
   435 00004CD9 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   436 00004CE0 C6430218            <1>     mov byte [rbx + setDevReqPkt.cmdcde], drvSETDRVMAP
   437 00004CE4 C6030D              <1>     mov byte [rbx + setDevReqPkt.hdrlen], setDevReqPkt_size
   438 00004CE7 66C743030000        <1>     mov word [rbx + setDevReqPkt.status], 0
   439 00004CED 53                  <1>     push rbx
   440 00004CEE E80F1A0000          <1>     call getCDS
   441 00004CF3 8805(F9C60300)      <1>     mov byte [workingDrv], al
   442 00004CF9 5B                  <1>     pop rbx
   443 00004CFA 0F82EFFDFFFF        <1>     jc .remTestBadDrv
   444 00004D00 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   445 00004D07 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   446 00004D0B 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   447 00004D0F 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   448 00004D12 884301              <1>     mov byte [rbx + setDevReqPkt.unitnm], al
   449 00004D15 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   450 00004D1B 0F8435FBFFFF        <1>     jz .invalidFunction
   451 00004D21 E82D150000          <1>     call goDriver
   452 00004D26 30C0                <1>     xor al, al
   453 00004D28 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   454                              <1>     retz    ;Return if OK
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004D2E 74A6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   455                              <1>     ;Can only Fail, Ignore and Abort.
   456 00004D30 0FB605(F9C60300)    <1>     movzx eax, byte [workingDrv]  
   457 00004D37 80CC28              <1>     or ah, critRead | critIgnorOK | critFailOK
   458 00004D3A 0FB77B03            <1>     movzx edi, word [rbx + getDevReqPkt.status]
   459 00004D3E E8BE0F0000          <1>     call criticalDOSError
   460 00004D43 3C00                <1>     cmp al, critIgnore
   461                              <1>     rete    ;Return if Ignore
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004D45 748F                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   462 00004D47 B801000000          <1>     mov eax, errInvFnc
   463 00004D4C E9CC1D0000          <1>     jmp extErrExit
   464                              <1> 
    35                                  %include "./Source/Kernel/MemExec/memFunc.asm"
     1                              <1> ;Memory related functions
     2                              <1> 
     3                              <1> ;-----------------------------------:
     4                              <1> ;  Memory related Kernel routines   :
     5                              <1> ;-----------------------------------:
     6                              <1> allocateMemory:    ;ah = 48h
     7                              <1> ;Input: ebx = Number of paragraphs requested
     8                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
     9                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    10 00004D51 E87C1D0000          <1>     call dosCrit1Enter
    11 00004D56 31D2                <1>     xor edx, edx
    12                              <1>     ;Clear the pointers
    13 00004D58 488915(3AC40300)    <1>     mov qword [firstMCB], rdx
    14 00004D5F 488915(42C40300)    <1>     mov qword [bestMCB], rdx
    15 00004D66 488915(4AC40300)    <1>     mov qword [lastMCB], rdx
    16 00004D6D 31ED                <1>     xor ebp, ebp    
    17 00004D6F FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    18 00004D71 488B35(39C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    19                              <1> .walk:
    20 00004D78 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    21 00004D7B 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    22 00004D7E 7409                <1>     je .walk1
    23 00004D80 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    24 00004D83 0F850B050000        <1>     jne badMCBChain
    25                              <1> .walk1:
    26                              <1>     ;Here if valid but not the last block
    27 00004D89 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    28 00004D91 0F8582000000        <1>     jne .walk2
    29                              <1>     ;Here we consolidate adjacent free blocks if there are any
    30                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    31                              <1>     ;End consolidation at first non free block or at last block in chain
    32 00004D97 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    33 00004D9A 744A                <1>     je .det0    ;Determine if this block is useful
    34 00004D9C 31C9                <1>     xor ecx, ecx
    35 00004D9E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    36 00004DA1 4881C610000000      <1>     add rsi, mcb.program
    37                              <1> .cons0:
    38 00004DA8 48C1E104            <1>     shl rcx, 4
    39 00004DAC 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    40 00004DAF 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    41 00004DB2 7409                <1>     je .cons1
    42 00004DB4 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    43 00004DB7 0F85D7040000        <1>     jne badMCBChain 
    44                              <1> .cons1:
    45 00004DBD 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    46 00004DC5 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    47                              <1>     ;Here rsi, points to a free block, add it to rdi
    48 00004DC7 31C9                <1>     xor ecx, ecx
    49 00004DC9 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    50 00004DCC 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    51 00004DD2 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    52 00004DD5 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    53 00004DD7 31D2                <1>     xor edx, edx
    54 00004DD9 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    55 00004DDC 48895608            <1>     mov qword [rsi + 8], rdx
    56 00004DE0 3C5A                <1>     cmp al, mcbMarkEnd
    57 00004DE2 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    58                              <1>     ;Here we deal with if the block was the last one 
    59 00004DE4 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    60                              <1> .det0:  ;Now determine if pointer in rdi is useful
    61 00004DE6 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    62                              <1> ;ebx must be less than the arena size for the arena to be useful!
    63 00004DE9 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    64 00004DEC 39D9                <1>     cmp ecx, ebx
    65 00004DEE 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    66 00004DF0 488935(4AC40300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    67 00004DF7 488B05(3AC40300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    68 00004DFE 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    69 00004E01 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    70 00004E03 488935(3AC40300)    <1>     mov qword [firstMCB], rsi
    71                              <1> .det1:
    72                              <1>     ;Now test for best fit.
    73 00004E0A 29D9                <1>     sub ecx, ebx    ;Block - ebx
    74 00004E0C 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    75 00004E0E 7209                <1>     jb .walk2
    76 00004E10 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
    77 00004E12 488935(42C40300)    <1>     mov qword [bestMCB], rsi
    78                              <1> .walk2:
    79 00004E19 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    80 00004E1C 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
    81 00004E1E 31C9                <1>     xor ecx, ecx
    82 00004E20 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    83 00004E23 48C1E104            <1>     shl rcx, 4
    84 00004E27 4881C610000000      <1>     add rsi, mcb.program
    85 00004E2E 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    86 00004E31 E942FFFFFF          <1>     jmp .walk
    87                              <1> .allocate:
    88                              <1>     ;Allocation fails IF the pointer is the null pointer
    89 00004E36 803D(C8C30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
    90 00004E3D 7266                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
    91                              <1>     ;Fall thru if last fit
    92 00004E3F 488B35(4AC40300)    <1>     mov rsi, qword [lastMCB]
    93 00004E46 4885F6              <1>     test rsi, rsi   ;Check if null pointer
    94 00004E49 0F84D8000000        <1>     jz .allocFail
    95 00004E4F 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
    96 00004E51 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
    97 00004E54 31C9                <1>     xor ecx, ecx
    98 00004E56 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    99 00004E59 29D9                <1>     sub ecx, ebx
   100 00004E5B 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   101 00004E61 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   102 00004E64 48C1E104            <1>     shl rcx, 4
   103 00004E68 4881C610000000      <1>     add rsi, mcb.program
   104 00004E6F 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   105 00004E72 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   106 00004E74 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   107 00004E77 488B15(14C40300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   108 00004E7E 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   109 00004E82 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   110 00004E89 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   111 00004E90 4889F0              <1>     mov rax, rsi
   112 00004E93 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   113 00004E96 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   114 00004E9A E8C8030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   115 00004E9F E8381C0000          <1>     call dosCrit1Exit
   116                              <1>     return
    13                              <2> %%_ret:
    14 00004EA4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   117                              <1> .bfCommon:
   118 00004EA5 488B35(3AC40300)    <1>     mov rsi, qword [firstMCB]
   119 00004EAC 803D(C8C30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   120 00004EB3 480F4435(42C40300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   121 00004EBB 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   122 00004EBE 7467                <1>     jz .allocFail
   123 00004EC0 8A06                <1>     mov al, byte [rsi + mcb.marker]
   124 00004EC2 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   125 00004EC5 31C9                <1>     xor ecx, ecx
   126 00004EC7 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   127 00004ECA 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   128 00004ECC 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   129 00004ED2 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   130 00004ED5 488B15(14C40300)    <1>     mov rdx, qword [currentPSP]
   131 00004EDC 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   132 00004EE0 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   133 00004EE3 4881C610000000      <1>     add rsi, mcb.program
   134 00004EEA 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   135 00004EF0 48C1E304            <1>     shl rbx, 4
   136 00004EF4 4801DE              <1>     add rsi, rbx
   137 00004EF7 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   138 00004EF9 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   139 00004F01 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   140 00004F04 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   141 00004F0B 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   142 00004F12 4889F8              <1>     mov rax, rdi
   143 00004F15 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   144 00004F18 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   145 00004F1C E846030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   146 00004F21 E8B61B0000          <1>     call dosCrit1Exit
   147                              <1>     return
    13                              <2> %%_ret:
    14 00004F26 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   148                              <1> .allocFail:
   149                              <1>     ;Walk the MCB chain to determine the biggest block size
   150 00004F27 488B35(39C00300)    <1>     mov rsi, [mcbChainPtr]
   151 00004F2E 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   152                              <1> .af0:
   153 00004F30 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   154 00004F33 7409                <1>     je .af1
   155 00004F35 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   156 00004F38 0F8556030000        <1>     jne badMCBChain
   157                              <1> .af1:
   158 00004F3E 31C9                <1>     xor ecx, ecx
   159 00004F40 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   160 00004F43 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   161 00004F4B 7505                <1>     jne .af2
   162 00004F4D 39D9                <1>     cmp ecx, ebx
   163 00004F4F 0F47D9              <1>     cmova ebx, ecx
   164                              <1> .af2:
   165 00004F52 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   166 00004F55 7410                <1>     je .afExit
   167 00004F57 48C1E104            <1>     shl rcx, 4
   168 00004F5B 4881C610000000      <1>     add rsi, mcb.program
   169 00004F62 4801CE              <1>     add rsi, rcx
   170 00004F65 EBD7                <1>     jmp short .af1
   171                              <1> .afExit:
   172 00004F67 B808000000          <1>     mov eax, errNoMem
   173 00004F6C 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   174 00004F73 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   175 00004F76 E91B030000          <1>     jmp mcbErrHdlr
   176                              <1> freeMemory:        ;ah = 49h
   177                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   178                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   179                              <1> ;Always skip the first block as this is the anchor for DOS
   180 00004F7B E8521B0000          <1>     call dosCrit1Enter
   181 00004F80 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   182 00004F87 31C9                <1>     xor ecx, ecx
   183 00004F89 488B35(39C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   184 00004F90 4889F7              <1>     mov rdi, rsi
   185 00004F93 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   186 00004F96 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   187 00004F9A 4881C610000000      <1>     add rsi, mcb.program
   188 00004FA1 4801CE              <1>     add rsi, rcx    ;Go to next block
   189                              <1> .mainLoop:
   190 00004FA4 31C9                <1>     xor ecx, ecx
   191 00004FA6 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   192 00004FA9 7409                <1>     je .valid
   193 00004FAB 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   194 00004FAE 0F85E0020000        <1>     jne badMCBChain
   195                              <1> .valid:
   196 00004FB4 4939F0              <1>     cmp r8, rsi
   197 00004FB7 741C                <1>     je .blockFound
   198                              <1>     ;Not valid, check if last block in chain
   199 00004FB9 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   200 00004FBC 0F84A5000000        <1>     je .blockError
   201 00004FC2 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   202 00004FC5 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   203 00004FC9 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   204 00004FD0 4801CE              <1>     add rsi, rcx    ;Go to next block
   205 00004FD3 EBCF                <1>     jmp short .mainLoop
   206                              <1> .blockFound:
   207                              <1>     ;If hole, error.
   208                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   209 00004FD5 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   210 00004FDD 0F8484000000        <1>     je .blockError
   211 00004FE3 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   212 00004FEB 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   213 00004FF3 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   214                              <1>     ;It is, let it absorb this space
   215 00004FF5 31C9                <1>     xor ecx, ecx
   216 00004FF7 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   217 00004FFA 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   218 00005000 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   219                              <1>     ;Replace block marker
   220 00005003 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   221 00005005 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   222 00005007 31C9                <1>     xor ecx, ecx
   223 00005009 48890E              <1>     mov qword [rsi], rcx
   224 0000500C 48894E08            <1>     mov qword [rsi + 8], rcx
   225 00005010 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   226                              <1> .blockFoundCheckFollowing:
   227                              <1>     ;First check if we are the last block in chain
   228 00005013 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   229 00005016 7439                <1>     je .blockFoundExit  ;If yes, exit!
   230 00005018 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   231 0000501B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   232 0000501E 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   233 00005022 4881C110000000      <1>     add rcx, mcb.program
   234 00005029 4801CE              <1>     add rsi, rcx    ;Go to next block
   235 0000502C 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   236 00005034 751B                <1>     jne .blockFoundExit ;If not free, exit
   237                              <1>     ;If free, absorb into block pointed to by rdi
   238 00005036 31C9                <1>     xor ecx, ecx
   239 00005038 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   240 0000503B 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   241 00005041 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   242                              <1>     ;Replace block marker
   243 00005044 8A06                <1>     mov al, byte [rsi + mcb.marker]
   244 00005046 8807                <1>     mov byte [rdi + mcb.marker], al
   245 00005048 31C9                <1>     xor ecx, ecx
   246 0000504A 48890E              <1>     mov qword [rsi], rcx
   247 0000504D 48894E08            <1>     mov qword [rsi + 8], rcx
   248                              <1> .blockFoundExit:
   249 00005051 E811020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   250 00005056 E8811A0000          <1>     call dosCrit1Exit
   251 0000505B 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   252 00005062 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   253                              <1>     return
    13                              <2> %%_ret:
    14 00005066 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   254                              <1> .blockError:
   255 00005067 C605(FEC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   256 0000506E B809000000          <1>     mov eax, errMemAddr
   257 00005073 E8A51A0000          <1>     call extErrExit ;Error thru the unified error handler
   258 00005078 E8EA010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   259 0000507D E85A1A0000          <1>     call dosCrit1Exit
   260                              <1>     return
    13                              <2> %%_ret:
    14 00005082 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   261                              <1> reallocMemory:     ;ah = 4Ah
   262                              <1> ;Input: r8 = address of the block to be realloc'ed
   263                              <1> ;       ebx = How many paras this block should contain after realloc. 
   264                              <1> ;               If ebx = 0, jump to free memory
   265 00005083 E84A1A0000          <1>     call dosCrit1Enter
   266 00005088 85DB                <1>     test ebx, ebx
   267 0000508A 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   268 00005090 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   269 00005097 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   270 0000509A 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   271 0000509D 7409                <1>     je .ctn
   272 0000509F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   273 000050A2 0F856F010000        <1>     jne .badAddrGiven
   274                              <1> .ctn:
   275                              <1>     ;Provided block is valid and not a hole
   276                              <1>     ;Check if Growth or Shrink
   277 000050A8 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   278 000050B0 74B5                <1>     je freeMemory.blockError
   279 000050B2 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   280 000050B5 31C9                <1>     xor ecx, ecx
   281 000050B7 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   282 000050BA 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   283 000050BC 0F8791000000        <1>     ja .growth
   284 000050C2 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   285                              <1> ;We can always shrink
   286 000050C8 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   287 000050CA 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   288 000050D0 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   289 000050D3 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   290 000050D9 48C1E304            <1>     shl rbx, 4
   291 000050DD 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   292 000050E4 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   293 000050E7 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   294 000050E9 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   295 000050EC 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   296 000050EE 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   297 000050F6 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   298 000050F9 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   299 000050FB 0F84E6000000        <1>     je .exit
   300                              <1> ;Else, now see if the block following is also free and absorb it
   301 00005101 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   302 00005104 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   303 00005108 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   304 0000510F 4801CE              <1>     add rsi, rcx    ;Goto next arena
   305 00005112 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   306 00005115 7409                <1>     je .shrinkAbsorb
   307 00005117 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   308 0000511A 0F8574010000        <1>     jne badMCBChain
   309                              <1> .shrinkAbsorb:
   310 00005120 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   311 00005128 0F85B9000000        <1>     jne .exit
   312                              <1>     ;It is free, absorb it
   313 0000512E 8A06                <1>     mov al, byte [rsi + mcb.marker]
   314 00005130 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   315 00005132 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   316 00005135 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   317 00005138 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   318 0000513B 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   319 0000513E 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   320 00005142 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   321 00005145 31C9                <1>     xor ecx, ecx
   322                              <1>     ;Clear absorbed MCB
   323 00005147 48890E              <1>     mov qword [rsi], rcx
   324 0000514A 48894E08            <1>     mov qword [rsi + 8], rcx
   325 0000514E E994000000          <1>     jmp .exit
   326                              <1> .growth:
   327                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   328 00005153 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   329 00005156 0F84A5000000        <1>     je .notEnuffMem
   330                              <1> ;Now check the following space is free. If not, not enuff mem err
   331 0000515C 31C9                <1>     xor ecx, ecx
   332 0000515E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   333 00005161 48C1E104            <1>     shl rcx, 4
   334 00005165 4889F7              <1>     mov rdi, rsi    
   335 00005168 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   336 0000516F 4801CE              <1>     add rsi, rcx
   337 00005172 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   338 00005175 7409                <1>     je .growthOK
   339 00005177 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   340 0000517A 0F8514010000        <1>     jne badMCBChain
   341                              <1> .growthOK:
   342                              <1>     ;rdi points to block we are growing
   343 00005180 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   344 00005188 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   345                              <1>     ;rsi must own all memory up to the next owned arena
   346 0000518A 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   347 0000518C 31C9                <1>     xor ecx, ecx
   348 0000518E 31D2                <1>     xor edx, edx
   349 00005190 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   350 00005193 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   351 00005199 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   352 0000519C 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   353 0000519E 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   354 000051A0 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   355 000051A3 775E                <1>     ja .notEnuffMem1
   356 000051A5 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   357 000051A7 81FA01000000        <1>     cmp edx, 1
   358 000051AD 744E                <1>     je .notEnuffMem2
   359 000051AF 31C9                <1>     xor ecx, ecx
   360 000051B1 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   361 000051B4 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   362 000051B8 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   363 000051BB 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   364 000051BE 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   365 000051C5 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   366 000051C9 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   367 000051CC 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   368 000051D0 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   369                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   370                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   371 000051D2 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   372 000051D4 7411                <1>     jz .exit
   373 000051D6 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   374 000051DC 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   375 000051DF 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   376                              <1> .exit:
   377 000051E7 E87B000000          <1>     call verifyIntegrityOfMCBChain
   378 000051EC E8EB180000          <1>     call dosCrit1Exit
   379 000051F1 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   380 000051F8 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   381                              <1>     return
    13                              <2> %%_ret:
    14 000051FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   382                              <1> .notEnuffMem2:
   383 000051FD FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   384 000051FF EB02                <1>     jmp short .notEnuffMem1
   385                              <1> .notEnuffMem:
   386 00005201 31DB                <1>     xor ebx, ebx    ;No space to grow
   387                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   388 00005203 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   389 00005208 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   390 0000520F 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   391 00005212 E97F000000          <1>     jmp mcbErrHdlr
   392                              <1> .badAddrGiven:
   393 00005217 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   394 0000521C E975000000          <1>     jmp mcbErrHdlr
   395                              <1> getsetMallocStrat: ;ah = 58h
   396 00005221 84C0                <1>     test al, al
   397 00005223 741F                <1>     jz .get
   398 00005225 3C02                <1>     cmp al, 2
   399 00005227 7337                <1>     jae .bad
   400                              <1> ;Set here
   401 00005229 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   402 00005230 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   403 00005234 8805(C8C30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   404 0000523A 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   405 0000523E E824000000          <1>     call verifyIntegrityOfMCBChain
   406                              <1>     return
    13                              <2> %%_ret:
    14 00005243 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   407                              <1> .get:
   408 00005244 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   409 0000524B 31C0                <1>     xor eax, eax
   410 0000524D 8A05(C8C30300)      <1>     mov al, byte [allocStrat]
   411 00005253 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   412 00005256 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   413 0000525A E808000000          <1>     call verifyIntegrityOfMCBChain
   414                              <1>     return
    13                              <2> %%_ret:
    14 0000525F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   415                              <1> .bad:
   416 00005260 B801000000          <1>     mov eax, errInvFnc
   417 00005265 EB2F                <1>     jmp short mcbErrHdlr
   418                              <1> ;-----------------------------------:
   419                              <1> ;      Memory related routines      :
   420                              <1> ;-----------------------------------:
   421                              <1> verifyIntegrityOfMCBChain:
   422 00005267 50                  <1>     push rax
   423 00005268 53                  <1>     push rbx
   424 00005269 488B1D(39C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   425                              <1> .ok:
   426 00005270 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   427 00005273 7408                <1>     je .ok1
   428 00005275 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   429 00005278 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   430                              <1> .exit:
   431 0000527A 5B                  <1>     pop rbx
   432 0000527B 58                  <1>     pop rax
   433                              <1>     return ;We have reached the end of the chain, return all good!
    13                              <2> %%_ret:
    14 0000527C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   434                              <1> .ok1:
   435 0000527D 31C0                <1>     xor eax, eax
   436 0000527F 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   437 00005282 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   438 00005286 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   439 0000528D 4801C3              <1>     add rbx, rax
   440 00005290 EBDE                <1>     jmp short .ok
   441                              <1> .bmcbPrep:
   442 00005292 5B                  <1>     pop rbx ;Pop off the stack first!
   443 00005293 58                  <1>     pop rax
   444                              <1> badMCBChain:
   445 00005294 B007                <1>     mov al, errMCBbad   ;Yikes!
   446                              <1> mcbErrHdlr:
   447                              <1>     ;Jumped to with eax = error code
   448 00005296 C605(FEC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   449 0000529D E87B180000          <1>     call extErrExit ;Error thru the unified error handler
   450 000052A2 3C07                <1>     cmp al, errMCBbad
   451                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000052A4 74D6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   452 000052A6 EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    36                                  %include "./Source/Kernel/MemExec/progMgmt.asm"
     1                              <1> ;EXEC and all default terminates are here
     2                              <1> 
     3                              <1> ;========================
     4                              <1> ;   Interrupt handlers
     5                              <1> ;========================
     6                              <1> terminateProcess:   ;Int 40h
     7 000052A8 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
     8 000052AA E99B160000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
     9                              <1> terminateRes:       ;Int 47h
    10                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    11 000052AF 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    12 000052B5 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    13 000052B8 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    14 000052BD E988160000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    15                              <1> ;========================
    16                              <1> ;    Int 21h functions
    17                              <1> ;========================
    18                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    19                              <1> ;Input:
    20                              <1> ;rdx = Pointer to new PSP in memory.
    21                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    22                              <1> ;   Officially document that this MUST be paragraph aligned.
    23                              <1> ;rsi = alloc size for new psp block
    24                              <1> ;
    25                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    26                              <1> ; Note, only the first 20 handles will be copied 
    27                              <1> ; from wherever the JFT is into the PSP JFT of the new task. 
    28                              <1> ; If any of these handles are non-inheritable or closed, then 
    29                              <1> ; they will be copied as -1 (if closed) or set to -1 during 
    30                              <1> ; the inheritence check.
    31                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    32 000052C2 C605(09C50300)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    33 000052C9 4C8B05(14C40300)    <1>     mov r8, qword [currentPSP]
    34 000052D0 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    35 000052D2 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    36 000052D3 EB0C                <1>     jmp short copyPSP.pspCommon
    37                              <1> copyPSP:      ;ah = 26h
    38                              <1> ;Input:
    39                              <1> ;rdx = Pointer to new PSP in memory.
    40                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    41                              <1> ;   Officially document that this MUST be paragraph aligned.
    42 000052D5 4C8B05(14C40300)    <1>     mov r8, qword [currentPSP]
    43 000052DC 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    44 000052E0 53                  <1>     push rbx    ;Save this value for PSP allocsize
    45                              <1> .pspCommon:
    46 000052E1 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    47 000052E8 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    48 000052EC 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    49                              <1> ;r8 is current PSP, now copy psp to rdx
    50                              <1> ;Preserve rdx and r8 until the end
    51 000052F0 4C89C6              <1>     mov rsi, r8
    52 000052F3 4889D7              <1>     mov rdi, rdx
    53 000052F6 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    54 000052FB F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    55 000052FE 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    56 00005306 F605(09C50300)FF    <1>     test byte [pspCopyFlg], -1
    57 0000530D 7450                <1>     jz .copy
    58                              <1>     ;Now reset the parent psp data
    59 0000530F 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    60 00005317 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    61                              <1>     ;Now reset the copied jobFileTable
    62 0000531B 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    63 0000531F 31C9                <1>     xor ecx, ecx
    64 00005321 B914000000          <1>     mov ecx, dfltJFTsize  ;Store dfltJFTsize free handles in new child PSP
    65 00005326 66894A4E            <1>     mov word [rdx + psp.jftSize], cx ;Set the size of JFT in new PSP to dflt 20
    66 0000532A B0FF                <1>     mov al, -1
    67 0000532C F3AA                <1>     rep stosb   ;Store 20 many -1's indicating 20 free handles
    68                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    69                              <1>     ;lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    70 0000532E 31DB                <1>     xor ebx, ebx    ;Get the pointer to jft[0] of source JFT
    71 00005330 E8B4F3FFFF          <1>     call getJFTPtr  ;Get JFT pointer to parent process JFT in rdi
    72 00005335 4889FE              <1>     mov rsi, rdi    ;Store it in rsi
    73 00005338 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]   ;Get the new processes' JFT ptr
    74 0000533C 0FB74A4E            <1>     movzx ecx, word [rdx + psp.jftSize]   ;Copy over first dfltJFTsize handles only
    75                              <1> .xfrJFT:
    76 00005340 67E31C              <1>     jecxz .copy
    77 00005343 FFC9                <1>     dec ecx
    78 00005345 AC                  <1>     lodsb   ;Get the SFTndx in al
    79 00005346 0FB6D8              <1>     movzx ebx, al
    80 00005349 53                  <1>     push rbx
    81 0000534A E829F4FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
    82 0000534F 58                  <1>     pop rax
    83 00005350 7508                <1>     jnz .badJFT
    84 00005352 AA                  <1>     stosb   ;Else store the SFTndx at that position... 
    85 00005353 E837F4FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
    86 00005358 EBE6                <1>     jmp short .xfrJFT
    87                              <1> .badJFT:
    88 0000535A 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
    89 0000535D EBE1                <1>     jmp short .xfrJFT 
    90                              <1> .copy:
    91 0000535F C605(09C50300)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
    92 00005366 58                  <1>     pop rax ;Pop the allocsize back into rax
    93 00005367 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
    94                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
    95 0000536A 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
    96 0000536E B042                <1>     mov al, 42h
    97 00005370 E8F2120000          <1>     call muxGetIntVector    ;Get vector in rbx
    98 00005375 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    99 00005378 48AB                <1>     stosq   ;Move rdi to next entry and store
   100 0000537A B043                <1>     mov al, 43h
   101 0000537C E8E6120000          <1>     call muxGetIntVector    ;Get vector in rbx
   102 00005381 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   103 00005384 48AB                <1>     stosq   ;Move rdi to next entry and store
   104 00005386 B044                <1>     mov al, 44h
   105 00005388 E8DA120000          <1>     call muxGetIntVector    ;Get vector in rbx
   106 0000538D 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   107 00005390 48AB                <1>     stosq   ;Move rdi to next entry and store
   108                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   109 00005392 66C702CD40          <1>     mov word [rdx + psp.return], 040CDh  ;Int 40h
   110 00005397 66C74250CD41        <1>     mov word [rdx + psp.unixEntry], 041CDh  
   111 0000539D C64252CB            <1>     mov byte [rdx + psp.unixEntry + 2], 0CBh ;Return
   112                              <1>     return
    13                              <2> %%_ret:
    14 000053A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> terminateStayRes:  ;ah = 31h
   115                              <1> ;Input: al  = Error code
   116                              <1> ;       edx = Number of paragraphs to keep resident
   117 000053A2 C605(F6C60300)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   118                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   119 000053A9 81FA06000000        <1>     cmp edx, 6
   120 000053AF 7305                <1>     jae .aboveMinimum
   121 000053B1 BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   122                              <1> .aboveMinimum:
   123                              <1> ;Now we setup a call to Realloc 
   124                              <1> ;Setup regs with: 
   125                              <1> ;   r8 = address of the block to be realloc'ed
   126                              <1> ;   ebx = How many paras this block should contain after realloc.
   127 000053B6 4C8B05(14C40300)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   128 000053BD 89D3                <1>     mov ebx, edx
   129 000053BF 50                  <1>     push rax    ;Preserve errorlevel across call
   130 000053C0 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   131 000053C1 E8BDFCFFFF          <1>     call reallocMemory
   132 000053C6 5B                  <1>     pop rbx
   133 000053C7 58                  <1>     pop rax
   134 000053C8 7226                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   135 000053CA 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   136                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   137 000053CE EB20                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   138                              <1> 
   139                              <1> simpleTerminate:   ;ah = 00h
   140 000053D0 31C0                <1>     xor eax, eax    ;Just fall through as normal
   141                              <1> terminateClean:    ;ah = 4Ch, EXIT
   142                              <1> ;Here we must:
   143                              <1> ;0) Build errorlevel and adjust variables accordingly
   144                              <1> ;1) Call Network Termination hook.
   145                              <1> ;2) Check if the program is it's own parent. If so, return.
   146                              <1> ;3) Swap the console back to the original driver if it is swapped.
   147                              <1> ;3.5) If we are exiting due to TSR, jump to 5
   148                              <1> ;4) Free all file handles associated to the current process.
   149                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   150                              <1> ;5) Free all memory blocks that have the signature of current PSP
   151                              <1> ;6) Set current PSP to parent PSP
   152                              <1> ;7) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   153                              <1> ;8) Set rsp of parent proc upon entry to DOS to our rsp
   154                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   155                              <1> ;10) Exit all critical sections.
   156                              <1> ;
   157                              <1> ; Step 0
   158                              <1> ;For now, just adjust error level in var
   159 000053D2 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   160 000053D4 8625(F6C60300)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   161 000053DA F605(80C40300)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   162 000053E1 7413                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   163 000053E3 8625(80C40300)      <1>     xchg ah, byte [ctrlCExit]   ;Zero the flag
   164 000053E9 C605(F6C60300)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   165                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   166 000053F0 8A25(F6C60300)      <1>     mov ah, byte [exitType] ;Get the exitType
   167                              <1> .storeELvl:
   168 000053F6 668905(24C40300)    <1>     mov word [errorLevel], ax   ;Store word
   169                              <1>     
   170                              <1> ; Step 1 Tell network a process is terminating
   171 000053FD B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   172 00005402 4C8B05(14C40300)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   173 00005409 CD4F                <1>     int 4Fh
   174                              <1> ; Step 2
   175                              <1> .step1:
   176 0000540B 488B3D(14C40300)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   177 00005412 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   178 00005415 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   179 00005419 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   180 0000541C 0F84B6000000        <1>     je .exit
   181                              <1> ; Step 3
   182 00005422 E8FCCEFFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   183                              <1> ; Step 3.5
   184 00005427 803D(F6C60300)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   185 0000542E 747A                <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   186                              <1> ; Step 4
   187 00005430 803D(F6C60300)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   188 00005437 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   189 00005439 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   190 0000543E CD4F                <1>     int 4Fh
   191                              <1> .skipAbortNetClose:
   192 00005440 FF15(D4C00300)      <1>     call qword [closeTaskShare] ;Close all shared files for this task
   193 00005446 FF15(ACC00300)      <1>     call qword [unloadDLLHook]  ;Now free exported function for this task
   194                              <1> 
   195 0000544C 488B3D(14C40300)    <1>     mov rdi, qword [currentPSP]
   196 00005453 0FB74F4E            <1>     movzx ecx, word [rdi + psp.jftSize] ;Number of entries in current JFT
   197 00005457 31DB                <1>     xor ebx, ebx    ;Start from handle 0
   198                              <1> .s4lp:
   199 00005459 53                  <1>     push rbx
   200 0000545A 51                  <1>     push rcx
   201 0000545B E8B1D9FFFF          <1>     call closeFileHdl
   202 00005460 59                  <1>     pop rcx
   203 00005461 5B                  <1>     pop rbx
   204 00005462 FFC3                <1>     inc ebx ;Goto next handle to close
   205 00005464 39CB                <1>     cmp ebx, ecx
   206 00005466 75F1                <1>     jne .s4lp   ;Keep looping for all entries in the JFT 
   207                              <1> ;Step 5
   208                              <1> .step5:
   209 00005468 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   210                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   211                              <1>     ; with the currentPSP signature and free them.
   212 0000546F 488B35(39C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   213                              <1> .s5lp:  ;And walk the chain
   214                              <1> ;First verify the address in rsi is a valid mcb
   215 00005476 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   216 00005478 80F94D              <1>     cmp cl, mcbMarkCtn
   217 0000547B 7405                <1>     je .checkToFree
   218 0000547D 80F95A              <1>     cmp cl, mcbMarkEnd
   219 00005480 7528                <1>     jne .step6  ;Something wrong so stop freeing
   220                              <1> .checkToFree:
   221 00005482 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   222 00005486 750F                <1>     jne .noFree
   223 00005488 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   224 0000548C 53                  <1>     push rbx
   225 0000548D 51                  <1>     push rcx
   226 0000548E 56                  <1>     push rsi
   227 0000548F E8E7FAFFFF          <1>     call freeMemory ;Free this memory block
   228 00005494 5E                  <1>     pop rsi
   229 00005495 59                  <1>     pop rcx
   230 00005496 5B                  <1>     pop rbx
   231                              <1>     ;If an error occured, the internal vars will be set.
   232                              <1> .noFree:
   233 00005497 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   234 0000549A 740E                <1>     je .step6   ;Skip if we are
   235 0000549C 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   236 0000549F 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   237 000054A3 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   238 000054A8 EBCC                <1>     jmp short .s5lp
   239                              <1> ;Step 6
   240                              <1> .step6:
   241                              <1> 
   242 000054AA 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   243 000054AE 488905(14C40300)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   244                              <1> ;Step 7
   245                              <1>     ;rbx points to current PSP, the old parent task
   246                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   247 000054B5 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   248 000054B9 B044                <1>     mov al, 44h
   249 000054BB E83D180000          <1>     call setIntVector
   250 000054C0 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   251 000054C4 B043                <1>     mov al, 43h
   252 000054C6 E832180000          <1>     call setIntVector
   253 000054CB 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   254 000054CF B042                <1>     mov al, 42h
   255 000054D1 52                  <1>     push rdx
   256 000054D2 E826180000          <1>     call setIntVector
   257 000054D7 5A                  <1>     pop rdx
   258                              <1> ;Step 8
   259                              <1> .exit:
   260 000054D8 B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   261 000054DA CD4A                <1>     int 4ah
   262                              <1> 
   263 000054DC FA                  <1>     cli
   264 000054DD 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP]
   265 000054E4 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   266                              <1>     ;Make the parent register frame the current one
   267                              <1>     ;Make RSP point to user stack from parent entry to exec
   268 000054E8 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   269                              <1> 
   270 000054EC 4889542448          <1>     mov qword [rsp + callerFrame.rip], rdx  ;Store return address vector here
   271 000054F1 48C744245802F20000  <1>     mov qword [rsp + callerFrame.flags], 0F202h ;Mimic DOS's return flags
   272                              <1> 
   273 000054FA C605(8AC40300)00    <1>     mov byte [Int44Trans], 0    ;Clear this flag
   274 00005501 C605(FDC30300)00    <1>     mov byte [inDOS], 0 ;Exiting DOS now
   275 00005508 C605(FEC30300)FF    <1>     mov byte [errorDrv], -1 ;Reset
   276 0000550F E890150000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   277 00005514 48CF                <1>     iretq   ;and return to address that was in rdx
    37                                  %include "./Source/Kernel/MemExec/exec.asm"
     1                              <1> 
     2                              <1> 
     3                              <1> loadExecChild:     ;ah = 4Bh, EXEC
     4                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
     5                              <1> ;       rbx = Ptr to the parameter block used for loading
     6                              <1> ;       al = Subfunction:
     7                              <1> ;            00h = Load Program and transfer control to it
     8                              <1> ;            01h = Load Program but do not transfer ctrl to it
     9                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    10                              <1> ;      Reserved for future expansion:
    11                              <1> ;            04h = Load in background execution mode (PE only)
    12                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    13                              <1> ;               function but in 16-bit mode. 
    14                              <1> ;
    15                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    16                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    17                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    18                              <1> 
    19                              <1> ;If AL = 0 :
    20                              <1> ;            Load Child Program and Xfr control to it
    21                              <1> ; rbx ------>   |-------------------------------|
    22                              <1> ;               |   Ptr to Environment Block    |
    23                              <1> ;               |                               |
    24                              <1> ;               | Can be 0 => Get pointer to    |
    25                              <1> ;               | parent Environment Block      |
    26                              <1> ;               |-------------------------------|
    27                              <1> ;               |   Ptr to Command Line to be   |
    28                              <1> ;               |   placed at PSP + 80h         |
    29                              <1> ;               |-------------------------------|
    30                              <1> ;               |   Ptr to first default FCB    |
    31                              <1> ;               |      to copy to PSP.fcb1      |
    32                              <1> ;               |                               |
    33                              <1> ;               | Should be used to parse the   |
    34                              <1> ;               |  first two command line args  |
    35                              <1> ;               |-------------------------------|
    36                              <1> ;               |   Ptr to second default FCB   |
    37                              <1> ;               |      to copy to PSP.fcb2      |
    38                              <1> ;               |-------------------------------|
    39                              <1> ;
    40                              <1> ;If AL = 1 :
    41                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    42                              <1> ; rbx ------>   |-------------------------------|
    43                              <1> ;               |         AS IN AL=00H          |
    44                              <1> ;               |-------------------------------|
    45                              <1> ;               |     Initial Value of RSP      |
    46                              <1> ;               |       on program launch       |
    47                              <1> ;               |                               |
    48                              <1> ;               |     This is returned to the   |
    49                              <1> ;               |         caller by DOS         |
    50                              <1> ;               |-------------------------------|
    51                              <1> ;               |     Initial Value of RIP      |
    52                              <1> ;               |       on program launch       |
    53                              <1> ;               |                               |
    54                              <1> ;               |     This is returned to the   |
    55                              <1> ;               |         caller by DOS         |
    56                              <1> ;               |-------------------------------|
    57                              <1> ;
    58                              <1> ;                      !!Important Note!!
    59                              <1> ;   The block pointed to by rbx must reserve the space for 
    60                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    61                              <1> ;
    62                              <1> ;If AL = 3 :
    63                              <1> ;                      Load program overlay
    64                              <1> ; rbx ------>   |-------------------------------|
    65                              <1> ;               |  Pointer to the byte in the   |
    66                              <1> ;               |  prog space to start writing  |
    67                              <1> ;               |        the overlay at         |
    68                              <1> ;               |-------------------------------|
    69                              <1> ;               | DWORD offset from the base of |
    70                              <1> ;               |  the program to the location  |
    71                              <1> ;               |  the overlay is being loaded  |
    72                              <1> ;               |              in               |
    73                              <1> ;               |  (Called a Relocation Factor) |
    74                              <1> ;               |     Only FOR EXE Overlays     |
    75                              <1> ;               |        for CODE fixups        |
    76                              <1> ;               |  For COM, Current PSP + 100h  |
    77                              <1> ;               |      assumed to suffice       |
    78                              <1> ;               |-------------------------------|
    79                              <1> ;
    80                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
    81                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
    82                              <1> ;
    83                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
    84 00005516 55                  <1>     push rbp
    85 00005517 4889E5              <1>     mov rbp, rsp
    86 0000551A 4881EC78000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
    87                              <1>     ;Clear up the pointers on the stack frame
    88 00005521 31C0                <1>     xor eax, eax
    89 00005523 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
    90 00005527 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax
    91 0000552B 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
    92 0000552F 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
    93 00005533 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
    94                              <1> 
    95                              <1> 
    96 00005537 3C03                <1>     cmp al, execOverlay
    97 00005539 7615                <1>     jbe .validSubfunction
    98                              <1> .badSubFunction:
    99 0000553B B801000000          <1>     mov eax, errInvFnc
   100 00005540 C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   101                              <1> .badExit:
   102 00005547 4889EC              <1>     mov rsp, rbp
   103 0000554A 5D                  <1>     pop rbp
   104 0000554B E9CD150000          <1>     jmp extErrExit
   105                              <1> 
   106                              <1> .validSubfunction:
   107 00005550 3C02                <1>     cmp al, execInvld
   108 00005552 74E7                <1>     je .badSubFunction
   109                              <1>     ;Save registers for each function call
   110 00005554 48895DD8            <1>     mov qword [rbp - execFrame.pParam], rbx
   111 00005558 488955D0            <1>     mov qword [rbp - execFrame.pProgname], rdx
   112 0000555C 0FB6C0              <1>     movzx eax, al
   113 0000555F 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   114 00005563 4889D7              <1>     mov rdi, rdx
   115 00005566 E862120000          <1>     call strlen ;Get string length in cx
   116 0000556B 66894DE0            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   117                              <1>     ;Now open the file we wanna yeet to
   118 0000556F 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   119 00005571 55                  <1>     push rbp    ;Preserve local frame ptr
   120 00005572 E870D7FFFF          <1>     call openFileHdl
   121 00005577 5D                  <1>     pop rbp
   122 00005578 72CD                <1>     jc .badExit ;Exit preserving error code in al
   123                              <1>     ;Now ax has the file handle
   124 0000557A 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   125 0000557E 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   126 00005581 E8C8F1FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   127 00005586 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   128 0000558A F7C280000000        <1>     test edx, devCharDev
   129 00005590 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   130 00005592 B002                <1>     mov al, errFnf
   131 00005594 E9FE050000          <1>     jmp .cleanAndFail
   132                              <1> .validDiskFile:
   133 00005599 31C0                <1>     xor eax, eax
   134 0000559B 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Clear pEnv and pProg Bases
   135 0000559F 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   136 000055A3 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   137 000055A7 0F848D000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   138 000055AD 488B7DD8            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   139 000055B1 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   140 000055B4 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   141 000055B7 7514                <1>     jnz .copyEnvironmentBlock
   142 000055B9 488B35(14C40300)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   143 000055C0 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   144 000055C4 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   145 000055C8 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, skip
   146 000055CB 746D                <1>     jz .loadProgram
   147                              <1> .copyEnvironmentBlock:
   148 000055CD 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   149                              <1>     ;Get the length of the environment
   150 000055D0 B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   151 000055D5 31C0                <1>     xor eax, eax
   152 000055D7 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   153                              <1> .envVerifyLp:
   154 000055DA F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   155 000055DC 7531                <1>     jnz .invalidEnvironmentError
   156 000055DE 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   157 000055E1 FFC9                <1>     dec ecx
   158 000055E3 AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   159 000055E4 75F4                <1>     jnz .envVerifyLp
   160                              <1> 
   161 000055E6 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   162 000055E9 57                  <1>     push rdi     ;Save the length of the environment block
   163 000055EA 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   164 000055F0 0FB75DE0            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   165 000055F4 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   166 000055F6 89FB                <1>     mov ebx, edi
   167 000055F8 C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   168 000055FB 55                  <1>     push rbp
   169 000055FC E850F7FFFF          <1>     call allocateMemory
   170 00005601 5D                  <1>     pop rbp
   171 00005602 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   172 00005603 7314                <1>     jnc .copyEnvironment
   173                              <1>     ;Fall thru if not enuff memory
   174                              <1> .insufficientMemory:
   175 00005605 B808000000          <1>     mov eax, errNoMem
   176 0000560A E988050000          <1>     jmp .cleanAndFail
   177                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   178 0000560F B80A000000          <1>     mov eax, errBadEnv
   179 00005614 E97E050000          <1>     jmp .cleanAndFail
   180                              <1> 
   181                              <1> .copyEnvironment:
   182                              <1>     ;rax has the ptr to allocated memory block
   183                              <1>     ;rcx has the number of chars to copy from the source env block
   184 00005619 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   185 0000561C 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   186 00005620 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pParam]
   187 00005624 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   188 00005627 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   189 00005629 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   190 0000562E 66AB                <1>     stosw       ;Away you go!
   191 00005630 488B75D0            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   192 00005634 0FB74DE0            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   193 00005638 F3A4                <1>     rep movsb   ;Move the bytes to rdi
   194                              <1> ;Done with the environment... more or less
   195                              <1> .loadProgram:
   196 0000563A B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   197 0000563F 488D15(DAD90300)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   198 00005646 E868050000          <1>     call .readDataFromHdl
   199 0000564B 0F8241050000        <1>     jc .badFmtErr
   200 00005651 85C0                <1>     test eax, eax   ;Were zero bytes read?
   201 00005653 0F8439050000        <1>     jz .badFmtErr
   202 00005659 3D40000000          <1>     cmp eax, imageDosHdr_size
   203 0000565E 0F827E030000        <1>     jb .loadCom
   204                              <1> 
   205 00005664 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   206 00005669 740B                <1>     je .proceedEXE
   207 0000566B 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   208 00005670 0F856C030000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   209                              <1> .proceedEXE:
   210                              <1>     ;Now we need to read e_lfanew
   211 00005676 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   212 00005677 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   213 0000567A 8955A8              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   214 0000567D 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   215 0000567F 30C0                <1>     xor al, al  ;Set file pointer from start of file
   216 00005681 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   217 00005685 E872D8FFFF          <1>     call lseekHdl   ;Move to that position in the file
   218 0000568A 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   219 0000568B B918000000          <1>     mov ecx, imageFileHeader_size
   220 00005690 E81E050000          <1>     call .readDataFromHdl       ;Now read the COFF header
   221 00005695 85C0                <1>     test eax, eax   ;Were zero bytes read?
   222 00005697 0F84F5040000        <1>     jz .badFmtErr
   223 0000569D 3D18000000          <1>     cmp eax, imageFileHeader_size
   224 000056A2 0F82EA040000        <1>     jb .badFmtErr
   225                              <1>     ;So now rdx points to the imageFileHeader
   226 000056A8 813A50450000        <1>     cmp dword [rdx + imageFileHeader.dPESignature], imagePESignature
   227 000056AE 0F85DE040000        <1>     jne .badFmtErr
   228 000056B4 66817A046486        <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   229 000056BA 0F85D2040000        <1>     jne .badFmtErr
   230                              <1>     ;Check the binary is executable
   231 000056C0 0FB74216            <1>     movzx eax, word [rdx + imageFileHeader.wCharacteristics]
   232 000056C4 66A90200            <1>     test ax, imageFileExecutable
   233 000056C8 0F84C4040000        <1>     jz .badFmtErr
   234 000056CE 668945A0            <1>     mov word [rbp - execFrame.wCOFFChars], ax   ;Save this for later!
   235                              <1> 
   236 000056D2 66817A147000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   237 000056D8 0F82B4040000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   238                              <1>     ;Now save the number of sections in the the file
   239 000056DE 0FB74206            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   240 000056E2 85C0                <1>     test eax, eax   ;If this is 0, what?
   241 000056E4 0F84A8040000        <1>     jz .badFmtErr
   242 000056EA 66894598            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   243                              <1>     ;Now load Optional header, file ptr points to it so all good!
   244 000056EE B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   245                              <1>     ;rdx points to exeHdrSpace
   246 000056F3 E8BB040000          <1>     call .readDataFromHdl
   247 000056F8 85C0                <1>     test eax, eax   ;Were zero bytes read?
   248 000056FA 0F8492040000        <1>     jz .badFmtErr
   249 00005700 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   250 00005705 0F8287040000        <1>     jb .badFmtErr
   251                              <1>     ;Now File Ptr points to data dirs, not an issue
   252 0000570B 81459070000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   253                              <1>     ;We load the program in, one section at a time, reading section headers in
   254                              <1>     ; one at a time to the section header internal buffer.
   255 00005712 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   256 00005716 7463                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   257 00005718 8B1D(12DA0300)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   258 0000571E 488B05(22DA0300)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   259 00005725 4885C0              <1>     test rax, rax
   260 00005728 750A                <1>     jnz .notDefaultStackAlloc
   261 0000572A 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   261 00005733 00                  <1>
   262                              <1> .notDefaultStackAlloc:
   263 00005734 01C3                <1>     add ebx, eax    ;Add stack allocation
   264 00005736 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   265                              <1>     ;Add also one section alignment as it is likely that our arena won't be 
   266                              <1>     ; section aligned and so we will need to align before reading, to 
   267                              <1>     ; guaranee that we will have space for the EXE header to be read in later.
   268 0000573C 031D(FAD90300)      <1>     add ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   269 00005742 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   270 00005745 81C311000000        <1>     add ebx, 11h
   271 0000574B C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   272 0000574E 55                  <1>     push rbp
   273 0000574F E8FDF5FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   274 00005754 5D                  <1>     pop rbp
   275 00005755 0F82AAFEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   276 0000575B 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   277 0000575F 480500010000        <1>     add rax, psp_size
   278 00005765 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of code goes here
   279                              <1>     ;Finally, just check that we have some code to execute. 
   280                              <1>     ;Empty code sections are NOT allowed if executing. Only for overlays
   281 00005769 813D(DED90300)0000- <1>     cmp dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfCode], 0
   281 00005771 0000                <1>
   282 00005773 0F8419040000        <1>     je .badFmtErr   ;If no bytes, exit error
   283 00005779 EB0F                <1>     jmp short .exeProceed1
   284                              <1> .exeOvlySkipAlloc:
   285 0000577B 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   286 0000577F 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   287 00005782 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   288 00005786 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax   ;Pretend this is the case
   289                              <1> .exeProceed1:
   290                              <1>     ;Now we align the progBase to full header size aligned to the next page
   291 0000578A 8B1D(16DA0300)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   292 00005790 4801D8              <1>     add rax, rbx    ;Add this offset where the header should go in future
   293                              <1>     ;Now we section pad
   294 00005793 50                  <1>     push rax
   295 00005794 8B0D(FAD90300)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   296 0000579A FFC9                <1>     dec ecx ;Turn into a mask
   297 0000579C 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   298 0000579F FFC1                <1>     inc ecx
   299 000057A1 4829C1              <1>     sub rcx, rax
   300 000057A4 5F                  <1>     pop rdi
   301 000057A5 31C0                <1>     xor eax, eax
   302 000057A7 F3AA                <1>     rep stosb
   303 000057A9 48897DB8            <1>     mov qword [rbp - execFrame.pProgBase], rdi
   304                              <1>     ;So now copy one section at a time, read section header in
   305                              <1>     ;File pointer points to the directory table, so skip that
   306 000057AD 8B15(46DA0300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   307                              <1>     ;Load however many directories we have into place
   308                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   309 000057B3 C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   310 000057B6 31C9                <1>     xor ecx, ecx
   311 000057B8 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   312 000057BC B001                <1>     mov al, 1   ;Move handle forwards from current position
   313 000057BE E839D7FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   314                              <1>     ;eax has pointer location after adjustment
   315 000057C3 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   316                              <1>     ;File now points to start of Section headers. Read first header in.
   317                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   318 000057C6 488B7DB8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   319 000057CA 0FB74D98            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   320                              <1> .loadLp:
   321 000057CE 51                  <1>     push rcx    ;Save # of segments left on stack
   322 000057CF 57                  <1>     push rdi    ;Save the current buffer ptr here
   323 000057D0 B928000000          <1>     mov ecx, imageSectionHdr_size
   324 000057D5 488D15(4ADA0300)    <1>     lea rdx, sectHdr    ;Read section headers here
   325 000057DC E8D2030000          <1>     call .readDataFromHdl
   326 000057E1 5F                  <1>     pop rdi
   327 000057E2 59                  <1>     pop rcx
   328 000057E3 85C0                <1>     test eax, eax
   329 000057E5 0F84A7030000        <1>     jz .badFmtErr
   330 000057EB 3D28000000          <1>     cmp eax, imageSectionHdr_size
   331 000057F0 0F859C030000        <1>     jne .badFmtErr
   332                              <1>     ;File ptr moved forwards to next section header
   333 000057F6 81459028000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   334                              <1>     ;Section header read, now we load section into memory
   335                              <1>     ;Move file ptr to data location
   336 000057FD 8B15(5EDA0300)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   337 00005803 85D2                <1>     test edx, edx
   338 00005805 740F                <1>     jz .skipRawPtrMove
   339 00005807 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   340 0000580B 31C0                <1>     xor eax, eax    ;Seek from start of file
   341 0000580D 51                  <1>     push rcx
   342 0000580E 57                  <1>     push rdi
   343 0000580F E8E8D6FFFF          <1>     call lseekHdl
   344 00005814 5F                  <1>     pop rdi
   345 00005815 59                  <1>     pop rcx
   346                              <1> 
   347                              <1> .skipRawPtrMove:
   348 00005816 51                  <1>     push rcx
   349 00005817 31FF                <1>     xor edi, edi
   350 00005819 8B3D(56DA0300)      <1>     mov edi, dword [sectHdr + imageSectionHdr.dVirtualAddress]  ;Get where it should go in memory, offset from image base
   351 0000581F 48037DB8            <1>     add rdi, qword [rbp - execFrame.pProgBase]  ;Turn into offset from progbase
   352                              <1>     ;If a section has a virtual address outside of the allocation arena
   353                              <1>     ; refuse to load it IF it contains no BSS, Data or Code and skip to the 
   354                              <1>     ; next section.
   355 00005823 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   356 00005827 4881EA10000000      <1>     sub rdx, mcb_size   ;Go back a unit of mcb
   357 0000582E 31C9                <1>     xor ecx, ecx
   358 00005830 8B4A09              <1>     mov ecx, dword [rdx + mcb.blockSize]
   359 00005833 48C1E104            <1>     shl rcx, 4  ;Convert to bytes (multiply by 16)
   360 00005837 4881C210000000      <1>     add rdx, mcb_size   ;Go to the first byte of the mcb
   361 0000583E 4801CA              <1>     add rdx, rcx    ;Now rdx points to the first byte outside the arena
   362 00005841 4839FA              <1>     cmp rdx, rdi    ;If rdx > rdi, we are ok
   363 00005844 7713                <1>     ja .okToLoad
   364                              <1>     ;Now check if this is a useless section. If so, we don't load it at all
   365 00005846 F705(6EDA0300)E000- <1>     test dword [sectHdr + imageSectionHdr.dCharacteristics], imgScnCntBSS | imgScnCntCode | imgScnCntData
   365 0000584E 0000                <1>
   366 00005850 0F853C030000        <1>     jnz .badFmtErr  ;If any of these bits set, error out
   367                              <1>     ;Else, just skip this section, goto next section
   368 00005856 59                  <1>     pop rcx
   369 00005857 EB3F                <1>     jmp short .gotoNextSection
   370                              <1> .okToLoad:
   371 00005859 8B0D(52DA0300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]   ;Get # of bytes to read
   372 0000585F 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   373 00005862 57                  <1>     push rdi    ;Save section in memory locally
   374 00005863 E84B030000          <1>     call .readDataFromHdl
   375 00005868 5F                  <1>     pop rdi
   376 00005869 59                  <1>     pop rcx
   377 0000586A 0F8222030000        <1>     jc .badFmtErr
   378                              <1>     ;Don't check for a zero section read as empty sections may be present!
   379 00005870 3B05(52DA0300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   380 00005876 0F8516030000        <1>     jne .badFmtErr
   381                              <1>     ;Data read ok, now fill in any zeros needed
   382 0000587C 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   383                              <1> 
   384 0000587F 51                  <1>     push rcx
   385                              <1>     ;Here do section padding
   386 00005880 4889F8              <1>     mov rax, rdi    ;Get the current address
   387 00005883 8B0D(FAD90300)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   388 00005889 FFC9                <1>     dec ecx ;Turn into a mask
   389 0000588B 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   390 0000588E FFC1                <1>     inc ecx
   391 00005890 4829C1              <1>     sub rcx, rax
   392 00005893 31C0                <1>     xor eax, eax
   393 00005895 F3AA                <1>     rep stosb
   394 00005897 59                  <1>     pop rcx
   395                              <1> .gotoNextSection:
   396 00005898 FFC9                <1>     dec ecx ;Decrement our section counter
   397 0000589A 7419                <1>     jz .doExeFixups
   398                              <1>     ;Read next section header in here
   399 0000589C 51                  <1>     push rcx
   400 0000589D 57                  <1>     push rdi
   401 0000589E 30C0                <1>     xor al, al  ;Move rel start of file
   402 000058A0 8B5590              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   403 000058A3 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   404 000058A7 31C9                <1>     xor ecx, ecx
   405 000058A9 E84ED6FFFF          <1>     call lseekHdl
   406 000058AE 5F                  <1>     pop rdi
   407 000058AF 59                  <1>     pop rcx
   408 000058B0 E919FFFFFF          <1>     jmp .loadLp
   409                              <1> .doExeFixups:
   410                              <1> ;Here we fixup addresses if needed
   411                              <1> ;If the program is loaded at its desired location never need to relocate.
   412                              <1> ;Else we need to have a .reloc section to see if we need to do relocations. 
   413                              <1> ;   If the program has had it's .reloc section stripped by the linker
   414                              <1> ;       or has no .reloc directory, we fail
   415                              <1> ;   Else, we read the .reloc directory in. It most likely will have no 
   416                              <1> ;       relocations anyway.
   417                              <1> 
   418                              <1> ;If program base = desired load, skip relocs
   419 000058B5 488B55B8            <1>     mov rdx, qword [rbp - execFrame.pProgBase]
   420 000058B9 483B15(F2D90300)    <1>     cmp rdx, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   421 000058C0 0F84C2000000        <1>     je .exeComplete
   422                              <1> ;If program has had relocs stripped, fail
   423 000058C6 0FB745A0            <1>     movzx eax, word [rbp - execFrame.wCOFFChars]
   424 000058CA 66A90100            <1>     test ax, imageFileRelocsStripped
   425 000058CE 0F85BE020000        <1>     jnz .badFmtErr
   426                              <1> ;If program has no .reloc section, fail
   427 000058D4 8B15(46DA0300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   428 000058DA 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   429 000058E0 0F82AC020000        <1>     jb .badFmtErr ;Need relocs but no .reloc directory exists
   430                              <1> ;Now we get the reloc section
   431 000058E6 8B55A8              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   432 000058E9 81C2B0000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   433                              <1>     ;eax now points to position in file of directory entry for reloc
   434 000058EF 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   435 000058F3 31C0                <1>     xor eax, eax
   436 000058F5 E802D6FFFF          <1>     call lseekHdl   ;Move handle there in file
   437 000058FA 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   438 000058FD B908000000          <1>     mov ecx, imageDataDirectory_size
   439                              <1>     ;Read 8 bytes into sectHdr space
   440 00005902 488D15(4ADA0300)    <1>     lea rdx, sectHdr
   441 00005909 E8A5020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   442 0000590E 85C0                <1>     test eax, eax
   443 00005910 0F847C020000        <1>     jz .badFmtErr
   444 00005916 39C8                <1>     cmp eax, ecx
   445 00005918 0F8574020000        <1>     jne .badFmtErr
   446                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   447 0000591E 8B35(4ADA0300)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   448 00005924 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   449 00005926 7460                <1>     jz .exeComplete   ;... including if overlay
   450 00005928 480375B8            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   451                              <1>     ;Now rsi points to where in memory the relocation data table is
   452                              <1>     ;Now compute the relocation factor =
   453                              <1>     ;   Difference from the load address and prefered
   454 0000592C 488B45B8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   455 00005930 482B05(F2D90300)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase] 
   456 00005937 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   457 0000593B 7507                <1>     jne .notOverlayReloc
   458 0000593D 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   459 00005941 034308              <1>     add eax, dword [rbx + loadOvly.dRelocFct]   ;Add the overlay reloc factor
   460                              <1> .notOverlayReloc:
   461 00005944 48894588            <1>     mov qword [rbp - execFrame.qRelocVal], rax  ;Save relocation value
   462 00005948 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   463                              <1>     ;rsi points to relocation data table in memory
   464 0000594B 8B0D(4EDA0300)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   465 00005951 85C9                <1>     test ecx, ecx    ;If no relocations, skip
   466 00005953 7433                <1>     jz .exeComplete
   467                              <1>     ;rsi points to the first base relocation block. The relocations begin
   468                              <1>     ; after the first block
   469                              <1>     ;ecx has the number of base relocation blocks to process.
   470                              <1> .nextBlock:
   471 00005955 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   472 00005956 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   473 00005958 488B7DB8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   474 0000595C 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   475 0000595F 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes in block
   476 00005962 67E31E              <1>     jecxz .blockDone    
   477 00005965 81E908000000        <1>     sub ecx, 8
   478 0000596B 4881C608000000      <1>     add rsi, 8  ;Go to the start of the directory data
   479 00005972 D1E9                <1>     shr ecx, 1  ;Get number of directories = # of relocs to do
   480                              <1> .blockNotDone:
   481 00005974 66AD                <1>     lodsw   ;Get the next page offset word
   482 00005976 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   483                              <1>     ;rdi points to base, rax give offset into 4Kb page
   484 0000597B 48011C07            <1>     add qword [rdi + rax], rbx    ;Relocation factor was saved in rbx
   485 0000597F FFC9                <1>     dec ecx
   486 00005981 75F1                <1>     jnz .blockNotDone
   487                              <1> .blockDone:
   488 00005983 59                  <1>     pop rcx
   489 00005984 FFC9                <1>     dec ecx
   490 00005986 75CD                <1>     jnz .nextBlock
   491                              <1> .exeComplete:
   492 00005988 8B05(EAD90300)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   493 0000598E 480345B8            <1>     add rax, qword [rbp - execFrame.pProgBase]
   494 00005992 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   495                              <1>     ;Now we copy the header into the memory space to pspPtr+psp_size
   496 00005996 31C9                <1>     xor ecx, ecx
   497 00005998 31D2                <1>     xor edx, edx
   498 0000599A 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]    ;Get the handle
   499 0000599E 31C0                <1>     xor eax, eax
   500 000059A0 E857D5FFFF          <1>     call lseekHdl
   501 000059A5 8B0D(16DA0300)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   502 000059AB 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pPSPBase] 
   503 000059AF 4881C200010000      <1>     add rdx, psp_size
   504 000059B6 E8F8010000          <1>     call .readDataFromHdl
   505 000059BB 0F82D1010000        <1>     jc .badFmtErr
   506 000059C1 85C0                <1>     test eax, eax
   507 000059C3 0F84C9010000        <1>     jz .badFmtErr
   508 000059C9 39C1                <1>     cmp ecx, eax
   509 000059CB 0F85C1010000        <1>     jnz .badFmtErr
   510 000059D1 FF15(A4C00300)      <1>     call qword [registerDLL]    ;Now we register the DLL and any import/exports
   511 000059D7 0F82B5010000        <1>     jc .badFmtErr   ;If this errors out for some reason, quit loading EXE
   512 000059DD E9A1000000          <1>     jmp .buildChildPSP
   513                              <1> .loadCom:
   514                              <1>     ;File is open here, so just read the file into memory. 
   515                              <1>     ;The file cannot exceed 64Kb in size. COM ONLY for small files!!!!
   516                              <1>     ;Allocate 64Kb of memory, or as much as we can
   517 000059E2 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   518 000059E6 7450                <1>     je .comOverlay
   519 000059E8 BBFFFF0000          <1>     mov ebx, 0FFFFh ;64Kb pls
   520 000059ED 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   521 000059F0 55                  <1>     push rbp
   522 000059F1 E85BF3FFFF          <1>     call allocateMemory
   523 000059F6 5D                  <1>     pop rbp
   524 000059F7 734C                <1>     jnc .comallocOk
   525 000059F9 3C08                <1>     cmp al, errNoMem
   526 000059FB 0F8596010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   527                              <1>     ;rbx should have the amount available
   528                              <1>     ;We check if this value is psp_size more than filesize
   529 00005A01 53                  <1>     push rbx    ;Save new minimum size
   530 00005A02 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   531 00005A07 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   532 00005A0B 31D2                <1>     xor edx, edx    ;Go to end of file
   533 00005A0D E8EAD4FFFF          <1>     call lseekHdl
   534                              <1>     ;eax has file size
   535 00005A12 5B                  <1>     pop rbx ;Get back max alloc size
   536 00005A13 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   537 00005A15 29C2                <1>     sub edx, eax
   538 00005A17 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   539 00005A1D 0F82E2FBFFFF        <1>     jb .insufficientMemory   ;Fail
   540 00005A23 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   541 00005A26 55                  <1>     push rbp
   542 00005A27 E825F3FFFF          <1>     call allocateMemory
   543 00005A2C 5D                  <1>     pop rbp
   544 00005A2D 0F8264010000        <1>     jc .cleanAndFail
   545 00005A33 E90D000000          <1>     jmp .comallocOk
   546                              <1> .comOverlay:
   547                              <1>     ;Here we simply read the file into the buffer provided
   548 00005A38 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   549 00005A3C 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   550 00005A3F 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   551 00005A43 EB0A                <1>     jmp short .comRead
   552                              <1> .comallocOk:
   553                              <1>     ;rax should point to the first byte
   554 00005A45 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   555 00005A49 480500010000        <1>     add rax, psp_size
   556                              <1> .comRead:
   557 00005A4F 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   558                              <1> 
   559 00005A53 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   560 00005A58 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   561 00005A5C 31D2                <1>     xor edx, edx    ;Go to end of file
   562 00005A5E E899D4FFFF          <1>     call lseekHdl
   563                              <1>     ;eax has filesize now
   564 00005A63 50                  <1>     push rax    ;Save filesize
   565 00005A64 31C0                <1>     xor eax, eax    ;Reposition to start of file
   566 00005A66 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   567 00005A6A 31D2                <1>     xor edx, edx    ;Go to start of file
   568 00005A6C E88BD4FFFF          <1>     call lseekHdl
   569 00005A71 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   570 00005A72 488B55B8            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   571 00005A76 E838010000          <1>     call .readDataFromHdl   ;Read from the file handle
   572 00005A7B 488B45B8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   573 00005A7F 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   574                              <1> .buildChildPSP:
   575                              <1>     ;We can close handle now
   576 00005A83 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   577 00005A87 55                  <1>     push rbp
   578 00005A88 E884D3FFFF          <1>     call closeFileHdl   ;Close the file
   579 00005A8D 5D                  <1>     pop rbp
   580                              <1> 
   581                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   582 00005A8E 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   583 00005A92 0F84D8000000        <1>     je .overlayExit
   584                              <1>     ;Now build the PSP
   585 00005A98 8B75B0              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   586 00005A9B 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   587 00005A9F 52                  <1>     push rdx
   588 00005AA0 55                  <1>     push rbp
   589 00005AA1 E81CF8FFFF          <1>     call createPSP
   590 00005AA6 5D                  <1>     pop rbp
   591 00005AA7 5A                  <1>     pop rdx
   592                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   593 00005AA8 488915(14C40300)    <1>     mov qword [currentPSP], rdx
   594 00005AAF E81E100000          <1>     call dosCrit1Enter
   595 00005AB4 E821010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   596                              <1> 
   597 00005AB9 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   598 00005AC0 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi ;and set it!
   599                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   600                              <1>     ; and set FS to point to the PSP
   601 00005AC7 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   602                              <1> 
   603 00005ACB 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   604 00005ACF B925000000          <1>     mov ecx, fcb_size
   605 00005AD4 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   606 00005AD8 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   607 00005ADA F3A4                <1>     rep movsb   ;Copy fcb 1 over
   608 00005ADC 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   609 00005AE0 B925000000          <1>     mov ecx, fcb_size
   610 00005AE5 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   611 00005AE9 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   612 00005AEB F3A4                <1>     rep movsb   ;Copy fcb 2 over
   613 00005AED 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   614 00005AF1 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   615 00005AF8 B980000000          <1>     mov ecx, 80h
   616 00005AFD F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   617                              <1> 
   618 00005AFF 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   619 00005B01 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   620                              <1> 
   621                              <1>     ;Put PSP base value in edx:eax to place in FS, dont rely on this in future!
   622 00005B04 B9000100C0          <1>     mov ecx, 0C0000100h ;R/W FS MSR
   623 00005B09 89D0                <1>     mov eax, edx    ;Move low dword address into rax
   624 00005B0B 48C1EA20            <1>     shr rdx, 20h    ;Shift high dword in low dword
   625 00005B0F 0F30                <1>     wrmsr   ;Write the new value to FS MSR
   626                              <1> 
   627 00005B11 E85F0B0000          <1>     call getUserRegs    ;Need to get Int 42h address from stack
   628 00005B16 488B4648            <1>     mov rax, qword [rsi + callerFrame.rip]  ;Get parent return address
   629 00005B1A 4889470A            <1>     mov qword [rdi + psp.oldInt42h], rax    ;and save it in PSP
   630 00005B1E 4889C2              <1>     mov rdx, rax    ;Move return address to rdx to set up the Interrupt Vector
   631 00005B21 B042                <1>     mov al, 42h
   632 00005B23 E8D5110000          <1>     call setIntVector   ;bx preserved by this call
   633                              <1> 
   634                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   635 00005B28 88D8                <1>     mov al, bl
   636 00005B2A 30DB                <1>     xor bl, bl
   637 00005B2C E8680B0000          <1>     call setDrive
   638 00005B31 7302                <1>     jnc .drive1Ok
   639 00005B33 B3FF                <1>     mov bl, -1
   640                              <1> .drive1Ok:
   641 00005B35 88F8                <1>     mov al, bh
   642 00005B37 30FF                <1>     xor bh, bh
   643 00005B39 E85B0B0000          <1>     call setDrive
   644 00005B3E 7302                <1>     jnc .drive2Ok
   645 00005B40 B7FF                <1>     mov bh, -1
   646                              <1> .drive2Ok:
   647                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   648                              <1>     ;rdi has pointer to psp
   649 00005B42 8B75B0              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   650                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   651 00005B45 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   652 00005B4A 48B8F8FFFFFFFFFFFF- <1>     mov rax, ~7     ;Clear the bottom 3 bits
   652 00005B53 FF                  <1>
   653 00005B54 4821C6              <1>     and rsi, rax    ;To align downwards
   654                              <1>     ;We align stack to qword. x64 ABI requires paragraph alignment.
   655                              <1>     ;That is the job of the runtime to handle.
   656 00005B57 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   657 00005B5B 741C                <1>     je .xfrProgram
   658 00005B5D 488B4598            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   659 00005B61 488B55D8            <1>     mov rdx, qword [rbp - execFrame.pParam]
   660 00005B65 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   661 00005B69 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   662 00005B6D 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   663                              <1> .overlayExit:
   664 00005B70 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   665 00005B73 5D                  <1>     pop rbp ;Point rsp to the return address
   666 00005B74 E9960F0000          <1>     jmp extGoodExit ;And return!
   667                              <1> .xfrProgram:
   668 00005B79 FA                  <1>     cli
   669 00005B7A 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   670 00005B7D C605(FDC30300)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   671 00005B84 FB                  <1>     sti
   672 00005B85 FF7598              <1>     push qword [rbp - execFrame.pProgEP]
   673 00005B88 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   674 00005B8B 4989F9              <1>     mov r9, rdi
   675 00005B8E 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   676                              <1>     return  ;Return to child task
    13                              <2> %%_ret:
    14 00005B91 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   677                              <1> ;r8 is guaranteed to have a copy of the PSP.
   678                              <1> ;ax is guaranteed to have the validity signatures in AH and AL.
   679                              <1> ;Everything else is optional and potentially changable at a later stage
   680                              <1> 
   681                              <1> .badFmtErr:
   682 00005B92 B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   683                              <1> .cleanAndFail:
   684                              <1> ;Close the open file and any open resources and fail
   685 00005B97 E82F000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   686 00005B9C E83B0F0000          <1>     call dosCrit1Exit
   687 00005BA1 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   688 00005BA5 50                  <1>     push rax    ;Save error code
   689 00005BA6 55                  <1>     push rbp
   690 00005BA7 E865D2FFFF          <1>     call closeFileHdl
   691 00005BAC 5D                  <1>     pop rbp
   692 00005BAD 58                  <1>     pop rax
   693 00005BAE E994F9FFFF          <1>     jmp .badExit
   694                              <1> 
   695                              <1> .readDataFromHdl:
   696                              <1> ;Input: ecx = Number of bytes to transfer
   697                              <1> ;       rdx = Ptr to the buffer to use
   698 00005BB3 52                  <1>     push rdx
   699 00005BB4 E812000000          <1>     call .clearArenaOwner   ;Entering critical section!
   700 00005BB9 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   701 00005BBD 55                  <1>     push rbp
   702 00005BBE E88DD2FFFF          <1>     call readFileHdl
   703 00005BC3 5D                  <1>     pop rbp
   704 00005BC4 E811000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   705 00005BC9 5A                  <1>     pop rdx
   706                              <1>     return
    13                              <2> %%_ret:
    14 00005BCA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> .clearArenaOwner:
   708 00005BCB 53                  <1>     push rbx
   709 00005BCC 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   710 00005BCE E8FF0E0000          <1>     call dosCrit1Enter
   711 00005BD3 E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   712 00005BD8 5B                  <1>     pop rbx
   713                              <1>     return
    13                              <2> %%_ret:
    14 00005BD9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   714                              <1> .setPSPArenaOwner:
   715                              <1> ;Sets the current PSP as the arena owner
   716 00005BDA 53                  <1>     push rbx
   717 00005BDB 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP]
   718 00005BE2 E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   719 00005BE7 E8F00E0000          <1>     call dosCrit1Exit
   720 00005BEC 5B                  <1>     pop rbx
   721                              <1>     return
    13                              <2> %%_ret:
    14 00005BED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   722                              <1> .setProgOrEnvArenaOwnerToRBX:
   723                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   724 00005BEE 9C                  <1>     pushfq
   725 00005BEF 50                  <1>     push rax
   726                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   727                              <1>     ;This is because they are set up at separate points in the routine!
   728 00005BF0 488B45C0            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   729 00005BF4 E80C000000          <1>     call .writeArenaHeaderOwner
   730 00005BF9 488B45C8            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   731 00005BFD E803000000          <1>     call .writeArenaHeaderOwner
   732 00005C02 58                  <1>     pop rax
   733 00005C03 9D                  <1>     popfq
   734                              <1>     return
    13                              <2> %%_ret:
    14 00005C04 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   735                              <1> .writeArenaHeaderOwner:
   736                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   737                              <1> ;       rbx = Owner ID
   738 00005C05 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   739                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00005C08 74FA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   740 00005C0A 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   741 00005C10 48895801            <1>     mov qword [rax + 1], rbx
   742                              <1>     return
    13                              <2> %%_ret:
    14 00005C14 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    38                                  %include "./Source/Kernel/Local/local.asm"
     1                              <1> ;Localisation based functions live here
     2                              <1> 
     3                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
     4                              <1> ;al = 0 => Get the switch char
     5                              <1> ;al = 1 => Set the switch char to whats in DL
     6                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
     7                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
     8                              <1> ;       Always returns -1 => /DEV/ optional
     9                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    10                              <1> ;       Input value is ignored
    11 00005C15 3C01                <1>     cmp al, 01
    12 00005C17 740B                <1>     je .setSC
    13 00005C19 7210                <1>     jb .getSC
    14 00005C1B 3C03                <1>     cmp al, 03
    15 00005C1D 7214                <1>     jb .getDev
    16 00005C1F 741C                <1>     je .setDev
    17 00005C21 B0FF                <1>     mov al, -1
    18                              <1>     return
    13                              <2> %%_ret:
    14 00005C23 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> .setSC:
    20 00005C24 8815(C6C30300)      <1>     mov byte [switchChar], dl
    21                              <1>     return
    13                              <2> %%_ret:
    14 00005C2A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> .getSC:
    23 00005C2B 8A15(C6C30300)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    24 00005C31 EB02                <1>     jmp short .getRet
    25                              <1> .getDev:
    26 00005C33 B2FF                <1>     mov dl, -1
    27                              <1> .getRet:
    28 00005C35 E83B0A0000          <1>     call getUserRegs
    29 00005C3A 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    30                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    31                              <1>     return
    13                              <2> %%_ret:
    14 00005C3D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> 
    34                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    35                              <1> ;Currently only accept subfunction al = 0, current country
    36                              <1> ;AL > 0 => errInvFnc, Subfunction error
    37                              <1> ;rdx = Ptr to buffer. If -1 => Set Country information. Also error for now.
    38 00005C3E 84C0                <1>     test al, al
    39 00005C40 740A                <1>     jz .currentCountry
    40                              <1> .invalidFunction:
    41 00005C42 B801000000          <1>     mov eax, errInvFnc
    42 00005C47 E9D10E0000          <1>     jmp extErrExit
    43                              <1> .currentCountry:
    44 00005C4C 4881FAFFFFFFFF      <1>     cmp rdx, -1
    45 00005C53 74ED                <1>     je .invalidFunction
    46 00005C55 488D35BEA3FFFF      <1>     lea rsi, ctryTbl
    47 00005C5C 4889D7              <1>     mov rdi, rdx
    48 00005C5F B926000000          <1>     mov ecx, countryStruc_size
    49 00005C64 F3A4                <1>     rep movsb
    50 00005C66 31C0                <1>     xor eax, eax
    51 00005C68 E9A20E0000          <1>     jmp extGoodExit
    52                              <1> 
    53                              <1> 
    54                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    55                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    56 00005C6D C3                  <1>     ret
    39                                  %include "./Source/Kernel/ctrlc.asm"
     1                              <1> 
     2                              <1> fullcriticalErrorInvoke:
     3 00005C6E B803000000          <1>     mov eax, 03 ;Always fail for now
     4 00005C73 F9                  <1>     stc
     5                              <1>     return
    13                              <2> %%_ret:
    14 00005C74 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     6                              <1> xlatHardError:
     7                              <1> ;Translates a hard error code to a generic DOS error
     8                              <1> ;Input: edi = eax = Hard Error Code
     9 00005C75 50                  <1>     push rax
    10 00005C76 3D13000000          <1>     cmp eax, drvErrShft
    11 00005C7B 7205                <1>     jb .skipXlat
    12 00005C7D 0513000000          <1>     add eax, drvErrShft
    13                              <1> .skipXlat:
    14 00005C82 880547A6FFFF        <1>     mov byte [hardErrorStack], al   ;Store this error code here
    15 00005C88 58                  <1>     pop rax
    16 00005C89 56                  <1>     push rsi
    17 00005C8A 488D359AA4FFFF      <1>     lea rsi, extErrTbl
    18 00005C91 E8E00E0000          <1>     call setErrorVars
    19 00005C96 5E                  <1>     pop rsi
    20                              <1>     return
    13                              <2> %%_ret:
    14 00005C97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> diskDevErr:
    23                              <1> ;Called, NOT Jumped to. 
    24                              <1> ;Input: rdi = Disk Buffer pointer
    25                              <1> ;       eax = Status word (Zero Extended)
    26                              <1> ;       rbp = Disk DPB pointer
    27                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    28                              <1> ;Output: al = Int 44h response (0-3)
    29                              <1> ; All other registers preserved
    30 00005C98 48893D(04C40300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    31 00005C9F 89C7                <1>     mov edi, eax    ;Store status word in rdi
    32 00005CA1 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    33 00005CA4 8A25(5CC40300)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    34 00005CAA 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    35                              <1>     ;Test for correct buffer data type
    36 00005CAD 53                  <1>     push rbx    ;Save rbx temporarily
    37 00005CAE 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    38 00005CB1 F6C301              <1>     test bl, dosBuffer
    39 00005CB4 7505                <1>     jnz .df0
    40 00005CB6 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    41 00005CB9 EB17                <1>     jmp short .df3
    42                              <1> .df0:
    43 00005CBB F6C302              <1>     test bl, fatBuffer
    44 00005CBE 7505                <1>     jnz .df1
    45 00005CC0 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    46 00005CC3 EB0D                <1>     jmp short .df3
    47                              <1> .df1:
    48 00005CC5 F6C304              <1>     test bl, dirBuffer
    49 00005CC8 7505                <1>     jnz .df2
    50 00005CCA 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    51 00005CCD EB03                <1>     jmp short .df3
    52                              <1> .df2:
    53 00005CCF 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    54                              <1> .df3:
    55 00005CD2 5B                  <1>     pop rbx
    56 00005CD3 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    57 00005CD7 E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    58 00005CDC 488B2D(7EC70300)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    59 00005CE3 488B3D(04C40300)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    60                              <1>     return
    13                              <2> %%_ret:
    14 00005CEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> 
    62                              <1> charDevErr:
    63                              <1> ;Called with ah with additional bits
    64 00005CEB 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
    65                              <1> criticalErrorSetup:
    66 00005CEE 8825(5CC40300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    67 00005CF4 48892D(7EC70300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
    68 00005CFB 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    69                              <1>     ;For now, fall through, but need much work to change it later! 
    70                              <1> 
    71                              <1> 
    72                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    73                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    74                              <1> ; to the critical error handler.
    75                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    76                              <1> ; and with Int44Bitfield set
    77                              <1> ;               AH = Critical Error Bitfield
    78                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    79                              <1> ;               Bit 6 - Reserved
    80                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    81                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    82                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    83                              <1> ;               Bits [2-1] = Affected Disk Error
    84                              <1> ;                     0 0   DOS area
    85                              <1> ;                     0 1   FAT area
    86                              <1> ;                     1 0   Directory area
    87                              <1> ;                     1 1   Data area
    88                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    89                              <1> ;               AL  = Failing drive number if AH[7] = 0
    90                              <1> ;               DIL = Error code for errorMsg
    91                              <1> ;               RSI = EA of Device Header for which device the error occured
    92                              <1> ;Return:
    93                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    94                              <1> ;                  = 1 - Retry the Operation    (Retry)
    95                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
    96                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    97                              <1> ; Return response from int 44h in al
    98                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
    99                              <1> ; This function will terminate the program if an abort was requested!
   100                              <1> ; This function also destroys RBP
   101 00005D01 803D(FCC30300)01    <1>     cmp byte [critErrFlag], 1
   102 00005D08 7204                <1>     jb .noIntError  ;If not 0, enter
   103 00005D0A B003                <1>     mov al, critFail    ;Else, return Fail always
   104 00005D0C EB51                <1>     jmp short .exit     ;Don't translate fail to abort
   105                              <1> .noIntError:
   106 00005D0E FA                  <1>     cli ;Disable Interrupts
   107 00005D0F FE05(FCC30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   108 00005D15 FE0D(FDC30300)      <1>     dec byte [inDOS]    ;Exiting DOS
   109 00005D1B 488925(54C40300)    <1>     mov qword [xInt44hRSP], rsp
   110 00005D22 488B25(6FC40300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   111 00005D29 31ED                <1>     xor ebp, ebp    ;Always zeroed
   112 00005D2B CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   113 00005D2D 488B25(54C40300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   114 00005D34 C605(FCC30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   115 00005D3B FE05(FDC30300)      <1>     inc byte [inDOS]    ;Reenter DOS
   116 00005D41 FB                  <1>     sti ;Reenable Interrupts
   117                              <1>     ;Now we check that the response given was allowed, and translate if needed
   118                              <1> .checkResponse:
   119 00005D42 3C00                <1>     cmp al, critIgnore
   120 00005D44 7421                <1>     je .checkIgnore
   121 00005D46 3C01                <1>     cmp al, critRetry
   122 00005D48 7428                <1>     je .checkRetry
   123 00005D4A 3C03                <1>     cmp al, critFail
   124 00005D4C 752F                <1>     jne .abort   ;Must be abort
   125                              <1> .setFail:   ;Here is for fail
   126 00005D4E B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   127 00005D50 FE05(5EC40300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   128 00005D56 F605(5CC40300)08    <1>     test byte [Int44bitfld], critFailOK
   129 00005D5D 741E                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   130                              <1> .exit:
   131 00005D5F C605(FEC30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   132                              <1>     return
    13                              <2> %%_ret:
    14 00005D66 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   133                              <1> .checkIgnore:
   134 00005D67 F605(5CC40300)20    <1>     test byte [Int44bitfld], critIgnorOK
   135 00005D6E 75EF                <1>     jnz .exit
   136 00005D70 EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   137                              <1> .checkRetry:
   138 00005D72 F605(5CC40300)10    <1>     test byte [Int44bitfld], critRetryOK
   139 00005D79 75E4                <1>     jnz .exit   
   140 00005D7B EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   141                              <1> .abort:
   142                              <1> ;Prepare to abort. We abort from within!
   143                              <1> ;If a network request requests abort, translate to fail
   144 00005D7D 803D(F2C60300)FF    <1>     cmp byte [dosInvoke], -1
   145 00005D84 7509                <1>     jne .kill   ;If this is zero, local invokation
   146 00005D86 C605(8AC40300)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   147 00005D8D EBD0                <1>     jmp short .exit
   148                              <1> .kill:
   149 00005D8F 66893D(00C40300)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   150 00005D96 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   151 00005D98 C605(F6C60300)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   152 00005D9F E94CF6FFFF          <1>     jmp terminateClean.altEP
   153                              <1> 
   154                              <1> ctrlBreakHdlr:
   155 00005DA4 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   156 00005DA6 E8A6C4FFFF          <1>     call printCaretASCII
   157 00005DAB E8D1C4FFFF          <1>     call printCRLF
   158                              <1>     ;Reset the console back to 0
   159 00005DB0 C605(88C40300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   160                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   161                              <1> .exceptEP:
   162                              <1> ;If return via RET/RET 8 with CF set, DOS will abort program with errorlevel 0
   163                              <1> ;Else (RET/RET 8 with CF clear or IRET with CF ignored)
   164                              <1> ;   interrupted DOS call is restarted
   165 00005DB7 FA                  <1> 	cli
   166 00005DB8 488B25(6FC40300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   167 00005DBF E8E00C0000          <1> 	call dosPopRegs ;Get user state back
   168 00005DC4 C605(FDC30300)00    <1>     mov byte [inDOS], 0 ;Make sure we "exit" DOS 
   169 00005DCB C605(FCC30300)00    <1>     mov byte [critErrFlag], 0
   170 00005DD2 488925(1CC40300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   171 00005DD9 F8                  <1>     clc
   172 00005DDA CD43                <1>     int 43h ;Call critical error handler
   173 00005DDC FA                  <1>     cli ;Clear interrupts again
   174 00005DDD 488905(28C40300)    <1>     mov qword [oldRAX], rax ;Save rax
   175 00005DE4 9C                  <1>     pushfq  ;Get flags in rax
   176 00005DE5 58                  <1>     pop rax 
   177 00005DE6 483B25(1CC40300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   178 00005DED 750C                <1>     jne .checkCF
   179                              <1> .returnToDOS:
   180 00005DEF 488B05(28C40300)    <1>     mov rax, qword [oldRAX]
   181 00005DF6 E94F0B0000          <1>     jmp functionDispatch    ;Goto int 41h
   182                              <1> .checkCF:
   183 00005DFB 488B25(1CC40300)    <1>     mov rsp, qword [xInt43hRSP]  ;Account for the flags and SS:RSP left on stack
   184 00005E02 A801                <1>     test al, 1  ;CF set?
   185 00005E04 74E9                <1>     jz .returnToDOS ;If yes, subfunction number must be in al
   186 00005E06 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   187 00005E0B C605(80C40300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   188 00005E12 E9330B0000          <1>     jmp functionDispatch
   189                              <1> 
   190                              <1> ;CPU Exception handlers
   191                              <1> ;If a CPU exception occurs, and inDOS = 0, the default behaviour will be to 
   192                              <1> ; CTRL+C exit.
   193                              <1> ; If inDOS > 0, then we assume the error is within DOS and thus we halt the
   194                              <1> ; system.
   195                              <1> ; Also halt if the application is it's own parent.
   196                              <1> ;An application should hook these interupts if they wish to not 
   197                              <1> ; CTRL+C exit, and instead return to DOS.
   198                              <1> i0:
   199 00005E17 31C0                <1>     xor eax, eax
   200 00005E19 E9AB000000          <1>     jmp cpu_2args
   201                              <1> i1:
   202 00005E1E B801000000          <1>     mov eax, 1
   203 00005E23 E9A1000000          <1>     jmp cpu_2args
   204                              <1> i2:
   205 00005E28 B802000000          <1>     mov eax, 2
   206 00005E2D E997000000          <1>     jmp cpu_2args
   207                              <1> i3:
   208 00005E32 B803000000          <1>     mov eax, 3
   209 00005E37 E98D000000          <1>     jmp cpu_2args
   210                              <1> i4:
   211 00005E3C B804000000          <1>     mov eax, 4
   212 00005E41 E983000000          <1>     jmp cpu_2args
   213                              <1> i5:
   214 00005E46 B805000000          <1>     mov eax, 5
   215 00005E4B EB7C                <1>     jmp short cpu_2args
   216                              <1> i6:
   217 00005E4D B806000000          <1>     mov eax, 6
   218 00005E52 EB75                <1>     jmp short cpu_2args
   219                              <1> i7:
   220 00005E54 B807000000          <1>     mov eax, 7
   221 00005E59 EB6E                <1>     jmp short cpu_2args
   222                              <1> i8:
   223 00005E5B B808000000          <1>     mov eax, 8
   224 00005E60 EB60                <1>     jmp short cpu_3args
   225                              <1> i9:
   226 00005E62 B809000000          <1>     mov eax, 9
   227 00005E67 EB60                <1>     jmp short cpu_2args
   228                              <1> i10:
   229 00005E69 B80A000000          <1>     mov eax, 0Ah
   230 00005E6E EB52                <1>     jmp short cpu_3args
   231                              <1> i11:
   232 00005E70 B80B000000          <1>     mov eax, 0Bh
   233 00005E75 EB4B                <1>     jmp short cpu_3args
   234                              <1> i12:
   235 00005E77 B80C000000          <1>     mov eax, 0Ch
   236 00005E7C EB44                <1>     jmp short cpu_3args
   237                              <1> i13:
   238 00005E7E B80D000000          <1>     mov eax, 0Dh
   239 00005E83 EB3D                <1>     jmp short cpu_3args
   240                              <1> i14:
   241 00005E85 B80E000000          <1>     mov eax, 0Eh
   242 00005E8A EB2F                <1>     jmp short cpu_4args
   243                              <1> i15:
   244 00005E8C B80F000000          <1>     mov eax, 0Fh
   245 00005E91 EB36                <1>     jmp short cpu_2args
   246                              <1> i16:
   247 00005E93 B810000000          <1>     mov eax, 10h
   248 00005E98 EB2F                <1>     jmp short cpu_2args
   249                              <1> i17:
   250 00005E9A B811000000          <1>     mov eax, 11h
   251 00005E9F EB21                <1>     jmp short cpu_3args
   252                              <1> i18:
   253 00005EA1 B812000000          <1>     mov eax, 12h
   254 00005EA6 EB21                <1>     jmp short cpu_2args
   255                              <1> i19:
   256 00005EA8 B813000000          <1>     mov eax, 13h
   257 00005EAD EB1A                <1>     jmp short cpu_2args
   258                              <1> i20:
   259 00005EAF B814000000          <1>     mov eax, 14h
   260 00005EB4 EB13                <1>     jmp short cpu_2args
   261                              <1> i21:
   262 00005EB6 B815000000          <1>     mov eax, 15h
   263                              <1> cpu_4args:
   264 00005EBB B903000000          <1>     mov ecx, 3
   265 00005EC0 EB0C                <1>     jmp short cpu_exception
   266                              <1> cpu_3args:
   267 00005EC2 B902000000          <1>     mov ecx, 2
   268 00005EC7 EB05                <1>     jmp short cpu_exception
   269                              <1> cpu_2args:
   270 00005EC9 B901000000          <1>     mov ecx, 1
   271                              <1> cpu_exception:
   272                              <1> ;Enter with:
   273                              <1> ; eax = Exception number in binary
   274                              <1> ; ecx = Number of arguments to print and pop from stack - 1 
   275 00005ECE 488D356D020000      <1>     lea rsi, .fatalt0   ;Get the ptr
   276 00005ED5 BB29000000          <1>     mov ebx, fatalt0L  ;Get the length
   277 00005EDA E81B020000          <1>     call .writeExceptionMessage
   278                              <1> 
   279 00005EDF 803D(FDC30300)01    <1>     cmp byte [inDOS], 1
   280 00005EE6 7327                <1>     jae .introStop
   281 00005EE8 3D02000000          <1>     cmp eax, 2
   282 00005EED 7420                <1>     je .introStop
   283                              <1> 
   284 00005EEF 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP] ;If a command shell craps out, Halt
   285 00005EF6 483B5B22            <1>     cmp rbx, qword [rbx + psp.parentPtr]
   286 00005EFA 7413                <1>     je .introStop
   287                              <1> 
   288 00005EFC 488D3568020000      <1>     lea rsi, .fatal1
   289 00005F03 BBC1000000          <1>     mov ebx, fatal1L
   290 00005F08 E8ED010000          <1>     call .writeExceptionMessage
   291 00005F0D EB18                <1>     jmp short .introEnd
   292                              <1> .introStop:
   293 00005F0F C605(82DA0300)FF    <1>     mov byte [haltDOS], -1
   294 00005F16 488D3512030000      <1>     lea rsi, .fatalHalt   ;Get the ptr
   295 00005F1D BB19000000          <1>     mov ebx, fatalHaltL  ;Get the length
   296 00005F22 E8D3010000          <1>     call .writeExceptionMessage
   297                              <1> .introEnd:
   298 00005F27 488D3D(72DA0300)    <1>     lea rdi, byteBuffer
   299 00005F2E E895010000          <1>     call .printbyte ;Store the error code in the byte buffer
   300 00005F33 488D35(72DA0300)    <1>     lea rsi, byteBuffer
   301 00005F3A BB02000000          <1>     mov ebx, 2  ;Print the two nybbles
   302 00005F3F E8B6010000          <1>     call .writeExceptionMessage
   303                              <1> 
   304 00005F44 488D35E1020000      <1>     lea rsi, .fatal2
   305 00005F4B BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   306 00005F50 E8A5010000          <1>     call .writeExceptionMessage
   307                              <1> 
   308 00005F55 80F901              <1>     cmp cl, 1
   309 00005F58 0F87D0000000        <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   310                              <1> .cpurollprint:
   311 00005F5E 488D3D(72DA0300)    <1>     lea rdi, byteBuffer
   312 00005F65 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   313                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   314 00005F69 B108                <1>     mov cl, 8    ;8 bytes
   315                              <1> .cpurollprint1:
   316 00005F6B 48C1C208            <1>     rol rdx, 8
   317 00005F6F 88D0                <1>     mov al, dl
   318 00005F71 52                  <1>     push rdx
   319 00005F72 E851010000          <1>     call .printbyte
   320 00005F77 5A                  <1>     pop rdx
   321 00005F78 FEC9                <1>     dec cl
   322 00005F7A 75EF                <1>     jnz .cpurollprint1
   323                              <1> 
   324 00005F7C BB10000000          <1>     mov ebx, 16 ;Print the 16 nybbles
   325 00005F81 488D35(72DA0300)    <1>     lea rsi, byteBuffer
   326 00005F88 E86D010000          <1>     call .writeExceptionMessage
   327                              <1> 
   328 00005F8D BB03000000          <1>     mov ebx, crlfL
   329 00005F92 488D35AF020000      <1>     lea rsi, .crlf
   330 00005F99 E85C010000          <1>     call .writeExceptionMessage    
   331                              <1> 
   332 00005F9E F605(82DA0300)FF    <1>     test byte [haltDOS], -1
   333 00005FA5 7534                <1>     jnz .fatalStop
   334 00005FA7 E839010000          <1>     call .readInputChar
   335                              <1>     ;Set error code to General Failure
   336 00005FAC 66C705(00C40300)1F- <1>     mov word [errorExCde], errGF
   336 00005FB4 00                  <1>
   337 00005FB5 C605(02C40300)04    <1>     mov byte [errorAction], eActAbt
   338 00005FBC C605(03C40300)07    <1>     mov byte [errorClass], eClsAppFlt
   339 00005FC3 C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   340 00005FCA B8FF4C0000          <1>     mov eax, 4cFFh
   341 00005FCF C605(80C40300)FF    <1>     mov byte [ctrlCExit], -1
   342                              <1>     ;If a -1 error code and ctrlC exit and the extended error
   343                              <1>     ; setup as above, chances are it was a CPU error
   344 00005FD6 E96F090000          <1>     jmp functionDispatch    ;Call Int 41h politely, clean up resources
   345                              <1> .fatalStop:
   346                              <1> ;This is called if inDOS > 1 or NMI occured
   347                              <1> ;Waits 1 minute then reboots
   348 00005FDB B800820000          <1>     mov eax, 8200h  ;Exit all critical sections
   349 00005FE0 CD4A                <1>     int 4Ah
   350 00005FE2 E8EB0A0000          <1>     call dosCrit1Enter  ;Get the lock to internal DOS structures
   351 00005FE7 E8FA0A0000          <1>     call dosCrit2Enter  ;Get the lock to end all multitasking
   352 00005FEC E866C8FFFF          <1>     call getDateAndTimeOld  ;Get time packed in edx (edx[0:4] = Seconds/2)
   353 00005FF1 89D3                <1>     mov ebx, edx
   354 00005FF3 81E31F000000        <1>     and ebx, 1Fh    ;Save the relevent bits
   355                              <1> .loopForNextSecond:
   356 00005FF9 E820000000          <1>     call .getTimeDateCompare
   357 00005FFE 74F9                <1>     je .loopForNextSecond
   358                              <1> .loopTillTimeElapsed:
   359 00006000 E819000000          <1>     call .getTimeDateCompare
   360 00006005 75F9                <1>     jne .loopTillTimeElapsed
   361                              <1>     ;Now we triple fault
   362 00006007 0F011D06000000      <1>     lidt [.resetIDT] ;Triple fault the machine
   363 0000600E EB00                <1>     jmp short .toHell
   364                              <1> .toHell:
   365 00006010 CD00                <1>     int 00h ;Call div by 0 to trigger reboot if not somehow failed yet
   366 00006012 EBFC                <1>     jmp short .toHell
   367                              <1> .resetIDT:
   368 00006014 0000                <1>     dw 0
   369 00006016 0000000000000000    <1>     dq 0
   370                              <1> .getTimeDateCompare:
   371 0000601E 53                  <1>     push rbx
   372 0000601F E833C8FFFF          <1>     call getDateAndTimeOld
   373 00006024 5B                  <1>     pop rbx
   374 00006025 81E21F000000        <1>     and edx, 1Fh
   375 0000602B 39DA                <1>     cmp edx, ebx
   376                              <1>     return
    13                              <2> %%_ret:
    14 0000602D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   377                              <1> 
   378                              <1> .cpuextendederror:
   379 0000602E 5A                  <1>     pop rdx
   380 0000602F 48FFC9              <1>     dec rcx
   381 00006032 51                  <1>     push rcx
   382 00006033 488D3D(72DA0300)    <1>     lea rdi, byteBuffer
   383 0000603A B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   384 0000603C 86D6                <1>     xchg dl, dh   
   385                              <1> .pr1:
   386 0000603E 88D0                <1>     mov al, dl
   387 00006040 52                  <1>     push rdx
   388 00006041 E882000000          <1>     call .printbyte
   389 00006046 5A                  <1>     pop rdx
   390 00006047 C1CA08              <1>     ror edx, 8    ;Print just dx for now
   391 0000604A FEC9                <1>     dec cl
   392 0000604C 75F0                <1>     jnz .pr1
   393                              <1> 
   394 0000604E 488D35(72DA0300)    <1>     lea rsi, byteBuffer
   395 00006055 BB04000000          <1>     mov ebx, 4  ;Print four nybbles
   396 0000605A E89B000000          <1>     call .writeExceptionMessage
   397                              <1> 
   398 0000605F 488D35C6010000      <1>     lea rsi, .fatal2
   399 00006066 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   400 0000606B E88A000000          <1>     call .writeExceptionMessage
   401                              <1> 
   402 00006070 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   403 00006071 48FFC9              <1>     dec rcx
   404 00006074 0F84E4FEFFFF        <1>     jz .cpurollprint
   405                              <1> 
   406 0000607A B108                <1>     mov cl, 8   ;16 nybbles
   407 0000607C 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   408 0000607F 488D3D(72DA0300)    <1>     lea rdi, byteBuffer
   409                              <1> .pr2:
   410 00006086 48C1C208            <1>     rol rdx, 8    ;Print rdx
   411 0000608A 88D0                <1>     mov al, dl
   412 0000608C 52                  <1>     push rdx
   413 0000608D E836000000          <1>     call .printbyte
   414 00006092 5A                  <1>     pop rdx
   415 00006093 FEC9                <1>     dec cl
   416 00006095 75EF                <1>     jnz .pr2
   417                              <1> 
   418 00006097 488D35(72DA0300)    <1>     lea rsi, byteBuffer
   419 0000609E BB10000000          <1>     mov ebx, 16
   420 000060A3 E852000000          <1>     call .writeExceptionMessage
   421                              <1> 
   422 000060A8 488D357D010000      <1>     lea rsi, .fatal2
   423 000060AF BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   424 000060B4 E841000000          <1>     call .writeExceptionMessage
   425                              <1> 
   426 000060B9 E9A0FEFFFF          <1>     jmp .cpurollprint
   427                              <1> 
   428                              <1> 
   429                              <1> .char:    ;Print a single character
   430 000060BE 488D1D6D000000      <1>     lea rbx, .ascii
   431 000060C5 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   432 000060C6 AA                  <1>     stosb   ;Store the byte in the buffer and inc rdi
   433 000060C7 C3                  <1>     ret
   434                              <1> .printbyte:
   435 000060C8 88C2                <1>     mov dl, al            ;save byte in dl
   436 000060CA 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   437 000060CE 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   438 000060D3 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   439 000060D7 E8E2FFFFFF          <1>     call .char
   440 000060DC 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   441 000060DF E8DAFFFFFF          <1>     call .char
   442 000060E4 C3                  <1>     ret        
   443                              <1> 
   444                              <1> 
   445                              <1> .readInputChar:
   446 000060E5 C605(E1C40300)04    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvREAD    ;Wait for a char!
   447 000060EC 488D35(10C50300)    <1>     lea rsi, singleIObyt
   448 000060F3 BB01000000          <1>     mov ebx, 1  ;Read one char
   449 000060F8 EB07                <1>     jmp short .ioException
   450                              <1> .writeExceptionMessage:
   451                              <1> ;Called with ebx=Number of chars to print, rsi -> String to print
   452 000060FA C605(E1C40300)08    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvWRITE
   453                              <1> .ioException:
   454 00006101 C605(DFC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   455 00006108 66C705(E2C40300)00- <1>     mov word [critReqHdr + ioReqPkt.status], 0
   455 00006110 00                  <1>
   456 00006111 891D(F5C40300)      <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], ebx
   457 00006117 488D1D(DFC40300)    <1>     lea rbx, critReqHdr
   458 0000611E 488935(EDC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rsi
   459 00006125 488B35(59C00300)    <1>     mov rsi, qword [vConPtr]
   460 0000612C E822010000          <1>     call goDriver
   461                              <1>     return
    13                              <2> %%_ret:
    14 00006131 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   462                              <1> 
   463                              <1> 
   464                              <1> ;Error messages
   465 00006132 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   465 0000613B 39414243444546      <1>
   466 00006142 0D0A0A202020202020- <1> .fatalt0:  db CR,LF,LF,"        SCP/DOS EXCEPTION DETECTED!",CR,LF,LF
   466 0000614B 20205343502F444F53- <1>
   466 00006154 20455843455054494F- <1>
   466 0000615D 4E2044455445435445- <1>
   466 00006166 44210D0A0A          <1>
   467                              <1> fatalt0L   equ $ - .fatalt0
   468                              <1> 
   469                              <1> .fatal1:   
   470 0000616B 202020204120706F74- <1>     db "    A potentially fatal error has been detected",CR,LF
   470 00006174 656E7469616C6C7920- <1>
   470 0000617D 666174616C20657272- <1>
   470 00006186 6F7220686173206265- <1>
   470 0000618F 656E20646574656374- <1>
   470 00006198 65640D0A            <1>
   471 0000619C 20202020616E642074- <1>     db "    and the current application must be terminated.",CR,LF,LF
   471 000061A5 68652063757272656E- <1>
   471 000061AE 74206170706C696361- <1>
   471 000061B7 74696F6E206D757374- <1>
   471 000061C0 206265207465726D69- <1>
   471 000061C9 6E617465642E0D0A0A  <1>
   472 000061D2 202020205072657373- <1>     db "    Press any key to continue or CTRL+ALT+DEL to restart the machine."
   472 000061DB 20616E79206B657920- <1>
   472 000061E4 746F20636F6E74696E- <1>
   472 000061ED 7565206F7220435452- <1>
   472 000061F6 4C2B414C542B44454C- <1>
   472 000061FF 20746F207265737461- <1>
   472 00006208 727420746865206D61- <1>
   472 00006211 6368696E652E        <1>
   473 00006217 0D0A0A202020205359- <1>     db CR,LF, LF,"    SYSTEM ERROR: "   ;Print standard Error message here
   473 00006220 5354454D204552524F- <1>
   473 00006229 523A20              <1>
   474                              <1> fatal1L equ $ - .fatal1
   475                              <1> 
   476 0000622C 203A20              <1> .fatal2:   db " : "
   477                              <1> fatal2L    equ $ - .fatal2
   478                              <1> 
   479                              <1> ;The below error is displayed is inDOS > 1 or NMI occured
   480 0000622F 202020205343502F44- <1> .fatalHalt: db "    SCP/DOS SYSTEM STOP: "
   480 00006238 4F532053595354454D- <1>
   480 00006241 2053544F503A20      <1>
   481                              <1> fatalHaltL equ $ - .fatalHalt
   482 00006248 0D0A0A              <1> .crlf:  db CR,LF,LF
   483                              <1> crlfL  equ $ - .crlf
    40                                  %include "./Source/Kernel/dosPrim.asm"
     1                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
     2                              <1> ; are placed here (Int 45h Int 46h and goDriver)
     3                              <1> 
     4                              <1> dosDefCritErrHdlr:
     5                              <1> ;The DOS default critical error handler always returns FAIL
     6 0000624B B003                <1>     mov al, critFail
     7 0000624D 48CF                <1>     iretq
     8                              <1> goDriverChar:
     9                              <1> ;Shortcut for Char requests, make a driver request
    10                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    11 0000624F 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    12                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    13                              <1> ;Input: rsi = Ptr to the driver to handle the call!
    14                              <1> ;       rbx = Ptr to the request header for the driver call!
    15 00006253 E88E080000          <1>     call dosCrit2Enter
    16 00006258 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    17 0000625B FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    18 0000625E E88D080000          <1>     call dosCrit2Exit
    19                              <1>     return
    13                              <2> %%_ret:
    14 00006263 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> setupPhysicalDiskRequest:
    22                              <1> ;Ensure that al has valid disk number
    23                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    24                              <1> ;If CF=NC, rbp = DPB ptr.
    25                              <1> ;If CF=CY, exit error
    26 00006264 84C0                <1>     test al, al
    27 00006266 723F                <1>     jc .diskError
    28 00006268 3A05(7EC00300)      <1>     cmp al, byte [lastdrvNum]
    29 0000626E 7337                <1>     jae .diskError
    30 00006270 50                  <1>     push rax
    31 00006271 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    32 00006273 E88A040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    33 00006278 58                  <1>     pop rax
    34 00006279 7235                <1>     jc .error
    35 0000627B 8805(F9C60300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    36 00006281 488B2D(02C70300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    37 00006288 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    38 00006290 750A                <1>     jnz .netError
    39 00006292 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    40 00006296 E865030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    41                              <1>     return
    13                              <2> %%_ret:
    14 0000629B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                              <1> .netError:
    43 0000629C 66C705(00C40300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    43 000062A4 00                  <1>
    44 000062A5 EB09                <1>     jmp short .error
    45                              <1> .diskError:
    46 000062A7 66C705(00C40300)0F- <1>     mov word [errorExCde], errBadDrv
    46 000062AF 00                  <1>
    47                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    48 000062B0 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
    49 000062B7 C605(02C40300)07    <1>     mov byte [errorAction], eActRetUsr
    50 000062BE C605(03C40300)09    <1>     mov byte [errorClass], eClsBadFmt
    51 000062C5 F9                  <1>     stc
    52                              <1>     return
    13                              <2> %%_ret:
    14 000062C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    53                              <1> 
    54                              <1> setupAbsDiskEntry:
    55                              <1> ;Prepares to sets up the CDS and DPB for the request
    56 000062C7 FE05(FDC30300)      <1>     inc byte [inDOS]
    57 000062CD FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    58 000062CE FC                  <1>     cld ;Set string ops in the right direction
    59 000062CF E890FFFFFF          <1>     call setupPhysicalDiskRequest
    60 000062D4 7223                <1>     jc .exit    ;Error exit
    61 000062D6 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    62 000062DD 56                  <1>     push rsi
    63 000062DE 50                  <1>     push rax
    64 000062DF 488D35(12C50300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    65 000062E6 8806                <1>     mov byte [rsi], al  ;Construct a path
    66 000062E8 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    67 000062EB C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
    68 000062EF F8                  <1>     clc
    69                              <1> ;++++++++++++++++++++++++++++
    70                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    71                              <1> ;Entered with path in rsi (ah=03h)
    72 000062F0 B800030000          <1>     mov eax, 0300h  
    73 000062F5 CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
    74                              <1> ;++++++++++++++++++++++++++++
    75 000062F7 58                  <1>     pop rax
    76 000062F8 5E                  <1>     pop rsi
    77                              <1> .exit:
    78 000062F9 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
    79                              <1>     return
    13                              <2> %%_ret:
    14 000062FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> absDiskWrite:       ;Int 46h
    82                              <1> ;al = Drive number
    83                              <1> ;rbx = Memory Buffer address to read from
    84                              <1> ;ecx = Number of sectors to write
    85                              <1> ;rdx = Start LBA to write to
    86 000062FC FA                  <1>     cli
    87 000062FD 488925(6FC40300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
    88 00006304 488D25(D0D90300)    <1>     lea rsp, DiskStakTop
    89 0000630B 55                  <1>     push rbp
    90 0000630C 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
    91 0000630D E8B5FFFFFF          <1>     call setupAbsDiskEntry
    92 00006312 7252                <1>     jc absDiskExit
    93 00006314 E8FA010000          <1>     call primReqWriteSetup
    94 00006319 EB1D                <1>     jmp short absDiskReadWriteCommon
    95                              <1> absDiskRead:        ;Int 45h
    96                              <1> ;al = Drive number
    97                              <1> ;rbx = Memory Buffer address to write to
    98                              <1> ;ecx = Number of sectors to read
    99                              <1> ;rdx = Start LBA to read from
   100 0000631B FA                  <1>     cli 
   101 0000631C 488925(6FC40300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   102 00006323 488D25(D0D90300)    <1>     lea rsp, DiskStakTop
   103 0000632A 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   104 0000632B 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   105 0000632C E896FFFFFF          <1>     call setupAbsDiskEntry
   106 00006331 7233                <1>     jc absDiskExit
   107 00006333 E8E6010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   108                              <1> absDiskReadWriteCommon:
   109                              <1> ;Entered with the appropriate function number in ah
   110                              <1> ; and primary request header in rbx
   111 00006338 E859000000          <1>     call absDiskDriverCall
   112 0000633D 7427                <1>     jz absDiskExit  ;Skip error code checking
   113 0000633F 8A05(B8C40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   114                              <1>     ;DOS uses the following pairs in a table
   115                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   116 00006345 B480                <1>     mov ah, 80h ;Attachment failure
   117 00006347 3C0C                <1>     cmp al, 0Ch ;Gen error
   118 00006349 741A                <1>     je .absExit
   119 0000634B B440                <1>     mov ah, 40h ;Seek error
   120 0000634D 3C06                <1>     cmp al, 06h
   121 0000634F 7414                <1>     je .absExit
   122 00006351 B408                <1>     mov ah, 08h ;Bad CRC
   123 00006353 3C04                <1>     cmp al, 04h
   124 00006355 740E                <1>     je .absExit
   125 00006357 B404                <1>     mov ah, 04h ;Sector not found
   126 00006359 3C08                <1>     cmp al, 08h
   127 0000635B 7408                <1>     je .absExit
   128 0000635D 30E4                <1>     xor ah, ah  ;Write Protect Violation
   129 0000635F 84C0                <1>     test al, al
   130 00006361 7402                <1>     je .absExit
   131 00006363 B402                <1>     mov ah, 02h ;Other Error
   132                              <1> .absExit:
   133 00006365 F9                  <1>     stc
   134                              <1> absDiskExit:
   135 00006366 5B                  <1>     pop rbx
   136 00006367 5D                  <1>     pop rbp
   137 00006368 FA                  <1>     cli
   138 00006369 488B25(6FC40300)    <1>     mov rsp, qword [oldRSP]
   139 00006370 FB                  <1>     sti ;Reenable interrupts
   140 00006371 488D0D0D000000      <1>     lea rcx, absStackJuggle
   141 00006378 9C                  <1>     pushfq
   142 00006379 5A                  <1>     pop rdx ;Get the current flags
   143 0000637A 48870C24            <1>     xchg qword [rsp], rcx   ;Get the old return address in rcx
   144 0000637E 4887542410          <1>     xchg rdx, qword [rsp + 2*8]  ;Swap old flags with current flags
   145 00006383 48CF                <1>     iretq ;Return from interrupt (to align the stack as needed)
   146                              <1> absStackJuggle:
   147 00006385 FA                  <1>     cli
   148 00006386 52                  <1>     push rdx    ;Push the flags on the stack
   149 00006387 51                  <1>     push rcx    ;Push the return address on the stack
   150 00006388 9C                  <1>     pushfq
   151 00006389 31C9                <1>     xor ecx, ecx  ;Zero the registers without affecting the flags
   152 0000638B 89CA                <1>     mov edx, ecx
   153 0000638D FE0D(FDC30300)      <1>     dec byte [inDOS]    ;Only now do we leave DOS
   154 00006393 9D                  <1>     popfq
   155 00006394 FB                  <1>     sti
   156                              <1>     return
    13                              <2> %%_ret:
    14 00006395 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   157                              <1> 
   158                              <1> absDiskDriverCall:
   159                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   160                              <1> ;       rbx = Request header address
   161                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   162                              <1> ;       eax = Status word from request
   163                              <1> ;       ecx = Number of sectors transferred
   164 00006396 56                  <1>     push rsi
   165                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   166 00006397 8B0D(CBC40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   167                              <1>     ;Prepare for goDriver now
   168 0000639D 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   169 000063A1 E8ADFEFFFF          <1>     call goDriver   ;Make request
   170 000063A6 5E                  <1>     pop rsi
   171 000063A7 8B05(CBC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   172 000063AD 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   173 000063AF 0FB705(B8C40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   174 000063B6 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   175                              <1>     return
    13                              <2> %%_ret:
    14 000063BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   176                              <1> 
   177                              <1> getDiskDPB:
   178                              <1> ;Gets the disk DPB if the Disk is valid
   179                              <1> ;Otherwise will return a pointer to the drive DPB
   180                              <1> ;Called with rdi pointing to the CDS
   181                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   182 000063BB 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   183 000063BF 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   184 000063C2 8805(F9C60300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   185 000063C8 E833020000          <1>     call setWorkingDPB
   186 000063CD 57                  <1>     push rdi    ;Save the CDS ptr
   187 000063CE E84E000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   188 000063D3 5F                  <1>     pop rdi
   189 000063D4 724A                <1>     jc .exitBad ;Preserve CF
   190 000063D6 7547                <1>     jnz .exit
   191                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   192 000063D8 0FB60D(7EC00300)    <1>     movzx ecx, byte [lastdrvNum]
   193 000063DF 31C0                <1>     xor eax, eax
   194 000063E1 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   195 000063E4 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   196 000063E8 488B3D(6BC00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   197                              <1> .checkCDS:
   198 000063EF 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   199 000063F5 751D                <1>     jnz .next
   200 000063F7 48397745            <1>     cmp qword [rdi + cds.qDPBPtr], rsi
   201 000063FB 7517                <1>     jne .next
   202 000063FD 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   203 00006401 7411                <1>     jz .next    ;IF yes, skip it
   204 00006403 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax  ;Reset start cluster!
   205                              <1>     ;Subst drives should just fail if the subdir doesnt exist.
   206                              <1>     ;TEMP TEMP: subst will become deactivated and their StartingClust=-1
   207 00006406 66F747430010        <1>     test word [rdi + cds.wFlags], cdsSubstDrive
   208 0000640C 7406                <1>     jz .next    ;If bit not set, skip this next bit
   209 0000640E 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Clear the flags rendering this drv dead
   210                              <1> .next:
   211 00006414 4881C75B000000      <1>     add rdi, cds_size
   212 0000641B FFC9                <1>     dec ecx
   213 0000641D 75D0                <1>     jnz .checkCDS
   214                              <1> .exit:
   215 0000641F F8                  <1>     clc
   216                              <1> .exitBad:
   217                              <1>     return
    13                              <2> %%_ret:
    14 00006420 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> 
   219                              <1> ensureDiskValid:
   220                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   221                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   222                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   223                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   224                              <1> .medChk:
   225 00006421 E841010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   226                              <1> ;Return in rbx the req hdr address
   227 00006426 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   228 0000642A E824FEFFFF          <1>     call goDriver   ;Request!
   229 0000642F 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   230 00006433 F7C700800000        <1>     test edi, drvErrStatus
   231 00006439 7575                <1>     jnz .diskDrvCritErrMedChk
   232                              <1> .medChkIgnore:
   233 0000643B 8A05(F9C60300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   234 00006441 30E4                <1>     xor ah, ah
   235 00006443 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old flag
   236 00006446 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   237 00006449 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   238 0000644B 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   239 0000644D E8B5A0FFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   240 00006452 F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   241 00006453 7206                <1>     jc .resetDPB   ;Exit ONLY if a dirty buffer found!
   242                              <1>     ;ZF=NZ from test for dirty buffers
   243                              <1> .exit:
   244                              <1>     return
    13                              <2> %%_ret:
    14 00006455 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   245                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   246 00006456 E8D0A0FFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   247                              <1> .resetDPB:    ;If no buffers found, skip freeing them as theres nothing to free!
   248 0000645B C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1 ;Mark DPB as inaccurate now
   249 0000645F C605(D8D90300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   250                              <1>     ;Get a buffer to read BPB into in rdi
   251 00006466 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   252 00006468 E8D4A2FFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   253 0000646D 7239                <1>     jc .exitBad    ;Immediately exit with the carry flag set
   254 0000646F 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   255                              <1> .repeatEP:
   256 00006473 E81B010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   257 00006478 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   258 0000647C E8D2FDFFFF          <1>     call goDriver   ;Request!
   259 00006481 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   260 00006485 A900800000          <1>     test eax, drvErrStatus
   261 0000648A 7562                <1>     jnz .diskDrvCritErrBPB
   262                              <1>     ;Now rebuild the dpb fields for this drive
   263 0000648C 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   264 00006490 53                  <1>     push rbx
   265 00006491 E87B090000          <1>     call createDPB  ;Modifies rbx and clears the free cluster count
   266 00006496 5B                  <1>     pop rbx
   267                              <1>     ;Adjust the buffer header information
   268 00006497 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   269 0000649A 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   270 0000649D 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   271 000064A0 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   272 000064A3 30E4                <1>     xor ah, ah    ;Set ZF and clear CF
   273 000064A5 886524              <1>     mov byte [rbp + dpb.bAccessFlag], ah ;DPB now ready to be used
   274                              <1> .exitBad:
   275 000064A8 C605(D8D90300)00    <1>     mov byte [diskChange], 0   ;Clear Disk Change flag
   276                              <1>     return
    13                              <2> %%_ret:
    14 000064AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   277                              <1> .diskDrvCritErrMedChk:
   278                              <1> ;Critical Errors fall through here
   279                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   280 000064B0 48893D(04C40300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   281 000064B7 48892D(7EC70300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   282 000064BE 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   283 000064C1 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   284 000064C3 8825(5CC40300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   285 000064C9 E833F8FFFF          <1>     call criticalDOSError
   286 000064CE 488B3D(04C40300)    <1>     mov rdi, qword [xInt44RDI]
   287 000064D5 488B2D(7EC70300)    <1>     mov rbp, qword [tmpDPBPtr]
   288 000064DC 3C01                <1>     cmp al, critRetry
   289 000064DE 0F843DFFFFFF        <1>     je .medChk
   290 000064E4 3C00                <1>     cmp al, critIgnore
   291 000064E6 0F844FFFFFFF        <1>     je .medChkIgnore
   292 000064EC F9                  <1>     stc ;Set error flag to indicate fail
   293                              <1>     return ;And exit from function with CF set
    13                              <2> %%_ret:
    14 000064ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> .diskDrvCritErrBPB:
   296                              <1>     ;eax has status word, rbp has dpb ptr
   297                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   298 000064EE C605(D8D90300)00    <1>     mov byte [diskChange], 0   ;Clear Disk Change flag (to prevent abort issues)
   299 000064F5 C605(5CC40300)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   300 000064FC C605(D8D90300)FF    <1>     mov byte [diskChange], -1  ;Set Disk Change flag again as we are back in
   301 00006503 E890F7FFFF          <1>     call diskDevErr
   302 00006508 3C01                <1>     cmp al, critRetry
   303 0000650A 0F8463FFFFFF        <1>     je .repeatEP
   304                              <1>     ;Else we fail (Ignore=Fail here)
   305 00006510 F9                  <1>     stc ;Set error flag to indicate fail
   306 00006511 EB95                <1>     jmp short .exitBad ;And exit from function with CF set
   307                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   308                              <1> ;           Primitive Driver Requests
   309                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   310                              <1> ;First are Disk requests, then Char device requests
   311                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   312                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   313                              <1> 
   314                              <1> primReqWriteSetup:
   315 00006513 50                  <1>     push rax
   316 00006514 B408                <1>     mov ah, drvWRITE    ;Command code
   317 00006516 0225(C5C30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   318 0000651C EB03                <1>     jmp short primReqRWCommon
   319                              <1> primReqReadSetup:
   320 0000651E 50                  <1>     push rax
   321 0000651F B404                <1>     mov ah, drvREAD
   322                              <1> primReqRWCommon:
   323                              <1> ;Sets up the IO request packet with:
   324                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   325                              <1> ; rbx = Data storage buffer ptr
   326                              <1> ; ecx = Number of sectors to transfer
   327                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   328                              <1> ; ~~~~ Set by entry function ~~~~ 
   329                              <1> ; ah = Command code
   330                              <1> ; All regs preserved EXCEPT rbx.
   331                              <1> ; Return: rbx = Transfer Address
   332 00006521 48891D(C3C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   333 00006528 890D(CBC40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   334 0000652E C605(B5C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   335 00006535 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   336 0000653A 8905(B6C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   337 00006540 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   338 00006543 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   339                              <1>     ;Disk operations only here!
   340 00006545 488915(CFC40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   341 0000654C 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   342 0000654F 8805(C2C40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   343 00006555 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   344 00006558 8805(B6C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   345                              <1> primReqCommonExit:
   346                              <1> ;Returns in rbx the primary request header as these functions
   347                              <1> ; setup the request in the primary request header space
   348 0000655E 58                  <1>     pop rax
   349 0000655F 488D1D(B5C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   350                              <1>     return
    13                              <2> %%_ret:
    14 00006566 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   351                              <1> 
   352                              <1> primReqMedCheckSetup:
   353                              <1> ;Prepare the diskIO packet for mediacheck
   354                              <1> ;rbp has DPB pointer for device to check media on
   355 00006567 50                  <1>     push rax
   356 00006568 C605(B5C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   357 0000656F 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   358 00006572 8805(C2C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   359 00006578 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   360 0000657B 8805(B6C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   361 00006581 C605(B7C40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   362 00006588 66C705(B8C40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   362 00006590 00                  <1>
   363 00006591 EBCB                <1>     jmp short primReqCommonExit
   364                              <1> 
   365                              <1> primReqGetBPBSetup:
   366                              <1> ;rbp has DPB pointer for device
   367                              <1> ;rdi has sector buffer header pointer for transfer
   368 00006593 50                  <1>     push rax
   369 00006594 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   370 00006598 48893D(C3C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   371 0000659F C605(B5C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   372 000065A6 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   373 000065A9 8805(C2C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   374 000065AF 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   375 000065B2 8805(B6C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   376 000065B8 C605(B7C40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   377 000065BF 66C705(B8C40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   377 000065C7 00                  <1>
   378 000065C8 EB94                <1>     jmp short primReqCommonExit
   379                              <1> 
   380                              <1> primReqOpenSetup:
   381                              <1> ;al = unit number if a disk device. Undefined otherwise
   382 000065CA 50                  <1>     push rax
   383 000065CB B40D                <1>     mov ah, drvOPEN
   384 000065CD EB03                <1>     jmp short primReqOCcommon
   385                              <1> primReqCloseSetup:
   386                              <1> ;al = unit number if a disk device. Undefined otherwise
   387 000065CF 50                  <1>     push rax
   388 000065D0 B40E                <1>     mov ah, drvCLOSE
   389                              <1> primReqOCcommon:
   390 000065D2 C605(B5C40300)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   391 000065D9 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   392 000065DA 8905(B6C40300)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   393                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   394 000065E0 E979FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   395                              <1> 
   396                              <1> secdReqCharIOReq:
   397                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   398                              <1> ;Input:
   399                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   400                              <1> ; ecx = Length of buffer
   401                              <1> ; rdi = Buffer pointer
   402                              <1> ;Output: 
   403                              <1> ; rbx = Transfer Address 
   404 000065E5 488D1D(8BC40300)    <1>     lea rbx, secdReqHdr
   405 000065EC C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   406 000065EF 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   407 000065F2 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   408 000065F8 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   409 000065FC 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   410                              <1>     return
    13                              <2> %%_ret:
    14 000065FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> ;If the device which will process this request is a disk device
   412                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   413                              <1> ;Then we will read the appropriate byte from that buffer to the 
   414                              <1> ; singleIOByt buffer.
   415                              <1> ;Such a request will require additional setup with the following fields:
   416                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    41                                  %include "./Source/Kernel/dosUtils.asm"
     1                              <1> ;DOS utility functions 
     2                              <1> 
     3                              <1> ;Basic Drive related Utilities
     4                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
     5                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
     6                              <1> ; that gets set up)
     7                              <1> 
     8                              <1> setWorkingDPB:
     9                              <1> ;Gets dpb in rbp and saves to workingDPB
    10 00006600 48892D(FAC60300)    <1>     mov qword [workingDPB], rbp
    11                              <1>     return
    13                              <2> %%_ret:
    14 00006607 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    12                              <1> 
    13                              <1> testCDSNet:
    14                              <1> ;Checks if the workingCDS is a redirector drive
    15                              <1> ;Returns: CF=NC => Not net
    16                              <1> ;         CF=CY => Network redirector
    17                              <1> ;         ZF=ZE => Net without CDS (\\ paths only)
    18                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    19                              <1> ;         rdi = workingCDS ptr
    20 00006608 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
    21 0000660F 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    22 00006616 7409                <1>     je .net
    23 00006618 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    24 0000661E 7501                <1>     jnz .net ;Net with CDS
    25                              <1>     return  ;CF=NC => Not net
    13                              <2> %%_ret:
    14 00006620 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> .net:
    27 00006621 F9                  <1>     stc ;Set Net bit
    28                              <1>     return
    13                              <2> %%_ret:
    14 00006622 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                              <1> 
    30                              <1> getDiskData:
    31                              <1> ;This function returns:
    32                              <1> ;al = sectors per cluster
    33                              <1> ;ah = media ID byte
    34                              <1> ;ebx = total clusters
    35                              <1> ;cx = bytes per sector
    36                              <1> ;edx = number of available clusters
    37                              <1> ;
    38                              <1> ;If CF=CY on exit, al contains the error code
    39 00006623 E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    40 00006628 7308                <1>     jnc .physical
    41                              <1>     ;Beep a redir request out
    42 0000662A B80C110000          <1>     mov eax, 110Ch 
    43 0000662F CD4F                <1>     int 4Fh
    44                              <1>     return
    13                              <2> %%_ret:
    14 00006631 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                              <1> .physical:
    46                              <1> ;Now we must lock the structures
    47 00006632 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
    48 00006639 E894040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    49 0000663E E878FDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    50 00006643 721C                <1>     jc .exit
    51 00006645 E8FFA2FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    52 0000664A 7215                <1>     jc .exit
    53 0000664C 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    54 0000664F FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    55 00006651 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    56 00006654 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    57 00006657 FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
    58 00006659 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    59 0000665D 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
    60 00006660 F8                  <1>     clc
    61                              <1> .exit:
    62 00006661 E876040000          <1>     call dosCrit1Exit
    63                              <1>     return
    13                              <2> %%_ret:
    14 00006666 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    64                              <1> 
    65                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
    66                              <1> ;Input: al = Interrupt number
    67                              <1> ;Output: rbx = Interrupt Vector
    68 00006667 50                  <1>     push rax    ;Preserve rax, segment selector returned by call
    69 00006668 52                  <1>     push rdx    ;Preserve rdx, Attribute Word returned by call
    70 00006669 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
    71 0000666B B807F00000          <1>     mov eax, 0F007h
    72 00006670 CD35                <1>     int 35h
    73 00006672 5A                  <1>     pop rdx
    74 00006673 58                  <1>     pop rax
    75                              <1>     return
    13                              <2> %%_ret:
    14 00006674 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    76                              <1> 
    77                              <1> getUserRegs:   ;Int 4Fh AX=1218h
    78                              <1> ;Returns ptr to user regs in rsi
    79 00006675 488B35(6FC40300)    <1>     mov rsi, qword [oldRSP]
    80                              <1>     return
    13                              <2> %%_ret:
    14 0000667C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    81                              <1> 
    82                              <1> walkDPBchain:
    83                              <1> ;Called with al = 0 based drive number
    84                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    85 0000667D 488B35(49C00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
    86                              <1> .walk:
    87 00006684 4881FEFFFFFFFF      <1>     cmp rsi, -1
    88 0000668B 740A                <1>     je .exitBad
    89 0000668D 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    90 0000668F 7407                <1>     je .exit    ;Drive found
    91 00006691 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    92 00006695 EBED                <1>     jmp short .walk
    93                              <1> .exitBad:
    94 00006697 F9                  <1>     stc
    95                              <1> .exit:
    96                              <1>     return
    13                              <2> %%_ret:
    14 00006698 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    97                              <1> setDrive:   
    98                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
    99                              <1> ;Input: al = 1-based drive number
   100                              <1> ;Output: al = 0-based drive number
   101                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
   102                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
   103                              <1> ;            set.
   104 00006699 E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   105 0000669E 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   106 000066A0 56                  <1>     push rsi
   107 000066A1 488B35(02C70300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   108 000066A8 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   109 000066AE 5E                  <1>     pop rsi
   110 000066AF 7401                <1>     jz .exit
   111 000066B1 F9                  <1>     stc
   112                              <1> .exit:
   113                              <1>     return
    13                              <2> %%_ret:
    14 000066B2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   114                              <1> 
   115                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   116                              <1> ;Allows a redirector or subst/join to build a CDS
   117                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   118                              <1> ; volumes, that are made at system boot.
   119                              <1> ;Input: al = Drive Letter for drive
   120                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   121                              <1> ;Output: rdi = newly filled in workingCDS
   122                              <1> ;CF=NC => CDS valid and has a DPB
   123                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   124 000066B3 50                  <1>     push rax
   125 000066B4 2C40                <1>     sub al, "A"-1
   126 000066B6 3A05(7DC00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   127 000066BC 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   128 000066C3 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   129 000066C9 58                  <1>     pop rax
   130 000066CA 7235                <1>     jb .exit    ;Exit with CF=CY
   131 000066CC 50                  <1>     push rax
   132 000066CD 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   133 000066D2 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   134 000066D4 58                  <1>     pop rax
   135 000066D5 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   136 000066DB C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   137 000066E2 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   138 000066EA 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   139                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   140 000066F0 50                  <1>     push rax
   141 000066F1 56                  <1>     push rsi
   142 000066F2 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   143 000066F4 E884FFFFFF          <1>     call walkDPBchain
   144 000066F9 7204                <1>     jb .skipSettingDPB
   145 000066FB 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   146                              <1> .skipSettingDPB:
   147 000066FF 5E                  <1>     pop rsi
   148 00006700 58                  <1>     pop rax
   149                              <1> .exit:
   150                              <1>     return
    13                              <2> %%_ret:
    14 00006701 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> getCDS:     ;Int 4Fh AX=1219h
   153                              <1> ;Gets the device DPB and saves it in the DOS variable
   154                              <1> ;This can be called to get CDS for network drives too!
   155                              <1> ;Input: al = 1 based drive number
   156                              <1> ;Sets workingCDS var with the CDS for the device. 
   157                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   158 00006702 84C0                <1>     test al, al
   159 00006704 7508                <1>     jnz .skip
   160 00006706 8A05(26C40300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   161 0000670C FEC0                <1>     inc al
   162                              <1> .skip:
   163 0000670E FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   164 00006710 56                  <1>     push rsi
   165 00006711 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   166 00006718 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   167 0000671F 7423                <1>     jz .physDrive
   168                              <1>     ;Invokation via 21/5D00
   169 00006721 50                  <1>     push rax
   170 00006722 57                  <1>     push rdi
   171 00006723 488D3D(6EC60300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   172 0000672A 48893D(02C70300)    <1>     mov qword [workingCDS], rdi ;Make it current
   173 00006731 0441                <1>     add al, "A" ;Convert to a drive letter
   174 00006733 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   175 00006738 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   176 0000673E 5F                  <1>     pop rdi
   177 0000673F 58                  <1>     pop rax
   178 00006740 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   179 00006742 EB17                <1>     jmp short .exitOk   ;All oki
   180                              <1> .physDrive:
   181 00006744 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   182 00006749 7208                <1>     jc .exitBad
   183 0000674B 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   184 00006751 7508                <1>     jnz .exitOk ;Exit with flag cleared
   185                              <1>     ;Else Return to unknown error locus
   186                              <1> .exitBad:
   187 00006753 C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   188                              <1> .exitBad1:
   189 0000675A F9                  <1>     stc
   190                              <1> .exitOk:
   191 0000675B 5E                  <1>     pop rsi
   192                              <1>     return
    13                              <2> %%_ret:
    14 0000675C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   193                              <1> 
   194                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   195                              <1>     ;Gets the CDS for the current drive in al
   196                              <1>     ;Input: al = Drive number, 0 = A ...
   197                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   198                              <1>     ;        CF=CY => al not valid
   199 0000675D 3A05(7EC00300)      <1>     cmp al, byte [lastdrvNum]
   200 00006763 7202                <1>     jb .ctn
   201 00006765 F9                  <1>     stc 
   202                              <1>     return
    13                              <2> %%_ret:
    14 00006766 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   203                              <1> .ctn:
   204 00006767 50                  <1>     push rax
   205 00006768 52                  <1>     push rdx
   206 00006769 0FB6C0              <1>     movzx eax, al
   207 0000676C 48BE5B000000000000- <1>     mov rsi, cds_size
   207 00006775 00                  <1>
   208 00006776 31D2                <1>     xor edx, edx
   209 00006778 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   210 0000677A 488B35(6BC00300)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   211 00006781 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   212 00006784 488935(02C70300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   213 0000678B 5A                  <1>     pop rdx
   214 0000678C 58                  <1>     pop rax
   215 0000678D F8                  <1>     clc
   216                              <1>     return
    13                              <2> %%_ret:
    14 0000678E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> 
   218                              <1> 
   219                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   220                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   221                              <1> ;Input: AL = Char to normalise.
   222                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   223                              <1> ;If path separator, set ZF=ZE
   224 0000678F 3C5C                <1>     cmp al, "\"
   225 00006791 7406                <1>     je .exit
   226 00006793 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   227 00006795 7502                <1>     jne .exit
   228 00006797 B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   229                              <1> .exit:
   230                              <1>     return
    13                              <2> %%_ret:
    14 00006799 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> uppercaseCharAtPtr:
   233                              <1> ;Get the char pointed to by rsi and then fall
   234 0000679A AC                  <1>     lodsb
   235                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   236                              <1> ;Convert a lowercase char to uppercase
   237                              <1> ; Leave alone uppercase chars and invalid chars
   238                              <1> ;Input: al = Char to convert to uppercase
   239                              <1> ;Output: al = Processed char
   240 0000679B 53                  <1>     push rbx
   241 0000679C 3C61                <1>     cmp al, "a"
   242 0000679E 7214                <1>     jb .exit
   243 000067A0 3C7A                <1>     cmp al, "z"
   244 000067A2 7702                <1>     ja .checkExt
   245 000067A4 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   246                              <1> .checkExt:
   247 000067A6 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   248 000067A8 720A                <1>     jb .exit
   249 000067AA 2C80                <1>     sub al, 80h ;Turn into table offset
   250 000067AC 488B1D7998FFFF      <1>     mov rbx, qword [ctryTbl + countryStruc.mapaddr]    ;Get ptr to extAsciiTable
   251 000067B3 D7                  <1>     xlatb   ;Get converted extended byte into al
   252                              <1> .exit:
   253 000067B4 50                  <1>     push rax    ;Save al temporarily
   254 000067B5 488D1D939AFFFF      <1>     lea rbx, asciiCharProperties
   255 000067BC D7                  <1>     xlatb   ;Get the signature in al
   256 000067BD A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   257 000067BF 58                  <1>     pop rax
   258 000067C0 5B                  <1>     pop rbx
   259                              <1>     return
    13                              <2> %%_ret:
    14 000067C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   260                              <1> 
   261                              <1> strlen2:    ;Int 4Fh, AX=1212h
   262                              <1> ;Entry point for Multiplex
   263 000067C2 57                  <1>     push rdi
   264 000067C3 4889F7              <1>     mov rdi, rsi
   265 000067C6 E802000000          <1>     call strlen
   266 000067CB 5F                  <1>     pop rdi
   267                              <1>     return
    13                              <2> %%_ret:
    14 000067CC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   268                              <1> strlen: 
   269                              <1> ;Gets the length of a ASCIIZ string
   270                              <1> ;Input: rdi = Source buffer
   271                              <1> ;Output: ecx = Length of string
   272 000067CD 50                  <1>     push rax
   273 000067CE 57                  <1>     push rdi
   274 000067CF 30C0                <1>     xor al, al
   275 000067D1 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   276 000067D3 FFC9                <1>     dec ecx ;rcx = -1
   277 000067D5 F2AE                <1>     repne scasb
   278 000067D7 F7D1                <1>     not ecx
   279 000067D9 5F                  <1>     pop rdi
   280 000067DA 58                  <1>     pop rax
   281                              <1>     return
    13                              <2> %%_ret:
    14 000067DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> 
   283                              <1> strcpy:
   284                              <1> ;Copies a null terminated string from rsi to rdi
   285 000067DC AC                  <1>     lodsb
   286 000067DD AA                  <1>     stosb
   287 000067DE 84C0                <1>     test al, al
   288                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000067E0 74F9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   289 000067E2 EBF8                <1>     jmp short strcpy
   290                              <1> 
   291                              <1> strcmp:
   292                              <1> ;Compares two ASCIIZ strings for equality.
   293                              <1> ;Input: rsi = First string
   294                              <1> ;       rdi = Second string
   295                              <1> ;       ecx = Number of bytes to compare
   296                              <1> ;Output: ZF=ZE => Equal
   297                              <1> ;        ZF=NZ => Not equal
   298 000067E4 56                  <1>     push rsi
   299 000067E5 57                  <1>     push rdi
   300 000067E6 F3A6                <1>     repe cmpsb
   301 000067E8 5F                  <1>     pop rdi
   302 000067E9 5E                  <1>     pop rsi
   303                              <1>     return
    13                              <2> %%_ret:
    14 000067EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   304                              <1> 
   305                              <1> 
   306                              <1> normaliseFileName:  ;Int 4Fh, AX=1211h
   307                              <1> ;Converts lowercase to uppercase and / to "\"
   308                              <1> ;Input: rsi = Source buffer
   309                              <1> ;       rdi = Buffer to place normalised path
   310 000067EB 50                  <1>     push rax
   311 000067EC 56                  <1>     push rsi
   312 000067ED 57                  <1>     push rdi
   313                              <1> .scan:
   314 000067EE AC                  <1>     lodsb
   315 000067EF 84C0                <1>     test al, al
   316 000067F1 740D                <1>     jz .exit
   317 000067F3 E897FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   318 000067F8 E89EFFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   319 000067FD AA                  <1>     stosb
   320 000067FE EBEE                <1>     jmp short .scan
   321                              <1> .exit:
   322 00006800 5F                  <1>     pop rdi
   323 00006801 5E                  <1>     pop rsi
   324 00006802 58                  <1>     pop rax
   325                              <1>     return
    13                              <2> %%_ret:
    14 00006803 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   326                              <1> 
   327                              <1> compareFileNames:   ;Int 4Fh, AX=121Eh
   328                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   329                              <1> ;Input: rsi = One ASCIIZ pathname
   330                              <1> ;       rdi = Second ASCIIZ pathname
   331                              <1> ;Return:
   332                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   333 00006804 50                  <1>     push rax
   334 00006805 56                  <1>     push rsi
   335 00006806 57                  <1>     push rdi
   336                              <1> .scan:
   337 00006807 8A06                <1>     mov al, byte [rsi]
   338 00006809 84C0                <1>     test al, al
   339 0000680B 7424                <1>     jz .endOfString
   340 0000680D 8A27                <1>     mov ah, byte [rdi]
   341 0000680F E87BFFFFFF          <1>     call swapPathSeparator  ;Convert al to \ if pathsep
   342 00006814 7410                <1>     jz .pathseps
   343 00006816 660D2020            <1>     or ax, 2020h    ;Convert both chars to lower case
   344 0000681A 38E0                <1>     cmp al, ah
   345 0000681C 7515                <1>     jnz .exit
   346                              <1> .nextChar:
   347 0000681E 48FFC6              <1>     inc rsi
   348 00006821 48FFC7              <1>     inc rdi
   349 00006824 EBE1                <1>     jmp short .scan
   350                              <1> .pathseps:
   351 00006826 86E0                <1>     xchg ah, al
   352 00006828 E862FFFFFF          <1>     call swapPathSeparator  ;If ah is not a pathsep, then exit ZF=NZ
   353 0000682D 7504                <1>     jnz .exit
   354 0000682F EBED                <1>     jmp short .nextChar ;Else get the next chars
   355                              <1> .endOfString:
   356 00006831 84E4                <1>     test ah, ah ;If ah is also the end of the path, then ZF=ZE else ZF=NZ
   357                              <1> .exit:
   358 00006833 5F                  <1>     pop rdi
   359 00006834 5E                  <1>     pop rsi
   360 00006835 58                  <1>     pop rax
   361                              <1>     return
    13                              <2> %%_ret:
    14 00006836 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   362                              <1> checkPathspecOK:
   363                              <1> ;Input:
   364                              <1> ;rsi -> points to a path to verify if it is ok.
   365                              <1> ;Output:
   366                              <1> ;CF=NC => The path is totally clean and ok to use.
   367                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   368                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   369                              <1> ; and depending on method of invokation and caller, may be permissable.
   370                              <1> ;We accept lc and uc characters in this check function.
   371 00006837 50                  <1>     push rax
   372 00006838 53                  <1>     push rbx    ;Use rbx as the return flag status
   373 00006839 56                  <1>     push rsi
   374 0000683A 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   375                              <1> 
   376                              <1>     ;Start by getting the length of the ASCIIZ string.
   377 0000683C 51                  <1>     push rcx
   378 0000683D 57                  <1>     push rdi
   379 0000683E 4889F7              <1>     mov rdi, rsi
   380 00006841 E887FFFFFF          <1>     call strlen
   381 00006846 81F940000000        <1>     cmp ecx, 64    ;Check
   382 0000684C 5F                  <1>     pop rdi
   383 0000684D 59                  <1>     pop rcx
   384 0000684E 776E                <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   385                              <1>     ;First we verify if our path is relative or canonical (absolute)
   386 00006850 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   387 00006853 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   388 00006857 7416                <1>     je .netName
   389 00006859 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   390 0000685D 7410                <1>     je .netName
   391 0000685F 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   392 00006862 7412                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   393                              <1>     ;Here if relative
   394 00006864 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   395 0000686B 7551                <1>     jnz .badExit    ;If this is -1, server invoke.
   396 0000686D EB1F                <1>     jmp short .okToScan
   397                              <1> .netName:
   398 0000686F 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the \    jmp short .okToScan
   400                              <1> .diskPath:
   401 00006876 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   402 0000687D F605(F2C60300)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   403 00006884 7408                <1>     jz .okToScan
   404 00006886 AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   405 00006887 E803FFFFFF          <1>     call swapPathSeparator
   406 0000688C 7530                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   407                              <1> .okToScan:
   408 0000688E AC                  <1>     lodsb   
   409 0000688F 84C0                <1>     test al, al ;End of path char?
   410 00006891 7430                <1>     jz .exit
   411 00006893 E8F7FEFFFF          <1>     call swapPathSeparator
   412 00006898 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   413 0000689A 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   414 0000689C 7411                <1>     je .wcFound
   415 0000689E 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   416 000068A0 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   417                              <1>     ;Else we check that the char in al is an acceptable char
   418 000068A2 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   419 000068A4 74E8                <1>     je .okToScan
   420 000068A6 E831000000          <1>     call checkCharValid
   421 000068AB 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   422 000068AD EBDF                <1>     jmp short .okToScan
   423                              <1> .wcFound:
   424 000068AF BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   425 000068B4 EBD8                <1>     jmp short .okToScan
   426                              <1> .wcCheck:
   427                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   428 000068B6 F7C340000000        <1>     test ebx, 40h
   429 000068BC 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   430                              <1>     ;Else fall through in error
   431                              <1> .badExit:
   432 000068BE BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   433                              <1> .exit:
   434 000068C3 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   435 000068C4 9D                  <1>     popfq
   436 000068C5 5E                  <1>     pop rsi
   437 000068C6 5B                  <1>     pop rbx
   438 000068C7 58                  <1>     pop rax
   439                              <1>     return
    13                              <2> %%_ret:
    14 000068C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   440                              <1> 
   441                              <1> scanPathWC:
   442                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   443                              <1> ; even in the final path componant.
   444                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   445                              <1> ;Output: CF=NC => No wildcards present
   446                              <1> ;        CF=CY => Wildcards found
   447 000068C9 50                  <1>     push rax
   448 000068CA 56                  <1>     push rsi
   449                              <1> .scan:
   450 000068CB AC                  <1>     lodsb
   451 000068CC 84C0                <1>     test al, al
   452 000068CE 7409                <1>     jz .exit
   453 000068D0 3C3F                <1>     cmp al, "?"
   454 000068D2 7404                <1>     je .wcFnd
   455 000068D4 3C2A                <1>     cmp al, "*"
   456 000068D6 75F3                <1>     jne .scan
   457                              <1> .wcFnd:
   458 000068D8 F9                  <1>     stc
   459                              <1> .exit:
   460 000068D9 5E                  <1>     pop rsi
   461 000068DA 58                  <1>     pop rax
   462                              <1>     return
    13                              <2> %%_ret:
    14 000068DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   463                              <1> 
   464                              <1> checkCharValid:
   465                              <1> ;If ZF=ZE => Invalid Char
   466                              <1> ;If ZF=NZ => Valid Char
   467 000068DC 51                  <1>     push rcx
   468 000068DD 57                  <1>     push rdi
   469 000068DE B930000000          <1>     mov ecx, badDirNameCharL    ;Get table length
   470 000068E3 488D3DB598FFFF      <1>     lea rdi, badDirNameChar ;Point to bad char table
   471 000068EA F2AE                <1>     repne scasb ;Scan. Stop when equal
   472 000068EC 5F                  <1>     pop rdi
   473 000068ED 59                  <1>     pop rcx
   474                              <1>     return
    13                              <2> %%_ret:
    14 000068EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   475                              <1> 
   476                              <1> 
   477                              <1> skipSpacesAndTabs:
   478                              <1> ;Input: rsi -> String 
   479                              <1> ;Output: rsi -> First non Space or Tab type char
   480 000068EF AC                  <1>     lodsb
   481 000068F0 E815000000          <1>     call isCharSpaceType
   482 000068F5 74F8                <1>     jz skipSpacesAndTabs
   483 000068F7 48FFCE              <1>     dec rsi
   484                              <1>     return
    13                              <2> %%_ret:
    14 000068FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   485                              <1> 
   486                              <1> isCharDelimType:
   487                              <1> ;Input: al = Char to check properties of
   488                              <1> ;Output:    ZF=NZ => Char not name delimiter
   489                              <1> ;           ZF=ZE => Char delimiter
   490 000068FB 50                  <1>     push rax
   491 000068FC 53                  <1>     push rbx
   492 000068FD 488D1D4B99FFFF      <1>     lea rbx, asciiCharProperties
   493 00006904 D7                  <1>     xlatb
   494 00006905 A802                <1>     test al, 2
   495 00006907 5B                  <1>     pop rbx
   496 00006908 58                  <1>     pop rax
   497                              <1>     return
    13                              <2> %%_ret:
    14 00006909 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   498                              <1> 
   499                              <1> isCharSpaceType:
   500                              <1> ;Input: al = Char to check properties of
   501                              <1> ;Output:    ZF=NZ => Char not Space or Tab
   502                              <1> ;           ZF=ZE => Char Space or Tab
   503 0000690A 50                  <1>     push rax
   504 0000690B 53                  <1>     push rbx
   505 0000690C 488D1D3C99FFFF      <1>     lea rbx, asciiCharProperties
   506 00006913 D7                  <1>     xlatb
   507 00006914 A804                <1>     test al, 4
   508 00006916 5B                  <1>     pop rbx
   509 00006917 58                  <1>     pop rax
   510                              <1>     return
    13                              <2> %%_ret:
    14 00006918 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   511                              <1> 
   512                              <1> compareFarPointers: ;Int 4Fh, AX = 1214h
   513                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   514                              <1> ;Input: rsi = One pointer
   515                              <1> ;       rdi = Second pointer
   516                              <1> ;Output: ZF=ZE if equal
   517                              <1> ;        ZF=NZ if not
   518 00006919 4839FE              <1>     cmp rsi, rdi
   519                              <1>     return
    13                              <2> %%_ret:
    14 0000691C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   520                              <1> 
   521                              <1> checkPathNet:
   522                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   523                              <1> ;Output: ZF=ZE => Path is a net path
   524                              <1> ;        ZF=NZ => Path is not a net path
   525 0000691D 50                  <1>     push rax
   526 0000691E 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   527 00006921 E869FEFFFF          <1>     call swapPathSeparator
   528 00006926 7505                <1>     jnz .exit
   529 00006928 E862FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   530                              <1> .exit:
   531 0000692D 58                  <1>     pop rax
   532                              <1>     return
    13                              <2> %%_ret:
    14 0000692E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   533                              <1> 
   534                              <1> getCharDevDriverPtr:
   535                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   536                              <1> ;Input: rax = Device Driver name (space padded)
   537                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   538 0000692F 488D3D(80C00300)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   539                              <1> .lp:
   540 00006936 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   541                              <1>     rete    ;Exit if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000693A 74F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   542 0000693C 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   543 0000693F 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   544 00006946 75EE                <1>     jne .lp ;If not loop
   545 00006948 F9                  <1>     stc ;Else bad exit
   546                              <1>     return
    13                              <2> %%_ret:
    14 00006949 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   547                              <1> 
    42                                  %include "./Source/Kernel/dosMain.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;        Main Kernel dispatch       :
     3                              <1> ;            and routines           :
     4                              <1> ;-----------------------------------:
     5                              <1> functionDispatch:   ;Int 41h Main function dispatcher
     6                              <1> ;ah = Function number, all other registers have various meanings
     7                              <1>  %if DEBUG
     8                              <1>     ;Entry function
     9                              <1>     debugEnterM
    10                              <1>     lea rbp, .l0000
    11                              <1>     call debPrintNullString
    12                              <1>     call debPrintFunctionName
    13                              <1>     jmp short .l0001
    14                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    15                              <1> .l0001:    
    16                              <1>     debugExitM
    17                              <1>     %endif
    18 0000694A FA                  <1>     cli ;Halt external interrupts
    19 0000694B FC                  <1>     cld ;Ensure all string ops occur in the right direction
    20 0000694C 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    21 0000694F 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    22                              <1>     ;Cherry pick functions
    23 00006955 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    24 00006958 7235                <1>     jb .fsbegin   ;If below skip these checks
    25 0000695A 0F847C020000        <1>     je ctrlBreakCheck
    26 00006960 80FC64              <1>     cmp ah, 64h
    27 00006963 0F84BC020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    28 00006969 7724                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    29 0000696B 80FC51              <1>     cmp ah, 51h
    30 0000696E 0F849F020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    31 00006974 80FC62              <1>     cmp ah, 62h
    32 00006977 0F849F020000        <1>     je getPSPaddr          ;Calls the above function
    33 0000697D 80FC50              <1>     cmp ah, 50h
    34 00006980 0F8484020000        <1>     je setCurrProcessID
    35 00006986 80FC61              <1>     cmp ah, 61h           ;New service, Process Services, reentrant
    36 00006989 0F849E020000        <1>     je systemServices
    37                              <1> .fsbegin:
    38 0000698F E827010000          <1>     call dosPushRegs ;Push the usual prologue registers
    39 00006994 48891D(77C40300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    40 0000699B 66C705(38C40300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    40 000069A3 00                  <1>
    41 000069A4 488B05(6FC40300)    <1>     mov rax, qword [oldRSP]
    42 000069AB 488905(5FC40300)    <1>     mov qword [oldoldRSP], rax
    43 000069B2 FE05(FDC30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    44 000069B8 488925(6FC40300)    <1>     mov qword [oldRSP], rsp
    45                              <1> ;Network related variable resetting
    46 000069BF C605(F2C60300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    47                              <1> ;Here, we want to save oldRSP in the callers PSP
    48 000069C6 488B05(14C40300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    49 000069CD 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    50 000069D1 58                  <1>     pop rax     ;Get old rax back
    51 000069D2 50                  <1>     push rax    ;and push it back onto the stack
    52                              <1> .abortEP:
    53                              <1> .charFun0CEP:
    54                              <1> .serverEP:
    55 000069D3 488D25(00CD0300)    <1>     lea rsp, critStakTop
    56 000069DA FB                  <1>     sti         ;Reenable interrupts
    57                              <1> 
    58 000069DB 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    59 000069DD 881D(88C40300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    60 000069E3 C605(89C40300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    61 000069EA 881D(5EC40300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
    62 000069F0 881D(7FC40300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    63                              <1> 
    64 000069F6 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    65 000069F7 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
    66 000069F9 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    67 000069FB 488D05D198FFFF      <1>     lea rax, kDispTbl
    68 00006A02 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    69 00006A05 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    70 00006A09 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
    71 00006A0C 58                  <1>     pop rax
    72                              <1> 
    73 00006A0D 84E4                <1>     test ah, ah     ;Simple Terminate function?
    74 00006A0F 741C                <1>     jz .fddiskOp
    75 00006A11 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
    76 00006A14 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
    77 00006A16 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
    78 00006A19 7712                <1>     ja .fddiskOp
    79                              <1> ;Char operations here
    80 00006A1B F605(FCC30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
    81 00006A22 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
    82 00006A24 488D25(90D30300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
    83 00006A2B EB40                <1>     jmp short .fdGoToFunction
    84                              <1> .fddiskOp:
    85                              <1>     ;Disk operations go here
    86                              <1>     ;Save rax on entry to a disk funciton
    87 00006A2D 488905(28C40300)    <1>     mov qword [oldRAX], rax
    88                              <1>     ;Clear up error info
    89 00006A34 C605(FFC30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
    90 00006A3B C605(FCC30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
    91 00006A42 C605(FEC30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
    92                              <1> 
    93 00006A49 50                  <1>     push rax
    94 00006A4A B482                <1>     mov ah, 82h ;Cancel all critical section!
    95 00006A4C CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
    96 00006A4E 58                  <1>     pop rax
    97                              <1> 
    98 00006A4F C605(89C40300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
    99 00006A56 488D25(D0D90300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   100 00006A5D F605(27C40300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   101 00006A64 7407                <1>     jz .fdGoToFunction
   102                              <1> ; HANDLE CTRL+BREAK HERE!
   103 00006A66 50                  <1>     push rax
   104 00006A67 E823B8FFFF          <1>     call checkBreak   ; Check for a ^C
   105 00006A6C 58                  <1>     pop rax
   106                              <1> .fdGoToFunction:
   107 00006A6D 48871D(77C40300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   108                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   109                              <1>     ;
   110                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   111                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   112                              <1>     ;
   113                              <1>     %if DEBUG && REGS
   114                              <1>     ;Print stack if necessary function
   115                              <1>     debugEnterM
   116                              <1>     call debPrintDOSStack
   117                              <1>     debugExitM
   118                              <1>     %endif
   119 00006A74 FF15(77C40300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   120                              <1>     %if DEBUG
   121                              <1>     ;Entry function
   122                              <1>     debugEnterM
   123                              <1>     lea rbp, .l0002
   124                              <1>     call debPrintNullString
   125                              <1>     jmp short .l0003
   126                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   127                              <1> .l0003:    
   128                              <1>     debugExitM
   129                              <1>     %endif
   130                              <1>     %if DEBUG && REGS
   131                              <1>     ;Exit function
   132                              <1>     debugEnterM
   133                              <1>     call debPrintDOSStack
   134                              <1>     debugExitM
   135                              <1>     %endif
   136                              <1> .fdExit:
   137 00006A7A FA                  <1>     cli     ;Redisable interrupts
   138 00006A7B FE0D(FDC30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   139 00006A81 488B25(6FC40300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   140 00006A88 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   141 00006A8B 488B05(5FC40300)    <1>     mov rax, qword [oldoldRSP]
   142 00006A92 488905(6FC40300)    <1>     mov qword [oldRSP], rax
   143 00006A99 E806000000          <1>     call dosPopRegs  ;Pop the frame
   144 00006A9E 48CF                <1>     iretq
   145                              <1> .fdExitBad:
   146 00006AA0 30C0                <1>     xor al, al
   147                              <1> defaultIretq:
   148 00006AA2 48CF                <1>     iretq
   149                              <1> dosPopRegs:
   150 00006AA4 8F05(67C40300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   151 00006AAA 58                  <1>     pop rax
   152 00006AAB 5B                  <1>     pop rbx
   153 00006AAC 59                  <1>     pop rcx
   154 00006AAD 5A                  <1>     pop rdx
   155 00006AAE 5E                  <1>     pop rsi
   156 00006AAF 5F                  <1>     pop rdi
   157 00006AB0 5D                  <1>     pop rbp
   158 00006AB1 4158                <1>     pop r8
   159 00006AB3 4159                <1>     pop r9
   160 00006AB5 FF25(67C40300)      <1>     jmp qword [dosReturn]
   161                              <1> dosPushRegs:
   162 00006ABB 8F05(67C40300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   163 00006AC1 4151                <1>     push r9
   164 00006AC3 4150                <1>     push r8
   165 00006AC5 55                  <1>     push rbp
   166 00006AC6 57                  <1>     push rdi
   167 00006AC7 56                  <1>     push rsi
   168 00006AC8 52                  <1>     push rdx
   169 00006AC9 51                  <1>     push rcx
   170 00006ACA 53                  <1>     push rbx
   171 00006ACB 50                  <1>     push rax
   172 00006ACC FF25(67C40300)      <1>     jmp qword [dosReturn]
   173                              <1> dosCrit1Enter:
   174                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    13                              <2> %%_ret:
    14 00006AD2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175 00006AD3 B801800000          <1>     mov eax, 8001h
   176 00006AD8 CD4A                <1>     int 4ah
   177 00006ADA 58                  <1>     pop rax
   178                              <1>     return
    13                              <2> %%_ret:
    14 00006ADB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   179                              <1> dosCrit1Exit:
   180                              <1>     return
    13                              <2> %%_ret:
    14 00006ADC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   181 00006ADD B801810000          <1>     mov eax, 8101h
   182 00006AE2 CD4A                <1>     int 4ah
   183 00006AE4 58                  <1>     pop rax
   184                              <1>     return
    13                              <2> %%_ret:
    14 00006AE5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> dosCrit2Enter:
   186                              <1>     return
    13                              <2> %%_ret:
    14 00006AE6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   187 00006AE7 B802800000          <1>     mov eax, 8002h
   188 00006AEC CD4A                <1>     int 4ah
   189 00006AEE 58                  <1>     pop rax
   190                              <1>     return
    13                              <2> %%_ret:
    14 00006AEF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   191                              <1> dosCrit2Exit:
   192                              <1>     return
    13                              <2> %%_ret:
    14 00006AF0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   193 00006AF1 B802810000          <1>     mov eax, 8102h
   194 00006AF6 CD4A                <1>     int 4ah
   195 00006AF8 58                  <1>     pop rax
   196                              <1>     return
    13                              <2> %%_ret:
    14 00006AF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> ;FCB specific returns
   199                              <1> fcbGoodExit:
   200                              <1> ;Preserve the carry flag on entry to DOS
   201 00006AFA 30C0                <1>     xor al, al ;Set return code al = 0
   202                              <1>     return
    13                              <2> %%_ret:
    14 00006AFC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   203                              <1> fcbErrExit:
   204                              <1> ;Preserve the carry flag on entry to DOS
   205                              <1> ;Input: eax = Extended error code to store in SDA 
   206 00006AFD E836000000          <1>     call xLatError
   207 00006B02 B0FF                <1>     mov al, -1  ;Set return code al = -1
   208 00006B04 F9                  <1>     stc
   209                              <1>     return
    13                              <2> %%_ret:
    14 00006B05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> 
   211                              <1> ;Handle and General DOS Returns
   212                              <1> ;All good exits destroy AT LEAST ax 
   213                              <1> extGoodExit2:
   214                              <1> ;Good exit with an extended return code in eax
   215 00006B06 E86AFBFFFF          <1>     call getUserRegs
   216 00006B0B 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   217 00006B0D EB08                <1>     jmp short extGoodExit.extGoodCommon
   218                              <1> extGoodExit:
   219                              <1> ;Good exit
   220                              <1> ;Return code in ax
   221 00006B0F E861FBFFFF          <1>     call getUserRegs
   222 00006B14 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   223                              <1> .extGoodCommon:
   224 00006B17 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   225 00006B1B F8                  <1>     clc
   226                              <1>     return
    13                              <2> %%_ret:
    14 00006B1C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> extErrExit:
   228                              <1> ;The extended error exit from DOS
   229                              <1> ;Jumped to with AL=Extended error code
   230                              <1> ;Can be called too.
   231                              <1> ;Input: al = Extended error code
   232                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   233                              <1> ;   Returns with: eax = xLat Error
   234                              <1> ;                 rsi = callerFrame
   235 00006B1D 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   236 00006B20 E813000000          <1>     call xLatError
   237 00006B25 E891000000          <1>     call checkFail
   238 00006B2A E846FBFFFF          <1>     call getUserRegs
   239 00006B2F 668906              <1>     mov word [rsi + callerFrame.rax], ax
   240 00006B32 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   241 00006B36 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   242                              <1>     return
    13                              <2> %%_ret:
    14 00006B37 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> xLatError:
   244                              <1> ;Translates the error code given in ax and sets error code in the var
   245                              <1> ; Input: ax = Extended Error Code
   246                              <1> ; Output: ax = Potentially translated Error Code
   247                              <1> ;         [errorExCde] = Original Error Code
   248                              <1> ;Preserves all registers except ax
   249                              <1> ;AH is always returned as 0
   250 00006B38 53                  <1>     push rbx
   251 00006B39 51                  <1>     push rcx
   252 00006B3A 56                  <1>     push rsi
   253 00006B3B 668905(00C40300)    <1>     mov word [errorExCde], ax
   254 00006B42 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   255 00006B44 488D354495FFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   256                              <1> .readEntry:
   257 00006B4B 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   258 00006B4D 3CFF                <1>     cmp al, -1
   259 00006B4F 741F                <1>     je .skipXlat
   260 00006B51 3A05(29C40300)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   261 00006B57 7408                <1>     je .found
   262                              <1>     ;Here, entry not found, goto next entry
   263 00006B59 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   264 00006B5C 4801C6              <1>     add rsi, rax    ;Goto next entry
   265 00006B5F EBEA                <1>     jmp short .readEntry
   266                              <1> .found:
   267                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   268 00006B61 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   269                              <1> .mainSearch:
   270 00006B64 AC                  <1>     lodsb   ;Get one byte into al
   271 00006B65 38C3                <1>     cmp bl, al  ;Check against the error code
   272 00006B67 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   273 00006B69 FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   274 00006B6B 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   275                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   276 00006B6D 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   277                              <1> .skipXlat:
   278 00006B70 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   279 00006B72 5E                  <1>     pop rsi
   280 00006B73 59                  <1>     pop rcx
   281 00006B74 5B                  <1>     pop rbx
   282                              <1>     return
    13                              <2> %%_ret:
    14 00006B75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   283                              <1> setErrorVars:   ;Int 4Fh, AX=1222h
   284                              <1> ;Looks up the error code in the variable and sets the other error vars
   285                              <1> ;Called with the lookup table in rsi
   286                              <1> ;All regs preserved
   287 00006B76 50                  <1>     push rax
   288 00006B77 53                  <1>     push rbx
   289 00006B78 51                  <1>     push rcx
   290 00006B79 56                  <1>     push rsi
   291 00006B7A 0FB71D(00C40300)    <1>     movzx ebx, word [errorExCde]
   292 00006B81 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   293                              <1> .readEntry:
   294 00006B86 AD                  <1>     lodsd   ;Read the dword table entry into eax
   295 00006B87 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   296 00006B8C 7428                <1>     je .exit    
   297 00006B8E 38D8                <1>     cmp al, bl  ;Compare the error codes
   298 00006B90 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   299 00006B92 D3E8                <1>     shr eax, cl
   300 00006B94 3CFF                <1>     cmp al, -1
   301 00006B96 7406                <1>     je .skipClass
   302 00006B98 8805(03C40300)      <1>     mov byte [errorClass], al
   303                              <1> .skipClass:
   304 00006B9E D3E8                <1>     shr eax, cl
   305 00006BA0 3CFF                <1>     cmp al, -1
   306 00006BA2 7406                <1>     je .skipAct
   307 00006BA4 8805(02C40300)      <1>     mov byte [errorAction], al
   308                              <1> .skipAct:
   309 00006BAA D3E8                <1>     shr eax, cl
   310 00006BAC 3CFF                <1>     cmp al, -1
   311 00006BAE 7406                <1>     je .exit
   312 00006BB0 8805(FFC30300)      <1>     mov byte [errorLocus], al
   313                              <1> .exit:
   314 00006BB6 5E                  <1>     pop rsi
   315 00006BB7 59                  <1>     pop rcx
   316 00006BB8 5B                  <1>     pop rbx
   317 00006BB9 58                  <1>     pop rax
   318                              <1>     return
    13                              <2> %%_ret:
    14 00006BBA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   319                              <1> checkFail:
   320                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   321                              <1> ; and swaps the var error code if so
   322 00006BBB 803D(5EC40300)00    <1>     cmp byte [Int44Fail], 0
   323 00006BC2 7509                <1>     jnz .skipFail
   324 00006BC4 66C705(00C40300)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   324 00006BCC 00                  <1>
   325                              <1> .skipFail:
   326 00006BCD 56                  <1>     push rsi
   327 00006BCE 488D355695FFFF      <1>     lea rsi, extErrTbl
   328 00006BD5 E89CFFFFFF          <1>     call setErrorVars
   329 00006BDA 5E                  <1>     pop rsi
   330                              <1>     return
    13                              <2> %%_ret:
    14 00006BDB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   331                              <1> ;========================================:
   332                              <1> ;      Reentrant Kernel Functions        :
   333                              <1> ;========================================:
   334                              <1> ctrlBreakCheck:    ;ah = 33h
   335 00006BDC 84C0                <1>     test al, al
   336 00006BDE 7508                <1>     jnz .cbcget  ;Get the state or other functions
   337 00006BE0 8A15(27C40300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   338 00006BE6 48CF                <1>     iretq
   339                              <1> .cbcget:
   340 00006BE8 3C02                <1>     cmp al, 02h
   341 00006BEA 771A                <1>     ja .cbcBad
   342 00006BEC 740D                <1>     jz .cbcxchg ;Function 2
   343 00006BEE 52                  <1>     push rdx
   344 00006BEF 80E201              <1>     and dl, 1   ;Get only the bottom bit
   345 00006BF2 8815(27C40300)      <1>     mov byte [breakFlag], dl    ;Set the state
   346 00006BF8 5A                  <1>     pop rdx
   347 00006BF9 48CF                <1>     iretq
   348                              <1> .cbcxchg:
   349 00006BFB 80E201              <1>     and dl, 1
   350 00006BFE 8615(27C40300)      <1>     xchg byte [breakFlag], dl
   351 00006C04 48CF                <1>     iretq
   352                              <1> .cbcBad:
   353 00006C06 B0FF                <1>     mov al, -1
   354 00006C08 48CF                <1>     iretq
   355                              <1> 
   356                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   357 00006C0A 48891D(14C40300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   358 00006C11 48CF                <1>     iretq
   359                              <1> 
   360                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   361 00006C13 488B15(14C40300)    <1>     mov rdx, qword [currentPSP]
   362 00006C1A 48CF                <1>     iretq
   363                              <1> 
   364                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   365 00006C1C 488B15(14C40300)    <1>     mov rdx, qword [currentPSP]
   366 00006C23 48CF                <1>     iretq
   367                              <1> 
   368                              <1> setDriverLookahead:;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   369 00006C25 8805(D9D90300)      <1>     mov byte [lookahead], al    
   370 00006C2B 48CF                <1>     iretq
   371                              <1> 
   372                              <1> systemServices: ;ah = 61h
   373 00006C2D 84C0                <1>     test al, al ;Get Environment pointer
   374 00006C2F 7410                <1>     jz .getEnvPtr
   375 00006C31 3C01                <1>     cmp al, 1
   376 00006C33 7419                <1>     je .getCmdLineArgs  ;Get ptr to cmdline and fcb's 
   377                              <1>     ;Later add two more to get environment and cmdline ptr for 
   378                              <1>     ;   any process
   379 00006C35 B801000000          <1>     mov eax, errInvFnc
   380                              <1> .exitBad:
   381 00006C3A 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on
   382 00006C3F 48CF                <1>     iretq
   383                              <1> .getEnvPtr:
   384                              <1>     ;Gets the environment pointer in rdx
   385 00006C41 488B15(14C40300)    <1>     mov rdx, qword [currentPSP]
   386 00006C48 488B523E            <1>     mov rdx, qword [rdx + psp.envPtr]   ;Get the environement pointer
   387 00006C4C EB0B                <1>     jmp short .exitOk
   388                              <1> .getCmdLineArgs:
   389 00006C4E 488B15(14C40300)    <1>     mov rdx, qword [currentPSP]
   390 00006C55 488D525C            <1>     lea rdx, qword [rdx + psp.cmdLineArgPtr]   ;Get the cmdargs pointer
   391                              <1> .exitOk:
   392 00006C59 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF
   393 00006C5E 48CF                <1>     iretq
   394                              <1> 
   395                              <1> 
   396                              <1> ;========================================:
   397                              <1> ;            Kernel Functions            :
   398                              <1> ;========================================:
   399                              <1> diskReset:         ;ah = 0Dh
   400                              <1> ;Flush all dirty buffers to disk
   401 00006C60 E86DFEFFFF          <1>     call dosCrit1Enter
   402 00006C65 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   403                              <1> .drCheckBuffer:
   404 00006C6C F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   405 00006C70 7407                <1>     jz .drGotoNextBuffer
   406                              <1> .drFlushBuffer:
   407 00006C72 E8C597FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   408 00006C77 720C                <1>     jc .drExit
   409                              <1> .drGotoNextBuffer:
   410 00006C79 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   411 00006C7C 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   412 00006C83 75E7                <1>     jne .drCheckBuffer
   413                              <1> .drExit:
   414 00006C85 E852FEFFFF          <1>     call dosCrit1Exit
   415 00006C8A B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   416 00006C8F CD4F                <1>     int 4fh
   417                              <1>     return
    13                              <2> %%_ret:
    14 00006C91 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   418                              <1> 
   419                              <1> selectDisk:        ;ah = 0Eh
   420                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   421 00006C92 88D0                <1>     mov al, dl
   422 00006C94 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   423 00006C96 E8FEF9FFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   424 00006C9B 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   425 00006C9D 8805(26C40300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   426                              <1> .skipSettingCurrent:
   427 00006CA3 0FB605(7EC00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   428                              <1>     return
    13                              <2> %%_ret:
    14 00006CAA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   429                              <1> 
   430                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   431 00006CAB 8A05(26C40300)      <1>     mov al, byte [currentDrv]
   432                              <1>     return
    13                              <2> %%_ret:
    14 00006CB1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   433                              <1> 
   434                              <1> FATinfoDefault:    ;ah = 1Bh
   435 00006CB2 30D2                <1>     xor dl, dl
   436                              <1> FATinfoDevice:     ;ah = 1Ch
   437                              <1> ;Input: dl = 1 based drive number
   438                              <1> ;Output:
   439                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   440                              <1> ;cx = bytes per sector
   441                              <1> ;edx = total number of clusters
   442                              <1> ;rbx = Ptr to media ID byte
   443 00006CB4 88D0                <1>     mov al, dl  ;Move drive number into al
   444 00006CB6 E847FAFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   445 00006CBB 7307                <1>     jnc .fidCDSFound
   446 00006CBD B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   447 00006CC2 EB2E                <1>     jmp short .error 
   448                              <1> .fidCDSFound:
   449 00006CC4 E85AF9FFFF          <1>     call getDiskData
   450 00006CC9 7227                <1>     jc .error
   451                              <1> ;Now we have that:
   452                              <1> ;al = sectors per cluster
   453                              <1> ;ah = media ID byte
   454                              <1> ;ebx = total clusters
   455                              <1> ;cx = bytes per sector
   456                              <1> ;edx = number of available clusters
   457 00006CCB E8A5F9FFFF          <1>     call getUserRegs
   458 00006CD0 8825(86C70300)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   459 00006CD6 30E4                <1>     xor ah, ah
   460 00006CD8 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   461 00006CDB 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   462 00006CDF 488D1D(86C70300)    <1>     lea rbx, mediaByte
   463 00006CE6 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   464 00006CEA 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   465                              <1> .badExit:
   466 00006CEE 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   467                              <1>     return
    13                              <2> %%_ret:
    14 00006CF1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   468                              <1> .error:
   469 00006CF2 E826FEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   470 00006CF7 66B8FFFF            <1>     mov ax, -1
   471 00006CFB EBF1                <1>     jmp short .badExit
   472                              <1> 
   473                              <1> setIntVector:      ;ah = 25h
   474                              <1> ;Called with:
   475                              <1> ;   rdx = Pointer to interrupt handler
   476                              <1> ;   al = Interrupt number
   477 00006CFD 50                  <1>     push rax    ;Preserve all registers in call
   478 00006CFE 53                  <1>     push rbx
   479 00006CFF 51                  <1>     push rcx
   480 00006D00 52                  <1>     push rdx
   481 00006D01 56                  <1>     push rsi
   482 00006D02 55                  <1>     push rbp
   483 00006D03 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   484 00006D05 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   485                              <1> ;First call to get default BIOS segement selector and attribute word
   486 00006D0B 88C3                <1>     mov bl, al  ;Set interrupt number 
   487 00006D0D B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   488 00006D12 CD35                <1>     int 35h
   489 00006D14 E85CF9FFFF          <1>     call getUserRegs
   490 00006D19 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   491 00006D1D 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   492 00006D1F 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   493                              <1> ;dx preserves the attribute word
   494 00006D21 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   495 00006D26 CD35                <1>     int 35h
   496 00006D28 5D                  <1>     pop rbp
   497 00006D29 5E                  <1>     pop rsi
   498 00006D2A 5A                  <1>     pop rdx
   499 00006D2B 59                  <1>     pop rcx
   500 00006D2C 5B                  <1>     pop rbx
   501 00006D2D 58                  <1>     pop rax
   502                              <1>     return
    13                              <2> %%_ret:
    14 00006D2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   503                              <1> 
   504                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   505 00006D2F 8805(C5C30300)      <1>     mov byte [verifyFlag], al
   506 00006D35 8025(C5C30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   507                              <1>     return
    13                              <2> %%_ret:
    14 00006D3C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   508                              <1> getDOSversion:     ;ah = 30h
   509 00006D3D E833F9FFFF          <1>     call getUserRegs
   510 00006D42 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   511 00006D44 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   512 00006D47 668B05B292FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   513 00006D4E 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   514                              <1>     return
    13                              <2> %%_ret:
    14 00006D51 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   515                              <1> 
   516                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   517                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   518 00006D52 30D2                <1>     xor dl, dl
   519                              <1> getDeviceDPBptr:   ;ah = 32h
   520                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   521                              <1> ;On exit: rbx = DPB pointer
   522 00006D54 88D0                <1>     mov al, dl
   523 00006D56 E8A7F9FFFF          <1>     call getCDS
   524 00006D5B 722C                <1>     jc .bad
   525 00006D5D 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   526 00006D64 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   527 00006D6A 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   528                              <1>     ;Here ONLY if accessing critical Disk data structures
   529 00006D6C E861FDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   530 00006D71 E845F6FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   531 00006D76 E861FDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   532 00006D7B 720C                <1>     jc .bad
   533 00006D7D E8F3F8FFFF          <1>     call getUserRegs
   534 00006D82 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   535 00006D86 30C0                <1>     xor al, al
   536                              <1>     return
    13                              <2> %%_ret:
    14 00006D88 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   537                              <1> .bad:
   538 00006D89 B0FF                <1>     mov al, -1
   539                              <1>     return
    13                              <2> %%_ret:
    14 00006D8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   540                              <1> 
   541                              <1> getInDOSflagPtr:   ;ah = 34h
   542 00006D8C 488D15(FDC30300)    <1>     lea rdx, inDOS
   543 00006D93 E8DDF8FFFF          <1>     call getUserRegs
   544 00006D98 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   545                              <1>     return
    13                              <2> %%_ret:
    14 00006D9C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   546                              <1> 
   547                              <1> getIntVector:      ;ah = 35h
   548                              <1> ;Called with:
   549                              <1> ;   al = Interrupt Number
   550                              <1> ;Returns:
   551                              <1> ;   rbx = Pointer to interrupt handler
   552 00006D9D E8C5F8FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   553 00006DA2 E8CEF8FFFF          <1>     call getUserRegs
   554 00006DA7 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   555 00006DAB 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   556                              <1>     return
    13                              <2> %%_ret:
    14 00006DAD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   557                              <1> 
   558                              <1> getDiskFreeSpace:  ;ah = 36h
   559                              <1> ;Input: Drive number in dl (0 = Current)
   560                              <1> ;Output:    ax = sectors per cluster
   561                              <1> ;           ebx = number of free clusters
   562                              <1> ;           cx = bytes per sector
   563                              <1> ;           edx = total clusters on drive
   564 00006DAE 88D0                <1>     mov al, dl
   565 00006DB0 E84DF9FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   566 00006DB5 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   567                              <1> ;Else, we at an error.
   568                              <1> ;Simply return with CY set and error code in al with extended error info
   569 00006DB7 B80F000000          <1>     mov eax, errBadDrv
   570 00006DBC E85CFDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   571                              <1>     ;extErrExit sets rsi to caller regs
   572 00006DC1 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   573                              <1>     return
    13                              <2> %%_ret:
    14 00006DC6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   574                              <1> .gdfsCDSFound:
   575 00006DC7 E857F8FFFF          <1>     call getDiskData
   576 00006DCC 7219                <1>     jc .error
   577                              <1> ;Now we have that:
   578                              <1> ;al = sectors per cluster
   579                              <1> ;ah = media ID byte
   580                              <1> ;ebx = total clusters
   581                              <1> ;cx = bytes per sector
   582                              <1> ;edx = number of available clusters
   583 00006DCE E8A2F8FFFF          <1>     call getUserRegs
   584 00006DD3 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   585 00006DD5 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   586 00006DD8 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   587 00006DDC 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   588 00006DDF 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   589                              <1> .badExit:
   590 00006DE3 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   591                              <1>     return
    13                              <2> %%_ret:
    14 00006DE6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   592                              <1> .error:
   593 00006DE7 E831FDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   594 00006DEC 66B8FFFF            <1>     mov ax, -1
   595 00006DF0 EBF1                <1>     jmp short .badExit
   596                              <1> 
   597                              <1> 
   598                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   599 00006DF2 31C0                <1>     xor eax, eax
   600 00006DF4 668705(24C40300)    <1>     xchg ax, word [errorLevel]
   601 00006DFB E90FFDFFFF          <1>     jmp extGoodExit
   602                              <1> 
   603                              <1> getSysVarsPtr:     ;ah = 52h
   604 00006E00 488D15(41C00300)    <1>     lea rdx, sysVarsPtr
   605 00006E07 E869F8FFFF          <1>     call getUserRegs
   606 00006E0C 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   607                              <1>     return
    13                              <2> %%_ret:
    14 00006E10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   608                              <1> 
   609                              <1> 
   610                              <1> ;AH = 53h - CREATE DPB
   611                              <1> createDPB:         ;generates a DPB from a given BPB
   612                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   613                              <1> ;This is done so that the other fields of the DPB can be recycled
   614                              <1> ;Input: rsi = ptr to the BPB
   615                              <1> ;       rbp = ptr to the DPB
   616                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   617                              <1> ;bMediaDescriptor
   618 00006E11 8A4615              <1>     mov al, byte [rsi + bpb.media]
   619 00006E14 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   620                              <1> ;dFirstFreeCluster
   621 00006E17 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   622                              <1> ;dNumberOfFreeClusters
   623 00006E1E C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   624                              <1> ;wBytesPerSector
   625 00006E25 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   626 00006E29 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   627                              <1> ;bMaxSectorInCluster
   628 00006E2D 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   629 00006E30 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   630 00006E32 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   631                              <1> ;bSectorsPerClusterShift
   632 00006E35 FEC0                <1>     inc al
   633 00006E37 30C9                <1>     xor cl, cl
   634                              <1> .cd2:
   635 00006E39 D0E8                <1>     shr al, 1
   636 00006E3B 7404                <1>     jz .cd3
   637 00006E3D FEC1                <1>     inc cl
   638 00006E3F EBF8                <1>     jmp short .cd2
   639                              <1> .cd3:
   640 00006E41 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   641                              <1> ;wFAToffset, number of reserved sectors in partition
   642 00006E44 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   643 00006E48 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   644                              <1> ;bNumberOfFATs
   645 00006E4C 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   646 00006E4F 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   647                              <1> ;wNumberRootDirEntries
   648                              <1> ;Gets the number of 32 byte entries in the root directory
   649                              <1> ;Only valid for FAT 12/16
   650 00006E52 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   651 00006E56 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   652                              <1> ;dFATlength, get the FAT length
   653 00006E5A 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   654 00006E5E 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   655 00006E61 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   656 00006E63 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   657 00006E66 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   658                              <1> ;Complex cases below...
   659                              <1> ;dClusterHeapOffset, start sector of the data area
   660 00006E69 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   661 00006E6D 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   662 00006E70 85C0                <1>     test eax, eax
   663 00006E72 0F44C3              <1>     cmovz eax, ebx
   664                              <1> ;eax = FATsz
   665 00006E75 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   666 00006E79 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   667 00006E7C 85DB                <1>     test ebx, ebx
   668 00006E7E 0F44D9              <1>     cmovz ebx, ecx 
   669                              <1> ;ebx = TotSec
   670 00006E81 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   671 00006E84 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   672                              <1> .cd4:
   673 00006E86 01C2                <1>     add edx, eax
   674 00006E88 FEC9                <1>     dec cl
   675 00006E8A 75FA                <1>     jnz .cd4
   676 00006E8C 89D0                <1>     mov eax, edx    ;Store product in eax
   677 00006E8E 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   678 00006E92 01D0                <1>     add eax, edx
   679                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   680 00006E94 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   681 00006E98 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   682 00006E9B 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   683 00006E9F 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   684 00006EA0 89D0                <1>     mov eax, edx
   685 00006EA2 31D2                <1>     xor edx, edx
   686 00006EA4 F7F1                <1>     div ecx
   687 00006EA6 89C2                <1>     mov edx, eax
   688 00006EA8 58                  <1>     pop rax
   689 00006EA9 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   690                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   691                              <1>     ;aka eax = Start sector of the data area in volume
   692 00006EAB 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   693                              <1> ;dClusterCount
   694 00006EAE 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   695 00006EB0 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   696 00006EB2 31D2                <1>     xor edx, edx
   697 00006EB4 BB01000000          <1>     mov ebx, 1
   698 00006EB9 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   699 00006EBC D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   700 00006EBE F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   701 00006EC0 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   702 00006EC2 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   703                              <1> ;dFirstUnitOfRootDir
   704 00006EC5 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   705 00006ECA 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   706 00006ECD 770F                <1>     ja .cd5
   707                              <1>     ;Else, we need to find the first sector of the root directory
   708                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   709 00006ECF 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   710 00006ED3 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   711                              <1> .cd51:
   712 00006ED7 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   713 00006EDA FFC9                <1>     dec ecx
   714 00006EDC 75F9                <1>     jnz .cd51
   715                              <1> .cd5:
   716 00006EDE 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   717 00006EE1 C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Denote not yet accessed
   718                              <1> ;Exit epilogue
   719 00006EE5 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   720 00006EEC 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   721                              <1>     %if DEBUG && DPBINFO
   722                              <1>     ;Print DPB 
   723                              <1>     debugEnterM
   724                              <1>     push rbp
   725                              <1>     lea rbp, .l0000
   726                              <1>     call debPrintNullString
   727                              <1>     pop rbp
   728                              <1>     call debDPBBPBptr
   729                              <1>     call debMakeDebuggerRespond
   730                              <1>     jmp short .l0001
   731                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   732                              <1> .l0001:
   733                              <1>     debugExitM
   734                              <1>     %endif
   735                              <1>     return
    13                              <2> %%_ret:
    14 00006EEE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   736                              <1> 
   737                              <1> getVerifySetting:  ;ah = 54h
   738 00006EEF 8A05(C5C30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   739                              <1>     return
    13                              <2> %%_ret:
    14 00006EF5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   740                              <1> 
   741                              <1> getExtendedError:  ;ah = 59h
   742 00006EF6 E87AF7FFFF          <1>     call getUserRegs
   743 00006EFB 668B05(00C40300)    <1>     mov ax, word [errorExCde]
   744 00006F02 8A2D(FFC30300)      <1>     mov ch, byte [errorLocus]
   745 00006F08 8A3D(03C40300)      <1>     mov bh, byte [errorClass]
   746 00006F0E 8A1D(02C40300)      <1>     mov bl, byte [errorAction]
   747 00006F14 668906              <1>     mov word [rsi + callerFrame.rax], ax
   748 00006F17 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   749 00006F1B 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   750                              <1>     return
    13                              <2> %%_ret:
    14 00006F1E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   751                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   752                              <1> noOp:
   753                              <1>     return
    13                              <2> %%_ret:
    14 00006F1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    43                                  %include "./Source/Kernel/Net/server.asm"
     1                              <1> ;Network functions here
     2                              <1> 
     3                              <1> dosServer:  ;ah = 5Dh
     4                              <1> ;Dispatches the server function in al. Many of these are share hooks.
     5                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
     6                              <1> ;   rdx = Pointer to DPL
     7 00006F20 3C07                <1>     cmp al, 07h
     8 00006F22 7204                <1>     jb .skip
     9 00006F24 3C09                <1>     cmp al, 09h
    10 00006F26 7619                <1>     jbe .skip2
    11                              <1> .skip:
    12 00006F28 4889D6              <1>     mov rsi, rdx
    13 00006F2B 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    14 00006F2F 66891D(38C40300)    <1>     mov word [machineNum], bx
    15 00006F36 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    16 00006F3A 48891D(30C40300)    <1>     mov qword [serverPSP], rbx
    17                              <1> .skip2:
    18 00006F41 488D1DD7FFFFFF      <1>     lea rbx, noOp   ;Push the ok function return address
    19 00006F48 53                  <1>     push rbx
    20 00006F49 488B1D(83DA0300)    <1>     mov rbx, qword [serverDispTblPtr]   ;Get the qword
    21 00006F50 53                  <1>     push rbx    ;Push the table ptr on the stack
    22 00006F51 50                  <1>     push rax    ;Push al onto stack as a qword
    23 00006F52 E856010000          <1>     call serverFunctionSelect
    24 00006F57 B801000000          <1>     mov eax, eLocUnk
    25 00006F5C 8805(FFC30300)      <1>     mov byte [errorLocus], al
    26 00006F62 E9B6FBFFFF          <1>     jmp extErrExit
    27                              <1> 
    28                              <1> serverDispatch: ;AX=5D00h
    29                              <1> ;Input: rsi points to the DOS parameter list
    30 00006F67 58                  <1>     pop rax ;Pop additional return ptr off the stack
    31 00006F68 56                  <1>     push rsi    ;Put dpl ptr in rdi
    32 00006F69 5F                  <1>     pop rdi
    33 00006F6A E806F7FFFF          <1>     call getUserRegs
    34 00006F6F 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    35 00006F72 56                  <1>     push rsi
    36 00006F73 B906000000          <1>     mov ecx, 6
    37 00006F78 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    38 00006F7B 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    39 00006F82 48A5                <1>     movsq   ;Transfer r8...
    40 00006F84 48A5                <1>     movsq   ;... and r9
    41 00006F86 5E                  <1>     pop rsi
    42 00006F87 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    43 00006F8A 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    44 00006F8E 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    45 00006F92 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    46 00006F96 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    47 00006F9A 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    48 00006F9E 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    49 00006FA2 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    50 00006FA6 48891D(77C40300)    <1>     mov qword [oldRBX], rbx
    51 00006FAD C605(F2C60300)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    52 00006FB4 E91AFAFFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    53                              <1> 
    54                              <1> commitAllFilesForProcess:   ;AX=5D01h
    55                              <1> ;Will commit all the files for the current Process as indicated by the DPL
    56                              <1> ;A bad procID (otherwise known as a PSP) may otherwise crash the call.
    57                              <1> ;Thus we check the first two bytes of the current PSP to be CD 40h
    58                              <1> ;If so, we proceed, otherwise, fail with AccDen
    59 00006FB9 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP] ;Get the current PSP (setup from DPL)
    60 00006FC0 66813BCD40          <1>     cmp word [rbx], 40CDh
    61 00006FC5 740A                <1>     je .validTask
    62 00006FC7 B805000000          <1>     mov eax, errAccDen
    63 00006FCC E94CFBFFFF          <1>     jmp extErrExit
    64                              <1> .validTask:
    65 00006FD1 31DB                <1>     xor ebx, ebx    ;Start from file 0
    66 00006FD3 E8FAFAFFFF          <1>     call dosCrit1Enter
    67                              <1> .mainLoop:
    68                              <1>     ;Now loop through the JFT of the current task committing the files
    69 00006FD8 53                  <1>     push rbx
    70 00006FD9 E870D7FFFF          <1>     call derefSFTPtr    ;Get in rdi the pointer for this SFT entry
    71 00006FDE 7227                <1>     jc .exit
    72 00006FE0 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0   ;Is this an unopened file?
    73 00006FE5 741B                <1>     je .gotoNextFile
    74 00006FE7 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1  ;Is this in the process of something?
    75 00006FEC 7414                <1>     je .gotoNextFile
    76 00006FEE 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;Dont commit redirs
    77 00006FF4 750C                <1>     jnz .gotoNextFile
    78 00006FF6 48893D(22C70300)    <1>     mov qword [currentSFT], rdi ;Set this as the current SFT
    79 00006FFD E8EBC4FFFF          <1>     call commitMain ;Will reenter critical section but thats ok
    80                              <1>     ;If it succeeded, great, cool also if not, keep going!
    81                              <1> .gotoNextFile:
    82 00007002 5B                  <1>     pop rbx
    83 00007003 FFC3                <1>     inc ebx
    84 00007005 EBD1                <1>     jmp short .mainLoop
    85                              <1> .exit:
    86 00007007 E8D0FAFFFF          <1>     call dosCrit1Exit
    87 0000700C 5B                  <1>     pop rbx ;Align stack
    88 0000700D E9FDFAFFFF          <1>     jmp extGoodExit
    89                              <1> 
    90                              <1> closeFilesByName:           ;AX=5D02h
    91 00007012 FF15(DCC00300)      <1>     call qword [closeNameShare]
    92                              <1> .shareExit: ;Use this symbol if we need a decision to be made
    93                              <1> .shareExitBad:  ;Use this symbol if we want to exit Error
    94 00007018 0F82FFFAFFFF        <1>     jc extErrExit
    95                              <1> .shareExitGood:
    96 0000701E E9ECFAFFFF          <1>     jmp extGoodExit
    97                              <1> 
    98                              <1> closeFilesByComputer:       ;AX=5D03h
    99 00007023 FF15(CCC00300)      <1>     call qword [closeCompShare]
   100 00007029 EBED                <1>     jmp short closeFilesByName.shareExit
   101                              <1> 
   102                              <1> closeFilesByProcess:        ;AX=5D04h
   103 0000702B FF15(D4C00300)      <1>     call qword [closeTaskShare]
   104 00007031 EBE5                <1>     jmp short closeFilesByName.shareExit
   105                              <1> 
   106                              <1> getOpenFileListEntry:       ;AX=5D05h
   107 00007033 FF15(FCC00300)      <1>     call qword [openFileListShare]  ;Must zero extend all results to 8 bytes
   108 00007039 72DD                <1>     jc closeFilesByName.shareExitBad
   109 0000703B E835F6FFFF          <1>     call getUserRegs
   110 00007040 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Network machine number (0-ext)
   111 00007044 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi  ;Ptr to file name
   112                              <1> .shareExit:    ;rcx must be zero extended however to use this
   113 00007048 48894E10            <1>     mov qword [rsi + callerFrame.rcx], rcx  ;Lock count
   114                              <1> .shareExit2:
   115 0000704C EBD0                <1>     jmp short closeFilesByName.shareExitGood
   116                              <1> 
   117                              <1> getSDAData:                 ;AX=5D06h
   118                              <1> ;Returns:
   119                              <1> ;   rsi -> nonreentrant data area (includes all three DOS stacks)
   120                              <1> ;   (critical error flag is first byte) (see #01687)
   121                              <1> ;   rcx = size in bytes of area which must be swapped while in DOS
   122                              <1> ;   rdx = size in bytes of area which must always be swapped
   123 0000704E 488D3D(FCC30300)    <1>     lea rdi, sda
   124 00007055 48B987160000000000- <1>     mov rcx, sdaLen
   124 0000705E 00                  <1>
   125 0000705F 48BA5B160000000000- <1>     mov rdx, sdaMSLen
   125 00007068 00                  <1>
   126 00007069 E807F6FFFF          <1>     call getUserRegs
   127 0000706E 48897E20            <1>     mov qword [rsi + callerFrame.rsi], rdi
   128 00007072 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   129 00007076 EBD0                <1>     jmp short getOpenFileListEntry.shareExit   ;Stores rcx and returns ok
   130                              <1> 
   131                              <1> printerRedir:               ;AX=5D07/8/9h
   132 00007078 50                  <1>     push rax
   133 00007079 B825110000          <1>     mov eax, 1125h  ;Redir Printer Mode setup
   134 0000707E CD4F                <1>     int 4Fh
   135 00007080 5B                  <1>     pop rbx
   136 00007081 7295                <1>     jc short closeFilesByName.shareExitBad
   137 00007083 EB99                <1>     jmp short  closeFilesByName.shareExitGood
   138                              <1> 
   139                              <1> setExtendedErrorInfo:       ;AX=5D0Ah
   140                              <1> ;Input:
   141                              <1> ;   rsi -> DPL
   142 00007085 8B06                <1>     mov eax, dword [rsi + dpl.rax]  ;Get ax (extended error code)
   143 00007087 668905(00C40300)    <1>     mov word [errorExCde], ax
   144 0000708E 488B4628            <1>     mov rax, qword [rsi + dpl.rdi]  ;Get rdi as a full ptr
   145 00007092 488905(04C40300)    <1>     mov qword [xInt44RDI], rax
   146 00007099 8B4608              <1>     mov eax, dword [rsi + dpl.rbx]  ;Get bx (error action and class)
   147 0000709C 668905(02C40300)    <1>     mov word [errorAction], ax  ;Store action and class together
   148 000070A3 8B4610              <1>     mov eax, dword [rsi + dpl.rcx]  ;Get ch (error locus)
   149 000070A6 8825(FFC30300)      <1>     mov byte [errorLocus], ah
   150                              <1>     return  ;Return to the function ptr on the stack (the return function)
    13                              <2> %%_ret:
    14 000070AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> serverFunctionSelect:
   153                              <1> ;First parameter is al ONLY, subfunction number (BP + 2*8)
   154                              <1> ;Second parameter is table address, (BP + 3*8)
   155 000070AD 55                  <1>     push rbp
   156 000070AE 4889E5              <1>     mov rbp, rsp
   157 000070B1 53                  <1>     push rbx
   158 000070B2 488B5D18            <1>     mov rbx, qword [rbp + 3*8]  ;Get table ptr
   159 000070B6 0FB61B              <1>     movzx ebx, byte [rbx]   ;Get the table length
   160 000070B9 3A5D10              <1>     cmp bl, byte [rbp + 2*8]    ;Is subfunction number less than bl?
   161 000070BC 731E                <1>     jnb .argumentTooBig
   162 000070BE 0FB65D10            <1>     movzx ebx, byte [rbp + 2*8] ;Get subfunction into ebx zeroextended
   163 000070C2 C1E302              <1>     shl ebx, 2  ;Convert to word offset
   164 000070C5 FFC3                <1>     inc ebx ;Go past the initial byte of the table
   165 000070C7 0FB71B              <1>     movzx ebx, word [rbx]   ;Get the offset of the function from the tbl head
   166 000070CA 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   167 000070CE 48895D10            <1>     mov qword [rbp + 2*8], rbx  ;Store this address as the return address
   168 000070D2 5B                  <1>     pop rbx
   169 000070D3 5D                  <1>     pop rbp
   170 000070D4 4881C418000000      <1>     add rsp, 3*8    ;Go past old return and old subfunction value
   171                              <1>     return
    13                              <2> %%_ret:
    14 000070DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   172                              <1> .argumentTooBig:
   173 000070DC 5B                  <1>     pop rbx
   174 000070DD 5D                  <1>     pop rbp
   175 000070DE C21800              <1>     ret 3*8 ;Clear stack of all argument bytes
   176                              <1> 
   177                              <1> netServices:   ;ah = 5Eh, do nothing
   178                              <1> ;Only two native functions, AL=0 and AL=1 (get/set machine name)
   179 000070E1 3C01                <1>     cmp al, 01
   180 000070E3 7214                <1>     jb .getName
   181 000070E5 7437                <1>     jz .setName
   182 000070E7 3C06                <1>     cmp al, 6
   183 000070E9 724C                <1>     jb .netRedir
   184 000070EB C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   185 000070F2 B001                <1>     mov al, errInvFnc
   186                              <1> .badExit:
   187 000070F4 E924FAFFFF          <1>     jmp extErrExit
   188                              <1> .getName:
   189                              <1> ;Input: rdx -> 16 byte buffer to fill with machine name
   190                              <1> ;Output: CF=NC => Success.
   191                              <1> ;        CH = Name Validity (if 0, the name is invalid)
   192                              <1> ;        CL = NetBIOS number for the machine
   193                              <1> ;        rdx -> Blank padded Filled buffer with machine name
   194                              <1> ;        CF=CY => Failure
   195                              <1> ;        AX = Errorcode
   196 000070F9 4889D7              <1>     mov rdi, rdx
   197 000070FC 0FB70D(23C00300)    <1>     movzx ecx, word [validNetNam]
   198 00007103 E86DF5FFFF          <1>     call getUserRegs
   199 00007108 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   200 0000710C 488D35(CBC30300)    <1>     lea rsi, machineName
   201                              <1> .nameCmn:
   202 00007113 31C0                <1>     xor eax, eax
   203 00007115 48A5                <1>     movsq
   204 00007117 A5                  <1>     movsd
   205 00007118 66A5                <1>     movsw
   206 0000711A A4                  <1>     movsb
   207 0000711B AA                  <1>     stosb   ;Store terminating null
   208 0000711C EB24                <1>     jmp short .exitGood
   209                              <1> .setName:
   210                              <1> ;Input: rdx -> 16 byte buffer with new machine name
   211                              <1> ;       CH = 0 => Mark name as invalid
   212                              <1> ;         != 0 => Mark name as valid
   213                              <1> ;       CL = NetBIOS number for the name
   214 0000711E 66890D(23C00300)    <1>     mov word [validNetNam], cx
   215 00007125 4889D6              <1>     mov rsi, rdx
   216 00007128 FE05(CAC30300)      <1>     inc byte [serverCnt]    ;Increment the name change flag
   217 0000712E 488D3D(CBC30300)    <1>     lea rdi, machineName
   218 00007135 EBDC                <1>     jmp short .nameCmn
   219                              <1> 
   220                              <1> .netRedir:
   221 00007137 50                  <1>     push rax
   222 00007138 B81F110000          <1>     mov eax, 111Fh  ;Net Services over the Redirector
   223 0000713D CD4F                <1>     int 4Fh
   224 0000713F 5A                  <1>     pop rdx
   225 00007140 72B2                <1>     jc .badExit
   226                              <1> .exitGood:
   227 00007142 E9C8F9FFFF          <1>     jmp extGoodExit
   228                              <1> 
   229                              <1> netRedir:;ah = 5Fh, redirector needs to be installed
   230                              <1> ;Exception: We pick off ah=07 (ENABLE DRIVE) and ah=08 (DISABLE DRIVE)
   231 00007147 80FC07              <1>     cmp ah, 07h
   232 0000714A 7419                <1>     je .driveAction
   233 0000714C 80FC08              <1>     cmp ah, 08h
   234 0000714F 7414                <1>     je .driveAction
   235                              <1>     ;Else, use redirector to process request
   236 00007151 50                  <1>     push rax
   237 00007152 B81E110000          <1>     mov eax, 111eh  ;Do redirection redirector function
   238 00007157 CD4F                <1>     int 4Fh
   239 00007159 5B                  <1>     pop rbx
   240                              <1> .badExit:
   241 0000715A 0F82BDF9FFFF        <1>     jc extErrExit
   242                              <1> .goodExit:
   243 00007160 E9AAF9FFFF          <1>     jmp extGoodExit
   244                              <1> .driveAction:
   245                              <1> ;dl must have valid 0-based drive number
   246 00007165 86C2                <1>     xchg al, dl ;Get function number in dl and drive number in al
   247 00007167 E8F1F5FFFF          <1>     call getCDSforDrive
   248 0000716C 72EC                <1>     jc short .badExit
   249                              <1>     ;rsi points to CDS
   250 0000716E 80EA07              <1>     sub dl, 7
   251 00007171 7408                <1>     jz .enable
   252 00007173 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear bit
   253 00007179 EBE5                <1>     jmp short .goodExit
   254                              <1> .enable:
   255 0000717B 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive   ;Set bit
   256 00007181 EBDD                <1>     jmp short .goodExit
    44                                  %include "./Source/Kernel/Net/multiplx.asm"
     1                              <1> ;Default multiplexer. Current only installed function is ah=12h
     2                              <1> ;If a ah=11h request is made, we return CF=CY (as intended)
     3                              <1> ;If an argument needs to be in al for any function, it must be pushed on
     4                              <1> ; stack before the interrupt is called. This word is always read from the
     5                              <1> ; stack, but the stack is not rejiggled to remove it
     6                              <1> 
     7                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
     8 00007183 80FC12              <1>     cmp ah, 12h
     9 00007186 7546                <1>     jne .exitBad       ;Exit if not for us
    10 00007188 3C26                <1>     cmp al, mDispTblL / 2
    11 0000718A 7342                <1>     jae .exitBad   ;If above or equal, exit
    12 0000718C 53                  <1>     push rbx
    13 0000718D 51                  <1>     push rcx
    14 0000718E 488D1D1292FFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    15 00007195 53                  <1>     push rbx
    16 00007196 0FB6C8              <1>     movzx ecx, al   ;Get the subfunction number into ecx
    17 00007199 488B442428          <1>     mov rax, qword [rsp + 5*8]  ;Pick the word pushed on the stack before call 
    18 0000719E D1E1                <1>     shl ecx, 1   ;multiply by 2
    19 000071A0 0FB71C0B            <1>     movzx ebx, word [rbx + rcx] ;Get the word at this address
    20 000071A4 59                  <1>     pop rcx ;Get the EA of the displacement table in rcx
    21 000071A5 4801CB              <1>     add rbx, rcx
    22 000071A8 48891D(77C40300)    <1>     mov qword [oldRBX], rbx
    23 000071AF 59                  <1>     pop rcx
    24 000071B0 5B                  <1>     pop rbx
    25 000071B1 FF15(77C40300)      <1>     call qword [oldRBX]
    26 000071B7 48891D(77C40300)    <1>     mov qword [oldRBX], rbx
    27 000071BE 9C                  <1>     pushfq  ;Move flags on the stack
    28 000071BF 5B                  <1>     pop rbx
    29 000071C0 48895C2410          <1>     mov qword [rsp + 8*2], rbx  ;Replace entry flags with our own flags
    30 000071C5 488B1D(77C40300)    <1>     mov rbx, qword [oldRBX]
    31 000071CC 48CF                <1>     iretq
    32                              <1> .exitBad:
    33 000071CE 804C241001          <1>     or byte [rsp + 8h*2], 1
    34 000071D3 48CF                <1>     iretq
    35                              <1> multiplexTest:
    36 000071D5 B0FF                <1>     mov al, -1
    37 000071D7 C3                  <1>     ret
    38                              <1> getDosDataSeg:  ;Int 4Fh, AX=1203h
    39                              <1> ;Return: r8 = Dos Data Segment Pointer
    40 000071D8 4C8D05(00C00300)    <1>     lea r8, dosDataArea
    41                              <1>     return
    13                              <2> %%_ret:
    14 000071DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    45                                  %include "./Source/Kernel/Net/share.asm"
     1                              <1> ;Kernel functions to be used by SHARE on SHARE'd files.
     2                              <1> 
     3                              <1> ;Generic Share Hooks and Wrappers
     4                              <1> shareBadFunction:
     5 000071E0 B801000000          <1>     mov eax, errInvFnc
     6 000071E5 668905(00C40300)    <1>     mov word [errorExCde], ax
     7 000071EC F9                  <1>     stc
     8                              <1>     return
    13                              <2> %%_ret:
    14 000071ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> badDfltShareHook:
    10                              <1> ;Return CF=CY
    11 000071EE E8EDFFFFFF          <1>     call shareBadFunction
    12                              <1>     return
    13                              <2> %%_ret:
    14 000071F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> goodDfltShareHook:
    14                              <1> ;Return CF=NC
    15 000071F4 F8                  <1>     clc
    16                              <1>     return
    13                              <2> %%_ret:
    14 000071F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                              <1> openShareCallWrapper:
    18 000071F6 FF15(BCC00300)      <1>     call qword [openShare]
    19                              <1>     return
    13                              <2> %%_ret:
    14 000071FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> closeShareCallWrapper:
    21 000071FD FF15(C4C00300)      <1>     call qword [closeShare]
    22                              <1>     return
    13                              <2> %%_ret:
    14 00007203 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> 
    24                              <1> retryShareIODelay:
    25                              <1> ;Checks to see if the region of the file we are IOing with is locked.
    26                              <1> ;Called only in readDiskFile and writeDiskFile
    27                              <1> ;Input: rdi -> SFT for current file
    28                              <1> ;       ecx = Length of region from current position in file
    29                              <1> ;Output: If CF=NC, not locked
    30                              <1> ;        If CF=CY if ANY portion of the region is locked and EAX=errLokVio
    31 00007204 0FB71D(25C00300)    <1>     movzx ebx, word [shareCount]
    32                              <1> .mainLoop:      
    33 0000720B 53                  <1>     push rbx
    34 0000720C FF15(F4C00300)      <1>     call qword [checkFileLockShare]
    35 00007212 5B                  <1>     pop rbx
    36                              <1>     retnc   ;Return if CF=NC (i.e. region not locked [anymore])
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007213 73EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    37 00007215 E806000000          <1>     call shareRetryCountdown
    38 0000721A FFCB                <1>     dec ebx
    39 0000721C 75ED                <1>     jnz .mainLoop
    40 0000721E F9                  <1>     stc
    41                              <1>     return
    13                              <2> %%_ret:
    14 0000721F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    43                              <1> shareRetryCountdown:
    44                              <1> ;Used in: OpenMain, retryShareIODelay, sharingLoop
    45                              <1> ;Does the retry wait IFF the request was not a server request.
    46 00007220 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1   ;Server call?
    47                              <1>     retnz   ;Exit by default if it is a server call
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007227 75F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    48 00007229 51                  <1>     push rcx
    49 0000722A 0FB70D(27C00300)    <1>     movzx ecx, word [shareDelay]    ;This many multiples of counts to 65536 
    50 00007231 67E30D              <1>     jecxz .exit
    51                              <1> .loopBody:
    52 00007234 51                  <1>     push rcx
    53 00007235 31C9                <1>     xor ecx, ecx
    54                              <1> .mainLoop:
    55 00007237 66FFC9              <1>     dec cx
    56 0000723A 75FB                <1>     jnz .mainLoop
    57 0000723C 59                  <1>     pop rcx
    58 0000723D FFC9                <1>     dec ecx
    59 0000723F 75F3                <1>     jnz .loopBody
    60                              <1> .exit:
    61 00007241 59                  <1>     pop rcx
    62                              <1>     return
    13                              <2> %%_ret:
    14 00007242 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> shareCheckOpenViolation:
    65                              <1> ;Input: rdi -> Locally complete SFT we are opening
    66 00007243 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
    67 00007249 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
    68 0000724B 50                  <1>     push rax
    69 0000724C 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
    70 00007250 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
    71 00007255 58                  <1>     pop rax
    72 00007256 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
    73                              <1> .fcbQuirk:
    74 00007258 E83B000000          <1>     call shareLockViolationCriticalError
    75                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000725D 73E3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    76                              <1> .notInCompatMode:
    77 0000725F B820000000          <1>     mov eax, errShrVio
    78 00007264 F9                  <1>     stc ;Set the flag for error
    79                              <1>     return
    13                              <2> %%_ret:
    14 00007265 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> 
    82                              <1> 
    83                              <1> shareFile:
    84                              <1> ;Once the SFT has been made, here we allocate resoureces within share to
    85                              <1> ; share the file, if it is possible to do so!
    86                              <1> ; This is done by calling the open wrapper
    87 00007266 51                  <1>     push rcx
    88                              <1> .reloadCounter:
    89 00007267 0FB70D(25C00300)    <1>     movzx ecx, word [shareCount] ;Try to allocate resources, this many times
    90                              <1> .keepLooping:
    91 0000726E 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
    92 00007275 31C0                <1>     xor eax, eax
    93 00007277 66C7474D0000        <1>     mov word [rdi + sft.wShareRec], 0   ;Init to no record
    94 0000727D 51                  <1>     push rcx
    95 0000727E E873FFFFFF          <1>     call openShareCallWrapper
    96 00007283 59                  <1>     pop rcx
    97 00007284 7310                <1>     jnc .exit   ;If all good, exit! (a record has now been made by SHARE.EXE)
    98 00007286 E895FFFFFF          <1>     call shareRetryCountdown
    99 0000728B FFC9                <1>     dec ecx
   100 0000728D 75DF                <1>     jnz .keepLooping
   101 0000728F E827000000          <1>     call shareCriticalError
   102 00007294 73D1                <1>     jnc .reloadCounter  ;If user selected retry, we retry
   103                              <1> .exit:
   104 00007296 59                  <1>     pop rcx
   105                              <1>     return
    13                              <2> %%_ret:
    14 00007297 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   106                              <1> 
   107                              <1> shareLockViolationCriticalError:
   108                              <1> ;This does NOT force rwFlag to 0.
   109 00007298 57                  <1>     push rdi
   110 00007299 C605(5CC40300)18    <1>     mov byte [Int44bitfld], critRetryOK | critFailOK
   111 000072A0 B821000000          <1>     mov eax, errLokVio
   112 000072A5 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   113                              <1>     ;Figure out what goes here once we figure out the full crit error invoke
   114 000072AC E8BDE9FFFF          <1>     call fullcriticalErrorInvoke
   115 000072B1 5F                  <1>     pop rdi
   116 000072B2 3D01000000          <1>     cmp eax, critRetry
   117                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000072B7 74DE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   118 000072B9 F9                  <1>     stc
   119                              <1>     return
    13                              <2> %%_ret:
    14 000072BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   120                              <1> 
   121                              <1> shareCriticalError: ;Int 4Fh AX=120Ah
   122                              <1> ;Used for share Read/Write requests
   123 000072BB 57                  <1>     push rdi
   124 000072BC C605(F0C60300)00    <1>     mov byte [rwFlag], 0    ;Default to read
   125 000072C3 C605(5CC40300)18    <1>     mov byte [Int44bitfld], critRetryOK | critFailOK
   126 000072CA 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   127 000072D1 BF01000000          <1>     mov edi, 1
   128                              <1>     ;Figure out what goes here once we figure out the full crit error invoke
   129 000072D6 E893E9FFFF          <1>     call fullcriticalErrorInvoke
   130 000072DB 5F                  <1>     pop rdi
   131 000072DC 3C01                <1>     cmp al, critRetry   ;If we returned retry, return plainly, else set CF
   132                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000072DE 74DA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   133 000072E0 F9                  <1>     stc
   134                              <1>     return
    13                              <2> %%_ret:
    14 000072E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> shareReadWriteViolationError:
   137                              <1> ;Called in Binary Disk Read/Write if getting access to shared resource fails
   138 000072E2 3C0F                <1>     cmp al, drvBadDskChnge
   139 000072E4 7510                <1>     jne .doReq
   140 000072E6 50                  <1>     push rax    ;IF a bad disk change, drop the volume descriptor ptr here
   141 000072E7 488B05(D7C40300)    <1>     mov rax, qword [primReqHdr + ioReqPkt.desptr]   ;Get volume descriptor ptr
   142 000072EE 488905(04C40300)    <1>     mov qword [xInt44RDI], rax
   143 000072F5 58                  <1>     pop rax
   144                              <1> .doReq:
   145 000072F6 E873E9FFFF          <1>     call fullcriticalErrorInvoke
   146                              <1>     return
    13                              <2> %%_ret:
    14 000072FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   147                              <1> 
   148                              <1> shareCheckWriteLockViolation:
   149 000072FC C605(F0C60300)01    <1>     mov byte [rwFlag], 1    ;Called in write, might not be set so set it
   150 00007303 EB07                <1>     jmp short shareCheckReadLockViolation.common
   151                              <1> shareCheckReadLockViolation:
   152 00007305 C605(F0C60300)00    <1>     mov byte [rwFlag], 0    ;Called in read, might not be set so set it
   153                              <1> .common:
   154                              <1> ;Input:
   155                              <1> ;rdi -> SFT for the file we are reading
   156 0000730C 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   157 00007312 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   158 00007314 50                  <1>     push rax
   159 00007315 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   160 00007319 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   161 0000731E 58                  <1>     pop rax
   162 0000731F 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   163                              <1> .fcbQuirk:
   164 00007321 E872FFFFFF          <1>     call shareLockViolationCriticalError
   165                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007326 73D3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   166                              <1> .notInCompatMode:
   167 00007328 31C9                <1>     xor ecx, ecx    ;Number of bytes xferred
   168 0000732A B821000000          <1>     mov eax, errLokVio
   169 0000732F F9                  <1>     stc ;Set the flag for error
   170                              <1>     return
    13                              <2> %%_ret:
    14 00007330 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    46                                  %include "./Source/Drivers/drvData.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;          Driver routines          :
     3                              <1> ;-----------------------------------:
     4                              <1> drivers:
     5                              <1> conHdr:
     6 00007331 [5373000000000000]  <1>     dq auxHdr
     7 00007339 1380                <1>     dw 08013h
     8 0000733B [D174000000000000]  <1>     dq commonStrat
     9 00007343 [E074000000000000]  <1>     dq conDriver
    10 0000734B 434F4E2020202020    <1>     db "CON     "
    11                              <1> auxHdr:
    12 00007353 [7573000000000000]  <1>     dq prnHdr
    13 0000735B 0080                <1>     dw 08000h
    14 0000735D [D174000000000000]  <1>     dq commonStrat
    15 00007365 [9577000000000000]  <1>     dq com1Intr
    16 0000736D 4155582020202020    <1>     db "AUX     "
    17                              <1> prnHdr:
    18 00007375 [9773000000000000]  <1>     dq clkHdr
    19 0000737D 40A0                <1>     dw 0A040h
    20 0000737F [D974000000000000]  <1>     dq nulStrat
    21 00007387 [DF74000000000000]  <1>     dq nulIntr
    22 0000738F 50524E2020202020    <1>     db "PRN     "
    23                              <1> clkHdr:
    24 00007397 [B973000000000000]  <1>     dq msdHdr
    25 0000739F 0880                <1>     dw 08008h
    26 000073A1 [D174000000000000]  <1>     dq commonStrat
    27 000073A9 [2D76000000000000]  <1>     dq clkDriver
    28 000073B1 434C4F434B242020    <1>     db "CLOCK$  "
    29                              <1> msdHdr:
    30 000073B9 [DB73000000000000]  <1>     dq com1Hdr
    31 000073C1 4008                <1>     dw 00840h   
    32 000073C3 [D174000000000000]  <1>     dq commonStrat
    33 000073CB [1979000000000000]  <1>     dq msdDriver
    34 000073D3 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    35                              <1> com1Hdr:
    36 000073DB [FD73000000000000]  <1>     dq com2Hdr
    37 000073E3 0080                <1>     dw 08000h
    38 000073E5 [D174000000000000]  <1>     dq commonStrat
    39 000073ED [9577000000000000]  <1>     dq com1Intr
    40 000073F5 434F4D3120202020    <1>     db "COM1    "
    41                              <1> com2Hdr:
    42 000073FD [1F74000000000000]  <1>     dq com3Hdr
    43 00007405 0080                <1>     dw 08000h
    44 00007407 [D174000000000000]  <1>     dq commonStrat
    45 0000740F [9E77000000000000]  <1>     dq com2Intr
    46 00007417 434F4D3220202020    <1>     db "COM2    "
    47                              <1> com3Hdr:
    48 0000741F [4174000000000000]  <1>     dq com4Hdr
    49 00007427 0080                <1>     dw 08000h
    50 00007429 [D174000000000000]  <1>     dq commonStrat
    51 00007431 [A777000000000000]  <1>     dq com3Intr
    52 00007439 434F4D3320202020    <1>     db "COM3    "
    53                              <1> com4Hdr:
    54 00007441 [6374000000000000]  <1>     dq lpt1Hdr
    55 00007449 0080                <1>     dw 08000h
    56 0000744B [D174000000000000]  <1>     dq commonStrat
    57 00007453 [B077000000000000]  <1>     dq com4Intr
    58 0000745B 434F4D3420202020    <1>     db "COM4    "
    59                              <1> lpt1Hdr:
    60 00007463 [8574000000000000]  <1>     dq lpt2Hdr
    61 0000746B 40A0                <1>     dw 0A040h
    62 0000746D [D974000000000000]  <1>     dq nulStrat
    63 00007475 [DF74000000000000]  <1>     dq nulIntr
    64 0000747D 4C50543120202020    <1>     db "LPT1    "
    65                              <1> lpt2Hdr:
    66 00007485 [A774000000000000]  <1>     dq lpt3Hdr
    67 0000748D 40A0                <1>     dw 0A040h
    68 0000748F [D974000000000000]  <1>     dq nulStrat
    69 00007497 [DF74000000000000]  <1>     dq nulIntr
    70 0000749F 4C50543220202020    <1>     db "LPT2    "
    71                              <1> lpt3Hdr:
    72 000074A7 FFFFFFFFFFFFFFFF    <1>     dq -1
    73 000074AF 40A0                <1>     dw 0A040h
    74 000074B1 [D974000000000000]  <1>     dq nulStrat
    75 000074B9 [DF74000000000000]  <1>     dq nulIntr
    76 000074C1 4C50543320202020    <1>     dq "LPT3    "
    77 000074C9 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    47                                  %include "./Source/Drivers/charDrv.asm"
     1                              <1> commonStrat:
     2                              <1> ;DOS calls this function with rbx=Ptr to request header
     3 000074D1 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
     4 000074D8 C3                  <1>     ret
     5                              <1> nulStrat:
     6 000074D9 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
     7                              <1> nulIntr:
     8 000074DF C3                  <1>     ret
     9                              <1> conDriver:
    10 000074E0 50                  <1>     push rax
    11 000074E1 53                  <1>     push rbx
    12 000074E2 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    13 000074E9 B003                <1>     mov al, 03h ;Unknown Command
    14 000074EB 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    15 000074EF 7739                <1>     ja .conWriteErrorCode ;If yes, error!
    16                              <1> 
    17 000074F1 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    18 000074F4 3C04                <1>     cmp al, 4
    19 000074F6 7441                <1>     jz .conRead
    20 000074F8 3C05                <1>     cmp al, 5
    21 000074FA 0F847F000000        <1>     jz .conNondestructiveRead
    22 00007500 3C06                <1>     cmp al, 6
    23 00007502 0F84A8000000        <1>     jz .conInputStatus
    24 00007508 3C07                <1>     cmp al, 7
    25 0000750A 0F84B0000000        <1>     jz .conFlushInputBuffers
    26 00007510 3C08                <1>     cmp al, 8
    27 00007512 0F84CA000000        <1>     jz .conWrite
    28 00007518 3C09                <1>     cmp al, 9
    29 0000751A 0F84C2000000        <1>     jz .conWrite
    30 00007520 3C0A                <1>     cmp al, 0Ah
    31 00007522 0F84E3000000        <1>     jz .conOutputStatus
    32 00007528 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    33                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    34 0000752A B480                <1>     mov ah, 80h ;Set error bit
    35 0000752C 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    36                              <1> .conExit:
    37 00007530 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    38 00007536 5B                  <1>     pop rbx
    39 00007537 58                  <1>     pop rax
    40 00007538 C3                  <1>     ret
    41                              <1> .conRead:    ;Function 4
    42 00007539 B005                <1>     mov al, 05h ;Bad request structure length?
    43 0000753B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    44 0000753E 75EA                <1>     jne .conWriteErrorCode
    45                              <1> 
    46 00007540 57                  <1>     push rdi
    47 00007541 51                  <1>     push rcx
    48 00007542 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    49 00007546 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    50                              <1> .cre1:
    51 00007548 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    52 0000754B 741C                <1>     je .cre2
    53 0000754D 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    54 00007554 751A                <1>     jnz .cre3   ;No, get the buffer value
    55 00007556 31C0                <1>     xor eax, eax
    56 00007558 CD36                <1>     int 36h
    57                              <1> .cre11:
    58 0000755A AA                  <1>     stosb
    59 0000755B 84C0                <1>     test al, al ;Was the ascii code stored 0?
    60 0000755D 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    61 0000755F 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    62                              <1> .cre12:
    63 00007565 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    64 00007567 EBDF                <1>     jmp short .cre1
    65                              <1> .cre2:
    66 00007569 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    67 0000756C 59                  <1>     pop rcx
    68 0000756D 5F                  <1>     pop rdi
    69 0000756E EBC0                <1>     jmp short .conExit
    70                              <1> .cre3:
    71 00007570 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    72 00007576 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    73 0000757D EBDB                <1>     jmp short .cre11
    74                              <1> 
    75                              <1> .conNondestructiveRead:  ;Function 5
    76 0000757F B005                <1>     mov al, 05h ;Bad request structure length?
    77 00007581 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
    78 00007584 75A4                <1>     jne .conWriteErrorCode
    79 00007586 803D8E00000000      <1>     cmp byte [.conBuf], 0
    80 0000758D 7519                <1>     jnz .cnr2
    81 0000758F B401                <1>     mov ah, 01h     ;Get key if exists
    82 00007591 CD36                <1>     int 36h
    83 00007593 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    84                              <1>     ;Keystroke available
    85                              <1> .cnr0:
    86 00007595 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
    87 00007598 E993FFFFFF          <1>     jmp .conExit
    88                              <1> .cnr1: ;No keystroke available
    89 0000759D 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
    90 000075A3 E988FFFFFF          <1>     jmp .conExit
    91                              <1> .cnr2:
    92 000075A8 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
    93 000075AE EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
    94                              <1> 
    95                              <1> .conInputStatus:         ;Function 6
    96 000075B0 B005                <1>     mov al, 05h ;Bad request structure length?
    97 000075B2 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
    98 000075B5 0F856FFFFFFF        <1>     jne .conWriteErrorCode
    99 000075BB E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   100                              <1> 
   101                              <1> .conFlushInputBuffers:   ;Function 7
   102 000075C0 B005                <1>     mov al, 05h ;Bad request structure length?
   103 000075C2 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   104 000075C5 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   105 000075CB C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   106                              <1> .cfib0:
   107 000075D2 B401                <1>     mov ah, 01      ;Get buffer status
   108 000075D4 CD36                <1>     int 36h
   109 000075D6 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   110 000075DC 30E4                <1>     xor ah, ah
   111 000075DE CD36                <1>     int 36h ;Read key to flush from buffer
   112 000075E0 EBF0                <1>     jmp short .cfib0
   113                              <1> 
   114                              <1> .conWrite:   ;Function 8 and 9
   115 000075E2 B005                <1>     mov al, 05h ;Bad request structure length?
   116 000075E4 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   117 000075E7 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   118                              <1> 
   119 000075ED 56                  <1>     push rsi
   120 000075EE 51                  <1>     push rcx
   121 000075EF 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   122 000075F3 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   123                              <1> .cw1: 
   124 000075F5 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   125 000075F8 7407                <1>     je .cw2
   126 000075FA AC                  <1>     lodsb   ;Get char into al, and inc rsi
   127 000075FB CD49                <1>     int 49h ;Fast print char
   128 000075FD FFC1                <1>     inc ecx
   129 000075FF EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   130                              <1> .cw2:
   131 00007601 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   132 00007604 59                  <1>     pop rcx
   133 00007605 5E                  <1>     pop rsi
   134 00007606 E925FFFFFF          <1>     jmp .conExit
   135                              <1> .conOutputStatus:   ;Function 0Ah
   136 0000760B B005                <1>     mov al, 05h ;Bad request structure length?
   137 0000760D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   138 00007610 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   139 00007616 E915FFFFFF          <1>     jmp .conExit
   140                              <1> 
   141 0000761B 00                  <1> .conBuf db 0    ;Single byte buffer
   142                              <1> fastOutput:         ;This CON driver supports Int 49h
   143                              <1> ;Called with char to transfer in al
   144 0000761C 50                  <1>     push rax
   145 0000761D B40E                <1>     mov ah, 0Eh
   146 0000761F CD30                <1>     int 30h
   147 00007621 58                  <1>     pop rax
   148 00007622 48CF                <1>     iretq
   149                              <1> ctrlBreak:
   150                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   151 00007624 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   152 0000762B 48CF                <1>     iretq
   153                              <1> 
   154                              <1> clkDriver:
   155 0000762D 50                  <1>     push rax
   156 0000762E 53                  <1>     push rbx
   157 0000762F 51                  <1>     push rcx
   158 00007630 52                  <1>     push rdx
   159 00007631 56                  <1>     push rsi
   160 00007632 55                  <1>     push rbp
   161 00007633 488B1D8FFEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   162 0000763A B003                <1>     mov al, 03h ;Unknown Command
   163 0000763C 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   164 00007640 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   165                              <1> 
   166 00007642 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   167 00007645 3C04                <1>     cmp al, 04h
   168 00007647 7437                <1>     jz .clkRead
   169 00007649 3C06                <1>     cmp al, 06h
   170 0000764B 0F8494000000        <1>     jz .clkInputStatus
   171 00007651 3C07                <1>     cmp al, 07h
   172 00007653 0F8498000000        <1>     jz .clkFlushInputBuffers
   173 00007659 3C08                <1>     cmp al, 08h
   174 0000765B 0F84A0000000        <1>     jz .clkWrite
   175 00007661 3C09                <1>     cmp al, 09h
   176 00007663 0F8498000000        <1>     jz .clkWrite
   177 00007669 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   178                              <1> .clkNotFunctioning:
   179 0000766B B002                <1>     mov al, 02h ;Device not ready error
   180                              <1> .clkWriteErrorCode:
   181 0000766D B480                <1>     mov ah, 80h ;Set error bit
   182 0000766F 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   183                              <1> .clkExit:
   184 00007673 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   185 00007679 5D                  <1>     pop rbp
   186 0000767A 5E                  <1>     pop rsi
   187 0000767B 5A                  <1>     pop rdx
   188 0000767C 59                  <1>     pop rcx
   189 0000767D 5B                  <1>     pop rbx
   190 0000767E 58                  <1>     pop rax
   191 0000767F C3                  <1>     ret
   192                              <1> 
   193                              <1> .clkRead:           ;Function 4
   194 00007680 B005                <1>     mov al, 05h ;Bad request structure length?
   195 00007682 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   196 00007685 75E6                <1>     jne .clkWriteErrorCode
   197                              <1> 
   198 00007687 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   199 0000768A 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   200 0000768E 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   201 00007695 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   202 00007699 30E4                <1>     xor ah, ah
   203 0000769B CD3A                <1>     int 3Ah         ;Read the system timer
   204 0000769D 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   205 0000769F 740D                <1>     jz .clkr1       ;Nope, now just time 
   206 000076A1 30E4                <1>     xor ah, ah
   207                              <1>     ;This works as al should keep count of the # of days passed since last read
   208 000076A3 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   209 000076A7 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   210                              <1> .clkr1:
   211 000076AE 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   212 000076B1 0FB7D2              <1>     movzx edx, dx
   213 000076B4 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   214 000076B6 89D0                <1>     mov eax, edx
   215 000076B8 31D2                <1>     xor edx, edx
   216 000076BA 89D8                <1>     mov eax, ebx
   217 000076BC B944040000          <1>     mov ecx, 1092   
   218 000076C1 F7F1                <1>     div ecx
   219 000076C3 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   220 000076C6 89D0                <1>     mov eax, edx    ;Get remainder in eax
   221 000076C8 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   222 000076CC 31D2                <1>     xor edx, edx
   223 000076CE B95B000000          <1>     mov ecx, 91 ;5*18.2
   224 000076D3 F7F1                <1>     div ecx
   225 000076D5 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   226 000076D8 89D0                <1>     mov eax, edx    ;Get remainder in eax
   227                              <1>     ;lea eax, dword [eax + 4*eax]
   228                              <1>     ;add eax, edx    ;Essentially multiply by 6
   229 000076DA 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   230 000076DD 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   231 000076E0 E98EFFFFFF          <1>     jmp .clkExit
   232                              <1> 
   233                              <1> .clkInputStatus:    ;Function 6
   234                              <1> ;Always return ready
   235 000076E5 B005                <1>     mov al, 05h ;Bad request structure length?
   236 000076E7 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   237 000076EA 7581                <1>     jne .clkWriteErrorCode
   238 000076EC E982FFFFFF          <1>     jmp .clkExit
   239                              <1> .clkFlushInputBuffers:  ;Function 7
   240                              <1> ;Always return done immediately
   241 000076F1 B005                <1>     mov al, 05h ;Bad request structure length?
   242 000076F3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   243 000076F6 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   244 000076FC E972FFFFFF          <1>     jmp .clkExit
   245                              <1> 
   246                              <1> .clkWrite:          ;Functions 8 and 9
   247 00007701 B005                <1>     mov al, 05h ;Bad request structure length?
   248 00007703 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   249 00007706 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   250                              <1> 
   251 0000770C 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   252 0000770F 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   253 00007713 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   254 00007717 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   255                              <1> 
   256 0000771E 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   257 00007720 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   258 00007724 B105                <1>     mov cl, 5
   259 00007726 F6F1                <1>     div cl          ;Divide al by 5
   260 00007728 30E4                <1>     xor ah, ah      ;Remove the remainder
   261 0000772A 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   262                              <1> ;Using the decimal part of this formula for the low count
   263                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   264 0000772C 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   265 0000772F B912000000          <1>     mov ecx, 18
   266 00007734 F7E1                <1>     mul ecx  
   267 00007736 01C3                <1>     add ebx, eax
   268                              <1> 
   269 00007738 31D2                <1>     xor edx, edx
   270 0000773A 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   271 0000773E B944040000          <1>     mov ecx, 1092
   272 00007743 F7E1                <1>     mul ecx
   273 00007745 01C3                <1>     add ebx, eax
   274 00007747 89DA                <1>     mov edx, ebx    ;edx now has low count
   275 00007749 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   276 0000774D B401                <1>     mov ah, 01h     ;Set the system time
   277 0000774F CD3A                <1>     int 3Ah
   278                              <1> 
   279 00007751 4889F3              <1>     mov rbx, rsi
   280 00007754 E91AFFFFFF          <1>     jmp .clkExit
   281                              <1> 
   282                              <1> .clkBCDtoHex:
   283                              <1> ;Converts a BCD value to a Hex byte
   284                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   285 00007759 51                  <1>     push rcx
   286 0000775A 0FB6C0              <1>     movzx eax, al   ;Zero extend
   287 0000775D 89C1                <1>     mov ecx, eax    ;Save al in ecx
   288 0000775F 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   289 00007764 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   290 0000776A C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   291                              <1> .cbth0:
   292 0000776D 050A000000          <1>     add eax, 10
   293 00007772 E2F9                <1>     loop .cbth0
   294 00007774 59                  <1>     pop rcx
   295 00007775 C3                  <1>     ret
   296                              <1> 
   297                              <1> .clkHexToBCD:
   298                              <1> ;Converts a Hex byte into two BCD digits
   299                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   300 00007776 51                  <1>     push rcx
   301 00007777 0FB6C0              <1>     movzx eax, al   ;Zero extend
   302 0000777A 31C9                <1>     xor ecx, ecx
   303                              <1> .chtb0:
   304 0000777C 3D0A000000          <1>     cmp eax, 10
   305 00007781 7209                <1>     jb .chtb1
   306 00007783 2D0A000000          <1>     sub eax, 10
   307 00007788 FFC1                <1>     inc ecx
   308 0000778A EBF0                <1>     jmp short .chtb0
   309                              <1> .chtb1:
   310 0000778C C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   311 0000778F 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   312 00007791 59                  <1>     pop rcx
   313 00007792 C3                  <1>     ret
   314 00007793 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   315                              <1> 
   316                              <1> ;COM Driver headers and main interrupt strat
   317                              <1> com1Intr:
   318 00007795 C6057C01000000      <1>     mov byte [comIntr.comDevice], 0
   319 0000779C EB19                <1>     jmp short comIntr
   320                              <1> com2Intr:
   321 0000779E C6057301000001      <1>     mov byte [comIntr.comDevice], 1
   322 000077A5 EB10                <1>     jmp short comIntr
   323                              <1> com3Intr:
   324 000077A7 C6056A01000002      <1>     mov byte [comIntr.comDevice], 2
   325 000077AE EB07                <1>     jmp short comIntr
   326                              <1> com4Intr:
   327 000077B0 C6056101000003      <1>     mov byte [comIntr.comDevice], 3
   328                              <1> comIntr:
   329 000077B7 50                  <1>     push rax
   330 000077B8 53                  <1>     push rbx
   331 000077B9 51                  <1>     push rcx
   332 000077BA 52                  <1>     push rdx
   333 000077BB 56                  <1>     push rsi
   334 000077BC 57                  <1>     push rdi
   335 000077BD 488B1D05FDFFFF      <1>     mov rbx, qword [reqHdrPtr]
   336 000077C4 B003                <1>     mov al, 03h ;Unknown Command
   337 000077C6 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   338 000077CA 7758                <1>     ja .comWriteErrorCode ;If yes, error!
   339                              <1> 
   340 000077CC 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   341 000077CF 3C04                <1>     cmp al, 4   ;Read Character(s)
   342 000077D1 7464                <1>     jz .comRead
   343 000077D3 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   344 000077D5 0F849D000000        <1>     jz .comNondestructiveRead   
   345 000077DB 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   346 000077DD 0F8486000000        <1>     jz .comReadInputStatus
   347 000077E3 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   348 000077E5 0F849C000000        <1>     jz .comFlushInputBuffers
   349 000077EB 3C08                <1>     cmp al, 8
   350 000077ED 0F84BA000000        <1>     jz .comWrite
   351 000077F3 3C09                <1>     cmp al, 9
   352 000077F5 0F84B2000000        <1>     jz .comWrite
   353 000077FB 3C0A                <1>     cmp al, 0Ah
   354 000077FD 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   355 00007803 EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   356                              <1> .comErrorNoCount:
   357 00007805 B002                <1>     mov al, 02h ;Unknown device
   358 00007807 EB1B                <1>     jmp short .comWriteErrorCode
   359                              <1> .comReadError:
   360 00007809 BA0B000000          <1>     mov edx, 0Bh
   361 0000780E EB05                <1>     jmp short .comError
   362                              <1> .comWriteError:
   363 00007810 BA0A000000          <1>     mov edx, 0Ah
   364                              <1> .comError:
   365 00007815 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   366 00007818 B902000000          <1>     mov ecx, 02h    ;Unknown device
   367 0000781D 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   368 0000781F 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   369 00007822 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   370                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   371 00007824 B480                <1>     mov ah, 80h ;Set error bit
   372 00007826 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   373                              <1> .comExit:
   374 0000782A 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   375 00007830 5F                  <1>     pop rdi
   376 00007831 5E                  <1>     pop rsi
   377 00007832 5A                  <1>     pop rdx
   378 00007833 59                  <1>     pop rcx
   379 00007834 5B                  <1>     pop rbx
   380 00007835 58                  <1>     pop rax
   381 00007836 C3                  <1>     ret
   382                              <1> 
   383                              <1> .comRead:
   384 00007837 B005                <1>     mov al, 05h ;Bad request structure length?
   385 00007839 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   386 0000783C 75E6                <1>     jne .comWriteErrorCode
   387 0000783E 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   388 00007842 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   389                              <1> .cr1:
   390 00007844 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   391 00007847 741B                <1>     je .cre2
   392                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   393 00007849 B800020000          <1>     mov eax, 0200h    ;Recieve 
   394 0000784E 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   395 00007855 F8                  <1>     clc
   396 00007856 CD34                <1>     int 34h ;Recieve Char
   397 00007858 72BB                <1>     jc .comError
   398 0000785A 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   399 0000785D 74EA                <1>     je .cr11
   400 0000785F AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   401 00007860 FFC1                <1>     inc ecx
   402 00007862 EBE0                <1>     jmp short .cr1
   403                              <1> .cre2:
   404 00007864 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   405 00007867 EBC1                <1>     jmp short .comExit
   406                              <1> 
   407                              <1> .comReadInputStatus:
   408 00007869 B005                <1>     mov al, 05h ;Bad request structure length?
   409 0000786B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   410 0000786E 75B4                <1>     jne .comWriteErrorCode
   411 00007870 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   412 00007876 EBB2                <1>     jmp short .comExit
   413                              <1> 
   414                              <1> .comNondestructiveRead:
   415                              <1> ;The buffer is always empty for now (no keystroke available)
   416 00007878 B005                <1>     mov al, 05h ;Bad request structure length?
   417 0000787A 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   418 0000787D 75A5                <1>     jne .comWriteErrorCode
   419 0000787F 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   420 00007885 EBA3                <1>     jmp short .comExit
   421                              <1> 
   422                              <1> .comFlushInputBuffers:
   423 00007887 B005                <1>     mov al, 05h ;Bad request structure length?
   424 00007889 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   425 0000788C 7596                <1>     jne .comWriteErrorCode
   426                              <1> .cfib0:
   427 0000788E 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   428 00007895 B800020000          <1>     mov eax, 0200h    ;Recieve
   429 0000789A F8                  <1>     clc
   430 0000789B CD34                <1>     int 34h
   431 0000789D 0F8262FFFFFF        <1>     jc .comErrorNoCount
   432 000078A3 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   433 000078A6 75E6                <1>     jne .cfib0
   434 000078A8 E97DFFFFFF          <1>     jmp .comExit
   435                              <1> 
   436                              <1> .comWrite:
   437 000078AD B005                <1>     mov al, 05h ;Bad request structure length?
   438 000078AF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   439 000078B2 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   440                              <1> 
   441 000078B8 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   442 000078BC 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   443                              <1> .cw1: 
   444 000078BE 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   445 000078C1 7417                <1>     je .cw2
   446 000078C3 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   447 000078C4 B401                <1>     mov ah, 01h ;Move function number into ah
   448 000078C6 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   449 000078CD F8                  <1>     clc
   450 000078CE CD34                <1>     int 34h ;Transmit char
   451 000078D0 0F823FFFFFFF        <1>     jc .comError
   452 000078D6 FFC1                <1>     inc ecx
   453 000078D8 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   454                              <1> .cw2:
   455 000078DA 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   456 000078DD E948FFFFFF          <1>     jmp .comExit
   457                              <1> 
   458                              <1> .comOutputStatus:
   459                              <1> ;Read MODEM status
   460 000078E2 B005                <1>     mov al, 05h ;Bad request structure length?
   461 000078E4 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   462 000078E7 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   463                              <1> 
   464 000078ED 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   465 000078F4 B403                <1>     mov ah, 03h     ;Get status
   466 000078F6 F8                  <1>     clc
   467 000078F7 CD34                <1>     int 34h
   468 000078F9 0F8206FFFFFF        <1>     jc .comErrorNoCount
   469 000078FF 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   470 00007904 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   471 00007907 F7D0                <1>     not eax      ;Bitwise inversion
   472 00007909 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   473 0000790E 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   474 00007913 E912FFFFFF          <1>     jmp .comExit
   475 00007918 00                  <1> .comDevice   db 0
    48                                  %include "./Source/Drivers/diskDrv.asm"
     1                              <1> msdDriver:
     2 00007919 50                  <1>     push rax
     3 0000791A 53                  <1>     push rbx
     4 0000791B 51                  <1>     push rcx
     5 0000791C 52                  <1>     push rdx
     6 0000791D 56                  <1>     push rsi
     7 0000791E 57                  <1>     push rdi
     8 0000791F 55                  <1>     push rbp
     9 00007920 4150                <1>     push r8
    10 00007922 488B1DA0FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    11 00007929 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    12 0000792D B003                <1>     mov al, drvBadCmd
    13 0000792F 0F87C5000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    14 00007935 B001                <1>     mov al, drvBadUnit 
    15 00007937 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    16 0000793B 0F87B9000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    17 00007941 488D3573040000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    18 00007948 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    19 0000794C C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    20 0000794F 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    21 00007953 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    22 00007957 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    23 00007959 488D0DA1000000      <1>     lea rcx, .msdTable
    24 00007960 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    25 00007964 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    26 00007966 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    27 00007968 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    28 0000796B FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    29                              <1> .msdDriverExit:
    30 0000796D 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    31 00007973 4158                <1>     pop r8
    32 00007975 5D                  <1>     pop rbp
    33 00007976 5F                  <1>     pop rdi
    34 00007977 5E                  <1>     pop rsi
    35 00007978 5A                  <1>     pop rdx
    36 00007979 59                  <1>     pop rcx
    37 0000797A 5B                  <1>     pop rbx
    38 0000797B 58                  <1>     pop rax
    39 0000797C C3                  <1>     ret
    40                              <1> 
    41                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    42 0000797D 4889FB              <1>     mov rbx, rdi
    43 00007980 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    44 00007983 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    45 00007985 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    46                              <1> ;Now fall through to general error
    47                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    48 00007988 488B1D3AFBFFFF      <1>     mov rbx, qword [reqHdrPtr]
    49 0000798F B401                <1>     mov ah, 01h
    50 00007991 CD33                <1>     int 33h ;Read status of last operation
    51 00007993 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    52 00007996 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    53 00007998 7460                <1>     je .msdWriteErrorCode 
    54 0000799A B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    55 0000799C 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    56 0000799F 7459                <1>     je .msdWriteErrorCode 
    57 000079A1 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    58 000079A4 7454                <1>     je .msdWriteErrorCode
    59                              <1> ;Device Not Ready
    60 000079A6 B002                <1>     mov al, 02h  ;Device not ready code
    61 000079A8 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    62 000079AB 744D                <1>     je .msdWriteErrorCode
    63 000079AD 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    64 000079B1 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    65                              <1> ;Write Protected
    66 000079B5 30C0                <1>     xor al, al
    67 000079B7 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
    68 000079BC 743C                <1>     je .msdWriteErrorCode
    69                              <1> ;CRC Error
    70 000079BE B004                <1>     mov al, 04h     ;CRC error code
    71 000079C0 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
    72 000079C5 7433                <1>     je .msdWriteErrorCode
    73 000079C7 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
    74 000079CC 742C                <1>     je .msdWriteErrorCode
    75 000079CE 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
    76 000079D3 7425                <1>     je .msdWriteErrorCode
    77                              <1> ;Seek Error
    78 000079D5 B006                <1>     mov al, 06h     ;Seek error code
    79 000079D7 80F902              <1>     cmp cl, 02h     ;No Seek Complete
    80 000079DA 741E                <1>     je .msdWriteErrorCode
    81                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
    82                              <1> ;This error should only be called if BPB not recognised for Flash Drives
    83 000079DC B007                <1>     mov al, 07h
    84 000079DE 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
    85 000079E1 7417                <1>     je .msdWriteErrorCode
    86                              <1> ;Sector Not Found
    87 000079E3 B008                <1>     mov al, 08h     ;Sector not found code
    88 000079E5 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
    89 000079E8 7410                <1>     je .msdWriteErrorCode
    90                              <1> ;Write faults
    91 000079EA B00A                <1>     mov al, 0Ah     ;Write fault
    92 000079EC 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
    93 000079EF 7409                <1>     je .msdWriteErrorCode
    94                              <1> ;Read faults
    95 000079F1 B00B                <1>     mov al, 0Bh     ;Read fault
    96 000079F3 80F911              <1>     cmp cl, 11h     ;Read error
    97 000079F6 7402                <1>     je .msdWriteErrorCode
    98                              <1> ;General Errors
    99 000079F8 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   100                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   101 000079FA B480                <1>     mov ah, 80h ;Set error bit
   102 000079FC 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   103 00007A00 C3                  <1>     ret ;Return to set done bit
   104                              <1> .msdTable:
   105 00007A01 0000                <1>     dw 0                            ;Function 0
   106 00007A03 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   107 00007A05 9800                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   108 00007A07 F800                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   109 00007A09 0401                <1>     dw .msdRead - .msdTable         ;Function 4
   110 00007A0B 0000                <1>     dw 0                            ;Function 5
   111 00007A0D 0000                <1>     dw 0                            ;Function 6
   112 00007A0F 0000                <1>     dw 0                            ;Function 7
   113 00007A11 3D01                <1>     dw .msdWrite - .msdTable        ;Function 8
   114 00007A13 7601                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   115 00007A15 0000                <1>     dw 0                            ;Function 10
   116 00007A17 0000                <1>     dw 0                            ;Function 11
   117 00007A19 BC01                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   118 00007A1B C801                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   119 00007A1D E301                <1>     dw .msdDevClose - .msdTable     ;Function 14
   120 00007A1F FE01                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   121 00007A21 0000                <1>     dw 0                            ;Function 16
   122 00007A23 0000                <1>     dw 0                            ;Function 17
   123 00007A25 0000                <1>     dw 0                            ;Function 18
   124 00007A27 2602                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   125 00007A29 0000                <1>     dw 0                            ;Function 20
   126 00007A2B 0000                <1>     dw 0                            ;Function 21
   127 00007A2D 0000                <1>     dw 0                            ;Function 22
   128 00007A2F CD02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   129 00007A31 E202                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   130                              <1> 
   131                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   132                              <1> .msdMedChk:          ;Function 1
   133 00007A33 B005                <1>     mov al, 05h ;Bad request structure length
   134 00007A35 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   135 00007A38 75C0                <1>     jne .msdWriteErrorCode
   136                              <1> 
   137 00007A3A E8DC020000          <1>     call .msdCheckDeviceType    ;Check and ensure that media type is "swapped"
   138 00007A3F 753E                <1>     jnz .mmcChange  ;Always change if swapping between same phys volume!
   139 00007A41 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   140 00007A46 488D0D64030000      <1>     lea rcx, .msdBIOSmap
   141 00007A4D 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   142 00007A50 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   143 00007A53 753F                <1>     jnz .mmcNoChange
   144                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   145 00007A55 B416                <1>     mov ah, 16h 
   146 00007A57 CD33                <1>     int 33h
   147 00007A59 0F8229FFFFFF        <1>     jc .msdGenDiskError
   148 00007A5F 80FC80              <1>     cmp ah, 80h
   149 00007A62 740E                <1>     je .mmcNoChangeLine
   150 00007A64 80FC86              <1>     cmp ah, 86h
   151 00007A67 7409                <1>     je .mmcNoChangeLine
   152 00007A69 84E4                <1>     test ah, ah ;No change?
   153 00007A6B 7427                <1>     jz .mmcNoChange
   154 00007A6D F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   155 00007A70 750D                <1>     jnz .mmcChange
   156                              <1> ;If nothing, fall through and test manually, should never happen though
   157                              <1> .mmcNoChangeLine:
   158                              <1> ;Now we test Media Descriptor
   159 00007A72 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   160 00007A77 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   161 00007A7A 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   162 00007A7D 7410                <1>     je .mmcUnsure
   163                              <1> .mmcChange:
   164 00007A7F C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   165 00007A83 488D051D030000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   166 00007A8A 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   167                              <1>     ;Check here if there were any open handles on the device when it was changed
   168 00007A8E C3                  <1>     ret
   169                              <1> .mmcUnsure:
   170 00007A8F C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   171 00007A93 C3                  <1>     ret
   172                              <1> .mmcNoChange:
   173 00007A94 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   174 00007A98 C3                  <1>     ret
   175                              <1> 
   176                              <1> 
   177                              <1> .msdBuildBPB:        ;Function 2
   178 00007A99 B005                <1>     mov al, 05h ;Bad request structure length
   179 00007A9B 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   180 00007A9E 0F8556FFFFFF        <1>     jne .msdWriteErrorCode
   181                              <1> 
   182 00007AA4 4889DE              <1>     mov rsi, rbx
   183 00007AA7 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   184 00007AAC 488D0DFE020000      <1>     lea rcx, .msdBIOSmap
   185 00007AB3 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   186 00007AB6 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   187 00007ABA 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   188 00007ABC 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   189 00007ABF B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   190 00007AC4 CD33                <1>     int 33h
   191 00007AC6 0F82BCFEFFFF        <1>     jc .msdGenDiskError
   192                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   193 00007ACC 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   194 00007AD0 7418                <1>     je .mbbpb0
   195 00007AD2 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   196 00007AD6 7412                <1>     je .mbbpb0
   197 00007AD8 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   198 00007ADC 740C                <1>     je .mbbpb0
   199 00007ADE 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   200 00007AE2 B007                <1>     mov al, 07h ;Unknown media error code
   201 00007AE4 0F8210FFFFFF        <1>     jb .msdWriteErrorCode
   202                              <1> .mbbpb0:
   203 00007AEA 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   204 00007AED 4889EF              <1>     mov rdi, rbp     ;Get pointer to buffer to overwrite
   205 00007AF0 B90F000000          <1>     mov ecx, bpbEx_size/8
   206 00007AF5 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   207 00007AF8 C3                  <1>     ret
   208                              <1> .msdIOCTLRead:       ;Function 3, returns done
   209 00007AF9 B005                <1>     mov al, drvBadDrvReq
   210 00007AFB 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   211 00007AFE 0F85F6FEFFFF        <1>     jne .msdWriteErrorCode
   212 00007B04 C3                  <1>     ret
   213                              <1> .msdRead:            ;Function 4
   214                              <1> ;Will read one sector at a time.
   215 00007B05 B005                <1>     mov al, 05h ;Bad request structure length
   216 00007B07 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   217 00007B0A 0F85EAFEFFFF        <1>     jne .msdWriteErrorCode
   218                              <1> 
   219 00007B10 E806020000          <1>     call .msdCheckDeviceType
   220                              <1> 
   221 00007B15 4889DF              <1>     mov rdi, rbx
   222 00007B18 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   223                              <1> .msdr0:
   224 00007B1A B682                <1>     mov dh, 82h ;LBA Read Sectors
   225 00007B1C E8D7010000          <1>     call .msdBlkIOCommon
   226 00007B21 0F8256FEFFFF        <1>     jc .msdIOError
   227 00007B27 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   228 00007B2B 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   229 00007B2F 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   230 00007B33 FFC6                <1>     inc esi
   231 00007B35 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   232 00007B38 75E0                <1>     jne .msdr0
   233 00007B3A 4889FB              <1>     mov rbx, rdi
   234 00007B3D C3                  <1>     ret
   235                              <1> .msdWrite:           ;Function 8
   236                              <1> ;Will write one sector at a time.
   237 00007B3E B005                <1>     mov al, 05h ;Bad request structure length
   238 00007B40 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   239 00007B43 0F85B1FEFFFF        <1>     jne .msdWriteErrorCode
   240                              <1> 
   241 00007B49 E8CD010000          <1>     call .msdCheckDeviceType
   242                              <1> 
   243 00007B4E 4889DF              <1>     mov rdi, rbx
   244 00007B51 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   245                              <1> .msdw0:
   246 00007B53 B683                <1>     mov dh, 83h ;LBA Write Sectors
   247 00007B55 E89E010000          <1>     call .msdBlkIOCommon
   248 00007B5A 0F821DFEFFFF        <1>     jc .msdIOError
   249 00007B60 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   250 00007B64 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   251 00007B68 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   252 00007B6C FFC6                <1>     inc esi
   253 00007B6E 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   254 00007B71 75E0                <1>     jne .msdw0
   255 00007B73 4889FB              <1>     mov rbx, rdi
   256 00007B76 C3                  <1>     ret
   257                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   258                              <1> ;Will write one sector at a time and then verify it.
   259 00007B77 B005                <1>     mov al, 05h ;Bad request structure length
   260 00007B79 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   261 00007B7C 0F8578FEFFFF        <1>     jne .msdWriteErrorCode
   262                              <1> 
   263 00007B82 E894010000          <1>     call .msdCheckDeviceType
   264                              <1> 
   265 00007B87 4889DF              <1>     mov rdi, rbx
   266 00007B8A 31F6                <1>     xor esi, esi  ;Set counter to zero
   267                              <1> .msdwv0:
   268 00007B8C B683                <1>     mov dh, 83h ;LBA Write Sectors
   269 00007B8E E865010000          <1>     call .msdBlkIOCommon
   270 00007B93 0F82E4FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   271 00007B99 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   272 00007B9B E858010000          <1>     call .msdBlkIOCommon
   273 00007BA0 0F82D7FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   274 00007BA6 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   275 00007BAA 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   276 00007BAE 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   277 00007BB2 FFC6                <1>     inc esi
   278 00007BB4 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   279 00007BB7 75D3                <1>     jne .msdwv0
   280 00007BB9 4889FB              <1>     mov rbx, rdi
   281 00007BBC C3                  <1>     ret
   282                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   283 00007BBD B005                <1>     mov al, drvBadDrvReq
   284 00007BBF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   285 00007BC2 0F8532FEFFFF        <1>     jne .msdWriteErrorCode
   286                              <1> 
   287 00007BC8 C3                  <1>     ret
   288                              <1> .msdDevOpen:         ;Function 13
   289 00007BC9 B005                <1>     mov al, drvBadDrvReq
   290 00007BCB 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   291 00007BCE 0F8526FEFFFF        <1>     jne .msdWriteErrorCode
   292                              <1> 
   293 00007BD4 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   294 00007BD9 488D0DD6010000      <1>     lea rcx, .msdHdlCnt
   295 00007BE0 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   296 00007BE3 C3                  <1>     ret
   297                              <1> .msdDevClose:        ;Function 14
   298 00007BE4 B005                <1>     mov al, drvBadDrvReq
   299 00007BE6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   300 00007BE9 0F850BFEFFFF        <1>     jne .msdWriteErrorCode
   301                              <1> 
   302 00007BEF 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   303 00007BF4 488D0DBB010000      <1>     lea rcx, .msdHdlCnt
   304 00007BFB FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   305 00007BFE C3                  <1>     ret
   306                              <1> .msdRemovableMedia:  ;Function 15
   307 00007BFF B005                <1>     mov al, drvBadDrvReq
   308 00007C01 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   309 00007C04 0F85F0FDFFFF        <1>     jne .msdWriteErrorCode
   310                              <1>     
   311 00007C0A 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   312 00007C0F 488D0D9B010000      <1>     lea rcx, .msdBIOSmap
   313 00007C16 0FB60401            <1>     movzx eax, byte [rcx + rax]    ;Get BIOS number
   314 00007C1A 2580000000          <1>     and eax, 80h ;Isolate bit 7 (the fixed drive bit)
   315 00007C1F C1E002              <1>     shl eax, 2  ;Shift the removable bit (bit 7) to the busy bit (bit 9)
   316 00007C22 66894303            <1>     mov word [rbx + remMediaReqPkt.status], ax  ;Busy set if fixed!
   317 00007C26 C3                  <1>     ret
   318                              <1> .msdGenericIOCTL:    ;Function 19
   319 00007C27 B005                <1>     mov al, drvBadDrvReq
   320 00007C29 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   321 00007C2C 0F85C8FDFFFF        <1>     jne .msdWriteErrorCode
   322                              <1> ;Need to spend some time to implement proper IOCTL with LBA instead of CHS.
   323                              <1> ;Implement two undoc functions 80h|42h (format) and 80h|60h (get LBA params)
   324 00007C32 B003                <1>     mov al, drvBadCmd
   325 00007C34 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]
   326 00007C38 80FD08              <1>     cmp ch, 08h    ;Disk Drive Major Code?
   327 00007C3B 0F85B9FDFFFF        <1>     jne .msdWriteErrorCode  ;If not, exit bad
   328 00007C41 F6C180              <1>     test cl, 80h    ;Extended function bit set?
   329 00007C44 0F84B0FDFFFF        <1>     jz .msdWriteErrorCode
   330 00007C4A 80E17F              <1>     and cl, 7Fh     ;Clear the upper bit
   331 00007C4D 80F941              <1>     cmp cl, 41h     
   332 00007C50 743F                <1>     je .msdGIOCTLWrite
   333 00007C52 80F942              <1>     cmp cl, 42h
   334 00007C55 7451                <1>     je .msdGIOCTLFormat
   335 00007C57 80F960              <1>     cmp cl, 60h
   336 00007C5A 0F859AFDFFFF        <1>     jne .msdWriteErrorCode  ;Error if not this function with bad command
   337                              <1>     ;Get params here
   338 00007C60 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   339 00007C64 488D1546010000      <1>     lea rdx, .msdBIOSmap
   340 00007C6B 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   341 00007C6E B488                <1>     mov ah, 88h ;Read LBA Device Parameters
   342 00007C70 53                  <1>     push rbx
   343 00007C71 CD33                <1>     int 33h
   344                              <1>     ;Returns:
   345                              <1>     ;rbx = Sector size in bytes
   346                              <1>     ;rcx = Last LBA block
   347 00007C73 4889D8              <1>     mov rax, rbx    ;Move sector size into rax
   348 00007C76 5B                  <1>     pop rbx ;Get back the ioctlReqPktPtr
   349 00007C77 0F820BFDFFFF        <1>     jc .msdGenDiskError
   350                              <1> ;Get LBA Table:
   351                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   352                              <1> ;Offset 1:  Reserved, 7 bytes
   353                              <1> ;Offset 8:  Sector size in bytes (DWORD)
   354                              <1> ;Offset 16: Number Of Sectors on Medium + 1 (QWORD)
   355 00007C7D 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   356 00007C81 48C70218000000      <1>     mov qword [rdx + genioctlGetParamsTable.size], 24
   357 00007C88 48894208            <1>     mov qword [rdx + genioctlGetParamsTable.sectorSize], rax
   358 00007C8C 48894A10            <1>     mov qword [rdx + genioctlGetParamsTable.numSectors], rcx
   359                              <1>     return
    13                              <2> %%_ret:
    14 00007C90 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> 
   361                              <1> .msdGIOCTLWrite:
   362                              <1> ;Write Table:
   363                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   364                              <1> ;Offset 1:  Number of sectors to write (BYTE)
   365                              <1> ;Offset 2:  Reserved, 6 bytes
   366                              <1> ;Offset 8:  Sector to start format at (QWORD)
   367                              <1> ;Offset 16: Pointer to transfer buffer (QWORD)
   368 00007C91 E81B000000          <1>     call .msdGIOCTLFormatWriteSetup
   369 00007C96 488B5F10            <1>     mov rbx, qword [rdi + genioctlLBAwrite.xferBuffer]
   370 00007C9A B483                <1>     mov ah, 83h
   371                              <1> .msdGIOCTLwfCommon:
   372 00007C9C CD33                <1>     int 33h
   373 00007C9E 0F82E4FCFFFF        <1>     jc .msdGenDiskError
   374 00007CA4 4889F3              <1>     mov rbx, rsi    ;Geturns rbx to point to the request pointer
   375                              <1>     return 
    13                              <2> %%_ret:
    14 00007CA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   376                              <1> 
   377                              <1> .msdGIOCTLFormat:
   378                              <1> ;Format Table:
   379                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   380                              <1> ;Offset 1:  Number of sectors to format (BYTE)
   381                              <1> ;Offset 2:  Reserved, 6 bytes
   382                              <1> ;Offset 8:  Sector to start format at (QWORD)
   383 00007CA8 E804000000          <1>     call .msdGIOCTLFormatWriteSetup
   384 00007CAD B485                <1>     mov ah, 85h
   385 00007CAF EBEB                <1>     jmp short .msdGIOCTLwfCommon
   386                              <1> 
   387                              <1> .msdGIOCTLFormatWriteSetup:
   388                              <1> ;Sets the following:
   389                              <1> ;al = Number of sectors to write/format
   390                              <1> ;rcx = Sector to begin transfer at
   391                              <1> ;dl = BIOS Drive to do transfer on
   392                              <1> ;rsi = Driver Packet (usually set to rbx)
   393                              <1> ;rdi = Write/Format packet
   394 00007CB1 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   395 00007CB5 488D15F5000000      <1>     lea rdx, .msdBIOSmap
   396 00007CBC 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   397 00007CBF 4889DE              <1>     mov rsi, rbx
   398 00007CC2 488B7E1F            <1>     mov rdi, qword [rsi + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   399 00007CC6 8A4701              <1>     mov al, byte [rdi + genioctlLBAformat.numSectors]
   400 00007CC9 488B4F08            <1>     mov rcx, qword [rdi + genioctlLBAformat.startSector]
   401                              <1>     return
    13                              <2> %%_ret:
    14 00007CCD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   402                              <1> 
   403                              <1> .msdGetLogicalDev:   ;Function 23
   404 00007CCE B005                <1>     mov al, drvBadDrvReq
   405 00007CD0 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   406 00007CD3 0F8521FDFFFF        <1>     jne .msdWriteErrorCode
   407                              <1> 
   408 00007CD9 8A05D1000000        <1>     mov al, byte [.msdCurDev]
   409 00007CDF 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   410 00007CE2 C3                  <1>     ret
   411                              <1> .msdSetLogicalDev:   ;Function 24
   412 00007CE3 B005                <1>     mov al, drvBadDrvReq
   413 00007CE5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   414 00007CE8 0F850CFDFFFF        <1>     jne .msdWriteErrorCode
   415                              <1> .msdInternalSetUnitNumber:  ;Called to set the unit number from reqpkt
   416 00007CEE 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   417 00007CF1 8805B9000000        <1>     mov byte [.msdCurDev], al
   418 00007CF7 C3                  <1>     ret
   419                              <1> 
   420                              <1> .msdBlkIOCommon:  ;Does block IO
   421                              <1> ;Called with rdi containing old rbx value and ah with function number
   422                              <1> ;rbp points to bpb
   423                              <1> ;Error handled by caller
   424                              <1> ;Sector count handled by caller
   425                              <1> ;Called with dh = BIOS function number
   426 00007CF8 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   427 00007CFD 488D0DAD000000      <1>     lea rcx, .msdBIOSmap
   428 00007D04 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req in dl
   429 00007D07 31C9                <1>     xor ecx, ecx
   430 00007D09 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   431 00007D0C 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   432 00007D10 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   433 00007D14 88F4                <1>     mov ah, dh
   434 00007D16 B001                <1>     mov al, 01h ;Do one sector at a time 
   435 00007D18 CD33                <1>     int 33h
   436                              <1>     return
    13                              <2> %%_ret:
    14 00007D1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   437                              <1> 
   438                              <1> .msdCheckDeviceType:
   439                              <1> ;If the device numbers dont match but the bpb numbers do, print the message
   440                              <1> ;!!!WARNING!!! THIS USES THE CONSOLE BIOS!!! VIOLATES HARDWARE ABSTRACTION!!!!
   441                              <1> ;Returns ZF=NZ if media number changed!
   442 00007D1B 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]    ;Get the now unit number
   443 00007D1F 3A058B000000        <1>     cmp al, byte [.msdCurDev]    ;Compare against the last transacted device
   444                              <1>     rete    ;Exit if equal (ZF=ZE)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007D25 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   445                              <1> ;If not equal, check they use different BPB's before continuing
   446 00007D27 50                  <1>     push rax
   447 00007D28 0FB60581000000      <1>     movzx eax, byte [.msdCurDev]  ;Compare current BPB ptr to previous
   448 00007D2F 488D3585000000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
   449 00007D36 C1E003              <1>     shl eax, 3
   450 00007D39 488B1406            <1>     mov rdx, qword [rsi + rax]  ;Get the bpbptr of this device too
   451 00007D3D 58                  <1>     pop rax
   452 00007D3E 4839D5              <1>     cmp rbp, rdx    ;Is the bpb of the transacting device the same as before?
   453 00007D41 751F                <1>     jne .msdCDTexit ;Exit by setting the new unit number
   454                              <1>     ;Here, device numbers are neq but bpb's are eq. Thus print message
   455 00007D43 0441                <1>     add al, "A" ;Convert to a letter
   456 00007D45 880538000000        <1>     mov byte [.msdStrikeLetter], al
   457 00007D4B 488D351E000000      <1>     lea rsi, .msdStrike
   458 00007D52 B937000000          <1>     mov ecx, .msdStrikeL
   459                              <1> .msdCDTprintMessage:
   460 00007D57 AC                  <1>     lodsb   ;Get the char in al, inc rsi
   461 00007D58 CD49                <1>     int 49h ;Print char in al
   462 00007D5A FFC9                <1>     dec ecx
   463 00007D5C 75F9                <1>     jnz .msdCDTprintMessage
   464 00007D5E 31C0                <1>     xor eax, eax
   465 00007D60 CD36                <1>     int 36h ;Blocking wait at the keyboard for a keystroke
   466                              <1> .msdCDTexit:
   467 00007D62 E801000000          <1>     call .msdCDTexitOk  ;Set unit number and clear ZF
   468 00007D67 C3                  <1>     ret
   469                              <1> .msdCDTexitOk:
   470 00007D68 E881FFFFFF          <1>     call .msdInternalSetUnitNumber  ;Set unit number internally
   471 00007D6D 31C0                <1>     xor eax, eax
   472 00007D6F C3                  <1>     ret
   473                              <1> 
   474 00007D70 0D0A496E7365727420- <1> .msdStrike db 0Dh,0Ah,"Insert for drive "
   474 00007D79 666F72206472697665- <1>
   474 00007D82 20                  <1>
   475 00007D83 413A20616E64207374- <1> .msdStrikeLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
   475 00007D8C 72696B650D0A616E79- <1>
   475 00007D95 206B6579207768656E- <1>
   475 00007D9E 2072656164790D0A0A  <1>
   476                              <1> .msdStrikeL equ $ - .msdStrike
   477                              <1> 
   478 00007DA7 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   479                              <1> ;LASTDRIVE default is 5
   480                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   481                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   482 00007DB0 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   483                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   484 00007DB1 0001FFFFFF          <1> .msdBIOSmap  db 0, 1, -1, -1, -1 ;Translates DOS drive number to BIOS number
   485 00007DB6 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   486 00007DBB 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   486 00007DC4 000000000000000000- <1>
   486 00007DCD 000000000000000000- <1>
   486 00007DD6 000000000000000000- <1>
   486 00007DDF 00000000            <1>
   487 00007DE3 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   487 00007DEC 000000000000000000- <1>
   487 00007DF5 000000000000000000- <1>
   487 00007DFE 000000000000000000- <1>
   487 00007E07 000000000000000000- <1>
   487 00007E10 000000000000000000- <1>
   487 00007E19 000000000000000000- <1>
   487 00007E22 000000000000000000- <1>
   487 00007E2B 000000000000000000- <1>
   487 00007E34 000000000000000000- <1>
   487 00007E3D 000000000000000000- <1>
   487 00007E46 000000000000000000- <1>
   487 00007E4F 000000000000000000- <1>
   487 00007E58 000000000000000000- <1>
   487 00007E61 000000000000000000- <1>
   487 00007E6A 000000000000000000- <1>
   487 00007E73 000000000000000000- <1>
   487 00007E7C 000000000000000000- <1>
   487 00007E85 000000000000000000- <1>
   487 00007E8E 000000000000000000- <1>
   487 00007E97 000000000000000000- <1>
   487 00007EA0 000000000000000000- <1>
   487 00007EA9 000000000000000000- <1>
   487 00007EB2 000000000000000000- <1>
   487 00007EBB 000000000000000000- <1>
   487 00007EC4 000000000000000000- <1>
   487 00007ECD 000000000000000000- <1>
   487 00007ED6 000000000000000000- <1>
   487 00007EDF 000000000000000000- <1>
   487 00007EE8 000000000000000000- <1>
   487 00007EF1 000000000000000000- <1>
   487 00007EFA 000000000000000000- <1>
   487 00007F03 000000000000000000- <1>
   487 00007F0C 000000000000000000- <1>
   487 00007F15 000000000000000000- <1>
   487 00007F1E 000000000000000000- <1>
   487 00007F27 000000000000000000- <1>
   487 00007F30 000000000000000000- <1>
   487 00007F39 000000000000000000- <1>
   487 00007F42 000000000000000000- <1>
   487 00007F4B 000000000000000000- <1>
   487 00007F54 000000000000000000- <1>
   487 00007F5D 000000000000000000- <1>
   487 00007F66 000000000000000000- <1>
   487 00007F6F 000000000000000000- <1>
   487 00007F78 000000000000000000- <1>
   487 00007F81 000000000000000000- <1>
   487 00007F8A 000000000000000000- <1>
   487 00007F93 000000000000000000- <1>
   487 00007F9C 000000000000000000- <1>
   487 00007FA5 000000000000000000- <1>
   487 00007FAE 000000000000000000- <1>
   487 00007FB7 000000000000000000- <1>
   487 00007FC0 000000000000000000- <1>
   487 00007FC9 000000000000000000- <1>
   487 00007FD2 000000000000000000- <1>
   487 00007FDB 000000000000000000- <1>
   487 00007FE4 000000000000000000- <1>
   487 00007FED 000000000000000000- <1>
   487 00007FF6 000000000000000000- <1>
   487 00007FFF 000000000000000000- <1>
   487 00008008 000000000000000000- <1>
   487 00008011 000000000000000000- <1>
   487 0000801A 000000000000000000- <1>
   487 00008023 000000000000000000- <1>
   487 0000802C 000000000000000000- <1>
   487 00008035 000000000000        <1>
   488                              <1> .dfltBPB     defaultBPB ;If no removable devices, A and B point here
   488                              <2> .dfltBPB :
   174 0000803B E9                  <2>  db 0E9h
   175 0000803C 00                  <2>  db 00h
   176 0000803D 90                  <2>  db 90h
   177 0000803E 534350444F537631    <2>  db 'SCPDOSv1'
   178 00008046 0002                <2>  dw 0200h
   179 00008048 01                  <2>  db 01h
   180 00008049 0100                <2>  dw 0001h
   181 0000804B 02                  <2>  db 02h
   182 0000804C E000                <2>  dw 00E0h
   183 0000804E 400B                <2>  dw 0B40h
   184 00008050 F0                  <2>  db 0F0h
   185 00008051 0900                <2>  dw 0009h
   186 00008053 1200                <2>  dw 0012h
   187 00008055 0200                <2>  dw 0002h
   188 00008057 00000000            <2>  dd 0
   189 0000805B 00000000            <2>  dd 0
   190 0000805F 00                  <2>  db 00h
   191 00008060 00                  <2>  db 00h
   192 00008061 29                  <2>  db 29h
   193 00008062 00000000            <2>  dd 0
   194 00008066 4E4F204E414D452020- <2>  db 'NO NAME    '
   194 0000806F 2020                <2>
   195 00008071 4641543132202020    <2>  db 'FAT12   '
   196 00008079 000000000000000000- <2>  db 58 dup 0
   196 00008082 000000000000000000- <2>
   196 0000808B 000000000000000000- <2>
   196 00008094 000000000000000000- <2>
   196 0000809D 000000000000000000- <2>
   196 000080A6 000000000000000000- <2>
   196 000080AF 00000000            <2>
   489                              <1> endptr equ $
    49                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    50                                  ;Paragraph alignment
    51                                  %include "./Source/BSS/dosDynaDataArea.asm"
     1                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
     2                              <1> ; the MCB chain!
     3                              <1> ddaStart:
     4 00000000 <res 10h>           <1> dosMCB          resb mcb_size
     5                              <1> 
     6                              <1> dosDynamicArea: ;Difference of this symbol with cfgFrame endPtr gives alloc size
     7                              <1> ;Create DPB chain of first 5 available DPB slots
     8 00000010 <res 35h>           <1> firstDPB        resb dpb_size   ;First two are always present
     9 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    10 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    11 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    12 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    13                              <1> 
    14                              <1> ;fcbsArray       resb sfth_size + 4*sft_size ;One header plus 4 SFT entries
    15                              <1> 
    16 00000119 <res 1C7h>          <1> cdsArray        resb 5*cds_size ;5 CDS's unless more are specified
    17                              <1> 
    18 000002E0 <res 30h>           <1> tmpBufHdr       resb bufferHdr_size
    19 00000310 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    20                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    21                              <1> cfgLoad:    ;This symbol is used to read config.sys here
    22                              <1> dynamicDataAreaLength equ $ - ddaStart
    22          ------------------  <1>  info: assembly required 1+16+2 passes

