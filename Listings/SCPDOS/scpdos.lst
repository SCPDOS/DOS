     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;-------------------------------------------------------------------------------
    15                              <1> ;These macros are live and must not be touched
    16                              <1> ;-------------------------------------------------------------------------------
    17                              <1> %macro return 0
    18                              <1> %%_ret:
    19                              <1>     ret
    20                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> %macro cret 1
    24                              <1> %%_base:
    25                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    26                              <1>     %ifdef retOff
    27                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <1>     %ifdef currSegVBase
    29                              <1>     j%+1 short (retOff+currSegVBase)
    30                              <1>     %else
    31                              <1>     j%+1 short retOff
    32                              <1>     %endif  ;End ifdef currSegVBase
    33                              <1>     %else 
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End the distance measurement if
    38                              <1>     %else   
    39                              <1>     j%-1 short %%a
    40                              <1>     return
    41                              <1> %%a:
    42                              <1>     %endif  ;End ifdef retoff
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro retz 0
    46                              <1> cret z
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro retnz 0
    50                              <1> cret nz
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro rete 0
    54                              <1> cret e
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro retne 0
    58                              <1> cret ne
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro retc 0
    62                              <1> cret c
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro retnc 0
    66                              <1> cret nc
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro retb 0
    70                              <1> cret b
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro retnb 0
    74                              <1> cret nb
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro breakpoint 0
    78                              <1> xchg bx, bx
    79                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> 
    66                              <1> ;Driver Attribute Word bit meanings
    67                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    68                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    69                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    70                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    71                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    72                              <1>     devDrvExtFun   equ 40h ;If set, functions 13, 17, 18 supported (must be)
    73                              <1>     devDrvIOCTL2   equ 80h ;If set, IOCTL function 19 supported
    74                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    75                              <1>     devDrvIOCTL    equ 4000h ;If set, Generic IOCTL supported
    76                              <1>     devDrvChar     equ 8000h ;If set, Char device
    77                              <1> ;Bit 0 1=console input
    78                              <1> ;    1 1=console output (character devices)
    79                              <1> ;    2 1=NUL device
    80                              <1> ;    3 1=CLOCK device
    81                              <1> ;    4 1=INT 49 output (CON)
    82                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    83                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    84                              <1> ;   11 1=open/close/removable media supported (3.0+)
    85                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    86                              <1> ;      1=media descriptor in FAT required (block devices)
    87                              <1> ;   14 1=IOCTL supported
    88                              <1> ;   15 0=block device
    89                              <1> ;      1=character device
    90                              <1> 
    91                              <1> ;Driver structures
    92                              <1> 
    93                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    94                              <1> 
    95                              <1>     .hdrlen resb 1  ;Length of the request header
    96                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    97                              <1>     .cmdcde resb 1  ;Command code
    98                              <1>     .status resw 1  ;Status word
    99                              <1>     .devptr resq 1  ;Device queue pointer field
   100                              <1> 
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> struc drvReqHdr
   104                              <1>     drvReqHdrM
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   105                              <1> endstruc
   106                              <1> 
   107                              <1> struc initReqPkt  ;Init Request Packet
   108                              <1> 
   109                              <1>     drvReqHdrM   ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   110 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   111 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   112 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   113 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   114                              <1> 
   115                              <1> endstruc
   116                              <1> 
   117                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   118                              <1> 
   119                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   120 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   121 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   122 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   129 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   130 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   131 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   132                              <1> 
   133                              <1> endstruc
   134                              <1> 
   135                              <1> struc ioReqPkt   ;IO Request Packet
   136                              <1> 
   137                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   138 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   139 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   140 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   141 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   142 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   143                              <1> 
   144                              <1> endstruc
   145                              <1> 
   146                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   147                              <1>     
   148                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   149 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc statusReqPkt   ;Status Request Packet
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   156                              <1> 
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc openReqPkt ;Open Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc closeReqPkt ;Close Device Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   180                              <1>      
   181                              <1> endstruc
   182                              <1> 
   183                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   184                              <1> 
   185                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   186 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   187 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   188 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   189 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   190 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   201                              <1>     
   202                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   203                              <1> 
   204                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   138                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   139                              <1>     ;If any of the three bits are set, then ALL three bits are set
   140                              <1>     ; in addition to whatever the user passed to search for.
   141                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   142                              <1>     dirIncFiles     equ dirHidden | dirSystem
   143                              <1> 
   144                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   145                              <1> 
   146 00000000 ??????              <1>     .jmpBoot                resb 3 
   147 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   148 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   149 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   150 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   151 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   152 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   153 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   154 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   155 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   156 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   157 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   158 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   159 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   160 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   161 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   162 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   163 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   164 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   165                              <1> 
   166                              <1> endstruc
   167                              <1> 
   168                              <1> struc FSInfo
   169                              <1> 
   170 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   171 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   172 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   173 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   174 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   175 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   176 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   177                              <1> 
   178                              <1> endstruc
   179                              <1> 
   180                              <1> %macro defaultBPB 0
   181                              <1>     db 0E9h
   182                              <1>     db 00h
   183                              <1>     db 90h
   184                              <1>     db 'SCPDOSv1'
   185                              <1>     dw 0200h                       
   186                              <1>     db 01h                         
   187                              <1>     dw 0001h                           
   188                              <1>     db 02h                              
   189                              <1>     dw 00E0h            
   190                              <1>     dw 0B40h   
   191                              <1>     db 0F0h                   
   192                              <1>     dw 0009h                   
   193                              <1>     dw 0012h                     
   194                              <1>     dw 0002h                  
   195                              <1>     dd 0                 
   196                              <1>     dd 0 
   197                              <1>     db 00h
   198                              <1>     db 00h
   199                              <1>     db 29h
   200                              <1>     dd 0
   201                              <1>     db 'NO NAME    '
   202                              <1>     db 'FAT12   '
   203                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   204                              <1> %endmacro
     8                                  %include "./Source/Include/dosStruc.inc"
     9                              <1> 
    10                              <1> ;-------------------------------------------------------;
    11                              <1> ; This include file contains miscellaneous internal     ;
    12                              <1> ; SCP/DOS structures.                                   ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> 
    15                              <1> ;------------------------------------------------------------------------;
    16                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    17                              <1> ; its file system structure. This is used to locate files and structures
    18                              <1> ; on the device itself and to translate file requests to cluster chains
    19                              <1> ; to LBAs to pass to the disk driver..
    20                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    21                              <1> ; drivers Initialise routine has been called.
    22                              <1> ;------------------------------------------------------------------------;
    23                              <1> struc dpb        ;Drive Parameter Block
    24                              <1> 
    25 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    26 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    27 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    28 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    29 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    30 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    31 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    32 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    33 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    34 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    35 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    36 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    37                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    38 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    39 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    40 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    41 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    42 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    43 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    44                              <1> 
    45                              <1> endstruc
    46                              <1> 
    47                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    48                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    49                              <1> ;------------------------------------------------------------------------;
    50                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    51                              <1> ; All disk pathing requests go via the CDS for that drive.
    52                              <1> ; The default drive is the last accessed drive, this number is stored
    53                              <1> ; in the DOS data area.
    54                              <1> ; The CDS is stored as an array with the offset into the array being 
    55                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    56                              <1> ;
    57                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> struc cds       ;Current Directory structure
    60 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    61 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    62 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    63 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    64 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    65 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    66                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    67                              <1> ; another, we save the number of chars to skip to that deep level).
    68                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    69                              <1> ; Only affects for SUBST drives, not JOIN
    70                              <1> ; Flags: Bit 15 set = Network drive
    71                              <1> ;        Bit 14 set = Physical drive
    72                              <1> ;        Bit 13 set = JOIN'ed drive
    73                              <1> ;        Bit 12 set = SUBST'ed drive
    74                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    75                              <1> endstruc
    76                              <1> ;CDS equates
    77                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    78                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    79                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    80                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    81                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    82                              <1> ;------------------------------------------------------------------------;
    83                              <1> ; The SFT is a way to allow applications to open file handles to files 
    84                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    85                              <1> ; under the first header, and then a second header will be linked to the 
    86                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    87                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    88                              <1> ; using the FCBS= command. Default FCBS=5.
    89                              <1> ;
    90                              <1> ; A file handle describes the file, and the location within the file that
    91                              <1> ; we are reading. The file handle can be manipulated without the file
    92                              <1> ; being in memory, thus allowing the user to access data without needing 
    93                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    94                              <1> ; accessing devices, by treating them as files with their drivers 
    95                              <1> ; responding and translating the manipulations of the file handle itself.
    96                              <1> ; Neither the driver nor the application should see or use the SFT for
    97                              <1> ; the handle, as it is subject to change (and will change when file 
    98                              <1> ; sharing provisions are included). The DOS will make requests to the 
    99                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   100                              <1> ; track of the information in the SFT entry for that handle. 
   101                              <1> ;
   102                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   103                              <1> ; can point to the same file. It all depends on what the applications 
   104                              <1> ; want to do with the File.
   105                              <1> ;
   106                              <1> ; !!!!IMPORTANT!!!!
   107                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   108                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   109                              <1> ;
   110                              <1> ;Each SFT may look like this:
   111                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   112                              <1> ;            |                |
   113                              <1> ;       wNumFiles*sft    wNumFiles*sft
   114                              <1> ;
   115                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   116                              <1> ; System FCBs.
   117                              <1> ;
   118                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   119                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   120                              <1> ;
   121                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   122                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   123                              <1> ;------------------------------------------------------------------------;
   124                              <1> struc sfth   ;System file table header
   125                              <1> ; This is the SFT header.
   126                              <1> ; This structure comes before the start of the first file in the array/table.
   127 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   128 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc sft
   132                              <1> ;This is the file struc itself
   133 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   134 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   135 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   136 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   137 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   138 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   139 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   140 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   141 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   142 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   143 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   144 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   145 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   146 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   147 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   148 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   149 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   150 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   151 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   152                              <1> ;                           0 means no record
   153                              <1> endstruc
   154                              <1> ;Open Mode equates
   155                              <1> ;Access modes   Bits[2:0]
   156                              <1> ReadAccess      equ 0h
   157                              <1> WriteAccess     equ 1h
   158                              <1> RWAccess        equ 2h
   159                              <1> ;Bit 3 reserved 0
   160                              <1> ;Sharing modes  Bits[6:4]
   161                              <1> CompatShare     equ 0h
   162                              <1> denyRWShare     equ 10h
   163                              <1> denyWriteShare  equ 20h
   164                              <1> denyReadShare   equ 30h
   165                              <1> denyNoneShare   equ 40h
   166                              <1> netFCBShare     equ 70h
   167                              <1> ;Bit 7 reserved 0
   168                              <1> ;Bits 8-12 reserved 0
   169                              <1> 
   170                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   171                              <1> ;Buffering on writes
   172                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   173                              <1> ;FCB opened file?
   174                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   175                              <1> ;Attribute Byte
   176                              <1> readOnlyFile    equ 1h
   177                              <1> hiddenFile      equ 2h
   178                              <1> systemFile      equ 4h
   179                              <1> volumeLabel     equ 8h
   180                              <1> directoryFile   equ 10h ;Directory entry
   181                              <1> archiveFile     equ 20h
   182                              <1> ;Device Info equates
   183                              <1> ;For a block device, bits [5:0] contain the drive number
   184                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   185                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   186                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   187                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   188                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   189                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   190                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   191                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   192                              <1> devCharDev      equ 80h ;If set, it is a char device!
   193                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   194                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   195                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   196                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   197                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   198                              <1> 
   199                              <1> ;openAddress   equ DOSSEG:367Ah   
   200                              <1> ;createAddress equ DOSSEG:35E3h   
   201                              <1> ;------------------------------------------------------------------------;
   202                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   203                              <1> ; to an internal buffer, and then copying it to the specified location
   204                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   205                              <1> ; another request for the same sector from the same device is made, so 
   206                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   207                              <1> ; size, selected according to the largest detected sector size during 
   208                              <1> ; the initial loadup.
   209                              <1> ;
   210                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   211                              <1> ;
   212                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   213                              <1> ;------------------------------------------------------------------------;
   214                              <1> 
   215                              <1> struc bufferHdr
   216 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   217 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   218 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   219 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   220 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   221 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   222 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   223 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   224 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   225                              <1>     .dataarea:             ;Points to the start of the data area
   226                              <1> endstruc
   227                              <1> ;Buffer Flag equates
   228                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   229                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   230                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   231                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   232                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   233                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   234                              <1> ;Note! A buffer is marked as referenced only when the application 
   235                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   236                              <1> ;------------------------------------------------------------------------;
   237                              <1> ; Memory control block for each memory arena
   238                              <1> ;------------------------------------------------------------------------;
   239                              <1> struc mcb
   240 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   241 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   242 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   243 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   244                              <1>     .program:
   245                              <1> endstruc
   246                              <1> ;MCB equates
   247                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   248                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   249                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   250                              <1> mcbMarkCtn      equ "M"
   251                              <1> mcbMarkEnd      equ "Z"
   252                              <1> 
   253                              <1> memFirstFit     equ 0   ;First free block goes to application
   254                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   255                              <1> memLastFit      equ 2   ;Last free block goes to application
   256                              <1> 
   257                              <1> ;Owner = Para aligned address => Owning application PSP
   258                              <1> ;...To consider...
   259                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   260                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   261                              <1> ;------------------------------------------------------------------------;
   262                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   263                              <1> ; following order, thus allowing for return values to be placed in the 
   264                              <1> ; registers by accessing the caller register stack frame.
   265                              <1> ;------------------------------------------------------------------------;
   266                              <1> struc callerFrame
   267 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   268 00000008 ????????????????    <1>     .rbx    resq 1    
   269 00000010 ????????????????    <1>     .rcx    resq 1
   270 00000018 ????????????????    <1>     .rdx    resq 1
   271 00000020 ????????????????    <1>     .rsi    resq 1
   272 00000028 ????????????????    <1>     .rdi    resq 1
   273 00000030 ????????????????    <1>     .rbp    resq 1
   274 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   275 00000040 ????????????????    <1>     .r9     resq 1
   276                              <1> ;Pushed by Processor when invoked via Interrupt
   277 00000048 ????????????????    <1>     .rip    resq 1
   278 00000050 ????????????????    <1>     .cs     resq 1
   279 00000058 ????????????????    <1>     .flags  resq 1
   280                              <1> endstruc
   281                              <1> 
   282                              <1> struc dpl
   283                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   284                              <1> ; server calls
   285 00000000 ????????????????    <1>     .rax    resq 1
   286 00000008 ????????????????    <1>     .rbx    resq 1
   287 00000010 ????????????????    <1>     .rcx    resq 1
   288 00000018 ????????????????    <1>     .rdx    resq 1
   289 00000020 ????????????????    <1>     .rsi    resq 1
   290 00000028 ????????????????    <1>     .rdi    resq 1
   291 00000030 ????????????????    <1>     .r8     resq 1
   292 00000038 ????????????????    <1>     .r9     resq 1
   293 00000040 ????????????????    <1>     .align  resq 1
   294 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   295 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   296                              <1> endstruc
   297                              <1> 
   298                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   299 00000000 ????????????????    <1>     .oldRBP         resq 1  
   300 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   301 00000009 ??                  <1>     .newSFTVal      resb 1
   302 0000000A ??                  <1>     .newFCBSVal     resb 1
   303 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   304 0000000C ??                  <1>     .newLastdrive   resb 1
   305 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   306 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   307 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   308 00000014 ????????            <1>                     resd 1  ;Alignment byte
   309 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   310                              <1> endstruc
   311                              <1> 
   312                              <1> struc fcb
   313                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   314 00000000 ??                  <1>     .driveNum   resb 1
   315 00000001 ????????????????    <1>     .filename   resb 8
   316 00000009 ??????              <1>     .fileext    resb 3
   317 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   318                              <1> ;One block consists of 128 records, of size denoted in the below
   319 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   320 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   321 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   322 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   323 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   324 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   325 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   326 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   327 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   328                              <1>     ;If record size > 64, high byte is ignored.
   329                              <1>     ;Used for random read and write operations to find the right record
   330                              <1> endstruc
   331                              <1> 
   332                              <1> struc filename
   333                              <1> ;8.3 File name struct
   334 00000000 ????????????????    <1>     .fName  resb 8
   335 00000008 ??????              <1>     .fExt   resb 3
   336                              <1> endstruc
   337                              <1> 
   338                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   339 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   340 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   341 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   342 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   343 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   344 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   345 00000016 ????                <1>     .fileTime   resw 1  ;File time
   346 00000018 ????                <1>     .fileDate   resw 1  ;File date
   347 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   348 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   349                              <1> endstruc
   350                              <1> 
   351                              <1> struc psp
   352 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   353 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   354 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   355 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   356 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   357 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   358 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   359 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   360 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   361 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   362 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   363 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   364 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   365 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   366                              <1> ;Extra handle arrays are grouped into a linked list
   367                              <1> ;The below are in the same place as in DOS
   368 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   369 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   370                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   371 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   372 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   373                              <1> endstruc
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   resw 1
   377 00000002 ??                  <1>     .minutes    resb 1
   378 00000003 ??                  <1>     .hours      resb 1
   379 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    resb 1
   381                              <1> endstruc
   382                              <1> 
   383                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   384                              <1> ;for a space of 64Gb
   385                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   386                              <1> dosLowBase  equ 600h    ;Low load address
   387                              <1> 
   388                              <1> ;Critical Error AH bitfield equates
   389                              <1> critRead    equ 0h
   390                              <1> critWrite   equ 1h
   391                              <1> critDOS     equ 0h
   392                              <1> critFAT     equ 2h
   393                              <1> critDir     equ 4h
   394                              <1> critData    equ 6h
   395                              <1> critFailOK  equ 8h
   396                              <1> critRetryOK equ 10h
   397                              <1> critIgnorOK equ 20h
   398                              <1> critCharDev equ 80h
   399                              <1> 
   400                              <1> critIgnore  equ 0
   401                              <1> critRetry   equ 1
   402                              <1> critAbort   equ 2
   403                              <1> critFail    equ 3
   404                              <1> 
   405                              <1> ;MISC ASCII control chars
   406                              <1> NUL equ 00h ;^@         | ASCII Null
   407                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   408                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   409                              <1> BEL equ 07h ;^G         | ASCII Bell
   410                              <1> BSP equ 08h ;^H         | ASCII Backspace
   411                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   412                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   413                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   414                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   415                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   416                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   417                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   418                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   419                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   420                              <1> SPC equ 20h ;Printable  | ASCII Space
   421                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   422                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   423                              <1> 
   424                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   425                              <1> ;Extended Ascii Codes
   426                              <1> eF1     equ 3Bh ;F1 second byte
   427                              <1> eF2     equ 3Ch ;F2 second byte
   428                              <1> eF3     equ 3Dh ;F3 second byte
   429                              <1> eF4     equ 3Eh ;F4 second byte
   430                              <1> eF5     equ 3Fh ;F5 second byte
   431                              <1> eF6     equ 40h ;F6 second byte
   432                              <1> eF7     equ 41h ;F7 second byte
   433                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   434                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   435                              <1> eIns    equ 52h ;Insert second byte
   436                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
     9                                  %include "./Source/Debug/debSym.inc"
    10                              <1> ;This file will include the debuging symbols
    11                              <1> 
    12                              <1> %define true 1
    13                              <1> %define false 0
    14                              <1> 
    15                              <1> ;Switch the DEBUG to false in production!
    16                              <1> %define DEBUG false
    17                              <1> %define DPBINFO false
    18                              <1> %define REGS false
    19                              <1> %define ENDSTATUS true
    20                              <1> %define ALLOCTEST false
    21                              <1> 
    22                              <1> 
    23                              <1> ;Use this space as the debug stack
    24                              <1> %define debStackTop 80000h
    10                                  %include "./Source/Include/dosError.inc"
    11                              <1> ;DOS Error codes
    12                              <1> 
    13                              <1> ;Extended Error Codes
    14                              <1> errInvFnc   equ 1   ;Invalid function number
    15                              <1> errFnf      equ 2   ;File not found
    16                              <1> errPnf      equ 3   ;Path not found
    17                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    18                              <1> errAccDen   equ 5   ;Access denied (to resource)
    19                              <1> errBadHdl   equ 6   ;Invalid handle
    20                              <1> errMCBbad   equ 7   ;MCB's destroyed
    21                              <1> errNoMem    equ 8   ;Insufficient memory
    22                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    23                              <1> errBadEnv   equ 10  ;Invalid environment
    24                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    25                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    26                              <1> errInvDat   equ 13  ;Invalid data
    27                              <1> ;           equ 14  ;Reserved
    28                              <1> errBadDrv   equ 15  ;Invalid drive specified
    29                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    30                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    31                              <1> errNoFil    equ 18  ;No more files
    32                              <1> ;The following are Driver error codes + 19
    33                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    34                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    35                              <1> errUnkUnt   equ 20  ;Unknown Unit
    36                              <1> errDrvNR    equ 21  ;Drive not ready
    37                              <1> errUnkCmd   equ 22  ;Unknown Command
    38                              <1> errCRCerr   equ 23  ;Data (CRC) error
    39                              <1> errBadRLn   equ 24  ;Bad request structure length
    40                              <1> errSekErr   equ 25  ;Seek error
    41                              <1> errUnkMed   equ 26  ;Unknown media type
    42                              <1> errSecNF    equ 27  ;Sector not Found
    43                              <1> errNoPap    equ 28  ;Printer out of paper
    44                              <1> errWF       equ 29  ;Write fault
    45                              <1> errRF       equ 30  ;Read fault
    46                              <1> errGF       equ 31  ;General fault
    47                              <1> ;----------------------------------------------
    48                              <1> ;The following two go inbetween the Disk errors
    49                              <1> errShrVio   equ 32  ;Sharing violations
    50                              <1> errLokVio   equ 33  ;File Lock violation
    51                              <1> ;----------------------------------------------
    52                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    53                              <1> errNoFCB    equ 35  ;FCB unavailable
    54                              <1> errShrFul   equ 36  ;Sharing buffer full
    55                              <1> 
    56                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    57                              <1> 
    58                              <1> errFilExist equ 80  ;File already exists
    59                              <1> errDirExist equ 82  ;Directory already exists
    60                              <1> errFI44     equ 83  ;Fail on INT 44h
    61                              <1> errRedir    equ 84  ;Too many levels of redirection
    62                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    63                              <1> errBadPass  equ 86  ;Bad password
    64                              <1> errBadParam equ 87  ;Bad parameter passed to request
    65                              <1> errNetWrite equ 88  ;Network Write Fault
    66                              <1> ;-----------------------------------------------------------------------------
    67                              <1> ;Error Loci
    68                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    69                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    70                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    71                              <1> eLocChr     equ 4   ;Serial/Character Device error
    72                              <1> eLocMem     equ 5   ;Related to RAM
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error Actions
    75                              <1> eActRet     equ 1   ;Retry
    76                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    77                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    78                              <1> eActAbt     equ 4   ;Abort with cleanup
    79                              <1> eActKil     equ 5   ;Abort without cleanup
    80                              <1> eActIgn     equ 6   ;Ignore error
    81                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    82                              <1> ;-----------------------------------------------------------------------------
    83                              <1> ;Error classes
    84                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    85                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    86                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    87                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    88                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    89                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    90                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    91                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    92                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    93                              <1> eClsLocked  equ 10  ;Resource Locked
    94                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    95                              <1> eClsClash   equ 12  ;Resource already exists!
    96                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  %include "./Source/Include/dosExec.inc"
    12                              <1> ;This include file contains structures related to the EXE format
    13                              <1> ; and the exec frame used when setting up the EXE in memory by 41h/4Bh
    14                              <1> 
    15                              <1> ;Int 41h/4Bh stack frame, used to store values whilst processing a EXE or COM
    16                              <1> ; file.
    17                              <1> execLoadGo  equ 0
    18                              <1> execLoad    equ 1
    19                              <1> execInvld   equ 2
    20                              <1> execOverlay equ 3
    21                              <1> 
    22                              <1> struc execFrame
    23 00000000 ????????????????    <1>     .oldRBP     resq 1  
    24 00000008 ??                  <1>     .bSubFunc   resb 1  ;Subfunction number
    25 00000009 ????                <1>     .wProgHdl   resb 2  ;File handle number for executable file
    26 0000000B ????                <1>     .wEnvSize   resb 2  ;Size of the environment block
    27 0000000D ????                <1>     .wNameLen   resb 2  ;Needs to be less than 64 but welp
    28 0000000F ??                  <1>                 resb 1  ;Alignment byte
    29                              <1>     .rbx:
    30 00000010 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    31                              <1>     .rdx:
    32 00000018 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    33                              <1> 
    34 00000020 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    35 00000028 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    36 00000030 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to new Program Base address (consider removing)
    37 00000038 ????????            <1>     .dProgSize  resd 1  ;Program size is saved here, PSP included.
    38                              <1> .pProgEP:   ;Program EP, recycle this qword
    39 0000003C ????????            <1>     .dCOFFhdr   resd 1  ;Offset in file to COFF header. Set to 0 for COM
    40 00000040 ????                <1>     .wNumSeg    resw 1  ;Number of segments, consider reusing NameLen
    41 00000042 ????                <1>                 resw 1  ;Alignment reservation
    42                              <1> .qRelocVal:  ;Used when computing relocations, Rebasing factor
    43 00000044 ????????            <1>     .dFilePtr   resd 1  ;Keep of track of where in file we are
    44 00000048 ????????            <1>                 resd 1  ;Alignment reservation, DO NOT USE FOR ANYTHING
    45                              <1> endstruc
    46                              <1> 
    47                              <1> ;Possible blocks to be pointed to by rbx
    48                              <1> 
    49                              <1> struc execProg 
    50 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    51 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    52 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    53 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> struc loadProg
    57 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    58 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    59 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    60 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    61 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    62 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    63                              <1> endstruc
    64                              <1> 
    65                              <1> struc loadOvly
    66 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    67 00000008 ????????            <1>     .dRelocFct  resd 1  ;Relocation factor for 
    68                              <1> endstruc
    69                              <1> 
    70                              <1> ;----------------------------
    71                              <1> ;   EXE header structures   :
    72                              <1> ;----------------------------
    73                              <1> 
    74                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    75                              <1> dosMagicSignature   equ "MZ"
    76                              <1> dosMagicSignature2  equ "ZM"
    77                              <1> struc imageDosHdr
    78 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    79 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    80 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    81 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    82 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    83 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    84 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    85 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    86 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    87 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    88 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    89 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    90 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    91 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    92 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    93 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    94 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    95 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    96 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    97                              <1> endstruc
    98                              <1> 
    99                              <1> ;Pssobile signatures pointed to by e_lfanew
   100                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
   101                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
   102                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
   103                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
   104                              <1> 
   105                              <1> ;COFF File header, immadiately follows the signature so @ [e_lfanew + 4]
   106                              <1> 
   107                              <1> struc imageFileHeader
   108 00000000 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
   109 00000002 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
   110 00000004 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
   111 00000008 ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
   112 0000000C ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   113 00000010 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   114 00000012 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   115                              <1> endstruc
   116                              <1> 
   117                              <1> ;The only valid values in the .machineType field
   118                              <1> 
   119                              <1> imageFileMachineUnknown equ 0
   120                              <1> imageFileMachineAMD64   equ 08664h 
   121                              <1> 
   122                              <1> ;Optional header, immediately follows COFF header
   123                              <1> 
   124                              <1> struc imageFileOptionalHeader
   125 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   126 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   127 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   128 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   129 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   130 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   131 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   132 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   133 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   134 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   135 00000024 ????????            <1> 	.dFileAlignment             resd 1
   136 00000028 ????                <1> 	.wMajOSVer                  resw 1
   137 0000002A ????                <1> 	.wMinOSVer                  resw 1
   138 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   139 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   140 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   141 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   142 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   143 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   144 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   145 00000040 ????????            <1> 	.dCheckSum                  resd 1
   146 00000044 ????                <1> 	.wSubsystem                 resw 1
   147 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   148 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   149 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   150 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   151 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   152 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   153 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   154                              <1> endstruc
   155                              <1> 
   156                              <1> romMagicNum     equ 0107h
   157                              <1> pe32MagicNum    equ 010Bh
   158                              <1> pe64MagicNum    equ 020Bh
   159                              <1> 
   160                              <1> ;Data directory header structure
   161                              <1> 
   162                              <1> struc imageDataDirectory
   163 00000000 ????????            <1>     .virtualAddress  resd 1
   164 00000004 ????????            <1>     .size    resd 1
   165                              <1> endstruc
   166                              <1> 
   167                              <1> struc baseRelocBlock
   168 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   169 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   170                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   171                              <1> endstruc
   172                              <1> ;Section headers that form the Section Table.
   173                              <1> ;There are wNumberOfSections many entries in this table.
   174                              <1> ;Each entry is one imageSectionHdr
   175                              <1> 
   176                              <1> struc imageSectionHdr       ;size 40 bytes
   177 00000000 ????????????????    <1>     .name                   resb 8
   178 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   179 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   180 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   181 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   182 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   183 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   184 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   185 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   186 00000024 ????????            <1> 	.dCharacteristics       resd 1
   187                              <1> endstruc
   188                              <1> 
   189                              <1> ;Section Hdr characteristics flags 
   190                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   191                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   192                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    12                                  Segment .text align=1   ;Init code
    13                                  %define currSegVBase 0
    14                                  %include "./Source/Sysinit/sysInit.asm"
    15                              <1> ; We arrive here with the following values in the registers.
    16                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    17                              <1> ; dx  = Int 33h boot device number
    18                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    19                              <1> 
    20 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    21 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
    22 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
    23 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    24 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    25 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    26 0000001A F348A5              <1>     rep movsq   ;Copy over
    27 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    28 00000022 50                  <1>     push rax
    29 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    30                              <1> sysInitldr:
    31                              <1> ;Now the tough part, load DOS to 800
    32 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    33                              <1> .read:
    34 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    35 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    35 00000035 00                  <1>
    36 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    37 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    38 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    39 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    40 0000003F CD33                <1>     int 33h
    41 00000041 7206                <1>     jc .readFail
    42 00000043 6800080000          <1>     push qword 800h
    43 00000048 C3                  <1>     ret   ;No error? Yay, DOS loaded.
    44                              <1> .readFail:
    45 00000049 FFCE                <1>     dec esi
    46 0000004B 75DC                <1>     jnz .read
    47 0000004D 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    48 00000054 B804130000          <1>     mov eax, 1304h
    49 00000059 CD30                <1>     int 30h
    50 0000005B CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    51 0000005D 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    51 00000066 6F6164204572726F72- <1>
    51 0000006F 0A0D00              <1>
    52 00000072 000000000000000000- <1>     db 100h-($-$$) dup 00h ;Fill with nulls  
    52 0000007B 000000000000000000- <1>
    52 00000084 000000000000000000- <1>
    52 0000008D 000000000000000000- <1>
    52 00000096 000000000000000000- <1>
    52 0000009F 000000000000000000- <1>
    52 000000A8 000000000000000000- <1>
    52 000000B1 000000000000000000- <1>
    52 000000BA 000000000000000000- <1>
    52 000000C3 000000000000000000- <1>
    52 000000CC 000000000000000000- <1>
    52 000000D5 000000000000000000- <1>
    52 000000DE 000000000000000000- <1>
    52 000000E7 000000000000000000- <1>
    52 000000F0 000000000000000000- <1>
    52 000000F9 00000000000000      <1>
    53                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    54                              <1>     ;Store space for a static PSP
    55 00000100 000000000000000000- <1>     db 100h dup 00h
    55 00000109 000000000000000000- <1>
    55 00000112 000000000000000000- <1>
    55 0000011B 000000000000000000- <1>
    55 00000124 000000000000000000- <1>
    55 0000012D 000000000000000000- <1>
    55 00000136 000000000000000000- <1>
    55 0000013F 000000000000000000- <1>
    55 00000148 000000000000000000- <1>
    55 00000151 000000000000000000- <1>
    55 0000015A 000000000000000000- <1>
    55 00000163 000000000000000000- <1>
    55 0000016C 000000000000000000- <1>
    55 00000175 000000000000000000- <1>
    55 0000017E 000000000000000000- <1>
    55 00000187 000000000000000000- <1>
    55 00000190 000000000000000000- <1>
    55 00000199 000000000000000000- <1>
    55 000001A2 000000000000000000- <1>
    55 000001AB 000000000000000000- <1>
    55 000001B4 000000000000000000- <1>
    55 000001BD 000000000000000000- <1>
    55 000001C6 000000000000000000- <1>
    55 000001CF 000000000000000000- <1>
    55 000001D8 000000000000000000- <1>
    55 000001E1 000000000000000000- <1>
    55 000001EA 000000000000000000- <1>
    55 000001F3 000000000000000000- <1>
    55 000001FC 00000000            <1>
    56                              <1> ;END OF FIRST SECTOR!!
    57                              <1> ;DOS SYSINIT BEGINS HERE
    58                              <1> ;First move the alignment of the DOSSEG to 4Kb
    59                              <1> initBegin:
    60 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    61 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    62 00000206 0F32                <1>     rdmsr
    63 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    64 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    65 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    66 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    67 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    68 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    69 00000221 89F8                <1>     mov eax, edi
    70 00000223 4889FA              <1>     mov rdx, rdi
    71 00000226 48C1EA20            <1>     shr rdx, 20h
    72 0000022A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    73                              <1> ;------------------------------------------------;
    74                              <1> ;              Connect Debugger                  ;
    75                              <1> ;------------------------------------------------;
    76                              <1> %if DEBUG
    77                              <1> ;Only connect if in debug mode
    78                              <1>     mov eax, 0C501h ;Connect debugger
    79                              <1>     int 35h
    80                              <1> %endif
    81                              <1> ;------------------------------------------------;
    82                              <1> ;           Sanitise the data area               ;
    83                              <1> ;------------------------------------------------;
    84                              <1> ; This call initialises ALL fields in the DOS    ;
    85                              <1> ; data area with 0's. Thus any fields, which     ;
    86                              <1> ; need to be initialised with a 0 value, are     ;
    87                              <1> ; initialised for free.                          ;
    88                              <1> ;------------------------------------------------;
    89 0000022C B9[B2D90300]        <1>     mov ecx, dSegLen
    90 00000231 30C0                <1>     xor al, al
    91 00000233 57                  <1>     push rdi    ;Temp save rdi on the stack
    92 00000234 F3AA                <1>     rep stosb
    93 00000236 5F                  <1>     pop rdi
    94                              <1> ;------------------------------------------------;
    95                              <1> ;          Start saving Basic DOS data           ;
    96                              <1> ;------------------------------------------------;
    97 00000237 6444883C25-         <1>     mov byte fs:[bootDrive], r15b ;Save the boot drive in memory
    97 0000023C [10C00300]          <1>
    98                              <1> ;Copy DOS to its final resting place
    99 00000240 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    99 00000245 [00C00300]          <1>
   100 00000249 6448893425-         <1>     mov qword fs:[biosUBase], rsi
   100 0000024E [08C00300]          <1>
   101 00000252 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
   102 00000255 4881C7[B2D90300]    <1>     add rdi, dSegLen ;Move destination past end of data area
   103 0000025C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
   104 00000263 B900100000          <1>     mov ecx, 1000h
   105 00000268 F348A5              <1>     rep movsq
   106                              <1> 
   107 0000026B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   108 0000026D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   109 00000271 664489C0            <1>     mov ax, r8w
   110 00000275 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
   111 0000027D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
   112 00000285 64C60425[70C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
   112 0000028D 05                  <1>
   113 0000028E 64C60425[96C00300]- <1>     mov byte fs:[numFiles], 5      ;Default 20 files, at start 5
   113 00000296 05                  <1>
   114 00000297 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
   114 0000029C [97C00300]1400      <1>
   115 000002A2 64C60425[71C00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
   115 000002AA 01                  <1>
   116                              <1>     ;If no detected Int 33h devices, halt 
   117 000002AB 49C1E810            <1>     shr r8, 2*8
   118 000002AF 4584C0              <1>     test r8b, r8b
   119 000002B2 0F84630D0000        <1>     jz errorInit
   120                              <1> ;------------------------------------------------;
   121                              <1> ;          Add additional page tables            ;
   122                              <1> ;------------------------------------------------;
   123                              <1> ;This will allow for up to 64Gb of addressible space
   124 000002B8 4889EF              <1>     mov rdi, rbp
   125                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
   126 000002BB B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
   127 000002C0 57                  <1>     push rdi
   128 000002C1 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
   128 000002CA 00                  <1>
   129                              <1> pdtLoop:
   130 000002CB 48AB                <1>     stosq
   131 000002CD 480500002000        <1>     add rax, 200000h
   132 000002D3 FFC9                <1>     dec ecx
   133 000002D5 75F4                <1>     jnz pdtLoop
   134 000002D7 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   135                              <1> ;Now we add every 4kb page to the page directory pointer table
   136                              <1> ;15 4kb pages to consider
   137 000002D8 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   138 000002DB 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   139 000002DE 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   140 000002E5 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   141 000002EC B93C000000          <1>     mov ecx, 60
   142 000002F1 480D03000000        <1>     or rax, 3h      ;present and r/w
   143                              <1> pdptLoop:
   144 000002F7 48AB                <1>     stosq
   145 000002F9 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   146 000002FF FFC9                <1>     dec ecx
   147 00000301 75F4                <1>     jnz pdptLoop
   148 00000303 0F20DF              <1>     mov rdi, cr3
   149 00000306 0F22DF              <1>     mov cr3, rdi
   150                              <1> ;------------------------------------------------;
   151                              <1> ;                   MCB inits                    ;
   152                              <1> ;------------------------------------------------;
   153                              <1> mcbInit:
   154 00000309 B820E80000          <1>     mov eax, 0E820h
   155 0000030E CD35                <1>     int 35h
   156                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   157 00000310 E804010000          <1>     call .mcbFindAddress
   158 00000315 7349                <1>     jnc .mcbi1  ;If found, proceed
   159                              <1>     ;Here, we try use E801h
   160 00000317 B801E80000          <1>     mov eax, 0E801h
   161 0000031C CD35                <1>     int 35h
   162 0000031E 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   163 00000321 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   164 00000324 85C0                <1>     test eax, eax
   165 00000326 741B                <1>     jz .worst
   166 00000328 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   167 0000032B C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   168 0000032E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   169 00000336 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   170 0000033E E909010000          <1>     jmp mcbBuild
   171                              <1> .worst:
   172                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   173 00000343 B800002000          <1>     mov eax, 200000h
   174 00000348 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   174 0000034D [08C00300]          <1>
   175 00000351 29D8                <1>     sub eax, ebx
   176 00000353 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   177 0000035B E9EC000000          <1>     jmp mcbBuild 
   178                              <1> .mcbi1:
   179 00000360 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   180 00000363 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   180 0000036C 00                  <1>
   181 0000036D 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   182 00000371 0F85C2000000        <1>     jne .mcbFail
   183 00000377 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   184                              <1>     ;PCI hole always exists so this value will always be a dword
   185 0000037B 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   186 00000383 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   187 00000386 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   188 00000389 4881FB00000001      <1>     cmp rbx, 1000000h  
   189 00000390 773C                <1>     ja .skipISA
   190                              <1> ;Here we deal with ISA hole issues
   191 00000392 B820E80000          <1>     mov eax, 0E820h
   192 00000397 CD35                <1>     int 35h
   193 00000399 48B800000001000000- <1>     mov rax, 1000000h
   193 000003A2 00                  <1>
   194 000003A3 E871000000          <1>     call .mcbFindAddress
   195 000003A8 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   196 000003AE 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   196 000003B7 00                  <1>
   197 000003B8 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   198 000003BC 0F858A000000        <1>     jne mcbBuild  
   199 000003C2 488B5808            <1>     mov rbx, qword [rax + 8]
   200 000003C6 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   201                              <1> .skipISA:
   202 000003CE B820E80000          <1>     mov eax, 0E820h
   203 000003D3 CD35                <1>     int 35h
   204 000003D5 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   204 000003DE 00                  <1>
   205 000003DF E835000000          <1>     call .mcbFindAddress
   206 000003E4 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   207 000003E6 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   207 000003EF 00                  <1>
   208 000003F0 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   209 000003F4 7556                <1>     jne mcbBuild   
   210 000003F6 488B5808            <1>     mov rbx, qword [rax + 8]
   211                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   212 000003FA 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   212 00000403 00                  <1>
   213 00000404 4839CB              <1>     cmp rbx, rcx
   214 00000407 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   215 0000040B 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   215 00000410 [1BC00300]          <1>
   216 00000414 E933000000          <1>     jmp mcbBuild
   217                              <1> .mcbFindAddress:
   218                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   219                              <1> ;Entry: rax = Address of arena to search for
   220                              <1> ;       rsi = Pointer to memory map
   221                              <1> ;       ecx = Number of 24 byte entries
   222                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   223                              <1> ;       CF=CY : value in rax not found
   224 00000419 56                  <1>     push rsi
   225 0000041A 51                  <1>     push rcx
   226 0000041B 50                  <1>     push rax
   227                              <1> .mfa0:
   228 0000041C 483B06              <1>     cmp rax, qword [rsi]
   229 0000041F 7410                <1>     je .mcbAddressFound
   230 00000421 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   231 00000428 FFC9                <1>     dec ecx
   232 0000042A 79F0                <1>     jns .mfa0
   233                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   234 0000042C 58                  <1>     pop rax
   235 0000042D 59                  <1>     pop rcx
   236 0000042E 5E                  <1>     pop rsi
   237 0000042F F9                  <1>     stc
   238 00000430 C3                  <1>     ret
   239                              <1> .mcbAddressFound:
   240 00000431 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   241 00000434 59                  <1>     pop rcx ;Pop old rax value off
   242 00000435 59                  <1>     pop rcx
   243 00000436 5E                  <1>     pop rsi
   244 00000437 F8                  <1>     clc
   245 00000438 C3                  <1>     ret
   246                              <1> .mcbFail:
   247 00000439 488D2D110C0000      <1>     lea rbp, mcbFailmsg
   248 00000440 B804130000          <1>     mov eax, 1304h
   249 00000445 CD30                <1>     int 30h
   250 00000447 E9CF0B0000          <1>     jmp errorInit
   251                              <1> 
   252                              <1> mcbBuild:
   253                              <1> ;Actually build the MCB chain here
   254                              <1> ;Start by computing the difference between userbase and DOS area
   255                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   256 0000044C 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   256 00000451 [08C00300]          <1>
   257 00000455 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   258 0000045C 56                  <1>     push rsi    ;Save ptr
   259 0000045D 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   260 00000464 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   261 00000467 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   262 0000046F 5B                  <1>     pop rbx
   263 00000470 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   264 00000473 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   265 0000047B 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   266 00000483 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   267 00000486 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   268 00000489 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   268 0000048E [2BC00300]          <1>
   269                              <1> 
   270                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   271 00000492 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   271 0000049A 00000000            <1>
   272 0000049E 746E                <1>     jz .skipISA
   273                              <1>     ;Here if an ISA hole exists, place a MCB around it
   274 000004A0 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   275                              <1>     ;Remove one MCB worth of space from alloc
   276 000004A7 31C9                <1>     xor ecx, ecx
   277 000004A9 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   278 000004AC 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   279 000004B2 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   280 000004B5 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   281 000004B8 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   282 000004BB C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   283 000004BE 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   284 000004C6 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   284 000004CF 00                  <1>
   285 000004D0 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   286 000004D3 480510000000        <1>     add rax, mcb_size
   287 000004D9 4829C1              <1>     sub rcx, rax    ;Take their difference
   288 000004DC C1E904              <1>     shr ecx, 4
   289 000004DF 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   290 000004E2 C1E104              <1>     shl ecx, 4  ;Get bytes again
   291 000004E5 4881C310000000      <1>     add rbx, mcb_size
   292 000004EC 4801CB              <1>     add rbx, rcx
   293                              <1>     ;RBX should now be at 16Mb
   294 000004EF C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   295 000004F2 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   296 000004FA 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   297 00000502 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   298 00000505 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   299 0000050B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   300                              <1> .skipISA:
   301                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   302                              <1>     ;rbx points to a block with "Z" marker
   303 0000050E 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   303 00000516 00000000            <1>
   304 0000051A 7470                <1>     jz .exit
   305                              <1>     ;Add PCI hole MCB
   306 0000051C 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   307                              <1>     ;Remove one MCB worth of space from alloc
   308 00000523 31C9                <1>     xor ecx, ecx
   309 00000525 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   310 00000528 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   311 0000052E C1E104              <1>     shl ecx, 4  ;Get bytes
   312 00000531 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   313 00000534 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   314 00000537 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   315 0000053A 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   316 00000542 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   316 0000054B 00                  <1>
   317 0000054C 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   318 0000054F 480510000000        <1>     add rax, mcb_size
   319 00000555 4829C1              <1>     sub rcx, rax    ;Take their difference
   320 00000558 C1E904              <1>     shr ecx, 4
   321 0000055B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   322 0000055E C1E104              <1>     shl ecx, 4  ;Get bytes again
   323 00000561 4881C310000000      <1>     add rbx, mcb_size
   324 00000568 4801CB              <1>     add rbx, rcx
   325                              <1>     ;RBX should now be at 4Gb
   326 0000056B C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   327 0000056E 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   328 00000576 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   328 0000057B [1BC00300]          <1>
   329 0000057F 48C1E904            <1>     shr rcx, 4
   330 00000583 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   331 00000589 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   332                              <1> .exit:
   333                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   334 0000058C 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   335                              <1> ;------------------------------------------------;
   336                              <1> ;          Kernel inits and adjustments          ;
   337                              <1> ;------------------------------------------------;
   338                              <1> ;Adjust Interrupt Entries Int 40h-49h
   339                              <1> adjInts:
   340 00000593 B340                <1>     mov bl, 40h
   341 00000595 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   342 0000059A CD35                <1>     int 35h
   343 0000059C B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   344 000005A1 488D3D300B0000      <1>     lea rdi, intData
   345 000005A8 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   346                              <1> .ai0:
   347 000005AA B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   348 000005AF 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   349 000005B2 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   350                              <1> .ai1:
   351 000005B5 CD35                <1>     int 35h
   352 000005B7 4881C708000000      <1>     add rdi, 8
   353 000005BE FFC1                <1>     inc ecx
   354 000005C0 81F950000000        <1>     cmp ecx, 50h
   355 000005C6 75E2                <1>     jne .ai0
   356                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   357                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   358                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   359                              <1>     %if DEBUG
   360                              <1> debugPopUpMsg:
   361                              <1>     push rbx
   362                              <1>     push rbp
   363                              <1>     push rcx
   364                              <1>     push rdx
   365                              <1>     mov ecx, 53 ;A large number of lines
   366                              <1>     xor edx, edx    ;COM 1
   367                              <1> .cls:
   368                              <1>     mov eax, 010Ah ;Transmit Line feed
   369                              <1>     int 34h
   370                              <1>     dec ecx
   371                              <1>     jnz .cls
   372                              <1>     lea rbx, qword [debPrintNullString + rbp]
   373                              <1>     lea rbp, .msg
   374                              <1>     call rbx
   375                              <1>     jmp short .exit
   376                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   377                              <1> .exit:
   378                              <1>     pop rdx
   379                              <1>     pop rcx
   380                              <1>     pop rbp
   381                              <1>     pop rbx
   382                              <1>     %endif
   383                              <1> 
   384                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   385 000005C8 488D154C0A0000      <1>     lea rdx, errorInit ;Get segment start address
   386 000005CF B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   387 000005D4 CD41                <1>     int 41h
   388 000005D6 488D153E0A0000      <1>     lea rdx, errorInit ;Get segment start address
   389 000005DD B844250000          <1>     mov eax, 2544h
   390 000005E2 CD41                <1>     int 41h
   391                              <1> ;------------------------------------------------;
   392                              <1> ;          Driver Adjustments and inits          ;
   393                              <1> ;------------------------------------------------;
   394                              <1> ;Modify the pointers in nData before putting them in the data area
   395 000005E4 48012D6D0B0000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   396 000005EB 48012D700B0000      <1>     add qword [nData + drvHdr.strPtr], rbp
   397 000005F2 48012D710B0000      <1>     add qword [nData + drvHdr.intPtr], rbp
   398                              <1> ;Copy the Null driver to its location in Sysvars
   399 000005F9 B922000000          <1>     mov ecx, drvHdr_size
   400 000005FE 488D35530B0000      <1>     lea rsi, qword [nData]
   401 00000605 488DBD[73C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   402 0000060C F3A4                <1>     rep movsb   
   403                              <1> 
   404                              <1> ;Adjust the addresses in the other driver headers 
   405 0000060E 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   405 00000610 [BF5B000000000000]  <1>
   406 00000618 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   407 0000061D 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   408                              <1> adjDrivers:
   409 00000621 E8D9090000          <1>     call adjustDrvHdr
   410 00000626 E2F9                <1>     loop adjDrivers
   411                              <1> ;Open NUL
   412                              <1> ;NUL opened
   413                              <1> ;Open CON
   414                              <1> conInit:    ;Rather than keeping this resident... do it here
   415                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   416 00000628 488D95[AA5E0000]    <1>     lea rdx, qword [rbp + fastOutput]
   417 0000062F B849250000          <1>     mov eax, 2549h
   418 00000634 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   419 00000636 488D95[B25E0000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   420 0000063D B83B250000          <1>     mov eax, 253Bh
   421 00000642 CD41                <1>     int 41h ;Hook int 3Bh
   422                              <1> .ci0:
   423 00000644 B401                <1>     mov ah, 01      ;Get buffer status
   424 00000646 CD36                <1>     int 36h
   425 00000648 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   426 0000064A 30E4                <1>     xor ah, ah
   427 0000064C CD36                <1>     int 36h ;Read key to flush from buffer
   428 0000064E EBF4                <1>     jmp short .ci0
   429                              <1> .ci1:
   430 00000650 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   431 00000655 CD30                <1>     int 30h
   432 00000657 B402                <1>     mov ah, 02h
   433 00000659 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   434 0000065B 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   435 0000065D CD30                <1>     int 30h
   436 0000065F B707                <1>     mov bh, 07h     ;Grey/Black attribs
   437 00000661 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   438 00000666 CD30                <1>     int 30h
   439                              <1> 
   440                              <1>     ;Save ptr to ConHdr in Sysvars
   441 00000668 488D85[BF5B0000]    <1>     lea rax, qword [rbp + conHdr]
   442 0000066F 6448890425-         <1>     mov qword fs:[vConPtr], rax
   442 00000674 [4BC00300]          <1>
   443                              <1> 
   444                              <1>     ;Fix the ext ESC function handler address
   445 00000678 488D85[A5270000]    <1>     lea rax, qword [rbp + editKeys]
   446 0000067F 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   446 00000684 [59000000]          <1>
   447                              <1> 
   448                              <1> ;CLOCK init prock
   449                              <1> ;Set the time and date using the RTC (if present)
   450                              <1> clkInit:
   451                              <1>    ;Save ptr to ClkHdr in Sysvars first
   452 00000688 488D85[255C0000]    <1>     lea rax, qword [rbp + clkHdr]
   453 0000068F 6448890425-         <1>     mov qword fs:[clockPtr], rax
   453 00000694 [43C00300]          <1>
   454                              <1> ;CH - Hours, in BCD
   455                              <1> ;CL - Minutes, in BCD
   456                              <1> ;DH - Seconds, in BCD
   457 00000698 B402                <1>     mov ah, 02  ;Read RTC Time
   458 0000069A CD3A                <1>     int 3Ah
   459 0000069C 7271                <1>     jc .clkEnd  ;if error, just exit
   460                              <1>     ;Now set the driver time. Convert From BCD to Decimal
   461 0000069E 0FB6C5              <1>     movzx eax, ch   ;Hours
   462 000006A1 E84D000000          <1>     call .bcd2Bin
   463 000006A6 88C5                <1>     mov ch, al
   464 000006A8 0FB6C1              <1>     movzx eax, cl     ;Mins
   465 000006AB E843000000          <1>     call .bcd2Bin
   466 000006B0 88C1                <1>     mov cl, al
   467 000006B2 0FB6C6              <1>     movzx eax, dh   ;Seconds
   468 000006B5 E839000000          <1>     call .bcd2Bin
   469 000006BA 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
   470 000006BC 89C2                <1>     mov edx, eax
   471 000006BE B42D                <1>     mov ah, 2Dh ;DOS Set Time
   472 000006C0 CD41                <1>     int 41h
   473                              <1> ;Now get the date from RTC
   474                              <1> ;CL - Year, in BCD
   475                              <1> ;DH - Month, in BCD
   476                              <1> ;DL - Day, in BCD
   477 000006C2 B404                <1>     mov ah, 04  ;Read RTC Date
   478 000006C4 CD3A                <1>     int 3Ah
   479 000006C6 7247                <1>     jc .clkEnd
   480                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
   481 000006C8 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
   482 000006CB E823000000          <1>     call .bcd2Bin
   483 000006D0 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
   484 000006D3 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
   485 000006D9 0FB6C6              <1>     movzx eax, dh   ;Get Months
   486 000006DC E812000000          <1>     call .bcd2Bin
   487 000006E1 88C6                <1>     mov dh, al  
   488 000006E3 0FB6C2              <1>     movzx eax, dl   ;Get day
   489 000006E6 E808000000          <1>     call .bcd2Bin
   490 000006EB 88C2                <1>     mov dl, al
   491 000006ED B42B                <1>     mov ah, 2Bh ;DOS Set Date
   492 000006EF CD41                <1>     int 41h
   493 000006F1 EB1C                <1>     jmp short .clkEnd
   494                              <1> .bcd2Bin:
   495                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   496 000006F3 51                  <1>     push rcx
   497 000006F4 89C1                <1>     mov ecx, eax
   498 000006F6 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   499 000006FB 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   500 00000701 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   501 00000704 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   502                              <1> .b2blp:
   503 00000707 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   504 00000709 FFC9                <1>     dec ecx
   505 0000070B 75FA                <1>     jnz .b2blp
   506                              <1> .b2bexit:
   507 0000070D 59                  <1>     pop rcx
   508 0000070E C3                  <1>     ret
   509                              <1> .clkEnd:
   510                              <1> ;------------------------------------------------;
   511                              <1> ;         Link DOS to temporary Buffer           ;
   512                              <1> ;------------------------------------------------;
   513                              <1> tempBufferInit:
   514 0000070F 488DBD[E0020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   515 00000716 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   515 0000071B [55C00300]          <1>
   516 0000071F 31C0                <1>     xor eax, eax
   517 00000721 48FFC8              <1>     dec rax
   518 00000724 48AB                <1>     stosq   ;.nextBufPtr, end of list
   519 00000726 AA                  <1>     stosb   ;.driveNumber, Free entry
   520 00000727 48FFC0              <1>     inc rax
   521 0000072A AA                  <1>     stosb   ;.bufferFlags, No flags
   522                              <1> ;------------------------------------------------;
   523                              <1> ;         Init msd driver, create DPB            ;
   524                              <1> ;------------------------------------------------;
   525                              <1> storageInits:
   526                              <1> ;First save dpb pointer in sysvars
   527 0000072B 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   528 00000732 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   528 00000737 [33C00300]          <1>
   529                              <1> ;Open Mass Storage
   530 0000073B E83A0A0000          <1>     call diskInit
   531 00000740 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   532 00000743 648A0425[6FC00300]  <1>     mov al, byte fs:[numPhysVol]
   533 0000074B 84C0                <1>     test al, al ;If no media with valid filesystems were detected, stop boot
   534 0000074D 0F84C8080000        <1>     jz errorInit
   535 00000753 488D95[45650000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   536 0000075A 30C9                <1>     xor cl, cl  ;Clear counter
   537 0000075C 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   537 00000761 [33C00300]          <1>
   538                              <1> .si0:   
   539 00000765 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   540 00000768 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   541 0000076A CD41                <1>     int 41h
   542                              <1> ;Add other data to DPB
   543 0000076C 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   544 0000076F 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   545 00000772 50                  <1>     push rax
   546 00000773 488D87[475C0000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   547 0000077A 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   548 0000077E 58                  <1>     pop rax
   549 0000077F FEC1                <1>     inc cl
   550 00000781 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   551 00000783 7416                <1>     je .si1
   552 00000785 50                  <1>     push rax
   553 00000786 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   554 0000078A 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   555 0000078E 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   556 00000791 58                  <1>     pop rax
   557 00000792 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   558 00000799 EBCA                <1>     jmp short .si0
   559                              <1> .si1:
   560                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   561 0000079B 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   562 000007A3 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   563                              <1> ;------------------------------------------------;
   564                              <1> ;          Find largest sector size              ;
   565                              <1> ;------------------------------------------------;
   566                              <1> sectorSizeSearch:
   567                              <1> ;Done by reading BPB's for each drive
   568 000007A6 488D9D[45650000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   569                              <1>     
   570                              <1>     ;Go thru each block individually
   571 000007AD 31C0                <1>     xor eax, eax
   572 000007AF 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   573                              <1> .findLargest:
   574 000007B2 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   575 000007B6 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   576 000007BB 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   577 000007C2 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   578 000007C5 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   579 000007C8 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   580 000007CA 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   580 000007CF [53C00300]          <1>
   581                              <1> ;------------------------------------------------;
   582                              <1> ;                CDS array inits                 ;
   583                              <1> ;------------------------------------------------;
   584 000007D3 B905000000          <1>     mov ecx, 5    ;Use as a counter, build 5 CDS entries
   585 000007D8 488DBD[19010000]    <1>     lea rdi, qword [rbp + cdsArray] ;Setup array
   586 000007DF E802000000          <1>     call makeCDSArray
   587 000007E4 EB50                <1>     jmp short initialCDSWritten ;Go past the function
   588                              <1> makeCDSArray:
   589                              <1> ;Input: ecx = Size of array
   590                              <1> ;       rdi = Pointer to the start of the CDS array
   591                              <1> ;Ouput: rdi = first byte past the end of the table
   592 000007E6 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   592 000007EB [5DC00300]          <1>
   593 000007EF 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]
   593 000007F4 [33C00300]          <1>
   594 000007F8 B8413A5C00          <1>     mov eax, 005C3A41h      ;"A:\"+NULL char
   595                              <1> .tempCDS:
   596 000007FD 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax
   597 000007FF 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   598 00000803 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir for all!
   599 0000080A 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the X:
   600 00000810 31D2                <1>     xor edx, edx    ;Use edx for flags
   601 00000812 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Is rbx an invalid DPB ptr?
   602 00000819 7409                <1>     je .skipValidCDS
   603 0000081B BA00400000          <1>     mov edx, cdsValidDrive  ;If not, set drive to valid and...
   604 00000820 488B5B25            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]  ;... go to next DPB
   605                              <1> .skipValidCDS:
   606 00000824 66895743            <1>     mov word [rdi + cds.wFlags], dx ;Store the flags now
   607 00000828 FFC0                <1>     inc eax ;Increment the drive letter
   608 0000082A 4881C75B000000      <1>     add rdi, cds_size   ;Goto next array entry
   609 00000831 FFC9                <1>     dec ecx
   610 00000833 75C8                <1>     jnz .tempCDS
   611 00000835 C3                  <1>     ret
   612                              <1> initialCDSWritten:
   613                              <1> ;------------------------------------------------;
   614                              <1> ;     Set up general PSP areas and DOS vars      ;
   615                              <1> ;------------------------------------------------;
   616                              <1> ;Additional DOS Vars init and fixups
   617 00000836 64C60425[6BC30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   617 0000083E FF                  <1>
   618 0000083F 64C60425[33C30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   618 00000847 2F                  <1>
   619 00000848 488DBD[D0010000]    <1>     lea rdi, qword [rbp + extAsciiTbl]  ;Get the load of dflt extascii tbl
   620 0000084F 6448893C25-         <1>     mov qword fs:[ctryTbl.mapaddr], rdi ;Store in country table
   620 00000854 [2D000000]          <1>
   621                              <1> 
   622                              <1> ;Set network machine name to... nothing!
   623 00000858 488DBD[38C30300]    <1>     lea rdi, qword [rbp + machineName]
   624 0000085F B910000000          <1>     mov ecx, 10h    ;16 chars long
   625 00000864 B020                <1>     mov al, SPC ;Space char
   626 00000866 F3AA                <1>     rep stosb   ;Fill with space chars
   627                              <1> 
   628                              <1> 
   629                              <1> ;Patch Data Table init
   630 00000868 488DBD[48C30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   631 0000086F 488D85[80540000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   632 00000876 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   633 00000878 488D85[8A540000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   634 0000087F 48AB                <1>     stosq
   635 00000881 488D85[94540000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   636 00000888 48AB                <1>     stosq
   637 0000088A 488D85[9E540000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   638 00000891 48AB                <1>     stosq
   639                              <1> 
   640                              <1> ;Initial PSP Init
   641 00000893 488D1D66F8FFFF      <1>     lea rbx, qword [tempPSP]
   642 0000089A 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   642 0000089F [81C30300]          <1>
   643 000008A3 53                  <1>     push rbx
   644 000008A4 4881C380000000      <1>     add rbx, psp.dta
   645 000008AB 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   645 000008B0 [79C30300]          <1>
   646 000008B4 5B                  <1>     pop rbx
   647 000008B5 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   648 000008BA C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   649 000008C1 48C7430200000000    <1>     mov qword [rbx + psp.allocSize], 0    ;Size of allocation (dummy value)
   650 000008C9 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   651 000008CD 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   652 000008D1 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   653 000008D5 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   653 000008DE FF                  <1>
   654 000008DF 48AB                <1>     stosq   ;8 bytes
   655 000008E1 31C0                <1>     xor eax, eax
   656 000008E3 50                  <1>     push rax    ;Save 0 on the stack
   657 000008E4 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   658 000008E7 48AB                <1>     stosq   ;16 bytes
   659 000008E9 AB                  <1>     stosd   ;20 bytes
   660 000008EA 58                  <1>     pop rax ;Get 0 back
   661 000008EB 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   662 000008F3 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   663 000008F7 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   664 000008FB 4889DA              <1>     mov rdx, rbx
   665 000008FE B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   666 00000903 CD41                <1>     int 41h
   667 00000905 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   668 00000909 B843350000          <1>     mov eax, 3543h
   669 0000090E CD41                <1>     int 41h
   670 00000910 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   671 00000914 B844350000          <1>     mov eax, 3544h
   672 00000919 CD41                <1>     int 41h
   673 0000091B 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   674                              <1> 
   675 0000091F B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   676 00000924 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   677 00000928 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   678                              <1> ;------------------------------------------------;
   679                              <1> ;          Default File Handle Creation          ;
   680                              <1> ;                                                ;
   681                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   682                              <1> ;------------------------------------------------;
   683                              <1> defaultFileHandles:
   684                              <1> ;Fill in the default file table entries
   685 0000092A 488D9D[99C00300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   686 00000931 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   687 00000938 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   688 0000093E 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   688 00000943 [3BC00300]          <1>
   689 00000947 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   689 00000950 20                  <1>
   690                              <1> ;GOTO FIRST FILE 
   691 00000951 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   692                              <1> ;Write AUX
   693 00000958 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   694 0000095D 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   695 00000963 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   696 00000967 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   697                              <1>     ;No EOF when reading from the device
   698 0000096B 488B85[E15B0000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   699 00000972 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   700                              <1>     ;Ignore disk related fields and Date/Time of open
   701 00000976 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   702                              <1>     ;11 chars in 8.3 name
   703 0000097A 488D3544070000      <1>     lea rsi, auxName
   704 00000981 B903000000          <1>     mov ecx, 3
   705 00000986 F3A4                <1>     rep movsb   ;Move the three bytes
   706 00000988 4889D0              <1>     mov rax, rdx
   707 0000098B 48AB                <1>     stosq   ;Eight spaces left to print
   708 0000098D 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   708 00000992 [81C30300]          <1>
   709 00000996 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   710                              <1> ;GOTO NEXT ENTRY
   711 0000099A 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   712                              <1>     ;Write CON
   713 000009A1 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   714 000009A6 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   715 000009AC C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   716 000009B0 C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   717                              <1>     ;No EOF when reading from the device
   718 000009B4 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   718 000009B9 [4BC00300]          <1>
   719 000009BD 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   720                              <1>     ;Ignore disk related fields and Date/Time of open
   721 000009C1 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   722                              <1>     ;11 chars in 8.3 name
   723 000009C5 488D35F5060000      <1>     lea rsi, conName
   724 000009CC B903000000          <1>     mov ecx, 3
   725 000009D1 F3A4                <1>     rep movsb   ;Move the three bytes
   726 000009D3 4889D0              <1>     mov rax, rdx
   727 000009D6 48AB                <1>     stosq   ;Eight spaces left to print
   728 000009D8 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   728 000009DD [81C30300]          <1>
   729 000009E1 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   730                              <1> ;GOTO NEXT ENTRY
   731 000009E5 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   732                              <1> ;Write PRN
   733 000009EC 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   734 000009F1 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   735 000009F7 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   736 000009FB C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   737                              <1>     ;Want EOF when reading from to the device
   738 000009FF 488B85[035C0000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   739 00000A06 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   740                              <1>     ;Ignore disk related fields and Date/Time of open
   741 00000A0A 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   742                              <1>     ;11 chars in 8.3 name
   743 00000A0E 488D35B4060000      <1>     lea rsi, prnName
   744 00000A15 B903000000          <1>     mov ecx, 3
   745 00000A1A F3A4                <1>     rep movsb   ;Move the three bytes
   746 00000A1C 4889D0              <1>     mov rax, rdx
   747 00000A1F 48AB                <1>     stosq   ;Eight spaces left to print
   748 00000A21 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   748 00000A26 [81C30300]          <1>
   749 00000A2A 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   750                              <1> ;Zero word 0 of entry 4 and 5
   751 00000A2E 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   752 00000A35 31C0                <1>     xor eax, eax
   753                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   754                              <1>     ; which is ok as these are empty entries, ready to be used)
   755 00000A37 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   756 00000A39 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   757 00000A40 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   758                              <1> ;------------------------------------------------;
   759                              <1> ;               Load CONFIG.SYS                  ;
   760                              <1> ;------------------------------------------------;
   761                              <1> ;Setup stackframe, workout base 
   762 00000A42 488DBD[45000000]    <1>     lea rdi, qword [rbp + secondDPB]
   763                              <1>     ;Check if this DPB is the last dpb. The first two ALWAYS exist.
   764 00000A49 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   765 00000A4D 483DFFFFFFFF        <1>     cmp rax, -1 ;Was second DPB the last one?
   766 00000A53 7421                <1>     je setupFrame   ;If so, jump
   767 00000A55 4889C7              <1>     mov rdi, rax    ;Move rdi to thirdDPB
   768 00000A58 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   769 00000A5C 483DFFFFFFFF        <1>     cmp rax, -1 ;Was third DPB the last one?
   770 00000A62 7412                <1>     je setupFrame   ;If so, jump
   771 00000A64 4889C7              <1>     mov rdi, rax    ;Move rdi to fourthDPB
   772 00000A67 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   773 00000A6B 483DFFFFFFFF        <1>     cmp rax, -1 ;Was fourth DPB the last one?
   774 00000A71 7403                <1>     je setupFrame   ;If so, jump
   775 00000A73 4889C7              <1>     mov rdi, rax    ;Move rdi to fifthDPB
   776                              <1> setupFrame:
   777 00000A76 4881C735000000      <1>     add rdi, dpb_size   ;Else, goto end of the dpb rdi points to
   778 00000A7D 55                  <1>     push rbp
   779 00000A7E 4889E5              <1>     mov rbp, rsp
   780 00000A81 4881EC20000000      <1>     sub rsp, cfgFrame_size
   781 00000A88 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Store the end pointer here
   782 00000A8C C645F81E            <1>     mov byte [rbp - cfgFrame.newBuffers], 30
   783 00000A90 C645F714            <1>     mov byte [rbp - cfgFrame.newSFTVal], 20
   784 00000A94 C645F604            <1>     mov byte [rbp - cfgFrame.newFCBSVal], 4
   785 00000A98 C645F500            <1>     mov byte [rbp - cfgFrame.newProtFCBSVal], 0
   786 00000A9C C645F405            <1>     mov byte [rbp - cfgFrame.newLastdrive], 5
   787                              <1> 
   788 00000AA0 648A0425[10C00300]  <1>     mov al, byte fs:[bootDrive]
   789 00000AA8 A880                <1>     test al, 80h    ;Was boot drive hard disk?
   790 00000AAA 7406                <1>     jz notHDD
   791                              <1> ;Set Current Drive to C:
   792 00000AAC B202                <1>     mov dl, 2
   793 00000AAE B40E                <1>     mov ah, 0Eh ;Select C: Drive
   794 00000AB0 CD41                <1>     int 41h
   795                              <1> notHDD:
   796 00000AB2 488D1514060000      <1>     lea rdx, cfgspec    ;CONFIG.SYS, must be on bootdrive for now
   797 00000AB9 B43D                <1>     mov ah, 3Dh ;Open file for reading
   798 00000ABB B000                <1>     mov al, ReadAccess
   799 00000ABD CD41                <1>     int 41h
   800 00000ABF 7200                <1>     jc noCfg  ;If no CONFIG.SYS found, just use defaults that are already setup
   801                              <1> 
   802                              <1> ;------------------------------------------------;
   803                              <1> ;              Process CONFIG.SYS                ;
   804                              <1> ;------------------------------------------------;
   805                              <1> ;Create a stack frame with the following order.
   806                              <1> ;Values greater than max are set to max. Values less than min are set to min.
   807                              <1> ; New Buffers value.        Default = 30, Min = 1, Max = 99
   808                              <1> ; New SFT value.            Default = 20, Min = 5, Max = 254
   809                              <1> ; New FCBS value.           Default = 4,  Min = 4, Max = 254
   810                              <1> ; New protected FCBS value. Default = 0,  Min = 0, Max = New FCBS value
   811                              <1> ; New CDS value.            Default = 5,  Min = 5, Max = 26
   812                              <1> ;------------------------------------------------;
   813                              <1> ;   Setup Final Data Areas With Overrides from   ;
   814                              <1> ;                  CONFIG.SYS                    ;
   815                              <1> ;------------------------------------------------;
   816                              <1> ;Add additional buffers. Start from tmpBufHdr
   817                              <1> ;Add additional SFT entries. By default, 1 new SFT header, with 15 SFT entries
   818                              <1> ;Add additional FCBS.
   819                              <1> ;Create a larger CDS if needed.
   820                              <1> noCfg:
   821                              <1> ;Start with buffers:
   822 00000AC1 0FB64DF8            <1>     movzx ecx, byte [rbp - cfgFrame.newBuffers]    ;Get new buffers size
   823 00000AC5 64880C25[71C00300]  <1>     mov byte fs:[numBuffers], cl    ;Store this value in var
   824                              <1>     ;Now do the allocation at rdi. Each buffer = maxSectorSize + bufferHdr_size
   825 00000ACD 640FB71C25-         <1>     movzx ebx, word fs:[maxBytesSec]    ;Get buffer sector size
   825 00000AD2 [53C00300]          <1>
   826 00000AD6 81C330000000        <1>     add ebx, bufferHdr_size ;rbx has the size to add
   827                              <1>     ;Each buffer has no flags, drive number must be -1
   828 00000ADC 488B7DE8            <1>     mov rdi, qword [rbp - cfgFrame.endPtr]  ;Get current allocation end pointer
   829 00000AE0 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Reset the var here
   829 00000AE5 [55C00300]          <1>
   830 00000AE9 4889FE              <1>     mov rsi, rdi    ;Points rsi to first new buffer space
   831 00000AEC 31C0                <1>     xor eax, eax    ;Use for sanitising buffer headers
   832 00000AEE 67E325              <1>     jecxz .lastBuffer
   833                              <1> .bufferLoop:
   834 00000AF1 4801DF              <1>     add rdi, rbx    ;Goto next buffer space
   835 00000AF4 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Point to next buffer
   836 00000AF7 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   837 00000AFD 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
   838 00000B01 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
   839 00000B04 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
   840 00000B07 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
   841 00000B0B 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
   842 00000B0F 4889FE              <1>     mov rsi, rdi    ;Move rsi to next buffer position
   843 00000B12 FFC9                <1>     dec ecx
   844 00000B14 75DB                <1>     jnz .bufferLoop
   845                              <1> .lastBuffer:
   846 00000B16 4801DF              <1>     add rdi, rbx    ;Goto past the last buffer
   847 00000B19 48C706FFFFFFFF      <1>     mov qword [rsi + bufferHdr.nextBufPtr], -1 ;Point to no buffer
   848 00000B20 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   849 00000B26 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
   850 00000B2A 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
   851 00000B2D 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
   852 00000B30 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
   853 00000B34 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
   854 00000B38 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   855                              <1> 
   856                              <1> ;Now build a new SFT header for the number of files specified by user
   857 00000B3C 0FB64DF7            <1>     movzx ecx, byte [rbp - cfgFrame.newSFTVal]
   858 00000B40 81F905000000        <1>     cmp ecx, 5  ;If we are not adding anything, skip building SFT
   859 00000B46 7430                <1>     je .skipSFT
   860 00000B48 64488B3425-         <1>     mov rsi, qword fs:[sftHeadPtr]  ;Get the current only SFT head pointer
   860 00000B4D [3BC00300]          <1>
   861 00000B51 48893E              <1>     mov qword [rsi + sfth.qNextSFTPtr], rdi ;Move rdi as new SFT pointer
   862 00000B54 662B4E08            <1>     sub cx, word [rsi + sfth.wNumFiles] ;Remove the number of files we already have
   863 00000B58 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move remaining files here
   864 00000B5C 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;Last table in chain
   865 00000B63 4881C70A000000      <1>     add rdi, sfth_size  ;Goto sft area, now need to compute size
   866 00000B6A B84F000000          <1>     mov eax, sft_size
   867 00000B6F F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
   868 00000B71 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
   869 00000B74 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   870                              <1> .skipSFT:
   871                              <1> ;FCBS at rdi
   872 00000B78 6448893C25-         <1>     mov qword fs:[fcbsHeadPtr], rdi ;Setup the fcbs var here
   872 00000B7D [65C00300]          <1>
   873 00000B81 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;No more FCBS headers for now
   874 00000B88 0FB64DF6            <1>     movzx ecx, byte [rbp - cfgFrame.newFCBSVal]
   875 00000B8C 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move this value here
   876 00000B90 B84F000000          <1>     mov eax, sft_size
   877 00000B95 F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
   878 00000B97 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
   879 00000B9A 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   880 00000B9E 0FB64DF5            <1>     movzx ecx, byte [rbp - cfgFrame.newProtFCBSVal] ;Get number of safe FCBs
   881 00000BA2 6466890C25-         <1>     mov word fs:[numSafeSFCB], cx   ;And save that there
   881 00000BA7 [6DC00300]          <1>
   882                              <1> ;And CDS now
   883 00000BAB 0FB64DF4            <1>     movzx ecx, byte [rbp - cfgFrame.newLastdrive]
   884 00000BAF 64880C25[70C00300]  <1>     mov byte fs:[lastdrvNum], cl ;Save this value
   885 00000BB7 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi  ;Point cdsHeadPtr here
   885 00000BBC [5DC00300]          <1>
   886 00000BC0 E821FCFFFF          <1>     call makeCDSArray
   887 00000BC5 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   888                              <1> 
   889                              <1> ;Computation of new space is complete, now work out how many bytes this is
   890 00000BC9 4889EC              <1>     mov rsp, rbp    ;Return stack pointer to original position
   891 00000BCC 5D                  <1>     pop rbp
   892 00000BCD 488D9D[10000000]    <1>     lea rbx, qword [rbp + dosDynamicArea]
   893 00000BD4 4829DF              <1>     sub rdi, rbx    ;Gives difference now
   894 00000BD7 678D5F11            <1>     lea ebx, dword [edi + 11h]  ;Add 11 to round up a paragraph
   895 00000BDB C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   896                              <1> ;Resize DOS allocation before loading COMMAND.COM
   897 00000BDE 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   897 00000BE3 [2BC00300]          <1>
   898 00000BE7 4981C010000000      <1>     add r8, mcb.program
   899 00000BEE B44A                <1>     mov ah, 4Ah
   900 00000BF0 CD41                <1>     int 41h
   901                              <1>     
   902                              <1> ;Resizing complete, Print Welcome Message
   903 00000BF2 488D1542040000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   904 00000BF9 B409                <1>     mov ah, 09h
   905 00000BFB CD41                <1>     int 41h
   906                              <1>     %if DEBUG && ALLOCTEST
   907                              <1> ;Test Allocation, Growth and Deallocation
   908                              <1>     mov r15, qword fs:[currentPSP]
   909                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   910                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   911                              <1>     mov ah, 48h ;Allocate
   912                              <1>     int 41h
   913                              <1> 
   914                              <1>     mov byte [rax - 10h], 0 ;Trash chain
   915                              <1>     mov r8, rax ;Move the pointer to r8
   916                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   917                              <1>     mov ah, 4Ah
   918                              <1>     int 41h
   919                              <1> 
   920                              <1>     mov ah, 49h ;Free r8
   921                              <1>     int 41h
   922                              <1>     mov qword fs:[currentPSP], r15
   923                              <1>     %endif
   924                              <1> 
   925                              <1>     %if ENDSTATUS
   926                              <1> debugFinal:
   927                              <1>     ;Print system state
   928 00000BFD 55                  <1>     push rbp    ;Only rbp really matters here
   929 00000BFE 4989E8              <1>     mov r8, rbp
   930                              <1> 
   931 00000C01 488D2DD0020000      <1>     lea rbp, .msg2
   932 00000C08 4D8D88[84040000]    <1>     lea r9, qword [r8 + debPrintNullString]
   933 00000C0F 41FFD1              <1>     call r9
   934                              <1> 
   935 00000C12 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   936 00000C19 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   936 00000C1E [08C00300]          <1>
   937                              <1> 
   938 00000C22 4D8D88[BF070000]    <1>     lea r9, qword [r8 + overlayQword]
   939 00000C29 41FFD1              <1>     call r9
   940                              <1> 
   941 00000C2C 4881C31B000000      <1>     add rbx, 19+8
   942 00000C33 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   942 00000C38 [00C00300]          <1>
   943 00000C3C 41FFD1              <1>     call r9
   944                              <1> 
   945 00000C3F 4881C31B000000      <1>     add rbx, 19+8
   946 00000C46 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   946 00000C4B [2BC00300]          <1>
   947 00000C4F 41FFD1              <1>     call r9
   948                              <1> 
   949 00000C52 4881C31C000000      <1>     add rbx, 20+8
   950 00000C59 4D8D88[7C070000]    <1>     lea r9, qword [r8 + overlayDword]
   951 00000C60 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
   952 00000C68 41FFD1              <1>     call r9
   953                              <1> 
   954 00000C6B 4881C312000000      <1>     add rbx, 10+8
   955 00000C72 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
   956 00000C7A 41FFD1              <1>     call r9
   957                              <1> 
   958 00000C7D 4881C312000000      <1>     add rbx, 10+8
   959 00000C84 64488B0425-         <1>     mov rax, qword fs:[longMem]
   959 00000C89 [1BC00300]          <1>
   960 00000C8D 4D8D88[BF070000]    <1>     lea r9, qword [r8 + overlayQword]
   961 00000C94 41FFD1              <1>     call r9
   962                              <1> 
   963 00000C97 4881C31B000000      <1>     add rbx, 19+8
   964 00000C9E 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   964 00000CA3 [33C00300]          <1>
   965 00000CA7 41FFD1              <1>     call r9
   966                              <1> 
   967 00000CAA 4881C31B000000      <1>     add rbx, 19+8
   968 00000CB1 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   968 00000CB6 [3BC00300]          <1>
   969 00000CBA 41FFD1              <1>     call r9
   970                              <1> 
   971 00000CBD 4881C31B000000      <1>     add rbx, 19+8
   972 00000CC4 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   972 00000CC9 [55C00300]          <1>
   973 00000CCD 41FFD1              <1>     call r9
   974                              <1> 
   975 00000CD0 4881C31B000000      <1>     add rbx, 19+8
   976 00000CD7 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   976 00000CDC [5DC00300]          <1>
   977 00000CE0 41FFD1              <1>     call r9
   978                              <1> 
   979 00000CE3 4D8D88[0A070000]    <1>     lea r9, qword [r8 + overlayByte]
   980                              <1> 
   981 00000CEA 4881C32C000000      <1>     add rbx, 25+19
   982 00000CF1 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
   982 00000CF7 [6FC00300]          <1>
   983 00000CFB 41FFD1              <1>     call r9
   984                              <1> 
   985 00000CFE 4881C31E000000      <1>     add rbx, 30
   986 00000D05 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   986 00000D0B [12C00300]          <1>
   987 00000D0F 41FFD1              <1>     call r9
   988                              <1> 
   989 00000D12 4881C31E000000      <1>     add rbx, 30
   990 00000D19 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   990 00000D1F [11C00300]          <1>
   991 00000D23 41FFD1              <1>     call r9
   992                              <1> 
   993 00000D26 4881C310000000      <1>     add rbx, 16
   994 00000D2D 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   994 00000D33 [10C00300]          <1>
   995 00000D37 0441                <1>     add al, "A"
   996 00000D39 8803                <1>     mov byte [rbx], al
   997                              <1> 
   998 00000D3B 488D2D10000000      <1>     lea rbp, .msg
   999 00000D42 4D8D88[84040000]    <1>     lea r9, qword [r8 + debPrintNullString]
  1000 00000D49 41FFD1              <1>     call r9
  1001 00000D4C 5D                  <1>     pop rbp
  1002 00000D4D E99E010000          <1>     jmp l1
  1003 00000D52 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
  1003 00000D5B 206261736520464646- <1>
  1003 00000D64 464646464646464646- <1>
  1003 00000D6D 46464646680A0D      <1>
  1004 00000D74 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1004 00000D7D 464646464646464646- <1>
  1004 00000D86 464646464646680A0D  <1>
  1005 00000D8F 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
  1005 00000D98 464646464646464646- <1>
  1005 00000DA1 46464646464668200A- <1>
  1005 00000DAA 0D                  <1>
  1006 00000DAB 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
  1006 00000DB4 464646464646466820  <1>
  1007 00000DBD 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
  1007 00000DC6 464646464646466820  <1>
  1008 00000DCF 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1008 00000DD8 464646464646464646- <1>
  1008 00000DE1 464646464646680A0D  <1>
  1009 00000DEA 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1009 00000DF3 464646464646464646- <1>
  1009 00000DFC 464646464646680A0D  <1>
  1010 00000E05 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1010 00000E0E 464646464646464646- <1>
  1010 00000E17 464646464646680A0D  <1>
  1011 00000E20 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1011 00000E29 464646464646464646- <1>
  1011 00000E32 464646464646680A0D  <1>
  1012 00000E3B 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1012 00000E44 464646464646464646- <1>
  1012 00000E4D 464646464646680A0D  <1>
  1013 00000E56 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
  1013 00000E5F 204C6F676963616C20- <1>
  1013 00000E68 447269766573204646- <1>
  1013 00000E71 680A0D              <1>
  1014 00000E74 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
  1014 00000E7D 204669786564204472- <1>
  1014 00000E86 697665732020204646- <1>
  1014 00000E8F 680A0D              <1>
  1015 00000E92 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
  1015 00000E9B 2052656D6F7661626C- <1>
  1015 00000EA4 652044727673204646- <1>
  1015 00000EAD 680A0D              <1>
  1016 00000EB0 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
  1016 00000EB9 65205A3A0A0D        <1>
  1017 00000EBF 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
  1017 00000EC8 4F4D4D414E442E434F- <1>
  1017 00000ED1 4D2E2E2E0A0D00      <1>
  1018 00000ED8 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
  1018 00000EE1 626F6F742073756D6D- <1>
  1018 00000EEA 6172790A0D00        <1>
  1019                              <1>     %endif
  1020                              <1> l1:
  1021 00000EF0 B436                <1>     mov ah, 36h ;Get Disk Parameters
  1022 00000EF2 B200                <1>     mov dl, 0
  1023 00000EF4 CD41                <1>     int 41h
  1024                              <1> 
  1025 00000EF6 488D1557040000      <1>     lea rdx, tmpDTA
  1026 00000EFD B41A                <1>     mov ah, 1Ah ;Set DTA
  1027 00000EFF CD41                <1>     int 41h ;Set tempDTA to current DTA
  1028 00000F01 B44E                <1>     mov ah, 4Eh ;Find First
  1029 00000F03 488D152C040000      <1>     lea rdx, tmpName
  1030 00000F0A 0FB60D24040000      <1>     movzx ecx, byte [tmpAttr] ;Get the search attribute
  1031 00000F11 CD41                <1>     int 41h
  1032                              <1> 
  1033 00000F13 B44F                <1>     mov ah, 4Fh ;Find Next
  1034 00000F15 CD41                <1>     int 41h
  1035                              <1> 
  1036 00000F17 B43D                <1>     mov ah, 3Dh ;Open File
  1037 00000F19 B002                <1>     mov al, RWAccess
  1038 00000F1B CD41                <1>     int 41h
  1039                              <1> 
  1040 00000F1D B43C                <1>     mov ah, 3ch ;Create File
  1041 00000F1F 66B90000            <1>     mov cx, 00  ;Normal attributes
  1042 00000F23 488D15AA050000      <1>     lea rdx, tmpName3
  1043 00000F2A CD41                <1>     int 41h
  1044 00000F2C 668905AC050000      <1>     mov word [hdl], ax
  1045                              <1> 
  1046 00000F33 B90B000000          <1>     mov ecx, testString1L
  1047 00000F38 488D15A2050000      <1>     lea rdx, testString1
  1048 00000F3F 668B1D99050000      <1>     mov bx, word [hdl]  ;Get the handle in bx
  1049 00000F46 B440                <1>     mov ah, 40h ;Write File
  1050 00000F48 CD41                <1>     int 41h
  1051                              <1> 
  1052                              <1> 
  1053 00000F4A B918000000          <1>     mov ecx, testString2L
  1054 00000F4F 488D1596050000      <1>     lea rdx, testString2
  1055 00000F56 668B1D82050000      <1>     mov bx, word [hdl]  ;Get the handle in bx
  1056 00000F5D B440                <1>     mov ah, 40h ;Write File
  1057 00000F5F CD41                <1>     int 41h
  1058                              <1> 
  1059 00000F61 B43E                <1>     mov ah, 3eh ;Close File
  1060 00000F63 CD41                <1>     int 41h
  1061                              <1> 
  1062                              <1> 
  1063 00000F65 B43D                <1>     mov ah, 3dh ;Open File
  1064 00000F67 B002                <1>     mov al, RWAccess
  1065 00000F69 488D1564050000      <1>     lea rdx, tmpName3
  1066 00000F70 CD41                <1>     int 41h
  1067 00000F72 66890566050000      <1>     mov word [hdl], ax
  1068                              <1> 
  1069 00000F79 B90B000000          <1>     mov ecx, testString1L
  1070 00000F7E 488D15CF030000      <1>     lea rdx, tmpDTA
  1071 00000F85 668B1D53050000      <1>     mov bx, word [hdl]  ;Get the handle in bx
  1072 00000F8C B43F                <1>     mov ah, 3fh ;Read File
  1073 00000F8E CD41                <1>     int 41h
  1074                              <1> 
  1075                              <1> 
  1076 00000F90 B918000000          <1>     mov ecx, testString2L
  1077 00000F95 488D15B8040000      <1>     lea rdx, tmpBuf2
  1078 00000F9C 668B1D3C050000      <1>     mov bx, word [hdl]  ;Get the handle in bx
  1079 00000FA3 B43F                <1>     mov ah, 3fh ;Read File
  1080 00000FA5 CD41                <1>     int 41h
  1081                              <1> 
  1082 00000FA7 B460                <1>     mov ah, 60h ;Truename
  1083 00000FA9 488D358D030000      <1>     lea rsi, tmpName2
  1084 00000FB0 488D3D9D040000      <1>     lea rdi, tmpBuf2
  1085 00000FB7 CD41                <1>     int 41h
  1086                              <1> 
  1087 00000FB9 B439                <1>     mov ah, 39h ;MKDIR
  1088 00000FBB 488D1542050000      <1>     lea rdx, testDir
  1089 00000FC2 CD41                <1>     int 41h
  1090                              <1> 
  1091 00000FC4 B40D                <1>     mov ah, 0Dh ;Flush disk
  1092 00000FC6 CD41                <1>     int 41h
  1093                              <1> 
  1094 00000FC8 B43A                <1>     mov ah, 3Ah ;RMDIR
  1095 00000FCA 488D1533050000      <1>     lea rdx, testDir
  1096 00000FD1 CD41                <1>     int 41h
  1097                              <1> 
  1098 00000FD3 B40D                <1>     mov ah, 0Dh ;Flush Disk
  1099 00000FD5 CD41                <1>     int 41h
  1100                              <1> l11:
  1101 00000FD7 B402                <1>     mov ah, 02h
  1102 00000FD9 B20A                <1>     mov dl, 0Ah ;Print Char
  1103 00000FDB CD41                <1>     int 41h
  1104                              <1> 
  1105 00000FDD B409                <1>     mov ah, 09h ;Print String
  1106 00000FDF 488D1516000000      <1>     lea rdx, .str
  1107 00000FE6 CD41                <1>     int 41h
  1108                              <1> 
  1109                              <1>     ;lea rdx, tmpBuffer
  1110                              <1>     ;mov ah, 0Ah  ;Buffered input
  1111 00000FE8 B980000000          <1>     mov ecx, 80h
  1112 00000FED 488D15E0030000      <1>     lea rdx, tmpBuffer
  1113 00000FF4 31DB                <1>     xor ebx, ebx
  1114 00000FF6 B43F                <1>     mov ah, 3fh
  1115 00000FF8 CD41                <1>     int 41h
  1116 00000FFA EBDB                <1>     jmp short l11
  1117 00000FFC 413E24              <1> .str: db "A>$"
  1118                              <1> ;--------------------------------
  1119                              <1> ;       PROCS FOR SYSINIT       :
  1120                              <1> ;--------------------------------
  1121                              <1> adjustDrvHdr:
  1122                              <1> ;Input: rsi = Effective address of driver in DOS segment
  1123                              <1> ;       rbp = Ptr to the start of the DOS segment
  1124                              <1> ;Output: rsi = EA of next header in DOS segment
  1125 00000FFF 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
  1126 00001003 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
  1127 00001007 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
  1128 0000100E 740A                <1>     je .exit
  1129 00001010 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
  1130 00001013 4881C622000000      <1>     add rsi, drvHdr_size
  1131                              <1> .exit:
  1132 0000101A C3                  <1>     ret
  1133                              <1> errorInit:
  1134                              <1> ;If a critical error occurs during sysinit, fail through here
  1135                              <1> ;Int 42h, 43h and 44h point here during sysinit
  1136 0000101B 488D2D49000000      <1>     lea rbp, hltmsg
  1137 00001022 B804130000          <1>     mov eax, 1304h
  1138 00001027 CD30                <1>     int 30h
  1139                              <1>     ;cli ;Clear interrupts
  1140                              <1>     ;mov al, -1
  1141                              <1>     ;mov dx, 0A1h    ;PIC2 data
  1142                              <1>     ;out dx, al      ;Mask all lines
  1143                              <1>     ;mov dx, 21h     ;PIC1 data
  1144                              <1>     ;out dx, al      ;Mask all lines
  1145                              <1> .ei0:
  1146 00001029 F4                  <1>     hlt
  1147 0000102A F390                <1>     pause
  1148 0000102C EBFB                <1>     jmp short .ei0
  1149                              <1> noCmdCom:
  1150 0000102E 488D1567000000      <1>     lea rdx, badCom
  1151 00001035 B409                <1>     mov ah, 09h
  1152 00001037 CD41                <1>     int 41h
  1153 00001039 EBEE                <1>     jmp short errorInit.ei0
  1154                              <1> ;--------------------------------
  1155                              <1> ;       DATA FOR SYSINIT        :
  1156                              <1> ;--------------------------------
  1157 0000103B 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
  1157 00001044 5343502F444F532E2E- <1>
  1157 0000104D 2E0A0D24            <1>
  1158 00001051 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
  1158 0000105A 6C6F636174696F6E20- <1>
  1158 00001063 4572726F720A0D00    <1>
  1159 0000106B 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
  1159 00001074 7469616C6973696E67- <1>
  1159 0000107D 20534350444F532E53- <1>
  1159 00001086 59532E205379737465- <1>
  1159 0000108F 6D2068616C74696E67- <1>
  1159 00001098 2E2E2E00            <1>
  1160 0000109C 426164206F72206D69- <1> badCom  db "Bad or missing Command interpreter",0Ah,0Dh,"$"
  1160 000010A5 7373696E6720436F6D- <1>
  1160 000010AE 6D616E6420696E7465- <1>
  1160 000010B7 727072657465720A0D- <1>
  1160 000010C0 24                  <1>
  1161 000010C1 434F4E00            <1> conName db "CON",0
  1162 000010C5 41555800            <1> auxName db "AUX",0
  1163 000010C9 50524E00            <1> prnName db "PRN",0
  1164                              <1> 
  1165 000010CD 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
  1165 000010D6 5300                <1>
  1166                              <1> 
  1167                              <1> intData:
  1168 000010D8 [7542000000000000]  <1>     dq terminateProcess ;Int 40h
  1169 000010E0 [F852000000000000]  <1>     dq functionDispatch ;Int 41h
  1170 000010E8 [1B10000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
  1171 000010F0 [5054000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
  1172 000010F8 [334C000000000000]  <1>     dq dosDefCritErrHdlr 
  1173 00001100 [034D000000000000]  <1>     dq absDiskRead      ;Int 45h
  1174 00001108 [E44C000000000000]  <1>     dq absDiskWrite     ;Int 46h
  1175 00001110 [7C42000000000000]  <1>     dq terminateRes     ;Int 47h
  1176 00001118 [5054000000000000]  <1>     dq defaultIretq     ;Int 48h
  1177 00001120 [5054000000000000]  <1>     dq defaultIretq     ;Int 49h
  1178 00001128 [5054000000000000]  <1>     dq defaultIretq     ;Int 4Ah
  1179 00001130 [5054000000000000]  <1>     dq defaultIretq     ;Int 4Bh
  1180 00001138 [5054000000000000]  <1>     dq defaultIretq     ;Int 4Ch
  1181 00001140 [5054000000000000]  <1>     dq defaultIretq     ;Int 4Dh
  1182 00001148 [5054000000000000]  <1>     dq defaultIretq     ;Int 4Eh
  1183 00001150 [F958000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
  1184                              <1> nData:
  1185 00001158 [BF5B000000000000]  <1>     dq conHdr
  1186 00001160 0480                <1>     dw 08004h
  1187 00001162 [675D000000000000]  <1>     dq nulStrat
  1188 0000116A [6D5D000000000000]  <1>     dq nulIntr
  1189 00001172 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1190                              <1> 
  1191                              <1> diskInit:
  1192                              <1>     ;We create a function to deal with BPB parsing etc
  1193                              <1>     ;Start with the first primary partition on each hard disk (until max)
  1194                              <1>     ;   They dont have to be bootable
  1195                              <1>     ;Then go back and look for other partitions partitions. 
  1196                              <1>     ;   Add each other primary or logical ptn (until max)
  1197                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
  1198                              <1>     ;Use r8 as device counter
  1199 0000117A 488DBD[6D650000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
  1200 00001181 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
  1200 00001189 00                  <1>
  1201 0000118A 0F84CA000000        <1>     jz .remInit ;No? Go to removables
  1202 00001190 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
  1202 00001199 00                  <1>
  1203 0000119A B280                <1>     mov dl, 80h ;Start with HDD 0
  1204                              <1> .primary:
  1205 0000119C 64803C25[6FC00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1205 000011A4 03                  <1>
  1206 000011A5 0F84AF000000        <1>     je .remInit
  1207 000011AB 31C9                <1>     xor ecx, ecx    ;Sector 0
  1208 000011AD E875010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
  1209 000011B2 0F828D000000        <1>     jc .primaryEpilog
  1210                              <1>     ;Here, check MBR or BPB
  1211 000011B8 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
  1212 000011C1 0F857E000000        <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
  1213                              <1>     ;Now check if BPB or MBR
  1214 000011C7 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1215 000011C9 8A6302              <1>     mov ah, byte [rbx + 2]
  1216 000011CC 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1217 000011D0 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
  1218                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
  1219                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
  1220 000011D2 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
  1221 000011D9 B104                <1>     mov cl, 4
  1222                              <1> .checkPrimary:
  1223 000011DB 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
  1224 000011DE 3C01                <1>     cmp al, 01
  1225 000011E0 7421                <1>     je .primaryFound
  1226 000011E2 3C04                <1>     cmp al, 04
  1227 000011E4 741D                <1>     je .primaryFound
  1228 000011E6 3C06                <1>     cmp al, 06
  1229 000011E8 7419                <1>     je .primaryFound
  1230 000011EA 3C0B                <1>     cmp al, 0Bh
  1231 000011EC 7415                <1>     je .primaryFound
  1232 000011EE 3C0C                <1>     cmp al, 0Ch
  1233 000011F0 7411                <1>     je .primaryFound
  1234 000011F2 3C0E                <1>     cmp al, 0Eh
  1235 000011F4 740D                <1>     je .primaryFound
  1236 000011F6 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1237 000011FD FEC9                <1>     dec cl
  1238 000011FF 7444                <1>     jz .primaryEpilog
  1239 00001201 EBD8                <1>     jmp short .checkPrimary
  1240                              <1> .primaryFound:
  1241                              <1>     ;Copy the first sector of this partition into memory
  1242 00001203 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1243 00001206 E81C010000          <1>     call .initReadSector
  1244 0000120B 7238                <1>     jc .primaryEpilog
  1245                              <1>     ;Now verify this is a BPB
  1246 0000120D 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1247 0000120F 8A6302              <1>     mov ah, byte [rbx + 2]
  1248 00001212 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1249 00001216 752D                <1>     jne .primaryEpilog   ;If not, skip
  1250                              <1>     ;Now copy data to internal tables
  1251 00001218 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1252 0000121B B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1253 00001220 57                  <1>     push rdi
  1254 00001221 F348A5              <1>     rep movsq   ;Copy the BPB
  1255 00001224 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1256                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1257 00001225 4A8D9C05[3B650000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1258                              <1>     ;Add device count to rbx to point to correct entry
  1259 0000122D 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1260 0000122F 4A8D9CC5[45650000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1261 00001237 488933              <1>     mov qword [rbx], rsi
  1262 0000123A 49FFC0              <1>     inc r8  ;Goto next logical drive
  1263 0000123D 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1264                              <1> .primaryEpilog:
  1265 00001245 FEC2                <1>     inc dl  ;Goto next BIOS drive
  1266 00001247 88D6                <1>     mov dh, dl
  1267 00001249 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1268 0000124C 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1269 00001254 0F8542FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1270                              <1> .extended:
  1271                              <1> ;We have gone through all the devices once
  1272                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1273                              <1>     ;je .remInit ;If yes, get removable devices
  1274                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1275                              <1>     ;xor ecx, ecx    ;Get MBR back
  1276                              <1>     ;call .initReadSector
  1277                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1278                              <1> .remInit:
  1279                              <1> ;Start by linking the default BPB's in the pointers table in the event that
  1280                              <1> ; for some reason the removable drives stop working or dont exist.
  1281                              <1> ;This forces the hard drives to start at C:
  1282 0000125A 53                  <1>     push rbx
  1283 0000125B 488D9D[6D650000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBblks] ;Get default drive A block ptr
  1284 00001262 48899D[45650000]    <1>     mov qword [rbp + msdDriver.msdBPBTbl], rbx  ;Store in ptrs table
  1285 00001269 4881C378000000      <1>     add rbx, bpbEx_size ;Goto next ptr
  1286 00001270 48899D[4D650000]    <1>     mov qword [rbp + msdDriver.msdBPBTbl + 8], rbx  ;Store next pointer
  1287 00001277 5B                  <1>     pop rbx
  1288                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1289 00001278 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1290 0000127B 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1291 0000127D 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1292                              <1>     ;rdi points to the space for the subsequent bpb's
  1293 00001280 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 0  ;Just skip removable init if no rem drives
  1293 00001288 00                  <1>
  1294 00001289 750A                <1>     jnz .removables
  1295 0000128B 64800425[6FC00300]- <1>     add byte fs:[numPhysVol], 2 ;Pretend we have two more drives (A: and B:)
  1295 00001293 02                  <1>
  1296 00001294 C3                  <1>     ret ;and return!
  1297                              <1> .removables:
  1298 00001295 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1299 00001297 E88B000000          <1>     call .initReadSector
  1300 0000129C 7238                <1>     jc .removableEpilogue   ;Goto next device
  1301                              <1>     ;Now verify this is a BPB
  1302 0000129E 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1303 000012A0 8A6302              <1>     mov ah, byte [rbx + 2]
  1304 000012A3 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1305 000012A7 752D                <1>     jne .removableEpilogue   ;If not, skip
  1306                              <1>     ;Now copy data to internal tables
  1307 000012A9 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1308 000012AC B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1309 000012B1 57                  <1>     push rdi
  1310 000012B2 F348A5              <1>     rep movsq   ;Copy the BPB
  1311 000012B5 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1312                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1313 000012B6 4A8D9C05[3B650000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1314                              <1>     ;Add device count to rbx to point to correct entry
  1315 000012BE 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1316 000012C0 4A8D9CC5[45650000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1317 000012C8 488933              <1>     mov qword [rbx], rsi
  1318 000012CB 49FFC0              <1>     inc r8  ;Goto next logical drive
  1319 000012CE 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1320                              <1> .removableEpilogue:
  1321 000012D6 FEC2                <1>     inc dl  ;Goto next BIOS device now
  1322 000012D8 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1323 000012E0 7412                <1>     je .end
  1324 000012E2 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1325 000012E9 7403                <1>     je .re0
  1326 000012EB 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1327                              <1> .re0:
  1328 000012EE 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1329 000012F2 72A1                <1>     jb .removables
  1330                              <1> .end:
  1331 000012F4 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1331 000012FC 01                  <1>
  1332 000012FD 7401                <1>     je .singleRemDev
  1333 000012FF C3                  <1>     ret
  1334                              <1> .singleRemDev:
  1335                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1336 00001300 488D9D[3B650000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1337 00001307 8A95[3B650000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1338 0000130D 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1339 00001310 488D9D[45650000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1340 00001317 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1341 0000131A 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1342 0000131E 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1343 00001326 C3                  <1>     ret
  1344                              <1> .initReadSector:
  1345                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1346 00001327 B482                <1>     mov ah, 82h ;Read
  1347 00001329 B001                <1>     mov al, 1   ;One sector
  1348 0000132B 488D9D[10030000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1349 00001332 CD33                <1>     int 33h
  1350 00001334 C3                  <1>     ret
  1351 00001335 16                  <1> tmpAttr     db dirInclusive ;Search for all files
  1352 00001336 7363702A2E2A00      <1> tmpName     db "scp*.*",0
  1353 0000133D 2F746573742F746573- <1> tmpName2    db "/test/test2/../another",0
  1353 00001346 74322F2E2E2F616E6F- <1>
  1353 0000134F 7468657200          <1>
  1354 00001354 000000000000000000- <1> tmpDTA      db 80h dup 00h
  1354 0000135D 000000000000000000- <1>
  1354 00001366 000000000000000000- <1>
  1354 0000136F 000000000000000000- <1>
  1354 00001378 000000000000000000- <1>
  1354 00001381 000000000000000000- <1>
  1354 0000138A 000000000000000000- <1>
  1354 00001393 000000000000000000- <1>
  1354 0000139C 000000000000000000- <1>
  1354 000013A5 000000000000000000- <1>
  1354 000013AE 000000000000000000- <1>
  1354 000013B7 000000000000000000- <1>
  1354 000013C0 000000000000000000- <1>
  1354 000013C9 000000000000000000- <1>
  1354 000013D2 0000                <1>
  1355 000013D4 500000000000000000- <1> tmpBuffer   db 80, 0, 126 dup 00h 
  1355 000013DD 000000000000000000- <1>
  1355 000013E6 000000000000000000- <1>
  1355 000013EF 000000000000000000- <1>
  1355 000013F8 000000000000000000- <1>
  1355 00001401 000000000000000000- <1>
  1355 0000140A 000000000000000000- <1>
  1355 00001413 000000000000000000- <1>
  1355 0000141C 000000000000000000- <1>
  1355 00001425 000000000000000000- <1>
  1355 0000142E 000000000000000000- <1>
  1355 00001437 000000000000000000- <1>
  1355 00001440 000000000000000000- <1>
  1355 00001449 000000000000000000- <1>
  1355 00001452 0000                <1>
  1356 00001454 000000000000000000- <1> tmpBuf2     db 80h dup 00h
  1356 0000145D 000000000000000000- <1>
  1356 00001466 000000000000000000- <1>
  1356 0000146F 000000000000000000- <1>
  1356 00001478 000000000000000000- <1>
  1356 00001481 000000000000000000- <1>
  1356 0000148A 000000000000000000- <1>
  1356 00001493 000000000000000000- <1>
  1356 0000149C 000000000000000000- <1>
  1356 000014A5 000000000000000000- <1>
  1356 000014AE 000000000000000000- <1>
  1356 000014B7 000000000000000000- <1>
  1356 000014C0 000000000000000000- <1>
  1356 000014C9 000000000000000000- <1>
  1356 000014D2 0000                <1>
  1357                              <1> 
  1358                              <1> 
  1359 000014D4 6D7966696C652E7473- <1> tmpName3    db "myfile.tst",0
  1359 000014DD 7400                <1>
  1360 000014DF 0000                <1> hdl dw 0
  1361 000014E1 546573742053747269- <1> testString1  db "Test String"
  1361 000014EA 6E67                <1>
  1362                              <1> testString1L equ $ - testString1
  1363 000014EC 204D6F726520537472- <1> testString2  db " More String, Less Space"
  1363 000014F5 696E672C204C657373- <1>
  1363 000014FE 205370616365        <1>
  1364                              <1> testString2L equ $ - testString2
  1365 00001504 7465737464697200    <1> testDir db "testdir",0
    15                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    16                                  %include "./Source/BSS/dosSeg.asm"
    17                              <1> ;This file contains the main DOS data segment
    18                              <1> dosAPT: ;Additional Page tables
    19 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    20                              <1> dosDataArea:
    21 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    22 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    23 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    24 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    25 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    26 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    27 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    28 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    29                              <1> ;Above is the system stats
    30                              <1> ;Below is the DOS vars
    31 0003C023 ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    32                              <1>     ;   A value of 0 means no chars buffered.
    33 0003C02B ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    34                              <1> sysVarsPtr:
    35 0003C033 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    36 0003C03B ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    37 0003C043 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    38                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    39 0003C04B ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    40                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    41 0003C053 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    42 0003C055 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    43 0003C05D ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    44 0003C065 ????????????????    <1>     fcbsHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    45 0003C06D ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    46                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    47 0003C06F ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    48 0003C070 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    49 0003C071 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    50 0003C072 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    51 0003C073 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    52                              <1> ;Additional internal variables
    53                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    54 0003C095 ??                  <1>     singleDrv   resb 1    ;Set if last drive accessed was drive B x
    55 0003C096 ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    56 0003C097 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    57                              <1>     ;PLEASE DO NOT TOUCH MAXHNDLS!!!
    58                              <1>     ;Share hook functions here
    59                              <1> ;Create SFT header and corresponding array of five default sft entries
    60 0003C099 <res Ah>            <1>     firstSftHeader  resb sfth_size
    61 0003C0A3 <res 4Fh>           <1>     firstSft    resb sft_size
    62 0003C0F2 <res 4Fh>           <1>     secondSft   resb sft_size
    63 0003C141 <res 4Fh>           <1>     thirdSft    resb sft_size
    64 0003C190 <res 4Fh>           <1>     fourthSft   resb sft_size
    65 0003C1DF <res 4Fh>           <1>     fifthSft    resb sft_size
    66                              <1> 
    67                              <1> ;Virtual CONsole Buffers
    68 0003C22E ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
    69                              <1>     ;Only incremented when CON device runs vCon
    70                              <1> vConBuf:    ;Proper buffer symbol
    71 0003C22F ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
    72 0003C230 <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
    73                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
    74 0003C2B0 <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
    75 0003C330 ??                  <1>     bufpad      resb 1     ;Used to pad with LF
    76                              <1> 
    77 0003C331 ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
    78 0003C332 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    79 0003C333 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
    80 0003C334 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
    81                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
    82                              <1> 
    83 0003C335 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    84                              <1> ;Server stuff. Default to all zeros (blank)
    85 0003C336 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
    86                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
    87 0003C337 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5D01h call
    88 0003C338 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5D01h) (set to SPC)    
    89                              <1> ;Swappable Data Area
    90 0003C348 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    91 0003C368 ??                  <1>                 resb 1  ;Alignment byte
    92                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    93 0003C369 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    94 0003C36A ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    95 0003C36B ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    96 0003C36C ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    97 0003C36D ????                <1>     errorExCde  resw 1  ;Extended Error Code
    98 0003C36F ??                  <1>     errorAction resb 1  ;Suggested action for error  
    99 0003C370 ??                  <1>     errorClass  resb 1  ;Error Class
   100 0003C371 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
   101 0003C379 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   102 0003C381 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   103                              <1> 
   104 0003C389 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   105 0003C391 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   106                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   107                              <1>     ;Lower byte: User Specified
   108 0003C393 ??                  <1>     currentDrv  resb 1  ;Default drive x
   109 0003C394 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   110                              <1> ;SDA, needs to be replaced between processes
   111                              <1> sdaMainSwap:
   112 0003C395 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   113 0003C39D ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   114 0003C3A5 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   115 0003C3A7 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   116 0003C3AF ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   117 0003C3B7 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   118 0003C3BF ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   119 0003C3C1 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   120 0003C3C9 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   121 0003C3CA ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   122 0003C3CB ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   123                              <1> 
   124 0003C3CC ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   125 0003C3D4 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   126 0003C3DC ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   127 0003C3E4 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   128 0003C3EC ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   129                              <1> ;The below flag tells DOS to print ^C in the termination function
   130 0003C3ED ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   131 0003C3EE ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   132                              <1> ;Time stuff
   133                              <1> ;Read the below two as a word
   134 0003C3EF ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   135 0003C3F0 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   136 0003C3F1 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   137 0003C3F2 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   138 0003C3F4 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   139                              <1> 
   140 0003C3F5 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   141 0003C3F6 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   142 0003C3F7 ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   143                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   144                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   145                              <1> ; without forcing to re-build the whole primary request block.
   146                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   147                              <1> ; with secondary char output going through the secondary header
   148                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   149                              <1> ; for output)
   150                              <1> ;ioReqPkt is the largest possible packet
   151 0003C3F8 <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   152 0003C422 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   153 0003C44C <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   154 0003C476 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   155                              <1> ;Swappable Buffers
   156 0003C477 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   157                              <1>     ;We add an additional byte to save ah too
   158 0003C47D ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   159 0003C47F <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   160 0003C4FF <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   161 0003C57F ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   162 0003C587 ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   163 0003C58F ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   164                              <1> ;Misc bookkeeping flags and vars
   165 0003C590 <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal searching block
   166 0003C5BB <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   167 0003C5DB <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   168 0003C5E7 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards for rename
   169 0003C5F3 ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   170 0003C5FB <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need tmp CDS
   171 0003C656 ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   172 0003C657 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   173 0003C658 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   174 0003C659 ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   175 0003C65A ??                  <1>     rwFlag      resb 1  ;00h=Read, -1=Write
   176 0003C65B ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   177 0003C65C ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   178                              <1> 
   179 0003C65D ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   180 0003C65E ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   181 0003C65F ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   182 0003C660 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlvl
   183 0003C661 ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   184 0003C662 ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   185 0003C663 ??                  <1>     workingDrv  resb 1  ;Working drive number, 0 based, from DPB
   186                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   187                              <1> workingDD:  ;Create a symbol for the working device driver too
   188 0003C664 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   189 0003C66C ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   190                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   191                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   192 0003C674 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   193 0003C67C ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   194 0003C684 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   195 0003C68C ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   196 0003C68E ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   197 0003C690 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   198                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   199                              <1> ; and 32 byte offset into the sector for directory
   200 0003C698 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   201                              <1> sectTfr:    ;Symbol to use this var to hold a counter on disk read/write ops 
   202                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   203 0003C6A0 ????                <1>     entry       resw 1  ;32 byte offset into a sector or #fats sectors/fat
   204                              <1> ;***************************************************|
   205                              <1> ; Needs to be set up before any file access         |
   206                              <1> ; These vars keep track of file access properties   |
   207                              <1> ;   and must be used only for such purposes.        |
   208                              <1> ;***************************************************|
   209 0003C6A2 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   210 0003C6A6 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   211                              <1> 
   212 0003C6AA ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   213 0003C6AE ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   214 0003C6AF ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   215                              <1> 
   216 0003C6B7 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   217 0003C6B9 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   218                              <1> ;***************************************************|
   219 0003C6BD ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   220 0003C6C1 ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   221 0003C6C5 ??                  <1>     fileGrowing resb 1  ;Flag to indicate the file is growing
   222 0003C6C6 ????????            <1>     bytesAppend resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   223 0003C6CA ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   224 0003C6CE ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   225                              <1> ;Directory stuff
   226 0003C6D2 ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   227 0003C6D6 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   228 0003C6DA ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   229 0003C6DC ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   230                              <1> ;Error DPB 
   231 0003C6E0 ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary  situations
   232 0003C6E8 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   233                              <1> ;Stacks and scratch SFT
   234 0003C6E9 <res 528h>          <1>     critStack   resq 165
   235 0003CC11 ????????????????    <1>     critStakTop resq 1
   236                              <1> 
   237 0003CC19 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   238                              <1> 
   239 0003CC68 <res 638h>          <1>     AuxStack    resq 199
   240 0003D2A0 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   241 0003D2A8 <res 638h>          <1>     DiskStack   resq 199
   242 0003D8E0 ????????????????    <1>     DiskStakTop resq 1
   243                              <1> 
   244 0003D8E8 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   245 0003D8E9 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls! 
   246                              <1> ;Putting this in SDA as multiple tasks can try to parse EXE's simultaneously
   247 0003D8EA <res 70h>           <1>     exeHdrSpace resb imageFileOptionalHeader_size   ;Use for parsing an EXE hdr
   248 0003D95A <res 28h>           <1>     sectHdr     resb imageSectionHdr_size   ;Use to load one sctn hdr at a time
   249                              <1>     sdaLen      equ     $ - sda 
   250                              <1>     sdaMSLen    equ     $ - sda
   251                              <1> 
   252                              <1> ;Additional variables NOT in the SDA
   253 0003D982 <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   254                              <1>     ;for saving the current header when quickly doing a second request
   255                              <1> 
   256 0003D9AC ??                  <1>     lastDiskNum resb 1  ;Last drive that operated
   257 0003D9AD ????                <1>     lastOpTime  resw 1  ;Packed Time of last successful disk operation
   258                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   259                              <1> inExtASCII:
   260 0003D9AF ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   261 0003D9B0 ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   262                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   263                              <1>     ; copy of the date/time record
   264                              <1> 
   265                              <1>     dSegLen     equ     $
    17                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    18                                  %define currSegVBase section.resSeg.vstart
    19                                  %include "./Source/Data/staticData.asm"
    20                              <1> 
    21                              <1> ;-----------------------------------:
    22                              <1> ;       Static Data Variables       :
    23                              <1> ;-----------------------------------:
    24 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    25 00000001 01                  <1> dosMinor    db 01h      ;.01
    26 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    26 0000000B 535953              <1>
    27 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    27 00000017 535953              <1>
    28                              <1> 
    29                              <1> ;-----------------------------------:
    30                              <1> ;        Static Data Tables         :
    31                              <1> ;-----------------------------------:
    32                              <1> ctryTbl:
    33                              <1> ;Country Table (defaulting to UK)
    34 0000001A 0100                <1> .dtfmt:     dw 1            ;Date time format (2 bytes)
    35                              <1>                             ;0 = month day year hh:mm:ss
    36                              <1>                             ;1 = day month year hh:mm:ss
    37                              <1>                             ;2 = year month day hh:mm:ss
    38 0000001C C2A300000000        <1> .curr:      db "£",0,0,0,0  ;ASCIIZ Currency symbol (5 chars)
    39 00000022 2C00                <1> .thouSep:   db ",",0        ;ASCIIZ Thousands separator
    40 00000024 2E00                <1> .dcmlSep:   db ".",0        ;ASCIIZ Decimal separator
    41 00000026 2D00                <1> .dateSep:   db "-",0        ;ASCIIZ Date separator
    42 00000028 3A00                <1> .timeSep:   db ":",0        ;ASCIIZ Time separator
    43 0000002A 00                  <1> .currFmt:   db 0            ;Currency Format
    44                              <1>                 ;0 = Symbol leads, without space
    45                              <1>                 ;1 = Symbol follows, without space
    46                              <1>                 ;2 = Symbol leads, one space
    47                              <1>                 ;3 = Symbol follows, one space
    48                              <1>                 ;4 = Symbol replace decimal separator
    49 0000002B 02                  <1> .digtdpt:   db 2 ;Number of digits after the decimal point
    50 0000002C 00                  <1> .timefmt:   db 0 ;Time format, Bit 0 = 0 => 12 hour clock, = 1 => 24 hour clock
    51 0000002D 0000000000000000    <1> .mapaddr:   dq 0 ;Case map address (0 is nulptr), needs fixing up
    52 00000035 2C00                <1> .dataSep:   db ",",0    ;Data list separator
    53 00000037 000000000000000000- <1> .resv:      db 0,0,0,0,0,0,0,0,0,0  ;Reserve 10 bytes
    53 00000040 00                  <1>
    54                              <1> 
    55                              <1> ;IO Char table
    56                              <1> ;This table has Request header length, command code and error flags
    57                              <1> ; as a packed DWORD entry
    58                              <1> ioRqCmdErrTbl:
    59                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    60                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    61 00000041 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    62 00000045 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    63 00000049 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    64 0000004D 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    65 00000051 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    66 00000055 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    67                              <1> 
    68                              <1> 
    69                              <1> 
    70                              <1> ;Keyboard vCon static data taht can be edited and replaced by a user if they
    71                              <1> ; wish to install their own custom logic.
    72 00000059 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    73 00000061 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    74 00000062 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    75                              <1> ;Extended ASCII keys with special meanings
    76 00000063 3B                  <1> extKeyTbl   db eF1
    77 00000064 8E26                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    78 00000066 3C                  <1>             db eF2
    79 00000067 8026                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    80 00000069 3D                  <1>             db eF3
    81 0000006A 8726                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    82 0000006C 3E                  <1>             db eF4
    83 0000006D BC26                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    84 0000006F 3F                  <1>             db eF5
    85 00000070 0127                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    86 00000072 40                  <1>             db eF6
    87 00000073 1727                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    88 00000075 41                  <1>             db eF7
    89 00000076 1E27                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    90 00000078 4B                  <1>             db eCursL
    91 00000079 E525                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    92 0000007B 4D                  <1>             db eCursR
    93 0000007C 8E26                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    94 0000007E 52                  <1>             db eIns
    95 0000007F 2927                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    96 00000081 53                  <1>             db eDel
    97 00000082 3027                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    98                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    99                              <1> 
   100                              <1> ;When counting the number of days, first compute the number of years since
   101                              <1> ; 1980 and your year. 
   102                              <1> ;Then, using the table below, find the number of leap years between 1980
   103                              <1> ; and (YourYear - 1). 
   104                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   105                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   106                              <1> ;
   107                              <1> ;Use the months table to get the number of days in a normal month as leap 
   108                              <1> ; years are added using the previous comment.
   109                              <1> 
   110                              <1> ;This table is the number of days in the month
   111                              <1> ;The function which updates the days in Feb writes the number to this table
   112                              <1> monthsTbl:  
   113 00000084 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   113 0000008D 1F1E1F              <1>
   114                              <1> 
   115                              <1> ;Error tables
   116                              <1> errXlatTbl:
   117                              <1> ;Each entry is n bytes long, defined as
   118                              <1> ; Byte 0      : DOS function number for which translation will occur
   119                              <1> ; Byte 1      : Length of the table entry - 2
   120                              <1> ; Bytes n - 3 : Acceptable Error codes
   121                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   122                              <1> ;The table is terminated with a single -1 byte
   123                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   124                              <1> ; only on entry to a disk function
   125 00000090 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   126 00000094 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   127 00000099 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   128 0000009F 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   129 000000A3 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   130 000000A9 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   131 000000B0 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   132 000000B3 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   133 000000B7 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   134 000000BB 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   135 000000C0 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   136 000000C4 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   137 000000CA 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   138 000000D1 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   139 000000D5 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   140 000000D9 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   141 000000DC 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   142 000000E0 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   143 000000E4 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   144 000000E9 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   145 000000F1 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   146 000000F3 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   147 000000F8 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   148 000000FB 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   149 00000101 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   150 00000105 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   151 00000108 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   152 0000010E 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   153 00000115 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   154 0000011B 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   155 0000011F 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   156 00000123 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   157 00000126 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   158 0000012B FF                  <1>     db -1   ;End Of Table marker
   159                              <1> 
   160                              <1> 
   161                              <1> extErrTbl:
   162                              <1> ;This table contains the default values for how to respond
   163                              <1> ; to particular errors. Fields with -1 need to be filled in before
   164                              <1> ; setting variables using this table.
   165                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   166                              <1> ; Byte 0: Extended Error Code as a byte
   167                              <1> ; Byte 1: Error Class
   168                              <1> ; Byte 2: Error Suggested Action
   169                              <1> ; Byte 3: Error Locus
   170                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   171                              <1> ;
   172                              <1> ;Error 01: Invalid function number
   173 0000012C 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   174                              <1> ;Error 02: File not found
   175 00000130 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   176                              <1> ;Error 03: Path not found
   177 00000134 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   178                              <1> ;Error 04: Too many open handles, and no handles are left
   179 00000138 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   180                              <1> ;Error 05: Access being denied
   181 0000013C 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   182                              <1> ;Error 06: Invalid File handle being provided
   183 00000140 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   184                              <1> ;Error 07: MCB chain destroyed
   185 00000144 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   186                              <1> ;Error 08: No Memory remaining
   187 00000148 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   188                              <1> ;Error 09: Invalid MCB block Address
   189 0000014C 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   190                              <1> ;Error 0A: Bad Environment block
   191 00000150 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   192                              <1> ;Error 0B: Data provided in a bad format
   193 00000154 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   194                              <1> ;Error 0C: Access Code Invalid
   195 00000158 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   196                              <1> ;Error 0D: Error due to Invalid Data provided
   197 0000015C 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   198                              <1> ;Error 0F: Error due to a bad drive letter being provided
   199 00000160 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   200                              <1> ;Error 10: Error due to attempting to delete the CWD
   201 00000164 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   202                              <1> ;Error 11: Error due to a unknown device being used
   203 00000168 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   204                              <1> ;Error 12: No more file handles available
   205 0000016C 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   206                              <1> ;Error 50: Network request not supported
   207 00000170 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   208                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   209 00000174 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   210                              <1> ;Error 21: File Locking Violation
   211 00000178 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   212                              <1> ;Error 54: Too many levels of redirection error
   213 0000017C 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   214                              <1> ;Error 56: Bad resource password provided
   215 00000180 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   216                              <1> ;Error 52: Directory already exists
   217 00000184 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   218                              <1> ;Error 32: Network request not supported by DOS
   219 00000188 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   220                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   221 0000018C 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   222                              <1> ;Error 57: Bad parameter in request
   223 00000190 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   224                              <1> ;Error 53: Fail was returned from Int 44h
   225 00000194 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   226                              <1> ;Error 24: Sharing Buffer Full
   227 00000198 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   228 0000019C FFFFFFFF            <1>     dd -1   ;End of table signature
   229                              <1> 
   230                              <1> badDirNameChar: ;This table needs to be replaced in other Codepages (i.e. Kanji)
   231 000001A0 000102030405060708- <1>     db 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
   231 000001A9 090A0B0C0D0E0F      <1>
   232 000001B0 101112131415161718- <1>     db 10h,11h,12h,13h,14h,15h,16h,17h,18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
   232 000001B9 191A1B1C1D1E1F      <1>
   233 000001C0 222A2B2C2E2F3A3B3C- <1>     db '"', "*", "+",",",".","/",":",";","<","=",">","?","[","\","]","|"
   233 000001C9 3D3E3F5B5C5D7C      <1>
   234                              <1> badDirNameCharL equ $ - badDirNameChar
   235                              <1> ;The chars * ? . \ / need to always be handled separately
   236                              <1> 
   237                              <1> extAsciiTbl:    ;This table needs to be replaced in other Codepages
   238 000001D0 809A45418E418F8045- <1>     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 45h, 45h, 45h, 49h, 49h, 49h
   238 000001D9 4545494949          <1>
   239 000001DE 8E8F9092924F994F55- <1>     db 8Eh, 8Fh, 90h, 92h, 92h, 4Fh, 99h, 4Fh, 55h, 55h, 59h, 99h, 9Ah, 9Bh
   239 000001E7 5559999A9B          <1>
   240 000001EC 9C9D9E9F41494F55A5- <1>     db 9Ch, 9Dh, 9Eh, 9Fh, 41h, 49h, 4Fh, 55h, 0A5h, 0A5h, 0A6h, 0A7h, 0A8h
   240 000001F5 A5A6A7A8            <1>
   241 000001F9 A9AAABACADAEAFB0B1- <1>     db 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h
   241 00000202 B2B3B4              <1>
   242 00000205 B5B6B7B8B9BABBBCBD- <1>     db 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h 
   242 0000020E BEBFC0              <1>
   243 00000211 C1C2C3C4C5C6C7C8C9- <1>     db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh
   243 0000021A CACBCC              <1>
   244 0000021D CDCECFD0D1D2D3D4D5- <1>     db 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h 
   244 00000226 D6D7D8              <1>
   245 00000229 D9DADBDCDDDEDFE0E1- <1>     db 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
   245 00000232 E2E3E4              <1>
   246 00000235 E5E6E7E8E9EAEBECED- <1>     db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h
   246 0000023E EEEFF0              <1>
   247 00000241 F1F2F3F4F5F6F7F8F9- <1>     db 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh
   247 0000024A FAFBFC              <1>
   248 0000024D FDFEFF              <1>     db 0FDh, 0FEh, 0FFh
   249                              <1> 
   250                              <1> extAsciiSig:   ;This table needs to replaces in other Codepages
   251 00000250 F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F0h, 0F6h, 0F6h 
   251 00000259 F0F6F6              <1>
   252 0000025C F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h
   252 00000265 F6F6F6              <1>
   253 00000268 F6F6F6F6F6F6F6F6F8- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F8h, 0FFh, 0F6h, 0FFh 
   253 00000271 FFF6FF              <1>
   254 00000274 FFFFFFFFFFFFFFF4F4- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h 
   254 0000027D FFFEF6              <1>
   255 00000280 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h 
   255 00000289 FFF4F4              <1>
   256 0000028C F4F4F4FFFFFFFFFFFF- <1>     db 0F4h, 0F4h, 0F4h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   256 00000295 FFFFFF              <1>
   257 00000298 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   257 000002A1 FFFFFF              <1>
   258 000002A4 FFFFFFFFFFFFFFF6F6- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh 
   258 000002AD F6FFFF              <1>
   259 000002B0 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   259 000002B9 FFFFFF              <1>
   260 000002BC FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   260 000002C5 FFFFFF              <1>
   261 000002C8 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   
    20                                  %include "./Source/Data/dispTbl.asm"
    21                              <1> ;Kernel Dispatch Function Table
    22                              <1> 
    23                              <1> kDispTbl:
    24 000002D0 C340                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    25 000002D2 141E                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    26 000002D4 211E                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    27 000002D6 DE1E                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    28 000002D8 071F                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    29 000002DA 0F1F                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    30 000002DC 271F                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    31 000002DE 5A1F                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    32 000002E0 7F1F                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    33 000002E2 DE1F                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    34 000002E4 9122                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    35 000002E6 ED1F                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    36 000002E8 F91F                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    37 000002EA F952                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    38 000002EC 2B53                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    39 000002EE CD27                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    40 000002F0 CD27                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    41 000002F2 CD27                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    42 000002F4 CD27                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    43 000002F6 CD27                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    44 000002F8 CD27                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    45 000002FA CD27                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    46 000002FC CD27                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    47 000002FE CD27                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    48 00000300 B455                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    49 00000302 4453                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    50 00000304 CE27                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    51 00000306 4B53                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    52 00000308 4D53                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    53 0000030A B455                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    54 0000030C B455                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    55 0000030E EB53                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    56 00000310 B455                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    57 00000312 E127                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    58 00000314 E127                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    59 00000316 E127                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    60 00000318 E127                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    61 0000031A 9653                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    62 0000031C D23F                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    63 0000031E E127                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    64 00000320 E127                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    65 00000322 E127                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    66 00000324 0725                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    67 00000326 2E25                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    68 00000328 3425                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    69 0000032A 5525                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    70 0000032C C853                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    71 0000032E E227                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    72 00000330 D653                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    73 00000332 9540                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    74 00000334 ED53                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    75 00000336 AE52                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    76 00000338 2554                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    77 0000033A 3654                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    78 0000033C 4754                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    79 0000033E C147                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    80 00000340 EA47                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    81 00000342 ED15                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    82 00000344 2418                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    83 00000346 EA19                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    84 00000348 F527                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    85 0000034A 0628                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    86 0000034C 1429                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    87 0000034E 5329                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    88 00000350 8E29                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    89 00000352 9A29                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    90 00000354 6C2A                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    91 00000356 DB2A                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    92 00000358 273A                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    93 0000035A C52B                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    94 0000035C 032C                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    95 0000035E B91A                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    96 00000360 593A                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    97 00000362 833C                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    98 00000364 8B3D                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    99 00000366 0A42                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
   100 00000368 C540                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
   101 0000036A 8B54                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
   102 0000036C 232C                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   103 0000036E 8C2C                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   104 00000370 DC52                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   105 00000372 E552                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   106 00000374 9954                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   107 00000376 AA54                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   108 00000378 8455                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   109 0000037A BF3F                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   110 0000037C BC2C                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   111 0000037E F21A                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   112 00000380 1E3F                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   113 00000382 8B55                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   114 00000384 D12C                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   115 00000386 D12C                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   116 00000388 D12C                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   117 0000038A B555                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   118 0000038C 2856                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   119 0000038E 2856                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   120 00000390 F21A                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   121 00000392 B455                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   122 00000394 EE52                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   123 00000396 B455                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   124 00000398 F752                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   125 0000039A EA47                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   126 0000039C EA47                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   127 0000039E D62C                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   128 000003A0 DB2C                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   129 000003A2 B455                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   130                              <1> kDispTblL  equ $ - kDispTbl 
   131                              <1> 
   132                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   133 000003A4 7D55                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   134 000003A6 952F                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   135 000003A8 A54C                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   136 000003AA 8055                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   137 000003AC CD4D                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   138                              <1> mDispTblL   equ     $ - mDispTbl
   139                              <1> 
   140                              <1> serverDispTbl:  ;Server Dispatch functions
   141 000003AE 01                  <1>     db 01h  ;Number of entries needs to be 0Bh, but for now, 01h
   142 000003AF F854                <1>     dw serverDispatch - serverDispTbl
    21                                  %include "./Source/Debug/debug.asm"
    22                              <1> ;This file contains debugging macros, procs and strings
    23                              <1> ; that we can use to output to COM1 bypassing the operating system.
    24                              <1> ;A serial terminal must be connected for this to work.
    25                              <1> 
    26                              <1> ;Variables and equates
    27                              <1> 
    28 000003B1 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    29                              <1> 
    30 000003B9 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    30 000003C2 39414243444546      <1>
    31                              <1> ;Common procedures
    32                              <1> debMakeDebuggerRespond:
    33 000003C9 488D2D26000000      <1>     lea rbp, .msg
    34 000003D0 E8AF000000          <1>     call debPrintNullString
    35 000003D5 B900001000          <1>     mov ecx, 100000h
    36                              <1> .waiting:
    37 000003DA FFC9                <1>     dec ecx
    38 000003DC 740C                <1>     jz .timeout
    39 000003DE B402                <1>     mov ah, 02h ;Blocking recieve!
    40 000003E0 31D2                <1>     xor edx, edx
    41 000003E2 CD34                <1>     int 34h
    42 000003E4 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    43 000003E7 75F1                <1>     jnz .waiting
    44 000003E9 C3                  <1>     ret
    45                              <1> .timeout:
    46 000003EA 488D2D47000000      <1>     lea rbp, .msg2
    47 000003F1 E98E000000          <1>     jmp debPrintNullString
    48 000003F6 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    48 000003FF 6B6579206174207468- <1>
    48 00000408 65207465726D696E61- <1>
    48 00000411 6C20746F20636F6E74- <1>
    48 0000041A 696E7565206F722077- <1>
    48 00000423 61697420666F722074- <1>
    48 0000042C 696D656F75742E2E2E- <1>
    48 00000435 0A0D00              <1>
    49 00000438 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    49 00000441 436F6E74696E75696E- <1>
    49 0000044A 672E2E2E0A0D00      <1>
    50                              <1> debPrintHexByte:
    51                              <1> ;Print the hex byte in al as a hex value
    52 00000451 52                  <1>     push rdx
    53 00000452 53                  <1>     push rbx
    54 00000453 50                  <1>     push rax
    55                              <1> 
    56 00000454 88C2                <1>     mov dl, al           ;save byte in dl
    57 00000456 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    58 0000045A 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    59 0000045F 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    60 00000463 E80C000000          <1>     call .wrchar
    61 00000468 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    62 0000046B E804000000          <1>     call .wrchar
    63                              <1> 
    64 00000470 58                  <1>     pop rax
    65 00000471 5B                  <1>     pop rbx
    66 00000472 5A                  <1>     pop rdx
    67 00000473 C3                  <1>     ret
    68                              <1> .wrchar:
    69 00000474 6687DB              <1>     xchg bx, bx
    70 00000477 488D1D3BFFFFFF      <1>     lea rbx, debascii
    71 0000047E D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    72 0000047F B401                <1>     mov ah, 01h
    73 00000481 CD34                <1>     int 34h  ;print char
    74 00000483 C3                  <1>     ret
    75                              <1> 
    76                              <1> debPrintNullString:
    77                              <1> ;Print a null terminated string pointed to by rbp
    78 00000484 56                  <1>     push rsi
    79 00000485 50                  <1>     push rax
    80 00000486 52                  <1>     push rdx
    81 00000487 31D2                <1>     xor edx, edx    ;Select COM1
    82 00000489 4889EE              <1>     mov rsi, rbp
    83                              <1> .getChar:
    84 0000048C AC                  <1>     lodsb
    85 0000048D 84C0                <1>     test al, al
    86 0000048F 7406                <1>     jz .exit
    87 00000491 B401                <1>     mov ah, 01h
    88 00000493 CD34                <1>     int 34h
    89 00000495 EBF5                <1>     jmp short .getChar
    90                              <1> .exit:
    91 00000497 5A                  <1>     pop rdx
    92 00000498 58                  <1>     pop rax
    93 00000499 5E                  <1>     pop rsi
    94 0000049A C3                  <1>     ret
    95                              <1> 
    96                              <1> debPrintDOSStack:
    97                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    98                              <1> ;Shows me which function, and parameters passed and returned
    99 0000049B 488D2DA5010000      <1>     lea rbp, .a1
   100 000004A2 E8DDFFFFFF          <1>     call debPrintNullString
   101 000004A7 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
   102 000004AE 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
   103 000004B5 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   104 000004B8 E802030000          <1>     call overlayQword
   105 000004BD 4881C316000000      <1>     add rbx, 22
   106 000004C4 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   107 000004C8 E8F2020000          <1>     call overlayQword
   108 000004CD 4881C316000000      <1>     add rbx, 22
   109 000004D4 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   110 000004D8 E8E2020000          <1>     call overlayQword
   111 000004DD 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   112 000004E4 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   113 000004E8 E8D2020000          <1>     call overlayQword
   114 000004ED 4881C316000000      <1>     add rbx, 22 
   115 000004F4 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   116 000004F8 E8C2020000          <1>     call overlayQword
   117 000004FD 4881C316000000      <1>     add rbx, 22
   118 00000504 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   119 00000508 E8B2020000          <1>     call overlayQword
   120 0000050D 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   121 00000514 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   122 00000518 E8A2020000          <1>     call overlayQword
   123 0000051D 4881C316000000      <1>     add rbx, 22
   124 00000524 488B05(DCC30300)    <1>     mov rax, qword [oldRSP]
   125 0000052B 480560000000        <1>     add rax, callerFrame_size
   126 00000531 E889020000          <1>     call overlayQword
   127 00000536 4881C316000000      <1>     add rbx, 22
   128 0000053D 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   129 00000541 E879020000          <1>     call overlayQword
   130 00000546 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   131 0000054D 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   132 00000551 E869020000          <1>     call overlayQword
   133 00000556 488D2D06000000      <1>     lea rbp, .a0
   134 0000055D E822FFFFFF          <1>     call debPrintNullString
   135 00000562 C3                  <1>     ret
   136                              <1> 
   137 00000563 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   137 0000056C 303030303030303030- <1>
   137 00000575 30306820            <1>
   138 00000579 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   138 00000582 303030303030303030- <1>
   138 0000058B 30306820            <1>
   139 0000058F 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   139 00000598 303030303030303030- <1>
   139 000005A1 30306820            <1>
   140 000005A5 0A0D                <1>     db  0Ah,0Dh
   141 000005A7 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   141 000005B0 303030303030303030- <1>
   141 000005B9 30306820            <1>
   142 000005BD 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   142 000005C6 303030303030303030- <1>
   142 000005CF 30306820            <1>
   143 000005D3 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   143 000005DC 303030303030303030- <1>
   143 000005E5 30306820            <1>
   144 000005E9 0A0D                <1>     db 0Ah, 0Dh
   145 000005EB 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   145 000005F4 303030303030303030- <1>
   145 000005FD 30306820            <1>
   146 00000601 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   146 0000060A 303030303030303030- <1>
   146 00000613 30306820            <1>
   147 00000617 7269703D3030303030- <1>     db "rip=0000000000000000h"
   147 00000620 303030303030303030- <1>
   147 00000629 303068              <1>
   148 0000062C 0A0D                <1>     db 0Ah, 0Dh
   149 0000062E 666C673D3030303030- <1>     db "flg=0000000000000000h "
   149 00000637 303030303030303030- <1>
   149 00000640 30306820            <1>
   150 00000644 0A0D00              <1>     db 0Ah,0Dh,0
   151 00000647 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   151 00000650 206F6E20496E742034- <1>
   151 00000659 316820737461636B0A- <1>
   151 00000662 0D00                <1>
   152                              <1> 
   153                              <1> debDPBptr:
   154                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   155 00000664 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   156 0000066B 4889E8              <1>     mov rax, rbp
   157 0000066E E84C010000          <1>     call overlayQword
   158 00000673 488D2D06000000      <1>     lea rbp, .dpb
   159 0000067A E805FEFFFF          <1>     call debPrintNullString
   160 0000067F C3                  <1>     ret
   161                              <1> .dpb: 
   162 00000680 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   162 00000689 203030303030303030- <1>
   162 00000692 303030303030303068- <1>
   162 0000069B 200A0D00            <1>
   163                              <1> 
   164                              <1> debDPBBPBptr:
   165                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   166                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   167 0000069F 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   168 000006A6 4889E8              <1>     mov rax, rbp
   169 000006A9 E811010000          <1>     call overlayQword
   170 000006AE 4881C321000000      <1>     add rbx, 33
   171 000006B5 4889F0              <1>     mov rax, rsi
   172 000006B8 E802010000          <1>     call overlayQword
   173 000006BD 488D2D06000000      <1>     lea rbp, .dpb
   174 000006C4 E8BBFDFFFF          <1>     call debPrintNullString
   175 000006C9 C3                  <1>     ret
   176                              <1> .dpb: 
   177 000006CA 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   177 000006D3 203030303030303030- <1>
   177 000006DC 303030303030303068- <1>
   177 000006E5 2066726F6D20        <1>
   178 000006EB 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   178 000006F4 203030303030303030- <1>
   178 000006FD 303030303030303068- <1>
   178 00000706 200A0D00            <1>
   179                              <1> overlayByte:
   180                              <1>     ;Called with number in rax
   181                              <1>     ;pointer to START of 16 byte space for number in rbx
   182 0000070A 53                  <1>     push rbx
   183 0000070B 51                  <1>     push rcx
   184 0000070C 52                  <1>     push rdx
   185 0000070D 55                  <1>     push rbp
   186 0000070E 4889DD              <1>     mov rbp, rbx
   187 00000711 4889C2              <1>     mov rdx, rax
   188 00000714 48FFC5              <1>     inc rbp ;Go to end of number
   189                              <1> 
   190 00000717 488D1D9BFCFFFF      <1>     lea rbx, debascii
   191 0000071E 88D0                <1>     mov al, dl  ;Go low nybble first
   192 00000720 240F                <1>     and al, 0Fh
   193 00000722 D7                  <1>     xlatb
   194 00000723 884500              <1>     mov byte [rbp], al
   195 00000726 48FFCD              <1>     dec rbp ;Go down one char pos
   196 00000729 88D0                <1>     mov al, dl
   197 0000072B 24F0                <1>     and al, 0F0h    ;Hi nybble next
   198 0000072D C0E804              <1>     shr al, 4   ;Shift hi nybble low
   199 00000730 D7                  <1>     xlatb
   200 00000731 884500              <1>     mov byte [rbp], al  ;Store char
   201                              <1> 
   202 00000734 5D                  <1>     pop rbp
   203 00000735 5A                  <1>     pop rdx
   204 00000736 59                  <1>     pop rcx
   205 00000737 5B                  <1>     pop rbx
   206 00000738 C3                  <1>     ret
   207                              <1> 
   208                              <1> overlayWord:
   209                              <1>     ;Called with number in rax
   210                              <1>     ;pointer to START of 16 byte space for number in rbx
   211 00000739 53                  <1>     push rbx
   212 0000073A 51                  <1>     push rcx
   213 0000073B 52                  <1>     push rdx
   214 0000073C 55                  <1>     push rbp
   215 0000073D 4889DD              <1>     mov rbp, rbx
   216 00000740 4889C2              <1>     mov rdx, rax
   217 00000743 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   218 0000074A B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   219 0000074F 488D1D63FCFFFF      <1>     lea rbx, debascii
   220                              <1> .ow0:
   221 00000756 88D0                <1>     mov al, dl  ;Go low nybble first
   222 00000758 240F                <1>     and al, 0Fh
   223 0000075A D7                  <1>     xlatb
   224 0000075B 884500              <1>     mov byte [rbp], al
   225 0000075E 48FFCD              <1>     dec rbp ;Go down one char pos
   226 00000761 88D0                <1>     mov al, dl
   227 00000763 24F0                <1>     and al, 0F0h    ;Hi nybble next
   228 00000765 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   229 00000768 D7                  <1>     xlatb
   230 00000769 884500              <1>     mov byte [rbp], al  ;Store char
   231 0000076C 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   232 00000770 48FFCD              <1>     dec rbp
   233 00000773 FFC9                <1>     dec ecx
   234 00000775 75DF                <1>     jnz .ow0
   235 00000777 5D                  <1>     pop rbp
   236 00000778 5A                  <1>     pop rdx
   237 00000779 59                  <1>     pop rcx
   238 0000077A 5B                  <1>     pop rbx
   239 0000077B C3                  <1>     ret
   240                              <1> 
   241                              <1> overlayDword:
   242                              <1>     ;Called with number in rax
   243                              <1>     ;pointer to START of 16 byte space for number in rbx
   244 0000077C 53                  <1>     push rbx
   245 0000077D 51                  <1>     push rcx
   246 0000077E 52                  <1>     push rdx
   247 0000077F 55                  <1>     push rbp
   248 00000780 4889DD              <1>     mov rbp, rbx
   249 00000783 4889C2              <1>     mov rdx, rax
   250 00000786 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   251 0000078D B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   252 00000792 488D1D20FCFFFF      <1>     lea rbx, debascii
   253                              <1> .od0:
   254 00000799 88D0                <1>     mov al, dl  ;Go low nybble first
   255 0000079B 240F                <1>     and al, 0Fh
   256 0000079D D7                  <1>     xlatb
   257 0000079E 884500              <1>     mov byte [rbp], al
   258 000007A1 48FFCD              <1>     dec rbp ;Go down one char pos
   259 000007A4 88D0                <1>     mov al, dl
   260 000007A6 24F0                <1>     and al, 0F0h    ;Hi nybble next
   261 000007A8 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   262 000007AB D7                  <1>     xlatb
   263 000007AC 884500              <1>     mov byte [rbp], al  ;Store char
   264 000007AF 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   265 000007B3 48FFCD              <1>     dec rbp
   266 000007B6 FFC9                <1>     dec ecx
   267 000007B8 75DF                <1>     jnz .od0
   268 000007BA 5D                  <1>     pop rbp
   269 000007BB 5A                  <1>     pop rdx
   270 000007BC 59                  <1>     pop rcx
   271 000007BD 5B                  <1>     pop rbx
   272 000007BE C3                  <1>     ret
   273                              <1> 
   274                              <1> overlayQword:
   275                              <1>     ;Called with number in rax
   276                              <1>     ;pointer to START of 16 byte space for number in rbx
   277 000007BF 53                  <1>     push rbx
   278 000007C0 51                  <1>     push rcx
   279 000007C1 52                  <1>     push rdx
   280 000007C2 55                  <1>     push rbp
   281 000007C3 4889DD              <1>     mov rbp, rbx
   282 000007C6 4889C2              <1>     mov rdx, rax
   283 000007C9 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   284 000007D0 B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   285 000007D5 488D1DDDFBFFFF      <1>     lea rbx, debascii
   286                              <1> .oq0:
   287 000007DC 88D0                <1>     mov al, dl  ;Go low nybble first
   288 000007DE 240F                <1>     and al, 0Fh
   289 000007E0 D7                  <1>     xlatb
   290 000007E1 884500              <1>     mov byte [rbp], al
   291 000007E4 48FFCD              <1>     dec rbp ;Go down one char pos
   292 000007E7 88D0                <1>     mov al, dl
   293 000007E9 24F0                <1>     and al, 0F0h    ;Hi nybble next
   294 000007EB C0E804              <1>     shr al, 4   ;Shift hi nybble low
   295 000007EE D7                  <1>     xlatb
   296 000007EF 884500              <1>     mov byte [rbp], al  ;Store char
   297 000007F2 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   298 000007F6 48FFCD              <1>     dec rbp
   299 000007F9 FFC9                <1>     dec ecx
   300 000007FB 75DF                <1>     jnz .oq0
   301 000007FD 5D                  <1>     pop rbp
   302 000007FE 5A                  <1>     pop rdx
   303 000007FF 59                  <1>     pop rcx
   304 00000800 5B                  <1>     pop rbx
   305 00000801 C3                  <1>     ret
   306                              <1> 
   307                              <1> debPrintFunctionName:
   308                              <1> ;Prints the DOS function that has been entered
   309                              <1> ;Entered with ah = Function number
   310 00000802 88E0                <1>     mov al, ah  ;Get dos function number
   311 00000804 488D1DAEFBFFFF      <1>     lea rbx, debascii
   312 0000080B 488D1535000000      <1>     lea rdx, .number
   313 00000812 24F0                <1>     and al, 0F0h    ;Get high nybble first
   314 00000814 C0E804              <1>     shr al, 4
   315 00000817 D7                  <1>     xlatb
   316 00000818 8802                <1>     mov byte [rdx], al
   317 0000081A 88E0                <1>     mov al, ah
   318 0000081C 240F                <1>     and al, 0Fh
   319 0000081E D7                  <1>     xlatb
   320 0000081F 884201              <1>     mov byte [rdx + 1], al
   321 00000822 488D2D06000000      <1>     lea rbp, .dosString
   322 00000829 E856FCFFFF          <1>     call debPrintNullString
   323 0000082E C3                  <1>     ret
   324 0000082F 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   324 00000838 696F6E20496E742034- <1>
   324 00000841 31682F41483D        <1>
   325 00000847 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   326                              <1> 
   327                              <1> ;----------------:
   328                              <1> ;!!!! MACROS !!!!:
   329                              <1> ;----------------:
   330                              <1> ;Insert macro when entering a debug block
   331                              <1> %macro debugEnterM 0
   332                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   333                              <1>     mov rsp, debStackTop
   334                              <1> ;Push all registers except rsp on stack
   335                              <1>     push rax
   336                              <1>     push rbx
   337                              <1>     push rcx
   338                              <1>     push rdx
   339                              <1>     push rsi
   340                              <1>     push rdi
   341                              <1>     push rbp
   342                              <1>     push r8
   343                              <1>     push r9
   344                              <1>     push r10
   345                              <1>     push r11
   346                              <1>     push r12
   347                              <1>     push r13
   348                              <1>     push r14
   349                              <1>     push r15
   350                              <1>     pushfq
   351                              <1> %endmacro
   352                              <1> ;Insert macro when exiting a debug block
   353                              <1> %macro debugExitM 0
   354                              <1>     popfq
   355                              <1>     pop r15
   356                              <1>     pop r14
   357                              <1>     pop r13
   358                              <1>     pop r12
   359                              <1>     pop r11
   360                              <1>     pop r10
   361                              <1>     pop r9
   362                              <1>     pop r8
   363                              <1>     pop rbp
   364                              <1>     pop rdi
   365                              <1>     pop rsi
   366                              <1>     pop rdx
   367                              <1>     pop rcx
   368                              <1>     pop rbx
   369                              <1>     pop rax
   370                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   371                              <1> %endmacro
    22                                  %include "./Source/Kernel/FAT/buffun.asm"
    23                              <1> ;This file contains FAT disk buffer related functions that
    24                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    25                              <1> ;----------------------------------------------------
    26                              <1> ;           Externally referenced functions         :
    27                              <1> ;----------------------------------------------------
    28                              <1> 
    29                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    30                              <1> ;Sets the buffer in rdi to the head of the chain
    31                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    32                              <1> ;Output: Buffer header set to the head of the chain
    33 0000084D 48393D(55C00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    34 00000854 7428                <1>     je .exit
    35 00000856 56                  <1>     push rsi
    36 00000857 488B35(55C00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    37                              <1> .mainlp:
    38 0000085E 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    39 00000861 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    40 00000863 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    41 00000866 EBF6                <1>     jmp short .mainlp
    42                              <1> .fnd:
    43 00000868 57                  <1>     push rdi
    44 00000869 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    45 0000086C 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    46 0000086F 5F                  <1>     pop rdi ;Get original buf back
    47 00000870 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    48 00000873 488735(55C00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    49 0000087A 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    50 0000087D 5E                  <1>     pop rsi
    51                              <1> .exit:
    52                              <1>     return
    18                              <2> %%_ret:
    19 0000087E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    53                              <1> 
    54                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h 
    55                              <1> ;1 External reference
    56                              <1> ;Input: rdi = Buffer header to flush and free
    57 0000087F E844000000          <1>     call flushBuffer
    58 00000884 7206                <1>     jc .exit
    59                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    60 00000886 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    61                              <1> .exit:
    62                              <1>     return
    18                              <2> %%_ret:
    19 0000088C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    65                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    66                              <1> ;Output: rdi = First disk buffer
    67 0000088D 488B3D(55C00300)    <1>     mov rdi, [bufHeadPtr]
    68 00000894 57                  <1>     push rdi
    69                              <1> .lp:
    70 00000895 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    71 00000899 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    72 0000089C 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    73 000008A3 75F0                <1>     jne .lp
    74 000008A5 5F                  <1>     pop rdi
    75                              <1>     return
    18                              <2> %%_ret:
    19 000008A6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    76                              <1> 
    77                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    78                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    79                              <1> ; second buffer in the chain in rdi
    80                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    81                              <1> ;Output: rdi = Second buffer in the chain
    82 000008A7 52                  <1>     push rdx
    83 000008A8 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    84 000008AB E89DFFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    85 000008B0 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    86 000008B3 5A                  <1>     pop rdx
    87                              <1>     return
    18                              <2> %%_ret:
    19 000008B4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    90                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    91                              <1> ;Input: rdi = Buffer header to start searching at
    92                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    93                              <1> ;        ZF=ZE => No unreferenced buffer found
    94 000008B5 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    95 000008B9 750C                <1>     jnz .exit
    96 000008BB 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    97 000008BE 4881FFFFFFFFFF      <1>     cmp rdi, -1
    98 000008C5 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    99                              <1> .exit:
   100                              <1>     return
    18                              <2> %%_ret:
    19 000008C7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   101                              <1> 
   102                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
   103                              <1> ;Flushes the data in a sector buffer to disk!
   104                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   105                              <1> ;Exit:  CF=NC : Success
   106                              <1> ;       CF=CY : Fail, terminate the request
   107                              <1> ;First make request to device driver
   108 000008C8 50                  <1>     push rax
   109 000008C9 53                  <1>     push rbx
   110 000008CA 51                  <1>     push rcx
   111 000008CB 52                  <1>     push rdx
   112 000008CC 56                  <1>     push rsi
   113 000008CD 55                  <1>     push rbp
   114                              <1> ;If the buffer is freed, skip flushing to avoid issues
   115 000008CE 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
   116 000008D2 7454                <1>     je .fbFreeExit  ;If it is free exit
   117 000008D4 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   118 000008D8 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   119                              <1> .fbRequest0:
   120 000008DA BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   121 000008DF F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   122 000008E3 7406                <1>     jz .fbRequest1
   123 000008E5 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   124                              <1> .fbRequest1:
   125 000008EB 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   126 000008EE B901000000          <1>     mov ecx, 1  ;One sector to copy
   127 000008F3 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   128 000008F7 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   129 000008FB 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   130 000008FF E8CB450000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   131 00000904 E857440000          <1>     call absDiskDriverCall    ;Make Driver Request
   132 00000909 7525                <1>     jnz .fbFail
   133                              <1> ;Now check if the buffer was a FAT, to write additional copies
   134 0000090B F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   135 0000090F 7417                <1>     jz .fbFreeExit  ;If not, exit
   136 00000911 FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   137 00000914 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   138 00000916 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   139 00000919 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   140 0000091D E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   141                              <1> .fbFreeExit1:
   142 00000922 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   143 00000925 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   144                              <1> .fbFreeExit:
   145 00000928 F8                  <1>     clc
   146                              <1> .fbExitFail:
   147 00000929 5D                  <1>     pop rbp
   148 0000092A 5E                  <1>     pop rsi
   149 0000092B 5A                  <1>     pop rdx
   150 0000092C 59                  <1>     pop rcx
   151 0000092D 5B                  <1>     pop rbx
   152 0000092E 58                  <1>     pop rax
   153                              <1>     return
    18                              <2> %%_ret:
    19 0000092F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   154                              <1> .fbFail:
   155                              <1> ;Enter here only if the request failed
   156 00000930 FFCE                <1>     dec esi
   157 00000932 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   158                              <1> ;Request failed thrice, critical error call
   159 00000934 C605(C9C30300)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   160 0000093B E87B410000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   161 00000940 3C01                <1>     cmp al, critRetry
   162 00000942 7496                <1>     je .fbRequest0
   163                              <1>     ;Else we fail (Ignore=Fail here)
   164 00000944 F9                  <1>     stc ;Set error flag to indicate fail
   165 00000945 E9DFFFFFFF          <1>     jmp .fbExitFail
   166                              <1> 
   167                              <1> testDirtyBufferForDrive:    ;External linkage
   168                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   169                              <1> ;Input: al = Drive number (0 based)
   170                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   171                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   172 0000094A 53                  <1>     push rbx
   173 0000094B 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   174                              <1> .tdbfdCheckBuffer:
   175 00000952 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   176 00000955 7509                <1>     jne .tdbfdGotoNextBuffer
   177 00000957 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   178 0000095B 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   179 0000095D F9                  <1>     stc ;Else dirty buffer found, set carry flag
   180                              <1> .tdbfdExit:
   181 0000095E 5B                  <1>     pop rbx
   182                              <1>     return
    18                              <2> %%_ret:
    19 0000095F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   183                              <1> .tdbfdGotoNextBuffer:
   184 00000960 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   185 00000963 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   186 0000096A 74F2                <1>     je .tdbfdExit
   187 0000096C EBE4                <1>     jmp short .tdbfdCheckBuffer
   188                              <1> 
   189                              <1> freeBuffersForDPB:
   190                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   191                              <1> ; to have a drive number of -1, thus freeing it
   192                              <1> ;Given DPB is in rbp
   193 0000096E 53                  <1>     push rbx
   194 0000096F 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   195                              <1> .i0:
   196 00000976 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   197 0000097A 7506                <1>     jne .i1 ;If no, skip freeing
   198 0000097C 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   199                              <1> .i1:
   200 00000982 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   201 00000985 4881FBFFFFFFFF      <1>     cmp rbx, -1
   202 0000098C 75E8                <1>     jne .i0
   203                              <1> .exit:
   204 0000098E 5B                  <1>     pop rbx
   205                              <1>     return
    18                              <2> %%_ret:
    19 0000098F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   206                              <1> 
   207                              <1> setBufferDirty:
   208 00000990 55                  <1>     push rbp
   209 00000991 9C                  <1>     pushfq
   210 00000992 488B2D(90C60300)    <1>     mov rbp, qword [currBuff]
   211 00000999 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   212 0000099D 9D                  <1>     popfq
   213 0000099E 5D                  <1>     pop rbp
   214                              <1>     return
    18                              <2> %%_ret:
    19 0000099F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   215                              <1> 
   216                              <1> 
   217                              <1> getBuffer: ;Internal Linkage ONLY
   218                              <1> ;
   219                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   220                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   221                              <1> ;Flushes if not in disk change mode. 
   222                              <1> ;If in disk change mode, will check to see if the selected buffer 
   223                              <1> ; has data referring a device using the same DPB as we are changing.
   224                              <1> ; If it is, skip flushing, if not, flush first!
   225                              <1> ;
   226                              <1> ;This function will return a pointer to the desired data sector OR 
   227                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   228                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   229                              <1> ;Entry: rax = Sector to read
   230                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   231                              <1> ;       rsi = DPB to use for transaction
   232                              <1> ;Exit:  CF=NC => 
   233                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   234                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   235 000009A0 51                  <1>     push rcx
   236 000009A1 52                  <1>     push rdx
   237 000009A2 56                  <1>     push rsi
   238 000009A3 57                  <1>     push rdi
   239 000009A4 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   240 000009A6 E836010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   241 000009AB 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   242 000009B2 7418                <1>     je .rbReadNewSector
   243 000009B4 48893D(90C60300)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   244                              <1> .rbExit:
   245 000009BB 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer
   246 000009BF F8                  <1>     clc
   247                              <1> .rbExitNoFlag:
   248 000009C0 5F                  <1>     pop rdi
   249 000009C1 5E                  <1>     pop rsi
   250 000009C2 5A                  <1>     pop rdx
   251 000009C3 59                  <1>     pop rcx
   252 000009C4 488B1D(90C60300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   253                              <1>     return
    18                              <2> %%_ret:
    19 000009CB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   254                              <1> .rbReadNewSector:
   255 000009CC E8B9000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   256 000009D1 803D(E8D80300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   257 000009D8 7506                <1>     jne .flush  ;We are not, flush buffer
   258 000009DA 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   259 000009DE 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used. Lose the sector
   260                              <1> .flush:
   261 000009E0 E89AFEFFFF          <1>     call flushAndFreeBuffer
   262 000009E5 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   263                              <1> .skipFlush:
   264                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   265                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   266                              <1>     ; is no longer owned by that File so we mark the owner as none
   267 000009E7 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   268 000009EF 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   269 000009F2 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   270 000009F5 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   271 000009F9 80F902              <1>     cmp cl, fatBuffer
   272 000009FC B201                <1>     mov dl, 1   ;Default values if not fat buffer
   273 000009FE 7503                <1>     jne .rbNonFATbuffer
   274 00000A00 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   275                              <1> .rbNonFATbuffer:
   276 00000A03 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   277 00000A06 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   278 00000A09 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   279 00000A0C 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   280 00000A10 C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   281 00000A14 E808000000          <1>     call readSectorBuffer ;Carry the flag from the request
   282 00000A19 72A5                <1>     jc .rbExitNoFlag
   283 00000A1B 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer
   284 00000A1F EB9F                <1>     jmp short .rbExitNoFlag
   285                              <1> 
   286                              <1> readSectorBuffer:   ;Internal Linkage
   287                              <1> ;Reads a sector into a built sector buffer
   288                              <1> ;Entry: rdi = Pointer to buffer header
   289                              <1> ;Exit:  CF=NC : Success
   290                              <1> ;       CF=CY : Fail, terminate the request
   291                              <1> ;       rbx pointing to buffer header
   292                              <1> ;First make request to device driver
   293 00000A21 50                  <1>     push rax
   294 00000A22 53                  <1>     push rbx
   295 00000A23 51                  <1>     push rcx
   296 00000A24 52                  <1>     push rdx
   297 00000A25 56                  <1>     push rsi
   298 00000A26 55                  <1>     push rbp
   299                              <1> .rsRequest0:
   300 00000A27 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   301 00000A2C F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   302 00000A30 7406                <1>     jz .rsRequest1
   303 00000A32 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   304                              <1> .rsRequest1:
   305 00000A38 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   306 00000A3B B901000000          <1>     mov ecx, 1  ;One sector to copy
   307 00000A40 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   308 00000A44 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   309 00000A48 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   310 00000A4C E889440000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   311 00000A51 E80A430000          <1>     call absDiskDriverCall    ;Make Driver Request
   312 00000A56 7508                <1>     jnz .rsFail
   313                              <1> .rsExit:
   314 00000A58 F8                  <1>     clc
   315                              <1> .rsExitFail:
   316 00000A59 5D                  <1>     pop rbp
   317 00000A5A 5E                  <1>     pop rsi
   318 00000A5B 5A                  <1>     pop rdx
   319 00000A5C 59                  <1>     pop rcx
   320 00000A5D 5B                  <1>     pop rbx
   321 00000A5E 58                  <1>     pop rax
   322                              <1>     return
    18                              <2> %%_ret:
    19 00000A5F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   323                              <1> .rsFail:
   324                              <1> ;Enter here only if the request failed
   325 00000A60 FFCE                <1>     dec esi
   326 00000A62 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   327                              <1> ;Request failed thrice, critical error call
   328                              <1> ;First free the buffer if we failed to read data into it 
   329 00000A64 0FB74F08            <1>     movzx ecx, word [rdi + bufferHdr.driveNumber]   ;Save drv num for retry
   330 00000A68 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh ;Free buffer and clear flags
   331 00000A6E C605(C9C30300)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   332 00000A75 E841400000          <1>     call diskDevErr
   333 00000A7A 3C01                <1>     cmp al, critRetry
   334 00000A7C 7506                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   335 00000A7E 66894F08            <1>     mov word [rdi + bufferHdr.driveNumber], cx ;Put drvNm + flgs if trying again
   336 00000A82 EBA3                <1>     jmp short .rsRequest0
   337                              <1> .fail:
   338 00000A84 F9                  <1>     stc ;Set error flag to indicate fail
   339 00000A85 E9CFFFFFFF          <1>     jmp .rsExitFail
   340                              <1>     
   341                              <1> findLRUBuffer: ;Internal Linkage
   342                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   343                              <1> ; in rbx and the currBuff variable
   344                              <1> ;Input: Nothing
   345                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   346                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   347 00000A8A 52                  <1>     push rdx
   348 00000A8B 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   349 00000A92 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   350 00000A96 7436                <1>     je .flbExit 
   351 00000A98 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   352 00000A9F 742D                <1>     je .flbExit
   353                              <1> .flbWalk:
   354 00000AA1 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   355 00000AA4 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   356 00000AA7 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   357 00000AAB 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   358 00000AAD 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   359 00000AB4 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   360 00000AB6 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   361                              <1> .flbHeadLink:
   362 00000ABD 488B15(55C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   363 00000AC4 48893D(55C00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   364 00000ACB 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   365                              <1> .flbExit:
   366 00000ACE 5A                  <1>     pop rdx
   367 00000ACF 48893D(90C60300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   368                              <1>     return
    18                              <2> %%_ret:
    19 00000AD6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   369                              <1> .flbFreeLink:
   370 00000AD7 51                  <1>     push rcx
   371 00000AD8 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   372 00000ADB 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   373 00000ADE 59                  <1>     pop rcx
   374 00000ADF EBDC                <1>     jmp short .flbHeadLink
   375                              <1> 
   376                              <1> findSectorInBuffer:     ;Internal linkage
   377                              <1> ;Finds the Buffer for a sector
   378                              <1> ;If the sector is not in a buffer, returns with a -1
   379                              <1> ;Input: rax = Sector number
   380                              <1> ;        dl = Drive number
   381                              <1> ;Output: rdi = Buffer hdr pointer or -1
   382 00000AE1 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   383                              <1> .fsiCheckBuffer:
   384 00000AE8 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   385 00000AEB 7507                <1>     jne .fsiGotoNextBuffer
   386 00000AED 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   387 00000AF1 7501                <1>     jne .fsiGotoNextBuffer
   388                              <1> .fsiExit:
   389                              <1>     return
    18                              <2> %%_ret:
    19 00000AF3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   390                              <1> .fsiGotoNextBuffer:
   391 00000AF4 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   392 00000AF7 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   393 00000AFE 74F3                <1>     je .fsiExit
   394 00000B00 EBE6                <1>     jmp short .fsiCheckBuffer
   395                              <1> ;-----------------------------------------------------------------------------
   396                              <1> ;SPECIAL BUFFER FUNCTIONS
   397                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   398                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   399                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   400                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   401                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   402                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   403                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   404                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   405                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   406                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   407                              <1> ;-----------------------------------------------------------------------------
   408                              <1> getBufForDataNoFile:
   409                              <1> ;Returns a buffer to use for disk data in rbx
   410                              <1> ;Requires a File Handle.
   411                              <1> ;Input: [workingDPB] = DPB to transact on
   412                              <1> ;       rax = Sector to transfer
   413                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   414 00000B02 51                  <1>     push rcx
   415 00000B03 B108                <1>     mov cl, dataBuffer
   416 00000B05 56                  <1>     push rsi
   417 00000B06 57                  <1>     push rdi
   418 00000B07 488B35(64C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   419 00000B0E E88DFEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   420 00000B13 725F                <1>     jc getBufCommon.exit
   421 00000B15 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   422 00000B1D EB55                <1>     jmp short getBufCommon.exit
   423                              <1> getBufForDirNoFile:
   424                              <1> ;Returns a buffer to use for disk dir data in rbx
   425                              <1> ;Requires a File Handle.
   426                              <1> ;Input: [workingDPB] = DPB to transact on
   427                              <1> ;       rax = Sector to transfer
   428                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   429 00000B1F 51                  <1>     push rcx
   430 00000B20 B104                <1>     mov cl, dirBuffer
   431 00000B22 56                  <1>     push rsi
   432 00000B23 57                  <1>     push rdi
   433 00000B24 488B35(64C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   434 00000B2B E870FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   435 00000B30 7242                <1>     jc getBufCommon.exit
   436 00000B32 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   437 00000B3A EB38                <1>     jmp short getBufCommon.exit
   438                              <1> getBufForFat:
   439                              <1> ;Returns a buffer to use for fat data in rbx
   440                              <1> ;Input: [workingDPB] = DPB to transact on
   441                              <1> ;       rax = Sector to transfer
   442                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   443 00000B3C 51                  <1>     push rcx
   444 00000B3D B102                <1>     mov cl, fatBuffer
   445 00000B3F EB03                <1>     jmp short getBufCommon2
   446                              <1> getBufForDOS:
   447                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   448                              <1> ;Input: [workingDPB] = DPB to transact on
   449                              <1> ;       rax = Sector to transfer
   450                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   451 00000B41 51                  <1>     push rcx
   452 00000B42 B101                <1>     mov cl, dosBuffer
   453                              <1> getBufCommon2:
   454 00000B44 56                  <1>     push rsi
   455 00000B45 57                  <1>     push rdi    ;Push rdi to preserve it
   456 00000B46 488B35(64C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   457 00000B4D EB15                <1>     jmp short getBufCommon.makeReq
   458                              <1> getBufForDir:
   459                              <1> ;Returns a buffer to use for disk directory data in rbx
   460                              <1> ;Input: [currentSFT] = File to manipulate
   461                              <1> ;       rax = Sector to transfer
   462                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   463 00000B4F 51                  <1>     push rcx
   464 00000B50 B104                <1>     mov cl, dirBuffer
   465 00000B52 EB03                <1>     jmp short getBufCommon
   466                              <1> getBufForData:
   467                              <1> ;Returns a buffer to use for disk data in rbx
   468                              <1> ;Requires a File Handle.
   469                              <1> ;Input: [currentSFT] = File to manipulate
   470                              <1> ;       rax = Sector to transfer
   471                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   472 00000B54 51                  <1>     push rcx
   473 00000B55 B108                <1>     mov cl, dataBuffer
   474                              <1> getBufCommon:
   475 00000B57 56                  <1>     push rsi
   476 00000B58 57                  <1>     push rdi
   477 00000B59 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   478 00000B60 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   479                              <1> .makeReq:
   480 00000B64 E837FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   481 00000B69 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   482                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   483                              <1>     ; flushed to the file!
   484                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   485                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   486                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   487 00000B6B F6C103              <1>     test cl, dosBuffer | fatBuffer
   488 00000B6E 7504                <1>     jnz .exit
   489 00000B70 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   490                              <1> .exit:
   491 00000B74 5F                  <1>     pop rdi
   492 00000B75 5E                  <1>     pop rsi
   493 00000B76 59                  <1>     pop rcx
   494                              <1>     return
    18                              <2> %%_ret:
    19 00000B77 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   495                              <1> 
   496                              <1> flushFile:
   497                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   498                              <1> ; FAT/DOS buffers to flush
   499                              <1> ; We flush and free, and set to head of chain before continuing to search
   500                              <1> ;Input: rdi = is the file (sft) we wish to flush
   501                              <1> ;Output: CF=NC => All ok
   502                              <1> ;        CF=CY => A sector failed, exit. 
   503 00000B78 57                  <1>     push rdi
   504 00000B79 56                  <1>     push rsi
   505                              <1>     ;First check if the file has been written to?
   506 00000B7A 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
   507 00000B80 7434                <1>     jz .exitNoFlush ;Exit without flushing
   508 00000B82 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   509 00000B85 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   510                              <1> .ffLoop:
   511 00000B8C 4881FFFFFFFFFF      <1>     cmp rdi, -1
   512 00000B93 741B                <1>     je .exit
   513 00000B95 F6470907            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer | dirBuffer
   514 00000B99 751E                <1>     jnz .found  ;Flush if either bit is set
   515 00000B9B 48817F1FFFFFFFFF    <1>     cmp qword [rdi + bufferHdr.owningFile], -1  ;If owning file is -1, flush too
   516 00000BA3 7414                <1>     je .found
   517 00000BA5 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   518 00000BA9 740E                <1>     je .found
   519 00000BAB 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   520 00000BAE EBDC                <1>     jmp short .ffLoop
   521                              <1> .exit:
   522                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   523 00000BB0 66816605BFFF        <1>     and word [rsi + sft.wDeviceInfo], ~blokFileToFlush  ;Clear that bit!
   524                              <1> .exitNoFlush:
   525 00000BB6 5E                  <1>     pop rsi
   526 00000BB7 5F                  <1>     pop rdi
   527                              <1>     return
    18                              <2> %%_ret:
    19 00000BB8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   528                              <1> .found:
   529                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   530                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   531 00000BB9 E8C1FCFFFF          <1>     call flushAndFreeBuffer ;Flush and free buffer
   532 00000BBE 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   533                              <1>     ;If the sector has been successfully flushed, then it
   534                              <1>     ; is no longer owned by that File so we mark the owner as none
   535 00000BC0 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   536 00000BC8 E8DAFCFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   537 00000BCD EBBD                <1>     jmp short .ffLoop
    23                                  %include "./Source/Kernel/FAT/fat.asm"
    24                              <1> ;-----------------------------------:
    25                              <1> ;       File System routines        :
    26                              <1> ;-----------------------------------:
    27                              <1> getFATtype:
    28                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    29                              <1> ;Entry: rbp = DPB to ascertain FAT
    30                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    31 00000BCF 53                  <1>     push rbx
    32 00000BD0 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    33 00000BD3 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    34 00000BD8 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    35 00000BDE 730F                <1>     jae .exit
    36 00000BE0 FFC9                <1>     dec ecx     ;FAT 12 marker
    37 00000BE2 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    38 00000BE8 7205                <1>     jb .exit
    39 00000BEA B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    40                              <1> .exit:
    41 00000BEF 5B                  <1>     pop rbx
    42                              <1>     return
    18                              <2> %%_ret:
    19 00000BF0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    43                              <1> 
    44                              <1> clust2FATEntry:
    45                              <1> ;Converts a cluster number to a offset in the FAT
    46                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    47                              <1> ;        eax = Cluster number to look for
    48                              <1> ;Exit:   eax = Sector on disk of FAT 
    49                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    50                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    51 00000BF1 53                  <1>     push rbx
    52 00000BF2 55                  <1>     push rbp
    53 00000BF3 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
    54 00000BFA 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    55 00000BFD 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    56 00000C03 731E                <1>     jae .fat32
    57 00000C05 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    58 00000C0B 7209                <1>     jb .fat12
    59                              <1> ;FAT16
    60 00000C0D D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    61 00000C0F 6801000000          <1>     push qword 1
    62 00000C14 EB15                <1>     jmp short .common
    63                              <1> .fat12:
    64 00000C16 89C1                <1>     mov ecx, eax    ;ecx = eax
    65 00000C18 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    66 00000C1A 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    67 00000C1C 6800000000          <1>     push qword 0
    68 00000C21 EB08                <1>     jmp short .common
    69                              <1> .fat32:
    70 00000C23 6802000000          <1>     push qword 2
    71 00000C28 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    72                              <1> .common:
    73                              <1> ;eax has the FAToffset
    74 00000C2B 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    75 00000C2F 31D2                <1>     xor edx, edx    ;edx = 0
    76 00000C31 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    77 00000C33 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    78 00000C37 01D8                <1>     add eax, ebx
    79 00000C39 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    80 00000C3A 5D                  <1>     pop rbp
    81 00000C3B 5B                  <1>     pop rbx
    82                              <1>     return
    18                              <2> %%_ret:
    19 00000C3C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    83                              <1> 
    84                              <1> getStartSectorOfCluster:
    85                              <1> ;Input: eax = Cluster Number
    86                              <1> ;       rbp = dpb pointer
    87                              <1> ;Output: rax = Starting Sector number for cluster
    88                              <1> ;Gives the data sector we are at in the current cluster
    89                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    90 00000C3D 51                  <1>     push rcx
    91 00000C3E 09C0                <1>     or eax, eax ;Zero upper dword
    92 00000C40 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    93                              <1> .fat32Root:
    94 00000C42 482D02000000        <1>     sub rax, 2
    95 00000C48 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    96 00000C4B 48D3E0              <1>     shl rax, cl
    97 00000C4E 31C9                <1>     xor ecx, ecx
    98 00000C50 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    99 00000C53 4801C8              <1>     add rax, rcx
   100                              <1>     ;rax now has the first sector of the current cluster
   101 00000C56 59                  <1>     pop rcx
   102                              <1>     return
    18                              <2> %%_ret:
    19 00000C57 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   103                              <1> .rootDir:
   104 00000C58 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
   105 00000C5B E86FFFFFFF          <1>     call getFATtype
   106 00000C60 81F902000000        <1>     cmp ecx, 2
   107 00000C66 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
   108                              <1>     ;Else rax has the first sector of the Root Dir
   109 00000C68 59                  <1>     pop rcx
   110                              <1>     return
    18                              <2> %%_ret:
    19 00000C69 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   111                              <1> 
   112                              <1> 
   113                              <1> getLastClusterInChain:
   114                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
   115                              <1> ;Input: eax = Cluster to start searching at
   116                              <1> ;Output: eax = Last cluster in chain
   117                              <1> ;If input eax = 0, output eax = 0
   118 00000C6A 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   119                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C6C 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   120 00000C6E 53                  <1>     push rbx
   121                              <1> .lp:
   122 00000C6F 89C3                <1>     mov ebx, eax
   123 00000C71 E8A1010000          <1>     call readFAT
   124 00000C76 7209                <1>     jc .exit
   125 00000C78 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   126 00000C7D 75F0                <1>     jne .lp
   127 00000C7F 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   128                              <1> .exit: 
   129 00000C81 5B                  <1>     pop rbx
   130                              <1>     return
    18                              <2> %%_ret:
    19 00000C82 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   131                              <1> 
   132                              <1> getNumberOfClustersInChain:
   133                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   134                              <1> ;Input: eax = Cluster to start searching at
   135                              <1> ;Output: eax = Number of clusters in the chain
   136                              <1> ;If input eax = 0, output eax = 0
   137 00000C83 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   138                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C85 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   139 00000C87 51                  <1>     push rcx
   140 00000C88 31C9                <1>     xor ecx, ecx
   141                              <1> .lp:
   142 00000C8A FFC1                <1>     inc ecx
   143 00000C8C E886010000          <1>     call readFAT
   144 00000C91 7209                <1>     jc .exit
   145 00000C93 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   146 00000C98 75F0                <1>     jne .lp
   147 00000C9A 89C8                <1>     mov eax, ecx    ;Get the count
   148                              <1> .exit: 
   149 00000C9C 59                  <1>     pop rcx
   150                              <1>     return
    18                              <2> %%_ret:
    19 00000C9D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> getClusterInChain:
   153                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   154                              <1> ;If an EOC is encountered, then ecx will not be 
   155                              <1> ;Input: eax = Start Cluster to start searching from
   156                              <1> ;       ecx = Number of clusters to go forwards by;
   157                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   158                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   159                              <1> ;Also usual CF babble.
   160 00000C9E 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   161                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000CA0 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   162 00000CA2 53                  <1>     push rbx
   163 00000CA3 67E30F              <1>     jecxz .exit
   164                              <1> .lp:
   165 00000CA6 89C3                <1>     mov ebx, eax
   166 00000CA8 E86A010000          <1>     call readFAT
   167 00000CAD 7206                <1>     jc .exit
   168 00000CAF FFC9                <1>     dec ecx
   169 00000CB1 75F3                <1>     jnz .lp
   170 00000CB3 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   171                              <1> .exit:
   172 00000CB5 5B                  <1>     pop rbx
   173                              <1>     return
    18                              <2> %%_ret:
    19 00000CB6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   174                              <1> 
   175                              <1> startNewChain:
   176                              <1> ;Working dpb must be set
   177                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   178                              <1> ;If CF=CY, hard error
   179 00000CB7 53                  <1>     push rbx
   180 00000CB8 56                  <1>     push rsi
   181 00000CB9 E853000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   182 00000CBE 7215                <1>     jc .exit    ;Disk read error?
   183 00000CC0 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   184 00000CC5 740E                <1>     je .exit
   185 00000CC7 BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   186 00000CCC 89C3                <1>     mov ebx, eax
   187 00000CCE E8E3010000          <1>     call writeFAT   ;Propagate the CF 
   188 00000CD3 89D8                <1>     mov eax, ebx
   189                              <1> .exit:
   190 00000CD5 5E                  <1>     pop rsi
   191 00000CD6 5B                  <1>     pop rbx
   192                              <1>     return
    18                              <2> %%_ret:
    19 00000CD7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   193                              <1> 
   194                              <1> allocateClusters:
   195                              <1> ;Working dpb must be set. 
   196                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   197                              <1> ;       ebx = Cluster to link to the new cluster
   198                              <1> ;Output:    
   199                              <1> ;   CF=NC => Complete.
   200                              <1> ;   If eax = -1, then no more free clusters. 
   201                              <1> ;   CF=CY => Hard error, exit
   202                              <1> ; ecx always has number of allocated clusters
   203 00000CD8 53                  <1>     push rbx
   204 00000CD9 56                  <1>     push rsi
   205 00000CDA 51                  <1>     push rcx    ;Save tfr count on stack
   206 00000CDB 67E32B              <1>     jecxz .exit ;Allocating nothing? Exit
   207                              <1> .allocateLoop:
   208 00000CDE E82E000000          <1>     call findFreeCluster
   209 00000CE3 7224                <1>     jc .exit
   210 00000CE5 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   211 00000CEA 741D                <1>     je .exit    ;If the cluster number is -1, return immediately
   212                              <1>     ;eax has first free cluster value to use
   213                              <1>     ;First we link the previous cluster to this cluster
   214 00000CEC BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   215 00000CF1 E8C0010000          <1>     call writeFAT   ;Allocate this cluster first
   216 00000CF6 7211                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   217                              <1>     ;eax points to this allocated cluster
   218                              <1>     ;ebx points to the previous last cluster
   219 00000CF8 89C6                <1>     mov esi, eax    ;New cluster as "value"
   220 00000CFA 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   221 00000CFC E8B5010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   222 00000D01 7206                <1>     jc .exit
   223 00000D03 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   224 00000D05 FFC9                <1>     dec ecx ;One less cluster allocated
   225 00000D07 75D5                <1>     jnz .allocateLoop
   226                              <1> .exit:
   227 00000D09 5E                  <1>     pop rsi ;Pop the tfr count into esi
   228 00000D0A F7D9                <1>     neg ecx
   229 00000D0C 01F1                <1>     add ecx, esi
   230 00000D0E 5E                  <1>     pop rsi
   231 00000D0F 5B                  <1>     pop rbx
   232                              <1>     return
    18                              <2> %%_ret:
    19 00000D10 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> findFreeCluster:
   235                              <1> ;Walks the FAT to find a free cluster and returns the 
   236                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   237                              <1> ;Works on the workingDPB
   238                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   239 00000D11 53                  <1>     push rbx
   240 00000D12 52                  <1>     push rdx
   241 00000D13 55                  <1>     push rbp
   242 00000D14 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   243                              <1>     ;Use readFAT
   244                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   245                              <1>     ;If readFAT returns 0 then its a free cluster
   246 00000D1B B802000000          <1>     mov eax, 2  ;Start with cluster 2
   247                              <1> .fatLoop:
   248 00000D20 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   249 00000D22 E8F0000000          <1>     call readFAT    ;Read the value at eax, if it is 0, then eax is free
   250 00000D27 7210                <1>     jc .exitFail    ;If something goes wrong, just return
   251 00000D29 85C0                <1>     test eax, eax   ;Is this cluster free?
   252 00000D2B 7409                <1>     jz .exit    ;If yes, exit
   253 00000D2D 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   254 00000D31 3B450F              <1>     cmp eax, dword [rbp + dpb.dClusterCount]
   255 00000D34 76EA                <1>     jbe .fatLoop
   256                              <1> .exit:
   257 00000D36 89D8                <1>     mov eax, ebx
   258 00000D38 F8                  <1>     clc
   259                              <1> .exitFail:      ;Keep carry flag
   260 00000D39 5D                  <1>     pop rbp
   261 00000D3A 5A                  <1>     pop rdx
   262 00000D3B 5B                  <1>     pop rbx
   263                              <1>     return
    18                              <2> %%_ret:
    19 00000D3C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   264                              <1> 
   265                              <1> findFreeClusterData:
   266                              <1> ;Walks the FAT to find a free cluster and returns the 
   267                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   268                              <1> ;Also finds NumberOfFreeCLusters. Both fields get filled in the workingDPB
   269                              <1> ;Works on the workingDPB
   270                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   271 00000D3D 53                  <1>     push rbx
   272 00000D3E 52                  <1>     push rdx
   273 00000D3F 55                  <1>     push rbp
   274 00000D40 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   275 00000D47 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   276                              <1>     ;Mark dFirstFreeCluster as -1 and dNumberOfFreeClusters as 0
   277 00000D4B 31D2                <1>     xor edx, edx
   278 00000D4D 895531              <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], edx ;Zero this field
   279 00000D50 FFCA                <1>     dec edx
   280 00000D52 89552D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], edx ;Set to -1, unknown (i.e. none)
   281                              <1>     ;Use readFAT
   282                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   283                              <1>     ;If readFAT returns 0 then its a free cluster
   284 00000D55 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   285 00000D5A 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   286                              <1> .fatLoop:
   287 00000D5D 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   288 00000D5F E8B3000000          <1>     call readFAT
   289 00000D64 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   290 00000D66 85C0                <1>     test eax, eax   ;Is this cluster free?
   291 00000D68 750C                <1>     jne .fatProceed
   292 00000D6A FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   293 00000D6D 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   294 00000D74 7410                <1>     je .fatFirst
   295                              <1> .fatProceed:
   296 00000D76 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   297 00000D7A 39D0                <1>     cmp eax, edx
   298 00000D7C 76DF                <1>     jbe .fatLoop
   299                              <1> .exit:
   300 00000D7E 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   301 00000D81 F8                  <1>     clc
   302                              <1> .exitFail:      ;Keep carry flag
   303 00000D82 5D                  <1>     pop rbp
   304 00000D83 5A                  <1>     pop rdx
   305 00000D84 5B                  <1>     pop rbx
   306                              <1>     return
    18                              <2> %%_ret:
    19 00000D85 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   307                              <1> .fatFirst:
   308 00000D86 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   309 00000D89 EBEB                <1>     jmp short .fatProceed
   310                              <1> 
   311                              <1> getNextSectorOfFile:
   312                              <1> ;This function will read the next sector for a file into a buffer.
   313                              <1> ;If the next sector to be read lives in the next cluster, it will update
   314                              <1> ; the vars appropriately
   315                              <1> ;
   316                              <1> ;Input: rbp = dpb pointer
   317                              <1> ;Output:
   318                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   319                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   320                              <1> ;       CF=CY => Critical error occurred and was FAILed
   321                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   322                              <1> ; next cluster and read first sector 
   323                              <1>     ;Check if we need to go to next cluster
   324 00000D8B 8A05(AEC60300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   325 00000D91 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   326 00000D94 7416                <1>     je .gotoNextCluster
   327                              <1>     ;Goto next sector in same cluster
   328 00000D96 FE05(AEC60300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   329 00000D9C 48FF05(AFC60300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   330 00000DA3 488B05(AFC60300)    <1>     mov rax, qword [currSectD]
   331                              <1> .exitOK:
   332 00000DAA F8                  <1>     clc
   333                              <1> .exitFail:
   334                              <1>     return
    18                              <2> %%_ret:
    19 00000DAB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   335                              <1> .gotoNextCluster:
   336 00000DAC 8B05(A6C60300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   337 00000DB2 E860000000          <1>     call readFAT
   338 00000DB7 72F2                <1>     jc .exitFail
   339                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   340 00000DB9 3DFFFFFFFF          <1>     cmp eax, -1
   341 00000DBE 74EA                <1>     je .exitOK
   342                              <1> ;Update the new cluster and sector information
   343 00000DC0 8905(A6C60300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   344 00000DC6 FF05(A2C60300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   345 00000DCC E86CFEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   346 00000DD1 488905(AFC60300)    <1>     mov qword [currSectD], rax  ;Save it
   347 00000DD8 C605(AEC60300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   348 00000DDF EBC9                <1>     jmp short .exitOK
   349                              <1> 
   350                              <1> unlinkFAT:
   351                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   352                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   353                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   354                              <1> ; cluster must be set to EOC before this proc is called.
   355                              <1> ;Stops at first invalid cluster number.
   356                              <1> ;
   357                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   358                              <1> ;       rbp = Current DPB to use for disk
   359                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   360                              <1> 
   361 00000DE1 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   362 00000DE2 56                  <1>     push rsi
   363 00000DE3 E80A000000          <1>     call truncateFAT    ;Preserved eax
   364 00000DE8 31F6                <1>     xor esi, esi  ;Free first cluster too
   365 00000DEA E8C7000000          <1>     call writeFAT
   366 00000DEF 5E                  <1>     pop rsi
   367 00000DF0 58                  <1>     pop rax
   368                              <1>     return
    18                              <2> %%_ret:
    19 00000DF1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   369                              <1> 
   370                              <1> truncateFAT:
   371                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   372                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   373                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   374                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   375                              <1> ;Stops at first invalid cluster number.
   376                              <1> ;
   377                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   378                              <1> ;       rbp = Current DPB to use for disk
   379                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   380 00000DF2 50                  <1>     push rax
   381 00000DF3 53                  <1>     push rbx
   382 00000DF4 56                  <1>     push rsi
   383 00000DF5 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   384                              <1> .lp:
   385 00000DF7 E81B000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   386 00000DFC 7215                <1>     jc .exit    ;Error exit
   387 00000DFE 3DFFFFFFFF          <1>     cmp eax, -1 ;End of chain?
   388 00000E03 740E                <1>     je .exit
   389 00000E05 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   390 00000E06 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   391 00000E08 E8A9000000          <1>     call writeFAT
   392 00000E0D 7204                <1>     jc .exit    ;Error exit
   393 00000E0F 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   394 00000E11 EBE4                <1>     jmp short .lp
   395                              <1> .exit:
   396 00000E13 5E                  <1>     pop rsi
   397 00000E14 5B                  <1>     pop rbx
   398 00000E15 58                  <1>     pop rax
   399                              <1>     return
    18                              <2> %%_ret:
    19 00000E16 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   400                              <1> readFAT:
   401                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   402                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   403                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   404                              <1> ;       rbp = DPB
   405                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   406                              <1> ;If carry set, getBuffer failed!
   407 00000E17 53                  <1>     push rbx
   408 00000E18 51                  <1>     push rcx
   409 00000E19 52                  <1>     push rdx
   410 00000E1A 57                  <1>     push rdi
   411 00000E1B 55                  <1>     push rbp
   412 00000E1C 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   413 00000E1E E8CEFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   414                              <1>     ;and FAT type in ecx
   415 00000E23 E814FDFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   416 00000E28 7237                <1>     jc .exitFail
   417                              <1>     ;Check if FAT 12, 16, 32
   418 00000E2A 85C9                <1>     test ecx, ecx
   419 00000E2C 7439                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   420 00000E2E F7C101000000        <1>     test ecx, 1
   421 00000E34 7413                <1>     jz .goToNextClusterFat32
   422                              <1>     ;Here we handle FAT16
   423 00000E36 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   424 00000E3B 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   425 00000E40 721E                <1>     jb .exit
   426 00000E42 B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   427 00000E47 EB17                <1>     jmp short .exit
   428                              <1> .goToNextClusterFat32:
   429 00000E49 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   430 00000E4D 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   431 00000E52 7207                <1>     jb .validCluster32   
   432 00000E54 B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   433 00000E59 EB05                <1>     jmp short .exit
   434                              <1> .validCluster32:
   435 00000E5B 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   436                              <1> .exit:
   437 00000E60 F8                  <1>     clc
   438                              <1> .exitFail:
   439 00000E61 5D                  <1>     pop rbp
   440 00000E62 5F                  <1>     pop rdi
   441 00000E63 5A                  <1>     pop rdx
   442 00000E64 59                  <1>     pop rcx
   443 00000E65 5B                  <1>     pop rbx
   444                              <1>     return
    18                              <2> %%_ret:
    19 00000E66 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   445                              <1> .gotoNextClusterFat12:
   446                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   447                              <1> ;eax has the sector number of the FAT
   448                              <1> ;edx has byte offset into the sector
   449                              <1> ;edi has current cluster number
   450                              <1> ;rbx has ptr to buffer header
   451 00000E67 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   452 00000E6D 742C                <1>     jz .gotoNextClusterFat12Even
   453                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   454 00000E6F 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   455 00000E73 29D1                <1>     sub ecx, edx
   456 00000E75 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   457 00000E77 7518                <1>     jnz .gotoNextClusterFat12NoCross
   458                              <1>     ;Boundary cross, build entry properly
   459 00000E79 0FB65C1330          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   460 00000E7E FFC0                <1>     inc eax ;Get next FAT sector
   461 00000E80 53                  <1>     push rbx
   462 00000E81 E8B6FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   463 00000E86 72D9                <1>     jc .exitFail
   464 00000E88 58                  <1>     pop rax ;Get bl in al, the last entry from the previous buffer
   465 00000E89 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   466 00000E8C C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   467 00000E8F EB14                <1>     jmp short .checkIfLastFAT12Cluster
   468                              <1> .gotoNextClusterFat12NoCross:
   469 00000E91 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   470 00000E96 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   471 00000E99 EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   472                              <1> .gotoNextClusterFat12Even:
   473                              <1>     ;Here the cluster is even and can't cross a sector boundary
   474 00000E9B 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   475 00000EA0 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   476                              <1> .checkIfLastFAT12Cluster:
   477 00000EA5 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   478 00000EAA 72B4                <1>     jb .exit         ;If so, exit with it in eax
   479 00000EAC B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   480 00000EB1 E9AAFFFFFF          <1>     jmp .exit
   481                              <1> 
   482                              <1> writeFAT:
   483                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   484                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   485                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   486                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   487                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   488 00000EB6 53                  <1>     push rbx
   489 00000EB7 51                  <1>     push rcx
   490 00000EB8 52                  <1>     push rdx
   491 00000EB9 56                  <1>     push rsi
   492 00000EBA 57                  <1>     push rdi
   493 00000EBB 55                  <1>     push rbp
   494 00000EBC 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   495 00000EBE E82EFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   496                              <1>     ;and FAT type in ecx
   497 00000EC3 E874FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   498 00000EC8 7223                <1>     jc .exitFail
   499                              <1>     ;Check if FAT 12, 16, 32
   500 00000ECA 85C9                <1>     test ecx, ecx
   501 00000ECC 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   502 00000ECE F7C101000000        <1>     test ecx, 1
   503 00000ED4 7407                <1>     jz .goToNextClusterFat32
   504                              <1>     ;Here we handle FAT16
   505 00000ED6 66897C1330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], di ;Store the value
   506 00000EDB EB0A                <1>     jmp short .exit
   507                              <1> .goToNextClusterFat32:
   508 00000EDD 81E7FFFFFF0F        <1>     and edi, 0FFFFFFFh  ;Zero upper nybble
   509 00000EE3 897C1330            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], edi
   510                              <1> .exit:
   511 00000EE7 E8A4FAFFFF          <1>     call setBufferDirty
   512 00000EEC F8                  <1>     clc
   513                              <1> .exitFail:
   514 00000EED 5D                  <1>     pop rbp
   515 00000EEE 5F                  <1>     pop rdi
   516 00000EEF 5E                  <1>     pop rsi
   517 00000EF0 5A                  <1>     pop rdx
   518 00000EF1 59                  <1>     pop rcx
   519 00000EF2 5B                  <1>     pop rbx
   520                              <1>     return
    18                              <2> %%_ret:
    19 00000EF3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   521                              <1> .gotoNextClusterFat12:
   522                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   523                              <1> ;eax has the sector number of the FAT
   524                              <1> ;edx has byte offset into the sector
   525                              <1> ;edi has current cluster number
   526                              <1> ;rbx has ptr to buffer header
   527 00000EF4 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   528 00000EFA F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   529 00000F00 7445                <1>     jz .gotoNextClusterFat12Even
   530                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   531 00000F02 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   532 00000F06 29D1                <1>     sub ecx, edx
   533 00000F08 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   534 00000F0A 752C                <1>     jnz .gotoNextClusterFat12NoCross
   535                              <1>     ;Boundary cross, build entry properly
   536                              <1>     ;Replace the high nybble of the low byte 
   537 00000F0C 0FB64C1330          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   538 00000F11 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   539 00000F17 C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   540 00000F1A 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   541 00000F1C C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   542 00000F1F 884C1330            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   543 00000F23 E868FAFFFF          <1>     call setBufferDirty
   544 00000F28 FFC0                <1>     inc eax ;Get next FAT sector
   545 00000F2A E80DFCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   546 00000F2F 72BC                <1>     jc .exitFail
   547 00000F31 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   548 00000F33 884B30              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   549 00000F36 EBAF                <1>     jmp short .exit
   550                              <1> .gotoNextClusterFat12NoCross:
   551 00000F38 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   552 00000F3D 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   553 00000F42 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   554 00000F45 EB0A                <1>     jmp short .fat12common
   555                              <1> .gotoNextClusterFat12Even:
   556                              <1>     ;Here the cluster is even and can't cross a sector boundary
   557 00000F47 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   558 00000F4C 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   559                              <1> .fat12common:
   560 00000F51 09F0                <1>     or eax, esi     ;Add the new entry bits
   561 00000F53 6689441330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   562 00000F58 E98AFFFFFF          <1>     jmp .exit
    24                                  %include "./Source/Kernel/FAT/findfile.asm"
    25                              <1> ;Generic Find First and Find Next functions here
    26                              <1> findNextMain:
    27 00000F5D 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
    28 00000F64 F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
    29 00000F67 7408                <1>     jz .notNet
    30 00000F69 B81C110000          <1>     mov eax, 0111Ch ;Netowrk find next
    31 00000F6E CD4F                <1>     int 4Fh
    32                              <1>     return  ;Return propagating the error code
    18                              <2> %%_ret:
    19 00000F70 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    33                              <1> .notNet:
    34 00000F71 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    35 00000F73 FEC0                <1>     inc al  ;Convert into 1 based number
    36 00000F75 E806450000          <1>     call dosCrit1Enter
    37 00000F7A E8FC400000          <1>     call setDrive   ;Set CDS and current drive vars
    38 00000F7F 720C                <1>     jc .critError   ;Return error if this fails
    39 00000F81 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] 
    40 00000F88 E8F83D0000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    41                              <1> .critError:
    42 00000F8D E8F8440000          <1>     call dosCrit1Exit
    43                              <1>     retc    ;Return error if this fails
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000F92 72DC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    44 00000F94 E801000000          <1>     call searchMoreDir
    45                              <1>     return
    18                              <2> %%_ret:
    19 00000F99 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                              <1> searchMoreDir:
    47                              <1> ;The three directory variables are set up from the ffblock. 
    48                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    49                              <1> ;Current DTA is also used to contain the ff block address
    50                              <1> ;All registers can be trashed
    51 00000F9A 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
    52                              <1>     ;First setup dirClustA and dirSect vars
    53 00000FA1 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
    54 00000FA8 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    55 00000FAB 8805(56C60300)      <1>     mov byte [searchAttr], al   ;And save it
    56 00000FB1 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    57 00000FB4 8905(D6C60300)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    58 00000FBA 8905(D2C60300)      <1>     mov dword [dirClustPar], eax
    59                              <1>     ;Get number of 32 byte entries in a sector
    60 00000FC0 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    61                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    62 00000FC3 C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    63                              <1>     ;Now get bytes per cluster
    64 00000FC6 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    65 00000FC8 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    66 00000FCC 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    67 00000FD0 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    68 00000FD2 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    69 00000FD4 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    70 00000FD6 31D2                <1>     xor edx, edx
    71 00000FD8 F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    72                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    73                              <1>     ;edx has byte offset into cluster (or Root dir)
    74 00000FDA 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    75                              <1>     ;Now compute sector offset into cluster
    76 00000FDC 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    77 00000FE0 89D0                <1>     mov eax, edx    ;Move offset into cluster
    78 00000FE2 31D2                <1>     xor edx, edx
    79 00000FE4 F7F1                <1>     div ecx 
    80                              <1>     ;eax now has sector offset into cluster (or root dir)
    81                              <1>     ;edx has byte offset into sector 
    82 00000FE6 668905(DAC60300)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    83 00000FED C1EA05              <1>     shr edx, 5 ;Divide edx by 32 to get Dir Entry
    84 00000FF0 8915(DCC60300)      <1>     mov dword [dirEntry], edx
    85 00000FF6 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    86 00000FFC 85C0                <1>     test eax, eax   ;If we at cluster 0, we are in old style root dir
    87 00000FFE 7461                <1>     jz .oldFat
    88                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    89 00001000 89D9                <1>     mov ecx, ebx
    90 00001002 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    91                              <1> .fatlp:
    92 00001005 E80DFEFFFF          <1>     call readFAT
    93 0000100A 3DFFFFFFFF          <1>     cmp eax, -1
    94 0000100F 7464                <1>     je .errorExit
    95 00001011 FFC9                <1>     dec ecx
    96 00001013 75F0                <1>     jnz .fatlp
    97 00001015 8905(D6C60300)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    98                              <1> .skipFatWalk:
    99 0000101B 488D0597000000      <1>     lea rax, searchDir.nextEp
   100 00001022 50                  <1>     push rax    ;Push the return address onto stack
   101 00001023 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]
   102 00001029 E80FFCFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
   103 0000102E 0FB71D(DAC60300)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
   104 00001035 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
   105                              <1> .common:
   106 00001038 E804FBFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   107 0000103D 0F8211010000        <1>     jc searchDir.hardError
   108 00001043 E80F010000          <1>     call adjustDosDirBuffer  ;rbx has the buffer ptr for this dir sector
   109 00001048 8B05(DCC60300)      <1>     mov eax, dword [dirEntry]
   110 0000104E 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
   111 00001050 C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
   112 00001053 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
   113                              <1>     ;We continue AS IF this entry was bad
   114                              <1>     ;Now setup al as upon normal entry 
   115 00001056 8A05(56C60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   116 0000105C E95B010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within function
   117                              <1>     ;The return address on the stack will return to the ep's pushed
   118                              <1> .oldFat:
   119                              <1> ;Old FAT 12/16 root dirs fall thru here only
   120 00001061 488D05D0000000      <1>     lea rax, searchDir.oldNextEP
   121 00001068 50                  <1>     push rax    ;Push return address onto the stack
   122 00001069 0FB705(DAC60300)    <1>     movzx eax, word [dirSect]   ;Get the root directory sector offset
   123 00001070 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   124 00001073 EBC3                <1>     jmp short .common
   125                              <1> .errorExit:
   126 00001075 F9                  <1>     stc
   127                              <1>     return
    18                              <2> %%_ret:
    19 00001076 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   128                              <1> searchDir:
   129                              <1> ;Called in a level 1 critical section. 
   130                              <1> ;The directory variables are set and fcbName has the pattern to match
   131                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   132                              <1> ;All registers can be trashed
   133                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   134                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   135                              <1> 
   136                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   137                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   138 00001077 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   139 0000107E 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   140 00001084 7408                <1>     jz .notNet
   141 00001086 B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   142 0000108B CD4F                <1>     int 4fh
   143                              <1>     return
    18                              <2> %%_ret:
    19 0000108D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> .notNet:
   145 0000108E 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   146 00001095 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   147 0000109B 85C0                <1>     test eax, eax
   148 0000109D 747E                <1>     jz .oldRoot
   149 0000109F E899FBFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   150                              <1> .sectorLoop:
   151 000010A4 E898FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   152 000010A9 0F82A5000000        <1>     jc .hardError
   153 000010AF E8A3000000          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   154                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   155 000010B4 E8B2000000          <1>     call findInBuffer
   156                              <1> .nextEp:
   157                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000010B9 73D2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   158 000010BB 0F848F000000        <1>     jz .fnfError    ;CF=CY AND ZF=ZE => File not found
   159                              <1>     ;If ZF=ZE then fnfError (i.e. we hit an entry starting with 00)
   160                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   161                              <1>     ;IF however, the next cluster is -1, then we return fail
   162 000010C1 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   163 000010C7 8905(A6C60300)      <1>     mov dword [currClustD], eax
   164 000010CD 668B05(DAC60300)    <1>     mov ax, word [dirSect]
   165 000010D4 8805(AEC60300)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   166 000010DA 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   167 000010DE 488905(AFC60300)    <1>     mov qword [currSectD], rax  
   168 000010E5 C705(A2C60300)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   168 000010ED 0000                <1>
   169 000010EF E897FCFFFF          <1>     call getNextSectorOfFile
   170 000010F4 725E                <1>     jc .hardError
   171 000010F6 3DFFFFFFFF          <1>     cmp eax, -1
   172 000010FB 7453                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   173 000010FD 66FF05(DAC60300)    <1>     inc word [dirSect]  ;Goto next sector
   174 00001104 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   175 0000110A 3B05(A6C60300)      <1>     cmp eax, dword [currClustD] ;Did it change?
   176 00001110 7492                <1>     je .sectorLoop  ;If not, we advanced sectors only
   177 00001112 66C705(DAC60300)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   177 0000111A 00                  <1>
   178 0000111B EB87                <1>     jmp short .sectorLoop 
   179                              <1> 
   180                              <1> .oldRoot:
   181                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   182                              <1> ; one large contiguous cluster.
   183                              <1> ;   ecx = Number of entries per sector
   184                              <1> .oldSectorLp:
   185 0000111D 0FB705(DAC60300)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   186 00001124 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   187 00001127 E815FAFFFF          <1>     call getBufForDOS
   188 0000112C 7226                <1>     jc .hardError
   189 0000112E E824000000          <1>     call adjustDosDirBuffer      ;rbx has the buffer pointer for this dir sector
   190 00001133 E833000000          <1>     call findInBuffer
   191                              <1> .oldNextEP:
   192                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00001138 7201                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 0000113A C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   193 0000113B 7413                <1>     jz .fnfError
   194 0000113D 66FF05(DAC60300)    <1>     inc word [dirSect]  ;Goto next sector in directory
   195 00001144 8B4509              <1>     mov eax, dword [rbp + dpb.wNumberRootDirEntries]
   196 00001147 663905(DCC60300)    <1>     cmp word [dirEntry], ax ;Have we reached the last dir entry?
   197 0000114E 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   198                              <1> .fnfError:
   199 00001150 B012                <1>     mov al, errNoFil
   200 00001152 F9                  <1>     stc
   201                              <1>     return
    18                              <2> %%_ret:
    19 00001153 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   202                              <1> .hardError:
   203 00001154 B0FF                <1>     mov al, -1
   204                              <1>     return
    18                              <2> %%_ret:
    19 00001156 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   205                              <1> adjustDosDirBuffer:
   206 00001157 804B0904            <1>     or byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   207 0000115B 806309FE            <1>     and byte [rbx + bufferHdr.bufferFlags], ~dosBuffer
   208 0000115F 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   209 00001163 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   210 00001167 C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   211                              <1>     return
    18                              <2> %%_ret:
    19 0000116A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   212                              <1> 
   213                              <1> findInBuffer:
   214                              <1> ;Input: ecx = Number of entries in sector buffer to look for
   215                              <1> ;       rsi = Sector buffer data area
   216                              <1> ;Output: CF=CY => No entries found
   217                              <1> ;        ZF=NE => Keep searching in subsequent directories
   218                              <1> ;        ZF=ZE => End of directory reached early, stop
   219                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   220                              <1> ;        rsi = Points to start of the disk buffer directory entry
   221 0000116B 8A05(56C60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   222 00001171 E899000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   223                              <1> .searchMainLp:
   224                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   225 00001176 8A25(62C60300)      <1>     mov ah, byte [delChar]
   226 0000117C 803E00              <1>     cmp byte [rsi], 00h
   227 0000117F 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   228 00001181 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   229 00001183 750F                <1>     jne .notLookingForEmpty
   230                              <1> .emptySlot:
   231                              <1> ;Here we check if we are looking for an empty directory entry or
   232                              <1> ; we have reached the end of the file (if the first byte is 00h)
   233                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   234 00001185 3A25(DBC50300)      <1>     cmp ah, byte [fcbName] 
   235                              <1>     rete    ;Return if equal (CF=NC too)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000118B 74DD                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   236                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   237 0000118D 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   238 00001190 752A                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   239 00001192 F9                  <1>     stc
   240                              <1>     return
    18                              <2> %%_ret:
    19 00001193 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   241                              <1> .notLookingForEmpty:
   242 00001194 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   243 00001197 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   244 0000119A 803D(CAC30300)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   245 000011A1 7430                <1>     je .exclusiveDir
   246 000011A3 80FC08              <1>     cmp ah, dirVolumeID
   247 000011A6 7432                <1>     je .volFile
   248 000011A8 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   249 000011AA 7710                <1>     ja .nextEntry
   250                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   251                              <1> .scanName:
   252 000011AC 56                  <1>     push rsi
   253 000011AD 488D3D(DBC50300)    <1>     lea rdi, fcbName ;Goto name template to search for
   254 000011B4 E83E000000          <1>     call .nameCompare
   255 000011B9 5E                  <1>     pop rsi
   256 000011BA 7424                <1>     je .searchEntryFound
   257                              <1> .nextEntry:
   258                              <1> ;Go to next entry
   259 000011BC 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   260 000011C3 FF05(DCC60300)      <1>     inc dword [dirEntry] ;And denote that in variable
   261 000011C9 FFC9                <1>     dec ecx
   262 000011CB 75A9                <1>     jnz .searchMainLp
   263                              <1> .badExit:
   264 000011CD 31C0                <1>     xor eax, eax
   265 000011CF FFC0                <1>     inc eax ;Clear ZF
   266 000011D1 F9                  <1>     stc
   267                              <1>     return
    18                              <2> %%_ret:
    19 000011D2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   268                              <1> .exclusiveDir:
   269                              <1> ;Used when going down a path, dir bit simply need be set
   270 000011D3 F6C410              <1>     test ah, dirDirectory
   271 000011D6 75D4                <1>     jnz .scanName
   272 000011D8 EBE2                <1>     jmp short .nextEntry
   273                              <1> 
   274                              <1> .volFile:
   275 000011DA 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   276 000011DC 74CE                <1>     je .scanName       ;If so, scan the name agrees
   277 000011DE EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   278                              <1> 
   279                              <1> .searchEntryFound:
   280                              <1> ;Here a good entry was found!
   281 000011E0 56                  <1>     push rsi
   282 000011E1 57                  <1>     push rdi
   283 000011E2 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   284 000011E4 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
   285 000011EB B904000000          <1>     mov ecx, 32/8
   286 000011F0 F348A5              <1>     rep movsq   ;Copy the directory to SDA
   287 000011F3 5F                  <1>     pop rdi
   288 000011F4 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   289 000011F5 F8                  <1>     clc
   290                              <1>     return
    18                              <2> %%_ret:
    19 000011F6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   291                              <1> 
   292                              <1> .nameCompare:
   293                              <1> ;Input: rsi = source string
   294                              <1> ;       rdi = string template to compare against
   295                              <1> ;Output: ZF=ZE => Strings are ok
   296                              <1> ;        ZF=NZ => Strings not ok
   297                              <1> ;Accepts wildcards. Trashes al
   298 000011F7 51                  <1>     push rcx
   299 000011F8 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   300                              <1> .ncLp:
   301 000011FA 81F90B000000        <1>     cmp ecx, 11
   302 00001200 740B                <1>     je .ncExit
   303 00001202 FFC1                <1>     inc ecx
   304 00001204 A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   305 00001205 74F3                <1>     je .ncLp    ;If equal, keep going
   306 00001207 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   307 0000120B 74ED                <1>     je .ncLp
   308                              <1> .ncExit:
   309 0000120D 59                  <1>     pop rcx
   310                              <1>     return
    18                              <2> %%_ret:
    19 0000120E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   311                              <1> 
   312                              <1> adjustSearchAttr:
   313                              <1> ;Converts the byte to a system only if the bit is set
   314                              <1> ;Input: eax = User selected search mask
   315                              <1> ;Output: eax = Modified search mask
   316 0000120F 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   317 00001214 A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   318                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001219 74F3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   319 0000121B B808000000          <1>     mov eax, dirVolumeID
   320                              <1>     return
    18                              <2> %%_ret:
    19 00001220 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   321                              <1> 
   322                              <1> asciiToFCB:
   323                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   324                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   325                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   326                              <1> ;Name is space padded.
   327                              <1> ;Input: rsi = ASCII string buffer
   328                              <1> ;       rdi = FCB name buffer
   329                              <1> ;Output: al = Char that terminated the source string 
   330 00001221 53                  <1>     push rbx    
   331 00001222 57                  <1>     push rdi
   332 00001223 B90B000000          <1>     mov ecx, 11
   333 00001228 B020                <1>     mov al, " "
   334 0000122A F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   335 0000122C 5F                  <1>     pop rdi
   336 0000122D 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   337                              <1> .processName:
   338 00001230 AC                  <1>     lodsb   ;Get the char in al
   339 00001231 E8463F0000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   340 00001236 84C0                <1>     test al, al
   341 00001238 742D                <1>     jz .exit
   342                              <1>     ;Test if the char is valid
   343 0000123A E875400000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   344 0000123F 7426                <1>     jz .exit    ;If the char invalid, consider it a terminator
   345 00001241 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   346 00001243 7407                <1>     je .extSpace
   347 00001245 3C2E                <1>     cmp al, "."
   348 00001247 740C                <1>     je .ext
   349 00001249 AA                  <1>     stosb   ;Store the char
   350 0000124A EBE4                <1>     jmp short .processName
   351                              <1> .extSpace:
   352                              <1> ;Now we scan for a period in the name
   353 0000124C AC                  <1>     lodsb   ;Get a char and increase rsi
   354 0000124D 84C0                <1>     test al, al
   355 0000124F 7416                <1>     jz .exit
   356 00001251 3C2E                <1>     cmp al, "."     ;If al is not a period...
   357 00001253 75F7                <1>     jne .extSpace   ; keep searching
   358                              <1> .ext:
   359 00001255 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   360                              <1> .processExt:
   361 00001259 AC                  <1>     lodsb
   362 0000125A 84C0                <1>     test al, al
   363 0000125C 7409                <1>     jz .exit
   364 0000125E 3C20                <1>     cmp al, " "
   365 00001260 7405                <1>     je .exit
   366 00001262 AA                  <1>     stosb
   367 00001263 EBF4                <1>     jmp short .processExt
   368                              <1> .exitBadChar:
   369 00001265 30C0                <1>     xor al, al  ;Return a null terminator
   370                              <1> .exit:
   371 00001267 5B                  <1>     pop rbx
   372                              <1>     return
    18                              <2> %%_ret:
    19 00001268 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   373                              <1> 
   374                              <1> FCBToAsciiz:
   375                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   376                              <1> ;Name is space padded too
   377                              <1> ;Input: rsi = FCB name buffer
   378                              <1> ;       rdi = ASCIIZ string buffer
   379 00001269 B908000000          <1>     mov ecx, 8
   380 0000126E F3A4                <1>     rep movsb   ;Move the name over
   381                              <1> .scanNameSpace:
   382 00001270 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   383 00001274 750D                <1>     jne .ext
   384 00001276 48FFCF              <1>     dec rdi
   385 00001279 FFC1                <1>     inc ecx
   386 0000127B 81F908000000        <1>     cmp ecx, 8
   387 00001281 72ED                <1>     jb .scanNameSpace
   388                              <1> .ext:
   389 00001283 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   390 00001288 7506                <1>     jne .validExt
   391 0000128A 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   392 0000128E 7415                <1>     je .exit
   393                              <1> .validExt:
   394 00001290 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   395 00001292 AA                  <1>     stosb
   396 00001293 B903000000          <1>     mov ecx, 3
   397 00001298 F3A4                <1>     rep movsb   ;Move the three extension chars over
   398                              <1> .scanExtSpace:
   399 0000129A 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   400 0000129E 7505                <1>     jne .exit
   401 000012A0 48FFCF              <1>     dec rdi
   402 000012A3 EBF5                <1>     jmp short .scanExtSpace
   403                              <1> .exit:
   404 000012A5 31C0                <1>     xor eax, eax
   405 000012A7 AA                  <1>     stosb   ;Store a null at the end
   406                              <1>     return
    18                              <2> %%_ret:
    19 000012A8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   407                              <1> 
   408                              <1> setupFFBlock:
   409                              <1> ;Sets up the find first block for the search
   410                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   411 000012A9 50                  <1>     push rax
   412 000012AA 53                  <1>     push rbx
   413 000012AB 56                  <1>     push rsi
   414 000012AC 57                  <1>     push rdi
   415 000012AD 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   416 000012B0 8A05(56C60300)      <1>     mov al, byte [searchAttr]
   417 000012B6 243F                <1>     and al, 3Fh ;Clear upper two bits
   418 000012B8 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   419 000012BB 0FB605(63C60300)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   420 000012C2 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   421                              <1>     ;xchg bx, bx
   422 000012C4 488D35(DBC50300)    <1>     lea rsi, fcbName
   423 000012CB 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   424 000012CF 57                  <1>     push rdi
   425 000012D0 48B820202020202020- <1>     mov rax, "        "
   425 000012D9 20                  <1>
   426 000012DA 48AB                <1>     stosq
   427 000012DC 66AB                <1>     stosw
   428 000012DE AA                  <1>     stosb
   429 000012DF 5F                  <1>     pop rdi
   430 000012E0 48A5                <1>     movsq   ;Move 8 chars
   431 000012E2 66A5                <1>     movsw   ;Move 2 chars
   432 000012E4 A4                  <1>     movsb   ;Move the final char
   433                              <1> 
   434 000012E5 8B05(DCC60300)      <1>     mov eax, dword [dirEntry]
   435 000012EB 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   436 000012EE 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]
   437 000012F4 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   438 000012F7 8A05(C6C50300)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   439 000012FD 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   440 00001300 8B05(D1C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   441 00001306 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   442 00001309 8B05(D7C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   443 0000130F 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   444 00001312 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   445 00001316 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   446 0000131D E847FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   447                              <1> 
   448 00001322 5F                  <1>     pop rdi
   449 00001323 5E                  <1>     pop rsi
   450 00001324 5B                  <1>     pop rbx
   451 00001325 58                  <1>     pop rax
   452                              <1>     return
    18                              <2> %%_ret:
    19 00001326 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   453                              <1> 
   454                              <1> getDrvLetterFromPath:
   455                              <1> ;Gets the drive letter for the path in al
   456                              <1> ;Input: rsi = Buffer to process
   457                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   458                              <1> ;       ZF=ZE and al = 0 => Null path
   459                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   460                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   461                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   462 00001327 30C0                <1>     xor al, al
   463 00001329 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   464                              <1>     retz    ;Return if a null path
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000132C 74F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   465 0000132E 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   466                              <1>     retne   ;If not equal, Relative path or network path
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001332 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   467 00001334 66AD                <1>     lodsw   ;Get first word, rsi += 2
   468                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   469 00001336 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   470 00001338 2C60                <1>     sub al, 60h
   471                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000133A 75EA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   472 0000133C B0FF                <1>     mov al, -1  ;Else not a valid drive number
   473                              <1>     return
    18                              <2> %%_ret:
    19 0000133E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   474                              <1> canonicaliseFileName:
   475                              <1> ;Always trying to build and qualify a full pathname
   476                              <1> ;Does getPath without hitting the disk
   477 0000133F B0FF                <1>     mov al, -1
   478 00001341 8805(CAC30300)      <1>     mov byte [fileDirFlag], al  
   479 00001347 8805(5BC60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   480 0000134D 48893D(7FC50300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   481 00001354 FEC0                <1>     inc al  ;make al = 0
   482 00001356 8805(8FC50300)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   483 0000135C EB21                <1>     jmp short getPath.epAlt
   484                              <1> getDirPath:
   485 0000135E 30C0                <1>     xor al, al   ;Set to Directory
   486 00001360 EB02                <1>     jmp short getPath
   487                              <1> getFilePath:
   488 00001362 B0FF                <1>     mov al, -1  ;Set to File
   489                              <1> getPath:
   490                              <1> ;Determines whether the path is spliced or not and transfers the chars
   491                              <1> ; from the user buffer into an internal buffer, normalising them.
   492                              <1> ; Single and double dot entries are left as is, but the wildcard * is converted
   493                              <1> ; to ?. Wildcards can only be present in the LAST portion of the given path.
   494                              <1> ; If the portion with wildcards does not end with an ASCII null, we fail the 
   495                              <1> ; request with pnf. If there is a redirector which needs to normalise the path, 
   496                              <1> ; we let it do its thing and return.
   497                              <1> ;If the user requests data from a remote server (i.e. a pathspec starting with
   498                              <1> ; \\) then wildcards, the colon and dots are forbidden.
   499                              <1> ;If a remote user requests data (dosInvoke = -1), then the pathspec must be an
   500                              <1> ; absolute path (no wildcards or dots) and must begin with a drive letter 
   501                              <1> ; (converted from using machine name by the net client program).
   502                              <1> ;We check if we are a net invoke to ensure that the pathspec that was recieved
   503                              <1> ; was good.
   504                              <1> ;Called with:
   505                              <1> ; rdi = SDA Buffer for filename
   506                              <1> ; rsi = Potentially unqualified filename
   507                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   508 00001364 8805(CAC30300)      <1>     mov byte [fileDirFlag], al  
   509 0000136A B0FF                <1>     mov al, -1
   510 0000136C 8805(5BC60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   511 00001372 48893D(7FC50300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   512 00001379 8805(8FC50300)      <1>     mov byte [skipDisk], al  ;Store -1 to NOT skip checking the file on disk
   513                              <1> .epAlt:
   514 0000137F C605(5FC60300)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   515 00001386 C605(5EC60300)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   516 0000138D F605(5CC60300)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   517 00001394 7428                <1>     jz .notServer
   518                              <1>     ;In this case, the client network program will have correctly
   519                              <1>     ; substituted the drive letter for the path before making the request.
   520                              <1>     ;Thus we can immediately assume the existance of a drive letter in the path 
   521 00001396 E88CFFFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in X:    call getCDS ;Get the cds for the drive letter on the path
   523                              <1>     ;REMEMBER, FOR ALL THE LOGIC TO WORK, HERE WE MUST ENSURE THE PATH
   524                              <1>     ; CONTAINS NO . or .., NO INVALID CHARS OR MULTIPLE \\ AND IS 0 TERMINATED.
   525                              <1>     ;We do not scan for this criteria but the client program must adhere to 
   526                              <1>     ; these requirements.
   527                              <1>     ;When a server request is made, the request can ONLY be for a file on
   528                              <1>     ; a CDS drive.
   529 0000139B FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   530 0000139D 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   531 000013A4 50                  <1>     push rax
   532 000013A5 E8D6400000          <1>     call dosCrit1Enter
   533 000013AA E8D6390000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   534 000013AF E8D6400000          <1>     call dosCrit1Exit
   535 000013B4 58                  <1>     pop rax
   536 000013B5 0F8382000000        <1>     jnc .driveOk
   537                              <1> .serverExit:
   538 000013BB B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   539                              <1>     return
    18                              <2> %%_ret:
    19 000013BD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   540                              <1> .notServer:
   541                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   542 000013BE 48C705(6CC60300)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   542 000013C6 FFFFFF              <1>
   543 000013C9 B823110000          <1>     mov eax, 1123h
   544 000013CE CD4F                <1>     int 4fh ;CF=CY if not resolved. CF=NC if resolved
   545                              <1>     retnc  ;Return if resolved
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013D0 73EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   546 000013D2 E850FFFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   547 000013D7 9C                  <1>     pushfq  ;Save the flag state on stack
   548 000013D8 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   549 000013D9 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   550 000013DC E8903D0000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   551 000013E1 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. \\)
   552 000013E3 E8893D0000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   553 000013E8 7543                <1>     jnz .notNet
   554 000013EA 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   555 000013EC 753F                <1>     jne .notNet
   556 000013EE 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   557 000013EF 9D                  <1>     popfq
   558 000013F0 66AD                <1>     lodsw
   559 000013F2 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   560 000013F6 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   561                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   562                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   563                              <1> ; redirector Find First Without CDS
   564                              <1> 
   565 000013F8 8A1D(8FC50300)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   566 000013FE C605(8FC50300)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   567 00001405 53                  <1>     push rbx
   568                              <1> .moveNetChars:
   569 00001406 AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   570 00001407 E8703D0000          <1>     call uppercaseChar  ;Make char in al uppercase
   571 0000140C 84C0                <1>     test al, al
   572 0000140E 740F                <1>     jz .netEnd
   573 00001410 E85C3D0000          <1>     call swapPathSeparator  ;If path sep, swap it
   574 00001415 AA                  <1>     stosb
   575 00001416 75EE                <1>     jnz .moveNetChars  ;If not a path separating char in al, keep looking
   576 00001418 E86A000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   577 0000141D EBE7                <1>     jmp short .moveNetChars
   578                              <1> .netEnd:
   579 0000141F 5B                  <1>     pop rbx
   580 00001420 AA                  <1>     stosb
   581 00001421 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   582                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001423 7498                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   583 00001425 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   584 0000142A CD4F                <1>     int 4Fh
   585                              <1>     return
    18                              <2> %%_ret:
    19 0000142C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   586                              <1> .notNet:
   587                              <1> ;This is the normal case; paths can be relative, or absolute.
   588 0000142D 58                  <1>     pop rax ;Get the drive letter back
   589 0000142E 9D                  <1>     popfq   ;Get the flag state back
   590 0000142F 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   591                              <1> .pnfErr:
   592 00001431 B003                <1>     mov al, errPnf  ;Null path error
   593 00001433 F9                  <1>     stc
   594                              <1>     return
    18                              <2> %%_ret:
    19 00001434 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   595                              <1> .notNull:
   596 00001435 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   597 00001437 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   598 00001439 B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   599 0000143B F9                  <1>     stc
   600                              <1>     return
    18                              <2> %%_ret:
    19 0000143C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   601                              <1> .driveOk:
   602 0000143D 84C0                <1>     test al, al
   603 0000143F 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   604                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   605 00001441 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   606 00001444 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   607 00001446 50                  <1>     push rax    ;Save the drive letter
   608 00001447 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   609 00001448 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   610 0000144B E8213D0000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   611                              <1>     ;If al is a path separator, then this path is absolute.
   612 00001450 58                  <1>     pop rax ;Get back the drive letter
   613 00001451 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   614                              <1> .absoPath:
   615                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   616 00001453 48FFC6              <1>     inc rsi
   617 00001456 EB1A                <1>     jmp short .commonDir
   618                              <1> .curPath:
   619                              <1> ;This is only jumped to if we are relative the current drive
   620                              <1> ;rsi points to first char in path
   621                              <1> ;If this char is \ or /, then it is an absolute path.
   622 00001458 8A05(93C30300)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   623 0000145E FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   624 00001460 50                  <1>     push rax    ;Save the current drive number
   625 00001461 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   626 00001463 E8093D0000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   627 00001468 58                  <1>     pop rax ;Get back the current drive number
   628 00001469 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   629                              <1> .relMain:
   630 0000146B C605(5BC60300)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   631                              <1> .commonDir:
   632                              <1> ;rsi points to the start of the string we will be appending
   633 00001472 E809000000          <1>     call pathWalk
   634 00001477 7201                <1>     jc .badDriveExit
   635                              <1>     return
    18                              <2> %%_ret:
    19 00001479 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   636                              <1> .badDriveExit:
   637 0000147A B812000000          <1>     mov eax, errNoFil ;No file for that spec found
   638                              <1>     return
    18                              <2> %%_ret:
    19 0000147F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   639                              <1> 
   640                              <1> pathWalk:
   641                              <1> ;Input: rsi must point to source buffer for path to expand
   642                              <1> ;       rdi must point to a destination buffer
   643                              <1> ;       al must contain the drive 1 based number
   644 00001480 E89E000000          <1>     call prepareDir    ;Prepare the dir if the drive is subst/join drive
   645 00001485 7265                <1>     jc .badDriveExit
   646                              <1>     ;If the user requests to .. to a point before rbx, we fail if a disk
   647                              <1>     ; resolution
   648                              <1> .netEp: ;For net path resolution (resolution ONLY) ptrs must point past "\\"
   649 00001487 4889FB              <1>     mov rbx, rdi
   650                              <1> .mainlp:
   651 0000148A E868010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   652 0000148F 84C0                <1>     test al, al
   653 00001491 7507                <1>     jnz .notFile
   654 00001493 C605(5FC60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   655                              <1> .notFile:
   656 0000149A 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   657 0000149B E862030000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   658 000014A0 58                  <1>     pop rax
   659 000014A1 736B                <1>     jnc .deviceFound
   660 000014A3 E824020000          <1>     call searchForPathspec  ;and search the directory
   661 000014A8 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   662 000014AA E873020000          <1>     call addPathspecToBuffer
   663 000014AF 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   664 000014B1 84C0                <1>     test al, al ;Exit if this pathspec was a file
   665 000014B3 743D                <1>     jz .exitGood
   666                              <1>     ;Here I have to take the cluster data from the found directory entry
   667                              <1>     ; and setup the search for the next pathspec portion
   668                              <1>     ;Copy necessary data from the current directory copy
   669 000014B5 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   670 000014BC 74CC                <1>     jz .mainlp
   671 000014BE 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   672 000014C5 C1E010              <1>     shl eax, 10h    ;Shift it high
   673 000014C8 668B05(D5C50300)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   674                              <1>     ;eax now has the cluster number of the search
   675 000014CF 8905(D6C60300)      <1>     mov dword [dirClustA], eax
   676 000014D5 8905(D2C60300)      <1>     mov dword [dirClustPar], eax
   677 000014DB 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   678 000014DD 8905(DCC60300)      <1>     mov dword [dirEntry], eax
   679 000014E3 668905(DAC60300)    <1>     mov word [dirSect], ax
   680 000014EA EB9E                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   681                              <1> .badDriveExit:
   682 000014EC B812000000          <1>     mov eax, errNoFil ;No file for that spec found
   683                              <1>     return
    18                              <2> %%_ret:
    19 000014F1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   684                              <1> .exitGood:
   685 000014F2 C605(5EC60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   686                              <1> .exit:
   687                              <1>     return
    18                              <2> %%_ret:
    19 000014F9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   688                              <1> .checkDev:
   689                              <1> ;If the return code is errNoFil AND Int44Fail = 0, then we check to see if 
   690                              <1> ; we are in \DEV pseudo dir
   691 000014FA F605(CBC30300)FF    <1>     test byte [Int44Fail], -1   ;Make sure we are not returning from a FAIL
   692 00001501 751D                <1>     jnz .nodev  ;If any bits set, ignore this check
   693                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   694 00001503 56                  <1>     push rsi
   695 00001504 57                  <1>     push rdi
   696 00001505 E886020000          <1>     call checkDevPath
   697 0000150A 5F                  <1>     pop rdi
   698 0000150B 5E                  <1>     pop rsi
   699 0000150C 72EB                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   700                              <1> .deviceFound:
   701 0000150E 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   702 00001510 C605(5FC60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   703 00001517 C605(5EC60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   704 0000151E EBD9                <1>     jmp short .exit   
   705                              <1> .nodev:
   706 00001520 F9                  <1>     stc
   707 00001521 EBD6                <1>     jmp short .exit
   708                              <1> 
   709                              <1> prepareDir:
   710                              <1> ;Used to transfer the current directory if it is necessary.
   711                              <1> ;Always necessary if the user specified a subst/join drive. Else only if 
   712                              <1> ; relative
   713                              <1> ;Input: al = 1-based drive letter
   714                              <1> ;Output: rdi = Pointing at where to place chars from source string
   715                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   716 00001523 56                  <1>     push rsi
   717 00001524 E8573F0000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   718 00001529 E84D3B0000          <1>     call setDrive   ;Set internal variables, working CDS etc etc
   719 0000152E 720D                <1>     jc .critExit    ;If the drive number in al is too great or drive invalid
   720 00001530 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] 
   721 00001537 57                  <1>     push rdi    ;Push CDS pointer on stack...
   722 00001538 E848380000          <1>     call getDiskDPB  ;Update working DPB and drv before searching, dpbptr in rbp
   723                              <1> .critExit:
   724 0000153D E8483F0000          <1>     call dosCrit1Exit
   725 00001542 5E                  <1>     pop rsi     ; ...and get CDS pointer in rsi
   726 00001543 724A                <1>     jc .badDriveExit 
   727 00001545 488B3D(7FC50300)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   728                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   729                              <1>     ;If this CDS is a join drive, copy the first 3 chars and up to the next 
   730                              <1>     ;   terminating char (\, / or Null)
   731                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   732                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   733 0000154C 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive
   734 00001552 753D                <1>     jnz .prepDirJoin
   735 00001554 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   736 0000155A 7556                <1>     jnz .prepDirSubst
   737                              <1> .prepMain:
   738                              <1> ;Ok so now preliminary copy complete, now we check if path spliced
   739 0000155C F605(5BC60300)FF    <1>     test byte [spliceFlag], -1
   740 00001563 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   741                              <1>     ;Else we copy the first two chars only (X:)
   742 00001565 66A5                <1>     movsw  
   743 00001567 B05C                <1>     mov al, "\"
   744 00001569 AA                  <1>     stosb   ;Store the path separator and increment rdi
   745 0000156A 31C0                <1>     xor eax, eax    ;Get cluster 0
   746 0000156C EB1B                <1>     jmp short .prepDirExitSkip
   747                              <1> .prepLoop:
   748 0000156E AC                  <1>     lodsb
   749 0000156F 84C0                <1>     test al, al ;If al was null, then we stop
   750 00001571 7403                <1>     jz .prepDirExit
   751 00001573 AA                  <1>     stosb
   752 00001574 EBF8                <1>     jmp short .prepLoop
   753                              <1> .prepDirExit:
   754 00001576 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   755 0000157A 7403                <1>     je .prepDirExitSkipPathsep
   756 0000157C B05C                <1>     mov al, "\"
   757 0000157E AA                  <1>     stosb   ;Store the path separator and increment rdi
   758                              <1> .prepDirExitSkipPathsep:
   759 0000157F 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   760 00001586 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   761                              <1> .prepDirExitSkip:
   762 00001589 E837000000          <1>     call .prepSetupDirSearchVars
   763 0000158E F8                  <1>     clc ;Clear carry before exiting
   764                              <1> .badDriveExit:
   765 0000158F 5E                  <1>     pop rsi
   766                              <1>     return
    18                              <2> %%_ret:
    19 00001590 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   767                              <1> .prepDirJoin:
   768 00001591 51                  <1>     push rcx
   769 00001592 56                  <1>     push rsi
   770 00001593 4881C602000000      <1>     add rsi, 2  ;Goto the backslash for the dir
   771 0000159A B902000000          <1>     mov ecx, 2  ;Instantiate ecx to copy X:
   772                              <1> .prepDirJoin1:
   773 0000159F AC                  <1>     lodsb   ;Get the char
   774 000015A0 84C0                <1>     test al, al ;Null char?
   775 000015A2 740B                <1>     jz .prepDirJoin2
   776 000015A4 E8C83B0000          <1>     call swapPathSeparator
   777 000015A9 7404                <1>     jz .prepDirJoin2
   778 000015AB FFC1                <1>     inc ecx ;Accrue length to copy
   779 000015AD EBF0                <1>     jmp short .prepDirJoin1
   780                              <1> .prepDirJoin2:
   781 000015AF 5E                  <1>     pop rsi ;Return rsi to the start of the buffer
   782 000015B0 EB05                <1>     jmp short .prepDirCopy1
   783                              <1> .prepDirSubst:
   784 000015B2 51                  <1>     push rcx
   785 000015B3 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   786                              <1> .prepDirCopy1:
   787 000015B7 F3A4                <1>     rep movsb   ;Copy the string over
   788 000015B9 59                  <1>     pop rcx
   789 000015BA F605(5BC60300)FF    <1>     test byte [spliceFlag], -1
   790 000015C1 75B3                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   791 000015C3 EBA9                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   792                              <1> .prepSetupDirSearchVars:
   793                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   794                              <1> ;       rbp = DPB pointer for the device which will do transaction
   795 000015C5 51                  <1>     push rcx
   796 000015C6 31C9                <1>     xor ecx, ecx
   797 000015C8 66890D(DAC60300)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   798 000015CF 890D(DCC60300)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   799 000015D5 E8F5F5FFFF          <1>     call getFATtype ;Get type of fat
   800 000015DA 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   801 000015E0 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   802                              <1>     ;FAT 32 here
   803 000015E2 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   804 000015E4 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   805 000015E6 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   806                              <1> .psdsvExit:
   807 000015E9 8905(D6C60300)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   808 000015EF 8905(D2C60300)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   809 000015F5 59                  <1>     pop rcx
   810                              <1>     return 
    18                              <2> %%_ret:
    19 000015F6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   811                              <1> 
   812                              <1> copyPathspec:
   813                              <1> ;1) Copies a path portion from the source buffer to the destination
   814                              <1> ;2) Advances rsi to the next null, \ or /
   815                              <1> ;3) Expands all * to ?'s
   816                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   817                              <1> ;    next path separator
   818                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   819                              <1> ;    with rsi moving to path separator
   820                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   821                              <1> ;
   822                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   823                              <1> ;           rdi = Points to where to store it
   824                              <1> ;
   825                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   826                              <1> ;           rdi = First char of next space to store next pathspec
   827                              <1> ;           al = Last char stored (either \ or NULL)
   828                              <1> ;           CF=NC = OK path
   829                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   830                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   831 000015F7 57                  <1>     push rdi    ;Save the pointer into the user buffer
   832 000015F8 C605(EEC30300)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   833 000015FF 488D3D(DBC50300)    <1>     lea rdi, fcbName
   834 00001606 57                  <1>     push rdi
   835 00001607 B903000000          <1>     mov ecx, 3
   836 0000160C B820202020          <1>     mov eax, "    " ;Four spaces
   837 00001611 F3AB                <1>     rep stosd   ;Store 12 spaces
   838 00001613 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   839                              <1> 
   840 00001614 B908000000          <1>     mov ecx, 8 ;8 chars to move over, when ecx = 0, the char must be . or term
   841 00001619 B501                <1>     mov ch, 1   ;Set that we are in name field
   842 0000161B AC                  <1>     lodsb   ;Get first char from user path in al
   843 0000161C 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   844 0000161E 7459                <1>     je .cpsDots
   845 00001620 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   846                              <1> ;First char is not a dot, so now check if starts with E5h? 
   847                              <1> ;If so, store 05h in its place! KANJI SUPPORT WOOHOO!
   848 00001623 3CE5                <1>     cmp al, 0E5h
   849 00001625 7508                <1>     jne .cpsMainLoop
   850 00001627 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   851 0000162A B005                <1>     mov al, 05h
   852 0000162C AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   853 0000162D FEC9                <1>     dec cl  ;One less char to tfr
   854                              <1> .cpsMainLoop:
   855 0000162F AC                  <1>     lodsb   ;Get the char in al and advance rsi
   856 00001630 84C0                <1>     test al, al ;Is it the null char?
   857 00001632 0F848A000000        <1>     jz .cpsProcessName  ;If so, terminate immediately
   858 00001638 E8343B0000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   859 0000163D 7449                <1>     jz .cpsCharSkip2 ; and then exit with the final converted pathsep in al
   860 0000163F 3C2E                <1>     cmp al, "." ;Filename extension separator
   861 00001641 7428                <1>     je .cpsExtension
   862 00001643 81F900010000        <1>     cmp ecx, 0100h  ;If ch = 1 and cl = 0, then look for either . or terminator
   863 00001649 74E4                <1>     je .cpsMainLoop
   864 0000164B 67E333              <1>     jecxz .cpsCharSkip ;If ch = 0 and cl = 0, scan for next terminator
   865                              <1>     ;If we have space in the filename, we check to see if the next char is *
   866 0000164E 3C2A                <1>     cmp al, "*" ;Wildcard?
   867 00001650 743D                <1>     je .cpsWildcard
   868 00001652 3C3F                <1>     cmp al, "?" ;Good wildcard?
   869 00001654 740C                <1>     je .store
   870 00001656 E8213B0000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   871 0000165B E8543C0000          <1>     call checkCharValid ; and check it is a valid char
   872 00001660 7405                <1>     je .cpsInvalidChar  ;If it is not valid, replace with 0 and exit
   873                              <1> .store:
   874 00001662 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   875 00001663 FEC9                <1>     dec cl  ;One less char left to tfr
   876 00001665 EBC8                <1>     jmp short .cpsMainLoop
   877                              <1> .cpsInvalidChar:
   878 00001667 30C0                <1>     xor al, al
   879 00001669 EB57                <1>     jmp short .cpsProcessName
   880                              <1> .cpsExtension:
   881                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   882 0000166B B903000000          <1>     mov ecx, 3  ;Set to 3 chars left, in extension (ch = 0)
   883 00001670 488D3D(E3C50300)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   884 00001677 EBB6                <1>     jmp short .cpsMainLoop
   885                              <1> .cpsDots:
   886 00001679 AA                  <1>     stosb   ;Store the first dot
   887 0000167A 8A06                <1>     mov al, byte [rsi]
   888 0000167C 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   889 0000167E 7501                <1>     jne .cpsCharSkip
   890 00001680 A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   891                              <1> .cpsCharSkip:
   892 00001681 E819000000          <1>     call .cpsPtrSkip    ;Now we are skipping any chars that arent terminators
   893 00001686 EB3A                <1>     jmp short .cpsProcessName
   894                              <1> .cpsCharSkip2:
   895 00001688 E81F000000          <1>     call .cpsPtrSkip2
   896 0000168D EB33                <1>     jmp short .cpsProcessName
   897                              <1> .cpsWildcard:
   898                              <1>     ;cl has the number of chars of ? to store 
   899 0000168F B03F                <1>     mov al, "?"
   900 00001691 51                  <1>     push rcx
   901 00001692 0FB6C9              <1>     movzx ecx, cl   ;Temporarily extend cl to ecx
   902 00001695 F3AA                <1>     rep stosb   ;Store that many ? in buffer and return cl to 0
   903 00001697 59                  <1>     pop rcx
   904 00001698 F6C501              <1>     test ch, 1  ;Is this bit set? If so, we jump to .cpsExtension
   905 0000169B 75CE                <1>     jnz .cpsExtension   ;Now fill the extension field
   906                              <1>     ;Else, we process filename
   907 0000169D EBE2                <1>     jmp short .cpsCharSkip
   908                              <1> .cpsPtrSkip:
   909                              <1> ;Now advance rsi past the next pathsep or null char
   910                              <1> ;If an invalid char is detected, it is considered to be a terminator
   911                              <1> ;Output: al = Terminator char (either \ or null)
   912                              <1> ;        rsi -> First char of next pathspec (if al = \)
   913 0000169F AC                  <1>     lodsb
   914 000016A0 E8F73B0000          <1>     call checkCharOk
   915 000016A5 7418                <1>     je .cpsBadChar
   916 000016A7 84C0                <1>     test al, al ;Is this null?
   917                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 000016A9 7501                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 000016AB C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   918                              <1> ;If the next char that will be read is a pathsep, inc rsi to it
   919                              <1> ;This is to avoid multiple successive pathseps
   920                              <1> .cpsPtrSkip2:
   921 000016AC 803E5C              <1>     cmp byte [rsi], "\"
   922 000016AF 74EE                <1>     je .cpsPtrSkip 
   923 000016B1 803E2F              <1>     cmp byte [rsi], "/"
   924 000016B4 74E9                <1>     je .cpsPtrSkip 
   925                              <1>     ;If the current char is the final pathsep, exit
   926 000016B6 E8B63A0000          <1>     call swapPathSeparator
   927                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000016BB 74EE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   928 000016BD EBE0                <1>     jmp short .cpsPtrSkip
   929                              <1> 
   930                              <1> .cpsBadChar:
   931 000016BF 30C0                <1>     xor al, al  ;Convert the char to a terminator
   932                              <1>     return
    18                              <2> %%_ret:
    19 000016C1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   933                              <1> .cpsProcessName:
   934                              <1> ;Store the final char in the 12 space in the FCB name field
   935 000016C2 488D3D(E6C50300)    <1>     lea rdi, fcbName+11
   936 000016C9 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   937 000016CA 5F                  <1>     pop rdi
   938                              <1>     return
    18                              <2> %%_ret:
    19 000016CB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   939                              <1> 
   940                              <1> searchForPathspec:
   941                              <1>     ;Now search the current directory for this filename
   942                              <1>     ;Find first using SDA ffBlock
   943                              <1>     ;If al = 0, we have final file name or directory name
   944                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
   945                              <1>     ;Output: CF=CY => Error occured
   946                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
   947                              <1>     ;                 FF block somewhat setup
   948                              <1>     ;Preserves rax, rbx, rsi,  rdi
   949 000016CC 50                  <1>     push rax
   950 000016CD 53                  <1>     push rbx
   951 000016CE 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
   952 000016CF 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
   953 000016D0 0FB61D(CAC30300)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
   954 000016D7 53                  <1>     push rbx    ;and push it onto the stack
   955                              <1> ;Evaluate whether we are searching for a file for a directory
   956 000016D8 84C0                <1>     test al, al
   957 000016DA 741D                <1>     jz .sfpPNfile
   958                              <1>     ;Fall if subdir
   959 000016DC 488D3D(DBC50300)    <1>     lea rdi, fcbName
   960 000016E3 B03F                <1>     mov al, "?" ;Search for wildcard
   961 000016E5 B90B000000          <1>     mov ecx, 11
   962 000016EA F2AE                <1>     repne scasb
   963 000016EC 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
   964 000016EE B010                <1>     mov al, dirDirectory    ;We want a directory only search.
   965 000016F0 C605(CAC30300)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
   966 000016F7 EB07                <1>     jmp short .sfpPNMain
   967                              <1> .sfpPNfile:
   968                              <1>     ;Here if we are searching for a file or directory as setup by search init
   969 000016F9 0FB605(56C60300)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
   970                              <1> .sfpPNMain:
   971 00001700 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
   972 00001707 7405                <1>     je .sfpPNNoDisk
   973 00001709 E869F9FFFF          <1>     call searchDir
   974                              <1> .sfpPNNoDisk:
   975 0000170E 5B                  <1>     pop rbx
   976 0000170F 881D(CAC30300)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
   977 00001715 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
   978 00001716 5E                  <1>     pop rsi
   979 00001717 5B                  <1>     pop rbx
   980 00001718 58                  <1>     pop rax
   981                              <1>     return
    18                              <2> %%_ret:
    19 00001719 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   982                              <1> .sfpPnf:
   983 0000171A B803000000          <1>     mov eax, errPnf
   984                              <1> .sfpErrExit:
   985 0000171F F9                  <1>     stc ;Set carry
   986 00001720 EBEC                <1>     jmp short .sfpPNNoDisk
   987                              <1> 
   988                              <1> addPathspecToBuffer:
   989                              <1> ;Input: fcbName = Qualified pathname portion
   990                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
   991                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
   992                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
   993                              <1> ;rbx points to the "head of the path"
   994 00001722 803D(DBC50300)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
   995 00001729 741F                <1>     je .aptbPNDots
   996                              <1>     ;Copy filename over to internal buffer
   997 0000172B 56                  <1>     push rsi    ;Save source pointer position
   998 0000172C 488D35(DBC50300)    <1>     lea rsi, fcbName
   999 00001733 E831FBFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1000 00001738 48FFCF              <1>     dec rdi ;Go back to the copied Null char
  1001 0000173B 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1002                              <1> .aptbOkExit:
  1003 0000173C 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the prev pathspec term char in al
  1004 0000173F E82D3A0000          <1>     call swapPathSeparator
  1005 00001744 7402                <1>     jz .aptbPNexit
  1006 00001746 30C0                <1>     xor al, al  ;Set al to 0 else (all other chars are terminators)
  1007                              <1> .aptbPNexit:
  1008 00001748 AA                  <1>     stosb   ;Store this final char (either \ or NULL) and return
  1009                              <1>     return
    18                              <2> %%_ret:
    19 00001749 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1010                              <1> .aptbPNDots:
  1011                              <1> ;For one dot, we leave rdi where it is
  1012                              <1> ;For two dots, we search backwards for the previous "\"
  1013 0000174A 803D(DCC50300)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1014 00001751 F8                  <1>     clc ;Ensure we clear CF if we return via here
  1015 00001752 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the previous char in al if we return
  1016                              <1>     retne   ;Return with rdi untouched and rsi advanced.
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001755 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1017                              <1>     ;Here we have two dots
  1018                              <1>     ;Walk rdi backwards until a \ is found
  1019 00001757 48FFCF              <1>     dec rdi  ;rdi points to current char. Preceeding it is a \. Skip that
  1020 0000175A 66817FFF3A5C        <1>     cmp word [rdi - 1], ":\" ;IF the char preceeding \ is :, then error out
  1021 00001760 7427                <1>     je .aptbPnf
  1022 00001762 66817FFF5C5C        <1>     cmp word [rdi - 1], "\\" ;Similar net name check
  1023 00001768 741F                <1>     je .aptbPnf
  1024                              <1> .aptbPNDotsLp:
  1025 0000176A 48FFCF              <1>     dec rdi
  1026 0000176D 803F5C              <1>     cmp byte [rdi], "\"
  1027 00001770 75F8                <1>     jne .aptbPNDotsLp  ;Keep looping around until it is a "\"
  1028                              <1>     ;Don't go past the pathsep, since we may need to replace it with a null
  1029 00001772 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;Are we in name resolution mode?
  1030 00001779 74C1                <1>     je .aptbOkExit    ;If clear, we are, so just return
  1031 0000177B 4839DF              <1>     cmp rdi, rbx    ;Are we before the start of the path? (i.e in subst?)
  1032 0000177E 7209                <1>     jb .aptbPnf
  1033 00001780 EBBA                <1>     jmp short .aptbOkExit
  1034                              <1> .aptbSearchError:
  1035 00001782 B812000000          <1>     mov eax, errNoFil
  1036 00001787 EB05                <1>     jmp short .aptbErrExit
  1037                              <1> .aptbPnf:
  1038 00001789 B803000000          <1>     mov eax, errPnf
  1039                              <1> .aptbErrExit:
  1040 0000178E F9                  <1>     stc ;Set carry
  1041                              <1>     return
    18                              <2> %%_ret:
    19 0000178F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1042                              <1> 
  1043                              <1> checkDevPath:
  1044                              <1> ;Called only if the file/directory was not found on disk.
  1045                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1046                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1047                              <1> ; and check to see if it is a char device. If it is, build a directory
  1048                              <1> ; If it is not, proceed with the request fail.
  1049                              <1> ;
  1050                              <1> ;Input: rsi = Pointer to the next path spec
  1051                              <1> ;Output: CF=NC => Char device found, directory built
  1052                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1053 00001790 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1054                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001797 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1055 00001799 803D(E6C50300)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1056 000017A0 7459                <1>     je .notOk                      
  1057                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1058 000017A2 50                  <1>     push rax
  1059 000017A3 48B844455620202020- <1>     mov rax, "DEV     "
  1059 000017AC 20                  <1>
  1060 000017AD 483905(DBC50300)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1061 000017B4 58                  <1>     pop rax
  1062 000017B5 7544                <1>     jne .notOk
  1063 000017B7 813D(E3C50300)2020- <1>     cmp dword [fcbName + 8], "   \"
  1063 000017BF 205C                <1>
  1064 000017C1 7538                <1>     jne .notOk
  1065                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1066                              <1>     ; looking for a device driver
  1067                              <1>     ;First append it to rdi 
  1068 000017C3 B84445565C          <1>     mov eax, "DEV\" 
  1069 000017C8 AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1070 000017C9 57                  <1>     push rdi
  1071 000017CA 488D3D(DBC50300)    <1>     lea rdi, fcbName
  1072 000017D1 E84BFAFFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1073                              <1>     ;Returns in al the terminating char of the source string
  1074 000017D6 5F                  <1>     pop rdi
  1075                              <1>     ;If al is a pathsep, fail
  1076 000017D7 E895390000          <1>     call swapPathSeparator
  1077 000017DC 741D                <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1078 000017DE 30C0                <1>     xor al, al
  1079 000017E0 8805(E6C50300)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1080 000017E6 53                  <1>     push rbx
  1081 000017E7 E844000000          <1>     call checkIfCharDevice
  1082 000017EC 5B                  <1>     pop rbx ;Don't need bh yet
  1083 000017ED 720C                <1>     jc .notOk
  1084 000017EF E86D000000          <1>     call buildCharDir
  1085                              <1>     ;Here the device was determined to be a char device.
  1086                              <1>     ;A dummy directory entry was built for it.
  1087                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1088                              <1>     ; Do not Find Next!
  1089                              <1> .copyName:
  1090 000017F4 E870FAFFFF          <1>     call FCBToAsciiz    ;Copy the ASCII form of the name over 
  1091 000017F9 F8                  <1>     clc
  1092                              <1>     return
    18                              <2> %%_ret:
    19 000017FA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1093                              <1> .notOk:
  1094 000017FB B812000000          <1>     mov eax, errNoFil
  1095 00001800 F9                  <1>     stc
  1096                              <1>     return
    18                              <2> %%_ret:
    19 00001801 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1097                              <1> .charDevSearch:
  1098 00001802 53                  <1>     push rbx
  1099 00001803 E828000000          <1>     call checkIfCharDevice
  1100 00001808 5B                  <1>     pop rbx ;Dont need bh yet
  1101 00001809 72F0                <1>     jc .notOk
  1102 0000180B E851000000          <1>     call buildCharDir
  1103 00001810 803D(E6C50300)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1104 00001817 750C                <1>     jne .cds2
  1105 00001819 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1106 0000181D 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1107 0000181F 48FFCF              <1>     dec rdi
  1108 00001822 B02F                <1>     mov al, "/" ;Replace \ with "/"
  1109 00001824 AA                  <1>     stosb   ;Store that and let the dir write the filename
  1110                              <1> .cds2:
  1111 00001825 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1112 0000182C 75C6                <1>     jne .copyName    ;Now jump if in disk search
  1113 0000182E F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1114                              <1>     return
    18                              <2> %%_ret:
    19 0000182F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1115                              <1> 
  1116                              <1> checkIfCharDevice:  ;Int 4Fh AX=1223h
  1117                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1118                              <1> ; device driver chain. 
  1119                              <1> ;Output: CF=CY if not found
  1120                              <1> ;        CF=NC if found
  1121                              <1> ;           BH = Low byte of the device attribute word
  1122 00001830 50                  <1>     push rax
  1123 00001831 57                  <1>     push rdi
  1124 00001832 488B05(DBC50300)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1125 00001839 488D3D(73C00300)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1126                              <1> .checkName:
  1127 00001840 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1128 00001844 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1129 00001846 F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1130 00001849 7406                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1131 0000184B 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1132 0000184F 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1133                              <1> .walkList:
  1134 00001851 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1135 00001854 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1136 0000185B 75E3                <1>     jne .checkName  ;If no, rdi points to char device
  1137 0000185D F9                  <1>     stc
  1138                              <1> .exit:
  1139 0000185E 5F                  <1>     pop rdi
  1140 0000185F 58                  <1>     pop rax
  1141                              <1>     return
    18                              <2> %%_ret:
    19 00001860 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1142                              <1> 
  1143                              <1> buildCharDir:
  1144                              <1> ;Build a dummy directory entry for the char device in FCBName
  1145                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1146 00001861 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1147                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001868 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1148 0000186A 50                  <1>     push rax
  1149 0000186B 57                  <1>     push rdi
  1150 0000186C C605(E6C50300)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1151 00001873 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
  1152                              <1>     ;Zero the directory copy (32 bytes)
  1153 0000187A 50                  <1>     push rax
  1154 0000187B 51                  <1>     push rcx
  1155 0000187C 57                  <1>     push rdi
  1156 0000187D 31C0                <1>     xor eax, eax    ;Zero rax
  1157 0000187F B904000000          <1>     mov ecx, 4
  1158 00001884 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1159 00001887 5F                  <1>     pop rdi
  1160 00001888 59                  <1>     pop rcx
  1161 00001889 58                  <1>     pop rax
  1162 0000188A 488B05(DBC50300)    <1>     mov rax, qword [fcbName]
  1163 00001891 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1164 00001894 B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1165 00001899 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1166 0000189C C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1167                              <1>     ;Get date and time and set the write time in the directory entry
  1168 000018A0 E8B0100000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1169 000018A5 E896110000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1170 000018AA 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1171 000018AD 31C0                <1>     xor eax, eax
  1172 000018AF 5F                  <1>     pop rdi
  1173 000018B0 58                  <1>     pop rax
  1174                              <1>     return
    18                              <2> %%_ret:
    19 000018B1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1175                              <1> 
  1176                              <1> checkFailingComp:
  1177                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1178                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1179                              <1> ;Returns: ZF=ZE => Last path componant
  1180                              <1> ;         ZF=NZ => Not last path componant
  1181 000018B2 50                  <1>     push rax
  1182 000018B3 8A05(E6C50300)      <1>     mov al, byte [fcbName + 11]
  1183 000018B9 84C0                <1>     test al, al
  1184 000018BB 58                  <1>     pop rax
  1185                              <1>     return
    18                              <2> %%_ret:
    19 000018BC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    25                                  %include "./Source/Kernel/FAT/dirfun.asm"
    26                              <1> ;---------------------------------------------------:
    27                              <1> ;                   KERNEL FUNCTIONS                :
    28                              <1> ;---------------------------------------------------:
    29                              <1> makeDIR:           ;ah = 39h
    30                              <1> ;For make, the path must exist but the final componant must not exist.
    31                              <1> ;Input: rdx = Pointer to ASCIIZ string
    32 000018BD 4889D7              <1>     mov rdi, rdx
    33 000018C0 E8DE380000          <1>     call strlen
    34 000018C5 81F940000000        <1>     cmp ecx, 64
    35 000018CB 7607                <1>     jbe .okLength
    36                              <1> .badPath:
    37 000018CD B003                <1>     mov al, errPnf
    38 000018CF E9EB3B0000          <1>     jmp extErrExit
    39                              <1> .okLength:
    40 000018D4 4889D6              <1>     mov rsi, rdx
    41 000018D7 E831390000          <1>     call checkPathspecOK
    42 000018DC 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
    43                              <1> .pathOk:
    44 000018DE E8A6390000          <1>     call scanPathWC
    45 000018E3 72E8                <1>     jc .badPath ;Dont allow wildcards
    46                              <1>     ;Path is ok, now proceed
    47 000018E5 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
    48 000018EC E86DFAFFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
    49                              <1>     ;If the path exists, exit error
    50 000018F1 0F83C83B0000        <1>     jnc extErrExit
    51                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    52 000018F7 E8B6FFFFFF          <1>     call checkFailingComp
    53 000018FC 0F85BD3B0000        <1>     jnz extErrExit
    54                              <1>     ;So all is well, the new subdirectories name is in fcbName
    55                              <1>     ;The parent dir's directory entry is in the curDirCopy
    56 00001902 E8E3360000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    57                              <1>     ;returns in rdi the working cds ptr
    58 00001907 7312                <1>     jnc .notNet
    59 00001909 B803110000          <1>     mov eax, 1103h
    60 0000190E CD4F                <1>     int 4fh
    61 00001910 0F82A93B0000        <1>     jc extErrExit
    62 00001916 E9963B0000          <1>     jmp extGoodExit
    63                              <1> .notNet:
    64 0000191B E8603B0000          <1>     call dosCrit1Enter
    65                              <1>     ;Current dpb ptr is already set
    66                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    67                              <1>     ;First we make a dummy dir in curDirCopy
    68 00001920 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
    69 00001927 488D35(DBC50300)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    70 0000192E 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
    71 00001935 48A5                <1>     movsq   ;Copy the name over
    72 00001937 A5                  <1>     movsd
    73 00001938 E818100000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    74 0000193D E8FE100000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    75 00001942 8905(C9C50300)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    76 00001948 8905(D1C50300)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    77 0000194E 31C0                <1>     xor eax, eax
    78 00001950 8905(D7C50300)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    79 00001956 C605(C6C50300)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    80 0000195D 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]
    81                              <1> .searchForDirSpace:
    82 00001963 8905(D6C60300)      <1>     mov dword [dirClustA], eax
    83 00001969 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    84 0000196B 668905(DAC60300)    <1>     mov word [dirSect], ax
    85 00001972 8905(DCC60300)      <1>     mov dword [dirEntry], eax
    86 00001978 E882040000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    87 0000197D 7328                <1>     jnc .dirEntryFnd
    88 0000197F 813D(D2C60300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    88 00001987 0000                <1>
    89 00001989 0F8456010000        <1>     je .bad ;Set CF and exit
    90 0000198F E87C050000          <1>     call growDirectory  ;Increase directory size by 1 cluster
    91 00001994 0F824B010000        <1>     jc .bad
    92 0000199A 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    93 0000199F 0F8440010000        <1>     je .bad
    94                              <1>     ;Else eax = Newly allocated cluster
    95 000019A5 EBBC                <1>     jmp short .searchForDirSpace
    96                              <1> .dirEntryFnd:
    97                              <1> ;rdi points to current directory copy
    98                              <1> ;rsi now points to offset in the buffer to write the entry to
    99                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
   100 000019A7 488B1D(90C60300)    <1>     mov rbx, qword [currBuff]
   101 000019AE 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   102                              <1>      
   103 000019B2 488905(98C60300)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
   104 000019B9 4881C330000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   105 000019C0 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
   106 000019C3 668935(A0C60300)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
   107                              <1> ;Must now request a cluster and sanitise it
   108 000019CA E8E8F2FFFF          <1>     call startNewChain  ;Get cluster number in eax
   109 000019CF 0F8215010000        <1>     jc .badExit
   110 000019D5 E869050000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax
   111 000019DA 0F820A010000        <1>     jc .badExit
   112                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
   113 000019E0 668905(D5C50300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   114 000019E7 C1E810              <1>     shr eax, 10h    ;Get high word low
   115 000019EA 668905(CFC50300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   116 000019F1 488B05(98C60300)    <1>     mov rax, qword [tempSect]   ;Get the sector back
   117 000019F8 E822F1FFFF          <1>     call getBufForDirNoFile
   118 000019FD 0F82E7000000        <1>     jc .badExit
   119 00001A03 0FB705(A0C60300)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
   120 00001A0A 488D35(BBC50300)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
   121 00001A11 488D7C0330          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
   122 00001A16 B904000000          <1>     mov ecx, 4
   123 00001A1B F348A5              <1>     rep movsq   ;Copy over the buffered directory
   124 00001A1E E86DEFFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   125                              <1>     ;Now need to read in data sector and make two entries . and ..
   126 00001A23 48B82E202020202020- <1>     mov rax, ".       "
   126 00001A2C 20                  <1>
   127 00001A2D 488905(BBC50300)    <1>     mov qword [curDirCopy], rax
   128 00001A34 B820202020          <1>     mov eax, "    "
   129 00001A39 668905(C3C50300)    <1>     mov word [curDirCopy + 8], ax
   130 00001A40 8805(C5C50300)      <1>     mov byte [curDirCopy + 10], al
   131 00001A46 0FB705(D5C50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   132 00001A4D 0FB715(CFC50300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   133 00001A54 C1E210              <1>     shl edx, 10h
   134 00001A57 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   135 00001A59 E8DFF1FFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   136 00001A5E E8BCF0FFFF          <1>     call getBufForDirNoFile
   137 00001A63 0F8281000000        <1>     jc .badExit
   138                              <1>     ;rbx has buffer pointer now
   139 00001A69 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   140 00001A70 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   141 00001A74 B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   142 00001A79 F348A5              <1>     rep movsq
   143 00001A7C 488B5B0A            <1>     mov rbx, qword [rbx + bufferHdr.bufferLBA]  ;Save this sector for now
   144 00001A80 E80BEFFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   145                              <1>     ;Now create .. entry
   146 00001A85 C605(BCC50300)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   147 00001A8C 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   148 00001A92 E838F1FFFF          <1>     call getFATtype
   149 00001A97 81F902000000        <1>     cmp ecx, 2
   150 00001A9D 7207                <1>     jb .notFAT32
   151 00001A9F 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   152 00001AA2 7502                <1>     jne .notFAT32
   153 00001AA4 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   154                              <1> .notFAT32:
   155 00001AA6 668905(D5C50300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   156 00001AAD C1E810              <1>     shr eax, 10h
   157 00001AB0 668905(CFC50300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   158 00001AB7 4889D8              <1>     mov rax, rbx  ;Get this sector back again
   159 00001ABA E860F0FFFF          <1>     call getBufForDirNoFile
   160 00001ABF 7229                <1>     jc .badExit
   161 00001AC1 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   162 00001AC8 488D7B50            <1>     lea rdi, qword [rbx + bufferHdr.dataarea + fatDirEntry_size]    ;Next entry!
   163 00001ACC B904000000          <1>     mov ecx, 4
   164 00001AD1 F348A5              <1>     rep movsq
   165 00001AD4 E8B7EEFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   166                              <1>     ;Now I need to write the entry in the Parent Directory
   167                              <1> .okExit:
   168                              <1>     ;AND WE ARE DONE!
   169 00001AD9 E8AC390000          <1>     call dosCrit1Exit
   170 00001ADE 31C0                <1>     xor eax, eax
   171 00001AE0 E9CC390000          <1>     jmp extGoodExit
   172                              <1> .bad:
   173 00001AE5 B805000000          <1>     mov eax, errAccDen
   174                              <1> .badExit:
   175 00001AEA E89B390000          <1>     call dosCrit1Exit
   176 00001AEF E9CB390000          <1>     jmp extErrExit
   177                              <1> 
   178                              <1> removeDIR:         ;ah = 3Ah
   179 00001AF4 4889D7              <1>     mov rdi, rdx
   180 00001AF7 E8A7360000          <1>     call strlen
   181 00001AFC 81F940000000        <1>     cmp ecx, 64
   182 00001B02 7607                <1>     jbe .okLength
   183                              <1> .badPath:
   184 00001B04 B003                <1>     mov al, errPnf
   185 00001B06 E9B4390000          <1>     jmp extErrExit
   186                              <1> .okLength:
   187 00001B0B 4889D6              <1>     mov rsi, rdx
   188 00001B0E E8FA360000          <1>     call checkPathspecOK
   189 00001B13 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   190                              <1> .pathOk:
   191 00001B15 E86F370000          <1>     call scanPathWC
   192 00001B1A 72E8                <1>     jc .badPath ;Dont allow wildcards
   193                              <1>     ;Path is ok, now proceed
   194 00001B1C 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   195 00001B23 E836F8FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   196 00001B28 72DA                <1>     jc .badPath    ;Path Doesn't exist
   197 00001B2A E8BB340000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   198 00001B2F 7312                <1>     jnc .notNet
   199 00001B31 B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   200 00001B36 CD4F                <1>     int 4fh
   201 00001B38 0F8281390000        <1>     jc extErrExit
   202 00001B3E E96E390000          <1>     jmp extGoodExit
   203                              <1> .notNet:
   204 00001B43 E838390000          <1>     call dosCrit1Enter
   205 00001B48 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   206                              <1>     ;Now let use check that our directory is not the CDS currentdir
   207 00001B4F 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]
   208 00001B56 488D3D(7FC40300)    <1>     lea rdi, buffer1
   209 00001B5D E841360000          <1>     call strlen ;Get the length of the full qualified name in ecx
   210 00001B62 66890D(A0C60300)    <1>     mov word [pathLen], cx
   211 00001B69 E84C360000          <1>     call strcmp ;Then compare rdi to CDS string
   212 00001B6E 750F                <1>     jnz .notEqual
   213 00001B70 B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   214 00001B75 E810390000          <1>     call dosCrit1Exit
   215 00001B7A E940390000          <1>     jmp extErrExit
   216                              <1> .notEqual:
   217 00001B7F 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   218                              <1>     ;If the given path length is one more than the backslash offset
   219                              <1>     ; due to the terminating null, then the user is trying to delete the 
   220                              <1>     ; root dir. Fail this.
   221 00001B82 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   222 00001B86 FFC1                <1>     inc ecx
   223 00001B88 663B0D(A0C60300)    <1>     cmp cx, word [pathLen]
   224 00001B8F 0F8415010000        <1>     je .accessDenied
   225 00001B95 E879020000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   226                              <1>     ;for the entry in the sector we are hoping to delete
   227 00001B9A 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   228 00001BA1 C1E010              <1>     shl eax, 10h
   229 00001BA4 0FB71D(D5C50300)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   230 00001BAB 09D8                <1>     or eax, ebx
   231 00001BAD 8905(D2C60300)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   232 00001BB3 E885F0FFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   233 00001BB8 E862EFFFFF          <1>     call getBufForDirNoFile
   234 00001BBD 0F82EC000000        <1>     jc .exitBad
   235                              <1>     ;rbx points to buffer
   236 00001BC3 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   237 00001BC7 48B82E202020202020- <1>     mov rax, ".       "
   237 00001BD0 20                  <1>
   238 00001BD1 483906              <1>     cmp qword [rsi], rax
   239 00001BD4 0F85D0000000        <1>     jne .accessDenied
   240 00001BDA B42E                <1>     mov ah, "." ;Screw the partial stall
   241 00001BDC 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   242 00001BE0 0F85C4000000        <1>     jne .accessDenied
   243 00001BE6 4881C620000000      <1>     add rsi, fatDirEntry_size
   244 00001BED 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
   245 00001BF4 B904000000          <1>     mov ecx, 4
   246 00001BF9 F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   247                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   248                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   249 00001BFC 488D3D(DBC50300)    <1>     lea rdi, fcbName
   250 00001C03 B03F                <1>     mov al, "?"
   251 00001C05 B90B000000          <1>     mov ecx, 11
   252 00001C0A F3AA                <1>     rep stosb   ;Store the pattern to search for
   253 00001C0C 30C0                <1>     xor al, al  ;Store a terminating zero
   254 00001C0E AA                  <1>     stosb
   255 00001C0F 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   256 00001C15 50                  <1>     push rax    ;Save on stack temporarily
   257 00001C16 8905(D6C60300)      <1>     mov dword [dirClustA], eax
   258 00001C1C 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   259 00001C1E 668905(DAC60300)    <1>     mov word [dirSect], ax
   260 00001C25 C705(DCC60300)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   260 00001C2D 0000                <1>
   261 00001C2F C605(56C60300)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   262 00001C36 58                  <1>     pop rax
   263 00001C37 E801F0FFFF          <1>     call getStartSectorOfCluster
   264 00001C3C E800EFFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   265 00001C41 726C                <1>     jc .exitBad
   266 00001C43 E80FF5FFFF          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   267 00001C48 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   268 00001C4F 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   269 00001C55 E85AF4FFFF          <1>     call searchDir.rmdirEP
   270 00001C5A 734E                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   271                              <1>     ;Else, this is a empty dir, we can remove it
   272                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   273 00001C5C 488B05(98C60300)    <1>     mov rax, qword [tempSect]
   274 00001C63 E8D9EEFFFF          <1>     call getBufForDOS
   275 00001C68 7245                <1>     jc .exitBad
   276 00001C6A E8E8F4FFFF          <1>     call adjustDosDirBuffer
   277 00001C6F 0FB705(A0C60300)    <1>     movzx eax, word [entry]
   278 00001C76 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   279 00001C7A 4801C6              <1>     add rsi, rax    
   280 00001C7D 8A05(62C60300)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   281 00001C83 8806                <1>     mov byte [rsi], al  ;Store delchar there
   282 00001C85 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   283 00001C89 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   284 00001C8D E8FEECFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   285 00001C92 C1E210              <1>     shl edx, 10h
   286 00001C95 09D0                <1>     or eax, edx
   287                              <1>     ;Now remove the FAT chain
   288 00001C97 E845F1FFFF          <1>     call unlinkFAT
   289 00001C9C 7211                <1>     jc .exitBad
   290 00001C9E E8E7370000          <1>     call dosCrit1Exit
   291 00001CA3 31C0                <1>     xor eax, eax
   292 00001CA5 E907380000          <1>     jmp extGoodExit
   293                              <1> .accessDenied:
   294 00001CAA B805000000          <1>     mov eax, errAccDen
   295                              <1> .exitBad:
   296 00001CAF F9                  <1>     stc
   297 00001CB0 E8D5370000          <1>     call dosCrit1Exit
   298 00001CB5 E905380000          <1>     jmp extErrExit
   299                              <1> 
   300                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   301                              <1> ;Input: rdx = Pointer to ASCIIZ string
   302 00001CBA 4889D7              <1>     mov rdi, rdx
   303 00001CBD E8E1340000          <1>     call strlen
   304 00001CC2 81F940000000        <1>     cmp ecx, 64
   305 00001CC8 7607                <1>     jbe .okLength
   306                              <1> .badPath:
   307 00001CCA B003                <1>     mov al, errPnf
   308 00001CCC E9EE370000          <1>     jmp extErrExit
   309                              <1> .okLength:
   310 00001CD1 4889D6              <1>     mov rsi, rdx
   311 00001CD4 E834350000          <1>     call checkPathspecOK
   312 00001CD9 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   313 00001CDB E8A9350000          <1>     call scanPathWC
   314 00001CE0 72E8                <1>     jc .badPath ;Or wildcards
   315 00001CE2 E8E4350000          <1>     call checkPathNet
   316 00001CE7 74E1                <1>     jz .badPath ;Or Net paths
   317                              <1>     ;Path is ok, now proceed
   318 00001CE9 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   319 00001CF0 E869F6FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   320 00001CF5 0F82C4370000        <1>     jc extErrExit   ;Exit with error code in eax
   321                              <1>     ;The path must've been ok, so now copy the path into the CDS
   322                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   323 00001CFB 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Copy the CDS to the tmpCDS
   324 00001D02 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   325 00001D08 756D                <1>     jnz .net    ;This is done by the redirector for redirector drives
   326 00001D0A 488D3D(FBC50300)    <1>     lea rdi, tmpCDS
   327 00001D11 B95B000000          <1>     mov ecx, cds_size
   328 00001D16 F3A4                <1>     rep movsb
   329                              <1>     ;If the path is longer than 67, call it an invalid path
   330 00001D18 488D3D(7FC40300)    <1>     lea rdi, buffer1
   331 00001D1F E87F340000          <1>     call strlen ;Get the length of this path
   332 00001D24 81F943000000        <1>     cmp ecx, 67
   333 00001D2A 779E                <1>     ja .badPath
   334 00001D2C 4889FE              <1>     mov rsi, rdi    ;Move buffer source to rsi
   335 00001D2F 488D3D(FBC50300)    <1>     lea rdi, tmpCDS
   336 00001D36 F3A4                <1>     rep movsb   ;Copy the path over
   337                              <1>     ;Now get the start cluster from the directory copy
   338 00001D38 0FB715(D5C50300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   339 00001D3F 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   340 00001D46 C1E010              <1>     shl eax, 10h
   341 00001D49 09D0                <1>     or eax, edx ;Add low bits to eax
   342 00001D4B 8905(48C60300)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   343 00001D51 488D35(FBC50300)    <1>     lea rsi, tmpCDS
   344 00001D58 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   345 00001D5F B95B000000          <1>     mov ecx, cds_size
   346 00001D64 E817370000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   347 00001D69 F3A4                <1>     rep movsb
   348 00001D6B E81A370000          <1>     call dosCrit1Exit
   349 00001D70 31C0                <1>     xor eax, eax
   350 00001D72 E93A370000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   351                              <1> .net:
   352                              <1> ;SDA Vars are setup for this request
   353 00001D77 B805110000          <1>     mov eax, 1105h
   354 00001D7C CD4F                <1>     int 4fh
   355 00001D7E 0F823B370000        <1>     jc extErrExit
   356 00001D84 E928370000          <1>     jmp extGoodExit
   357                              <1> getCurrentDIR:     ;ah = 47h
   358                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   359                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   360 00001D89 88D0                <1>     mov al, dl  ;Move drive number into al
   361 00001D8B E854330000          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   362 00001D90 0F8229370000        <1>     jc extErrExit
   363                              <1> .okDrive:
   364 00001D96 4889F7              <1>     mov rdi, rsi    ;Save destination in rdi
   365 00001D99 E8E2360000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   366 00001D9E 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]  ;Get pointer to current CDS in rsi
   367 00001DA5 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   368 00001DA9 FFC0                <1>     inc eax ;Go past the backslash
   369 00001DAB 4801C6              <1>     add rsi, rax ;Add this many chars to rsi to point to first char to copy
   370 00001DAE E8FF330000          <1>     call strcpy
   371 00001DB3 E8D2360000          <1>     call dosCrit1Exit
   372 00001DB8 B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   373 00001DBD E9EF360000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   374                              <1> 
   375                              <1> getSetFileDateTime:;ah = 57h
   376                              <1> trueName:          ;ah = 60h, get fully qualified name. Int 4Fh, AX=1221h
   377                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   378 00001DC2 E846340000          <1>     call checkPathspecOK    ;This preserves rsi
   379 00001DC7 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   380 00001DC9 740A                <1>     jz .pathspecOk  ;If the last char in the path is malformed allow it here
   381                              <1> .badPath:
   382 00001DCB B803000000          <1>     mov eax, errPnf
   383 00001DD0 E9EA360000          <1>     jmp extErrExit
   384                              <1> .pathspecOk:
   385 00001DD5 57                  <1>     push rdi    ;Save the destination
   386 00001DD6 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   387 00001DDD E85DF5FFFF          <1>     call canonicaliseFileName
   388 00001DE2 C60700              <1>     mov byte [rdi], 0   ;Store a terminating zero if necessary
   389 00001DE5 5F                  <1>     pop rdi
   390 00001DE6 0F82D3360000        <1>     jc extErrExit
   391 00001DEC 488D35(7FC40300)    <1>     lea rsi, buffer1
   392 00001DF3 E8BA330000          <1>     call strcpy
   393 00001DF8 31C0                <1>     xor eax, eax
   394 00001DFA E9B2360000          <1>     jmp extGoodExit
   395                              <1> 
   396                              <1> ;-----------------------------------
   397                              <1> ;    General Directory Routines    :
   398                              <1> ;-----------------------------------
   399                              <1> 
   400                              <1> findFreeDiskDirEntry:
   401                              <1> ;Find a space in the directory we are searching for a directory entry
   402                              <1> ;Accept first entry starting with a 0E5h or 00h
   403                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   404                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   405                              <1> ; be called for CDS's that are NOT net CDS's).
   406                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   407                              <1> ;       Directory vars must be set up for the directory we are searching in
   408                              <1> ;Output: CF=CY => Error, eax has error code
   409                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   410 00001DFF 8A05(62C60300)      <1>     mov al, byte [delChar]
   411 00001E05 8805(DBC50300)      <1>     mov byte [fcbName], al
   412 00001E0B E867F2FFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   413                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00001E10 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00001E12 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   414                              <1> ;Free entry found, dir variables are set for the free entry. 
   415                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   416                              <1> getDiskDirectoryEntry:
   417                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   418                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   419                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   420                              <1> ;        qword [tempSect] = Disk sector number of directory
   421                              <1> ;        word [entry] = 32 byte offset into sector
   422                              <1> ;        CF=CY => Error, exit 
   423 00001E13 53                  <1>     push rbx
   424 00001E14 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  
   425                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   426                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   427 00001E1A 0FB71D(DAC60300)    <1>     movzx ebx, word [dirSect]
   428 00001E21 85C0                <1>     test eax, eax
   429 00001E23 7407                <1>     jz .skipCluster
   430 00001E25 E813EEFFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   431 00001E2A EB0C                <1>     jmp short .skipOldFat
   432                              <1> .skipCluster:
   433 00001E2C 55                  <1>     push rbp
   434 00001E2D 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   435 00001E34 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   436 00001E37 5D                  <1>     pop rbp
   437                              <1> .skipOldFat:
   438 00001E38 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   439 00001E3B 488905(98C60300)    <1>     mov qword [tempSect], rax   ;Save this sector number
   440 00001E42 E8FAECFFFF          <1>     call getBufForDOS   ;Get buffer for DOS in rbx
   441 00001E47 5B                  <1>     pop rbx
   442                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001E48 72C8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   443 00001E4A 53                  <1>     push rbx
   444 00001E4B 488B1D(90C60300)    <1>     mov rbx, qword [currBuff]
   445 00001E52 E800F3FFFF          <1>     call adjustDosDirBuffer ;Change buffer to Dir buffer
   446                              <1>     ;Above function gets data buffer ptr in rsi
   447 00001E57 0FB705(DAC60300)    <1>     movzx eax, word [dirSect]   ;Get the sector in which the offset lies
   448 00001E5E 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   449 00001E62 F7E3                <1>     mul ebx ;Multiply these two words so eax has number of bytes to
   450                              <1>     ; the current sector
   451 00001E64 C1E805              <1>     shr eax, 5  ;Divide by 32 to get the number of dir entries we are skipping
   452 00001E67 8B1D(DCC60300)      <1>     mov ebx, dword [dirEntry]   ;Get offset into dir file cluster
   453 00001E6D 29C3                <1>     sub ebx, eax    ;Now ebx has the dir entry offset in the current sector
   454 00001E6F C1E305              <1>     shl ebx, 5  ;Multiply by 32 to get byte offset
   455 00001E72 66891D(A0C60300)    <1>     mov word [entry], bx  ;Save 32 byte offset into sector
   456 00001E79 4801DE              <1>     add rsi, rbx    ;rsi now points to the entry
   457 00001E7C 5B                  <1>     pop rbx
   458                              <1>     return
    18                              <2> %%_ret:
    19 00001E7D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   459                              <1> 
   460                              <1> 
   461                              <1> updateDirectoryEntryForFile:    
   462                              <1> ;Updates the directory entry for disk files
   463                              <1> ;Called with:
   464                              <1> ;   [workingDPB] = DPB pointer for the disk device
   465                              <1> ;   [currentSFT] = Current SFT pointer
   466 00001E7E 50                  <1>     push rax
   467 00001E7F 53                  <1>     push rbx
   468 00001E80 57                  <1>     push rdi
   469 00001E81 55                  <1>     push rbp
   470                              <1> 
   471 00001E82 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   472 00001E89 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   473 00001E90 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
   474 00001E96 751D                <1>     jnz .skipDT
   475                              <1>     ;Get date and time words and add them to the directory entry
   476 00001E98 E8B80A0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   477 00001E9D 726C                <1>     jc .exit  ;If we fail to get time/date, fail the request
   478                              <1>     ;Build date and time words
   479 00001E9F E89C0B0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   480                              <1>     ;Update SFT fields
   481 00001EA4 66894713            <1>     mov word [rdi + sft.wTime], ax
   482 00001EA8 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   483 00001EAB 66894715            <1>     mov word [rdi + sft.wDate], ax
   484 00001EAF 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush  ;We update DT, so flush
   485                              <1> .skipDT:
   486                              <1> ;Before we read the dir sector in, if we never wrote to the disk
   487                              <1> ; we skip all of this
   488 00001EB5 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
   489 00001EBB 744E                <1>     jz .exit ;If the file was never written to, don't bother updating DIR data
   490 00001EBD 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   491 00001EC1 E889ECFFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
   492 00001EC6 7243                <1>     jc .exit    ;If an error is to be returned from, we skip the rest of this
   493                              <1>     ;Now we write the changes to the sector
   494                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
   495 00001EC8 E8C3EAFFFF          <1>     call setBufferDirty
   496 00001ECD 488D6B30            <1>     lea rbp, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   497 00001ED1 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   498 00001ED5 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   499 00001ED8 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
   500 00001EDB 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
   501 00001EDE 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
   502 00001EE1 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
   503 00001EE5 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
   504 00001EE9 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
   505 00001EED 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
   506 00001EF1 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
   507 00001EF5 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
   508 00001EF8 6689451A            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusLo], ax
   509 00001EFC C1E810              <1>     shr eax, 10h
   510 00001EFF 66894514            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusHi], ax
   511                              <1>     ;Directory sector updated and marked to be flushed to disk!
   512                              <1>     ;Now mark that the file has sectors not yet flushed to disk
   513                              <1>      
   514 00001F03 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
   515 00001F04 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush
   516 00001F0A 9D                  <1>     popfq
   517                              <1> .exit:
   518 00001F0B 5D                  <1>     pop rbp
   519 00001F0C 5F                  <1>     pop rdi
   520 00001F0D 5B                  <1>     pop rbx
   521 00001F0E 58                  <1>     pop rax
   522                              <1>     return
    18                              <2> %%_ret:
    19 00001F0F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   523                              <1> 
   524                              <1> growDirectory:
   525                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   526                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   527                              <1> ;                 eax = New Cluster number
   528                              <1> ;               TWO NON CF ERROR CASES.
   529                              <1> ;               If eax = -1 => disk full!
   530                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   531                              <1> ;        CF=CY => Something went wrong. Rip. 
   532 00001F10 53                  <1>     push rbx
   533 00001F11 51                  <1>     push rcx
   534 00001F12 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   535 00001F18 85C0                <1>     test eax, eax
   536 00001F1A 7424                <1>     jz .exit
   537 00001F1C E849EDFFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   538 00001F21 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   539 00001F23 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   540 00001F28 E8ABEDFFFF          <1>     call allocateClusters   ;ebx has last cluster value
   541 00001F2D 7211                <1>     jc .exit
   542 00001F2F 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   543 00001F31 E8E1EEFFFF          <1>     call readFAT
   544 00001F36 7208                <1>     jc .exit
   545 00001F38 E806000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   546 00001F3D 7201                <1>     jc .exit
   547 00001F3F F8                  <1>     clc
   548                              <1> .exit:
   549 00001F40 59                  <1>     pop rcx
   550 00001F41 5B                  <1>     pop rbx
   551                              <1>     return   
    18                              <2> %%_ret:
    19 00001F42 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   552                              <1> sanitiseCluster:
   553                              <1> ;Sanitises the cluster in eax to all zeros
   554                              <1> ;Does not move file pointers
   555                              <1> ;Currently, is only called to sanitise subdirectory clusters
   556                              <1> ;Input: eax = Cluster number
   557                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   558                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   559                              <1> ;        If CF=CY => Error, exit
   560 00001F43 50                  <1>     push rax
   561 00001F44 53                  <1>     push rbx
   562 00001F45 51                  <1>     push rcx
   563 00001F46 52                  <1>     push rdx
   564 00001F47 56                  <1>     push rsi
   565 00001F48 55                  <1>     push rbp
   566 00001F49 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   567 00001F50 E8E8ECFFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   568 00001F55 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   569 00001F59 FFC2                <1>     inc edx ;Make it a count of sectors
   570                              <1> .getSectorInCluster:
   571 00001F5B E8A2EBFFFF          <1>     call getBufForDataNoFile  ;Get a generic data buffer in rbx
   572 00001F60 721E                <1>     jc .exitBad
   573 00001F62 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   574 00001F66 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   575 00001F6A 31C0                <1>     xor eax, eax
   576 00001F6C F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   577 00001F6E E81DEAFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   578                              <1> 
   579 00001F73 FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   580 00001F75 740A                <1>     jz .exit    ;Jump if we done
   581 00001F77 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   582 00001F7B 48FFC0              <1>     inc rax ;Goto next sector in cluster
   583 00001F7E EBDB                <1>     jmp short .getSectorInCluster
   584                              <1> .exitBad:
   585 00001F80 F9                  <1>     stc
   586                              <1> .exit:
   587 00001F81 5D                  <1>     pop rbp
   588 00001F82 5E                  <1>     pop rsi
   589 00001F83 5A                  <1>     pop rdx
   590 00001F84 59                  <1>     pop rcx
   591 00001F85 5B                  <1>     pop rbx
   592 00001F86 58                  <1>     pop rax
   593                              <1>     return
    18                              <2> %%_ret:
    19 00001F87 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    26                                  %include "./Source/Kernel/FileIO/devio.asm"
    27                              <1> ;This file contains the primitive dev io function, which will be called 
    28                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
    29                              <1> ; make requests for device IO.
    30                              <1> 
    31                              <1> mainCharIO:
    32                              <1> ;This is the main IO clearing function for Char IO.
    33                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
    34                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
    35                              <1> ;
    36                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    37                              <1> ;       ah = {0,..., 5}, a subfunction number
    38                              <1> ;       Function 0: Read Char (drvREAD)
    39                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    40                              <1> ;       Function 2: Write Char (drvWrite)
    41                              <1> ; In the case the below functions are called for Disk/Net files
    42                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    43                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    44                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    45                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    46                              <1> ;
    47                              <1> ; If and only if ah = 02h, al = Char to write to device
    48                              <1> ;
    49                              <1> ;
    50                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    51                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    52                              <1> ;                                           ZF = NZ => Device ready (not busy)
    53                              <1> ;                                               If ND read, AL = Next Char
    54                              <1> ; For Files/Net:
    55                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    56                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    57                              <1> ;           For Read and ND Read:
    58                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    59                              <1> ;               Read returns ^Z on EOF.
    60                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    61                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    62                              <1> ;
    63                              <1> ;All registers preserved EXCEPT for ax and flags
    64                              <1> 
    65                              <1> ;Reference Request Header
    66                              <1> ;Common Section:
    67                              <1> ;    .hdrlen resb 1  ;Length of the request header
    68                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    69                              <1> ;    .cmdcde resb 1  ;Command code
    70                              <1> ;    .status resw 1  ;Status word
    71                              <1> ;    .devptr resq 1  ;Reserved. Unused
    72                              <1> ;Below used by calls 0,1,2,5
    73                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    74                              <1> ;Below used by calls 0,2
    75                              <1> ;    .bufptr resq 1
    76                              <1> ;    .tfrlen resd 1
    77                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    78                              <1> ;    .strtsc resq 1
    79                              <1> ;    .desptr resq 1
    80                              <1> 
    81                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    82 00001F88 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    83 00001F89 488D1D(7DC40300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    84 00001F90 48891D(06C40300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    85 00001F97 5B                  <1>     pop rbx
    86 00001F98 C705(0EC40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    86 00001FA0 0000                <1>
    87 00001FA2 668905(7DC40300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    88 00001FA9 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    89 00001FAF 0F85A1000000        <1>     jnz .notChar
    90 00001FB5 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    91 00001FBB 0F8495000000        <1>     jz .notChar
    92                              <1> ;Char devices only here
    93 00001FC1 E8A3340000          <1>     call dosPushRegs    ;Save context here
    94 00001FC6 488D1D74E0FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    95 00001FCD 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    96 00001FD0 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    97 00001FD3 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    98 00001FD6 890D(F8C30300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    99                              <1>     ;Now set up cx for status word
   100 00001FDC 31C9                <1>     xor ecx, ecx
   101 00001FDE 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
   102 00001FE1 7506                <1>     jne .skipBsySet
   103 00001FE3 81C900020000        <1>     or ecx, drvBsyStatus
   104                              <1> .skipBsySet:
   105 00001FE9 66870D(FBC30300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
   106                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
   107 00001FF0 488D1D(F8C30300)    <1>     lea rbx, secdReqHdr
   108 00001FF7 E83B2C0000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
   109 00001FFC 668B3D(FBC30300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
   110 00002003 F7C700800000        <1>     test edi, drvErrStatus
   111 00002009 752D                <1>     jnz .error
   112                              <1> .ignoreRet:
   113 0000200B 803D(FAC30300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
   114 00002012 750C                <1>     jne .notNDRead
   115 00002014 8A05(05C40300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
   116 0000201A 8805(7DC40300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
   117                              <1> .notNDRead:
   118 00002020 8A25(FCC30300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
   119 00002026 F6D4                <1>     not ah
   120 00002028 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
   121 0000202B E822340000          <1>     call dosPopRegs ;Get back the context
   122 00002030 668B05(7DC40300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
   123                              <1>     return ;Return to caller
    18                              <2> %%_ret:
    19 00002037 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   124                              <1> .error:
   125                              <1>     ;cl has flags
   126 00002038 88CC                <1>     mov ah, cl
   127 0000203A E8CF2A0000          <1>     call charDevErr
   128 0000203F 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   129 00002041 750A                <1>     jne .errorIgnore
   130                              <1>     ;Fallthrough => Retry
   131 00002043 E80A340000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   132 00002048 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   133                              <1> .errorIgnore:
   134                              <1>     ;Clear the busy bit in the status word
   135 0000204D 8025(FCC30300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   136 00002054 EBB5                <1>     jmp short .ignoreRet
   137                              <1> .notChar:
   138                              <1> ;Just return with ZF=NZ for now
   139 00002056 50                  <1>     push rax
   140 00002057 31C0                <1>     xor eax, eax
   141 00002059 FEC0                <1>     inc al
   142 0000205B 58                  <1>     pop rax
   143                              <1>     return
    18                              <2> %%_ret:
    19 0000205C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> 
   145                              <1> openSFT:
   146                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   147                              <1> ;Input: rdi = SFT pointer
   148 0000205D E807340000          <1>     call dosPushRegs
   149 00002062 B00D                <1>     mov al, drvOPEN
   150 00002064 EB07                <1>     jmp short openCloseCommon
   151                              <1> closeSFT:
   152                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   153 00002066 E8FE330000          <1>     call dosPushRegs
   154 0000206B B00E                <1>     mov al, drvCLOSE
   155                              <1> openCloseCommon:
   156                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   157 0000206D 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   158 00002073 7469                <1>     jz .exit    ;Exit if so
   159 00002075 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   160 00002079 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   161 0000207D 7512                <1>     jnz .charDev
   162                              <1>     ;Here a disk drive, rdi is a DPB ptr
   163 0000207F 803D(36C30300)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   164 00002086 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   165 00002088 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   166 0000208B 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   167 0000208D 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   168                              <1> .charDev:
   169 00002091 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   170 00002097 7445                <1>     jz .exit    ;No, exit!
   171 00002099 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   172 0000209C 488D1D(22C40300)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   173 000020A3 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   174                              <1> .retryEP:
   175 000020A6 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   176 000020A9 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   177 000020AC 50                  <1>     push rax    ;Save the dword
   178 000020AD E8892B0000          <1>     call goDriver
   179 000020B2 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   180 000020B9 F7C700800000        <1>     test edi, drvErrStatus
   181 000020BF 741C                <1>     jz .exitPop
   182                              <1>     ;Error here, check if char or block drive
   183 000020C1 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   184 000020C7 7404                <1>     jz .blockError
   185                              <1>     ;Char error here
   186 000020C9 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   187 000020CB EB04                <1>     jmp short .errorCmn
   188                              <1> .blockError:
   189 000020CD 88C8                <1>     mov al, cl  ;Move drive number into al
   190 000020CF B406                <1>     mov ah, critData    ;Data on block dev error
   191                              <1> .errorCmn:
   192                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   193 000020D1 E8382A0000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   194 000020D6 B001                <1>     mov al, critRetry   ;al returns user response
   195 000020D8 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   196 000020DA 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   197 000020DB EBC9                <1>     jmp short .retryEP  ;Reset
   198                              <1> .exitPop:
   199 000020DD 58                  <1>     pop rax    
   200                              <1> .exit:
   201 000020DE E86F330000          <1>     call dosPopRegs
   202                              <1>     return
    18                              <2> %%_ret:
    19 000020E3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    27                                  %include "./Source/Kernel/FileIO/charFunc.asm"
    28                              <1> ;-----------------------------------------------------------------------:
    29                              <1> ;                  DOS default char functions live here                 :
    30                              <1> ;                                                                       :
    31                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    32                              <1> ;                                                                       :
    33                              <1> ;Rules for the naming of the DOS functions                              :
    34                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    35                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    36                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    37                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    38                              <1> ;                                                                       :
    39                              <1> ;-----------------------------------------------------------------------:
    40                              <1> 
    41                              <1> charIn_BE:     ;ah = 01h
    42                              <1> ;Return char that has been read and echoed in al
    43 000020E4 E866010000          <1>     call charIn_B
    44 000020E9 50                  <1>     push rax
    45 000020EA E804000000          <1>     call charOut_B.in    ;Output it to screen
    46 000020EF 58                  <1>     pop rax
    47                              <1>     return
    18                              <2> %%_ret:
    19 000020F0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    48                              <1> 
    49                              <1> charOut_B:       ;ah = 02h
    50                              <1> ;Bspace is regular cursor left, does not insert a blank
    51 000020F1 88D0                <1>     mov al, dl
    52                              <1> .in:  ;Internal function Entry Point, with char in al
    53 000020F3 3C20                <1>     cmp al, asciiCaret
    54 000020F5 7277                <1>     jb .control
    55 000020F7 3C7F                <1>     cmp al, DEL ;DEL char?
    56 000020F9 7406                <1>     je .skipCurs
    57 000020FB FE05(2EC20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    58                              <1> .skipCurs:
    59 00002101 FE05(34C30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    60 00002107 8025(34C30300)03    <1>     and byte [vConErr], 3
    61 0000210E 56                  <1>     push rsi
    62 0000210F 7507                <1>     jnz .skipErrorCheck
    63 00002111 50                  <1>     push rax
    64 00002112 E884020000          <1>     call vConCtrlCheck
    65 00002117 58                  <1>     pop rax
    66                              <1> .skipErrorCheck:
    67 00002118 E80C020000          <1>     call outputOnStdout
    68 0000211D 5E                  <1>     pop rsi
    69 0000211E F605(31C30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    70                              <1>     retz    ;If zero, no echo
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002125 74C9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    71 00002127 53                  <1>     push rbx
    72 00002128 56                  <1>     push rsi
    73 00002129 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    74 0000212E E82F030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    75 00002133 7236                <1>     jc .exitPrintEcho
    76                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    77 00002135 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    78 00002139 F7C300800000        <1>     test ebx, devRedirDev
    79 0000213F 752A                <1>     jnz .exitPrintEcho  ;Exit if STDOUT is redir
    80 00002141 F7C380000000        <1>     test ebx, devCharDev
    81 00002147 7422                <1>     jz .exitPrintEcho
    82 00002149 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    83 0000214E E80F030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    84 00002153 7216                <1>     jc .exitPrintEcho   ;Exit if handle closed
    85 00002155 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    86 0000215B 7407                <1>     jz .netSpool
    87 0000215D E8FB010000          <1>     call outputOnSFT
    88 00002162 EB07                <1>     jmp short .exitPrintEcho
    89                              <1> .netSpool:
    90 00002164 C605(31C30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    91                              <1> .exitPrintEcho:
    92 0000216B 5E                  <1>     pop rsi
    93 0000216C 5B                  <1>     pop rbx
    94                              <1>     return
    18                              <2> %%_ret:
    19 0000216D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    95                              <1> .control:
    96 0000216E 3C0D                <1>     cmp al, CR
    97 00002170 7425                <1>     je .newline
    98 00002172 3C08                <1>     cmp al, BSP
    99 00002174 742D                <1>     je .back
   100 00002176 3C09                <1>     cmp al, TAB
   101 00002178 7587                <1>     jne .skipCurs   ;Treat as normal
   102                              <1>     ;TAB key here
   103                              <1> .tab:
   104 0000217A 51                  <1>     push rcx
   105 0000217B 0FB60D(2EC20300)    <1>     movzx ecx, byte [vConCursPos]
   106 00002182 80C9F8              <1>     or cl, ~7
   107 00002185 F6D9                <1>     neg cl
   108 00002187 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
   109                              <1> .tabloop:
   110 0000218A B020                <1>     mov al, SPC
   111 0000218C E862FFFFFF          <1>     call charOut_B.in   ;Output the char
   112 00002191 FEC9                <1>     dec cl
   113 00002193 75F5                <1>     jnz .tabloop
   114                              <1> .stopTab:
   115 00002195 59                  <1>     pop rcx
   116                              <1>     return ;Exit
    18                              <2> %%_ret:
    19 00002196 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   117                              <1> .newline:
   118 00002197 C605(2EC20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
   119 0000219E E95EFFFFFF          <1>     jmp .skipCurs   ;And echo 
   120                              <1> .back:
   121 000021A3 FE0D(2EC20300)      <1>     dec byte [vConCursPos]
   122 000021A9 E953FFFFFF          <1>     jmp .skipCurs   ;And echo
   123                              <1> 
   124                              <1> auxIn_B:        ;ah = 03h
   125 000021AE E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
   126 000021B3 BB03000000          <1>     mov ebx, 3
   127 000021B8 E8A5020000          <1>     call getCharDevSFT
   128                              <1>     retc    ;Return if CF set (handle 3 is closed)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000021BD 72D7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   129                              <1> .auxloop:
   130 000021BF B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
   131 000021C1 E8C2FDFFFF          <1>     call mainCharIO
   132 000021C6 7408                <1>     jz .signalLoop
   133 000021C8 30E4                <1>     xor ah, ah  ;Read the char in
   134 000021CA E8B9FDFFFF          <1>     call mainCharIO
   135                              <1>     return
    18                              <2> %%_ret:
    19 000021CF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   136                              <1> .signalLoop:
   137 000021D0 E8A3010000          <1>     call callInt48h
   138 000021D5 EBE8                <1>     jmp short .auxloop
   139                              <1> 
   140                              <1> auxOut_B:       ;ah = 04h
   141 000021D7 53                  <1>     push rbx
   142 000021D8 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   143 000021DD EB06                <1>     jmp short auxOutCmn
   144                              <1> prnOut_B:       ;ah = 05h
   145 000021DF 53                  <1>     push rbx
   146 000021E0 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   147                              <1> auxOutCmn: ;Auxilliary output device common 
   148 000021E5 88D0                <1>     mov al, dl  ;Get the char into al
   149 000021E7 50                  <1>     push rax
   150 000021E8 E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   151 000021ED 58                  <1>     pop rax
   152 000021EE 56                  <1>     push rsi
   153 000021EF E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   154 000021F4 5E                  <1>     pop rsi
   155 000021F5 5B                  <1>     pop rbx
   156                              <1>     return
    18                              <2> %%_ret:
    19 000021F6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   157                              <1> 
   158                              <1> directConIO:    ;ah = 06h
   159 000021F7 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   160 000021F9 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   161 000021FB 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   162                              <1> ;Here is the read char direct function
   163 00002201 31DB                <1>     xor ebx, ebx    
   164 00002203 E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   165                              <1>     retc    ;Return error if ebx closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002208 72EC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   166 0000220A 488B2D(DCC30300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   167 00002211 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   168 00002213 E870FDFFFF          <1>     call mainCharIO
   169 00002218 E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   170 0000221D 7507                <1>     jnz .readChar
   171 0000221F 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   172 00002223 30C0                <1>     xor al, al  ;Set caller return code to 0
   173                              <1>     return
    18                              <2> %%_ret:
    19 00002225 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   174                              <1> .readChar:
   175 00002226 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   176                              <1>     ;Fallthrough here to get the char at STDIN
   177                              <1> charIn:         ;ah = 07h
   178                              <1> ;Return char in al from STDIN without waiting
   179 0000222A 31DB                <1>     xor ebx, ebx
   180 0000222C E831020000          <1>     call getCharDevSFT
   181                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002231 72F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   182 00002233 B401                <1>     mov ah, 01  ;ND read for char
   183 00002235 E84EFDFFFF          <1>     call mainCharIO
   184 0000223A 750B                <1>     jnz .getChar
   185 0000223C B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   186 0000223E CD4A                <1>     int 4Ah
   187 00002240 E833010000          <1>     call callInt48h
   188 00002245 EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   189                              <1> .getChar:
   190                              <1>     ;Get the char in al and exit
   191 00002247 30E4                <1>     xor ah, ah
   192 00002249 E83AFDFFFF          <1>     call mainCharIO
   193                              <1>     return
    18                              <2> %%_ret:
    19 0000224E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   194                              <1> charIn_B:       ;ah = 08h
   195                              <1> ;Return char in al from STDIN
   196 0000224F 56                  <1>     push rsi
   197                              <1> .readAgain:
   198 00002250 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   199                              <1>     ;Also sets rsi to point to the device SFT for 
   200 00002255 7543                <1>     jnz .pullChar
   201 00002257 803D(E9D80300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   202 0000225E 7507                <1>     jne .skiplookahead
   203 00002260 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   204 00002262 E821FDFFFF          <1>     call mainCharIO
   205                              <1> .skiplookahead:
   206 00002267 B484                <1>     mov ah, 84h
   207 00002269 CD4A                <1>     int 4ah ;Multitasking keyboard loop
   208 0000226B 66813D(B0D90300)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   208 00002273 FF                  <1>
   209 00002274 751B                <1>     jne .skipClockRead
   210 00002276 E8EE310000          <1>     call dosPushRegs
   211 0000227B F8                  <1>     clc ;Clear CF, write primary header to backup
   212 0000227C E882000000          <1>     call swapPrimaryHeader
   213 00002281 E8CF060000          <1>     call readDateTimeRecord
   214 00002286 F9                  <1>     stc ;Set CF, write backup to primary header
   215 00002287 E877000000          <1>     call swapPrimaryHeader
   216 0000228C E8C1310000          <1>     call dosPopRegs
   217                              <1> .skipClockRead:
   218 00002291 66FF05(B0D90300)    <1>     inc word [keybTicks]
   219 00002298 EBB6                <1>     jmp short .readAgain
   220                              <1> .pullChar:
   221 0000229A 30E4                <1>     xor ah, ah
   222 0000229C E8E7FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   223 000022A1 5E                  <1>     pop rsi
   224 000022A2 3C00                <1>     cmp al, NUL ;Is this the null char?
   225 000022A4 7507                <1>     jne .exit
   226                              <1>     ;We are mid extended ascii, prevent printer toggling
   227 000022A6 C605(AFD90300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   228                              <1> .exit:
   229                              <1>     return
    18                              <2> %%_ret:
    19 000022AD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   230                              <1> 
   231                              <1> printString_B:      ;ah = 09h
   232 000022AE 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   233                              <1> .ps0:
   234 000022B1 AC                  <1>     lodsb   ;Get char in al and inc rsi
   235 000022B2 3C24                <1>     cmp al, "$" ;End of string char?
   236                              <1>     rete    ;Return if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000022B4 74F7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   237 000022B6 E838FEFFFF          <1>     call charOut_B.in
   238 000022BB EBF4                <1>     jmp short .ps0
   239                              <1> 
   240                              <1> checkStdinStatus:  ;ah = 0Bh
   241                              <1> ;Returns the status of the driver controlling vCon
   242 000022BD E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   243 000022C2 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   244                              <1>     retz    ;If BSY set (no chars available), return with al=00
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000022C4 74E7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   245 000022C6 FEC8                <1>     dec al  ;Set al to -1 if char available
   246                              <1>     return  ;Exit
    18                              <2> %%_ret:
    19 000022C8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   247                              <1> clearbuffDoFunc:   ;ah = 0Ch
   248                              <1> ;Clears any buffers and issues a console read command (the command in al)
   249                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   250 000022C9 50                  <1>     push rax
   251 000022CA 52                  <1>     push rdx
   252 000022CB 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   253 000022CD E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   254 000022D2 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   255 000022D4 B404                <1>     mov ah, 04h ;Flush input buffers
   256 000022D6 E8ADFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   257                              <1> .skipFlush:
   258 000022DB 5A                  <1>     pop rdx
   259 000022DC 58                  <1>     pop rax
   260 000022DD 88C4                <1>     mov ah, al  ;Move function number into ah
   261 000022DF 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   262 000022E1 7507                <1>     jne .others
   263 000022E3 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   264 000022E6 7412                <1>     jz .bad ;Yes, exit
   265 000022E8 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   266                              <1> .others:
   267 000022EA 3C01                <1>     cmp al, 01h
   268 000022EC 740F                <1>     je .callFunction
   269 000022EE 3C07                <1>     cmp al, 07h
   270 000022F0 740B                <1>     je .callFunction
   271 000022F2 3C08                <1>     cmp al, 08h
   272 000022F4 7407                <1>     je .callFunction
   273 000022F6 3C0A                <1>     cmp al, 0Ah
   274 000022F8 7403                <1>     je .callFunction
   275                              <1> .bad:
   276 000022FA 30C0                <1>     xor al, al
   277                              <1>     return
    18                              <2> %%_ret:
    19 000022FC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   278                              <1> .callFunction:
   279 000022FD FA                  <1>     cli ;Prepare to swap stack pointer
   280                              <1>     ;The below address avoids "properly" reentering DOS
   281                              <1>     ;We simply reuse the function dispatch aspect. 
   282                              <1>     ;this means we dont trash the caller's register frame 
   283 000022FE E97E300000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   284                              <1> ;------------------------
   285                              <1> ;  Primitive functions  :
   286                              <1> ;------------------------
   287                              <1> swapPrimaryHeader:
   288                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   289                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   290 00002303 56                  <1>     push rsi
   291 00002304 57                  <1>     push rdi
   292 00002305 51                  <1>     push rcx
   293 00002306 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   293 0000230F 00                  <1>
   294 00002310 488D35(22C40300)    <1>     lea rsi, primReqHdr
   295 00002317 488D3D(82D90300)    <1>     lea rdi, bkupReqHdr
   296 0000231E 7303                <1>     jnc .read
   297 00002320 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   298                              <1> .read:
   299 00002323 F3A4                <1>     rep movsb   ;Swap
   300 00002325 59                  <1>     pop rcx
   301 00002326 5F                  <1>     pop rdi
   302 00002327 5E                  <1>     pop rsi
   303                              <1>     return
    18                              <2> %%_ret:
    19 00002328 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   304                              <1> outputOnStdout:
   305                              <1> ;Input: al = Char to output
   306                              <1> ;Output: CF=CY, all good
   307 00002329 53                  <1>     push rbx
   308 0000232A BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   309 0000232F E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   310 00002334 7217                <1>     jc .exit
   311 00002336 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   312 0000233C 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   313 0000233E 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   314 00002342 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   315 00002348 7405                <1>     jz .notCharDevOrFast
   316 0000234A CD49                <1>     int 49h ;Fast output
   317                              <1> .exitOk:
   318 0000234C F8                  <1>     clc
   319                              <1> .exit:
   320 0000234D 5B                  <1>     pop rbx
   321                              <1>     return
    18                              <2> %%_ret:
    19 0000234E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   322                              <1> .notCharDevOrFast:
   323 0000234F E809000000          <1>     call outputOnSFT
   324 00002354 5B                  <1>     pop rbx
   325                              <1>     return
    18                              <2> %%_ret:
    19 00002355 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   326                              <1> 
   327                              <1> outputToHandle:
   328                              <1> ;Char to output must be in al
   329 00002356 E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   330                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000235B 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   331                              <1> outputOnSFT:
   332                              <1> ;Output char in al to SFT in rsi
   333                              <1> ;Waits until device is not busy to send char.
   334                              <1> ;Calls int 48h if device busy
   335 0000235D 50                  <1>     push rax
   336 0000235E B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   337 00002360 E823FCFFFF          <1>     call mainCharIO
   338 00002365 58                  <1>     pop rax
   339 00002366 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   340 00002368 B402                <1>     mov ah, 02h ;Output char in al
   341 0000236A E819FCFFFF          <1>     call mainCharIO
   342 0000236F F8                  <1>     clc
   343                              <1>     return
    18                              <2> %%_ret:
    19 00002370 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   344                              <1> .signalLoop:
   345 00002371 E802000000          <1>     call callInt48h
   346 00002376 EBE5                <1>     jmp short outputOnSFT
   347                              <1> 
   348                              <1> callInt48h:
   349                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   350 00002378 9C                  <1>     pushfq
   351 00002379 F605(F6C30300)FF    <1>     test byte [int48Flag], -1
   352 00002380 7417                <1>     jz .exit    ;If zero, not safe
   353 00002382 F605(69C30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   354 00002389 750E                <1>     jnz .exit
   355                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   356 0000238B FF35(F6C30300)      <1>     push qword [int48Flag] 
   357 00002391 CD48                <1>     int 48h
   358 00002393 8F05(F6C30300)      <1>     pop qword [int48Flag]    ;Return original value
   359                              <1> .exit:
   360 00002399 9D                  <1>     popfq
   361                              <1>     return
    18                              <2> %%_ret:
    19 0000239A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   362                              <1> 
   363                              <1> 
   364                              <1> vConCtrlCheck:
   365                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   366                              <1> ; the processing. 
   367                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   368                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   369                              <1> ;
   370                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   371                              <1> ;^S will pause screen processing until another key is processed by vCon input
   372                              <1> ;^P will toggle the printer echo feature of the vConsole
   373                              <1> ;
   374                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   375                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   376                              <1> ;
   377                              <1> ;Output: 
   378                              <1> ;   CF=CY : Error
   379                              <1> ;   CF=NC : ...
   380                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   381                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   382 0000239B E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   383 000023A0 53                  <1>     push rbx
   384 000023A1 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   385 000023A3 E8BA000000          <1>     call getCharDevSFT
   386 000023A8 5B                  <1>     pop rbx
   387                              <1>     retc    ;Return if CF=CY
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000023A9 72EF                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   388 000023AB B401                <1>     mov ah, 01  ;Non destructively read CON
   389 000023AD E8D6FBFFFF          <1>     call mainCharIO
   390 000023B2 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   391                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   392 000023B4 3C13                <1>     cmp al, DC3 ;^S ?
   393 000023B6 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   394 000023B8 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   395 000023BA E8C9FBFFFF          <1>     call mainCharIO
   396 000023BF E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   397                              <1> .checkPrintOrExit:
   398 000023C4 3C10                <1>     cmp al, DLE ;Do we have ^P?
   399 000023C6 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   400 000023C8 3C03                <1>     cmp al, ETX ;Do we have ^C?
   401 000023CA 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   402                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   403                              <1>     return 
    18                              <2> %%_ret:
    19 000023CC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   404                              <1> .printToggle:
   405 000023CD F615(31C30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   406 000023D3 53                  <1>     push rbx
   407 000023D4 BB04000000          <1>     mov ebx, 4  ;PRN handle
   408 000023D9 E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   409 000023DE 5B                  <1>     pop rbx
   410                              <1>     retc    ;If CF=CY, exit
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000023DF 72EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   411 000023E1 57                  <1>     push rdi
   412 000023E2 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   413 000023E5 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   414 000023EB 741D                <1>     jz .notNet
   415 000023ED 50                  <1>     push rax
   416 000023EE B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   417 000023F3 CD4F                <1>     int 4Fh
   418 000023F5 58                  <1>     pop rax
   419 000023F6 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   420                              <1>     ;If something went wrong, turn off echo
   421 000023F8 C605(31C30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   422 000023FF 50                  <1>     push rax
   423 00002400 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   424 00002405 CD4F                <1>     int 4Fh
   425 00002407 58                  <1>     pop rax
   426 00002408 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   427                              <1> .notNet:
   428                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   429                              <1> ; 0Dh or 0Eh
   430 0000240A 803D(31C30300)00    <1>     cmp byte [printEcho], 00
   431 00002411 7507                <1>     jnz .echoOn
   432 00002413 E84EFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   433 00002418 EB05                <1>     jmp short .printExit
   434                              <1> .echoOn:
   435 0000241A E83EFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   436                              <1> .printExit:
   437 0000241F 5F                  <1>     pop rdi
   438                              <1>     return
    18                              <2> %%_ret:
    19 00002420 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   439                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   440 00002421 E852FFFFFF          <1>     call callInt48h
   441                              <1> .waitNextChar:   ;Here get next char
   442 00002426 B401                <1>     mov ah, 01h ;ND read
   443 00002428 E85BFBFFFF          <1>     call mainCharIO
   444 0000242D 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   445                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   446 0000242F 53                  <1>     push rbx
   447 00002430 31DB                <1>     xor ebx, ebx
   448 00002432 E82B000000          <1>     call getCharDevSFT
   449 00002437 5B                  <1>     pop rbx
   450                              <1>     retc    ;Return if STDIN closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002438 72E6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   451 0000243A 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   452 0000243C E847FBFFFF          <1>     call mainCharIO
   453 00002441 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   454 00002443 7514                <1>     jnz .checkBreak2
   455 00002445 803D(AFD90300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   456 0000244C 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   457 00002452 C605(AFD90300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   458                              <1> .checkBreak2:
   459 00002459 3C03                <1>     cmp al, ETX
   460                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000245B 75C3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   461 0000245D E96C270000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   462                              <1> 
   463                              <1> 
   464                              <1> getCharDevSFT:
   465                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   466                              <1> ;Input: bx = zero extended handle number
   467                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   468                              <1> ;        CF=CY => al = Error code, abort operation
   469 00002462 F605(F5C30300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   470 00002469 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   471                              <1> .getSFT:
   472 0000246B 57                  <1>     push rdi
   473 0000246C E8EB170000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   474 00002471 4889FE              <1>     mov rsi, rdi
   475 00002474 5F                  <1>     pop rdi
   476                              <1>     return  ;Return with CF set
    18                              <2> %%_ret:
    19 00002475 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   477                              <1> .swap:
   478                              <1> ;workingSFT is only set for CON calls
   479 00002476 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   480 0000247C 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   481 0000247E 488B35(74C60300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   482 00002485 F8                  <1>     clc
   483                              <1>     return
    18                              <2> %%_ret:
    19 00002486 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   484                              <1> 
   485                              <1> ;------------------------
   486                              <1> ;   Utility functions   :
   487                              <1> ;------------------------
   488                              <1> printCaretASCII:
   489                              <1> ;Input: al = Char to print with a caret
   490                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   491                              <1> ;First check if the char should be careted, and then print normally if so
   492 00002487 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   493 00002489 0F8364FCFFFF        <1>     jae charOut_B.in
   494 0000248F 3C09                <1>     cmp al, TAB
   495 00002491 0F845CFCFFFF        <1>     je charOut_B.in
   496 00002497 3C15                <1>     cmp al, NAK
   497 00002499 0F8454FCFFFF        <1>     je charOut_B.in
   498 0000249F 3C14                <1>     cmp al, DC4
   499 000024A1 0F844CFCFFFF        <1>     je charOut_B.in
   500 000024A7 50                  <1>     push rax
   501 000024A8 B05E                <1>     mov al, "^" ;Get caret in place
   502 000024AA E844FCFFFF          <1>     call charOut_B.in
   503 000024AF 58                  <1>     pop rax
   504 000024B0 0440                <1>     add al, "@" ;Turn into an ASCII Char
   505 000024B2 E93CFCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   506                              <1> printCRLF:
   507 000024B7 B00D                <1>     mov al, CR
   508 000024B9 E835FCFFFF          <1>     call charOut_B.in
   509 000024BE B00A                <1>     mov al, LF
   510 000024C0 E92EFCFFFF          <1>     jmp charOut_B.in
   511                              <1> 
   512                              <1> checkBreak:
   513                              <1> ;Reads bytes from CON if there are any bytes to read and 
   514                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   515 000024C5 803D(6AC30300)01    <1>     cmp byte [inDOS], 1
   516                              <1>     retne    ;Return if not inDOS only once
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000024CC 75B8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   517                              <1> ;Returns in al the keystroke that is available IF one is available
   518                              <1> ; or al=0 if no keystroke available
   519 000024CE 53                  <1>     push rbx
   520 000024CF 56                  <1>     push rsi
   521 000024D0 488B35(4BC00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   522                              <1>     ;Place command code and a zero status word at the same time
   523 000024D7 C705(4EC40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   523 000024DF 0000                <1>
   524                              <1>     ;Place the packet size in the hdrlen field
   525 000024E1 C605(4CC40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   526 000024E8 488D1D(4CC40300)    <1>     lea rbx, critReqHdr
   527 000024EF E847270000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   528                              <1>     ;Check if the busy bit is set (No keystroke available)
   529 000024F4 66F705(4FC40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   529 000024FC 02                  <1>
   530 000024FD 7405                <1>     jz .charFound
   531                              <1> .exit:
   532 000024FF 30C0                <1>     xor al, al
   533 00002501 5E                  <1>     pop rsi
   534 00002502 5B                  <1>     pop rbx
   535                              <1>     return
    18                              <2> %%_ret:
    19 00002503 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   536                              <1> .charFound:
   537                              <1> ;Keystroke available, proceed
   538 00002504 8A05(59C40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   539 0000250A 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   540 0000250C 75F1                <1>     jne .exit   ;If not equal exit
   541                              <1> ;Now we pull the char out of the buffer
   542 0000250E C705(4EC40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   542 00002516 0000                <1>
   543 00002518 C605(4CC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   544                              <1>     ;Place pointers and number of chars
   545 0000251F C705(62C40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   545 00002527 0000                <1>
   546                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   547 00002529 488D05(59C40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   548 00002530 488905(5AC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   549 00002537 E8FF260000          <1>     call goDriver   ;RSI and RBX as before
   550 0000253C E98D260000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   551                              <1> 
   552                              <1> vConSwapDriver:
   553                              <1> ;Sets up the vCon to use the alternative SFT pointer
   554 00002541 57                  <1>     push rdi
   555 00002542 C605(F5C30300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   556 00002549 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   557 00002550 48893D(74C60300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   558 00002557 5F                  <1>     pop rdi
   559                              <1>     return
    18                              <2> %%_ret:
    19 00002558 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> vConRetDriver:
   562                              <1> ;Returns the original driver (sets flag down)
   563 00002559 C605(F5C30300)00    <1>     mov byte [vConDrvSwp], 0
   564                              <1>     return
    18                              <2> %%_ret:
    19 00002560 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   565                              <1> 
   566                              <1> ;--------------------------------------------------
   567                              <1> ;      Main Keyboard Buffered Input Function      :
   568                              <1> ;--------------------------------------------------
   569                              <1> buffCharInput_BE:  ;ah = 0Ah
   570                              <1> ;Buffer pointer in rdx
   571                              <1> ; byte [rdx + 0], buffer length
   572                              <1> ; byte [rdx + 1], number of chars in buffer
   573                              <1> ; byte [rdx + 2], buffer start
   574                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   575                              <1> ;Register use
   576                              <1> ; dh = Char offset in internal buffer
   577                              <1> ; dl = Buffer length
   578                              <1> ; bh = Char offset in user buffer
   579                              <1> ; bl = Number of chars already in the buffer
   580                              <1> ; rdi = Internal buffer
   581                              <1> ; rsi = User buffer
   582 00002561 4889D6              <1>     mov rsi, rdx
   583 00002564 66AD                <1>     lodsw   ;Get buffer metadata in ax
   584 00002566 84C0                <1>     test al, al
   585                              <1>     retz    ;If buffer length zero, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002568 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   586 0000256A 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   587 0000256D 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   588 0000256F 7606                <1>     jbe .avoidcheck
   589 00002571 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   590 00002575 7402                <1>     je .functionKeyOk
   591                              <1> .avoidcheck:
   592 00002577 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   593                              <1> .functionKeyOk:
   594 00002579 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   595 0000257C FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   596                              <1> .breakEP:
   597 0000257E 8A05(2EC20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   598 00002584 8805(2FC20300)      <1>     mov byte [vConCurCnt], al
   599 0000258A 56                  <1>     push rsi    ;Push user buffer address
   600 0000258B 488D3D(30C20300)    <1>     lea rdi, vConBuffer
   601 00002592 C605(5DC60300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   602                              <1> .mainLoop:
   603 00002599 E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   604 0000259E 3C0A                <1>     cmp al, LF
   605 000025A0 7505                <1>     jne .checkControlChars
   606                              <1> .mainLoop2:
   607 000025A2 E8A8FCFFFF          <1>     call charIn_B
   608                              <1> .checkControlChars:
   609 000025A7 3C06                <1>     cmp al, ACK
   610 000025A9 74F7                <1>     je .mainLoop2   ;Get another char
   611 000025AB 3A05B0DAFFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   612 000025B1 0F8426010000        <1>     je .escape
   613 000025B7 3C7F                <1>     cmp al, DEL
   614 000025B9 0F8489000000        <1>     je .delete
   615 000025BF 3C08                <1>     cmp al, BSP
   616 000025C1 0F8481000000        <1>     je .delete
   617 000025C7 3C17                <1>     cmp al, ETB
   618                              <1>     ;Add space for patched jump instructions
   619 000025C9 9090909090          <1>     db 5 dup (90h)  ;NOP
   620 000025CE 3C15                <1>     cmp al, NAK
   621 000025D0 9090909090          <1>     db 5 dup (90h)
   622 000025D5 3C0D                <1>     cmp al, CR
   623 000025D7 744C                <1>     je .carriageReturn
   624 000025D9 3C0A                <1>     cmp al, LF
   625 000025DB 7461                <1>     je .lineFeed
   626 000025DD 3A057FDAFFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   627 000025E3 7429                <1>     je .break
   628                              <1> .checkIfCanInsert:
   629 000025E5 38D6                <1>     cmp dh, dl
   630 000025E7 731C                <1>     jae .bufOflw
   631 000025E9 AA                  <1>     stosb   ;Store the byte and increment rdi!
   632 000025EA FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   633 000025EC E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   634 000025F1 803D(5DC60300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   635 000025F8 75A8                <1>     jne .mainLoop2
   636                              <1>     ;IF not in insert mode, we fall here
   637                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   638                              <1>     ; or insert chars if needed.
   639 000025FA 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   640 000025FC 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   641 000025FE 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   642 00002601 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   643 00002603 EB9D                <1>     jmp short .mainLoop2
   644                              <1> .bufOflw:
   645                              <1> ;Buffer overflow
   646 00002605 B007                <1>     mov al, BEL ;Sound the bell
   647 00002607 E8E7FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   648 0000260C EB94                <1>     jmp short .mainLoop2
   649                              <1> .break:
   650                              <1> ;Break, Place a "\", and do a CRLF
   651 0000260E B05C                <1>     mov al, "\"
   652 00002610 E8DEFAFFFF          <1>     call charOut_B.in
   653 00002615 5E                  <1>     pop rsi ;Realign stack
   654                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   655 00002616 E89CFEFFFF          <1>     call printCRLF
   656                              <1>     ;Align to next tabstop
   657 0000261B E85AFBFFFF          <1>     call charOut_B.tab
   658 00002620 E959FFFFFF          <1>     jmp .breakEP
   659                              <1> .carriageReturn:
   660 00002625 AA                  <1>     stosb
   661 00002626 E8C8FAFFFF          <1>     call charOut_B.in
   662 0000262B 5F                  <1>     pop rdi ;User buffer address was pushed 
   663 0000262C 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   664 0000262F FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   665                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   666 00002631 488D35(30C20300)    <1>     lea rsi, vConBuffer
   667 00002638 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   668 0000263B F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   669                              <1>     return
    18                              <2> %%_ret:
    19 0000263D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   670                              <1> .lineFeed:
   671 0000263E E874FEFFFF          <1>     call printCRLF
   672 00002643 E95AFFFFFF          <1>     jmp .mainLoop2
   673                              <1> .delete:
   674 00002648 E805000000          <1>     call .removeChar
   675 0000264D E950FFFFFF          <1>     jmp .mainLoop2
   676                              <1> .removeChar:
   677 00002652 84F6                <1>     test dh, dh ;Is char count 0?
   678 00002654 741C                <1>     jz .normalChar   ;If so, skip going back!
   679 00002656 E868000000          <1>     call .vConErase
   680 0000265B 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   681 0000265D 3C20                <1>     cmp al, SPC
   682 0000265F 7311                <1>     jae .normalChar
   683 00002661 3C09                <1>     cmp al, TAB
   684 00002663 7420                <1>     je .eraTab
   685 00002665 3C15                <1>     cmp al, NAK
   686 00002667 7409                <1>     je .normalChar
   687 00002669 3C14                <1>     cmp al, DC4
   688 0000266B 7405                <1>     je .normalChar
   689 0000266D E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   690                              <1> .normalChar:
   691 00002672 803D(5DC60300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   692                              <1>     retne ;Yes, return
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002679 75C2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   693 0000267B 84FF                <1>     test bh, bh ;Beginning of user buffer?
   694                              <1>     retz    ;Yes, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000267D 74BE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   695 0000267F 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   696 00002682 FECF                <1>     dec bh
   697                              <1>     return
    18                              <2> %%_ret:
    19 00002684 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   698                              <1> .eraTab:
   699                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   700                              <1> ; up to a tab stop worth of space chars printed
   701 00002685 57                  <1>     push rdi
   702 00002686 48FFCF              <1>     dec rdi
   703 00002689 FD                  <1>     std ;Go backwards
   704 0000268A 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   705 0000268D B020                <1>     mov al, SPC
   706 0000268F 53                  <1>     push rbx
   707 00002690 BB07000000          <1>     mov ebx, 7
   708 00002695 67E30D              <1>     jecxz .onTabstop
   709                              <1> .scanString:
   710 00002698 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   711 00002699 7608                <1>     jbe .notChar    ;No, skip handling
   712 0000269B 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   713 0000269F 740A                <1>     je .tabChar
   714 000026A1 FECB                <1>     dec bl
   715                              <1> .notChar:
   716 000026A3 E2F3                <1>     loop .scanString
   717                              <1> .onTabstop:
   718 000026A5 2A1D(2FC20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   719                              <1> .tabChar:
   720 000026AB 28F3                <1>     sub bl, dh  ;Same on tabstop
   721 000026AD 00D9                <1>     add cl, bl
   722 000026AF 80E107              <1>     and cl, 7
   723 000026B2 5B                  <1>     pop rbx
   724 000026B3 5F                  <1>     pop rdi
   725 000026B4 FC                  <1>     cld
   726 000026B5 74BB                <1>     jz .normalChar
   727                              <1>     ;Now erase all the spaces placed on the vCon
   728                              <1> .vConDelTab:
   729 000026B7 E80C000000          <1>     call .vConEraseNoDec
   730 000026BC E2F9                <1>     loop .vConDelTab
   731 000026BE E9AFFFFFFF          <1>     jmp .normalChar
   732                              <1> .vConErase:
   733                              <1> ;Erase the char on the vCon
   734                              <1> ;Return through the output function
   735 000026C3 48FFCF              <1>     dec rdi ;Go back a space in the 
   736 000026C6 FECE                <1>     dec dh  ;Decrement char count in the buffer
   737                              <1> .vConEraseNoDec:
   738 000026C8 B008                <1>     mov al, BSP ;Move cursor back
   739 000026CA E824FAFFFF          <1>     call charOut_B.in
   740 000026CF B020                <1>     mov al, SPC ;Replace with a space
   741 000026D1 E81DFAFFFF          <1>     call charOut_B.in
   742 000026D6 B008                <1>     mov al, BSP ;Move cursor back again
   743 000026D8 E916FAFFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   744                              <1> .escape:
   745                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   746                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   747                              <1> ; including the function keys.
   748 000026DD FF2576D9FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   749                              <1> .f2:
   750 000026E3 E846000000          <1>     call .fCommon2
   751 000026E8 EB0C                <1>     jmp short .fCommon
   752                              <1> .f3:
   753 000026EA 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   754 000026ED 28F9                <1>     sub cl, bh  ;Sub our current position
   755 000026EF EB05                <1>     jmp short .fCommon
   756                              <1> .f1:
   757 000026F1 B901000000          <1>     mov ecx, 1  ;Get one char
   758                              <1> .fCommon:
   759 000026F6 C605(5DC60300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   760 000026FD 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   761 000026FF 0F849DFEFFFF        <1>     je .mainLoop2
   762 00002705 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   763 00002707 0F8495FEFFFF        <1>     je .mainLoop2
   764                              <1>     ;Else, copy byte by byte, and retain char in al
   765 0000270D AC                  <1>     lodsb
   766 0000270E AA                  <1>     stosb
   767 0000270F E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   768 00002714 FEC7                <1>     inc bh
   769 00002716 FEC6                <1>     inc dh
   770 00002718 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   771 0000271A E983FEFFFF          <1>     jmp .mainLoop2
   772                              <1> .f4:
   773 0000271F E80A000000          <1>     call .fCommon2
   774 00002724 4801CE              <1>     add rsi, rcx
   775 00002727 00CF                <1>     add bh, cl
   776 00002729 E974FEFFFF          <1>     jmp .mainLoop2
   777                              <1> .fCommon2:
   778 0000272E E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   779 00002733 3A0528D9FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   780 00002739 750B                <1>     jne .fnotEscape
   781                              <1>     ;Get another char if they typed escape and force it in the buffer
   782                              <1>     ; Do not return to caller
   783 0000273B E80FFBFFFF          <1>     call charIn_B
   784                              <1> .fforceExit:
   785 00002740 59                  <1>     pop rcx ;Get original return address from stack
   786 00002741 E95CFEFFFF          <1>     jmp .mainLoop2
   787                              <1> .fnotEscape:
   788 00002746 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   789 00002749 28F9                <1>     sub cl, bh
   790 0000274B 74F3                <1>     jz .fforceExit
   791 0000274D FFC9                <1>     dec ecx
   792 0000274F 74EF                <1>     jz .fforceExit
   793 00002751 57                  <1>     push rdi
   794 00002752 4889F7              <1>     mov rdi, rsi
   795 00002755 48FFC7              <1>     inc rdi
   796 00002758 F2AE                <1>     repne scasb ;Search for the char to start printing from
   797 0000275A 5F                  <1>     pop rdi
   798 0000275B 75E3                <1>     jne .fforceExit ;If char not found, return
   799 0000275D F6D1                <1>     not cl
   800 0000275F 00D9                <1>     add cl, bl
   801 00002761 28F9                <1>     sub cl, bh
   802                              <1>     return
    18                              <2> %%_ret:
    19 00002763 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   803                              <1> .f5:
   804 00002764 B040                <1>     mov al, "@"
   805 00002766 E888F9FFFF          <1>     call charOut_B.in   ;Print the char
   806 0000276B 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   807 0000276C 57                  <1>     push rdi
   808 0000276D E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   809 00002772 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   810 00002773 88F3                <1>     mov bl, dh
   811 00002775 E99CFEFFFF          <1>     jmp .breakAlt
   812                              <1> .f6:
   813                              <1> ;If the user wants to insert a EOF, they can use F6
   814 0000277A B01A                <1>     mov al, EOF
   815 0000277C E964FEFFFF          <1>     jmp .checkIfCanInsert
   816                              <1> .f7:
   817                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   818 00002781 8A05DAD8FFFF        <1>     mov al, byte [extESC]
   819 00002787 E959FEFFFF          <1>     jmp .checkIfCanInsert
   820                              <1> .toggleIns:
   821 0000278C F615(5DC60300)      <1>     not byte [vConInsert]   ;Toggle
   822                              <1>     return
    18                              <2> %%_ret:
    19 00002792 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   823                              <1> .eDel:
   824 00002793 38DF                <1>     cmp bh, bl
   825 00002795 0F8407FEFFFF        <1>     je .mainLoop2
   826 0000279B FEC7                <1>     inc bh
   827 0000279D 48FFC6              <1>     inc rsi
   828 000027A0 E9FDFDFFFF          <1>     jmp .mainLoop2
   829                              <1> 
   830                              <1> editKeys:
   831                              <1> ;Our Default Extended keys handler
   832 000027A5 E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   833 000027AA B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   834 000027AF 57                  <1>     push rdi    ;Preserve rdi
   835 000027B0 488D3DACD8FFFF      <1>     lea rdi, extKeyTbl
   836 000027B7 57                  <1>     push rdi
   837                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   838                              <1>     ; offset of function from extKeyTbl
   839                              <1> .lp:
   840 000027B8 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   841 000027B9 7411                <1>     je .charFound
   842 000027BB FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   843 000027BD 0F84DFFDFFFF        <1>     jz buffCharInput_BE.mainLoop2
   844 000027C3 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   845 000027CA EBEC                <1>     jmp short .lp
   846                              <1> .charFound:
   847 000027CC 59                  <1>     pop rcx ;Pop back the effective address of the table
   848 000027CD 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   849 000027D1 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   850 000027D4 5F                  <1>     pop rdi
   851 000027D5 FFE1                <1>     jmp rcx
    28                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
    29                              <1> ;Major kernel date time functions and subroutines
    30                              <1> 
    31                              <1> getDate:           ;ah = 2Ah
    32 000027D7 E879010000          <1>     call readDateTimeRecord ;Update date if necessary
    33 000027DC E876280000          <1>     call getUserRegs
    34 000027E1 668B15(EFC30300)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
    35                              <1> ;    mov dh, byte [monthOfYear]
    36 000027E8 0FB60D(F1C30300)    <1>     movzx ecx, byte [years]
    37 000027EF 8A05(F4C30300)      <1>     mov al, byte [dayOfWeek]
    38 000027F5 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    39 000027F9 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    40                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 000027FD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    41                              <1> setDate:           ;ah = 2Bh
    42                              <1> ;	CX = year (1980-2099)
    43                              <1> ;   DH = month (1-12)
    44                              <1> ;	DL = day (1-31)
    45 000027FE E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    46                              <1>     return
    18                              <2> %%_ret:
    19 00002803 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    47                              <1> getTime:           ;ah = 2Ch
    48 00002804 E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    49 00002809 E849280000          <1>     call getUserRegs
    50 0000280E 668B0D(7AC40300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.hours]
    51 00002815 668B15(7BC40300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    52 0000281C 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    53 00002820 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    54                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 00002824 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    55                              <1> setTime:           ;ah = 2Dh
    56                              <1> ;   CH = hour (0-23)
    57                              <1> ;	CL = minutes (0-59)
    58                              <1> ;	DH = seconds (0-59)
    59                              <1> ;	DL = hundredths (0-99)
    60 00002825 80FD17              <1>     cmp ch, 23
    61 00002828 7749                <1>     ja .exitBad
    62 0000282A 80F93B              <1>     cmp cl, 59
    63 0000282D 7744                <1>     ja .exitBad
    64 0000282F 80FE3B              <1>     cmp dh, 59
    65 00002832 773F                <1>     ja .exitBad
    66 00002834 80FA63              <1>     cmp dl, 99
    67 00002837 773A                <1>     ja .exitBad
    68                              <1> ;Now we read date (updating internal count if necessary)
    69 00002839 E817010000          <1>     call readDateTimeRecord
    70 0000283E 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    71 00002845 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    72 0000284C 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    73 0000284F 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    74 00002853 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    75 00002857 B906000000          <1>     mov ecx, 6
    76 0000285C 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    77 0000285F E86B260000          <1>     call primReqWriteSetup   ;rbx now points to request header
    78 00002864 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    79 0000286B E8CB230000          <1>     call goDriver
    80 00002870 30C0                <1>     xor al, al
    81                              <1>     return
    18                              <2> %%_ret:
    19 00002872 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    82                              <1> .exitBad:
    83 00002873 B0FF                <1>     mov al, -1
    84                              <1>     return
    18                              <2> %%_ret:
    19 00002875 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    85                              <1> ;------------------------
    86                              <1> ;   Utility functions   :
    87                              <1> ;------------------------
    88                              <1> writeDate:
    89 00002876 6681F97800          <1>     cmp cx, 120
    90 0000287B 0F83D1000000        <1>     jae .exitBad
    91 00002881 80FE0C              <1>     cmp dh, 12
    92 00002884 0F87C8000000        <1>     ja .exitBad
    93 0000288A 80FA1F              <1>     cmp dl, 31
    94 0000288D 0F87BF000000        <1>     ja .exitBad
    95 00002893 668915(EFC30300)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    96                              <1>     ;mov byte [monthOfYear], dh
    97 0000289A 880D(F1C30300)      <1>     mov byte [years], cl    ;Save the years count
    98 000028A0 E878010000          <1>     call setDaysInFeb   ;Set days in february this year
    99 000028A5 88CD                <1>     mov ch, cl ;Get years count in ch
   100 000028A7 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
   101 000028AA 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
   102 000028AD 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
   103 000028B0 BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
   104 000028B5 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
   105                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
   106 000028B7 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
   107 000028BA 67E316              <1>     jecxz .addDay    ;Skip adding years
   108 000028BD 056E010000          <1>     add eax, 366    ;First add for a leap year
   109                              <1> .addYears:
   110 000028C2 FFC9                <1>     dec ecx
   111 000028C4 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
   112 000028C7 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   113 000028CC EBF4                <1>     jmp short .addYears
   114                              <1> .addLeap:
   115 000028CE 056E010000          <1>     add eax, 366    ;Add the days in the leap year
   116                              <1> .addDay:
   117 000028D3 89C2                <1>     mov edx, eax    ;Save this number in edx
   118                              <1>     ;Now to add day offset
   119 000028D5 0FB60D(F0C30300)    <1>     movzx ecx, byte [monthOfYear]
   120 000028DC 488D35A1D7FFFF      <1>     lea rsi, monthsTbl
   121                              <1> .addDaysInMonth:
   122 000028E3 FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   123 000028E5 67E308              <1>     jecxz .addMonthOffset
   124 000028E8 AC                  <1>     lodsb   ;Get the number of days in the month in al
   125 000028E9 0FB6C0              <1>     movzx eax, al
   126 000028EC 01C2                <1>     add edx, eax
   127 000028EE EBF3                <1>     jmp short .addDaysInMonth
   128                              <1> .addMonthOffset:
   129 000028F0 0FB60D(EFC30300)    <1>     movzx ecx, byte [dayOfMonth]
   130 000028F7 FFC9                <1>     dec ecx
   131 000028F9 01CA                <1>     add edx, ecx    ;Add month offset
   132                              <1>     ;edx has the number of days since 01/01/1980
   133 000028FB 668915(F2C30300)    <1>     mov word [daysOffset], dx   ;Store!
   134                              <1> ;Now read and then write CLOCKrecrd
   135 00002902 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   136 00002909 B906000000          <1>     mov ecx, 6
   137 0000290E 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   138 00002911 E8C4250000          <1>     call primReqReadSetup   ;rbx now points to request header
   139 00002916 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   140 0000291D E819230000          <1>     call goDriver
   141                              <1> ;Now we change daycount and write it back
   142 00002922 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   143 00002929 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   144 00002930 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   145 00002933 B906000000          <1>     mov ecx, 6
   146 00002938 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   147 0000293B E88F250000          <1>     call primReqWriteSetup   ;rbx now points to request header
   148 00002940 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   149 00002947 E8EF220000          <1>     call goDriver
   150 0000294C E8AE000000          <1>     call setDayofWeek
   151                              <1>     return
    18                              <2> %%_ret:
    19 00002951 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   152                              <1> .exitBad:
   153 00002952 B0FF                <1>     mov al, -1
   154                              <1>     return
    18                              <2> %%_ret:
    19 00002954 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   155                              <1> 
   156                              <1> readDateTimeRecord:
   157                              <1> ;Will read the clock using the primary request header
   158                              <1> ;Preserves all regs except eax and flags
   159 00002955 53                  <1>     push rbx
   160 00002956 51                  <1>     push rcx
   161 00002957 52                  <1>     push rdx
   162 00002958 56                  <1>     push rsi
   163 00002959 55                  <1>     push rbp
   164                              <1> 
   165 0000295A 66C705(B0D90300)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   165 00002962 00                  <1>
   166 00002963 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   167 0000296A B906000000          <1>     mov ecx, 6
   168 0000296F 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   169                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   170                              <1> ; rbx = Data storage buffer ptr
   171                              <1> ; ecx = Number of sectors to transfer
   172                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   173 00002972 E863250000          <1>     call primReqReadSetup   ;rbx now points to request header
   174 00002977 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   175 0000297E E8B8220000          <1>     call goDriver
   176 00002983 0FB705(77C40300)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   177                              <1> ;Here we have:  ax = Days since 1/1/1980
   178                              <1> ;Updates the internal date fields
   179                              <1> ;Internal time fields are in the clock record
   180                              <1> ;So now we check if the number of days since 1980 are the same.
   181                              <1> ;If so, we can skip updating.
   182 0000298A 663B05(F2C30300)    <1>     cmp ax, word [daysOffset]
   183 00002991 7466                <1>     je .exit    ;Return if equal
   184 00002993 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   185 00002998 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   186 0000299A 668905(F2C30300)    <1>     mov word [daysOffset], ax   ;Save this new offset
   187                              <1>     ;Now want to update years, month and day fields
   188                              <1>     ;ax has the number of days since 01/01/1980
   189                              <1>     ;Get days in a 4 year period
   190 000029A1 BBB5050000          <1>     mov ebx, 365*4 + 1
   191 000029A6 31D2                <1>     xor edx, edx
   192 000029A8 89D1                <1>     mov ecx, edx  ;Zero ecx
   193 000029AA F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   194                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   195                              <1>     ;edx has offset into current 4 year bunch
   196 000029AC BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   197 000029B1 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   198 000029B3 7210                <1>     jb .foundBunch
   199 000029B5 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   200 000029B7 FFC1                <1>     inc ecx
   201 000029B9 FFCB                <1>     dec ebx ;Number of days in a normal year
   202                              <1> .findBunch:
   203 000029BB 39DA                <1>     cmp edx, ebx
   204 000029BD 7206                <1>     jb .foundBunch
   205 000029BF 29DA                <1>     sub edx, ebx
   206 000029C1 FFC1                <1>     inc ecx
   207 000029C3 EBF6                <1>     jmp short .findBunch
   208                              <1> .foundBunch:
   209                              <1>     ;If ecx = 0, february has 29 days!
   210                              <1>     ;eax has number of four year bunches elapsed since 1980
   211 000029C5 C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   212 000029C8 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   213                              <1>     ;ecx now has the number of years since 1980
   214 000029CA E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   215                              <1> ;edx has number of days into the year we are in
   216                              <1> ;eax has number of days in Feb for this year
   217 000029CF 488D35AED6FFFF      <1>     lea rsi, monthsTbl
   218 000029D6 31C9                <1>     xor ecx, ecx    ;Use as month counter
   219                              <1> .monthSearch:
   220 000029D8 FFC1                <1>     inc ecx ;Start from 1
   221 000029DA AC                  <1>     lodsb   ;Get value in al and inc rsi
   222 000029DB 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   223 000029DE 39C2                <1>     cmp edx, eax
   224 000029E0 7204                <1>     jb .monthFound
   225 000029E2 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   226 000029E4 EBF2                <1>     jmp short .monthSearch
   227                              <1> .monthFound:
   228                              <1>     ;cl has the month (01h-0Ch)
   229                              <1>     ;dl has the day of the month - 1
   230 000029E6 FFC2                <1>     inc edx
   231 000029E8 880D(F0C30300)      <1>     mov byte [monthOfYear], cl
   232 000029EE 8815(EFC30300)      <1>     mov byte [dayOfMonth], dl
   233 000029F4 E806000000          <1>     call setDayofWeek
   234                              <1> .exit:
   235 000029F9 5D                  <1>     pop rbp
   236 000029FA 5E                  <1>     pop rsi
   237 000029FB 5A                  <1>     pop rdx
   238 000029FC 59                  <1>     pop rcx
   239 000029FD 5B                  <1>     pop rbx
   240                              <1>     return  ;Return with ZF is date set, or same day
    18                              <2> %%_ret:
    19 000029FE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   241                              <1> 
   242                              <1> setDayofWeek:
   243                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   244 000029FF 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   245 00002A06 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   246                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   247 00002A0B 31D2                <1>     xor edx, edx
   248 00002A0D B907000000          <1>     mov ecx, 7   
   249 00002A12 F7F1                <1>     div ecx  ;Get remainder in dl
   250 00002A14 8815(F4C30300)      <1>     mov byte [dayOfWeek], dl
   251                              <1> ;Set ZF to indicate all ok
   252 00002A1A 31C0                <1>     xor eax, eax
   253                              <1>     return
    18                              <2> %%_ret:
    19 00002A1C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   254                              <1> 
   255                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   256                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   257                              <1> ;Input: cl = Year - 1980
   258                              <1> ;Output: al = Number of days in February
   259 00002A1D 880D(F1C30300)      <1>     mov byte [years], cl    ;Save this figure
   260 00002A23 F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   261 00002A26 51                  <1>     push rcx
   262 00002A27 57                  <1>     push rdi
   263 00002A28 B81C000000          <1>     mov eax, 28  ;Usual days in february
   264 00002A2D B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   265 00002A32 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   266 00002A35 488D3D49D6FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   267 00002A3C AA                  <1>     stosb   ;Store the word in rdi
   268 00002A3D 5F                  <1>     pop rdi
   269 00002A3E 59                  <1>     pop rcx
   270                              <1>     return
    18                              <2> %%_ret:
    19 00002A3F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   271                              <1> 
   272                              <1> getDirDTwords:
   273                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   274                              <1> ; High word of eax = Date
   275                              <1> ; Low word of eax = Time
   276                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   277                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   278                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   279                              <1> 
   280                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   281                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   282                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   283                              <1> ;Preserves all registers except eax
   284 00002A40 53                  <1>     push rbx
   285 00002A41 0FB61D(7CC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   286 00002A48 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   287 00002A4A 89D8                <1>     mov eax, ebx
   288 00002A4C 0FB61D(79C40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   289 00002A53 C1E305              <1>     shl ebx, 5
   290 00002A56 09D8                <1>     or eax, ebx
   291 00002A58 0FB61D(7AC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   292 00002A5F C1E30B              <1>     shl ebx, 11
   293 00002A62 09D8                <1>     or eax, ebx
   294 00002A64 0FB61D(EFC30300)    <1>     movzx ebx, byte [dayOfMonth]
   295 00002A6B C1E310              <1>     shl ebx, 16
   296 00002A6E 09D8                <1>     or eax, ebx
   297 00002A70 0FB61D(F0C30300)    <1>     movzx ebx, byte [monthOfYear]
   298 00002A77 C1E315              <1>     shl ebx, 21
   299 00002A7A 09D8                <1>     or eax, ebx
   300 00002A7C 0FB61D(F1C30300)    <1>     movzx ebx, byte [years]
   301 00002A83 C1E319              <1>     shl ebx, 25
   302 00002A86 09D8                <1>     or eax, ebx
   303 00002A88 5B                  <1>     pop rbx
   304                              <1>     return
    18                              <2> %%_ret:
    19 00002A89 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   305                              <1> getDateAndTimeOld:  ;INT 4Fh AX=12
   306                              <1> ;Returns edx = time
   307                              <1> ;        eax = date
   308                              <1> ; Formally ax and dx but we clear the upper words
   309 00002A8A E8C6FEFFFF          <1>     call readDateTimeRecord
   310 00002A8F E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   311 00002A94 31D2                <1>     xor edx, edx
   312 00002A96 6689C2              <1>     mov dx, ax  ;Save time
   313 00002A99 C1E810              <1>     shr eax, 10h    ;Get date into rax
   314                              <1>     return
    18                              <2> %%_ret:
    19 00002A9C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    29                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
    30                              <1> openFileFCB:       ;ah = 0Fh
    31                              <1> closeFileFCB:      ;ah = 10h
    32                              <1> findFirstFileFCB:  ;ah = 11h
    33                              <1> findNextFileFCB:   ;ah = 12h
    34                              <1> deleteFileFCB:     ;ah = 13h
    35                              <1> sequentialReadFCB: ;ah = 14h
    36                              <1> sequentialWriteFCB:;ah = 15h
    37                              <1> createFileFCB:     ;ah = 16h
    38                              <1> renameFileFCB:     ;ah = 17h
    39 00002A9D C3                  <1>     ret
    40                              <1> setDTA:            ;ah = 1Ah
    41                              <1> ;Called with:
    42                              <1> ;   rdx = Pointer to the new default DTA
    43 00002A9E 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
    44 00002AA5 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    45 00002AA9 488915(79C30300)    <1>     mov qword [currentDTA], rdx
    46 00002AB0 C3                  <1>     ret
    47                              <1> randomReadFCB:     ;ah = 21h
    48                              <1> randomWriteFCB:    ;ah = 22h
    49                              <1> getFileSizeFCB:    ;ah = 23h
    50                              <1> setRelRecordFCB:   ;ah = 24h
    51                              <1> randBlockReadFCB:  ;ah = 27h
    52                              <1> randBlockWriteFCB: ;ah = 28h
    53                              <1> parseFilenameFCB:  ;ah = 29h
    54 00002AB1 C3                  <1>     ret
    55                              <1> getDTA:            ;ah = 2Fh
    56 00002AB2 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
    57 00002AB9 488B1D(79C30300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    58 00002AC0 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    59 00002AC4 C3                  <1>     ret
    30                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
    31                              <1> ;-----------------------------------:
    32                              <1> ;    File Handle Kernel routines    :
    33                              <1> ;-----------------------------------:
    34                              <1> 
    35                              <1> createFileHdl:     ;ah = 3Ch, handle function
    36                              <1> ;Input: cx = File attributes (same as search attributes for find first)
    37                              <1> ;       rdx = Ptr to ASCIZ filename to create
    38                              <1> ;Output: CF=CY => ax = File handle
    39                              <1> ;        CF=NC => al = Error code
    40 00002AC5 51                  <1>     push rcx    ;Save file attributes on stack
    41 00002AC6 488D0D27060000      <1>     lea rcx, createMain
    42 00002ACD C605(56C60300)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
    43 00002AD4 EB1D                <1>     jmp short openFileHdl.openCommon
    44                              <1> openFileHdl:       ;ah = 3Dh, handle function
    45                              <1> ;Input: al = Open mode, to open file with
    46                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    47                              <1> ;If called from 5D00h, cl = File attributes too
    48                              <1> ;Output: CF=CY => ax = File handle
    49                              <1> ;        CF=NC => al = Error code
    50 00002AD6 BB16000000          <1>     mov ebx, dirInclusive
    51 00002ADB F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
    52 00002AE2 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    53 00002AE5 880D(56C60300)      <1>     mov byte [searchAttr], cl
    54 00002AEB 488D0D7A050000      <1>     lea rcx, openMain  
    55 00002AF2 50                  <1>     push rax    ;Save open mode on stack
    56                              <1> .openCommon:
    57 00002AF3 E888290000          <1>     call dosCrit1Enter
    58 00002AF8 E87D100000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    59 00002AFD E888290000          <1>     call dosCrit1Exit
    60 00002B02 0F82A8000000        <1>     jc .exitBad
    61                              <1>     ;Now save variables
    62 00002B08 E8A60F0000          <1>     call setCurrentSFT
    63 00002B0D 66891D(8CC60300)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    64 00002B14 E813110000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    65 00002B19 0F8291000000        <1>     jc .exitBad
    66 00002B1F 66891D(8EC60300)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    67 00002B26 48893D(7CC60300)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    68 00002B2D 0FB71D(8CC60300)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    69 00002B34 881F                <1>     mov byte [rdi], bl  ;And open the file
    70                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    71 00002B36 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    72 00002B39 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
    73 00002B40 51                  <1>     push rcx    ;Save the procedure to call on stack
    74 00002B41 E81CE8FFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    75 00002B46 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    76 00002B47 488D051E050000      <1>     lea rax, openMain   ;Get EA for open procedure
    77 00002B4E 488B35(84C60300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    78 00002B55 7318                <1>     jnc .proceedCall
    79                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good.
    80                              <1> ;If CF=CY => Path doesnt all exist:
    81                              <1> ;      If parDirExists = -1 => For Open, Bad.  For Create, Good. 
    82                              <1> ;Now we check if we are creating or opening.
    83 00002B57 4839C3              <1>     cmp rbx, rax
    84 00002B5A 7409                <1>     je .badPathspec ;Jmp to error if opening file that doesnt exist
    85 00002B5C F605(5FC60300)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    86 00002B63 750A                <1>     jnz .proceedCall    ;If so, proceed.
    87                              <1> .badPathspec:
    88 00002B65 B802000000          <1>     mov eax, errFnf
    89 00002B6A E941000000          <1>     jmp .exitBad    ;Need to deallocate the SFT before returning
    90                              <1> .proceedCall:
    91                              <1> ;If the pathspec exists, recall that for create, we truncate.
    92 00002B6F 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
    93 00002B71 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    94 00002B74 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    95 00002B75 750B                <1>     jne .callProc   ;Jump if we are creating
    96                              <1>     ;al means openmode here
    97 00002B77 A880                <1>     test al, 80h    ;No Inherit bit set?
    98 00002B79 7407                <1>     jz .callProc
    99 00002B7B 247F                <1>     and al, 7Fh     ;Clear this bit
   100 00002B7D B900100000          <1>     mov ecx, devNoInherit
   101                              <1> .callProc:
   102 00002B82 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
   103 00002B88 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
   104 00002B8E 51                  <1>     push rcx    ;Save the device word 
   105 00002B8F FFD3                <1>     call rbx    ;Enter with open mode in 
   106 00002B91 59                  <1>     pop rcx
   107 00002B92 488B35(84C60300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
   108 00002B99 7225                <1>     jc .exitBad2
   109 00002B9B 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
   110 00002BA0 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   111 00002BA4 0FB705(8EC60300)    <1>     movzx eax, word [currentHdl]
   112                              <1>     ;SHARE HOOK, DOS DS:[008Ch]
   113 00002BAB E901290000          <1>     jmp extGoodExit ;Save ax and return OK
   114                              <1> .exitBad:
   115 00002BB0 FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
   116 00002BB1 5B                  <1>     pop rbx ;Pop the word from the stack
   117 00002BB2 66C705(8CC60300)FF- <1>     mov word [currentNdx], -1
   117 00002BBA FF                  <1>
   118 00002BBB E9FF280000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   119                              <1> .exitBad2:
   120                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   121 00002BC0 488B35(7CC60300)    <1>     mov rsi, qword [curHdlPtr]
   122 00002BC7 C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   123 00002BCA 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
   124 00002BD1 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   125 00002BD6 66C705(8CC60300)FF- <1>     mov word [currentNdx], -1
   125 00002BDE FF                  <1>
   126 00002BDF E9DB280000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   127                              <1> 
   128                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   129                              <1> ;Input: bx = file handle to close
   130 00002BE4 E859100000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   131 00002BE9 0F82D0280000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   132 00002BEF E8BF0E0000          <1>     call setCurrentSFT  ;Set this as the current SFT
   133                              <1>     ;Check count to see if we need to check share mode
   134 00002BF4 31C0                <1>     xor eax, eax    ;Preset ax to 0
   135 00002BF6 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared, no need for share check
   136 00002BFB 7406                <1>     je .skipShareCheck
   137                              <1>     ;Now check sharing mode
   138 00002BFD 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   139 00002C01 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   140                              <1> .skipShareCheck:
   141 00002C03 50                  <1>     push rax    ;Save the share mode on stack
   142 00002C04 E830070000          <1>     call closeMain  ;Call close main!
   143 00002C09 58                  <1>     pop rax 
   144 00002C0A 0F82AF280000        <1>     jc extErrExit   ;If an error, exit through error exit
   145 00002C10 3C70                <1>     cmp al, netFCBShare ;Do NetFCB check (only if file opened more than once)
   146 00002C12 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
   147 00002C14 E8F50F0000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
   148 00002C19 C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
   149                              <1> .exitOk:
   150 00002C1C 31C0                <1>     xor eax, eax    ;Return value
   151 00002C1E E98E280000          <1>     jmp extGoodExit
   152                              <1> 
   153                              <1> readFileHdl:       ;ah = 3Fh, handle function
   154 00002C23 488D3581070000      <1>     lea rsi, readBytes
   155                              <1> .common:
   156 00002C2A E813100000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   157 00002C2F 0F828A280000        <1>     jc extErrExit   ;Error code in al and exit
   158 00002C35 E8790E0000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   159 00002C3A 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   160 00002C3C FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   161 00002C42 488915(79C30300)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   162 00002C49 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   163 00002C4B 8F05(79C30300)      <1>     pop qword [currentDTA]
   164 00002C51 0F8268280000        <1>     jc extErrExit   ;Error code in al and exit
   165 00002C57 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   166 00002C59 E94A280000          <1>     jmp extGoodExit2    ;and exit!
   167                              <1> 
   168                              <1> writeFileHdl:      ;ah = 40h, handle function
   169 00002C5E 488D351F0A0000      <1>     lea rsi, writeBytes
   170 00002C65 E9C0FFFFFF          <1>     jmp readFileHdl.common
   171                              <1> 
   172                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   173                              <1> ;Here don't allow malformed chars unless it is a network CDS
   174 00002C6A BB06000000          <1>     mov ebx, dirIncFiles    ;Inclusive w/o dirs
   175 00002C6F F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
   176 00002C76 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   177 00002C79 880D(56C60300)      <1>     mov byte [searchAttr], cl
   178 00002C7F 4889D6              <1>     mov rsi, rdx
   179 00002C82 E886250000          <1>     call checkPathspecOK
   180 00002C87 730A                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   181                              <1> .badPath:
   182 00002C89 B803000000          <1>     mov eax, errPnf
   183 00002C8E E92C280000          <1>     jmp extErrExit
   184                              <1> .pathOk:
   185 00002C93 488D3D(7FC40300)    <1>     lea rdi, buffer1
   186 00002C9A 52                  <1>     push rdx
   187 00002C9B E8C2E6FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   188 00002CA0 5A                  <1>     pop rdx
   189 00002CA1 0F8218280000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   190                              <1>     ;In the case of a wildcard, recall this will return the first file
   191 00002CA7 803D(5EC60300)FF    <1>     cmp byte [fileExist], -1
   192 00002CAE 0F850B280000        <1>     jnz extErrExit
   193                              <1> ;Internal current dir is now populated with dir entry
   194                              <1> ; and internal DOS directory variables now point to this entry.
   195                              <1> ;Check if the file is a char device or read only.
   196 00002CB4 B805000000          <1>     mov eax, errAccDen  
   197 00002CB9 F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   198 00002CC0 0F85F9270000        <1>     jnz extErrExit  ;Can't delete a char dev
   199 00002CC6 F605(C6C50300)01    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirReadOnly
   200 00002CCD 0F85EC270000        <1>     jnz extErrExit  ;Can't delete a read only file
   201                              <1>     ;Now check if the cds is redir, or we entered via server to allow wildcards.
   202 00002CD3 E812230000          <1>     call testCDSNet ;Gets working CDS in rdi
   203 00002CD8 7210                <1>     jc .gotoDelete
   204 00002CDA 803D(5CC60300)FF    <1>     cmp byte [dosInvoke], -1    ;Server invoke?
   205 00002CE1 7407                <1>     je .gotoDelete
   206                              <1>     ;Now we check to see if we have wildcards. We do not generally allow them.
   207                              <1>     ;Network CDS and server invokations allow wildcards
   208 00002CE3 E8A1250000          <1>     call scanPathWC
   209 00002CE8 729F                <1>     jc .badPath ;Dont allow wildcards
   210                              <1> .gotoDelete:
   211 00002CEA E830030000          <1>     call deleteMain
   212 00002CEF 0F82CA270000        <1>     jc extErrExit
   213 00002CF5 803D(5CC60300)FF    <1>     cmp byte [dosInvoke], -1    ;Server invoke?
   214 00002CFC 0F85AF270000        <1>     jne extGoodExit
   215                              <1>     ;Here is server invoke, pass through call again.
   216                              <1>     ;We found first, so build a ffblock from the curDir data and find next
   217                              <1>     ;If there are more, delete until no more files match wildcard pattern
   218                              <1> .serverWCloop:
   219 00002D02 FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current DTA address
   220 00002D08 488D3D(90C50300)    <1>     lea rdi, dosffblock
   221 00002D0F 57                  <1>     push rdi    ;Push this address onto the stack
   222 00002D10 E894E5FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
   223 00002D15 8F05(79C30300)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
   224 00002D1B E83DE2FFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
   225 00002D20 8F05(79C30300)      <1>     pop qword [currentDTA]
   226 00002D26 E8F4020000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
   227 00002D2B 73D5                <1>     jnc .serverWCloop     
   228                              <1> ;Stop as soon as an error occurs
   229 00002D2D 3C12                <1>     cmp al, errNoFil    ;Check if no more files (not considered error here)
   230 00002D2F 0F858A270000        <1>     jne extErrExit
   231 00002D35 31C0                <1>     xor eax, eax
   232 00002D37 E975270000          <1>     jmp extGoodExit
   233                              <1> 
   234                              <1> 
   235                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   236                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   237 00002D3C E8010F0000          <1>     call getSFTPtr
   238 00002D41 0F8278270000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   239 00002D47 3C03                <1>     cmp al, 3
   240 00002D49 720A                <1>     jb .validFunction
   241 00002D4B B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   242 00002D50 E96A270000          <1>     jmp extErrExit
   243                              <1> .validFunction:
   244 00002D55 3C01                <1>     cmp al, 1
   245 00002D57 7718                <1>     ja .seekend
   246 00002D59 7203                <1>     jb .seekset
   247                              <1> ;Here we are at seekcur, seek from current (signed)
   248 00002D5B 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   249                              <1> .seekset:
   250                              <1> ;Seek from the start (unsigned)
   251 00002D5E 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   252 00002D61 E8F1220000          <1>     call getUserRegs    ;Get user regs in rsi
   253 00002D66 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   254                              <1> .seekExit:
   255 00002D69 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   256 00002D6C E937270000          <1>     jmp extGoodExit2    ;Return OK in eax 
   257                              <1> .seekend:
   258                              <1> ;Here we are at seekend, seek from end (signed)
   259 00002D71 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   260 00002D77 7505                <1>     jnz .netCheck
   261                              <1> .proceedDisk:
   262 00002D79 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   263 00002D7C EBE0                <1>     jmp short .seekset
   264                              <1> .netCheck:
   265 00002D7E 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   266 00002D84 75F3                <1>     jnz .proceedDisk
   267 00002D86 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   268                              <1>     ;Check it's share mode
   269 00002D8A 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   270 00002D8F 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   271 00002D94 7407                <1>     je .netSeek
   272 00002D96 3D30000000          <1>     cmp eax, denyReadShare
   273 00002D9B 75DC                <1>     jne .proceedDisk
   274                              <1> .netSeek:
   275 00002D9D B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   276 00002DA2 CD4F                <1>     int 4Fh
   277 00002DA4 73C3                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   278 00002DA6 E914270000          <1>     jmp extErrExit
   279                              <1> 
   280                              <1> 
   281                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   282 00002DAB 3C01                <1>     cmp al, 1
   283 00002DAD 760A                <1>     jbe .subFuncOk
   284 00002DAF B801000000          <1>     mov eax, errInvFnc
   285 00002DB4 E906270000          <1>     jmp extErrExit
   286                              <1> .subFuncOk:
   287 00002DB9 4889D6              <1>     mov rsi, rdx
   288 00002DBC 89C3                <1>     mov ebx, eax    ;Store function code in bl
   289 00002DBE 53                  <1>     push rbx
   290 00002DBF 51                  <1>     push rcx
   291 00002DC0 E848240000          <1>     call checkPathspecOK
   292 00002DC5 730E                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   293 00002DC7 740C                <1>     jz .pathOk  ;Can be terminated with a silly char
   294                              <1> .badPath:
   295 00002DC9 59                  <1>     pop rcx
   296 00002DCA 5B                  <1>     pop rbx
   297 00002DCB B803000000          <1>     mov eax, errPnf
   298 00002DD0 E9EA260000          <1>     jmp extErrExit
   299                              <1> .pathOk:
   300 00002DD5 E8F1240000          <1>     call checkPathNet 
   301 00002DDA 74ED                <1>     jz .badPath ;Or Net paths
   302 00002DDC E8A8240000          <1>     call scanPathWC
   303 00002DE1 72E6                <1>     jc .badPath ;Dont allow wildcards
   304 00002DE3 488D3D(7FC40300)    <1>     lea rdi, buffer1
   305 00002DEA 52                  <1>     push rdx
   306 00002DEB C605(56C60300)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   307 00002DF2 E86BE5FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   308 00002DF7 5A                  <1>     pop rdx
   309 00002DF8 59                  <1>     pop rcx
   310 00002DF9 5B                  <1>     pop rbx
   311 00002DFA 0F82BF260000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   312                              <1>     ;In the case of a wildcard, recall this will return the first file
   313 00002E00 803D(5EC60300)FF    <1>     cmp byte [fileExist], -1
   314 00002E07 0F85B2260000        <1>     jnz extErrExit
   315                              <1> 
   316 00002E0D E8D8210000          <1>     call testCDSNet
   317 00002E12 730C                <1>     jnc .notNet
   318 00002E14 750A                <1>     jnz .notNet ;This type of net ok
   319 00002E16 B805000000          <1>     mov eax, errAccDen
   320 00002E1B E99F260000          <1>     jmp extErrExit
   321                              <1> .notNet:
   322 00002E20 84DB                <1>     test bl, bl
   323 00002E22 7526                <1>     jnz .setAttribs
   324                              <1>     ;Get attribs here
   325 00002E24 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   326 00002E2A 7412                <1>     jz .getDiskAttribs
   327 00002E2C B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   328 00002E31 CD4F                <1>     int 4Fh
   329 00002E33 0F8286260000        <1>     jc extErrExit
   330 00002E39 E973260000          <1>     jmp extGoodExit
   331                              <1> .getDiskAttribs:
   332 00002E3E 0FB605(C6C50300)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   333 00002E45 E967260000          <1>     jmp extGoodExit
   334                              <1> .setAttribs:
   335                              <1>     ;Set attribs here
   336 00002E4A 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   337 00002E50 7417                <1>     jz .setDiskAttribs
   338 00002E52 0FB7C9              <1>     movzx ecx, cx
   339 00002E55 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   340 00002E56 B80E110000          <1>     mov eax, 110Eh
   341 00002E5B CD4F                <1>     int 4Fh
   342 00002E5D 59                  <1>     pop rcx
   343 00002E5E 0F825B260000        <1>     jc extErrExit
   344 00002E64 E948260000          <1>     jmp extGoodExit
   345                              <1> .setDiskAttribs:
   346 00002E69 E8A5EFFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   347 00002E6E 0F824B260000        <1>     jc extErrExit
   348 00002E74 F6C118              <1>     test cl, dirVolumeID | dirDirectory
   349 00002E77 740A                <1>     jz .set
   350 00002E79 B805000000          <1>     mov eax, errAccDen
   351 00002E7E E93C260000          <1>     jmp extErrExit
   352                              <1> .set:
   353 00002E83 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   354 00002E86 80E518              <1>     and ch, (dirVolumeID | dirDirectory)    ;Keep these two bits
   355 00002E89 08E9                <1>     or cl, ch
   356 00002E8B 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   357 00002E8E 31C0                <1>     xor eax, eax
   358 00002E90 E91C260000          <1>     jmp extGoodExit
   359                              <1> 
   360                              <1> 
   361                              <1> duplicateHandle:   ;ah = 45h, handle function
   362                              <1> ;Input: bx = Handle to duplicate
   363                              <1> ;Output: If ok then ax = New handle
   364 00002E95 E8090E0000          <1>     call findFreeJFTSpace    ;First find a free space in the JFT
   365 00002E9A 0F821F260000        <1>     jc extErrExit   ;Exit if no space
   366                              <1>     ;rsi points to the free space
   367                              <1> .duplicateCommon:
   368 00002EA0 E8690D0000          <1>     call getJFTPtr  ;Get a pointer to the JFT entry in rdi for bx
   369 00002EA5 4887F7              <1>     xchg rsi, rdi
   370 00002EA8 AC                  <1>     lodsb   ;Move over the SFT ndx from the old to the new position
   371 00002EA9 AA                  <1>     stosb
   372 00002EAA 48FFCE              <1>     dec rsi
   373 00002EAD 48FFCF              <1>     dec rdi
   374                              <1>     ;rdi now points to new position
   375                              <1>     ;rsi points to old position
   376                              <1>     ;al has SFT ndx
   377 00002EB0 4889FE              <1>     mov rsi, rdi    ;Move rsi to point to the new position jft position
   378 00002EB3 0FB6D8              <1>     movzx ebx, al   ;Move SFTndx into ebx
   379 00002EB6 E81E0D0000          <1>     call getSFTPtrfromSFTNdx    ;Get the pointer to the SFT in rdi
   380 00002EBB 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   381                              <1>     ;Now we must return in ax the entry in the JFT 
   382 00002EBE 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP]
   383 00002EC5 488D7F2A            <1>     lea rdi, qword [rdi + psp.jobFileTbl]   ;Point to head of table
   384 00002EC9 4829FE              <1>     sub rsi, rdi    ;Get the difference of the two in si
   385 00002ECC 89F0                <1>     mov eax, esi    ;Get the difference as the return code
   386 00002ECE E9DE250000          <1>     jmp extGoodExit
   387                              <1> 
   388                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   389                              <1> ;Input: bx = Handle to duplicate
   390                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   391                              <1>     ;First we close cx
   392 00002ED3 87D9                <1>     xchg ebx, ecx ;Swap cx and bx
   393 00002ED5 53                  <1>     push rbx
   394 00002ED6 51                  <1>     push rcx
   395 00002ED7 E808FDFFFF          <1>     call closeFileHdl   ;Close handle 
   396 00002EDC 59                  <1>     pop rcx
   397 00002EDD 5B                  <1>     pop rbx
   398                              <1>     retc    ;The error code is set by errExtExit and CF is set on callerFrame
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00002EDE 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00002EE0 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   399                              <1>     ;Else, close was ok, lets duplicate now
   400 00002EE1 E8280D0000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   401 00002EE6 0F82D3250000        <1>     jc extErrExit   ;Return bad with error code in al
   402 00002EEC 87D9                <1>     xchg ebx, ecx   ;Now get source to duplicate in ebx
   403 00002EEE 4889FE              <1>     mov rsi, rdi    ;Put the free space ptr in rsi
   404 00002EF1 EBAD                <1>     jmp short duplicateHandle.duplicateCommon
   405                              <1> 
   406                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   407                              <1> ;Input: cx = Search Attributes, cl only used
   408                              <1> ;       rdx = Ptr to path to file to look for
   409                              <1> ;       al = Document as needing to be 0 for now
   410                              <1> ;Return:
   411                              <1> ;Data in the DTA or error through AX with CF=CY
   412                              <1> ;CAVEATS!
   413                              <1> ;DTA:attribFnd = 40h => Char dev
   414                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   415 00002EF3 880D(56C60300)      <1>     mov byte [searchAttr], cl
   416 00002EF9 4889D6              <1>     mov rsi, rdx
   417 00002EFC E80C230000          <1>     call checkPathspecOK    ;This uses rsi and preserves it
   418 00002F01 730A                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   419                              <1>     ;Dont allow paths which end in a malformed char for ASCIIZ
   420                              <1>     ;ONLY ALLOW TRUENAME TO RESOLVE SUCH PATHS 
   421                              <1> .badPath:
   422 00002F03 B803000000          <1>     mov eax, errPnf
   423 00002F08 E9B2250000          <1>     jmp extErrExit
   424                              <1> .pathspecOk:
   425 00002F0D FF35(79C30300)      <1>     push qword [currentDTA]
   426 00002F13 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   427 00002F1A 48893D(79C30300)    <1>     mov qword [currentDTA], rdi
   428 00002F21 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   429 00002F28 E835E4FFFF          <1>     call getFilePath
   430                              <1> .findfileExit:
   431 00002F2D 8F05(79C30300)      <1>     pop qword [currentDTA]
   432 00002F33 0F8286250000        <1>     jc extErrExit
   433 00002F39 488D3D(90C50300)    <1>     lea rdi, dosffblock
   434 00002F40 57                  <1>     push rdi
   435 00002F41 E863E3FFFF          <1>     call setupFFBlock
   436 00002F46 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   437 00002F47 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
   438 00002F4E B92B000000          <1>     mov ecx, ffBlock_size
   439 00002F53 F3A4                <1>     rep movsb   ;Copy the whole block. 
   440                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   441 00002F55 31C0                <1>     xor eax, eax    ;Return value
   442 00002F57 E955250000          <1>     jmp extGoodExit ;Exit well
   443                              <1> 
   444                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   445                              <1> ;Input: DTA has the find first block from the previous search
   446 00002F5C 488B35(79C30300)    <1>     mov rsi, qword [currentDTA]
   447 00002F63 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   448 00002F6A B92B000000          <1>     mov ecx, ffBlock_size
   449 00002F6F F3A4                <1>     rep movsb
   450 00002F71 FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current DTA address
   451 00002F77 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   452 00002F7E 48893D(79C30300)    <1>     mov qword [currentDTA], rdi
   453 00002F85 E8D3DFFFFF          <1>     call findNextMain
   454 00002F8A EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   455                              <1> 
   456                              <1> renameFile:        ;ah = 56h
   457 00002F8C BB16000000          <1>     mov ebx, dirInclusive
   458 00002F91 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
   459 00002F98 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   460 00002F9B 880D(56C60300)      <1>     mov byte [searchAttr], cl
   461                              <1> 
   462                              <1> 
   463                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   464                              <1> createNewFile:     ;ah = 5Bh
   465                              <1> 
   466                              <1> lockUnlockFile:    ;ah = 5Ch
   467 00002FA1 E919250000          <1>     jmp extErrExit
   468                              <1> setHandleCount:    ;ah = 67h
   469 00002FA6 E914250000          <1>     jmp extErrExit
   470                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   471                              <1>     ;Input: bx = File to flush
   472 00002FAB E8920C0000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   473 00002FB0 0F8209250000        <1>     jc extErrExit
   474 00002FB6 E8F80A0000          <1>     call setCurrentSFT
   475                              <1>     ;Now we check if the device is a char, disk or net file
   476 00002FBB 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   477 00002FBF 66A90080            <1>     test ax, devRedirDev
   478 00002FC3 7512                <1>     jnz .notNet
   479                              <1>     ;Commit file net redir call and exit
   480 00002FC5 B807110000          <1>     mov eax, 1107h
   481 00002FCA CD4F                <1>     int 4Fh
   482 00002FCC 0F82ED240000        <1>     jc extErrExit
   483 00002FD2 E93D000000          <1>     jmp .exitOk
   484                              <1> .notNet:
   485 00002FD7 66A98000            <1>     test ax, devCharDev
   486 00002FDB 7418                <1>     jz .blokDev
   487                              <1>     ;Here we simply update date/time fields in the SFT structure before exiting
   488 00002FDD E873F9FFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   489 00002FE2 0F82D7240000        <1>     jc extErrExit  ;If we fail to get time/date, fail the request
   490                              <1>     ;Build date and time words
   491 00002FE8 E853FAFFFF          <1>     call getDirDTwords  ;Get date time words packed in eax
   492 00002FED 894713              <1>     mov dword [rdi + sft.wTime], eax    ;Store them at the same time
   493 00002FF0 E91F000000          <1>     jmp .exitOk
   494                              <1> .blokDev:
   495 00002FF5 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   496 00002FF9 E8E41F0000          <1>     call setWorkingDPB
   497 00002FFE E87BEEFFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   498 00003003 0F82B6240000        <1>     jc extErrExit
   499 00003009 E86ADBFFFF          <1>     call flushFile  ;Now the file gets flushed
   500 0000300E 0F82AB240000        <1>     jc extErrExit
   501                              <1> .exitOk:
   502 00003014 30C0                <1>     xor al, al
   503 00003016 E83C200000          <1>     call getUserRegs
   504 0000301B 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   505                              <1>     return
    18                              <2> %%_ret:
    19 0000301E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   506                              <1> ;-----------------------------------:
   507                              <1> ;       Main File IO Routines       :
   508                              <1> ;-----------------------------------:
   509                              <1> deleteMain:
   510                              <1> ;Now unlink FAT chain and then clear directory entry
   511                              <1> ;Get the start cluster of this file
   512                              <1> ;Input:
   513                              <1> ; The file must have NOT be read-only.
   514                              <1> ; If the CDS is NOT a net cds then the following must hold:
   515                              <1> ;     - curDirCopy must be filled with the file directory information
   516                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
   517                              <1> ;Output: CF=NC => Success, 
   518                              <1> ; If not net CDS:
   519                              <1> ;   rsi keeps pointing to directory entry.
   520                              <1> ;   al = First char of the file that was deleted.
   521                              <1> ;        CF=CY => Error
   522                              <1> ;The dir buffer must be marked as referenced once we are done with it
   523 0000301F 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   524 00003026 E8BF1F0000          <1>     call testCDSNet ;CF=CY => Not net
   525 0000302B 7208                <1>     jc .notNet
   526 0000302D B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
   527 00003032 CD4F                <1>     int 4Fh
   528                              <1>     return
    18                              <2> %%_ret:
    19 00003034 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   529                              <1> .notNet:
   530 00003035 52                  <1>     push rdx
   531 00003036 0FB715(D5C50300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   532 0000303D 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   533 00003044 C1E010              <1>     shl eax, 10h
   534 00003047 09D0                <1>     or eax, edx ;Add low bits to eax
   535 00003049 5A                  <1>     pop rdx
   536 0000304A 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
   537 0000304C 740E                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
   538 0000304E 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
   539 00003055 E887DDFFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
   540 0000305A 720F                <1>     jc .exit
   541                              <1> .skipUnlink:
   542                              <1>     ;Now replace the first char of the directory to 0E5h
   543                              <1>     ;Get the disk directory in a buffer to manipulate the entry
   544 0000305C E8B2EDFFFF          <1>     call getDiskDirectoryEntry
   545 00003061 7208                <1>     jc .exit
   546 00003063 8A05(62C60300)      <1>     mov al, byte [delChar]
   547 00003069 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
   548                              <1>     ;CF must be clear
   549                              <1> .exit:
   550                              <1>     return
    18                              <2> %%_ret:
    19 0000306B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   551                              <1> 
   552                              <1> openMain:
   553                              <1> ;Input: ax (formally al) = Open mode
   554                              <1> ;       [currentSFT] = SFT we are building
   555                              <1> ;       [workingCDS] = CDS of drive to access
   556                              <1> ;       [workingDPB] = DPB of drive to access
   557                              <1> ;Ouput: CF=CY => Error, eax has error code
   558 0000306C E84F000000          <1>     call .setOpenMode
   559                              <1>     retc    ;Error Exit 
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003071 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   560 00003073 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   561 0000307A 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]
   562 00003081 30E4                <1>     xor ah, ah  ;al has the access mode
   563 00003083 66894702            <1>     mov word [rdi + sft.wOpenMode], ax  ;Set the SFT access mode
   564 00003087 4881FEFFFFFFFF      <1>     cmp rsi, -1
   565 0000308E 750A                <1>     jne .notNet
   566                              <1> .redirOpen:
   567 00003090 50                  <1>     push rax    ;Push open mode onto stack
   568 00003091 B816110000          <1>     mov eax, 1116h  ;Open remote file on \\ pathspec drives
   569 00003096 CD4F                <1>     int 4Fh
   570 00003098 58                  <1>     pop rax
   571                              <1>     return
    18                              <2> %%_ret:
    19 00003099 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   572                              <1> .notNet:
   573 0000309A 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   574 000030A0 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
   575 000030A2 E8D9230000          <1>     call dosCrit1Enter
   576 000030A7 C605(61C60300)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
   577 000030AE C605(62C60300)E5    <1>     mov byte [delChar], 0E5h
   578 000030B5 E8B0000000          <1>     call buildSFTEntry  ;ax must have the open mode
   579                              <1>     ;Here we put Share mode stuff
   580 000030BA E8CB230000          <1>     call dosCrit1Exit
   581                              <1>     return
    18                              <2> %%_ret:
    19 000030BF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   582                              <1> .setOpenMode:
   583                              <1> ;Input: al = Open mode for the file open
   584 000030C0 8805(57C60300)      <1>     mov byte [fileOpenMd], al
   585 000030C6 53                  <1>     push rbx
   586 000030C7 88C3                <1>     mov bl, al
   587 000030C9 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
   588 000030CC 803D(5CC60300)FF    <1>     cmp byte [dosInvoke], -1    
   589 000030D3 7505                <1>     jnz .s1 ;Skip this check if not server invoke
   590 000030D5 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
   591 000030D8 7405                <1>     je .s2
   592                              <1> .s1:
   593 000030DA 80FB40              <1>     cmp bl, denyNoneShare
   594 000030DD 770D                <1>     ja .somBad
   595                              <1> .s2:
   596 000030DF 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
   597 000030E1 80E30F              <1>     and bl, 0Fh
   598 000030E4 80FB02              <1>     cmp bl, RWAccess
   599 000030E7 7703                <1>     ja .somBad
   600 000030E9 5B                  <1>     pop rbx
   601 000030EA F8                  <1>     clc
   602                              <1>     return
    18                              <2> %%_ret:
    19 000030EB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   603                              <1> .somBad:
   604 000030EC 5B                  <1>     pop rbx
   605 000030ED B80C000000          <1>     mov eax, errAccCde
   606 000030F2 F9                  <1>     stc
   607                              <1>     return
    18                              <2> %%_ret:
    19 000030F3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   608                              <1> createMain:
   609                              <1> ;Input: ax (formally al) = File attributes
   610                              <1> ;       [currentSFT] = SFT we are building
   611                              <1> ;       [workingCDS] = CDS of drive to access
   612                              <1> ;       [workingDPB] = DPB of drive to access
   613 000030F4 0FB6C0              <1>     movzx eax, al
   614 000030F7 A8C0                <1>     test al, 80h | 40h   ;Invalid bits?
   615 000030F9 750A                <1>     jnz .invalidAttrib
   616 000030FB A808                <1>     test al, dirVolumeID
   617 000030FD 7506                <1>     jnz .invalidAttrib  ;Creating volume label with this function is forbidden
   618 000030FF 0C20                <1>     or al, dirArchive   ;Set archive bit
   619 00003101 A810                <1>     test al, dirDirectory   
   620 00003103 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
   621                              <1> .invalidAttrib:
   622 00003105 B805000000          <1>     mov eax, errAccDen
   623 0000310A F9                  <1>     stc
   624                              <1>     return
    18                              <2> %%_ret:
    19 0000310B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   625                              <1> .validAttr:
   626 0000310C 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   627 00003113 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]
   628 0000311A 4881FEFFFFFFFF      <1>     cmp rsi, -1
   629 00003121 750A                <1>     jne .diskFile
   630 00003123 50                  <1>     push rax    ;Save the new attributes
   631 00003124 B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
   632 00003129 CD4F                <1>     int 4Fh
   633 0000312B 5B                  <1>     pop rbx
   634                              <1>     return
    18                              <2> %%_ret:
    19 0000312C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   635                              <1> .diskFile:
   636 0000312D 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
   637 00003133 740A                <1>     jz .hardFile
   638 00003135 50                  <1>     push rax    ;Save the new attributes
   639 00003136 B817110000          <1>     mov eax, 1117h  ;Create file with CDS
   640 0000313B CD4F                <1>     int 4Fh
   641 0000313D 5B                  <1>     pop rbx
   642                              <1>     return
    18                              <2> %%_ret:
    19 0000313E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   643                              <1> .hardFile:
   644 0000313F 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
   645 00003145 C605(61C60300)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
   646 0000314C C605(62C60300)E5    <1>     mov byte [delChar], 0E5h
   647 00003153 E828230000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
   648 00003158 50                  <1>     push rax    ;Save the file attributes on stack
   649 00003159 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
   650 0000315E E807000000          <1>     call buildSFTEntry
   651 00003163 5B                  <1>     pop rbx ;Pop the word off (though it has been used already!)
   652                              <1>     ;Here we put Share mode stuff
   653 00003164 E821230000          <1>     call dosCrit1Exit
   654                              <1>     return
    18                              <2> %%_ret:
    19 00003169 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   655                              <1> buildSFTEntry:
   656                              <1> ;Called in a critical section.
   657                              <1> ;Input: al = Open mode
   658                              <1> ;       STACK: File attributes if creating a file
   659                              <1> ;       [currentSFT] = SFT we are building
   660                              <1> ;       [workingCDS] = CDS of drive to access
   661                              <1> ;       [workingDPB] = DPB of drive to access
   662                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
   663                              <1> ;
   664                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
   665                              <1> ;                  - wDeviceInfo is set except for inherit bit
   666                              <1> ;        If CF=CY: - Return fail
   667                              <1> ;
   668                              <1> ;
   669                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
   670                              <1> ;   If not, create disk entry.
   671                              <1> ;Check if the device was a char device by checking curDirCopy.
   672                              <1> ;If disk, get dpb. We check if the parent dir was found.
   673                              <1> 
   674                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
   675                              <1> ; to start of file fields of the SFT
   676 0000316A 55                  <1>     push rbp    ;file attribute is rbp + 10h
   677 0000316B 4889E5              <1>     mov rbp, rsp
   678 0000316E 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
   679                              <1> ;Set the open mode
   680 00003175 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
   681                              <1> ;Get current time
   682 00003179 E8D7F7FFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   683 0000317E E8BDF8FFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
   684 00003183 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
   685                              <1> ;Set current Owner
   686 00003186 488B05(81C30300)    <1>     mov rax, qword [currentPSP]
   687 0000318D 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
   688                              <1> ;Set file pointer to first byte
   689 00003191 C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
   690                              <1> ;Common fields set
   691 00003198 F605(61C60300)FF    <1>     test byte [openCreate], -1  ;Create = -1
   692 0000319F 0F8458010000        <1>     jz .openProc
   693                              <1>     ;Here if Creating a file.
   694 000031A5 F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
   695 000031AC 0F8554010000        <1>     jnz .charDev
   696 000031B2 F605(5EC60300)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
   697 000031B9 0F8493000000        <1>     jz .createFile
   698                              <1>     ;Here disk file exists, so recreating the file.
   699 000031BF E85BFEFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
   700                              <1>     ;al has the char for the filename
   701                              <1>     ;Sets vars for the sector/offset into the sector
   702 000031C4 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   703 000031CB 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
   704 000031CD 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
   705                              <1>     ;al has file attributes.
   706 000031D1 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
   707 000031D3 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
   708 000031D6 31C0                <1>     xor eax, eax
   709                              <1>     ;Clear all the fields south of ntRes (20 bytes)
   710 000031D8 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
   711 000031DC 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
   712 000031E0 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
   713 000031E3 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
   714 000031E6 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
   715 000031E9 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
   716                              <1> 
   717 000031EC 57                  <1>     push rdi    ;Save SFT pointer
   718 000031ED 488D3D(BBC50300)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
   719 000031F4 B920000000          <1>     mov ecx, fatDirEntry_size
   720 000031F9 F3A4                <1>     rep movsb
   721 000031FB E890D7FFFF          <1>     call setBufferDirty ;We wrote to this buffer
   722 00003200 5F                  <1>     pop rdi
   723                              <1> .createCommon:  ;rdi must point to the current SFT 
   724                              <1>     ;Now populate the remaining SFT fields 
   725 00003201 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   726 00003208 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
   727 0000320B 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
   728 0000320E 488B05(98C60300)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
   729 00003215 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
   730 00003219 0FB705(A0C60300)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
   731 00003220 C0E805              <1>     shr al, 5   ;Divide by 5 to get directory entry number
   732 00003223 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
   733 00003226 31C0                <1>     xor eax, eax
   734                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
   735 00003228 8A05(63C60300)      <1>     mov al, byte [workingDrv]
   736 0000322E 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
   737 00003232 488B05(64C60300)    <1>     mov rax, qword [workingDPB]
   738 00003239 48894707            <1>     mov qword [rdi + sft.qPtr], rax
   739                              <1>     ;Last thing, copy the filename over
   740                              <1>     ;Now save the name
   741                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
   742 0000323D 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
   743 00003241 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   744 00003248 48A5                <1>     movsq   ;Copy over the space padded name to the sft
   745 0000324A 66A5                <1>     movsw
   746 0000324C A4                  <1>     movsb
   747                              <1>     ;SFT filled, now we can return
   748 0000324D E9E2000000          <1>     jmp .exit
   749                              <1> .createFile:
   750                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
   751                              <1>     ;rsi points to current sda entry
   752 00003252 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
   753                              <1>     ;Clear out the dir entry
   754 00003259 57                  <1>     push rdi
   755 0000325A B904000000          <1>     mov ecx, 4
   756 0000325F 31C0                <1>     xor eax, eax
   757 00003261 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
   758 00003264 5F                  <1>     pop rdi
   759                              <1>     ;Copy the FCB name over    
   760 00003265 56                  <1>     push rsi
   761 00003266 57                  <1>     push rdi
   762 00003267 B90B000000          <1>     mov ecx, 11
   763 0000326C 488D35(DBC50300)    <1>     lea rsi, fcbName
   764 00003273 F3A4                <1>     rep movsb   ;Move over the FCB name
   765 00003275 5F                  <1>     pop rdi
   766 00003276 5E                  <1>     pop rsi
   767                              <1> 
   768 00003277 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
   769                              <1>     ;al has file attributes.
   770 0000327B 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
   771 0000327D 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
   772 00003280 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
   773 00003283 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
   774 00003286 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
   775 00003289 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
   776                              <1> .searchForDirSpace:
   777 0000328F 8905(D6C60300)      <1>     mov dword [dirClustA], eax
   778 00003295 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
   779 00003297 668905(DAC60300)    <1>     mov word [dirSect], ax
   780 0000329E 8905(DCC60300)      <1>     mov dword [dirEntry], eax
   781 000032A4 57                  <1>     push rdi
   782 000032A5 E855EBFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
   783 000032AA 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
   784 000032AB 731C                <1>     jnc .dirEntryFnd
   785 000032AD 813D(D2C60300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
   785 000032B5 0000                <1>
   786 000032B7 747D                <1>     je .bad ;Set CF and exit
   787 000032B9 E852ECFFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
   788 000032BE 7274                <1>     jc .exit
   789 000032C0 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
   790 000032C5 746F                <1>     je .bad
   791                              <1>     ;Else eax = Newly allocated cluster
   792 000032C7 EBC6                <1>     jmp short .searchForDirSpace
   793                              <1> .dirEntryFnd:
   794 000032C9 4887FE              <1>     xchg rdi, rsi
   795 000032CC B904000000          <1>     mov ecx, 4
   796 000032D1 F348A5              <1>     rep movsq   ;Copy over the buffered directory
   797 000032D4 E8B7D6FFFF          <1>     call setBufferDirty ;We wrote to this buffer
   798 000032D9 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   799 000032E0 E91CFFFFFF          <1>     jmp .createCommon
   800                              <1> .open:
   801                              <1> ;curdircopy has a copy of the disk file directory
   802                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
   803 000032E5 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   804 000032EC 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
   805                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
   806 000032F3 E81BEBFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
   807 000032F8 E904FFFFFF          <1>     jmp .createCommon
   808                              <1> 
   809                              <1> .openProc:
   810                              <1>     ;Here if Opening a file.
   811 000032FD F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
   812 00003304 74DF                <1>     jz .open
   813                              <1> .charDev:
   814 00003306 488B05(BBC50300)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
   815 0000330D E8CB1F0000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
   816 00003312 7307                <1>     jnc .notBadCharDevName
   817 00003314 B805000000          <1>     mov eax, errAccDen
   818 00003319 EB19                <1>     jmp short .exit ;CF already set
   819                              <1> .notBadCharDevName:
   820 0000331B 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
   821 0000331F 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
   822 00003323 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
   823 00003326 80CB60              <1>     or bl, charDevBinary | charDevNoEOF ;Set binary mode and noEOF on read
   824 00003329 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
   825 0000332D C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
   826                              <1> .exit:
   827 00003334 5D                  <1>     pop rbp
   828                              <1>     return
    18                              <2> %%_ret:
    19 00003335 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   829                              <1> .bad:
   830 00003336 F9                  <1>     stc
   831 00003337 EBFB                <1>     jmp short .exit
   832                              <1> closeMain: ;Int 4Fh AX=1201h
   833                              <1> ;Gets the directory entry for a file
   834                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
   835                              <1> ;If CF=CY on return: Error, return error with al = error code
   836                              <1> ;Preserve all regs except eax and rdi
   837                              <1> ; If CF=NC on return: eax = Unknown
   838                              <1> ;                     rdi = current SFT ptr
   839 00003339 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
   840 00003340 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
   841 00003346 7408                <1>     jz .physical
   842                              <1>     ;Here we beep out the request to the network redirector (Int 4Fh AX=1106h)
   843 00003348 B806110000          <1>     mov eax, 1106h  ;Make request
   844 0000334D CD4F                <1>     int 4Fh ;Beep!
   845                              <1>     return  ;Returns with CF set or clear as appropriate
    18                              <2> %%_ret:
    19 0000334F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   846                              <1> .physical:  
   847                              <1> ; We make a request to the dev dir to close the device
   848                              <1> ; If the device is disk, we then update the directory entry for the disk file
   849 00003350 E82B210000          <1>     call dosCrit1Enter  ;Enter critical section 1
   850 00003355 53                  <1>     push rbx
   851 00003356 56                  <1>     push rsi
   852 00003357 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
   853 0000335B 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   854 00003361 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
   855                              <1>     ;rsi has DPB pointer here
   856                              <1>     ;rdi has the SFT pointer
   857 00003363 55                  <1>     push rbp
   858 00003364 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
   859 00003367 E8761C0000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
   860 0000336C E80DEBFFFF          <1>     call updateDirectoryEntryForFile
   861 00003371 5D                  <1>     pop rbp
   862                              <1>     ;If CF is set, Fail was requested and ax has an error code
   863 00003372 722F                <1>     jc .exit
   864 00003374 E8FFD7FFFF          <1>     call flushFile
   865 00003379 7228                <1>     jc .exit    ;If something went wrong, exit
   866 0000337B 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
   867 0000337F 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
   868                              <1> .charClose:
   869                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
   870                              <1>     ;We now decrement handle count in SFT structure
   871 00003383 E860090000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
   872 00003388 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
   873 0000338B 7503                <1>     jnz .driverClose
   874 0000338D 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
   875                              <1> .driverClose:
   876 00003390 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
   877                              <1>     ;and if the device is a disk device, cl will have the unit number
   878                              <1>     ;We first check if the driver supports oper/close requests
   879 00003391 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL   ;Support Close?
   880 00003397 750A                <1>     jnz .exit  ;If not, immediately jump to exit, all is well
   881                              <1>     ;rsi has device driver ptr for device, make request
   882 00003399 E8EB1B0000          <1>     call primReqCloseSetup  ;rbx gets header ptr, rsi has driver ptr
   883 0000339E E898180000          <1>     call goDriver   ;Make request
   884                              <1>     ;Don't check the status here, as we are simply informing the driver 
   885                              <1>     ; of an operation. Nothing should be able to go wrong. 
   886                              <1>     ;Functionally, an ignore if anything does go wrong.
   887                              <1> .exit:
   888 000033A3 5E                  <1>     pop rsi
   889 000033A4 5B                  <1>     pop rbx
   890 000033A5 E8E0200000          <1>     call dosCrit1Exit
   891                              <1>     return
    18                              <2> %%_ret:
    19 000033AA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   892                              <1> 
   893                              <1> readBytes:
   894                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
   895                              <1> ;Input: ecx = Number of bytes to read
   896                              <1> ;Output: ecx = Number of bytes read
   897                              <1> ;Number of bytes read 
   898                              <1> ;If CF=CY, return with error code in ax
   899 000033AB E80B070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   900 000033B0 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   901 000033B4 240F                <1>     and al, 0Fh ;Eliminate except access mode
   902 000033B6 3C01                <1>     cmp al, WriteAccess
   903 000033B8 7509                <1>     jne .readable
   904 000033BA B805000000          <1>     mov eax, errAccDen
   905 000033BF 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
   906 000033C1 F9                  <1>     stc
   907                              <1>     return
    18                              <2> %%_ret:
    19 000033C2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   908                              <1> .readable:
   909 000033C3 E834070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
   910 000033C8 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
   911 000033CB 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   912 000033D1 740A                <1>     jz .notRedir
   913 000033D3 B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
   914 000033D8 CD4F                <1>     int 4Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
   915                              <1>     return 
    18                              <2> %%_ret:
    19 000033DA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   916                              <1> .exitOk:
   917 000033DB F8                  <1>     clc
   918                              <1>     return 
    18                              <2> %%_ret:
    19 000033DC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   919                              <1> .notRedir:
   920 000033DD 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   921 000033E3 7510                <1>     jnz readCharDev
   922 000033E5 E896200000          <1>     call dosCrit1Enter
   923 000033EA E89C010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
   924 000033EF E896200000          <1>     call dosCrit1Exit
   925                              <1>     return 
    18                              <2> %%_ret:
    19 000033F4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   926                              <1> readCharDev:
   927                              <1> ;rdi points to sft for char dev to read
   928                              <1> ;ecx has the number of bytes to transfer
   929                              <1> ;Vars have been set up and DTA has the transfer address
   930                              <1> ;Returns in ecx, the actual bytes transferred
   931                              <1> ;If CF=CY, return with error code in ax
   932 000033F5 C605(6CC30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
   933 000033FC 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
   934 00003400 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
   935 00003407 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
   936 0000340A 0F845D020000        <1>     jz readExitOk    ;If it does, jump to exit as if EOF has been hit
   937 00003410 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
   938 00003413 7407                <1>     jz .notNul
   939                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
   940                              <1>     ;NUL never transfers bytes 
   941 00003415 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
   942 00003417 E951020000          <1>     jmp readExitOk    ;Goto exit
   943                              <1> .notNul:
   944 0000341C F6C320              <1>     test bl, charDevBinary
   945 0000341F 0F857F000000        <1>     jnz .binary
   946                              <1>     ;Here if the device is in ASCII mode
   947 00003425 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
   948 00003428 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
   949                              <1> .consoleInput:
   950                              <1>     ;Console input here
   951 0000342E E80EF1FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
   952                              <1>     ;Get current offset into buffer (if one exists)
   953 00003433 488B35(23C00300)    <1>     mov rsi, qword [vConHdlOff]
   954 0000343A 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
   955 0000343D 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
   956 0000343F 803D(B0C20300)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
   957 00003446 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
   958                              <1>     ;Else, reset the buffer
   959 00003448 66C705(B0C20300)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
   959 00003450 FF                  <1>
   960                              <1> .oldBuf:
   961                              <1> ;Preserve the dta and number of chars to tfr
   962 00003451 51                  <1>     push rcx
   963 00003452 57                  <1>     push rdi
   964 00003453 488D15(B0C20300)    <1>     lea rdx, vConInBuf
   965 0000345A E802F1FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
   966 0000345F 5F                  <1>     pop rdi
   967 00003460 59                  <1>     pop rcx
   968 00003461 488D35(B2C20300)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
   969 00003468 803E1A              <1>     cmp byte [rsi], EOF
   970 0000346B 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
   971 0000346D C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
   972 00003470 B00A                <1>     mov al, LF
   973 00003472 E87CECFFFF          <1>     call charOut_B.in   ;Echo CRLF
   974 00003477 31F6                <1>     xor esi, esi    ;Set ZF = ZE
   975 00003479 EB18                <1>     jmp short .exit
   976                              <1> .tfrBuf:
   977 0000347B AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
   978 0000347C AA                  <1>     stosb
   979 0000347D 3C0D                <1>     cmp al, CR 
   980 0000347F 7503                <1>     jne .noCRLF
   981 00003481 C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
   982                              <1> .noCRLF:
   983 00003484 3C0A                <1>     cmp al, LF  ;Compare if al is LF
   984 00003486 E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
   985 00003488 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
   986                              <1>     ;This only applies if the reason for exiting the loop is al=LF
   987 0000348A E864ECFFFF          <1>     call charOut_B.in   ;Echo CRLF
   988 0000348F 31F6                <1>     xor esi, esi
   989 00003491 0C01                <1>     or al, 1    ;Set ZF = NZ
   990                              <1> .exit:
   991 00003493 E8C1F0FFFF          <1>     call vConRetDriver
   992 00003498 488935(23C00300)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
   993 0000349F E9C9010000          <1>     jmp readExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
   994                              <1> 
   995                              <1> .binary:
   996                              <1>     ;Setup registers for transfer
   997 000034A4 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
   998 000034A7 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
   999                              <1>     ;ecx has the number of bytes to transfer directly
  1000 000034AA E82B1A0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1001 000034AF 488B35(64C60300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1002 000034B6 E880170000          <1>     call goDriver   ;Make the request
  1003 000034BB 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1004 000034BE 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1005 000034C5 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1006 000034CB 7422                <1>     jz .binNoError
  1007                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
  1008 000034CD B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1009 000034CF E83A160000          <1>     call charDevErr   ;ah = has part of the error 
  1010                              <1>     ;al now has the response
  1011 000034D4 3C00                <1>     cmp al, critIgnore
  1012 000034D6 7417                <1>     je .binNoError ;Simply proceed as normal
  1013 000034D8 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1014 000034DB 3C03                <1>     cmp al, critFail
  1015 000034DD 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1016                              <1>     ;Fallthrough here for fail!
  1017                              <1> .failExit:
  1018 000034DF 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1019 000034E6 31C9                <1>     xor ecx, ecx
  1020 000034E8 B805000000          <1>     mov eax, errAccDen
  1021 000034ED F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1022                              <1>     return
    18                              <2> %%_ret:
    19 000034EE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1023                              <1> .binNoError:
  1024                              <1>     ;Get number of bytes transferred into 
  1025 000034EF 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1026 000034F5 F7D8                <1>     neg eax ;make it into -eax
  1027 000034F7 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1028                              <1>     ;ecx now has bytes left to transfer
  1029 000034FB 50                  <1>     push rax    ;Save value on stack
  1030 000034FC 31C0                <1>     xor eax, eax ;Set ZF
  1031 000034FE FFC0                <1>     inc eax ;Clear ZF
  1032 00003500 58                  <1>     pop rax ;Get back the original value
  1033 00003501 E967010000          <1>     jmp readExitOk    ;GoExit with ecx=Bytes left to read
  1034                              <1> .generalASCII:
  1035                              <1>     ;ecx has bytes to transfer here
  1036                              <1>     ;Setup registers for transfer
  1037 00003506 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1038 00003509 51                  <1>     push rcx
  1039 0000350A B901000000          <1>     mov ecx, 1  ;Get one char
  1040 0000350F 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1041 00003512 E8C3190000          <1>     call primReqReadSetup   ;Setup request
  1042 00003517 59                  <1>     pop rcx
  1043                              <1>     ;rbx now has request header ptr
  1044 00003518 488B35(64C60300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1045                              <1> .asciiReadChar:
  1046 0000351F 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1047 00003522 E89EEFFFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1048 00003527 E80F170000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1049 0000352C 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1050 00003533 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1051 00003539 741E                <1>     jz .asciiNoError
  1052 0000353B E8CE150000          <1>     call charDevErr    ;Call Int 44h
  1053                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1054 00003540 C705(38C40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1054 00003548 0000                <1>
  1055 0000354A 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1056 0000354D 3C03                <1>     cmp al, critFail
  1057 0000354F 748E                <1>     je .failExit
  1058 00003551 3C01                <1>     cmp al, critRetry
  1059 00003553 74CA                <1>     je .asciiReadChar
  1060                              <1>     ;Ignore here, pretend NULL CHAR was read
  1061 00003555 30C0                <1>     xor al, al
  1062 00003557 EB15                <1>     jmp short .asciiIgnoreEP
  1063                              <1> .asciiNoError:
  1064                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1065                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1066                              <1> ;Preserve RBX, RSI
  1067                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1068 00003559 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1069 0000355C 813D(38C40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1069 00003564 0000                <1>
  1070 00003566 0F8501010000        <1>     jne readExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1071 0000356C 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1072                              <1> .asciiIgnoreEP:
  1073 0000356E 48FF05(30C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1074 00003575 48FFC7              <1>     inc rdi ;Also advance register pointer
  1075 00003578 3C1A                <1>     cmp al, EOF ;Was this char EOF?
  1076 0000357A 0F84ED000000        <1>     je readExitOk
  1077 00003580 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1078 00003582 E09B                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1079                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1080 00003584 FEC0                <1>     inc al  ;make ZF=NZ
  1081 00003586 E9E2000000          <1>     jmp readExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1082                              <1> 
  1083                              <1> readDiskFile:
  1084                              <1> ;rdi = Current SFT
  1085                              <1> ;rbp = WorkingDPB
  1086                              <1> ;ecx = Bytes to transfer
  1087 0000358B C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  1088 00003592 C605(5AC60300)00    <1>     mov byte [rwFlag], 0    ;Read operation
  1089                              <1>     ;We have the following vars setup:
  1090                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  1091                              <1>     ;currClustF
  1092                              <1>     ;Now convert currSectC to disk sector by using currClustF
  1093                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  1094 00003599 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1095 0000359C 85D2                <1>     test edx, edx
  1096 0000359E 0F84C9000000        <1>     jz readExitOk  ;Return with zero bytes transferred
  1097 000035A4 8B15(A2C60300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  1098 000035AA 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  1099 000035AD 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  1100 000035AF 0F84B8000000        <1>     jz readExitOk
  1101 000035B5 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  1102 000035B7 8B0D(CAC60300)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  1103 000035BD 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  1104 000035BF 741E                <1>     jz .skipWalk
  1105                              <1> .goToCurrentCluster:
  1106 000035C1 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  1107 000035C6 0F84A1000000        <1>     je readExitOk ;Exit with no bytes transferred
  1108 000035CC 89C3                <1>     mov ebx, eax    ;Save eax as current cluster
  1109 000035CE E844D8FFFF          <1>     call readFAT    ;Get in eax the next cluster
  1110 000035D3 0F8285000000        <1>     jc .badExit   ;This can only return Fail
  1111 000035D9 FFCA                <1>     dec edx ;Decrement counter
  1112 000035DB 75E4                <1>     jnz .goToCurrentCluster
  1113                              <1> ;Now we fall out with ebx = Current cluster
  1114 000035DD 89D8                <1>     mov eax, ebx    ;Get the current cluster in eax
  1115                              <1> .skipWalk:
  1116 000035DF E859D6FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  1117                              <1>     ;Now we add the offset to this
  1118 000035E4 0FB61D(AEC60300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  1119 000035EB 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  1120 000035EE 488905(AFC60300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  1121                              <1> ;Main
  1122                              <1> .mainRead:
  1123 000035F5 E85AD5FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuf var for sector in rax
  1124 000035FA 7262                <1>     jc .badExit
  1125 000035FC 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  1126 00003600 0FB71D(B7C60300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  1127 00003607 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  1128                              <1>     ;Now we read the smallest of the following from the sector buffer:
  1129                              <1>     ; 1) Sector size, 2) Bytes left in File, 3) Bytes left to read from Request
  1130 0000360A 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  1131 0000360D 2B4F1B              <1>     sub ecx, dword [rdi + sft.dCurntOff] ;Get bytes left to read in file in ecx
  1132 00003610 8B1D(CEC60300)      <1>     mov ebx, dword [tfrCntr]
  1133 00003616 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  1134 00003618 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  1135 0000361B 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  1136 0000361F 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  1137 00003621 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  1138 00003624 57                  <1>     push rdi
  1139 00003625 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
  1140 0000362C E855060000          <1>     call readWriteBytesBinary
  1141 00003631 48893D(79C30300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  1142 00003638 5F                  <1>     pop rdi
  1143 00003639 8B0D(CEC60300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  1144 0000363F 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  1145 00003641 742A                <1>     jz readExitOk ;Exit if so!
  1146 00003643 E843D7FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  1147 00003648 7214                <1>     jc .badExit
  1148 0000364A 7421                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  1149                              <1>     ;Else repeat
  1150                              <1>     ;currSectD has been updated, we now set currByteS = 0
  1151 0000364C 66C705(B7C60300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  1151 00003654 00                  <1>
  1152 00003655 488B05(AFC60300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  1153 0000365C EB97                <1>     jmp short .mainRead
  1154                              <1> .badExit:
  1155                              <1>     ;When a disk error occurs within the bit where vars have changed,
  1156                              <1>     ; we need to update the SFT before returning
  1157 0000365E 8B0D(CEC60300)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  1158 00003664 30C0                <1>     xor al, al  ;Set ZF flag
  1159 00003666 E802000000          <1>     call readExitOk   ;We call this
  1160 0000366B F9                  <1>     stc ;All calls which end up here return Fail!
  1161 0000366C C3                  <1>     ret
  1162                              <1> 
  1163                              <1> readExitOk:
  1164                              <1> ;Input: ecx = Number of bytes left to transfer!
  1165                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
  1166 0000366D 890D(CEC60300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  1167 00003673 7509                <1>     jnz .skipbitClear
  1168 00003675 E841040000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
  1169                              <1>     ;The disk transfer must've flushed by now. 
  1170 0000367A 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~(blokFileToFlush|charDevNoEOF) ;OR
  1171                              <1>     ;Next char dev read should give EOF.
  1172                              <1> .skipbitClear:  ;Or skip that entirely
  1173 0000367E E840040000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  1174                              <1>     return 
    18                              <2> %%_ret:
    19 00003683 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1175                              <1> 
  1176                              <1> writeBytes:
  1177                              <1> ;Writes the bytes from the user buffer
  1178                              <1> ;Input: ecx = Bytes to xfr
  1179                              <1> ;Returns number of bytes written in ecx
  1180 00003684 E832040000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1181 00003689 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1182 0000368D 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1183 0000368F 3C00                <1>     cmp al, ReadAccess
  1184 00003691 7509                <1>     jne .writeable
  1185                              <1> .noWrite:
  1186 00003693 B805000000          <1>     mov eax, errAccDen
  1187 00003698 31C9                <1>     xor ecx, ecx
  1188 0000369A F9                  <1>     stc
  1189 0000369B C3                  <1>     ret
  1190                              <1> .writeable:
  1191 0000369C 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1192 000036A2 7406                <1>     jz .skipAttribCheck ;FCB files don't check file attributes
  1193 000036A4 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  1194 000036A8 74E9                <1>     je .noWrite ;If the file is read only, RIP
  1195                              <1> .skipAttribCheck:
  1196 000036AA E84D040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  1197 000036AF 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1198 000036B5 7408                <1>     jz .notRedir
  1199 000036B7 B809110000          <1>     mov eax, 1109h  ;Write to redir
  1200 000036BC CD4F                <1>     int 4Fh
  1201                              <1>     return
    18                              <2> %%_ret:
    19 000036BE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1202                              <1> .notRedir:
  1203 000036BF 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1204 000036C5 7510                <1>     jnz writeCharDev
  1205 000036C7 E8B41D0000          <1>     call dosCrit1Enter
  1206 000036CC E84C010000          <1>     call writeDiskFile
  1207 000036D1 E8B41D0000          <1>     call dosCrit1Exit
  1208                              <1>     return
    18                              <2> %%_ret:
    19 000036D6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1209                              <1> writeCharDev:
  1210 000036D7 C605(6CC30300)04    <1>     mov byte [errorLocus], eLocChr
  1211                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  1212 000036DE 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  1213 000036E4 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  1214                              <1>     ;If ecx = 0, we exit
  1215 000036E8 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  1216 000036EA 85C9                <1>     test ecx, ecx
  1217 000036EC 0F84AA030000        <1>     jz writeExit
  1218 000036F2 488B1D(79C30300)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  1219 000036F9 4889DF              <1>     mov rdi, rbx
  1220 000036FC 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  1221 000036FE A820                <1>     test al, charDevBinary
  1222 00003700 744A                <1>     jz .asciiDev
  1223                              <1> ;Write binary transfer here
  1224                              <1> .binaryLp:
  1225 00003702 31C0                <1>     xor eax, eax
  1226 00003704 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1227 00003707 E8C3170000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1228 0000370C 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
  1229 00003713 E81F150000          <1>     call goDriverChar
  1230 00003718 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  1231 0000371B B487                <1>     mov ah, critCharDev | critData | critWrite
  1232 0000371D 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1233 00003724 F7C700800000        <1>     test edi, drvErrStatus
  1234 0000372A 7415                <1>     jz .binXfrOk
  1235 0000372C E8DD130000          <1>     call charDevErr ;Invoke Int 44h
  1236 00003731 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  1237 00003734 3C00                <1>     cmp al, critIgnore
  1238 00003736 7409                <1>     je .binXfrOk
  1239 00003738 3C01                <1>     cmp al, critRetry
  1240 0000373A 74C6                <1>     je .binaryLp
  1241 0000373C E9D5000000          <1>     jmp .exitFail
  1242                              <1> .binXfrOk:
  1243 00003741 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  1244 00003747 E950030000          <1>     jmp writeExit   ;Exit oki with # bytes xfrd in eax
  1245                              <1> .asciiDev:
  1246 0000374C A802                <1>     test al, charDevConOut
  1247 0000374E 0F859E000000        <1>     jnz .conDev
  1248 00003754 A804                <1>     test al, charDevNulDev
  1249 00003756 0F858F000000        <1>     jnz .nulDev
  1250                              <1>     ;Here we transfer for a generic character device in ascii mode
  1251 0000375C 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  1252 0000375E 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  1253 00003761 0F8435030000        <1>     je writeExit
  1254 00003767 51                  <1>     push rcx
  1255 00003768 B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  1256 0000376D 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1257 00003770 E85A170000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1258 00003775 59                  <1>     pop rcx
  1259 00003776 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
  1260 0000377D 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  1261                              <1> .asciiLp:
  1262 00003781 E83FEDFFFF          <1>     call checkBreak
  1263 00003786 E8B0140000          <1>     call goDriver
  1264 0000378B 57                  <1>     push rdi
  1265 0000378C B487                <1>     mov ah, critCharDev | critData | critWrite
  1266 0000378E 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1267 00003795 F7C700800000        <1>     test edi, drvErrStatus
  1268 0000379B 741D                <1>     jz .asciiNoError
  1269 0000379D E86C130000          <1>     call charDevErr ;Invoke Int 44h
  1270 000037A2 5F                  <1>     pop rdi
  1271 000037A3 C705(38C40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  1271 000037AB 0000                <1>
  1272 000037AD 3C01                <1>     cmp al, critRetry
  1273 000037AF 74D0                <1>     je .asciiLp
  1274 000037B1 3C00                <1>     cmp al, critIgnore
  1275 000037B3 7412                <1>     je .ignoreEp
  1276 000037B5 E95C000000          <1>     jmp .exitFail
  1277                              <1> .asciiNoError:
  1278 000037BA 5F                  <1>     pop rdi
  1279 000037BB 813D(38C40300)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  1279 000037C3 0000                <1>
  1280 000037C5 741D                <1>     je .bytesXfrdOk
  1281                              <1> .ignoreEp:
  1282 000037C7 FFC2                <1>     inc edx ;One more char has been xfrd
  1283 000037C9 FF05(30C40300)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  1284 000037CF 48FFC7              <1>     inc rdi ;And our copy... 
  1285 000037D2 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  1286 000037D5 740D                <1>     je .bytesXfrdOk
  1287 000037D7 66C705(25C40300)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  1287 000037DF 00                  <1>
  1288 000037E0 FFC9                <1>     dec ecx
  1289 000037E2 759D                <1>     jnz .asciiLp
  1290                              <1> .bytesXfrdOk:
  1291 000037E4 89D0                <1>     mov eax, edx
  1292 000037E6 E9B1020000          <1>     jmp writeExit
  1293                              <1> .nulDev:
  1294 000037EB 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  1295 000037ED E9AA020000          <1>     jmp writeExit
  1296                              <1> .conDev:
  1297 000037F2 E84AEDFFFF          <1>     call vConSwapDriver
  1298 000037F7 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  1299 000037FA 51                  <1>     push rcx
  1300                              <1> .conDevLp:
  1301 000037FB AC                  <1>     lodsb
  1302 000037FC 3C1A                <1>     cmp al, EOF
  1303 000037FE 7409                <1>     je .conDevExit
  1304 00003800 E8EEE8FFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  1305 00003805 FFC9                <1>     dec ecx
  1306 00003807 75F2                <1>     jnz .conDevLp
  1307                              <1> .conDevExit:
  1308 00003809 58                  <1>     pop rax ;Get initial ecx back into eax
  1309 0000380A 29C8                <1>     sub eax, ecx
  1310 0000380C E848EDFFFF          <1>     call vConRetDriver
  1311 00003811 E986020000          <1>     jmp writeExit   ;Input: eax = bytes xfrd
  1312                              <1> .exitFail:
  1313 00003816 B805000000          <1>     mov eax, errAccDen
  1314 0000381B F9                  <1>     stc
  1315                              <1>     return
    18                              <2> %%_ret:
    19 0000381C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1316                              <1> writeDiskFile:
  1317                              <1>     ;rdi has SFT ptr
  1318 0000381D C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk 
  1319 00003824 C605(5AC60300)FF    <1>     mov byte [rwFlag], -1    ;Write operation
  1320 0000382B 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  1321 00003831 0F8542020000        <1>     jnz .badExit
  1322 00003837 31DB                <1>     xor ebx, ebx
  1323 00003839 891D(C6C60300)      <1>     mov dword [bytesAppend], ebx ;Reset the appending counter
  1324 0000383F 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  1325                              <1>     ;If the start cluster is 0, we create a new cluster chain
  1326 00003842 85C0                <1>     test eax, eax
  1327 00003844 7520                <1>     jnz .notStart
  1328 00003846 E86CD4FFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  1329 0000384B 0F821F020000        <1>     jc .exitPrepHardErr
  1330 00003851 3DFFFFFFFF          <1>     cmp eax, -1
  1331 00003856 0F8424020000        <1>     je .exitPrep
  1332                              <1>     ;Now eax has the first cluster of chain
  1333 0000385C 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  1334 0000385F C605(C5C60300)FF    <1>     mov byte [fileGrowing], -1  ;Set to true as this only occurs for new files!
  1335                              <1> .notStart:
  1336 00003866 E8FFD3FFFF          <1>     call getLastClusterInChain  ;to get the current last cluster in the file
  1337 0000386B 8905(C1C60300)      <1>     mov dword [lastClustA], eax
  1338 00003871 E80DD4FFFF          <1>     call getNumberOfClustersInChain ;Gets number of clusters
  1339 00003876 FFC8                <1>     dec eax ;Turn into an offset of clusters in file
  1340 00003878 8905(BDC60300)      <1>     mov dword [lastClust], eax
  1341                              <1>     ;Get the disk cluster of the file (currClustD)
  1342 0000387E 8B0D(A2C60300)      <1>     mov ecx, dword [currClustF]
  1343 00003884 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]
  1344 00003887 E812D4FFFF          <1>     call getClusterInChain  ;Returns in eax the disk cluster value
  1345 0000388C 0F82E7010000        <1>     jc .badExit
  1346                              <1>     ;ecx has the number of clusters we need to extend the allocation by.
  1347 00003892 67E36A              <1>     jecxz .skipExtension
  1348 00003895 E8A3D4FFFF          <1>     call findFreeClusterData    ;This updates the dpb to have free cluster data
  1349 0000389A 0F82D9010000        <1>     jc .badExit
  1350 000038A0 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters
  1351 000038A5 0F84EF010000        <1>     je .noByteExit
  1352 000038AB 394D31              <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], ecx
  1353 000038AE 0F82E6010000        <1>     jb .noByteExit    ;If dNumberOfFreeClusters < ecx, exit
  1354                              <1>     ;Enough to extend by ecx amount
  1355 000038B4 8B1D(C1C60300)      <1>     mov ebx, dword [lastClustA] ;Get the last disk cluster of the file
  1356 000038BA E819D4FFFF          <1>     call allocateClusters   ;Extend by ecx clusters
  1357 000038BF 0F82B4010000        <1>     jc .badExit
  1358 000038C5 010D(BDC60300)      <1>     add dword [lastClust], ecx  
  1359 000038CB 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]
  1360 000038CE 8B0D(BDC60300)      <1>     mov ecx, dword [lastClust]
  1361 000038D4 E8C5D3FFFF          <1>     call getClusterInChain
  1362 000038D9 0F829A010000        <1>     jc .badExit
  1363                              <1>     ;eax has the last cluster on disk
  1364 000038DF 8905(C1C60300)      <1>     mov dword [lastClustA], eax
  1365                              <1>     ;Now we must extend the filesize in the SFT
  1366 000038E5 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  1367 000038E8 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  1368 000038EB 31C0                <1>     xor eax, eax
  1369 000038ED 8505(CAC60300)      <1>     test dword [tfrLen], eax
  1370 000038F3 0F84A3010000        <1>     jz writeExit    ;If we were extending the file, we are done
  1371 000038F9 8B05(C1C60300)      <1>     mov eax, dword [lastClustA] ;Get the absolute last cluster
  1372                              <1> .skipExtension:
  1373 000038FF 8905(A6C60300)      <1>     mov dword [currClustD], eax ;Now eax has the currClustD value
  1374                              <1>     ;Get the disk sector too
  1375 00003905 E833D3FFFF          <1>     call getStartSectorOfCluster
  1376 0000390A 0FB61D(AEC60300)    <1>     movzx ebx, byte [currSectC] ;Add the in cluster sector offset
  1377 00003911 01D8                <1>     add eax, ebx    ;Add the offset to eax
  1378 00003913 8905(AFC60300)      <1>     mov dword [currSectD], eax 
  1379                              <1>     ;If tfrLen = 0, we truncate to current file pointer position, rounding up
  1380                              <1>     ; clusterwise!
  1381 00003919 8B0D(CAC60300)      <1>     mov ecx, dword [tfrLen] ;Get the number of bytes to transfer in ecx
  1382 0000391F 85C9                <1>     test ecx, ecx
  1383 00003921 0F8433010000        <1>     jz .truncate
  1384                              <1>     ;Here we write proper data to the disk file
  1385                              <1> .writeLoop:
  1386 00003927 0FB705(B7C60300)    <1>     movzx eax, word [currByteS] ;Get bytewise sector offset
  1387 0000392E 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
  1388 00003932 29C1                <1>     sub ecx, eax    ;Get bytes left to fill this sector in ecx
  1389 00003934 8B05(CEC60300)      <1>     mov eax, dword [tfrCntr] ;Get # bytes left to transfer
  1390 0000393A 6639C1              <1>     cmp cx, ax  ;Is # of bytes leftto tfr less than bytes left in sector?
  1391 0000393D 660F47C8            <1>     cmova cx, ax    ;If yes, swap
  1392 00003941 66890D(A0C60300)    <1>     mov word [sectTfr], cx  ;Save this value in the var
  1393 00003948 0FB605(AEC60300)    <1>     movzx eax, byte [currSectC] ;Get sector offset in cluster
  1394 0000394F 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
  1395 00003952 0F8689000000        <1>     jbe .stayInCluster
  1396                              <1>     ;Get next Cluster information here
  1397 00003958 8B05(A6C60300)      <1>     mov eax, dword [currClustD] ;Get disk cluster
  1398 0000395E 3B05(C1C60300)      <1>     cmp eax, dword [lastClustA] ;Is this the last sector?
  1399 00003964 7543                <1>     jne .nextCluster
  1400                              <1>     ;Growing the file
  1401 00003966 C605(C5C60300)FF    <1>     mov byte [fileGrowing], -1  ;Set to true
  1402 0000396D B901000000          <1>     mov ecx, 1  ;Request 1 cluster
  1403 00003972 89C3                <1>     mov ebx, eax    ;Save the last cluster number in eax
  1404 00003974 E85FD3FFFF          <1>     call allocateClusters
  1405 00003979 0F82F1000000        <1>     jc .exitPrepHardErr
  1406 0000397F 3DFFFFFFFF          <1>     cmp eax, -1 ;If eax = -1 then disk full condition
  1407 00003984 0F82F6000000        <1>     jc .exitPrep
  1408 0000398A 89D8                <1>     mov eax, ebx    ;ebx is preserved
  1409 0000398C E886D4FFFF          <1>     call readFAT    ;Goto next cluster now, return in eax next cluster
  1410 00003991 0F82D9000000        <1>     jc .exitPrepHardErr
  1411 00003997 FF05(BDC60300)      <1>     inc dword [lastClust]
  1412 0000399D 8905(C1C60300)      <1>     mov dword [lastClustA], eax ;Now eax is the new last cluster
  1413 000039A3 8B05(A6C60300)      <1>     mov eax, dword [currClustD] ;Get the old last cluster
  1414                              <1>     ;eax now has the old last sector
  1415                              <1> .nextCluster:
  1416                              <1>     ;eax has old disk cluster information
  1417 000039A9 E869D4FFFF          <1>     call readFAT    ;Get the next disk cluster in eax
  1418 000039AE 0F82BC000000        <1>     jc .exitPrepHardErr
  1419 000039B4 8905(A6C60300)      <1>     mov dword [currClustD], eax
  1420 000039BA FF05(A2C60300)      <1>     inc dword [currClustF]
  1421 000039C0 E878D2FFFF          <1>     call getStartSectorOfCluster
  1422 000039C5 488905(AFC60300)    <1>     mov qword [currSectD], rax
  1423 000039CC FF05(AAC60300)      <1>     inc dword [currSectF]
  1424 000039D2 31C0                <1>     xor eax, eax
  1425 000039D4 8805(AEC60300)      <1>     mov byte [currSectC], al  ;Sector zero in cluster
  1426 000039DA 668905(B7C60300)    <1>     mov word [currByteS], ax  ;And byte zero of this sector in the cluster
  1427                              <1> .stayInCluster:
  1428 000039E1 488B05(AFC60300)    <1>     mov rax, qword [currSectD]  ;Get disk sector
  1429 000039E8 E867D1FFFF          <1>     call getBufForData
  1430 000039ED 0F827D000000        <1>     jc .exitPrepHardErr
  1431                              <1>     ;rbx points to disk buffer header
  1432 000039F3 0FB705(B7C60300)    <1>     movzx eax, word [currByteS] 
  1433 000039FA 488D5C0330          <1>     lea rbx, qword [rbx + bufferHdr.dataarea + rax] ;In sector offset
  1434                              <1>     ;rbx points to the current byte to write at
  1435 000039FF 57                  <1>     push rdi
  1436 00003A00 56                  <1>     push rsi
  1437 00003A01 4889DF              <1>     mov rdi, rbx    ;The sector is the destination of the write
  1438 00003A04 488B35(79C30300)    <1>     mov rsi, qword [currentDTA] ;Get the user buffer as the source
  1439 00003A0B 0FB70D(A0C60300)    <1>     movzx ecx, word [sectTfr]   ;Get # of bytes to write
  1440 00003A12 F3A4                <1>     rep movsb   ;Move over cx number of bytes
  1441 00003A14 488935(79C30300)    <1>     mov qword [currentDTA], rsi ;Update currentDTA
  1442 00003A1B 5E                  <1>     pop rsi
  1443 00003A1C 5F                  <1>     pop rdi
  1444 00003A1D E86ECFFFFF          <1>     call setBufferDirty
  1445 00003A22 0FB70D(A0C60300)    <1>     movzx ecx, word [sectTfr]
  1446 00003A29 F605(C5C60300)FF    <1>     test byte [fileGrowing], -1
  1447 00003A30 7406                <1>     jz .notGrowing
  1448 00003A32 010D(C6C60300)      <1>     add dword [bytesAppend], ecx
  1449                              <1> .notGrowing:
  1450 00003A38 290D(CEC60300)      <1>     sub dword [tfrCntr], ecx
  1451 00003A3E 7440                <1>     jz .exitPrep
  1452 00003A40 31C0                <1>     xor eax, eax
  1453 00003A42 668905(B7C60300)    <1>     mov word [currByteS], ax    ;Start of the next sector
  1454 00003A49 010D(B9C60300)      <1>     add dword [currByteF], ecx  ;Goto the next sector in the file
  1455 00003A4F FE05(AEC60300)      <1>     inc byte [currSectC]    ;Increment sector in cluster now
  1456 00003A55 E9CDFEFFFF          <1>     jmp .writeLoop
  1457                              <1> 
  1458                              <1> .truncate:
  1459                              <1> ;We must free the chain from currClustD
  1460 00003A5A 8B05(A6C60300)      <1>     mov eax, dword [currClustD]
  1461 00003A60 E88DD3FFFF          <1>     call truncateFAT    ;Truncate from the current cluster
  1462 00003A65 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  1463 00003A68 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  1464 00003A6B E92A000000          <1>     jmp .noByteExit ;Exit ok!
  1465                              <1> .exitPrepHardErr:
  1466 00003A70 50                  <1>     push rax    ;Save error code
  1467 00003A71 E80A000000          <1>     call .exitPrep
  1468 00003A76 58                  <1>     pop rax
  1469                              <1> .badExitHard:    ;AL has error code already
  1470 00003A77 F9                  <1>     stc
  1471                              <1>     return
    18                              <2> %%_ret:
    19 00003A78 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1472                              <1> .badExit:
  1473                              <1> ;Might need to do some weird stuff later. Leave for now
  1474 00003A79 B805000000          <1>     mov eax, errAccDen
  1475 00003A7E EBF7                <1>     jmp short .badExitHard
  1476                              <1> 
  1477                              <1> .exitPrep:
  1478 00003A80 8B0D(C6C60300)      <1>     mov ecx, dword [bytesAppend]
  1479 00003A86 014F17              <1>     add dword [rdi + sft.dFileSize], ecx    ;Add these bytes to the filesize
  1480 00003A89 8B05(CAC60300)      <1>     mov eax, dword [tfrLen]
  1481 00003A8F 2B05(CEC60300)      <1>     sub eax, dword [tfrCntr]    ;Subtract by bytes left to tfr
  1482 00003A95 E902000000          <1>     jmp writeExit
  1483                              <1> 
  1484                              <1> .noByteExit:
  1485 00003A9A 31C0                <1>     xor eax, eax
  1486                              <1> writeExit:
  1487                              <1> ;Advances the bytes on the file pointer
  1488                              <1> ;eax = Number of bytes transferred
  1489 00003A9C 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1490 00003AA3 89C1                <1>     mov ecx, eax
  1491 00003AA5 E801000000          <1>     call .advPtr
  1492                              <1>     return  ;Return to caller, ecx = # bytes xfrd
    18                              <2> %%_ret:
    19 00003AAA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1493                              <1> .advPtr:
  1494 00003AAB 67E303              <1>     jecxz .exit
  1495 00003AAE 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx
  1496                              <1> .exit:
  1497 00003AB1 F8                  <1>     clc
  1498                              <1>     return
    18                              <2> %%_ret:
    19 00003AB2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1499                              <1> 
  1500                              <1> ;-----------------------------------:
  1501                              <1> ;        File Handle routines       :
  1502                              <1> ;-----------------------------------:
  1503                              <1> 
  1504                              <1> setCurrentSFT:
  1505                              <1> ;Set the pointer in rdi as current SFT 
  1506 00003AB3 48893D(84C60300)    <1>     mov qword [currentSFT], rdi
  1507                              <1>     return 
    18                              <2> %%_ret:
    19 00003ABA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1508                              <1> getCurrentSFT:
  1509                              <1> ;Get the current SFT pointer in rdi
  1510 00003ABB 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1511                              <1>     return 
    18                              <2> %%_ret:
    19 00003AC2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1512                              <1> updateCurrentSFT:
  1513                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  1514                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  1515 00003AC3 57                  <1>     push rdi
  1516 00003AC4 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1517 00003ACB 8B0D(CAC60300)      <1>     mov ecx, dword [tfrLen]     ;Get bytes to transfer
  1518 00003AD1 2B0D(CEC60300)      <1>     sub ecx, dword [tfrCntr]    ;Subtract bytes left to transfer
  1519                              <1>     ;ecx has bytes transferred
  1520 00003AD7 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  1521 00003ADD 751A                <1>     jnz .exit
  1522 00003ADF 50                  <1>     push rax
  1523 00003AE0 8B05(A6C60300)      <1>     mov eax, dword [currClustD]
  1524 00003AE6 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  1525 00003AE9 8B05(A2C60300)      <1>     mov eax, dword [currClustF]
  1526 00003AEF 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  1527 00003AF2 58                  <1>     pop rax
  1528 00003AF3 67E303              <1>     jecxz .exit ;Skip this if ecx = 0
  1529 00003AF6 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  1530                              <1> .exit:
  1531 00003AF9 5F                  <1>     pop rdi
  1532 00003AFA F8                  <1>     clc
  1533                              <1>     return 
    18                              <2> %%_ret:
    19 00003AFB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1534                              <1> setupVarsForTransfer:
  1535                              <1> ;Computes the actual bytes to be transferred and 
  1536                              <1> ; sets up internal variables for the transfer. 
  1537                              <1> ;Works for both reading and writing
  1538                              <1> ;Input: ecx = User desired Bytes to transfer
  1539                              <1> ;       rdi = SFT pointer for the file
  1540                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  1541                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  1542                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  1543                              <1> ;
  1544                              <1> ;Note: Does not account for a FULL disk. When writing,
  1545                              <1> ; if the disk will get full as a result of the write,
  1546                              <1> ; stop at the last byte before the transfer. If the 
  1547                              <1> ; file pointer is past the last free byte, write 0
  1548 00003AFC 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  1549 00003B00 488935(64C60300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  1550 00003B07 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  1551 00003B0A 8905(B9C60300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  1552 00003B10 890D(CAC60300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  1553 00003B16 890D(CEC60300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  1554 00003B1C 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  1555 00003B22 7402                <1>     jz setupVarsForDiskTransfer
  1556 00003B24 F8                  <1>     clc
  1557                              <1>     return
    18                              <2> %%_ret:
    19 00003B25 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1558                              <1> setupVarsForDiskTransfer:
  1559                              <1> ;Extension of the above, but for Disk files only
  1560                              <1> ;Input: ecx = User desired Bytes to transfer
  1561                              <1> ;       rdi = SFT pointer for the file
  1562                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred, if it is possible
  1563                              <1> ;        CF=CY: Error exit
  1564 00003B26 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  1565 00003B29 8905(B9C60300)      <1>     mov dword [currByteF], eax
  1566 00003B2F 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  1567                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  1568 00003B33 48892D(64C60300)    <1>     mov qword [workingDPB], rbp
  1569 00003B3A 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  1570 00003B3D 881D(63C60300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  1571 00003B43 8B05(B9C60300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  1572 00003B49 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  1573 00003B4D 31D2                <1>     xor edx, edx    ;Zero rdx
  1574 00003B4F F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  1575                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  1576                              <1>     ;edx has the offset into that sector
  1577 00003B51 8905(AAC60300)      <1>     mov dword [currSectF], eax
  1578 00003B57 668915(B7C60300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  1579 00003B5E 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  1580 00003B60 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  1581 00003B63 8805(AEC60300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  1582 00003B69 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  1583 00003B6B 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  1584 00003B6E D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  1585 00003B70 8915(A2C60300)      <1>     mov dword [currClustF], edx ;Save in var
  1586 00003B76 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  1587                              <1> .exit:
  1588 00003B78 F8                  <1>     clc
  1589                              <1>     return 
    18                              <2> %%_ret:
    19 00003B79 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1590                              <1> findFreeSFT:
  1591                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  1592                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  1593                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  1594                              <1> ;        CF=CY => eax = errNhl, error exit
  1595 00003B7A 31DB                <1>     xor ebx, ebx
  1596                              <1> .mainLp:
  1597 00003B7C 53                  <1>     push rbx    ;Save the sft ndx
  1598 00003B7D E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  1599 00003B82 5B                  <1>     pop rbx
  1600 00003B83 7307                <1>     jnc .sftExists
  1601 00003B85 B804000000          <1>     mov eax, errNhl
  1602 00003B8A F9                  <1>     stc
  1603                              <1>     return
    18                              <2> %%_ret:
    19 00003B8B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1604                              <1> .sftExists:
  1605 00003B8C 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  1606 00003B91 7427                <1>     je .sftFound
  1607 00003B93 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  1608 00003B98 751C                <1>     jne .gotoNextNdx
  1609                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  1610 00003B9A 53                  <1>     push rbx
  1611 00003B9B 488B1D(9DC30300)    <1>     mov rbx, qword [serverPSP]
  1612 00003BA2 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  1613 00003BA6 750B                <1>     jne .netGoToNextNdx
  1614 00003BA8 0FB71D(A5C30300)    <1>     movzx ebx, word [machineNum]
  1615 00003BAF 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  1616                              <1> .netGoToNextNdx:
  1617 00003BB3 5B                  <1>     pop rbx
  1618 00003BB4 7404                <1>     je .sftFound
  1619                              <1> .gotoNextNdx:
  1620 00003BB6 FFC3                <1>     inc ebx
  1621 00003BB8 EBC2                <1>     jmp short .mainLp
  1622                              <1> .sftFound:
  1623 00003BBA 53                  <1>     push rbx
  1624 00003BBB 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  1625 00003BC0 488B1D(9DC30300)    <1>     mov rbx, qword [serverPSP]
  1626 00003BC7 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  1627 00003BCB 0FB71D(A5C30300)    <1>     movzx ebx, word [machineNum]
  1628 00003BD2 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  1629 00003BD6 5B                  <1>     pop rbx
  1630 00003BD7 F8                  <1>     clc
  1631                              <1>     return
    18                              <2> %%_ret:
    19 00003BD8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1632                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216
  1633                              <1> ;Return a pointer to the SFT entry in rdi
  1634                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  1635                              <1> ;Output: rdi = SFT pointer
  1636 00003BD9 488B3D(3BC00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  1637                              <1> .walk:
  1638 00003BE0 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  1639 00003BE4 7212                <1>     jb .thisTable
  1640 00003BE6 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  1641 00003BEA 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  1642 00003BED 4881FFFFFFFFFF      <1>     cmp rdi, -1
  1643 00003BF4 75EA                <1>     jne .walk
  1644 00003BF6 F9                  <1>     stc
  1645                              <1>     return
    18                              <2> %%_ret:
    19 00003BF7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1646                              <1> .thisTable:
  1647 00003BF8 50                  <1>     push rax
  1648 00003BF9 52                  <1>     push rdx
  1649 00003BFA B84F000000          <1>     mov eax, sft_size
  1650 00003BFF F7E3                <1>     mul ebx
  1651 00003C01 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  1652 00003C04 5A                  <1>     pop rdx
  1653 00003C05 58                  <1>     pop rax
  1654 00003C06 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  1655                              <1>     return
    18                              <2> %%_ret:
    19 00003C0D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1656                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
  1657                              <1> ;Return a zero extended value in rdi for the SFT entry
  1658                              <1> ;Input: bx = JFT handle (we zero extend)
  1659                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
  1660                              <1> ;        CF=CY => al = Error code, Fail
  1661 00003C0E 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  1662 00003C11 663B1D(97C00300)    <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
  1663 00003C18 7204                <1>     jb .ok
  1664 00003C1A B006                <1>     mov al, errBadHdl
  1665 00003C1C F9                  <1>     stc
  1666                              <1>     return
    18                              <2> %%_ret:
    19 00003C1D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1667                              <1> .ok:
  1668 00003C1E 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP]
  1669 00003C25 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  1670 00003C2A F8                  <1>     clc
  1671                              <1>     return
    18                              <2> %%_ret:
    19 00003C2B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1672                              <1> findFreeJFTEntry:
  1673                              <1> ;Finds a free JFT entry in the currentPSP.
  1674                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  1675                              <1> ;        CF=CY => al=errNhl
  1676 00003C2C 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  1677                              <1> .searchLp:
  1678 00003C2E E8DBFFFFFF          <1>     call getJFTPtr
  1679 00003C33 7209                <1>     jc .badExit
  1680 00003C35 803FFF              <1>     cmp byte [rdi], -1
  1681                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003C38 74F1                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1682 00003C3A FFC3                <1>     inc ebx
  1683 00003C3C EBF0                <1>     jmp short .searchLp
  1684                              <1> .badExit:
  1685 00003C3E B004                <1>     mov al, errNhl
  1686 00003C40 F9                  <1>     stc
  1687                              <1>     return
    18                              <2> %%_ret:
    19 00003C41 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1688                              <1> getSFTPtr:
  1689                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  1690                              <1> ;Input: bx = JFT handle
  1691                              <1> ;Output: CF=NC: rdi = SFT pointer
  1692                              <1> ;        CF=CY: Error, ax=Error code
  1693 00003C42 E815000000          <1>     call derefSFTPtr
  1694                              <1>     retc    ;Return if carry
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003C47 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1695 00003C49 50                  <1>     push rax
  1696 00003C4A 0FB705(A5C30300)    <1>     movzx eax, word [machineNum]
  1697 00003C51 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  1698 00003C55 58                  <1>     pop rax
  1699                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003C56 74E9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1700 00003C58 B006                <1>     mov al, errBadHdl   ;Error code
  1701 00003C5A F9                  <1>     stc         ;Reset CF
  1702                              <1>     return
    18                              <2> %%_ret:
    19 00003C5B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1703                              <1> 
  1704                              <1> derefSFTPtr:
  1705                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  1706                              <1> ;Input: bx = File handle (gets zero extended)
  1707                              <1> ;Output: CF=NC: rdi = SFT pointer
  1708                              <1> ;        CF=CY: Error, ax=Error code
  1709 00003C5C E8ADFFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  1710 00003C61 7205                <1>     jb .fail
  1711 00003C63 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  1712 00003C66 7504                <1>     jne .ok
  1713                              <1> .fail:
  1714 00003C68 B006                <1>     mov al, errBadHdl
  1715 00003C6A F9                  <1>     stc
  1716                              <1>     return
    18                              <2> %%_ret:
    19 00003C6B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1717                              <1> .ok:
  1718 00003C6C 53                  <1>     push rbx    ;Preserve the JFT handle
  1719 00003C6D 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  1720 00003C70 E864FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  1721 00003C75 5B                  <1>     pop rbx 
  1722                              <1>     return
    18                              <2> %%_ret:
    19 00003C76 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1723                              <1> 
  1724                              <1> getBytesTransferred:
  1725 00003C77 8B0D(CEC60300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  1726 00003C7D F7D9                <1>     neg ecx ;Multiply by -1
  1727 00003C7F 030D(CAC60300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  1728                              <1>     return ;Return bytes transferred in ecx
    18                              <2> %%_ret:
    19 00003C85 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1729                              <1> 
  1730                              <1> readWriteBytesBinary:
  1731                              <1> ;Input: ecx = number of bytes to read in Binary mode
  1732                              <1> ;       rdi = Points to where in caller buffer to read/write bytes
  1733                              <1> ;       rsi = Points to where in DOS buffer to write/read pointer
  1734                              <1> ;xchg rdi and rsi if rwFlag is set (i.e. a write operation)
  1735                              <1> ;Preserve rcx so we know how many bytes transferred
  1736                              <1> ;Update the currByteA variable
  1737                              <1> ;Returns (rsi and rdi) + (ecx on entry)
  1738 00003C86 51                  <1>     push rcx
  1739 00003C87 F605(5AC60300)FF    <1>     test byte [rwFlag], -1   ;Is this a write operaiton
  1740 00003C8E 7403                <1>     jz .noSwap
  1741 00003C90 4887FE              <1>     xchg rdi, rsi
  1742                              <1> .noSwap:
  1743 00003C93 F3A4                <1>     rep movsb
  1744 00003C95 59                  <1>     pop rcx
  1745 00003C96 010D(B9C60300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  1746 00003C9C 290D(CEC60300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  1747                              <1>     return
    18                              <2> %%_ret:
    19 00003CA2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1748                              <1> 
  1749                              <1> findFreeJFTSpace:
  1750                              <1> ;Input: [currentPSP] = Task whose PSP we will look through
  1751                              <1> ;If there are no free spaces, then we return with al = errNhl and CF=CY
  1752                              <1> ;Else, a pointer to the free space in rsi and al = -1
  1753 00003CA3 51                  <1>     push rcx
  1754 00003CA4 488B35(81C30300)    <1>     mov rsi, qword [currentPSP]
  1755 00003CAB 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]
  1756 00003CB2 488D762A            <1>     lea rsi, qword [rsi + psp.jobFileTbl]   ;Point to start of table
  1757                              <1> .search:
  1758 00003CB6 AC                  <1>     lodsb
  1759 00003CB7 3CFF                <1>     cmp al, -1
  1760 00003CB9 7407                <1>     je .exit
  1761 00003CBB FFC9                <1>     dec ecx
  1762 00003CBD 75F7                <1>     jnz .search
  1763 00003CBF B004                <1>     mov al, errNhl  ;No free handles buddy, sorry
  1764 00003CC1 F9                  <1>     stc ;Set error bit
  1765                              <1> .exit:
  1766 00003CC2 59                  <1>     pop rcx
  1767                              <1>     return
    18                              <2> %%_ret:
    19 00003CC3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1768                              <1> 
  1769                              <1> getSFTndxInheritable:
  1770                              <1> ;Given a SFTndx this function will verify if it is inheritable
  1771                              <1> ;Input: ebx = SFTndx (word)
  1772                              <1> ;Output: 
  1773                              <1> ;   ZF=ZE => Inheritable
  1774                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  1775 00003CC4 57                  <1>     push rdi
  1776 00003CC5 E80FFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  1777 00003CCA 7208                <1>     jc .badNdx
  1778 00003CCC 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  1779 00003CD2 5F                  <1>     pop rdi
  1780                              <1>     return
    18                              <2> %%_ret:
    19 00003CD3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1781                              <1> .badNdx:
  1782 00003CD4 31FF                <1>     xor edi, edi
  1783 00003CD6 FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  1784 00003CD8 F8                  <1>     clc
  1785 00003CD9 5F                  <1>     pop rdi
  1786                              <1>     return
    18                              <2> %%_ret:
    19 00003CDA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1787                              <1> 
  1788                              <1> incrementOpenCount:
  1789                              <1> ;Given a SFTndx, this function will increment it's open count
  1790                              <1> ;Output:
  1791                              <1> ;   CF=NC => sftndx ok, count incremented
  1792                              <1> ;   CF=CY => Bad ndx
  1793 00003CDB 57                  <1>     push rdi
  1794 00003CDC E8F8FEFFFF          <1>     call getSFTPtrfromSFTNdx
  1795 00003CE1 7203                <1>     jc .exit
  1796 00003CE3 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  1797                              <1> .exit:
  1798 00003CE6 5F                  <1>     pop rdi
  1799                              <1>     return
    18                              <2> %%_ret:
    19 00003CE7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1800                              <1> 
  1801                              <1> decrementOpenCount: ;Int 4Fh AX = 1208h
  1802                              <1> ;Input: rdi = SFT pointer
  1803                              <1> ;Output: ax = Original wNumHandles count
  1804 00003CE8 9C                  <1>     pushfq
  1805 00003CE9 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  1806 00003CEC FFC8                <1>     dec eax     ;Decrement count
  1807 00003CEE 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  1808 00003CF0 FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  1809                              <1> .exit:
  1810 00003CF2 9D                  <1>     popfq
  1811 00003CF3 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  1812                              <1>     return
    18                              <2> %%_ret:
    19 00003CF6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    31                                  %include "./Source/Kernel/FileIO/ioctl.asm"
    32                              <1> ioctrl:            ;ah = 44h, handle function
    33                              <1> ;Possible subfunctions
    34                              <1> ;al = 00h => Get Handle Information word in dx  x
    35                              <1> ;al = 01h => Set Handle Information word        x
    36                              <1> ;al = 02h => Read from Char device              
    37                              <1> ;al = 03h => Write to Char device               
    38                              <1> ;al = 04h => Read from Block device             
    39                              <1> ;al = 05h => Write to Block device              
    40                              <1> ;al = 06h => Get input status                   
    41                              <1> ;al = 07h => Get output status                  
    42                              <1> ;al = 08h => Is a block device removable?       
    43                              <1> ;al = 09h => Is a logical device local or remote?   
    44                              <1> ;al = 0Ah => Is a handle to a local or remote file? 
    45                              <1> ;al = 0Bh => Change sharing retry count (RESERVED)  
    46                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    47                              <1> ;al = 0Dh => Block device Generic IOCTL request     
    48                              <1> ;al = 0Eh => Get logical device                 
    49                              <1> ;al = 0Fh => Set logical device                 
    50 00003CF7 84C0                <1>     test al, al
    51 00003CF9 740B                <1>     jz .getDevWord
    52 00003CFB 3C01                <1>     cmp al, 1
    53 00003CFD 7421                <1>     je .setDevWord
    54 00003CFF B001                <1>     mov al, errInvFnc
    55 00003D01 E9B9170000          <1>     jmp extErrExit
    56                              <1> .getDevWord:
    57                              <1>     ;Input: bx = File Handle
    58 00003D06 E851FFFFFF          <1>     call derefSFTPtr
    59 00003D0B 0F82AE170000        <1>     jc extErrExit
    60                              <1>     ;Now rdi has ptr to SFT handle
    61 00003D11 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    62 00003D15 30C0                <1>     xor al, al
    63 00003D17 E83B130000          <1>     call getUserRegs
    64 00003D1C 668916              <1>     mov word [rsi + callerFrame], dx
    65                              <1>     return
    18                              <2> %%_ret:
    19 00003D1F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    66                              <1> .setDevWord:
    67                              <1>     ;Input: bx = File Handle
    68                              <1>     ;       dl = Low byte of Device information word 
    69 00003D20 E837FFFFFF          <1>     call derefSFTPtr
    70 00003D25 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    71                              <1>     return
    18                              <2> %%_ret:
    19 00003D28 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    32                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    33                              <1> ;Memory related functions
    34                              <1> 
    35                              <1> ;-----------------------------------:
    36                              <1> ;  Memory related Kernel routines   :
    37                              <1> ;-----------------------------------:
    38                              <1> allocateMemory:    ;ah = 48h
    39                              <1> ;Input: ebx = Number of paragraphs requested
    40                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    41                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    42 00003D29 E852170000          <1>     call dosCrit1Enter
    43 00003D2E 31D2                <1>     xor edx, edx
    44                              <1>     ;Clear the pointers
    45 00003D30 488915(A7C30300)    <1>     mov qword [firstMCB], rdx
    46 00003D37 488915(AFC30300)    <1>     mov qword [bestMCB], rdx
    47 00003D3E 488915(B7C30300)    <1>     mov qword [lastMCB], rdx
    48 00003D45 31ED                <1>     xor ebp, ebp    
    49 00003D47 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    50 00003D49 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    51                              <1> .walk:
    52 00003D50 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    53 00003D53 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    54 00003D56 7409                <1>     je .walk1
    55 00003D58 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    56 00003D5B 0F8500050000        <1>     jne badMCBChain
    57                              <1> .walk1:
    58                              <1>     ;Here if valid but not the last block
    59 00003D61 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    60 00003D69 0F8582000000        <1>     jne .walk2
    61                              <1>     ;Here we consolidate adjacent free blocks if there are any
    62                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    63                              <1>     ;End consolidation at first non free block or at last block in chain
    64 00003D6F 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    65 00003D72 744A                <1>     je .det0    ;Determine if this block is useful
    66 00003D74 31C9                <1>     xor ecx, ecx
    67 00003D76 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    68 00003D79 4881C610000000      <1>     add rsi, mcb.program
    69                              <1> .cons0:
    70 00003D80 48C1E104            <1>     shl rcx, 4
    71 00003D84 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    72 00003D87 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    73 00003D8A 7409                <1>     je .cons1
    74 00003D8C 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    75 00003D8F 0F85CC040000        <1>     jne badMCBChain 
    76                              <1> .cons1:
    77 00003D95 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    78 00003D9D 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    79                              <1>     ;Here rsi, points to a free block, add it to rdi
    80 00003D9F 31C9                <1>     xor ecx, ecx
    81 00003DA1 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    82 00003DA4 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    83 00003DAA 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    84 00003DAD 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    85 00003DAF 31D2                <1>     xor edx, edx
    86 00003DB1 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    87 00003DB4 48895608            <1>     mov qword [rsi + 8], rdx
    88 00003DB8 3C5A                <1>     cmp al, mcbMarkEnd
    89 00003DBA 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    90                              <1>     ;Here we deal with if the block was the last one 
    91 00003DBC 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    92                              <1> .det0:  ;Now determine if pointer in rdi is useful
    93 00003DBE 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    94                              <1> ;ebx must be less than the arena size for the arena to be useful!
    95 00003DC1 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    96 00003DC4 39D9                <1>     cmp ecx, ebx
    97 00003DC6 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    98 00003DC8 488935(B7C30300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    99 00003DCF 488B05(A7C30300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
   100 00003DD6 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
   101 00003DD9 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
   102 00003DDB 488935(A7C30300)    <1>     mov qword [firstMCB], rsi
   103                              <1> .det1:
   104                              <1>     ;Now test for best fit.
   105 00003DE2 29D9                <1>     sub ecx, ebx    ;Block - ebx
   106 00003DE4 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   107 00003DE6 7209                <1>     jb .walk2
   108 00003DE8 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   109 00003DEA 488935(AFC30300)    <1>     mov qword [bestMCB], rsi
   110                              <1> .walk2:
   111 00003DF1 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   112 00003DF4 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   113 00003DF6 31C9                <1>     xor ecx, ecx
   114 00003DF8 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   115 00003DFB 48C1E104            <1>     shl rcx, 4
   116 00003DFF 4881C610000000      <1>     add rsi, mcb.program
   117 00003E06 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   118 00003E09 E942FFFFFF          <1>     jmp .walk
   119                              <1> .allocate:
   120                              <1>     ;Allocation fails IF the pointer is the null pointer
   121 00003E0E 803D(35C30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   122 00003E15 7266                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   123                              <1>     ;Fall thru if last fit
   124 00003E17 488B35(B7C30300)    <1>     mov rsi, qword [lastMCB]
   125 00003E1E 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   126 00003E21 0F84D8000000        <1>     jz .allocFail
   127 00003E27 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   128 00003E29 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   129 00003E2C 31C9                <1>     xor ecx, ecx
   130 00003E2E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   131 00003E31 29D9                <1>     sub ecx, ebx
   132 00003E33 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   133 00003E39 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   134 00003E3C 48C1E104            <1>     shl rcx, 4
   135 00003E40 4881C610000000      <1>     add rsi, mcb.program
   136 00003E47 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   137 00003E4A 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   138 00003E4C 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   139 00003E4F 488B15(81C30300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   140 00003E56 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   141 00003E5A 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   142 00003E61 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   143 00003E68 4889F0              <1>     mov rax, rsi
   144 00003E6B 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   145 00003E6E 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   146 00003E72 E8BD030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   147 00003E77 E80E160000          <1>     call dosCrit1Exit
   148                              <1>     return
    18                              <2> %%_ret:
    19 00003E7C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   149                              <1> .bfCommon:
   150 00003E7D 488B35(A7C30300)    <1>     mov rsi, qword [firstMCB]
   151 00003E84 803D(35C30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   152 00003E8B 480F4435(AFC30300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   153 00003E93 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   154 00003E96 7467                <1>     jz .allocFail
   155 00003E98 8A06                <1>     mov al, byte [rsi + mcb.marker]
   156 00003E9A C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   157 00003E9D 31C9                <1>     xor ecx, ecx
   158 00003E9F 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   159 00003EA2 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   160 00003EA4 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   161 00003EAA 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   162 00003EAD 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   163 00003EB4 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   164 00003EB8 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   165 00003EBB 4881C610000000      <1>     add rsi, mcb.program
   166 00003EC2 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   167 00003EC8 48C1E304            <1>     shl rbx, 4
   168 00003ECC 4801DE              <1>     add rsi, rbx
   169 00003ECF 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   170 00003ED1 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   171 00003ED9 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   172 00003EDC 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   173 00003EE3 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   174 00003EEA 4889F8              <1>     mov rax, rdi
   175 00003EED 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   176 00003EF0 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   177 00003EF4 E83B030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   178 00003EF9 E88C150000          <1>     call dosCrit1Exit
   179                              <1>     return
    18                              <2> %%_ret:
    19 00003EFE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   180                              <1> .allocFail:
   181                              <1>     ;Walk the MCB chain to determine the biggest block size
   182 00003EFF 488B35(2BC00300)    <1>     mov rsi, [mcbChainPtr]
   183 00003F06 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   184                              <1> .af0:
   185 00003F08 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   186 00003F0B 7409                <1>     je .af1
   187 00003F0D 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   188 00003F10 0F854B030000        <1>     jne badMCBChain
   189                              <1> .af1:
   190 00003F16 31C9                <1>     xor ecx, ecx
   191 00003F18 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   192 00003F1B 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   193 00003F23 7505                <1>     jne .af2
   194 00003F25 39D9                <1>     cmp ecx, ebx
   195 00003F27 0F47D9              <1>     cmova ebx, ecx
   196                              <1> .af2:
   197 00003F2A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   198 00003F2D 7410                <1>     je .afExit
   199 00003F2F 48C1E104            <1>     shl rcx, 4
   200 00003F33 4881C610000000      <1>     add rsi, mcb.program
   201 00003F3A 4801CE              <1>     add rsi, rcx
   202 00003F3D EBD7                <1>     jmp short .af1
   203                              <1> .afExit:
   204 00003F3F B808000000          <1>     mov eax, errNoMem
   205 00003F44 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   206 00003F4B 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   207 00003F4E E910030000          <1>     jmp mcbErrHdlr
   208                              <1> freeMemory:        ;ah = 49h
   209                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   210                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   211                              <1> ;Always skip the first block as this is the anchor for DOS
   212 00003F53 E828150000          <1>     call dosCrit1Enter
   213 00003F58 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   214 00003F5F 31C9                <1>     xor ecx, ecx
   215 00003F61 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   216 00003F68 4889F7              <1>     mov rdi, rsi
   217 00003F6B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   218 00003F6E 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   219 00003F72 4881C610000000      <1>     add rsi, mcb.program
   220 00003F79 4801CE              <1>     add rsi, rcx    ;Go to next block
   221                              <1> .mainLoop:
   222 00003F7C 31C9                <1>     xor ecx, ecx
   223 00003F7E 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   224 00003F81 7409                <1>     je .valid
   225 00003F83 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   226 00003F86 0F85D5020000        <1>     jne badMCBChain
   227                              <1> .valid:
   228 00003F8C 4939F0              <1>     cmp r8, rsi
   229 00003F8F 741C                <1>     je .blockFound
   230                              <1>     ;Not valid, check if last block in chain
   231 00003F91 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   232 00003F94 0F84A5000000        <1>     je .blockError
   233 00003F9A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   234 00003F9D 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   235 00003FA1 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   236 00003FA8 4801CE              <1>     add rsi, rcx    ;Go to next block
   237 00003FAB EBCF                <1>     jmp short .mainLoop
   238                              <1> .blockFound:
   239                              <1>     ;If hole, error.
   240                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   241 00003FAD 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   242 00003FB5 0F8484000000        <1>     je .blockError
   243 00003FBB 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   244 00003FC3 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   245 00003FCB 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   246                              <1>     ;It is, let it absorb this space
   247 00003FCD 31C9                <1>     xor ecx, ecx
   248 00003FCF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   249 00003FD2 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   250 00003FD8 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   251                              <1>     ;Replace block marker
   252 00003FDB 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   253 00003FDD 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   254 00003FDF 31C9                <1>     xor ecx, ecx
   255 00003FE1 48890E              <1>     mov qword [rsi], rcx
   256 00003FE4 48894E08            <1>     mov qword [rsi + 8], rcx
   257 00003FE8 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   258                              <1> .blockFoundCheckFollowing:
   259                              <1>     ;First check if we are the last block in chain
   260 00003FEB 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   261 00003FEE 7439                <1>     je .blockFoundExit  ;If yes, exit!
   262 00003FF0 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   263 00003FF3 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   264 00003FF6 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   265 00003FFA 4881C110000000      <1>     add rcx, mcb.program
   266 00004001 4801CE              <1>     add rsi, rcx    ;Go to next block
   267 00004004 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   268 0000400C 751B                <1>     jne .blockFoundExit ;If not free, exit
   269                              <1>     ;If free, absorb into block pointed to by rdi
   270 0000400E 31C9                <1>     xor ecx, ecx
   271 00004010 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   272 00004013 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   273 00004019 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   274                              <1>     ;Replace block marker
   275 0000401C 8A06                <1>     mov al, byte [rsi + mcb.marker]
   276 0000401E 8807                <1>     mov byte [rdi + mcb.marker], al
   277 00004020 31C9                <1>     xor ecx, ecx
   278 00004022 48890E              <1>     mov qword [rsi], rcx
   279 00004025 48894E08            <1>     mov qword [rsi + 8], rcx
   280                              <1> .blockFoundExit:
   281 00004029 E806020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   282 0000402E E857140000          <1>     call dosCrit1Exit
   283 00004033 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   284 0000403A 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   285                              <1>     return
    18                              <2> %%_ret:
    19 0000403E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   286                              <1> .blockError:
   287 0000403F C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   288 00004046 B809000000          <1>     mov eax, errMemAddr
   289 0000404B E86F140000          <1>     call extErrExit ;Error thru the unified error handler
   290 00004050 E8DF010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   291 00004055 E830140000          <1>     call dosCrit1Exit
   292                              <1>     return
    18                              <2> %%_ret:
    19 0000405A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   293                              <1> reallocMemory:     ;ah = 4Ah
   294                              <1> ;Input: r8 = address of the block to be realloc'ed
   295                              <1> ;       ebx = How many paras this block should contain after realloc. 
   296                              <1> ;               If ebx = 0, jump to free memory
   297 0000405B E820140000          <1>     call dosCrit1Enter
   298 00004060 85DB                <1>     test ebx, ebx
   299 00004062 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   300 00004068 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   301 0000406F 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   302 00004072 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   303 00004075 7409                <1>     je .ctn
   304 00004077 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   305 0000407A 0F8564010000        <1>     jne .badAddrGiven
   306                              <1> .ctn:
   307                              <1>     ;Provided block is valid and not a hole
   308                              <1>     ;Check if Growth or Shrink
   309 00004080 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   310 00004088 74B5                <1>     je freeMemory.blockError
   311 0000408A 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   312 0000408D 31C9                <1>     xor ecx, ecx
   313 0000408F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   314 00004092 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   315 00004094 0F8786000000        <1>     ja .growth
   316 0000409A 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   317                              <1> ;We can always shrink
   318 000040A0 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   319 000040A2 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   320 000040A8 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   321 000040AB 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   322 000040B1 48C1E304            <1>     shl rbx, 4
   323 000040B5 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   324 000040BC 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   325 000040BF 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   326 000040C1 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   327 000040C4 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   328 000040C6 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   329 000040CE 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   330 000040D1 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   331 000040D3 0F84DB000000        <1>     je .exit
   332                              <1> ;Else, now see if the block following is also free and absorb it
   333 000040D9 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   334 000040DC 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   335 000040E0 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   336 000040E7 4801CE              <1>     add rsi, rcx    ;Goto next arena
   337 000040EA 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   338 000040ED 7409                <1>     je .shrinkAbsorb
   339 000040EF 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   340 000040F2 0F8569010000        <1>     jne badMCBChain
   341                              <1> .shrinkAbsorb:
   342 000040F8 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   343 00004100 0F85AE000000        <1>     jne .exit
   344                              <1>     ;It is free, absorb it
   345 00004106 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   346 00004109 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   347 0000410F 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   348 00004112 31C9                <1>     xor ecx, ecx
   349                              <1>     ;Clear absorbed MCB
   350 00004114 48890E              <1>     mov qword [rsi], rcx
   351 00004117 48894E08            <1>     mov qword [rsi + 8], rcx
   352 0000411B E994000000          <1>     jmp .exit
   353                              <1> .growth:
   354                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   355 00004120 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   356 00004123 0F84A5000000        <1>     je .notEnuffMem
   357                              <1> ;Now check the following space is free. If not, not enuff mem err
   358 00004129 31C9                <1>     xor ecx, ecx
   359 0000412B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   360 0000412E 48C1E104            <1>     shl rcx, 4
   361 00004132 4889F7              <1>     mov rdi, rsi    
   362 00004135 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   363 0000413C 4801CE              <1>     add rsi, rcx
   364 0000413F 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   365 00004142 7409                <1>     je .growthOK
   366 00004144 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   367 00004147 0F8514010000        <1>     jne badMCBChain
   368                              <1> .growthOK:
   369                              <1>     ;rdi points to block we are growing
   370 0000414D 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   371 00004155 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   372                              <1>     ;rsi must own all memory up to the next owned arena
   373 00004157 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   374 00004159 31C9                <1>     xor ecx, ecx
   375 0000415B 31D2                <1>     xor edx, edx
   376 0000415D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   377 00004160 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   378 00004166 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   379 00004169 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   380 0000416B 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   381 0000416D 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   382 00004170 775E                <1>     ja .notEnuffMem1
   383 00004172 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   384 00004174 81FA01000000        <1>     cmp edx, 1
   385 0000417A 744E                <1>     je .notEnuffMem2
   386 0000417C 31C9                <1>     xor ecx, ecx
   387 0000417E 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   388 00004181 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   389 00004185 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   390 00004188 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   391 0000418B 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   392 00004192 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   393 00004196 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   394 00004199 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   395 0000419D 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   396                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   397                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   398 0000419F 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   399 000041A1 7411                <1>     jz .exit
   400 000041A3 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   401 000041A9 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   402 000041AC 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   403                              <1> .exit:
   404 000041B4 E87B000000          <1>     call verifyIntegrityOfMCBChain
   405 000041B9 E8CC120000          <1>     call dosCrit1Exit
   406 000041BE 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   407 000041C5 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   408                              <1>     return
    18                              <2> %%_ret:
    19 000041C9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   409                              <1> .notEnuffMem2:
   410 000041CA FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   411 000041CC EB02                <1>     jmp short .notEnuffMem1
   412                              <1> .notEnuffMem:
   413 000041CE 31DB                <1>     xor ebx, ebx    ;No space to grow
   414                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   415 000041D0 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   416 000041D5 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   417 000041DC 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   418 000041DF E97F000000          <1>     jmp mcbErrHdlr
   419                              <1> .badAddrGiven:
   420 000041E4 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   421 000041E9 E975000000          <1>     jmp mcbErrHdlr
   422                              <1> getsetMallocStrat: ;ah = 58h
   423 000041EE 84C0                <1>     test al, al
   424 000041F0 741F                <1>     jz .get
   425 000041F2 3C02                <1>     cmp al, 2
   426 000041F4 7337                <1>     jae .bad
   427                              <1> ;Set here
   428 000041F6 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   429 000041FD 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   430 00004201 8805(35C30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   431 00004207 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   432 0000420B E824000000          <1>     call verifyIntegrityOfMCBChain
   433                              <1>     return
    18                              <2> %%_ret:
    19 00004210 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   434                              <1> .get:
   435 00004211 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   436 00004218 31C0                <1>     xor eax, eax
   437 0000421A 8A05(35C30300)      <1>     mov al, byte [allocStrat]
   438 00004220 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   439 00004223 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   440 00004227 E808000000          <1>     call verifyIntegrityOfMCBChain
   441                              <1>     return
    18                              <2> %%_ret:
    19 0000422C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   442                              <1> .bad:
   443 0000422D B801000000          <1>     mov eax, errInvFnc
   444 00004232 EB2F                <1>     jmp short mcbErrHdlr
   445                              <1> ;-----------------------------------:
   446                              <1> ;      Memory related routines      :
   447                              <1> ;-----------------------------------:
   448                              <1> verifyIntegrityOfMCBChain:
   449 00004234 50                  <1>     push rax
   450 00004235 53                  <1>     push rbx
   451 00004236 488B1D(2BC00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   452                              <1> .ok:
   453 0000423D 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   454 00004240 7408                <1>     je .ok1
   455 00004242 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   456 00004245 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   457                              <1> .exit:
   458 00004247 5B                  <1>     pop rbx
   459 00004248 58                  <1>     pop rax
   460                              <1>     return ;We have reached the end of the chain, return all good!
    18                              <2> %%_ret:
    19 00004249 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   461                              <1> .ok1:
   462 0000424A 31C0                <1>     xor eax, eax
   463 0000424C 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   464 0000424F 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   465 00004253 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   466 0000425A 4801C3              <1>     add rbx, rax
   467 0000425D EBDE                <1>     jmp short .ok
   468                              <1> .bmcbPrep:
   469 0000425F 5B                  <1>     pop rbx ;Pop off the stack first!
   470 00004260 58                  <1>     pop rax
   471                              <1> badMCBChain:
   472 00004261 B007                <1>     mov al, errMCBbad   ;Yikes!
   473                              <1> mcbErrHdlr:
   474                              <1>     ;Jumped to with eax = error code
   475 00004263 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   476 0000426A E850120000          <1>     call extErrExit ;Error thru the unified error handler
   477 0000426F 3C07                <1>     cmp al, errMCBbad
   478                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004271 74D6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   479 00004273 EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    33                                  %include "./Source/Kernel/MemExec/progMgmt.asm"
    34                              <1> ;EXEC and all default terminates are here
    35                              <1> 
    36                              <1> ;========================
    37                              <1> ;   Interrupt handlers
    38                              <1> ;========================
    39                              <1> terminateProcess:   ;Int 40h
    40 00004275 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
    41 00004277 E97C100000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
    42                              <1> terminateRes:       ;Int 47h
    43                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    44 0000427C 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    45 00004282 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    46 00004285 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    47 0000428A E969100000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    48                              <1> ;========================
    49                              <1> ;    Int 21h functions
    50                              <1> ;========================
    51                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    52                              <1> ;Input:
    53                              <1> ;rdx = Pointer to new PSP in memory.
    54                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    55                              <1> ;   Officially document that this MUST be paragraph aligned.
    56                              <1> ;rsi = alloc size for new psp block
    57 0000428F C605(76C40300)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    58 00004296 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]
    59 0000429D 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    60 0000429F 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    61 000042A0 EB0C                <1>     jmp short copyPSP.pspCommon
    62                              <1> copyPSP:      ;ah = 26h
    63                              <1> ;Input:
    64                              <1> ;rdx = Pointer to new PSP in memory.
    65                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    66                              <1> ;   Officially document that this MUST be paragraph aligned.
    67 000042A2 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]
    68 000042A9 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    69 000042AD 53                  <1>     push rbx    ;Save this value for PSP allocsize
    70                              <1> .pspCommon:
    71 000042AE 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    72 000042B5 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    73 000042B9 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    74                              <1> ;r8 is current PSP, now copy psp to rdx
    75                              <1> ;Preserve rdx and r8 until the end
    76 000042BD 4C89C6              <1>     mov rsi, r8
    77 000042C0 4889D7              <1>     mov rdi, rdx
    78 000042C3 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    79 000042C8 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    80 000042CB 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    81 000042D3 F605(76C40300)FF    <1>     test byte [pspCopyFlg], -1
    82 000042DA 7449                <1>     jz .copy
    83                              <1>     ;Now reset the parent psp data
    84 000042DC 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    85 000042E4 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    86                              <1>     ;Now reset the copied jobFileTable
    87 000042E8 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    88 000042EC 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    89 000042F3 B0FF                <1>     mov al, -1
    90 000042F5 F3AA                <1>     rep stosb   ;Store maxHndls many -1's 
    91                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    92 000042F7 498D702A            <1>     lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    93 000042FB 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    94 000042FF 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    95                              <1> .xfrJFT:
    96 00004306 67E31C              <1>     jecxz .copy
    97 00004309 FFC9                <1>     dec ecx
    98 0000430B AC                  <1>     lodsb   ;Get the SFTndx in al
    99 0000430C 0FB6D8              <1>     movzx ebx, al
   100 0000430F 53                  <1>     push rbx
   101 00004310 E8AFF9FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
   102 00004315 58                  <1>     pop rax
   103 00004316 7508                <1>     jnz .badJFT
   104 00004318 AA                  <1>     stosb   ;Else store the SFTndx at that position... 
   105 00004319 E8BDF9FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
   106 0000431E EBE6                <1>     jmp short .xfrJFT
   107                              <1> .badJFT:
   108 00004320 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
   109 00004323 EBE1                <1>     jmp short .xfrJFT 
   110                              <1> .copy:
   111 00004325 C605(76C40300)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
   112 0000432C 58                  <1>     pop rax ;Pop the allocsize back into rax
   113 0000432D 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
   114                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
   115 00004330 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
   116 00004334 B042                <1>     mov al, 42h
   117 00004336 E80E0D0000          <1>     call muxGetIntVector    ;Get vector in rbx
   118 0000433B 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   119 0000433E 48AB                <1>     stosq   ;Move rdi to next entry and store
   120 00004340 B043                <1>     mov al, 43h
   121 00004342 E8020D0000          <1>     call muxGetIntVector    ;Get vector in rbx
   122 00004347 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   123 0000434A 48AB                <1>     stosq   ;Move rdi to next entry and store
   124 0000434C B044                <1>     mov al, 44h
   125 0000434E E8F60C0000          <1>     call muxGetIntVector    ;Get vector in rbx
   126 00004353 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   127 00004356 48AB                <1>     stosq   ;Move rdi to next entry and store
   128                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   129 00004358 66C70240CD          <1>     mov word [rdx + psp.return], 0CD40h  ;Int 40h
   130 0000435D C7425000CB40CD      <1>     mov dword [rdx + psp.unixEntry], 0CD40CB00h  ;Overlay next byte for prevPSP
   131                              <1>     return
    18                              <2> %%_ret:
    19 00004364 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   132                              <1> 
   133                              <1> terminateStayRes:  ;ah = 31h
   134                              <1> ;Input: al  = Error code
   135                              <1> ;       edx = Number of paragraphs to keep resident
   136 00004365 C605(60C60300)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   137                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   138 0000436C 81FA06000000        <1>     cmp edx, 6
   139 00004372 7305                <1>     jae .aboveMinimum
   140 00004374 BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   141                              <1> .aboveMinimum:
   142                              <1> ;Now we setup a call to Realloc 
   143                              <1> ;Setup regs with: 
   144                              <1> ;   r8 = address of the block to be realloc'ed
   145                              <1> ;   ebx = How many paras this block should contain after realloc.
   146 00004379 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   147 00004380 89D3                <1>     mov ebx, edx
   148 00004382 50                  <1>     push rax    ;Preserve errorlevel across call
   149 00004383 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   150 00004384 E8D2FCFFFF          <1>     call reallocMemory
   151 00004389 5B                  <1>     pop rbx
   152 0000438A 58                  <1>     pop rax
   153 0000438B 7220                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   154 0000438D 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   155                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   156 00004391 EB1A                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   157                              <1> 
   158                              <1> simpleTerminate:   ;ah = 00h
   159 00004393 31C0                <1>     xor eax, eax    ;Just fall through as normal
   160                              <1> terminateClean:    ;ah = 4Ch, EXIT
   161                              <1> ;Here we must:
   162                              <1> ;0) Build errorlevel and adjust variables accordingly
   163                              <1> ;1) Call Network Termination hook.
   164                              <1> ;2) Check if the program is it's own parent. If so, return.
   165                              <1> ;3) Swap the console back to the original driver if it is swapped.
   166                              <1> ;3.5) If we are exiting due to TSR, jump to 5
   167                              <1> ;4) Free all file handles associated to the current process.
   168                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   169                              <1> ;5) Free all memory blocks that have the signature of current PSP
   170                              <1> ;6) Set current PSP to parent PSP
   171                              <1> ;7) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   172                              <1> ;8) Set rsp of parent proc upon entry to DOS to our rsp
   173                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   174                              <1> ;10) Exit all critical sections.
   175                              <1> ;
   176                              <1> ; Step 0
   177                              <1> ;For now, just adjust error level in var
   178 00004395 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   179 00004397 8625(60C60300)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   180 0000439D F605(EDC30300)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   181 000043A4 740D                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   182 000043A6 C605(60C60300)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   183                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   184 000043AD 8A25(60C60300)      <1>     mov ah, byte [exitType] ;Get the exitType
   185                              <1> .storeELvl:
   186 000043B3 668905(91C30300)    <1>     mov word [errorLevel], ax   ;Store word
   187                              <1>     
   188                              <1> ; Step 1 Tell network a process is terminating
   189 000043BA B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   190 000043BF 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   191 000043C6 CD4F                <1>     int 4Fh
   192                              <1> 
   193                              <1> ; Step 2
   194                              <1> .step1:
   195 000043C8 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   196 000043CF 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   197 000043D2 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   198 000043D6 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   199                              <1>     rete            ;If it is, simply return (al has errorLevel)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000043D9 7489                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   200                              <1> ; Step 3
   201 000043DB E879E1FFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   202                              <1> ; Step 3.5
   203 000043E0 803D(60C60300)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   204 000043E7 0F8488000000        <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   205                              <1> ; Step 4
   206 000043ED 803D(60C60300)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   207 000043F4 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   208 000043F6 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   209 000043FB CD4F                <1>     int 4Fh
   210                              <1> .skipAbortNetClose:
   211 000043FD 4881C72A000000      <1>     add rdi, psp.jobFileTbl ;Move rdi to point to the start of the JFT
   212 00004404 4889FE              <1>     mov rsi, rdi    ;Point rsi to jft too
   213 00004407 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls] ;Number of entries in JFT
   214                              <1> .s4lp:
   215 0000440E AC                  <1>     lodsb   ;Inc rsi, get the SFT number in al
   216 0000440F 3CFF                <1>     cmp al, -1  ;End of open JFT entries?
   217 00004411 7429                <1>     je .step5
   218 00004413 0FB6D8              <1>     movzx ebx, al   ;Move the file handle number into ebx
   219                              <1>     ;Replace with a call to close the handle eventually
   220 00004416 57                  <1>     push rdi
   221 00004417 E840F8FFFF          <1>     call derefSFTPtr    ;Ret in rdi the SFT pointer
   222 0000441C 7216                <1>     jc .badHdl  ;If a bad handle, skip the decrementing of the handle count
   223 0000441E FF35(84C60300)      <1>     push qword [currentSFT]
   224 00004424 E88AF6FFFF          <1>     call setCurrentSFT  ;Set rdi to currentSFT
   225 00004429 E80BEFFFFF          <1>     call closeMain  ;Close all files opened by this program. Decrement ref ONLY
   226                              <1>     ;closeMain also flushes all sectors associated to the file
   227                              <1>     ;Ignore errors, simply keep closing files
   228 0000442E 8F05(84C60300)      <1>     pop qword [currentSFT]
   229                              <1> .badHdl:
   230 00004434 5F                  <1>     pop rdi
   231 00004435 B0FF                <1>     mov al, -1
   232 00004437 AA                  <1>     stosb   ;Store a -1 in it's place (not strictly necessary)
   233 00004438 FFC9                <1>     dec ecx ;Zoom Zoom \mu-op!
   234 0000443A 75D2                <1>     jnz .s4lp   ;Keep looping for all entries in the JFT 
   235                              <1> ;Step 5
   236                              <1> .step5:
   237 0000443C 488B1D(81C30300)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   238                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   239                              <1>     ; with the currentPSP signature and free them.
   240 00004443 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   241                              <1> .s5lp:  ;And walk the chain
   242                              <1> ;First verify the address in rsi is a valid mcb
   243 0000444A 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   244 0000444C 80F94D              <1>     cmp cl, mcbMarkCtn
   245 0000444F 7405                <1>     je .checkToFree
   246 00004451 80F95A              <1>     cmp cl, mcbMarkEnd
   247 00004454 751F                <1>     jne .step6  ;Something wrong so stop freeing
   248                              <1> .checkToFree:
   249 00004456 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   250 0000445A 7508                <1>     jne .noFree
   251 0000445C 4989F0              <1>     mov r8, rsi ;Move pointer to r8
   252 0000445F E8EFFAFFFF          <1>     call freeMemory ;Free this memory block
   253                              <1>     ;If an error occured, the internal vars will be set.
   254                              <1> .noFree:
   255 00004464 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   256 00004467 740C                <1>     je .step6   ;Skip if we are
   257 00004469 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   258 0000446C 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   259 00004470 4801C6              <1>     add rsi, rax    ;Goto next mcb block
   260 00004473 EBD5                <1>     jmp short .s5lp
   261                              <1> ;Step 6
   262                              <1> .step6:
   263 00004475 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   264 00004479 488905(81C30300)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   265                              <1> ;Step 7
   266                              <1>     ;rbx points to current PSP, the old parent task
   267                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   268 00004480 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   269 00004484 B044                <1>     mov al, 44h
   270 00004486 E8DB110000          <1>     call setIntVector
   271 0000448B 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   272 0000448F B043                <1>     mov al, 43h
   273 00004491 E8D0110000          <1>     call setIntVector
   274 00004496 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   275 0000449A B042                <1>     mov al, 42h
   276 0000449C 52                  <1>     push rdx
   277 0000449D E8C4110000          <1>     call setIntVector
   278 000044A2 5A                  <1>     pop rdx
   279                              <1> ;Step 8
   280 000044A3 52                  <1>     push rdx    ;Save the return address on the stack
   281 000044A4 53                  <1>     push rbx    ;Save the parent PSP address
   282 000044A5 B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   283 000044A7 CD4A                <1>     int 4ah
   284 000044A9 5B                  <1>     pop rbx
   285 000044AA 5A                  <1>     pop rdx
   286                              <1> 
   287 000044AB FA                  <1>     cli
   288                              <1>     ;Make the parent register frame the current one
   289                              <1>     ;Make RSP point to user stack from parent entry to exec
   290 000044AC 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   291                              <1> 
   292 000044B0 4889542448          <1>     mov qword [rsp + callerFrame.rip], rdx  ;Store return address vector here
   293 000044B5 48C744245802F20000  <1>     mov qword [rsp + callerFrame.flags], 0F202h ;Mimic DOS's return flags
   294                              <1> 
   295 000044BE C605(F7C30300)00    <1>     mov byte [Int44Trans], 0    ;Clear this flag
   296 000044C5 C605(6AC30300)00    <1>     mov byte [inDOS], 0 ;Exiting DOS now
   297 000044CC C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;Reset
   298 000044D3 E87A0F0000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   299 000044D8 48CF                <1>     iretq   ;and return to address that was in rdx
    34                                  %include "./Source/Kernel/MemExec/exec.asm"
    35                              <1> 
    36                              <1> 
    37                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    38                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
    39                              <1> ;       rbx = Ptr to the parameter block used for loading
    40                              <1> ;       al = Subfunction:
    41                              <1> ;            00h = Load Program and transfer control to it
    42                              <1> ;            01h = Load Program but do not transfer ctrl to it
    43                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    44                              <1> ;      Reserved for future expansion:
    45                              <1> ;            04h = Load in background execution mode (PE only)
    46                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    47                              <1> ;               function but in 16-bit mode. 
    48                              <1> ;
    49                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    50                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    51                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    52                              <1> 
    53                              <1> ;If AL = 0 :
    54                              <1> ;            Load Child Program and Xfr control to it
    55                              <1> ; rbx ------>   |-------------------------------|
    56                              <1> ;               |   Ptr to Environment Block    |
    57                              <1> ;               |                               |
    58                              <1> ;               | Can be 0 => Get pointer to    |
    59                              <1> ;               | parent Environment Block      |
    60                              <1> ;               |-------------------------------|
    61                              <1> ;               |   Ptr to Command Line to be   |
    62                              <1> ;               |   placed at PSP + 80h         |
    63                              <1> ;               |-------------------------------|
    64                              <1> ;               |   Ptr to first default FCB    |
    65                              <1> ;               |      to copy to PSP.fcb1      |
    66                              <1> ;               |                               |
    67                              <1> ;               | Should be used to parse the   |
    68                              <1> ;               |  first two command line args  |
    69                              <1> ;               |-------------------------------|
    70                              <1> ;               |   Ptr to second default FCB   |
    71                              <1> ;               |      to copy to PSP.fcb2      |
    72                              <1> ;               |-------------------------------|
    73                              <1> ;
    74                              <1> ;If AL = 1 :
    75                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    76                              <1> ; rbx ------>   |-------------------------------|
    77                              <1> ;               |         AS IN AL=00H          |
    78                              <1> ;               |-------------------------------|
    79                              <1> ;               |     Initial Value of RSP      |
    80                              <1> ;               |       on program launch       |
    81                              <1> ;               |                               |
    82                              <1> ;               |     This is returned to the   |
    83                              <1> ;               |         caller by DOS         |
    84                              <1> ;               |-------------------------------|
    85                              <1> ;               |     Initial Value of RIP      |
    86                              <1> ;               |       on program launch       |
    87                              <1> ;               |                               |
    88                              <1> ;               |     This is returned to the   |
    89                              <1> ;               |         caller by DOS         |
    90                              <1> ;               |-------------------------------|
    91                              <1> ;
    92                              <1> ;                      !!Important Note!!
    93                              <1> ;   The block pointed to by rbx must reserve the space for 
    94                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    95                              <1> ;
    96                              <1> ;If AL = 3 :
    97                              <1> ;                      Load program overlay
    98                              <1> ; rbx ------>   |-------------------------------|
    99                              <1> ;               |  Pointer to the byte in the   |
   100                              <1> ;               |  prog space to start writing  |
   101                              <1> ;               |        the overlay at         |
   102                              <1> ;               |-------------------------------|
   103                              <1> ;               | DWORD offset from the base of |
   104                              <1> ;               |  the program to the location  |
   105                              <1> ;               |  the overlay is being loaded  |
   106                              <1> ;               |              in               |
   107                              <1> ;               |  (Called a Relocation Factor) |
   108                              <1> ;               |     Only FOR EXE Overlays     |
   109                              <1> ;               |        for CODE fixups        |
   110                              <1> ;               |  For COM, Current PSP + 100h  |
   111                              <1> ;               |      assumed to suffice       |
   112                              <1> ;               |-------------------------------|
   113                              <1> ;
   114                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
   115                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
   116                              <1> ;
   117                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
   118 000044DA 55                  <1>     push rbp
   119 000044DB 4889E5              <1>     mov rbp, rsp
   120 000044DE 4881EC4C000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   121 000044E5 3C03                <1>     cmp al, execOverlay
   122 000044E7 7615                <1>     jbe .validSubfunction
   123                              <1> .badSubFunction:
   124 000044E9 B801000000          <1>     mov eax, errInvFnc
   125 000044EE C605(6CC30300)01    <1>     mov byte [errorLocus], eLocUnk
   126                              <1> .badExit:
   127 000044F5 4889EC              <1>     mov rsp, rbp
   128 000044F8 5D                  <1>     pop rbp
   129 000044F9 E9C10F0000          <1>     jmp extErrExit
   130                              <1> 
   131                              <1> .validSubfunction:
   132 000044FE 3C02                <1>     cmp al, execInvld
   133 00004500 74E7                <1>     je .badSubFunction
   134                              <1>     ;Save registers for each function call
   135 00004502 48895DF0            <1>     mov qword [rbp - execFrame.pParam], rbx
   136 00004506 488955E8            <1>     mov qword [rbp - execFrame.pProgname], rdx
   137 0000450A 0FB6C0              <1>     movzx eax, al
   138 0000450D 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   139 00004511 4889D7              <1>     mov rdi, rdx
   140 00004514 E88A0C0000          <1>     call strlen ;Get string length in cx
   141 00004519 66894DF3            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   142                              <1>     ;Now open the file we wanna yeet to
   143 0000451D 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   144 0000451F 55                  <1>     push rbp    ;Preserve local frame ptr
   145 00004520 E8B1E5FFFF          <1>     call openFileHdl
   146 00004525 5D                  <1>     pop rbp
   147 00004526 72CD                <1>     jc .badExit ;Exit preserving error code in al
   148                              <1>     ;Now ax has the file handle
   149 00004528 668945F7            <1>     mov word [rbp - execFrame.wProgHdl], ax
   150 0000452C 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   151 0000452F E828F7FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   152 00004534 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   153 00004538 F7C280000000        <1>     test edx, devCharDev
   154 0000453E 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   155 00004540 B002                <1>     mov al, errFnf
   156 00004542 E9CE040000          <1>     jmp .cleanAndFail
   157                              <1> .validDiskFile:
   158 00004547 31C0                <1>     xor eax, eax
   159 00004549 488945E0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Clear pEnv and pProg Bases
   160 0000454D 488945D0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   161 00004551 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   162 00004555 0F848B000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   163 0000455B 488B7DF0            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   164 0000455F 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   165 00004562 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   166 00004565 7514                <1>     jnz .copyEnvironmentBlock
   167 00004567 488B35(81C30300)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   168 0000456E 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   169 00004572 488945E0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   170 00004576 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, make a new block
   171 00004579 756B                <1>     jnz .loadProgram
   172                              <1> .copyEnvironmentBlock:
   173 0000457B 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   174                              <1>     ;Get the length of the environment
   175 0000457E B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   176 00004583 31C0                <1>     xor eax, eax
   177 00004585 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   178                              <1> .envVerifyLp:
   179 00004588 F3AE                <1>     rep scasb   ;Scan for a terminating word of nulls
   180 0000458A 752F                <1>     jnz .invalidEnvironmentError
   181 0000458C 67E32C              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   182 0000458F FFC9                <1>     dec ecx
   183 00004591 AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   184 00004592 75F4                <1>     jnz .envVerifyLp
   185                              <1> 
   186 00004594 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   187 00004597 57                  <1>     push rdi     ;Save the length of the environment block
   188 00004598 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   189 0000459E 0FB75DF3            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   190 000045A2 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   191 000045A4 89FB                <1>     mov ebx, edi
   192 000045A6 C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   193 000045A9 E87BF7FFFF          <1>     call allocateMemory
   194 000045AE 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   195 000045AF 7314                <1>     jnc .copyEnvironment
   196                              <1>     ;Fall thru if not enuff memory
   197                              <1> .insufficientMemory:
   198 000045B1 B808000000          <1>     mov eax, errNoMem
   199 000045B6 E95A040000          <1>     jmp .cleanAndFail
   200                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   201 000045BB B80A000000          <1>     mov eax, errBadEnv
   202 000045C0 E950040000          <1>     jmp .cleanAndFail
   203                              <1> 
   204                              <1> .copyEnvironment:
   205                              <1>     ;rax has the ptr to allocated memory block
   206                              <1>     ;rcx has the number of chars to copy from the source env block
   207 000045C5 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   208 000045C8 488945E0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   209 000045CC 488B75F0            <1>     mov rsi, qword [rbp - execFrame.pParam]
   210 000045D0 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   211 000045D3 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   212 000045D5 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   213 000045DA 66AB                <1>     stosw       ;Away you go!
   214 000045DC 488B75E8            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   215 000045E0 0FB74DF3            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   216 000045E4 F3A4                <1>     rep movsb   ;Move the bytes to rdi
   217                              <1> ;Done with the environment... more or less
   218                              <1> .loadProgram:
   219 000045E6 B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   220 000045EB 488D15(EAD80300)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   221 000045F2 E83A040000          <1>     call .readDataFromHdl
   222 000045F7 0F8213040000        <1>     jc .badFmtErr
   223 000045FD 85C0                <1>     test eax, eax   ;Were zero bytes read?
   224 000045FF 0F840B040000        <1>     jz .badFmtErr
   225 00004605 3D40000000          <1>     cmp eax, imageDosHdr_size
   226 0000460A 0F8272020000        <1>     jb .loadCom
   227                              <1> 
   228 00004610 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   229 00004615 740B                <1>     je .proceedEXE
   230 00004617 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   231 0000461C 0F8560020000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   232                              <1> .proceedEXE:
   233                              <1>     ;Now we need to read e_lfanew
   234 00004622 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   235 00004623 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   236 00004626 8955C4              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   237 00004629 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   238 0000462B 30C0                <1>     xor al, al  ;Set file pointer from start of file
   239 0000462D 0FB75DF7            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   240 00004631 E806E7FFFF          <1>     call lseekHdl   ;Move to that position in the file
   241                              <1> 
   242 00004636 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   243 00004637 B914000000          <1>     mov ecx, imageFileHeader_size
   244 0000463C E8F0030000          <1>     call .readDataFromHdl       ;Now read the COFF header
   245 00004641 85C0                <1>     test eax, eax   ;Were zero bytes read?
   246 00004643 0F84C7030000        <1>     jz .badFmtErr
   247 00004649 3D14000000          <1>     cmp eax, imageFileHeader_size
   248 0000464E 0F82BC030000        <1>     jb .badFmtErr
   249                              <1>     ;So now rdx points to the imageFileHeader
   250 00004654 66813A6486          <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   251 00004659 0F85B1030000        <1>     jne .badFmtErr
   252 0000465F 66817A107000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   253 00004665 0F82A5030000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   254                              <1>     ;Now save the number of sections in the the file
   255 0000466B 0FB74202            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   256 0000466F 85C0                <1>     test eax, eax   ;If this is 0, what?
   257 00004671 0F8499030000        <1>     jz .badFmtErr
   258 00004677 668945C0            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   259                              <1> 
   260                              <1>     ;Now load Optional header, file ptr points to it so all good!
   261 0000467B B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   262                              <1>     ;rdx points to exeHdrSpace
   263 00004680 E8AC030000          <1>     call .readDataFromHdl
   264 00004685 85C0                <1>     test eax, eax   ;Were zero bytes read?
   265 00004687 0F8483030000        <1>     jz .badFmtErr
   266 0000468D 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   267 00004692 0F8278030000        <1>     jb .badFmtErr
   268                              <1>     ;Now File Ptr points to data dirs, not an issue
   269 00004698 8145BC70000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   270                              <1>     ;We load the program in, one section at a time, reading section headers in
   271                              <1>     ; one at a time to the section header internal buffer.
   272 0000469F 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   273 000046A3 744B                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   274 000046A5 8B1D(22D90300)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   275 000046AB 488B05(32D90300)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   276 000046B2 4885C0              <1>     test rax, rax
   277 000046B5 750A                <1>     jnz .notDefaultStackAlloc
   278 000046B7 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   278 000046C0 00                  <1>
   279                              <1> .notDefaultStackAlloc:
   280 000046C1 01C3                <1>     add ebx, eax    ;Add stack allocation
   281 000046C3 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   282 000046C9 895DC8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   283 000046CC 81C30B000000        <1>     add ebx, 11
   284 000046D2 C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   285 000046D5 E84FF6FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   286 000046DA 0F82D1FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   287 000046E0 488945D8            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   288 000046E4 480500010000        <1>     add rax, psp_size
   289 000046EA 488945D0            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of code goes here
   290 000046EE EB0B                <1>     jmp short .exeProceed1
   291                              <1> .exeOvlySkipAlloc:
   292 000046F0 488B5DF0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   293 000046F4 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   294 000046F7 488945D0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   295                              <1> .exeProceed1:
   296                              <1>     ;So now copy one section at a time, read section header in
   297                              <1>     ;File pointer points to the directory table, so skip that
   298 000046FB 8B15(56D90300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   299 00004701 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   300 00004707 0F8203030000        <1>     jb .badFmtErr
   301 0000470D FFCA                <1>     dec edx ;Decrement by 1 to make into a 0 based offset
   302                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   303 0000470F C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   304 00004712 31C9                <1>     xor ecx, ecx
   305 00004714 0FB75DF7            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   306 00004718 B001                <1>     mov al, 1   ;Move handle forwards from current position
   307 0000471A E81DE6FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   308                              <1>     ;eax has pointer location after adjustment
   309 0000471F 8945BC              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   310                              <1>     ;File now points to start of Section headers. Read first header in.
   311                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   312 00004722 488B7DD0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   313 00004726 0FB74DC0            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   314                              <1> .loadLp:
   315 0000472A 51                  <1>     push rcx    ;Save # of segments left on stack
   316 0000472B 57                  <1>     push rdi    ;Save the current buffer ptr here
   317 0000472C B928000000          <1>     mov ecx, imageSectionHdr_size
   318 00004731 488D15(5AD90300)    <1>     lea rdx, sectHdr    ;Read section headers here
   319 00004738 E8F4020000          <1>     call .readDataFromHdl
   320 0000473D 5F                  <1>     pop rdi
   321 0000473E 59                  <1>     pop rcx
   322 0000473F 85C0                <1>     test eax, eax
   323 00004741 0F84C9020000        <1>     jz .badFmtErr
   324 00004747 3D28000000          <1>     cmp eax, imageSectionHdr_size
   325 0000474C 0F85BE020000        <1>     jne .badFmtErr
   326                              <1>     ;File ptr moved forwards to next section header
   327 00004752 8145BC28000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   328                              <1>     ;Section header read, now we load section into memory
   329                              <1>     ;Move file ptr to data location
   330 00004759 8B15(6ED90300)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   331 0000475F 0FB75DF7            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   332 00004763 31C0                <1>     xor eax, eax    ;Seek from start of file
   333 00004765 51                  <1>     push rcx
   334 00004766 57                  <1>     push rdi
   335 00004767 E8D0E5FFFF          <1>     call lseekHdl
   336 0000476C 5F                  <1>     pop rdi
   337 0000476D 59                  <1>     pop rcx
   338                              <1> 
   339 0000476E 51                  <1>     push rcx
   340 0000476F 57                  <1>     push rdi    ;Save current buffer offset
   341 00004770 8B0D(6AD90300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dSizeOfRawData]   ;Get # of bytes
   342 00004776 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   343 00004779 E8B3020000          <1>     call .readDataFromHdl
   344 0000477E 5F                  <1>     pop rdi
   345 0000477F 59                  <1>     pop rcx
   346 00004780 0F828A020000        <1>     jc .badFmtErr
   347 00004786 85C0                <1>     test eax, eax
   348 00004788 0F8482020000        <1>     jz .badFmtErr
   349 0000478E 3B05(6AD90300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   350 00004794 0F8576020000        <1>     jne .badFmtErr
   351                              <1>     ;Data read ok, now fill in any zeros needed
   352 0000479A 8B05(6AD90300)      <1>     mov eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   353 000047A0 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   354 000047A3 3B05(62D90300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   355 000047A9 730E                <1>     jae .skipPadding
   356 000047AB 51                  <1>     push rcx
   357 000047AC 8B0D(62D90300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]
   358 000047B2 29C1                <1>     sub ecx, eax    ;Get number of bytes to pad with in ecx
   359                              <1>     ;rdi points to pad space
   360 000047B4 31C0                <1>     xor eax, eax
   361 000047B6 F3AA                <1>     rep stosb   ;Pad that many zeros
   362 000047B8 59                  <1>     pop rcx
   363                              <1> .skipPadding:
   364 000047B9 FFC9                <1>     dec ecx ;Decrement our section counter
   365 000047BB 7419                <1>     jz .doExeFixups
   366                              <1>     ;Read next section header in here
   367 000047BD 51                  <1>     push rcx
   368 000047BE 57                  <1>     push rdi
   369 000047BF 30C0                <1>     xor al, al  ;Move rel start of file
   370 000047C1 8B55BC              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   371 000047C4 0FB75DF7            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   372 000047C8 31C9                <1>     xor ecx, ecx
   373 000047CA E86DE5FFFF          <1>     call lseekHdl
   374 000047CF 5F                  <1>     pop rdi
   375 000047D0 59                  <1>     pop rcx
   376 000047D1 E954FFFFFF          <1>     jmp .loadLp
   377                              <1> .doExeFixups:
   378                              <1> ;Here we fixup addresses as needed
   379                              <1> ;Program Entrypoint is saved in the header structure in the SDA
   380                              <1> ;Move File pointer to COFF header Coff + optional header sizes
   381                              <1> ;We look only for .reloc segment. We have it in memory too so use it to make 
   382                              <1> ; fixups. Zero the in memory image of reloc segment once we are done with it. 
   383                              <1> ;We checked that .reloc exists so all ok
   384 000047D6 8B15(56D90300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   385 000047DC 8B55C4              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   386 000047DF 81C2AC000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   387                              <1>     ;eax now points to position in file of direcotry entry for reloc
   388 000047E5 0FB75DF7            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   389 000047E9 31C0                <1>     xor eax, eax
   390 000047EB E84CE5FFFF          <1>     call lseekHdl   ;Move handle there in file
   391 000047F0 8945BC              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   392 000047F3 B908000000          <1>     mov ecx, imageDataDirectory_size
   393                              <1>     ;Read 8 bytes into sectHdr space
   394 000047F8 488D15(5AD90300)    <1>     lea rdx, sectHdr
   395 000047FF E82D020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   396                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   397 00004804 8B35(5AD90300)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   398 0000480A 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   399 0000480C 0F840D010000        <1>     jz .buildChildPSP   ;... including if overlay
   400 00004812 480375D0            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   401                              <1>     ;Now rsi points to where in memory the relocation data table is
   402                              <1>     ;Now compute the relocation factor 
   403 00004816 488B45D0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   404 0000481A 482B05(02D90300)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   405                              <1>     ;The value in rax gives how much to subtract by
   406 00004821 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   407 00004825 7507                <1>     jne .notOverlayReloc
   408 00004827 488B5DF0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   409 0000482B 034308              <1>     add eax, dword [rbx + loadOvly.dRelocFct]   ;Add the overlay reloc factor
   410                              <1> .notOverlayReloc:
   411 0000482E 488945BC            <1>     mov qword [rbp - execFrame.qRelocVal], rax  ;Save relocation value
   412 00004832 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   413                              <1>     ;rsi points to relocation data table in memory
   414 00004835 8B0D(5ED90300)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   415 0000483B 81F900000000        <1>     cmp ecx, 0    ;If no relocations, skip
   416 00004841 0F84D8000000        <1>     jz .buildChildPSP
   417 00004847 488B7DD0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   418                              <1>     ;rsi points to the first base relocation block. The relocations begin
   419                              <1>     ; after the first block
   420                              <1>     ;ecx has the number of base relocation blocks to process.
   421                              <1> .nextBlock:
   422 0000484B 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   423 0000484C 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   424 0000484E 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   425 00004851 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes
   426 00004854 D1E9                <1>     shr ecx, 1  ;Divide by 2 to get number of words = # of relocs to do
   427 00004856 67E311              <1>     jecxz .blockDone
   428                              <1> .blockNotDone:
   429 00004859 66AD                <1>     lodsw   ;Get the next page offset word
   430 0000485B 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   431 00004860 4801C7              <1>     add rdi, rax    ;Add this offset to rdi, the pointer to program image
   432                              <1>     ;rdi points to qword to rebase
   433 00004863 48011F              <1>     add qword [rdi], rbx    ;Relocation factor was saved in rbx
   434 00004866 FFC9                <1>     dec ecx
   435 00004868 75EF                <1>     jnz .blockNotDone
   436                              <1> .blockDone:
   437 0000486A 59                  <1>     pop rcx
   438 0000486B FFC9                <1>     dec ecx
   439 0000486D 75DC                <1>     jnz .nextBlock
   440 0000486F 8B05(FAD80300)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   441 00004875 480345D0            <1>     add rax, qword [rbp - execFrame.pProgBase]
   442 00004879 488945C4            <1>     mov qword [rbp - execFrame.pProgEP], rax
   443 0000487D E99D000000          <1>     jmp .buildChildPSP
   444                              <1> .loadCom:
   445                              <1>     ;File is open here, so just read the file into memory. 
   446                              <1>     ;The file cannot exceed 64Kb in size. COM ONLY for small files!!!!
   447                              <1>     ;Allocate 64Kb of memory, or as much as we can
   448 00004882 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   449 00004886 744C                <1>     je .comOverlay
   450 00004888 BBFFFF0000          <1>     mov ebx, 0FFFFh ;64Kb pls
   451 0000488D 895DC8              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   452 00004890 E894F4FFFF          <1>     call allocateMemory
   453 00004895 734A                <1>     jnc .comallocOk
   454 00004897 3C08                <1>     cmp al, errNoMem
   455 00004899 0F8576010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   456                              <1>     ;rbx should have the amount available
   457                              <1>     ;We check if this value is psp_size more than filesize
   458 0000489F 53                  <1>     push rbx    ;Save new minimum size
   459 000048A0 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   460 000048A5 0FB75DF7            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   461 000048A9 31D2                <1>     xor edx, edx    ;Go to end of file
   462 000048AB E88CE4FFFF          <1>     call lseekHdl
   463                              <1>     ;eax has file size
   464 000048B0 5B                  <1>     pop rbx ;Get back max alloc size
   465 000048B1 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   466 000048B3 29C2                <1>     sub edx, eax
   467 000048B5 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   468 000048BB 0F82F0FCFFFF        <1>     jb .insufficientMemory   ;Fail
   469 000048C1 895DC8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   470 000048C4 E860F4FFFF          <1>     call allocateMemory
   471 000048C9 0F8246010000        <1>     jc .cleanAndFail
   472 000048CF E90D000000          <1>     jmp .comallocOk
   473                              <1> .comOverlay:
   474                              <1>     ;Here we simply read the file into the buffer provided
   475 000048D4 488B5DF0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   476 000048D8 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   477 000048DB 488945D0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   478 000048DF EB0A                <1>     jmp short .comRead
   479                              <1> .comallocOk:
   480                              <1>     ;rax should point to the first byte
   481 000048E1 488945D8            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   482 000048E5 480500010000        <1>     add rax, psp_size
   483                              <1> .comRead:
   484 000048EB 488945D0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   485                              <1> 
   486 000048EF B802000000          <1>     mov eax, 2    ;Reposition to end of file
   487 000048F4 0FB75DF7            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   488 000048F8 31D2                <1>     xor edx, edx    ;Go to end of file
   489 000048FA E83DE4FFFF          <1>     call lseekHdl
   490                              <1>     ;eax has filesize now
   491 000048FF 50                  <1>     push rax    ;Save filesize
   492 00004900 31C0                <1>     xor eax, eax    ;Reposition to start of file
   493 00004902 0FB75DF7            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   494 00004906 31D2                <1>     xor edx, edx    ;Go to start of file
   495 00004908 E82FE4FFFF          <1>     call lseekHdl
   496 0000490D 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   497 0000490E 488B55D0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   498 00004912 E81A010000          <1>     call .readDataFromHdl   ;Read from the file handle
   499 00004917 488B45D0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   500 0000491B 488945C4            <1>     mov qword [rbp - execFrame.pProgEP], rax
   501                              <1> .buildChildPSP:
   502                              <1>     ;We can close handle now
   503 0000491F 0FB75DF7            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   504 00004923 55                  <1>     push rbp
   505 00004924 E8BBE2FFFF          <1>     call closeFileHdl   ;Close the file
   506 00004929 5D                  <1>     pop rbp
   507                              <1> 
   508                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   509 0000492A 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   510 0000492E 0F84BA000000        <1>     je .overlayExit
   511                              <1>     ;Now build the PSP
   512 00004934 8B75C8              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   513 00004937 488B55D8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   514 0000493B 52                  <1>     push rdx
   515 0000493C 55                  <1>     push rbp
   516 0000493D E84DF9FFFF          <1>     call createPSP
   517 00004942 5D                  <1>     pop rbp
   518 00004943 5A                  <1>     pop rdx
   519                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   520 00004944 488915(81C30300)    <1>     mov qword [currentPSP], rdx
   521 0000494B 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   522 00004952 48893D(79C30300)    <1>     mov qword [currentDTA], rdi ;and set it!
   523                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   524                              <1>     ; and set FS to point to the PSP
   525 00004959 488B5DF0            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   526 0000495D 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   527 00004961 B980000000          <1>     mov ecx, 80h
   528 00004966 F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   529                              <1> 
   530 00004968 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   531 0000496C B925000000          <1>     mov ecx, fcb_size
   532 00004971 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   533 00004975 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   534 00004977 F3A4                <1>     rep movsb   ;Copy fcb 1 over
   535 00004979 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   536 0000497D B925000000          <1>     mov ecx, fcb_size
   537 00004982 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   538 00004986 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   539 00004988 F3A4                <1>     rep movsb   ;Copy fcb 2 over
   540                              <1> 
   541 0000498A 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   542 0000498C 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   543                              <1> 
   544                              <1>     ;Put PSP base value in edx:eax to place in FS, dont rely on this in future!
   545 0000498F B9000100C0          <1>     mov ecx, 0C0000100h ;R/W FS MSR
   546 00004994 89D0                <1>     mov eax, edx    ;Move low dword address into rax
   547 00004996 48C1EA20            <1>     shr rdx, 20h    ;Shift high dword in low dword
   548 0000499A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
   549                              <1> 
   550 0000499C E8B6060000          <1>     call getUserRegs    ;Need to get Int 42h address from stack
   551 000049A1 488B4648            <1>     mov rax, qword [rsi + callerFrame.rip]  ;Get parent return address
   552 000049A5 4889470A            <1>     mov qword [rdi + psp.oldInt42h], rax    ;and save it in PSP
   553 000049A9 4889C2              <1>     mov rdx, rax    ;Move return address to rdx to set up the Interrupt Vector
   554 000049AC B042                <1>     mov al, 42h
   555 000049AE E8B30C0000          <1>     call setIntVector   ;bx preserved by this call
   556                              <1> 
   557                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   558 000049B3 88D8                <1>     mov al, bl
   559 000049B5 30DB                <1>     xor bl, bl
   560 000049B7 E8BF060000          <1>     call setDrive
   561 000049BC 7302                <1>     jnc .drive1Ok
   562 000049BE B3FF                <1>     mov bl, -1
   563                              <1> .drive1Ok:
   564 000049C0 88F8                <1>     mov al, bh
   565 000049C2 30FF                <1>     xor bh, bh
   566 000049C4 E8B2060000          <1>     call setDrive
   567 000049C9 7302                <1>     jnc .drive2Ok
   568 000049CB B7FF                <1>     mov bh, -1
   569                              <1> .drive2Ok:
   570                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   571                              <1>     ;rdi has pointer to psp
   572 000049CD 8B75C8              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   573                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   574 000049D0 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   575 000049D5 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   576 000049D9 741C                <1>     je .xfrProgram
   577 000049DB 488B45C4            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   578 000049DF 488B55F0            <1>     mov rdx, qword [rbp - execFrame.pParam]
   579 000049E3 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   580 000049E7 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   581 000049EB 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   582                              <1> .overlayExit:
   583 000049EE 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   584 000049F1 5D                  <1>     pop rbp ;Point rsp to the return address
   585 000049F2 E9BA0A0000          <1>     jmp extGoodExit ;And return!
   586                              <1> .xfrProgram:
   587 000049F7 FA                  <1>     cli
   588 000049F8 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   589 000049FB C605(6AC30300)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   590 00004A02 FB                  <1>     sti
   591 00004A03 FF75C4              <1>     push qword [rbp - execFrame.pProgEP]
   592 00004A06 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   593 00004A09 4989F9              <1>     mov r9, rdi
   594 00004A0C 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   595                              <1>     return  ;Return to child task
    18                              <2> %%_ret:
    19 00004A0F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   596                              <1> 
   597                              <1> .badFmtErr:
   598 00004A10 B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   599                              <1> .cleanAndFail:
   600                              <1> ;Close the open file and any open resources and fail
   601 00004A15 E82D000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   602 00004A1A E86B0A0000          <1>     call dosCrit1Exit
   603 00004A1F 0FB75DF7            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   604 00004A23 50                  <1>     push rax    ;Save error code
   605 00004A24 55                  <1>     push rbp
   606 00004A25 E8BAE1FFFF          <1>     call closeFileHdl
   607 00004A2A 58                  <1>     pop rax
   608 00004A2B 5D                  <1>     pop rbp
   609 00004A2C E9C4FAFFFF          <1>     jmp .badExit
   610                              <1> 
   611                              <1> .readDataFromHdl:
   612                              <1> ;Input: bx = File Handle
   613                              <1> ;       ecx = Number of bytes to transfer
   614                              <1> ;       rdx = Ptr to the buffer to use
   615 00004A31 E811000000          <1>     call .clearArenaOwner   ;Entering critical section!
   616 00004A36 0FB75DF7            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   617 00004A3A 55                  <1>     push rbp
   618 00004A3B E8E3E1FFFF          <1>     call readFileHdl
   619 00004A40 5D                  <1>     pop rbp
   620 00004A41 E810000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   621                              <1>     return
    18                              <2> %%_ret:
    19 00004A46 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   622                              <1> .clearArenaOwner:
   623 00004A47 53                  <1>     push rbx
   624 00004A48 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   625 00004A4A E8310A0000          <1>     call dosCrit1Enter
   626 00004A4F E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   627 00004A54 5B                  <1>     pop rbx
   628                              <1>     return
    18                              <2> %%_ret:
    19 00004A55 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   629                              <1> .setPSPArenaOwner:
   630                              <1> ;Sets the current PSP as the arena owner
   631 00004A56 53                  <1>     push rbx
   632 00004A57 488B1D(81C30300)    <1>     mov rbx, qword [currentPSP]
   633 00004A5E E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   634 00004A63 E8220A0000          <1>     call dosCrit1Exit
   635 00004A68 5B                  <1>     pop rbx
   636                              <1>     return
    18                              <2> %%_ret:
    19 00004A69 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   637                              <1> .setProgOrEnvArenaOwnerToRBX:
   638                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   639 00004A6A 9C                  <1>     pushfq
   640 00004A6B 50                  <1>     push rax
   641                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   642                              <1>     ;This is because they are set up at separate points in the routine!
   643 00004A6C 488B45D0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   644 00004A70 E80C000000          <1>     call .writeArenaHeaderOwner
   645 00004A75 488B45E0            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   646 00004A79 E803000000          <1>     call .writeArenaHeaderOwner
   647 00004A7E 58                  <1>     pop rax
   648 00004A7F 9D                  <1>     popfq
   649                              <1>     return
    18                              <2> %%_ret:
    19 00004A80 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   650                              <1> .writeArenaHeaderOwner:
   651                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   652                              <1> ;       rbx = Owner ID
   653 00004A81 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   654                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004A84 74FA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   655 00004A86 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   656 00004A8C 48895801            <1>     mov qword [rax + 1], rbx
   657                              <1>     return
    18                              <2> %%_ret:
    19 00004A90 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    35                                  %include "./Source/Kernel/Local/Local.asm"
    36                              <1> ;Localisation based functions live here
    37                              <1> 
    38                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    39                              <1> ;al = 0 => Get the switch char
    40                              <1> ;al = 1 => Set the switch char to whats in DL
    41                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
    42                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
    43                              <1> ;       Always returns -1 => /DEV/ optional
    44                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    45                              <1> ;       Input value is ignored
    46 00004A91 3C01                <1>     cmp al, 01
    47 00004A93 7412                <1>     je .getSC
    48 00004A95 7209                <1>     jb .setSC
    49 00004A97 3C03                <1>     cmp al, 03
    50 00004A99 7214                <1>     jb .getDev
    51 00004A9B 741C                <1>     je .setDev
    52 00004A9D B0FF                <1>     mov al, -1
    53                              <1>     return
    18                              <2> %%_ret:
    19 00004A9F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> .setSC:
    55 00004AA0 8815(33C30300)      <1>     mov byte [switchChar], dl
    56                              <1>     return
    18                              <2> %%_ret:
    19 00004AA6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    57                              <1> .getSC:
    58 00004AA7 8A15(33C30300)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    59 00004AAD EB02                <1>     jmp short .getRet
    60                              <1> .getDev:
    61 00004AAF B2FF                <1>     mov dl, -1
    62                              <1> .getRet:
    63 00004AB1 E8A1050000          <1>     call getUserRegs
    64 00004AB6 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    65                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    66                              <1>     return
    18                              <2> %%_ret:
    19 00004AB9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    67                              <1> 
    68                              <1> 
    69                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    70                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    71                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    72 00004ABA C3                  <1>     ret
    36                                  %include "./Source/Kernel/ctrlc.asm"
    37                              <1> diskDevErr:
    38                              <1> ;Called, NOT Jumped to. 
    39                              <1> ;Input: rdi = Disk Buffer pointer
    40                              <1> ;       eax = Status word (Zero Extended)
    41                              <1> ;       rbp = Disk DPB pointer
    42                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    43                              <1> ;Output: al = Int 44h response (0-3)
    44                              <1> ; All other registers preserved
    45 00004ABB 48893D(71C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    46 00004AC2 89C7                <1>     mov edi, eax    ;Store status word in rdi
    47 00004AC4 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    48 00004AC7 8A25(C9C30300)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    49 00004ACD 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    50                              <1>     ;Test for correct buffer data type
    51 00004AD0 53                  <1>     push rbx    ;Save rbx temporarily
    52 00004AD1 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    53 00004AD4 F6C301              <1>     test bl, dosBuffer
    54 00004AD7 7505                <1>     jnz .df0
    55 00004AD9 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    56 00004ADC EB17                <1>     jmp short .df3
    57                              <1> .df0:
    58 00004ADE F6C302              <1>     test bl, fatBuffer
    59 00004AE1 7505                <1>     jnz .df1
    60 00004AE3 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    61 00004AE6 EB0D                <1>     jmp short .df3
    62                              <1> .df1:
    63 00004AE8 F6C304              <1>     test bl, dirBuffer
    64 00004AEB 7505                <1>     jnz .df2
    65 00004AED 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    66 00004AF0 EB03                <1>     jmp short .df3
    67                              <1> .df2:
    68 00004AF2 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    69                              <1> .df3:
    70 00004AF5 5B                  <1>     pop rbx
    71 00004AF6 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    72 00004AFA E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    73 00004AFF 488B2D(E0C60300)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    74 00004B06 488B3D(71C30300)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    75                              <1>     return
    18                              <2> %%_ret:
    19 00004B0D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    76                              <1> 
    77                              <1> charDevErr:
    78                              <1> ;Called with ah with additional bits
    79 00004B0E 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
    80                              <1> criticalErrorSetup:
    81 00004B11 8825(C9C30300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    82 00004B17 48892D(E0C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
    83 00004B1E 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    84                              <1>     ;For now, fall through, but need much work to change it later! 
    85                              <1> 
    86                              <1> 
    87                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    88                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    89                              <1> ; to the critical error handler.
    90                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    91                              <1> ; and with Int44Bitfield set
    92                              <1> ;               AH = Critical Error Bitfield
    93                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    94                              <1> ;               Bit 6 - Reserved
    95                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    96                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    97                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    98                              <1> ;               Bits [2-1] = Affected Disk Error
    99                              <1> ;                     0 0   DOS area
   100                              <1> ;                     0 1   FAT area
   101                              <1> ;                     1 0   Directory area
   102                              <1> ;                     1 1   Data area
   103                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   104                              <1> ;               AL  = Failing drive number if AH[7] = 0
   105                              <1> ;               DIL = Error code for errorMsg
   106                              <1> ;               RSI = EA of Device Header for which device the error occured
   107                              <1> ;Return:
   108                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   109                              <1> ;                  = 1 - Retry the Operation    (Retry)
   110                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   111                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   112                              <1> ; Return response from int 44h in al
   113                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   114                              <1> ; This function will terminate the program if an abort was requested!
   115                              <1> ; This function also destroys RBP
   116 00004B24 803D(69C30300)01    <1>     cmp byte [critErrFlag], 1
   117 00004B2B 7204                <1>     jb .noIntError  ;If not 0, enter
   118 00004B2D B003                <1>     mov al, critFail    ;Else, return Fail always
   119 00004B2F EB4F                <1>     jmp short .exit     ;Don't translate fail to abort
   120                              <1> .noIntError:
   121 00004B31 FA                  <1>     cli ;Disable Interrupts
   122 00004B32 FE05(69C30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   123 00004B38 FE0D(6AC30300)      <1>     dec byte [inDOS]    ;Exiting DOS
   124 00004B3E 488925(C1C30300)    <1>     mov qword [xInt44hRSP], rsp
   125 00004B45 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   126 00004B4C 31ED                <1>     xor ebp, ebp    ;Always zeroed
   127 00004B4E CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   128 00004B50 488B25(C1C30300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   129 00004B57 C605(69C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   130 00004B5E FE05(6AC30300)      <1>     inc byte [inDOS]    ;Reenter DOS
   131 00004B64 FB                  <1>     sti ;Reenable Interrupts
   132                              <1>     ;Now we check that the response given was allowed, and translate if needed
   133                              <1> .checkResponse:
   134 00004B65 3C01                <1>     cmp al, critRetry
   135 00004B67 721F                <1>     jb .checkIgnore
   136 00004B69 7428                <1>     je .checkRetry
   137 00004B6B 3C03                <1>     cmp al, critFail
   138 00004B6D 752F                <1>     jne .abort   ;Must be abort
   139                              <1> .setFail:   ;Here is for fail
   140 00004B6F B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   141 00004B71 FE05(CBC30300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   142 00004B77 F605(C9C30300)08    <1>     test byte [Int44bitfld], critFailOK
   143 00004B7E 751E                <1>     jnz .abort  ;If fail not permitted, abort
   144                              <1> .exit:
   145 00004B80 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   146                              <1>     return
    18                              <2> %%_ret:
    19 00004B87 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   147                              <1> .checkIgnore:
   148 00004B88 F605(C9C30300)20    <1>     test byte [Int44bitfld], critIgnorOK
   149 00004B8F 75EF                <1>     jnz .exit
   150 00004B91 EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   151                              <1> .checkRetry:
   152 00004B93 F605(C9C30300)10    <1>     test byte [Int44bitfld], critRetryOK
   153 00004B9A 75E4                <1>     jnz .exit   
   154 00004B9C EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   155                              <1> .abort:
   156                              <1> ;Prepare to abort. We abort from within!
   157                              <1>     ;First check if the process is it's own parent.
   158                              <1>     ;If it is, we exit fail and return to the process
   159 00004B9E 488B05(81C30300)    <1>     mov rax, qword [currentPSP] ;Get the current psp
   160 00004BA5 53                  <1>     push rbx
   161 00004BA6 488B5822            <1>     mov rbx, qword [rax + psp.parentPtr]
   162 00004BAA 4839C3              <1>     cmp rbx, rax    ;Check if the process is it's own parent
   163 00004BAD 5B                  <1>     pop rbx
   164 00004BAE 7509                <1>     jne .kill   ;If the process is not it's own parent, we kill the process
   165 00004BB0 C605(F7C30300)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   166 00004BB7 EBB6                <1>     jmp short .setFail
   167                              <1> .kill:
   168 00004BB9 66893D(6DC30300)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   169 00004BC0 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   170 00004BC2 C605(60C60300)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   171 00004BC9 E9DFF7FFFF          <1>     jmp terminateClean.altEP
   172                              <1> 
   173                              <1> ctrlBreakHdlr:
   174 00004BCE B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   175 00004BD0 E8B2D8FFFF          <1>     call printCaretASCII
   176 00004BD5 E8DDD8FFFF          <1>     call printCRLF
   177                              <1>     ;Reset the console back to 0
   178 00004BDA C605(F5C30300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   179                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   180 00004BE1 FA                  <1> 	cli
   181 00004BE2 488B25(DCC30300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   182 00004BE9 E864080000          <1> 	call dosPopRegs ;Get user state back
   183 00004BEE 488925(89C30300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   184 00004BF5 F8                  <1>     clc
   185 00004BF6 CD43                <1>     int 43h ;Call critical error handler
   186 00004BF8 FA                  <1>     cli ;Clear interrupts again
   187 00004BF9 488905(95C30300)    <1>     mov qword [oldRAX], rax ;Save rax
   188 00004C00 9C                  <1>     pushfq  ;Get flags in rax
   189 00004C01 58                  <1>     pop rax 
   190 00004C02 483B25(89C30300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   191 00004C09 750C                <1>     jne .checkCF
   192                              <1> .returnToDOS:
   193 00004C0B 488B05(95C30300)    <1>     mov rax, qword [oldRAX]
   194 00004C12 E9E1060000          <1>     jmp functionDispatch    ;Goto int 41h
   195                              <1> .checkCF:
   196 00004C17 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   197 00004C1E A801                <1>     test al, 1  ;CF set?
   198 00004C20 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   199 00004C22 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   200 00004C27 C605(EDC30300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   201 00004C2E E9C5060000          <1>     jmp functionDispatch
   202                              <1> 
    37                                  %include "./Source/Kernel/dosPrim.asm"
    38                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    39                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    40                              <1> 
    41                              <1> dosDefCritErrHdlr:
    42                              <1> ;The DOS default critical error handler always returns FAIL
    43 00004C33 B003                <1>     mov al, critFail
    44 00004C35 48CF                <1>     iretq
    45                              <1> goDriverChar:
    46                              <1> ;Shortcut for Char requests, make a driver request
    47                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    48 00004C37 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    49                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    50                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    51                              <1> ;       rbx = Ptr to the request header for the driver call!
    52 00004C3B E854080000          <1>     call dosCrit2Enter
    53 00004C40 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    54 00004C43 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    55 00004C46 E853080000          <1>     call dosCrit2Exit
    56                              <1>     return
    18                              <2> %%_ret:
    19 00004C4B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    57                              <1> 
    58                              <1> setupPhysicalDiskRequest:
    59                              <1> ;Ensure that al has valid disk number
    60                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    61                              <1> ;If CF=NC, rbp = DPB ptr.
    62                              <1> ;If CF=CY, exit error
    63 00004C4C 84C0                <1>     test al, al
    64 00004C4E 723F                <1>     jc .diskError
    65 00004C50 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
    66 00004C56 7337                <1>     jae .diskError
    67 00004C58 50                  <1>     push rax
    68 00004C59 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    69 00004C5B E884040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    70 00004C60 58                  <1>     pop rax
    71 00004C61 7235                <1>     jc .error
    72 00004C63 8805(63C60300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    73 00004C69 488B2D(6CC60300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    74 00004C70 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    75 00004C78 750A                <1>     jnz .netError
    76 00004C7A 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    77 00004C7E E85F030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    78                              <1>     return
    18                              <2> %%_ret:
    19 00004C83 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    79                              <1> .netError:
    80 00004C84 66C705(6DC30300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    80 00004C8C 00                  <1>
    81 00004C8D EB09                <1>     jmp short .error
    82                              <1> .diskError:
    83 00004C8F 66C705(6DC30300)0F- <1>     mov word [errorExCde], errBadDrv
    83 00004C97 00                  <1>
    84                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    85 00004C98 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk
    86 00004C9F C605(6FC30300)07    <1>     mov byte [errorAction], eActRetUsr
    87 00004CA6 C605(70C30300)09    <1>     mov byte [errorClass], eClsBadFmt
    88 00004CAD F9                  <1>     stc
    89                              <1>     return
    18                              <2> %%_ret:
    19 00004CAE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    90                              <1> 
    91                              <1> setupAbsDiskEntry:
    92                              <1> ;Prepares to sets up the CDS and DPB for the request
    93 00004CAF FE05(6AC30300)      <1>     inc byte [inDOS]
    94 00004CB5 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    95 00004CB6 FC                  <1>     cld ;Set string ops in the right direction
    96 00004CB7 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    97 00004CBC 7223                <1>     jc .exit    ;Error exit
    98 00004CBE C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    99 00004CC5 56                  <1>     push rsi
   100 00004CC6 50                  <1>     push rax
   101 00004CC7 488D35(7FC40300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
   102 00004CCE 8806                <1>     mov byte [rsi], al  ;Construct a path
   103 00004CD0 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
   104 00004CD3 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
   105 00004CD7 F8                  <1>     clc
   106                              <1> ;++++++++++++++++++++++++++++
   107                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
   108                              <1> ;Entered with path in rsi (ah=03h)
   109 00004CD8 B800030000          <1>     mov eax, 0300h  
   110 00004CDD CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   111                              <1> ;++++++++++++++++++++++++++++
   112 00004CDF 58                  <1>     pop rax
   113 00004CE0 5E                  <1>     pop rsi
   114                              <1> .exit:
   115 00004CE1 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   116                              <1>     return
    18                              <2> %%_ret:
    19 00004CE3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   117                              <1> 
   118                              <1> absDiskWrite:       ;Int 46h
   119                              <1> ;al = Drive number
   120                              <1> ;rbx = Memory Buffer address to read from
   121                              <1> ;ecx = Number of sectors to write
   122                              <1> ;rdx = Start LBA to write to
   123 00004CE4 FA                  <1>     cli
   124 00004CE5 488925(DCC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   125 00004CEC 488D25(E0D80300)    <1>     lea rsp, DiskStakTop
   126 00004CF3 55                  <1>     push rbp
   127 00004CF4 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   128 00004CF5 E8B5FFFFFF          <1>     call setupAbsDiskEntry
   129 00004CFA 7252                <1>     jc absDiskExit
   130 00004CFC E8CE010000          <1>     call primReqWriteSetup
   131 00004D01 EB1D                <1>     jmp short absDiskReadWriteCommon
   132                              <1> absDiskRead:        ;Int 45h
   133                              <1> ;al = Drive number
   134                              <1> ;rbx = Memory Buffer address to write to
   135                              <1> ;ecx = Number of sectors to read
   136                              <1> ;rdx = Start LBA to read from
   137 00004D03 FA                  <1>     cli 
   138 00004D04 488925(DCC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   139 00004D0B 488D25(E0D80300)    <1>     lea rsp, DiskStakTop
   140 00004D12 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   141 00004D13 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   142 00004D14 E896FFFFFF          <1>     call setupAbsDiskEntry
   143 00004D19 7233                <1>     jc absDiskExit
   144 00004D1B E8BA010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   145                              <1> absDiskReadWriteCommon:
   146                              <1> ;Entered with the appropriate function number in ah
   147                              <1> ; and primary request header in rbx
   148 00004D20 E83B000000          <1>     call absDiskDriverCall
   149 00004D25 7427                <1>     jz absDiskExit  ;Skip error code checking
   150 00004D27 8A05(25C40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   151                              <1>     ;DOS uses the following pairs in a table
   152                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   153 00004D2D B480                <1>     mov ah, 80h ;Attachment failure
   154 00004D2F 3C0C                <1>     cmp al, 0Ch ;Gen error
   155 00004D31 741A                <1>     je .absExit
   156 00004D33 B440                <1>     mov ah, 40h ;Seek error
   157 00004D35 3C06                <1>     cmp al, 06h
   158 00004D37 7414                <1>     je .absExit
   159 00004D39 B408                <1>     mov ah, 08h ;Bad CRC
   160 00004D3B 3C04                <1>     cmp al, 04h
   161 00004D3D 740E                <1>     je .absExit
   162 00004D3F B404                <1>     mov ah, 04h ;Sector not found
   163 00004D41 3C08                <1>     cmp al, 08h
   164 00004D43 7408                <1>     je .absExit
   165 00004D45 30E4                <1>     xor ah, ah  ;Write Protect Violation
   166 00004D47 84C0                <1>     test al, al
   167 00004D49 7402                <1>     je .absExit
   168 00004D4B B402                <1>     mov ah, 02h ;Other Error
   169                              <1> .absExit:
   170 00004D4D F9                  <1>     stc
   171                              <1> absDiskExit:
   172 00004D4E 5B                  <1>     pop rbx
   173 00004D4F 5D                  <1>     pop rbp
   174 00004D50 FA                  <1>     cli
   175 00004D51 FE0D(6AC30300)      <1>     dec byte [inDOS]
   176 00004D57 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP]
   177 00004D5E FB                  <1>     sti ;Reenable interrupts
   178                              <1>     return ;Return from interrupt without popping flags!
    18                              <2> %%_ret:
    19 00004D5F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   179                              <1> absDiskDriverCall:
   180                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   181                              <1> ;       rbx = Request header address
   182                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   183                              <1> ;       eax = Status word from request
   184                              <1> ;       ecx = Number of sectors transferred
   185 00004D60 56                  <1>     push rsi
   186                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   187 00004D61 8B0D(38C40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   188                              <1>     ;Prepare for goDriver now
   189 00004D67 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   190 00004D6B E8CBFEFFFF          <1>     call goDriver   ;Make request
   191 00004D70 5E                  <1>     pop rsi
   192 00004D71 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   193 00004D77 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   194 00004D79 0FB705(25C40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   195 00004D80 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   196                              <1>     return
    18                              <2> %%_ret:
    19 00004D84 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> getDiskDPB:
   199                              <1> ;Gets the disk DPB if the Disk is valid
   200                              <1> ;Otherwise will return a pointer to the drive DPB
   201                              <1> ;Called with rdi pointing to the CDS
   202                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   203 00004D85 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   204 00004D89 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   205 00004D8C 8805(63C60300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   206 00004D92 E84B020000          <1>     call setWorkingDPB
   207 00004D97 57                  <1>     push rdi    ;Save the CDS ptr
   208 00004D98 E85A000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   209 00004D9D 5F                  <1>     pop rdi
   210 00004D9E 7233                <1>     jc .exitBad ;Preserve CF
   211 00004DA0 7530                <1>     jnz .exit
   212                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   213 00004DA2 8A0D(70C00300)      <1>     mov cl, byte [lastdrvNum]
   214 00004DA8 31C0                <1>     xor eax, eax
   215 00004DAA 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   216 00004DAD 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   217 00004DB1 488B3D(5DC00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   218                              <1> .checkCDS:
   219 00004DB8 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   220 00004DBC 7509                <1>     jne .next
   221 00004DBE 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   222 00004DC2 7403                <1>     jz .next    ;IF yes, skip it
   223 00004DC4 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   224                              <1> .next:
   225 00004DC7 4881C75B000000      <1>     add rdi, cds_size
   226 00004DCE FEC9                <1>     dec cl
   227 00004DD0 75E6                <1>     jnz .checkCDS
   228                              <1> .exit:
   229 00004DD2 F8                  <1>     clc
   230                              <1> .exitBad:
   231                              <1>     return
    18                              <2> %%_ret:
    19 00004DD3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   232                              <1> 
   233                              <1> checkIfMedCheck:
   234                              <1> ;Input: rsi = DPB for disk
   235 00004DD4 50                  <1>     push rax
   236 00004DD5 53                  <1>     push rbx
   237                              <1>     ;!!!!!!!!!!!!
   238                              <1>     ;For now just if its the same disk, be ok with it.
   239                              <1>     ;!!!!!!!!!!!!
   240                              <1>     ;Read the clock record. Cross Day Bndry will always force a new operation
   241                              <1>     ;Read the time fields directly.
   242 00004DD6 E828D5FFFF          <1>     call swapPrimaryHeader  ;Save the primary header temporarily
   243 00004DDB E875DBFFFF          <1>     call readDateTimeRecord ;Update the time
   244 00004DE0 F9                  <1>     stc ;Set CF, write backup to primary header
   245 00004DE1 E81DD5FFFF          <1>     call swapPrimaryHeader
   246                              <1> 
   247                              <1> 
   248 00004DE6 8A06                <1>     mov al, byte [rsi + dpb.bDriveNumber] 
   249 00004DE8 3805(ACD90300)      <1>     cmp byte [lastDiskNum], al
   250 00004DEE 7500                <1>     jnz .exit
   251                              <1> 
   252                              <1> .exit:
   253 00004DF0 5B                  <1>     pop rbx
   254 00004DF1 58                  <1>     pop rax
   255                              <1>     return
    18                              <2> %%_ret:
    19 00004DF2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   256                              <1> .okTime:
   257 00004DF3 31DB                <1>     xor ebx, ebx
   258 00004DF5 EBF9                <1>     jmp short .exit
   259                              <1> ensureDiskValid:
   260                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   261                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   262                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   263                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   264                              <1> .medChk:
   265 00004DF7 E827010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   266                              <1> ;Return in rbx the req hdr address
   267 00004DFC 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   268 00004E00 E836FEFFFF          <1>     call goDriver   ;Request!
   269 00004E05 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   270 00004E09 F7C700800000        <1>     test edi, drvErrStatus
   271 00004E0F 756A                <1>     jnz .diskDrvCritErrMedChk
   272                              <1> .medChkIgnore:
   273 00004E11 8A05(63C60300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   274 00004E17 30E4                <1>     xor ah, ah
   275 00004E19 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   276 00004E1C 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   277 00004E1F 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   278 00004E21 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   279 00004E23 E822BBFFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   280 00004E28 F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   281 00004E29 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   282                              <1>     ;ZF=NZ from test for dirty buffers
   283                              <1> .exit:
   284                              <1>     return
    18                              <2> %%_ret:
    19 00004E2B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   285                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   286 00004E2C C605(E8D80300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   287 00004E33 E836BBFFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   288                              <1>     ;Get a buffer to read BPB into in rdi
   289 00004E38 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   290 00004E3A E802BDFFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   291 00004E3F 72EA                <1>     jc .exit    ;Immediately exit with the carry flag set
   292 00004E41 4889DF              <1>     mov rdi, rbx
   293                              <1> .repeatEP:
   294 00004E44 E806010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   295 00004E49 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   296 00004E4D E8E9FDFFFF          <1>     call goDriver   ;Request!
   297 00004E52 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   298 00004E56 A900800000          <1>     test eax, drvErrStatus
   299 00004E5B 755C                <1>     jnz .diskDrvCritErrBPB
   300                              <1>     ;Now rebuild the dpb fields for this drive
   301 00004E5D 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   302 00004E61 E814090000          <1>     call createDPB
   303                              <1>     ;Adjust the buffer header information
   304 00004E66 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   305 00004E69 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   306 00004E6C 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   307 00004E6F 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   308 00004E72 30E4                <1>     xor ah, ah
   309 00004E74 8825(E8D80300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   310                              <1>     return
    18                              <2> %%_ret:
    19 00004E7A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   311                              <1> .diskDrvCritErrMedChk:
   312                              <1> ;Critical Errors fall through here
   313                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   314 00004E7B 48893D(71C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   315 00004E82 48892D(E0C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   316 00004E89 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   317 00004E8C B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   318 00004E8E 8825(C9C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   319 00004E94 E88BFCFFFF          <1>     call criticalDOSError
   320 00004E99 488B3D(71C30300)    <1>     mov rdi, qword [xInt44RDI]
   321 00004EA0 488B2D(E0C60300)    <1>     mov rbp, qword [tmpDPBPtr]
   322 00004EA7 3C01                <1>     cmp al, critRetry
   323 00004EA9 0F8448FFFFFF        <1>     je .medChk
   324 00004EAF 3C00                <1>     cmp al, critIgnore
   325 00004EB1 0F845AFFFFFF        <1>     je .medChkIgnore
   326 00004EB7 F9                  <1>     stc ;Set error flag to indicate fail
   327                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00004EB8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   328                              <1> 
   329                              <1> .diskDrvCritErrBPB:
   330                              <1>     ;eax has status word, rbp has dpb ptr
   331                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   332 00004EB9 C605(C9C30300)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   333 00004EC0 E8F6FBFFFF          <1>     call diskDevErr
   334 00004EC5 3C01                <1>     cmp al, critRetry
   335 00004EC7 0F8477FFFFFF        <1>     je .repeatEP
   336                              <1>     ;Else we fail (Ignore=Fail here)
   337 00004ECD F9                  <1>     stc ;Set error flag to indicate fail
   338                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00004ECE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   339                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   340                              <1> ;           Primitive Driver Requests
   341                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   342                              <1> ;First are Disk requests, then Char device requests
   343                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   344                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   345                              <1> 
   346                              <1> primReqWriteSetup:
   347 00004ECF 50                  <1>     push rax
   348 00004ED0 B408                <1>     mov ah, drvWRITE    ;Command code
   349 00004ED2 0225(32C30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   350 00004ED8 EB03                <1>     jmp short primReqRWCommon
   351                              <1> primReqReadSetup:
   352 00004EDA 50                  <1>     push rax
   353 00004EDB B404                <1>     mov ah, drvREAD
   354                              <1> primReqRWCommon:
   355                              <1> ;Sets up the IO request packet with:
   356                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   357                              <1> ; rbx = Data storage buffer ptr
   358                              <1> ; ecx = Number of sectors to transfer
   359                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   360                              <1> ; ~~~~ Set by entry function ~~~~ 
   361                              <1> ; ah = Command code
   362                              <1> ; All regs preserved EXCEPT rbx.
   363                              <1> ; Return: rbx = Transfer Address
   364 00004EDD 48891D(30C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   365 00004EE4 890D(38C40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   366 00004EEA C605(22C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   367 00004EF1 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   368 00004EF6 8905(23C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   369 00004EFC 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   370 00004EFF 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   371                              <1>     ;Disk operations only here!
   372 00004F01 488915(3CC40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   373 00004F08 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   374 00004F0B 8805(2FC40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   375 00004F11 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   376 00004F14 8805(23C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   377                              <1> primReqCommonExit:
   378                              <1> ;Returns in rbx the primary request header as these functions
   379                              <1> ; setup the request in the primary request header space
   380 00004F1A 58                  <1>     pop rax
   381 00004F1B 488D1D(22C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   382                              <1>     return
    18                              <2> %%_ret:
    19 00004F22 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> primReqMedCheckSetup:
   385                              <1> ;Prepare the diskIO packet for mediacheck
   386                              <1> ;rbp has DPB pointer for device to check media on
   387 00004F23 50                  <1>     push rax
   388 00004F24 C605(22C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   389 00004F2B 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   390 00004F2E 8805(2FC40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   391 00004F34 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   392 00004F37 8805(23C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   393 00004F3D C605(24C40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   394 00004F44 66C705(25C40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   394 00004F4C 00                  <1>
   395 00004F4D EBCB                <1>     jmp short primReqCommonExit
   396                              <1> 
   397                              <1> primReqGetBPBSetup:
   398                              <1> ;rbp has DPB pointer for device
   399                              <1> ;rdi has sector buffer header pointer for transfer
   400 00004F4F 50                  <1>     push rax
   401 00004F50 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   402 00004F54 48893D(30C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   403 00004F5B C605(22C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   404 00004F62 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   405 00004F65 8805(2FC40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   406 00004F6B 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   407 00004F6E 8805(23C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   408 00004F74 C605(24C40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   409 00004F7B 66C705(25C40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   409 00004F83 00                  <1>
   410 00004F84 EB94                <1>     jmp short primReqCommonExit
   411                              <1> 
   412                              <1> primReqOpenSetup:
   413                              <1> ;al = unit number if a disk device. Undefined otherwise
   414 00004F86 50                  <1>     push rax
   415 00004F87 B40D                <1>     mov ah, drvOPEN
   416                              <1> primReqCloseSetup:
   417                              <1> ;al = unit number if a disk device. Undefined otherwise
   418 00004F89 50                  <1>     push rax
   419 00004F8A B40E                <1>     mov ah, drvCLOSE
   420                              <1> primReqOCcommon:
   421 00004F8C C605(22C40300)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   422 00004F93 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   423 00004F94 8905(23C40300)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   424                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   425 00004F9A E97BFFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   426                              <1> 
   427                              <1> secdReqCharIOReq:
   428                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   429                              <1> ;Input:
   430                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   431                              <1> ; ecx = Length of buffer
   432                              <1> ; rdi = Buffer pointer
   433                              <1> ;Output: 
   434                              <1> ; rbx = Transfer Address 
   435 00004F9F 488D1D(F8C30300)    <1>     lea rbx, secdReqHdr
   436 00004FA6 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   437 00004FA9 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   438 00004FAC 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   439 00004FB2 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   440 00004FB6 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   441                              <1>     return
    18                              <2> %%_ret:
    19 00004FB9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   442                              <1> ;If the device which will process this request is a disk device
   443                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   444                              <1> ;Then we will read the appropriate byte from that buffer to the 
   445                              <1> ; singleIOByt buffer.
   446                              <1> ;Such a request will require additional setup with the following fields:
   447                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    38                                  %include "./Source/Kernel/dosUtils.asm"
    39                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    40                              <1> 
    41                              <1> readFSRegister:
    42                              <1> ;Output: rax = Value of fs
    43 00004FBA 51                  <1>     push rcx
    44 00004FBB 52                  <1>     push rdx
    45 00004FBC B9000100C0          <1>     mov ecx, 0C0000100h
    46 00004FC1 0F32                <1>     rdmsr   ;Get fs in edx:eax
    47 00004FC3 48C1E220            <1>     shl rdx, 20h
    48 00004FC7 4809D0              <1>     or rax, rdx
    49 00004FCA 5A                  <1>     pop rdx
    50 00004FCB 59                  <1>     pop rcx
    51                              <1>     return
    18                              <2> %%_ret:
    19 00004FCC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    52                              <1> 
    53                              <1> writeFSRegister:
    54                              <1> ;Input: rax = Value to write to fs
    55 00004FCD 51                  <1>     push rcx
    56 00004FCE 52                  <1>     push rdx
    57 00004FCF 4889C2              <1>     mov rdx, rax    ;Split rax to edx:eax
    58 00004FD2 48C1EA20            <1>     shr rdx, 20h    ;Shift the upper dword low
    59 00004FD6 09C0                <1>     or eax, eax     ;Clear upper dword
    60 00004FD8 B9000100C0          <1>     mov ecx, 0C0000100h
    61 00004FDD 0F30                <1>     wrmsr
    62 00004FDF 5A                  <1>     pop rdx
    63 00004FE0 59                  <1>     pop rcx
    64                              <1>     return
    18                              <2> %%_ret:
    19 00004FE1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    65                              <1> 
    66                              <1> ;Basic Drive related Utilities
    67                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    68                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    69                              <1> ; that gets set up)
    70                              <1> 
    71                              <1> setWorkingDPB:
    72                              <1> ;Gets dpb in rbp and saves to workingDPB
    73 00004FE2 48892D(64C60300)    <1>     mov qword [workingDPB], rbp
    74                              <1>     return
    18                              <2> %%_ret:
    19 00004FE9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    75                              <1> 
    76                              <1> testCDSNet:
    77                              <1> ;Checks if the workingCDS is a redirector drive
    78                              <1> ;Returns: CF=NC => Not net
    79                              <1> ;         CF=CY => Network redirector
    80                              <1> ;         ZF=ZE => Net without CDS (\\ paths only)
    81                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    82                              <1> ;         rdi = workingCDS ptr
    83 00004FEA 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
    84 00004FF1 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    85 00004FF8 7409                <1>     je .net
    86 00004FFA 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    87 00005000 7501                <1>     jnz .net ;Net with CDS
    88                              <1>     return  ;CF=NC => Not net
    18                              <2> %%_ret:
    19 00005002 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    89                              <1> .net:
    90 00005003 F9                  <1>     stc ;Set Net bit
    91                              <1>     return
    18                              <2> %%_ret:
    19 00005004 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    92                              <1> 
    93                              <1> getDiskData:
    94                              <1> ;This function returns:
    95                              <1> ;al = sectors per cluster
    96                              <1> ;ah = media ID byte
    97                              <1> ;ebx = total clusters
    98                              <1> ;cx = bytes per sector
    99                              <1> ;edx = number of available clusters
   100                              <1> ;
   101                              <1> ;If CF=CY on exit, al contains the error code
   102 00005005 E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
   103 0000500A 7308                <1>     jnc .physical
   104                              <1>     ;Beep a redir request out
   105 0000500C B80C110000          <1>     mov eax, 110Ch 
   106 00005011 CD4F                <1>     int 4Fh
   107                              <1>     return
    18                              <2> %%_ret:
    19 00005013 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   108                              <1> .physical:
   109                              <1> ;Now we must lock the structures
   110 00005014 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk
   111 0000501B E860040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   112 00005020 E860FDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
   113 00005025 721C                <1>     jc .exit
   114 00005027 E811BDFFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
   115 0000502C 7215                <1>     jc .exit
   116 0000502E 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   117 00005031 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   118 00005033 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
   119 00005036 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
   120 00005039 FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
   121 0000503B 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
   122 0000503F 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
   123 00005042 F8                  <1>     clc
   124                              <1> .exit:
   125 00005043 E842040000          <1>     call dosCrit1Exit
   126                              <1>     return
    18                              <2> %%_ret:
    19 00005048 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
   129                              <1> ;Input: al = Interrupt number
   130                              <1> ;Output: rbx = Interrupt Vector
   131 00005049 50                  <1>     push rax    ;Preserve rax, segment selector returned by call
   132 0000504A 52                  <1>     push rdx    ;Preserve rdx, Attribute Word returned by call
   133 0000504B 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   134 0000504D B807F00000          <1>     mov eax, 0F007h
   135 00005052 CD35                <1>     int 35h
   136 00005054 5A                  <1>     pop rdx
   137 00005055 58                  <1>     pop rax
   138                              <1>     return
    18                              <2> %%_ret:
    19 00005056 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   139                              <1> 
   140                              <1> getUserRegs:   ;Int 4Fh AX=1218h
   141                              <1> ;Returns ptr to user regs in rsi
   142 00005057 488B35(DCC30300)    <1>     mov rsi, qword [oldRSP]
   143                              <1>     return
    18                              <2> %%_ret:
    19 0000505E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> 
   145                              <1> walkDPBchain:
   146                              <1> ;Called with al = 0 based drive number
   147                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
   148 0000505F 488B35(3BC00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
   149                              <1> .walk:
   150 00005066 4881FEFFFFFFFF      <1>     cmp rsi, -1
   151 0000506D 740A                <1>     je .exitBad
   152 0000506F 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   153 00005071 7407                <1>     je .exit    ;Drive found
   154 00005073 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   155 00005077 EBED                <1>     jmp short .walk
   156                              <1> .exitBad:
   157 00005079 F9                  <1>     stc
   158                              <1> .exit:
   159                              <1>     return
    18                              <2> %%_ret:
    19 0000507A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   160                              <1> setDrive:   
   161                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
   162                              <1> ;Input: al = 1-based drive number
   163                              <1> ;Output: al = 0-based drive number
   164                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
   165                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
   166                              <1> ;            set.
   167 0000507B E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   168 00005080 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   169 00005082 56                  <1>     push rsi
   170 00005083 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   171 0000508A 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   172 00005090 5E                  <1>     pop rsi
   173 00005091 7401                <1>     jz .exit
   174 00005093 F9                  <1>     stc
   175                              <1> .exit:
   176                              <1>     return
    18                              <2> %%_ret:
    19 00005094 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   177                              <1> 
   178                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   179                              <1> ;Allows a redirector or subst/join to build a CDS
   180                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   181                              <1> ; volumes, that are made at system boot.
   182                              <1> ;Input: al = Drive Letter for drive
   183                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   184                              <1> ;Output: rdi = newly filled in workingCDS
   185                              <1> ;CF=NC => CDS valid and has a DPB
   186                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   187 00005095 50                  <1>     push rax
   188 00005096 2C40                <1>     sub al, "A"-1
   189 00005098 3A05(6FC00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   190 0000509E 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   191 000050A5 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   192 000050AB 58                  <1>     pop rax
   193 000050AC 7235                <1>     jb .exit    ;Exit with CF=CY
   194 000050AE 50                  <1>     push rax
   195 000050AF 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   196 000050B4 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   197 000050B6 58                  <1>     pop rax
   198 000050B7 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   199 000050BD C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   200 000050C4 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   201 000050CC 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   202                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   203 000050D2 50                  <1>     push rax
   204 000050D3 56                  <1>     push rsi
   205 000050D4 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   206 000050D6 E884FFFFFF          <1>     call walkDPBchain
   207 000050DB 7204                <1>     jb .skipSettingDPB
   208 000050DD 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   209                              <1> .skipSettingDPB:
   210 000050E1 5E                  <1>     pop rsi
   211 000050E2 58                  <1>     pop rax
   212                              <1> .exit:
   213                              <1>     return
    18                              <2> %%_ret:
    19 000050E3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   214                              <1> 
   215                              <1> getCDS:     ;Int 4Fh AX=1219h
   216                              <1> ;Gets the device DPB and saves it in the DOS variable
   217                              <1> ;This can be called to get CDS for network drives too!
   218                              <1> ;Input: al = 1 based drive number
   219                              <1> ;Sets workingCDS var with the CDS for the device. 
   220                              <1> ;   If device on a network, sets CF
   221                              <1> ;Returns al with 0-based drive number
   222 000050E4 84C0                <1>     test al, al
   223 000050E6 7508                <1>     jnz .skip
   224 000050E8 8A05(93C30300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   225 000050EE FEC0                <1>     inc al
   226                              <1> .skip:
   227 000050F0 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   228 000050F2 56                  <1>     push rsi
   229 000050F3 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   230 000050FA F605(5CC60300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   231 00005101 7423                <1>     jz .physDrive
   232                              <1>     ;Invokation via 21/5D00
   233 00005103 50                  <1>     push rax
   234 00005104 57                  <1>     push rdi
   235 00005105 488D3D(FBC50300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   236 0000510C 48893D(6CC60300)    <1>     mov qword [workingCDS], rdi ;Make it current
   237 00005113 0441                <1>     add al, "A" ;Convert to a drive letter
   238 00005115 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   239 0000511A 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   240 00005120 5F                  <1>     pop rdi
   241 00005121 58                  <1>     pop rax
   242 00005122 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   243 00005124 EB17                <1>     jmp short .exitOk   ;All oki
   244                              <1> .physDrive:
   245 00005126 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   246 0000512B 7208                <1>     jc .exitBad
   247 0000512D 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   248 00005133 7508                <1>     jnz .exitOk ;Exit with flag cleared
   249                              <1>     ;Else Return to unknown error locus
   250                              <1> .exitBad:
   251 00005135 C605(6CC30300)01    <1>     mov byte [errorLocus], eLocUnk
   252                              <1> .exitBad1:
   253 0000513C F9                  <1>     stc
   254                              <1> .exitOk:
   255 0000513D 5E                  <1>     pop rsi
   256                              <1>     return
    18                              <2> %%_ret:
    19 0000513E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   259                              <1>     ;Gets the CDS for the current drive in al
   260                              <1>     ;Input: al = Drive number, 0 = A ...
   261                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   262                              <1>     ;        CF=CY => al not valid
   263 0000513F 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
   264 00005145 7202                <1>     jb .ctn
   265 00005147 F9                  <1>     stc 
   266                              <1>     return
    18                              <2> %%_ret:
    19 00005148 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   267                              <1> .ctn:
   268 00005149 50                  <1>     push rax
   269 0000514A 52                  <1>     push rdx
   270 0000514B 0FB6C0              <1>     movzx eax, al
   271 0000514E 48BE5B000000000000- <1>     mov rsi, cds_size
   271 00005157 00                  <1>
   272 00005158 31D2                <1>     xor edx, edx
   273 0000515A F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   274 0000515C 488B35(5DC00300)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   275 00005163 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   276 00005166 488935(6CC60300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   277 0000516D 5A                  <1>     pop rdx
   278 0000516E 58                  <1>     pop rax
   279 0000516F F8                  <1>     clc
   280                              <1>     return
    18                              <2> %%_ret:
    19 00005170 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> 
   283                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   284                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   285                              <1> ;Input: AL = Char to normalise.
   286                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   287                              <1> ;If path separator, set ZF=ZE
   288 00005171 3C5C                <1>     cmp al, "\"
   289 00005173 7406                <1>     je .exit
   290 00005175 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   291 00005177 7502                <1>     jne .exit
   292 00005179 B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   293                              <1> .exit:
   294                              <1>     return
    18                              <2> %%_ret:
    19 0000517B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   295                              <1> 
   296                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   297                              <1> ;Convert a lowercase char to uppercase
   298                              <1> ; Leave alone uppercase chars and invalid chars
   299                              <1> ;Input: al = Char to convert to uppercase
   300                              <1> ;Output: al = Processed char
   301 0000517C 53                  <1>     push rbx
   302 0000517D 3C61                <1>     cmp al, "a"
   303 0000517F 7214                <1>     jb .exit
   304 00005181 3C7A                <1>     cmp al, "z"
   305 00005183 7702                <1>     ja .checkExt
   306 00005185 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   307                              <1> .checkExt:
   308 00005187 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   309 00005189 720A                <1>     jb .exit
   310 0000518B 2C80                <1>     sub al, 80h ;Turn into table offset
   311 0000518D 488B1D99AEFFFF      <1>     mov rbx, qword [ctryTbl.mapaddr]    ;Get ptr to extAsciiTable
   312 00005194 D7                  <1>     xlatb   ;Get converted extended byte into al
   313                              <1> .exit:
   314 00005195 50                  <1>     push rax    ;Save al temporarily
   315 00005196 488D1DB3B0FFFF      <1>     lea rbx, extAsciiSig
   316 0000519D D7                  <1>     xlatb   ;Get the signature in al
   317 0000519E A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   318 000051A0 58                  <1>     pop rax
   319 000051A1 5B                  <1>     pop rbx
   320                              <1>     return
    18                              <2> %%_ret:
    19 000051A2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   321                              <1> 
   322                              <1> strlen: ;Int 4Fh, AX=1212h
   323                              <1> ;Gets the length of a ASCIIZ string
   324                              <1> ;Input: rdi = Source buffer
   325                              <1> ;Output: ecx = Length of string
   326 000051A3 50                  <1>     push rax
   327 000051A4 57                  <1>     push rdi
   328 000051A5 30C0                <1>     xor al, al
   329 000051A7 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   330 000051A9 FFC9                <1>     dec ecx ;rcx = -1
   331 000051AB F2AE                <1>     repne scasb
   332 000051AD F7D1                <1>     not ecx
   333 000051AF 5F                  <1>     pop rdi
   334 000051B0 58                  <1>     pop rax
   335                              <1>     return
    18                              <2> %%_ret:
    19 000051B1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   336                              <1> 
   337                              <1> strcpy:
   338                              <1> ;Copies a null terminated string from rsi to rdi
   339 000051B2 AC                  <1>     lodsb
   340 000051B3 AA                  <1>     stosb
   341 000051B4 84C0                <1>     test al, al
   342                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000051B6 74F9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   343 000051B8 EBF8                <1>     jmp short strcpy
   344                              <1> 
   345                              <1> strcmp:
   346                              <1> ;Compares two ASCIIZ strings for equality.
   347                              <1> ;Input: rsi = First string
   348                              <1> ;       rdi = Second string
   349                              <1> ;       ecx = Number of bytes to compare
   350                              <1> ;Output: ZF=ZE => Equal
   351                              <1> ;        ZF=NZ => Not equal
   352 000051BA 56                  <1>     push rsi
   353 000051BB 57                  <1>     push rdi
   354 000051BC F3A6                <1>     repe cmpsb
   355 000051BE 5F                  <1>     pop rdi
   356 000051BF 5E                  <1>     pop rsi
   357                              <1>     return
    18                              <2> %%_ret:
    19 000051C0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   358                              <1> 
   359                              <1> 
   360                              <1> normaliseFileName:  ;Int 4Fh, AX=1211h
   361                              <1> ;Converts lowercase to uppercase and / to "\"
   362                              <1> ;Input: rsi = Source buffer
   363                              <1> ;       rdi = Buffer to place normalised path
   364 000051C1 50                  <1>     push rax
   365 000051C2 56                  <1>     push rsi
   366 000051C3 57                  <1>     push rdi
   367                              <1> .scan:
   368 000051C4 AC                  <1>     lodsb
   369 000051C5 84C0                <1>     test al, al
   370 000051C7 740D                <1>     jz .exit
   371 000051C9 E8A3FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   372 000051CE E8A9FFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   373 000051D3 AA                  <1>     stosb
   374 000051D4 EBEE                <1>     jmp short .scan
   375                              <1> .exit:
   376 000051D6 5F                  <1>     pop rdi
   377 000051D7 5E                  <1>     pop rsi
   378 000051D8 58                  <1>     pop rax
   379                              <1>     return
    18                              <2> %%_ret:
    19 000051D9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   380                              <1> 
   381                              <1> compareFileNames:   ;Int 4Fh, AX=121Eh
   382                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   383                              <1> ;Input: rsi = One ASCIIZ pathname
   384                              <1> ;       rdi = Second ASCIIZ pathname
   385                              <1> ;Return:
   386                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   387 000051DA 50                  <1>     push rax
   388 000051DB 56                  <1>     push rsi
   389 000051DC 57                  <1>     push rdi
   390                              <1> .scan:
   391 000051DD 8A06                <1>     mov al, byte [rsi]
   392 000051DF 84C0                <1>     test al, al
   393 000051E1 7424                <1>     jz .endOfString
   394 000051E3 8A27                <1>     mov ah, byte [rdi]
   395 000051E5 E887FFFFFF          <1>     call swapPathSeparator  ;Convert al to \ if pathsep
   396 000051EA 7410                <1>     jz .pathseps
   397 000051EC 660D2020            <1>     or ax, 2020h    ;Convert both chars to lower case
   398 000051F0 38E0                <1>     cmp al, ah
   399 000051F2 7515                <1>     jnz .exit
   400                              <1> .nextChar:
   401 000051F4 48FFC6              <1>     inc rsi
   402 000051F7 48FFC7              <1>     inc rdi
   403 000051FA EBE1                <1>     jmp short .scan
   404                              <1> .pathseps:
   405 000051FC 86E0                <1>     xchg ah, al
   406 000051FE E86EFFFFFF          <1>     call swapPathSeparator  ;If ah is not a pathsep, then exit ZF=NZ
   407 00005203 7504                <1>     jnz .exit
   408 00005205 EBED                <1>     jmp short .nextChar ;Else get the next chars
   409                              <1> .endOfString:
   410 00005207 84E4                <1>     test ah, ah ;If ah is also the end of the path, then ZF=ZE else ZF=NZ
   411                              <1> .exit:
   412 00005209 5F                  <1>     pop rdi
   413 0000520A 5E                  <1>     pop rsi
   414 0000520B 58                  <1>     pop rax
   415                              <1>     return
    18                              <2> %%_ret:
    19 0000520C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   416                              <1> checkPathspecOK:
   417                              <1> ;Input:
   418                              <1> ;rsi -> points to a path to verify if it is ok.
   419                              <1> ;Output:
   420                              <1> ;CF=NC => The path is totally clean and ok to use.
   421                              <1> ;CF=CY => the path is malformed and may be used ONLY if ZF=ZE. 
   422                              <1> ; If ZF=ZE then the only bad char in the path is followed by a ASCII null
   423                              <1> ;Here we check for OK chars only. Hence \ / ? * and . are considered acceptable
   424                              <1> 
   425                              <1> ;Full paths may start with \\<15-char machine name>\...
   426                              <1> ; or <Drive Letter>:\...
   427                              <1> ;CWD relative paths start with <Drive Letter>:...
   428                              <1> ;Current Drive Root Relative paths may start with \...
   429                              <1> ;Current Drive CWD relative paths start with any other char
   430                              <1> ;Server calls are checked separately. 
   431                              <1> ;Must be X:\ and cannot have . or .. entries or any "G L O B A L" chars
   432                              <1> 
   433                              <1> ;We accept lc and uc characters in this check function.
   434 0000520D 50                  <1>     push rax
   435 0000520E 51                  <1>     push rcx
   436 0000520F 56                  <1>     push rsi
   437 00005210 57                  <1>     push rdi
   438                              <1>     ;First we verify that the first two chars are ok (either X: or \\ or chars)
   439 00005211 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   440 00005214 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
   441 0000521B 7539                <1>     jnz .serverCallCheck
   442 0000521D 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   443 00005221 7417                <1>     je .okToScan
   444 00005223 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   445 00005227 7411                <1>     je .okToScan
   446 00005229 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   447 0000522C 7402                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   448                              <1>     ;Is this a current drive CWD relative or current drive root relative path?
   449                              <1>     ;If so the pathspec is not different to normal, goto scanLoop
   450 0000522E EB11                <1>     jmp short .scanLoop
   451                              <1> .diskPath:
   452                              <1> ;Disk Letter must be A-Z (or a-z)
   453 00005230 0C20                <1>     or al, 20h  ;Force an UC char to LC
   454 00005232 3C61                <1>     cmp al, "a"
   455 00005234 7217                <1>     jb .badExit
   456 00005236 3C7A                <1>     cmp al, "z"
   457 00005238 7713                <1>     ja .badExit
   458                              <1> .okToScan:
   459 0000523A 4881C602000000      <1>     add rsi, 2  ;Skip first two chars now
   460                              <1> .scanLoop:
   461 00005241 AC                  <1>     lodsb   ;Get char, inc rsi
   462 00005242 84C0                <1>     test al, al  ;Is al=0, i.e string terminator?
   463 00005244 740B                <1>     je .exit    ;Clear CF if al = 0
   464 00005246 E851000000          <1>     call checkCharOk    ;Check if char ok
   465 0000524B 75F4                <1>     jnz .scanLoop    ;If it is not, fall thru
   466                              <1> .badExit:
   467                              <1> ;Before we bad exit, we check if the next char is ascii null.
   468                              <1> ;If it is we set ZF
   469 0000524D AC                  <1>     lodsb
   470 0000524E 84C0                <1>     test al, al ;Set ZF if only last char is malformed, else clear ZF
   471                              <1> .servBadExit:   ;Server paths must be null terminated
   472 00005250 F9                  <1>     stc ;And set CF to indicate bad path
   473                              <1> .exit:
   474 00005251 5F                  <1>     pop rdi
   475 00005252 5E                  <1>     pop rsi
   476 00005253 59                  <1>     pop rcx
   477 00005254 58                  <1>     pop rax
   478                              <1>     return
    18                              <2> %%_ret:
    19 00005255 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   479                              <1> .serverCallCheck:
   480                              <1> ;Server calls are a bit stricter, . and .. are forbidden but dir and filenames
   481                              <1> ; may contain an extension separated by a .
   482 00005256 80FC3A              <1>     cmp ah, ":"
   483 00005259 75F5                <1>     jne .servBadExit
   484 0000525B 0C20                <1>     or al, 20h  ;Force an UC char to LC
   485 0000525D 3C61                <1>     cmp al, "a"
   486 0000525F 72EF                <1>     jb .servBadExit
   487 00005261 3C7A                <1>     cmp al, "z"
   488 00005263 77EB                <1>     ja .servBadExit
   489                              <1>     ;If a dot is found, must check if the . is within 4 chars of a pathsep or 0
   490                              <1> .servScanLoop:
   491 00005265 AC                  <1>     lodsb
   492 00005266 84C0                <1>     test al, al
   493 00005268 74E7                <1>     je .exit
   494 0000526A 3C2E                <1>     cmp al, "." ;Handle dots separately
   495 0000526C 7409                <1>     je .secondDotCheck
   496 0000526E E829000000          <1>     call checkCharOk
   497 00005273 75F0                <1>     jnz .servScanLoop
   498 00005275 EBEE                <1>     jmp short .servScanLoop
   499                              <1> .secondDotCheck:
   500 00005277 AC                  <1>     lodsb
   501 00005278 84C0                <1>     test al, al ;cannot be a dot followed by a null
   502 0000527A 74D4                <1>     jz .servBadExit
   503 0000527C 3C2E                <1>     cmp al, "." ;Was this a .. entry?
   504 0000527E 74D0                <1>     je .servBadExit
   505 00005280 E8ECFEFFFF          <1>     call swapPathSeparator  ;Was second char a pathsep? Not allowed.
   506 00005285 74C9                <1>     jz .servBadExit ;... else check if the char was valid
   507 00005287 EBDC                <1>     jmp short .servScanLoop ;Else keep searching.
   508                              <1> scanPathWC:
   509                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   510                              <1> ; even in the final path componant.
   511                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   512                              <1> ;Output: CF=NC => No wildcards present
   513                              <1> ;        CF=CY => Wildcards found
   514 00005289 50                  <1>     push rax
   515 0000528A 56                  <1>     push rsi
   516                              <1> .scan:
   517 0000528B AC                  <1>     lodsb
   518 0000528C 84C0                <1>     test al, al
   519 0000528E 7409                <1>     jz .exit
   520 00005290 3C3F                <1>     cmp al, "?"
   521 00005292 7404                <1>     je .wcFnd
   522 00005294 3C2A                <1>     cmp al, "*"
   523 00005296 75F3                <1>     jne .scan
   524                              <1> .wcFnd:
   525 00005298 F9                  <1>     stc
   526                              <1> .exit:
   527 00005299 5E                  <1>     pop rsi
   528 0000529A 58                  <1>     pop rax
   529                              <1>     return
    18                              <2> %%_ret:
    19 0000529B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> 
   532                              <1> checkCharOk:
   533                              <1> ;Same as checkCharValid except DOES not return error on * ? \ / .
   534                              <1> ;If ZF=ZE => Invalid Char
   535                              <1> ;If ZF=NZ => Ok Char
   536 0000529C 3C2E                <1>     cmp al, "."
   537 0000529E 740F                <1>     je .exitOk
   538 000052A0 3C2A                <1>     cmp al, "*"
   539 000052A2 740B                <1>     je .exitOk
   540 000052A4 3C3F                <1>     cmp al, "?"
   541 000052A6 7407                <1>     je .exitOk
   542 000052A8 E8C4FEFFFF          <1>     call swapPathSeparator  ;check if al is a path separator
   543 000052AD 7505                <1>     jnz checkCharValid
   544                              <1> .exitOk:
   545 000052AF 50                  <1>     push rax
   546 000052B0 0C01                <1>     or al, 1    ;Always clears the ZF
   547 000052B2 58                  <1>     pop rax
   548                              <1>     return
    18                              <2> %%_ret:
    19 000052B3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   549                              <1> checkCharValid:
   550                              <1> ;If ZF=ZE => Invalid Char
   551                              <1> ;If ZF=NZ => Valid Char
   552 000052B4 51                  <1>     push rcx
   553 000052B5 57                  <1>     push rdi
   554 000052B6 B930000000          <1>     mov ecx, badDirNameCharL    ;Get table length
   555 000052BB 488D3DDEAEFFFF      <1>     lea rdi, badDirNameChar ;Point to bad char table
   556 000052C2 F2AE                <1>     repne scasb ;Scan. Stop when equal
   557 000052C4 5F                  <1>     pop rdi
   558 000052C5 59                  <1>     pop rcx
   559                              <1>     return
    18                              <2> %%_ret:
    19 000052C6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> compareFarPointers: ;Int 4Fh, AX = 1214h
   562                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   563                              <1> ;Input: rsi = One pointer
   564                              <1> ;       rdi = Second pointer
   565                              <1> ;Output: ZF=ZE if equal
   566                              <1> ;        ZF=NZ if not
   567 000052C7 4839FE              <1>     cmp rsi, rdi
   568                              <1>     return
    18                              <2> %%_ret:
    19 000052CA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   569                              <1> 
   570                              <1> checkPathNet:
   571                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   572                              <1> ;Output: ZF=ZE => Path is a net path
   573                              <1> ;        ZF=NZ => Path is not a net path
   574 000052CB 50                  <1>     push rax
   575 000052CC 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   576 000052CF E89DFEFFFF          <1>     call swapPathSeparator
   577 000052D4 7505                <1>     jnz .exit
   578 000052D6 E896FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   579                              <1> .exit:
   580 000052DB 58                  <1>     pop rax
   581                              <1>     return
    18                              <2> %%_ret:
    19 000052DC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   582                              <1> 
   583                              <1> getCharDevDriverPtr:
   584                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   585                              <1> ;Input: rax = Device Driver name (space padded)
   586                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   587 000052DD 488D3D(73C00300)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   588                              <1> .lp:
   589 000052E4 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   590                              <1>     rete    ;Exit if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000052E8 74F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   591 000052EA 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   592 000052ED 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   593 000052F4 75EE                <1>     jne .lp ;If not loop
   594 000052F6 F9                  <1>     stc ;Else bad exit
   595                              <1>     return
    18                              <2> %%_ret:
    19 000052F7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    39                                  %include "./Source/Kernel/dosMain.asm"
    40                              <1> ;-----------------------------------:
    41                              <1> ;        Main Kernel dispatch       :
    42                              <1> ;            and routines           :
    43                              <1> ;-----------------------------------:
    44                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    45                              <1> ;ah = Function number, all other registers have various meanings
    46                              <1>  %if DEBUG
    47                              <1>     ;Entry function
    48                              <1>     debugEnterM
    49                              <1>     lea rbp, .l0000
    50                              <1>     call debPrintNullString
    51                              <1>     call debPrintFunctionName
    52                              <1>     jmp short .l0001
    53                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    54                              <1> .l0001:    
    55                              <1>     debugExitM
    56                              <1>     %endif
    57 000052F8 FA                  <1>     cli ;Halt external interrupts
    58 000052F9 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    59 000052FA 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    60 000052FD 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    61                              <1>     ;Cherry pick functions
    62 00005303 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    63 00005306 722C                <1>     jb .fsbegin   ;If below skip these checks
    64 00005308 0F8470020000        <1>     je ctrlBreakCheck
    65 0000530E 80FC64              <1>     cmp ah, 64h
    66 00005311 0F84B0020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    67 00005317 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    68 00005319 80FC51              <1>     cmp ah, 51h
    69 0000531C 0F8493020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    70 00005322 80FC62              <1>     cmp ah, 62h
    71 00005325 0F8493020000        <1>     je getPSPaddr          ;Calls the above function
    72 0000532B 80FC50              <1>     cmp ah, 50h
    73 0000532E 0F8478020000        <1>     je setCurrProcessID
    74                              <1> .fsbegin:
    75 00005334 E830010000          <1>     call dosPushRegs ;Push the usual prologue registers
    76 00005339 48891D(E4C30300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    77 00005340 66C705(A5C30300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    77 00005348 00                  <1>
    78 00005349 488B05(DCC30300)    <1>     mov rax, qword [oldRSP]
    79 00005350 488905(CCC30300)    <1>     mov qword [oldoldRSP], rax
    80 00005357 FE05(6AC30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    81 0000535D 488925(DCC30300)    <1>     mov qword [oldRSP], rsp
    82                              <1> ;Network related variable resetting
    83 00005364 C605(5CC60300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    84                              <1> ;Here, we want to save oldRSP in the callers PSP
    85 0000536B 803D(6AC30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    86 00005372 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    87 00005374 488B05(81C30300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    88 0000537B 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    89                              <1> .fsb1:
    90 0000537F 58                  <1>     pop rax     ;Get old rax back
    91 00005380 50                  <1>     push rax    ;and push it back onto the stack
    92                              <1> .abortEP:
    93                              <1> .charFun0CEP:
    94                              <1> .serverEP:
    95 00005381 488D25(11CC0300)    <1>     lea rsp, critStakTop
    96 00005388 FB                  <1>     sti         ;Reenable interrupts
    97                              <1> 
    98 00005389 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    99 0000538B 881D(F5C30300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
   100 00005391 C605(F6C30300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   101 00005398 881D(CBC30300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
   102 0000539E 881D(ECC30300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
   103                              <1> 
   104 000053A4 50                  <1>     push rax        ;Save rax to use temporarily as table base 
   105 000053A5 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
   106 000053A7 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
   107 000053A9 488D0520AFFFFF      <1>     lea rax, kDispTbl
   108 000053B0 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   109 000053B3 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   110 000053B7 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   111 000053BA 58                  <1>     pop rax
   112                              <1> 
   113 000053BB 84E4                <1>     test ah, ah     ;Simple Terminate function?
   114 000053BD 741C                <1>     jz .fddiskOp
   115 000053BF 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   116 000053C2 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   117 000053C4 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   118 000053C7 7712                <1>     ja .fddiskOp
   119                              <1> ;Char operations here
   120 000053C9 F605(69C30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   121 000053D0 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   122 000053D2 488D25(A0D20300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   123 000053D9 EB40                <1>     jmp short .fdGoToFunction
   124                              <1> .fddiskOp:
   125                              <1>     ;Disk operations go here
   126                              <1>     ;Save rax on entry to a disk funciton
   127 000053DB 488905(95C30300)    <1>     mov qword [oldRAX], rax
   128                              <1>     ;Clear up error info
   129 000053E2 C605(6CC30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   130 000053E9 C605(69C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   131 000053F0 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   132                              <1> 
   133 000053F7 50                  <1>     push rax
   134 000053F8 B482                <1>     mov ah, 82h ;Cancel all critical section!
   135 000053FA CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   136 000053FC 58                  <1>     pop rax
   137                              <1> 
   138 000053FD C605(F6C30300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   139 00005404 488D25(E0D80300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   140 0000540B F605(94C30300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   141 00005412 7407                <1>     jz .fdGoToFunction
   142                              <1> ; HANDLE CTRL+BREAK HERE!
   143 00005414 50                  <1>     push rax
   144 00005415 E8ABD0FFFF          <1>     call checkBreak   ; Check for a ^C
   145 0000541A 58                  <1>     pop rax
   146                              <1> .fdGoToFunction:
   147 0000541B 48871D(E4C30300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   148                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   149                              <1>     ;
   150                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   151                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   152                              <1>     ;
   153                              <1>     %if DEBUG && REGS
   154                              <1>     ;Print stack if necessary function
   155                              <1>     debugEnterM
   156                              <1>     call debPrintDOSStack
   157                              <1>     debugExitM
   158                              <1>     %endif
   159 00005422 FF15(E4C30300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   160                              <1>     %if DEBUG
   161                              <1>     ;Entry function
   162                              <1>     debugEnterM
   163                              <1>     lea rbp, .l0002
   164                              <1>     call debPrintNullString
   165                              <1>     jmp short .l0003
   166                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   167                              <1> .l0003:    
   168                              <1>     debugExitM
   169                              <1>     %endif
   170                              <1>     %if DEBUG && REGS
   171                              <1>     ;Exit function
   172                              <1>     debugEnterM
   173                              <1>     call debPrintDOSStack
   174                              <1>     debugExitM
   175                              <1>     %endif
   176                              <1> .fdExit:
   177 00005428 FA                  <1>     cli     ;Redisable interrupts
   178 00005429 FE0D(6AC30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   179 0000542F 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   180 00005436 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   181 00005439 488B05(CCC30300)    <1>     mov rax, qword [oldoldRSP]
   182 00005440 488905(DCC30300)    <1>     mov qword [oldRSP], rax
   183 00005447 E806000000          <1>     call dosPopRegs  ;Pop the frame
   184 0000544C 48CF                <1>     iretq
   185                              <1> .fdExitBad:
   186 0000544E 30C0                <1>     xor al, al
   187                              <1> defaultIretq:
   188 00005450 48CF                <1>     iretq
   189                              <1> dosPopRegs:
   190 00005452 8F05(D4C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   191 00005458 58                  <1>     pop rax
   192 00005459 5B                  <1>     pop rbx
   193 0000545A 59                  <1>     pop rcx
   194 0000545B 5A                  <1>     pop rdx
   195 0000545C 5E                  <1>     pop rsi
   196 0000545D 5F                  <1>     pop rdi
   197 0000545E 5D                  <1>     pop rbp
   198 0000545F 4158                <1>     pop r8
   199 00005461 4159                <1>     pop r9
   200 00005463 FF25(D4C30300)      <1>     jmp qword [dosReturn]
   201                              <1> dosPushRegs:
   202 00005469 8F05(D4C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   203 0000546F 4151                <1>     push r9
   204 00005471 4150                <1>     push r8
   205 00005473 55                  <1>     push rbp
   206 00005474 57                  <1>     push rdi
   207 00005475 56                  <1>     push rsi
   208 00005476 52                  <1>     push rdx
   209 00005477 51                  <1>     push rcx
   210 00005478 53                  <1>     push rbx
   211 00005479 50                  <1>     push rax
   212 0000547A FF25(D4C30300)      <1>     jmp qword [dosReturn]
   213                              <1> dosCrit1Enter:
   214                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    18                              <2> %%_ret:
    19 00005480 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   215 00005481 B801800000          <1>     mov eax, 8001h
   216 00005486 CD4A                <1>     int 4ah
   217 00005488 58                  <1>     pop rax
   218                              <1>     return
    18                              <2> %%_ret:
    19 00005489 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   219                              <1> dosCrit1Exit:
   220                              <1>     return
    18                              <2> %%_ret:
    19 0000548A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   221 0000548B B801810000          <1>     mov eax, 8101h
   222 00005490 CD4A                <1>     int 4ah
   223 00005492 58                  <1>     pop rax
   224                              <1>     return
    18                              <2> %%_ret:
    19 00005493 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   225                              <1> dosCrit2Enter:
   226                              <1>     return
    18                              <2> %%_ret:
    19 00005494 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   227 00005495 B802800000          <1>     mov eax, 8002h
   228 0000549A CD4A                <1>     int 4ah
   229 0000549C 58                  <1>     pop rax
   230                              <1>     return
    18                              <2> %%_ret:
    19 0000549D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   231                              <1> dosCrit2Exit:
   232                              <1>     return
    18                              <2> %%_ret:
    19 0000549E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   233 0000549F B802810000          <1>     mov eax, 8102h
   234 000054A4 CD4A                <1>     int 4ah
   235 000054A6 58                  <1>     pop rax
   236                              <1>     return
    18                              <2> %%_ret:
    19 000054A7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   237                              <1> 
   238                              <1> ;All good exits destroy AT LEAST ax 
   239                              <1> extGoodExit2:
   240                              <1> ;Good exit with an extended return code in eax
   241 000054A8 E8AAFBFFFF          <1>     call getUserRegs
   242 000054AD 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   243 000054AF EB08                <1>     jmp short extGoodExit.extGoodCommon
   244                              <1> extGoodExit:
   245                              <1> ;Good exit
   246                              <1> ;Return code in ax
   247 000054B1 E8A1FBFFFF          <1>     call getUserRegs
   248 000054B6 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   249                              <1> .extGoodCommon:
   250 000054B9 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   251 000054BD F8                  <1>     clc
   252                              <1>     return
    18                              <2> %%_ret:
    19 000054BE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   253                              <1> extErrExit:
   254                              <1> ;The extended error exit from DOS
   255                              <1> ;Jumped to with AL=Extended error code
   256                              <1> ;Can be called too.
   257                              <1> ;Input: al = Extended error code
   258                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   259                              <1> ;   Returns with: eax = xLat Error
   260                              <1> ;                 rsi = callerFrame
   261 000054BF 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   262 000054C2 E813000000          <1>     call xLatError
   263 000054C7 E891000000          <1>     call checkFail
   264 000054CC E886FBFFFF          <1>     call getUserRegs
   265 000054D1 668906              <1>     mov word [rsi + callerFrame.rax], ax
   266 000054D4 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   267 000054D8 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   268                              <1>     return
    18                              <2> %%_ret:
    19 000054D9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   269                              <1> xLatError:
   270                              <1> ;Translates the error code given in ax and sets error code in the var
   271                              <1> ; Input: ax = Extended Error Code
   272                              <1> ; Output: ax = Potentially translated Error Code
   273                              <1> ;         [errorExCde] = Original Error Code
   274                              <1> ;Preserves all registers except ax
   275                              <1> ;AH is always returned as 0
   276 000054DA 53                  <1>     push rbx
   277 000054DB 51                  <1>     push rcx
   278 000054DC 56                  <1>     push rsi
   279 000054DD 668905(6DC30300)    <1>     mov word [errorExCde], ax
   280 000054E4 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   281 000054E6 488D35A3ABFFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   282                              <1> .readEntry:
   283 000054ED 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   284 000054EF 3CFF                <1>     cmp al, -1
   285 000054F1 741F                <1>     je .skipXlat
   286 000054F3 3A05(96C30300)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   287 000054F9 7408                <1>     je .found
   288                              <1>     ;Here, entry not found, goto next entry
   289 000054FB 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   290 000054FE 4801C6              <1>     add rsi, rax    ;Goto next entry
   291 00005501 EBEA                <1>     jmp short .readEntry
   292                              <1> .found:
   293                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   294 00005503 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   295                              <1> .mainSearch:
   296 00005506 AC                  <1>     lodsb   ;Get one byte into al
   297 00005507 38C3                <1>     cmp bl, al  ;Check against the error code
   298 00005509 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   299 0000550B FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   300 0000550D 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   301                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   302 0000550F 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   303                              <1> .skipXlat:
   304 00005512 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   305 00005514 5E                  <1>     pop rsi
   306 00005515 59                  <1>     pop rcx
   307 00005516 5B                  <1>     pop rbx
   308                              <1>     return
    18                              <2> %%_ret:
    19 00005517 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   309                              <1> setErrorVars:
   310                              <1> ;Looks up the error code in the variable and sets the other error vars
   311                              <1> ;Called with the lookup table in rsi
   312                              <1> ;All regs preserved
   313 00005518 50                  <1>     push rax
   314 00005519 53                  <1>     push rbx
   315 0000551A 51                  <1>     push rcx
   316 0000551B 56                  <1>     push rsi
   317 0000551C 0FB71D(6DC30300)    <1>     movzx ebx, word [errorExCde]
   318 00005523 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   319                              <1> .readEntry:
   320 00005528 AD                  <1>     lodsd   ;Read the dword table entry into eax
   321 00005529 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   322 0000552E 7428                <1>     je .exit    
   323 00005530 38D8                <1>     cmp al, bl  ;Compare the error codes
   324 00005532 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   325 00005534 D3E8                <1>     shr eax, cl
   326 00005536 3CFF                <1>     cmp al, -1
   327 00005538 7406                <1>     je .skipClass
   328 0000553A 8805(70C30300)      <1>     mov byte [errorClass], al
   329                              <1> .skipClass:
   330 00005540 D3E8                <1>     shr eax, cl
   331 00005542 3CFF                <1>     cmp al, -1
   332 00005544 7406                <1>     je .skipAct
   333 00005546 8805(6FC30300)      <1>     mov byte [errorAction], al
   334                              <1> .skipAct:
   335 0000554C D3E8                <1>     shr eax, cl
   336 0000554E 3CFF                <1>     cmp al, -1
   337 00005550 7406                <1>     je .exit
   338 00005552 8805(6CC30300)      <1>     mov byte [errorLocus], al
   339                              <1> .exit:
   340 00005558 5E                  <1>     pop rsi
   341 00005559 59                  <1>     pop rcx
   342 0000555A 5B                  <1>     pop rbx
   343 0000555B 58                  <1>     pop rax
   344                              <1>     return
    18                              <2> %%_ret:
    19 0000555C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   345                              <1> checkFail:
   346                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   347                              <1> ; and swaps the var error code if so
   348 0000555D 803D(CBC30300)00    <1>     cmp byte [Int44Fail], 0
   349 00005564 7509                <1>     jnz .skipFail
   350 00005566 66C705(6DC30300)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   350 0000556E 00                  <1>
   351                              <1> .skipFail:
   352 0000556F 56                  <1>     push rsi
   353 00005570 488D35B5ABFFFF      <1>     lea rsi, extErrTbl
   354 00005577 E89CFFFFFF          <1>     call setErrorVars
   355 0000557C 5E                  <1>     pop rsi
   356                              <1>     return
    18                              <2> %%_ret:
    19 0000557D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   357                              <1> ;========================================:
   358                              <1> ;      Reentrant Kernel Functions        :
   359                              <1> ;========================================:
   360                              <1> ctrlBreakCheck:    ;ah = 33h
   361 0000557E 84C0                <1>     test al, al
   362 00005580 7508                <1>     jnz .cbcget  ;Get the state or other functions
   363 00005582 8A15(94C30300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   364 00005588 48CF                <1>     iretq
   365                              <1> .cbcget:
   366 0000558A 3C02                <1>     cmp al, 02h
   367 0000558C 771A                <1>     ja .cbcBad
   368 0000558E 740D                <1>     jz .cbcxchg ;Function 2
   369 00005590 52                  <1>     push rdx
   370 00005591 80E201              <1>     and dl, 1   ;Get only the bottom bit
   371 00005594 8815(94C30300)      <1>     mov byte [breakFlag], dl    ;Set the state
   372 0000559A 5A                  <1>     pop rdx
   373 0000559B 48CF                <1>     iretq
   374                              <1> .cbcxchg:
   375 0000559D 80E201              <1>     and dl, 1
   376 000055A0 8615(94C30300)      <1>     xchg byte [breakFlag], dl
   377 000055A6 48CF                <1>     iretq
   378                              <1> .cbcBad:
   379 000055A8 B0FF                <1>     mov al, -1
   380 000055AA 48CF                <1>     iretq
   381                              <1> 
   382                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   383 000055AC 48891D(81C30300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   384 000055B3 48CF                <1>     iretq
   385                              <1> 
   386                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   387 000055B5 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   388 000055BC 48CF                <1>     iretq
   389                              <1> 
   390                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   391 000055BE 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   392 000055C5 48CF                <1>     iretq
   393                              <1> 
   394                              <1> setDriverLookahead:;ah = 64h, reserved
   395 000055C7 48CF                <1>     iretq
   396                              <1> 
   397                              <1> ;========================================:
   398                              <1> ;            Kernel Functions            :
   399                              <1> ;========================================:
   400                              <1> diskReset:         ;ah = 0Dh
   401                              <1> ;Flush all dirty buffers to disk
   402 000055C9 E8B2FEFFFF          <1>     call dosCrit1Enter
   403 000055CE 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   404                              <1> .drCheckBuffer:
   405 000055D5 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   406 000055D9 7407                <1>     jz .drGotoNextBuffer
   407                              <1> .drFlushBuffer:
   408 000055DB E89FB2FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   409 000055E0 720C                <1>     jc .drExit
   410                              <1> .drGotoNextBuffer:
   411 000055E2 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   412 000055E5 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   413 000055EC 75E7                <1>     jne .drCheckBuffer
   414                              <1> .drExit:
   415 000055EE E897FEFFFF          <1>     call dosCrit1Exit
   416 000055F3 B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   417 000055F8 CD4F                <1>     int 4fh
   418                              <1>     return
    18                              <2> %%_ret:
    19 000055FA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   419                              <1> 
   420                              <1> selectDisk:        ;ah = 0Eh
   421                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   422 000055FB 88D0                <1>     mov al, dl
   423 000055FD FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   424 000055FF E877FAFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   425 00005604 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   426 00005606 8805(93C30300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   427                              <1> .skipSettingCurrent:
   428 0000560C 0FB605(70C00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   429                              <1>     return
    18                              <2> %%_ret:
    19 00005613 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   430                              <1> 
   431                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   432 00005614 8A05(93C30300)      <1>     mov al, byte [currentDrv]
   433                              <1>     return
    18                              <2> %%_ret:
    19 0000561A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   434                              <1> 
   435                              <1> FATinfoDefault:    ;ah = 1Bh
   436 0000561B 30D2                <1>     xor dl, dl
   437                              <1> FATinfoDevice:     ;ah = 1Ch
   438                              <1> ;Input: dl = 1 based drive number
   439                              <1> ;Output:
   440                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   441                              <1> ;cx = bytes per sector
   442                              <1> ;edx = total number of clusters
   443                              <1> ;rbx = Ptr to media ID byte
   444 0000561D 88D0                <1>     mov al, dl  ;Move drive number into al
   445 0000561F E8C0FAFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   446 00005624 7307                <1>     jnc .fidCDSFound
   447 00005626 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   448 0000562B EB2E                <1>     jmp short .error 
   449                              <1> .fidCDSFound:
   450 0000562D E8D3F9FFFF          <1>     call getDiskData
   451 00005632 7227                <1>     jc .error
   452                              <1> ;Now we have that:
   453                              <1> ;al = sectors per cluster
   454                              <1> ;ah = media ID byte
   455                              <1> ;ebx = total clusters
   456                              <1> ;cx = bytes per sector
   457                              <1> ;edx = number of available clusters
   458 00005634 E81EFAFFFF          <1>     call getUserRegs
   459 00005639 8825(E8C60300)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   460 0000563F 30E4                <1>     xor ah, ah
   461 00005641 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   462 00005644 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   463 00005648 488D1D(E8C60300)    <1>     lea rbx, mediaByte
   464 0000564F 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   465 00005653 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   466                              <1> .badExit:
   467 00005657 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   468                              <1>     return
    18                              <2> %%_ret:
    19 0000565A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   469                              <1> .error:
   470 0000565B E85FFEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   471 00005660 66B8FFFF            <1>     mov ax, -1
   472 00005664 EBF1                <1>     jmp short .badExit
   473                              <1> 
   474                              <1> setIntVector:      ;ah = 25h
   475                              <1> ;Called with:
   476                              <1> ;   rdx = Pointer to interrupt handler
   477                              <1> ;   al = Interrupt number
   478 00005666 50                  <1>     push rax    ;Preserve all registers in call
   479 00005667 53                  <1>     push rbx
   480 00005668 51                  <1>     push rcx
   481 00005669 52                  <1>     push rdx
   482 0000566A 56                  <1>     push rsi
   483 0000566B 55                  <1>     push rbp
   484 0000566C 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   485 0000566E 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   486                              <1> ;First call to get default BIOS segement selector and attribute word
   487 00005674 88C3                <1>     mov bl, al  ;Set interrupt number 
   488 00005676 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   489 0000567B CD35                <1>     int 35h
   490 0000567D E8D5F9FFFF          <1>     call getUserRegs
   491 00005682 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   492 00005686 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   493 00005688 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   494                              <1> ;dx preserves the attribute word
   495 0000568A B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   496 0000568F CD35                <1>     int 35h
   497 00005691 5D                  <1>     pop rbp
   498 00005692 5E                  <1>     pop rsi
   499 00005693 5A                  <1>     pop rdx
   500 00005694 59                  <1>     pop rcx
   501 00005695 5B                  <1>     pop rbx
   502 00005696 58                  <1>     pop rax
   503                              <1>     return
    18                              <2> %%_ret:
    19 00005697 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   504                              <1> 
   505                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   506 00005698 8805(32C30300)      <1>     mov byte [verifyFlag], al
   507 0000569E 8025(32C30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   508                              <1>     return
    18                              <2> %%_ret:
    19 000056A5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   509                              <1> getDOSversion:     ;ah = 30h
   510 000056A6 E8ACF9FFFF          <1>     call getUserRegs
   511 000056AB 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   512 000056AD 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   513 000056B0 668B0549A9FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   514 000056B7 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   515                              <1>     return
    18                              <2> %%_ret:
    19 000056BA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   516                              <1> 
   517                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   518                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   519 000056BB 30D2                <1>     xor dl, dl
   520                              <1> getDeviceDPBptr:   ;ah = 32h
   521                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   522                              <1> ;On exit: rbx = DPB pointer
   523 000056BD 88D0                <1>     mov al, dl
   524 000056BF E820FAFFFF          <1>     call getCDS
   525 000056C4 722C                <1>     jc .bad
   526 000056C6 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   527 000056CD 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   528 000056D3 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   529                              <1>     ;Here ONLY if accessing critical Disk data structures
   530 000056D5 E8A6FDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   531 000056DA E8A6F6FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   532 000056DF E8A6FDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   533 000056E4 720C                <1>     jc .bad
   534 000056E6 E86CF9FFFF          <1>     call getUserRegs
   535 000056EB 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   536 000056EF 30C0                <1>     xor al, al
   537                              <1>     return
    18                              <2> %%_ret:
    19 000056F1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   538                              <1> .bad:
   539 000056F2 B0FF                <1>     mov al, -1
   540                              <1>     return
    18                              <2> %%_ret:
    19 000056F4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   541                              <1> 
   542                              <1> getInDOSflagPtr:   ;ah = 34h
   543 000056F5 488D15(6AC30300)    <1>     lea rdx, inDOS
   544 000056FC E856F9FFFF          <1>     call getUserRegs
   545 00005701 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   546                              <1>     return
    18                              <2> %%_ret:
    19 00005705 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   547                              <1> 
   548                              <1> getIntVector:      ;ah = 35h
   549                              <1> ;Called with:
   550                              <1> ;   al = Interrupt Number
   551                              <1> ;Returns:
   552                              <1> ;   rbx = Pointer to interrupt handler
   553 00005706 E83EF9FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   554 0000570B E847F9FFFF          <1>     call getUserRegs
   555 00005710 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   556 00005714 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   557                              <1>     return
    18                              <2> %%_ret:
    19 00005716 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   558                              <1> 
   559                              <1> getDiskFreeSpace:  ;ah = 36h
   560                              <1> ;Input: Drive number in dl (0 = Current)
   561                              <1> ;Output:    ax = sectors per cluster
   562                              <1> ;           ebx = number of free clusters
   563                              <1> ;           cx = bytes per sector
   564                              <1> ;           edx = total clusters on drive
   565 00005717 88D0                <1>     mov al, dl
   566 00005719 E8C6F9FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   567 0000571E 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   568                              <1> ;Else, we at an error.
   569                              <1> ;Simply return with CY set and error code in al with extended error info
   570 00005720 B80F000000          <1>     mov eax, errBadDrv
   571 00005725 E895FDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   572                              <1>     ;extErrExit sets rsi to caller regs
   573 0000572A 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   574                              <1>     return
    18                              <2> %%_ret:
    19 0000572F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   575                              <1> .gdfsCDSFound:
   576 00005730 E8D0F8FFFF          <1>     call getDiskData
   577 00005735 7219                <1>     jc .error
   578                              <1> ;Now we have that:
   579                              <1> ;al = sectors per cluster
   580                              <1> ;ah = media ID byte
   581                              <1> ;ebx = total clusters
   582                              <1> ;cx = bytes per sector
   583                              <1> ;edx = number of available clusters
   584 00005737 E81BF9FFFF          <1>     call getUserRegs
   585 0000573C 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   586 0000573E 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   587 00005741 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   588 00005745 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   589 00005748 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   590                              <1> .badExit:
   591 0000574C 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   592                              <1>     return
    18                              <2> %%_ret:
    19 0000574F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   593                              <1> .error:
   594 00005750 E86AFDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   595 00005755 66B8FFFF            <1>     mov ax, -1
   596 00005759 EBF1                <1>     jmp short .badExit
   597                              <1> 
   598                              <1> 
   599                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   600 0000575B 31C0                <1>     xor eax, eax
   601 0000575D 668705(91C30300)    <1>     xchg ax, word [errorLevel]
   602 00005764 E948FDFFFF          <1>     jmp extGoodExit
   603                              <1> 
   604                              <1> getSysVarsPtr:     ;ah = 52h
   605 00005769 488D15(33C00300)    <1>     lea rdx, sysVarsPtr
   606 00005770 E8E2F8FFFF          <1>     call getUserRegs
   607 00005775 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   608                              <1>     return
    18                              <2> %%_ret:
    19 00005779 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   609                              <1> 
   610                              <1> 
   611                              <1> ;AH = 53h - CREATE DPB
   612                              <1> createDPB:         ;generates a DPB from a given BPB
   613                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   614                              <1> ;This is done so that the other fields of the DPB can be recycled
   615                              <1> ;Input: rsi = ptr to the BPB
   616                              <1> ;       rbp = ptr to the DPB
   617                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   618                              <1> ;bMediaDescriptor
   619 0000577A 8A4615              <1>     mov al, byte [rsi + bpb.media]
   620 0000577D 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   621                              <1> ;dFirstFreeCluster
   622 00005780 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   623                              <1> ;dNumberOfFreeClusters
   624 00005787 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   625                              <1> ;wBytesPerSector
   626 0000578E 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   627 00005792 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   628                              <1> ;bMaxSectorInCluster
   629 00005796 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   630 00005799 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   631 0000579B 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   632                              <1> ;bSectorsPerClusterShift
   633 0000579E FEC0                <1>     inc al
   634 000057A0 30C9                <1>     xor cl, cl
   635                              <1> .cd2:
   636 000057A2 D0E8                <1>     shr al, 1
   637 000057A4 7404                <1>     jz .cd3
   638 000057A6 FEC1                <1>     inc cl
   639 000057A8 EBF8                <1>     jmp short .cd2
   640                              <1> .cd3:
   641 000057AA 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   642                              <1> ;wFAToffset, number of reserved sectors in partition
   643 000057AD 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   644 000057B1 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   645                              <1> ;bNumberOfFATs
   646 000057B5 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   647 000057B8 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   648                              <1> ;wNumberRootDirEntries
   649                              <1> ;Gets the number of 32 byte entries in the root directory
   650                              <1> ;Only valid for FAT 12/16
   651 000057BB 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   652 000057BF 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   653                              <1> ;dFATlength, get the FAT length
   654 000057C3 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   655 000057C7 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   656 000057CA 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   657 000057CC 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   658 000057CF 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   659                              <1> ;Complex cases below...
   660                              <1> ;dClusterHeapOffset, start sector of the data area
   661 000057D2 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   662 000057D6 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   663 000057D9 85C0                <1>     test eax, eax
   664 000057DB 0F44C3              <1>     cmovz eax, ebx
   665                              <1> ;eax = FATsz
   666 000057DE 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   667 000057E2 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   668 000057E5 85DB                <1>     test ebx, ebx
   669 000057E7 0F44D9              <1>     cmovz ebx, ecx 
   670                              <1> ;ebx = TotSec
   671 000057EA 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   672 000057ED 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   673                              <1> .cd4:
   674 000057EF 01C2                <1>     add edx, eax
   675 000057F1 FEC9                <1>     dec cl
   676 000057F3 75FA                <1>     jnz .cd4
   677 000057F5 89D0                <1>     mov eax, edx    ;Store product in eax
   678 000057F7 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   679 000057FB 01D0                <1>     add eax, edx
   680                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   681 000057FD 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   682 00005801 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   683 00005804 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   684 00005808 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   685 00005809 89D0                <1>     mov eax, edx
   686 0000580B 31D2                <1>     xor edx, edx
   687 0000580D F7F1                <1>     div ecx
   688 0000580F 89C2                <1>     mov edx, eax
   689 00005811 58                  <1>     pop rax
   690 00005812 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   691                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   692                              <1>     ;aka eax = Start sector of the data area in volume
   693 00005814 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   694                              <1> ;dClusterCount
   695 00005817 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   696 00005819 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   697 0000581B 31D2                <1>     xor edx, edx
   698 0000581D BB01000000          <1>     mov ebx, 1
   699 00005822 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   700 00005825 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   701 00005827 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   702 00005829 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   703 0000582B 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   704                              <1> ;dFirstUnitOfRootDir
   705 0000582E 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   706 00005833 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   707 00005836 770F                <1>     ja .cd5
   708                              <1>     ;Else, we need to find the first sector of the root directory
   709                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   710 00005838 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   711 0000583C 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   712                              <1> .cd51:
   713 00005840 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   714 00005843 FFC9                <1>     dec ecx
   715 00005845 75F9                <1>     jnz .cd51
   716                              <1> .cd5:
   717 00005847 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   718                              <1> ;Exit epilogue
   719 0000584A 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   720 00005851 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   721                              <1>     %if DEBUG && DPBINFO
   722                              <1>     ;Print DPB 
   723                              <1>     debugEnterM
   724                              <1>     push rbp
   725                              <1>     lea rbp, .l0000
   726                              <1>     call debPrintNullString
   727                              <1>     pop rbp
   728                              <1>     call debDPBBPBptr
   729                              <1>     call debMakeDebuggerRespond
   730                              <1>     jmp short .l0001
   731                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   732                              <1> .l0001:
   733                              <1>     debugExitM
   734                              <1>     %endif
   735                              <1>     return
    18                              <2> %%_ret:
    19 00005853 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   736                              <1> 
   737                              <1> getVerifySetting:  ;ah = 54h
   738 00005854 8A05(32C30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   739                              <1>     return
    18                              <2> %%_ret:
    19 0000585A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   740                              <1> 
   741                              <1> getExtendedError:  ;ah = 59h
   742 0000585B E8F7F7FFFF          <1>     call getUserRegs
   743 00005860 668B05(6DC30300)    <1>     mov ax, word [errorExCde]
   744 00005867 8A2D(6CC30300)      <1>     mov ch, byte [errorLocus]
   745 0000586D 8A3D(70C30300)      <1>     mov bh, byte [errorClass]
   746 00005873 8A1D(6FC30300)      <1>     mov bl, byte [errorAction]
   747 00005879 668906              <1>     mov word [rsi + callerFrame.rax], ax
   748 0000587C 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   749 00005880 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   750                              <1>     return
    18                              <2> %%_ret:
    19 00005883 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   751                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   752                              <1> noOp:
   753                              <1>     return
    18                              <2> %%_ret:
    19 00005884 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    40                                  %include "./Source/Kernel/Net/server.asm"
    41                              <1> ;Network functions here
    42                              <1> 
    43                              <1> dosServer:  ;ah = 5Dh
    44                              <1> ;Dispatches the server function in al. Many of these are share hooks.
    45                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
    46                              <1> ;   rdx = Pointer to DPL
    47 00005885 3C07                <1>     cmp al, 07h
    48 00005887 7204                <1>     jb .skip
    49 00005889 3C09                <1>     cmp al, 09h
    50 0000588B 7619                <1>     jbe .skip2
    51                              <1> .skip:
    52 0000588D 4889D6              <1>     mov rsi, rdx
    53 00005890 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    54 00005894 66891D(A5C30300)    <1>     mov word [machineNum], bx
    55 0000589B 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    56 0000589F 48891D(9DC30300)    <1>     mov qword [serverPSP], rbx
    57                              <1>     
    58                              <1> .skip2:
    59                              <1> serverDispatch: ;AX=5D00h
    60                              <1> ;Input: rsi points to the DOS parameter list
    61 000058A6 58                  <1>     pop rax
    62 000058A7 56                  <1>     push rsi    ;Put dpl ptr in rdi
    63 000058A8 5F                  <1>     pop rdi
    64 000058A9 E8A9F7FFFF          <1>     call getUserRegs
    65 000058AE 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    66 000058B1 56                  <1>     push rsi
    67 000058B2 B906000000          <1>     mov ecx, 6
    68 000058B7 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    69 000058BA 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    70 000058C1 48A5                <1>     movsq   ;Transfer r8...
    71 000058C3 48A5                <1>     movsq   ;... and r9
    72 000058C5 5E                  <1>     pop rsi
    73 000058C6 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    74 000058C9 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    75 000058CD 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    76 000058D1 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    77 000058D5 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    78 000058D9 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    79 000058DD 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    80 000058E1 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    81 000058E5 48891D(E4C30300)    <1>     mov qword [oldRBX], rbx
    82 000058EC C605(5CC60300)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    83 000058F3 E989FAFFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    84                              <1> 
    85                              <1> 
    86                              <1> netServices:   ;ah = 5Eh, do nothing
    87                              <1> netRedir:;ah = 5Fh, do nothing
    88                              <1>     return
    18                              <2> %%_ret:
    19 000058F8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    41                                  %include "./Source/Kernel/Net/multiplx.asm"
    42                              <1> ;Default multiplexer. Current only installed function is ah=12h
    43                              <1> 
    44                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    45 000058F9 80FC12              <1>     cmp ah, 12h
    46 000058FC 751C                <1>     jne .exit       ;Exit if not for us
    47 000058FE 3C05                <1>     cmp al, mDispTblL / 2
    48 00005900 7318                <1>     jae .exit   ;If above or equal, exit
    49 00005902 53                  <1>     push rbx
    50 00005903 51                  <1>     push rcx
    51 00005904 31C9                <1>     xor ecx, ecx
    52 00005906 488D1D97AAFFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    53 0000590D 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    54 0000590F D1E1                <1>     shl ecx, 1   ;multiply by 2
    55 00005911 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    56 00005914 FFD3                <1>     call rbx
    57 00005916 59                  <1>     pop rcx
    58 00005917 5B                  <1>     pop rbx
    59 00005918 48CF                <1>     iretq
    60                              <1> .exit:
    61 0000591A 804C241001          <1>     or byte [rsp + 8h*2], 1
    62 0000591F 48CF                <1>     iretq
    63                              <1> multiplexTest:
    64 00005921 B0FF                <1>     mov al, -1
    65 00005923 C3                  <1>     ret
    66                              <1> getDosDataSeg:  ;Int 4Fh, AX=1203h
    67                              <1> ;Return: r8 = Dos Data Segment Pointer
    68 00005924 4C8D05(00C00300)    <1>     lea r8, dosDataArea
    69                              <1>     return
    18                              <2> %%_ret:
    19 0000592B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    42                                  %include "./Source/Misc/int44h.asm"
    43                              <1> critErrorHandler:   ;Int 44h
    44                              <1> ;User Stack in usage here, must be swapped to before this is called
    45                              <1> ;Entered with:  
    46                              <1> ;               AH = Critical Error Bitfield
    47                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    48                              <1> ;               Bit 6 - Reserved
    49                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    50                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    51                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    52                              <1> ;               Bits [2-1] = Affected Disk Error
    53                              <1> ;                     0 0   DOS area
    54                              <1> ;                     0 1   FAT area
    55                              <1> ;                     1 0   Directory area
    56                              <1> ;                     1 1   Data area
    57                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    58                              <1> ;               AL  = Failing drive number if AH[7] = 0
    59                              <1> ;               DIL = Error code for errorMsg
    60                              <1> ;               RSI = EA of Device Header for which device the error occured
    61                              <1> ;Return:
    62                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    63                              <1> ;                  = 1 - Retry the Operation    (Retry)
    64                              <1> ;                  = 2 - Terminate the Program  (Abort)
    65                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    66 0000592C 53                  <1>     push rbx
    67 0000592D 51                  <1>     push rcx
    68 0000592E 52                  <1>     push rdx
    69 0000592F 57                  <1>     push rdi
    70 00005930 56                  <1>     push rsi
    71 00005931 FC                  <1>     cld         ;Make String ops go forward
    72                              <1> 
    73 00005932 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    74 00005935 488D155E020000      <1>     lea rdx, qword [.crlf]
    75 0000593C B409                <1>     mov ah, 09h ;Print String
    76 0000593E CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    77                              <1> 
    78 00005940 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    79 00005946 B90C000000          <1>     mov ecx, 0Ch
    80 0000594B 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    81 0000594D 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    82 00005950 480FB7FF            <1>     movzx rdi, di
    83 00005954 4889FA              <1>     mov rdx, rdi    ;Copy error code
    84 00005957 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    85 0000595B 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    86 0000595E 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    87 00005961 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    88 00005968 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    89 0000596C B409                <1>     mov ah, 09h ;Print String
    90 0000596E CD41                <1>     int 41h     ;Call DOS to print first part of message
    91                              <1> 
    92 00005970 488D1505020000      <1>     lea rdx, qword [.readmsg]
    93 00005977 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    94 0000597E F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    95 00005981 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    96 00005985 B409                <1>     mov ah, 09h ;Print String
    97 00005987 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    98                              <1> 
    99 00005989 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
   100 0000598C 0F85DF000000        <1>     jnz .charError
   101                              <1> ;Disk error continues here
   102 00005992 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
   103 00005999 B409                <1>     mov ah, 09h
   104 0000599B CD41                <1>     int 41h
   105 0000599D 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   106 0000599F 80C241              <1>     add dl, "A" ;Add ASCII code
   107 000059A2 B402                <1>     mov ah, 02h ;Print char in dl
   108 000059A4 CD41                <1>     int 41h
   109                              <1> .userInput:
   110 000059A6 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   111 000059AD B409                <1>     mov ah, 09h
   112 000059AF CD41                <1>     int 41h
   113                              <1> ;Abort, Retry, Ignore, Fail is word order
   114                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   115                              <1> .userAbort:
   116                              <1> ;Abort is always an option
   117 000059B1 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   118 000059B8 B409                <1>     mov ah, 09h
   119 000059BA CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   120                              <1> .userRetry:
   121 000059BC F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   122 000059BF 7416                <1>     jz .userIgnore    ;If clear, dont print message
   123 000059C1 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   124 000059C8 B409                <1>     mov ah, 09h
   125 000059CA CD41                <1>     int 41h
   126 000059CC 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   127 000059D3 B409                <1>     mov ah, 09h
   128 000059D5 CD41                <1>     int 41h
   129                              <1> .userIgnore:
   130 000059D7 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   131 000059DA 7416                <1>     jz .userFail
   132 000059DC 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   133 000059E3 B409                <1>     mov ah, 09h
   134 000059E5 CD41                <1>     int 41h
   135 000059E7 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   136 000059EE B409                <1>     mov ah, 09h
   137 000059F0 CD41                <1>     int 41h
   138                              <1> .userFail:
   139 000059F2 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   140 000059F5 7416                <1>     jz .userMsgEnd
   141 000059F7 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   142 000059FE B409                <1>     mov ah, 09h
   143 00005A00 CD41                <1>     int 41h
   144 00005A02 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   145 00005A09 B409                <1>     mov ah, 09h
   146 00005A0B CD41                <1>     int 41h
   147                              <1> .userMsgEnd:
   148 00005A0D 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   149 00005A14 B409                <1>     mov ah, 09h
   150 00005A16 CD41                <1>     int 41h
   151                              <1> ;Get user input now 
   152 00005A18 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   153 00005A1A 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   154 00005A21 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   155 00005A23 CD41                <1>     int 41h ;Get char in al
   156 00005A25 3C61                <1>     cmp al, "a" ;Chack if lowercase
   157 00005A27 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   158 00005A29 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   159                              <1> .uip1:
   160 00005A2B AE                  <1>     scasb   ;Compare char to list, offset gives return code
   161 00005A2C 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   162 00005A2E FFC1                <1>     inc ecx
   163 00005A30 81F904000000        <1>     cmp ecx, 4
   164 00005A36 75F3                <1>     jne .uip1
   165 00005A38 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   166                              <1> .validInput:
   167 00005A3D 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   168                              <1> ;Now check if the input is permitted
   169 00005A3F 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   170 00005A41 7427                <1>     je .cehExit
   171 00005A43 84C0                <1>     test al, al ;Check if 0 => Ignore
   172 00005A45 740F                <1>     je .viIgnore
   173 00005A47 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   174 00005A49 7416                <1>     je .viRetry
   175                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   176 00005A4B F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   177 00005A4E 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   178 00005A54 EB14                <1>     jmp short .cehExit
   179                              <1> .viIgnore:
   180 00005A56 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   181 00005A59 0F8447FFFFFF        <1>     jz .userInput
   182 00005A5F EB09                <1>     jmp short .cehExit
   183                              <1> .viRetry:
   184 00005A61 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   185 00005A64 0F843CFFFFFF        <1>     jz .userInput
   186                              <1> .cehExit:
   187 00005A6A 5E                  <1>     pop rsi
   188 00005A6B 5F                  <1>     pop rdi
   189 00005A6C 5A                  <1>     pop rdx
   190 00005A6D 59                  <1>     pop rcx
   191 00005A6E 5B                  <1>     pop rbx
   192 00005A6F 48CF                <1>     iretq
   193                              <1> .charError:
   194 00005A71 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   195 00005A76 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   196                              <1> .ce1:
   197 00005A7D AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   198 00005A7E 88C2                <1>     mov dl, al  ;Move char into dl
   199 00005A80 B402                <1>     mov ah, 02h
   200 00005A82 CD41                <1>     int 41h ;Print char
   201 00005A84 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   202 00005A86 E91BFFFFFF          <1>     jmp .userInput
   203                              <1> 
   204                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   205 00005A8B 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   205 00005A94 746563742024202020  <1>
   206 00005A9D 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   206 00005AA6 6E6974202420202020  <1>
   207 00005AAF 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   207 00005AB8 202420202020202020  <1>
   208 00005AC1 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   208 00005ACA 6F6D6D616E64202420  <1>
   209 00005AD3 446174612024202020- <1>             db "Data $            "       ;Error 4
   209 00005ADC 202020202020202020  <1>
   210 00005AE5 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   210 00005AEE 737420242020202020  <1>
   211 00005AF7 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   211 00005B00 202020202020202020  <1>
   212 00005B09 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   212 00005B12 656469612024202020  <1>
   213 00005B1B 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   213 00005B24 7420466F756E642024  <1>
   214 00005B2D 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   214 00005B36 706572202420202020  <1>
   215 00005B3F 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   215 00005B48 6C7420242020202020  <1>
   216 00005B51 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   216 00005B5A 742024202020202020  <1>
   217 00005B63 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   217 00005B6C 61696C757265202420  <1>
   218                              <1> 
   219 00005B75 64726976652024      <1> .drive      db "drive $"
   220 00005B7C 6572726F7220726561- <1> .readmsg    db "error reading $"
   220 00005B85 64696E672024        <1>
   221 00005B8B 6572726F7220777269- <1> .writemsg   db "error writing $"
   221 00005B94 74696E672024        <1>
   222 00005B9A 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   223 00005B9D 41626F727424        <1> .abortmsg   db "Abort$" 
   224 00005BA3 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   225 00005BAA 526574727924        <1> .retrymsg   db "Retry$"
   226 00005BB0 4661696C24          <1> .failmsg    db "Fail$"
   227 00005BB5 2C2024              <1> .betweenMsg db ", $"
   228 00005BB8 3F2024              <1> .endMsg     db "? $"
   229 00005BBB 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    43                                  %include "./Source/Drivers/drvData.asm"
    44                              <1> ;-----------------------------------:
    45                              <1> ;          Driver routines          :
    46                              <1> ;-----------------------------------:
    47                              <1> drivers:
    48                              <1> conHdr:
    49 00005BBF [E15B000000000000]  <1>     dq auxHdr
    50 00005BC7 1380                <1>     dw 08013h
    51 00005BC9 [5F5D000000000000]  <1>     dq commonStrat
    52 00005BD1 [6E5D000000000000]  <1>     dq conDriver
    53 00005BD9 434F4E2020202020    <1>     db "CON     "
    54                              <1> auxHdr:
    55 00005BE1 [035C000000000000]  <1>     dq prnHdr
    56 00005BE9 0080                <1>     dw 08000h
    57 00005BEB [5F5D000000000000]  <1>     dq commonStrat
    58 00005BF3 [2360000000000000]  <1>     dq com1Intr
    59 00005BFB 4155582020202020    <1>     db "AUX     "
    60                              <1> prnHdr:
    61 00005C03 [255C000000000000]  <1>     dq clkHdr
    62 00005C0B 40A0                <1>     dw 0A040h
    63 00005C0D [675D000000000000]  <1>     dq nulStrat
    64 00005C15 [6D5D000000000000]  <1>     dq nulIntr
    65 00005C1D 50524E2020202020    <1>     db "PRN     "
    66                              <1> clkHdr:
    67 00005C25 [475C000000000000]  <1>     dq msdHdr
    68 00005C2D 0880                <1>     dw 08008h
    69 00005C2F [5F5D000000000000]  <1>     dq commonStrat
    70 00005C37 [BB5E000000000000]  <1>     dq clkDriver
    71 00005C3F 434C4F434B242020    <1>     db "CLOCK$  "
    72                              <1> msdHdr:
    73 00005C47 [695C000000000000]  <1>     dq com1Hdr
    74 00005C4F 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    75 00005C51 [5F5D000000000000]  <1>     dq commonStrat
    76 00005C59 [C861000000000000]  <1>     dq msdDriver
    77 00005C61 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    78                              <1> com1Hdr:
    79 00005C69 [8B5C000000000000]  <1>     dq com2Hdr
    80 00005C71 0080                <1>     dw 08000h
    81 00005C73 [5F5D000000000000]  <1>     dq commonStrat
    82 00005C7B [2360000000000000]  <1>     dq com1Intr
    83 00005C83 434F4D3120202020    <1>     db "COM1    "
    84                              <1> com2Hdr:
    85 00005C8B [AD5C000000000000]  <1>     dq com3Hdr
    86 00005C93 0080                <1>     dw 08000h
    87 00005C95 [5F5D000000000000]  <1>     dq commonStrat
    88 00005C9D [2C60000000000000]  <1>     dq com2Intr
    89 00005CA5 434F4D3220202020    <1>     db "COM2    "
    90                              <1> com3Hdr:
    91 00005CAD [CF5C000000000000]  <1>     dq com4Hdr
    92 00005CB5 0080                <1>     dw 08000h
    93 00005CB7 [5F5D000000000000]  <1>     dq commonStrat
    94 00005CBF [3560000000000000]  <1>     dq com3Intr
    95 00005CC7 434F4D3320202020    <1>     db "COM3    "
    96                              <1> com4Hdr:
    97 00005CCF [F15C000000000000]  <1>     dq lpt1Hdr
    98 00005CD7 0080                <1>     dw 08000h
    99 00005CD9 [5F5D000000000000]  <1>     dq commonStrat
   100 00005CE1 [3E60000000000000]  <1>     dq com4Intr
   101 00005CE9 434F4D3420202020    <1>     db "COM4    "
   102                              <1> lpt1Hdr:
   103 00005CF1 [135D000000000000]  <1>     dq lpt2Hdr
   104 00005CF9 40A0                <1>     dw 0A040h
   105 00005CFB [675D000000000000]  <1>     dq nulStrat
   106 00005D03 [6D5D000000000000]  <1>     dq nulIntr
   107 00005D0B 4C50543120202020    <1>     db "LPT1    "
   108                              <1> lpt2Hdr:
   109 00005D13 [355D000000000000]  <1>     dq lpt3Hdr
   110 00005D1B 40A0                <1>     dw 0A040h
   111 00005D1D [675D000000000000]  <1>     dq nulStrat
   112 00005D25 [6D5D000000000000]  <1>     dq nulIntr
   113 00005D2D 4C50543220202020    <1>     db "LPT2    "
   114                              <1> lpt3Hdr:
   115 00005D35 FFFFFFFFFFFFFFFF    <1>     dq -1
   116 00005D3D 40A0                <1>     dw 0A040h
   117 00005D3F [675D000000000000]  <1>     dq nulStrat
   118 00005D47 [6D5D000000000000]  <1>     dq nulIntr
   119 00005D4F 4C50543320202020    <1>     dq "LPT3    "
   120 00005D57 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    44                                  %include "./Source/Drivers/charDrv.asm"
    45                              <1> commonStrat:
    46                              <1> ;DOS calls this function with rbx=Ptr to request header
    47 00005D5F 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    48 00005D66 C3                  <1>     ret
    49                              <1> nulStrat:
    50 00005D67 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    51                              <1> nulIntr:
    52 00005D6D C3                  <1>     ret
    53                              <1> conDriver:
    54 00005D6E 50                  <1>     push rax
    55 00005D6F 53                  <1>     push rbx
    56 00005D70 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    57 00005D77 B003                <1>     mov al, 03h ;Unknown Command
    58 00005D79 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    59 00005D7D 7739                <1>     ja .conWriteErrorCode ;If yes, error!
    60                              <1> 
    61 00005D7F 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    62 00005D82 3C04                <1>     cmp al, 4
    63 00005D84 7441                <1>     jz .conRead
    64 00005D86 3C05                <1>     cmp al, 5
    65 00005D88 0F847F000000        <1>     jz .conNondestructiveRead
    66 00005D8E 3C06                <1>     cmp al, 6
    67 00005D90 0F84A8000000        <1>     jz .conInputStatus
    68 00005D96 3C07                <1>     cmp al, 7
    69 00005D98 0F84B0000000        <1>     jz .conFlushInputBuffers
    70 00005D9E 3C08                <1>     cmp al, 8
    71 00005DA0 0F84CA000000        <1>     jz .conWrite
    72 00005DA6 3C09                <1>     cmp al, 9
    73 00005DA8 0F84C2000000        <1>     jz .conWrite
    74 00005DAE 3C0A                <1>     cmp al, 0Ah
    75 00005DB0 0F84E3000000        <1>     jz .conOutputStatus
    76 00005DB6 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    77                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    78 00005DB8 B480                <1>     mov ah, 80h ;Set error bit
    79 00005DBA 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    80                              <1> .conExit:
    81 00005DBE 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    82 00005DC4 5B                  <1>     pop rbx
    83 00005DC5 58                  <1>     pop rax
    84 00005DC6 C3                  <1>     ret
    85                              <1> .conRead:    ;Function 4
    86 00005DC7 B005                <1>     mov al, 05h ;Bad request structure length?
    87 00005DC9 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    88 00005DCC 75EA                <1>     jne .conWriteErrorCode
    89                              <1> 
    90 00005DCE 57                  <1>     push rdi
    91 00005DCF 51                  <1>     push rcx
    92 00005DD0 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    93 00005DD4 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    94                              <1> .cre1:
    95 00005DD6 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    96 00005DD9 741C                <1>     je .cre2
    97 00005DDB 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    98 00005DE2 751A                <1>     jnz .cre3   ;No, get the buffer value
    99 00005DE4 31C0                <1>     xor eax, eax
   100 00005DE6 CD36                <1>     int 36h
   101                              <1> .cre11:
   102 00005DE8 AA                  <1>     stosb
   103 00005DE9 84C0                <1>     test al, al ;Was the ascii code stored 0?
   104 00005DEB 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
   105 00005DED 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   106                              <1> .cre12:
   107 00005DF3 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   108 00005DF5 EBDF                <1>     jmp short .cre1
   109                              <1> .cre2:
   110 00005DF7 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   111 00005DFA 59                  <1>     pop rcx
   112 00005DFB 5F                  <1>     pop rdi
   113 00005DFC EBC0                <1>     jmp short .conExit
   114                              <1> .cre3:
   115 00005DFE 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   116 00005E04 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   117 00005E0B EBDB                <1>     jmp short .cre11
   118                              <1> 
   119                              <1> .conNondestructiveRead:  ;Function 5
   120 00005E0D B005                <1>     mov al, 05h ;Bad request structure length?
   121 00005E0F 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   122 00005E12 75A4                <1>     jne .conWriteErrorCode
   123 00005E14 803D8E00000000      <1>     cmp byte [.conBuf], 0
   124 00005E1B 7519                <1>     jnz .cnr2
   125 00005E1D B401                <1>     mov ah, 01h     ;Get key if exists
   126 00005E1F CD36                <1>     int 36h
   127 00005E21 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   128                              <1>     ;Keystroke available
   129                              <1> .cnr0:
   130 00005E23 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   131 00005E26 E993FFFFFF          <1>     jmp .conExit
   132                              <1> .cnr1: ;No keystroke available
   133 00005E2B 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   134 00005E31 E988FFFFFF          <1>     jmp .conExit
   135                              <1> .cnr2:
   136 00005E36 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   137 00005E3C EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   138                              <1> 
   139                              <1> .conInputStatus:         ;Function 6
   140 00005E3E B005                <1>     mov al, 05h ;Bad request structure length?
   141 00005E40 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   142 00005E43 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   143 00005E49 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   144                              <1> 
   145                              <1> .conFlushInputBuffers:   ;Function 7
   146 00005E4E B005                <1>     mov al, 05h ;Bad request structure length?
   147 00005E50 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   148 00005E53 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   149 00005E59 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   150                              <1> .cfib0:
   151 00005E60 B401                <1>     mov ah, 01      ;Get buffer status
   152 00005E62 CD36                <1>     int 36h
   153 00005E64 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   154 00005E6A 30E4                <1>     xor ah, ah
   155 00005E6C CD36                <1>     int 36h ;Read key to flush from buffer
   156 00005E6E EBF0                <1>     jmp short .cfib0
   157                              <1> 
   158                              <1> .conWrite:   ;Function 8 and 9
   159 00005E70 B005                <1>     mov al, 05h ;Bad request structure length?
   160 00005E72 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   161 00005E75 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   162                              <1> 
   163 00005E7B 56                  <1>     push rsi
   164 00005E7C 51                  <1>     push rcx
   165 00005E7D 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   166 00005E81 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   167                              <1> .cw1: 
   168 00005E83 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   169 00005E86 7407                <1>     je .cw2
   170 00005E88 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   171 00005E89 CD49                <1>     int 49h ;Fast print char
   172 00005E8B FFC1                <1>     inc ecx
   173 00005E8D EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   174                              <1> .cw2:
   175 00005E8F 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   176 00005E92 59                  <1>     pop rcx
   177 00005E93 5E                  <1>     pop rsi
   178 00005E94 E925FFFFFF          <1>     jmp .conExit
   179                              <1> .conOutputStatus:   ;Function 0Ah
   180 00005E99 B005                <1>     mov al, 05h ;Bad request structure length?
   181 00005E9B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   182 00005E9E 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   183 00005EA4 E915FFFFFF          <1>     jmp .conExit
   184                              <1> 
   185 00005EA9 00                  <1> .conBuf db 0    ;Single byte buffer
   186                              <1> fastOutput:         ;This CON driver supports Int 49h
   187                              <1> ;Called with char to transfer in al
   188 00005EAA 50                  <1>     push rax
   189 00005EAB B40E                <1>     mov ah, 0Eh
   190 00005EAD CD30                <1>     int 30h
   191 00005EAF 58                  <1>     pop rax
   192 00005EB0 48CF                <1>     iretq
   193                              <1> ctrlBreak:
   194                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   195 00005EB2 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   196 00005EB9 48CF                <1>     iretq
   197                              <1> 
   198                              <1> clkDriver:
   199 00005EBB 50                  <1>     push rax
   200 00005EBC 53                  <1>     push rbx
   201 00005EBD 51                  <1>     push rcx
   202 00005EBE 52                  <1>     push rdx
   203 00005EBF 56                  <1>     push rsi
   204 00005EC0 55                  <1>     push rbp
   205 00005EC1 488B1D8FFEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   206 00005EC8 B003                <1>     mov al, 03h ;Unknown Command
   207 00005ECA 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   208 00005ECE 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   209                              <1> 
   210 00005ED0 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   211 00005ED3 3C04                <1>     cmp al, 04h
   212 00005ED5 7437                <1>     jz .clkRead
   213 00005ED7 3C06                <1>     cmp al, 06h
   214 00005ED9 0F8494000000        <1>     jz .clkInputStatus
   215 00005EDF 3C07                <1>     cmp al, 07h
   216 00005EE1 0F8498000000        <1>     jz .clkFlushInputBuffers
   217 00005EE7 3C08                <1>     cmp al, 08h
   218 00005EE9 0F84A0000000        <1>     jz .clkWrite
   219 00005EEF 3C09                <1>     cmp al, 09h
   220 00005EF1 0F8498000000        <1>     jz .clkWrite
   221 00005EF7 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   222                              <1> .clkNotFunctioning:
   223 00005EF9 B002                <1>     mov al, 02h ;Device not ready error
   224                              <1> .clkWriteErrorCode:
   225 00005EFB B480                <1>     mov ah, 80h ;Set error bit
   226 00005EFD 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   227                              <1> .clkExit:
   228 00005F01 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   229 00005F07 5D                  <1>     pop rbp
   230 00005F08 5E                  <1>     pop rsi
   231 00005F09 5A                  <1>     pop rdx
   232 00005F0A 59                  <1>     pop rcx
   233 00005F0B 5B                  <1>     pop rbx
   234 00005F0C 58                  <1>     pop rax
   235 00005F0D C3                  <1>     ret
   236                              <1> 
   237                              <1> .clkRead:           ;Function 4
   238 00005F0E B005                <1>     mov al, 05h ;Bad request structure length?
   239 00005F10 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   240 00005F13 75E6                <1>     jne .clkWriteErrorCode
   241                              <1> 
   242 00005F15 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   243 00005F18 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   244 00005F1C 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   245 00005F23 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   246 00005F27 30E4                <1>     xor ah, ah
   247 00005F29 CD3A                <1>     int 3Ah         ;Read the system timer
   248 00005F2B 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   249 00005F2D 740D                <1>     jz .clkr1       ;Nope, now just time 
   250 00005F2F 30E4                <1>     xor ah, ah
   251                              <1>     ;This works as al should keep count of the # of days passed since last read
   252 00005F31 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   253 00005F35 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   254                              <1> .clkr1:
   255 00005F3C 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   256 00005F3F 0FB7D2              <1>     movzx edx, dx
   257 00005F42 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   258 00005F44 89D0                <1>     mov eax, edx
   259 00005F46 31D2                <1>     xor edx, edx
   260 00005F48 89D8                <1>     mov eax, ebx
   261 00005F4A B944040000          <1>     mov ecx, 1092   
   262 00005F4F F7F1                <1>     div ecx
   263 00005F51 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   264 00005F54 89D0                <1>     mov eax, edx    ;Get remainder in eax
   265 00005F56 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   266 00005F5A 31D2                <1>     xor edx, edx
   267 00005F5C B95B000000          <1>     mov ecx, 91 ;5*18.2
   268 00005F61 F7F1                <1>     div ecx
   269 00005F63 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   270 00005F66 89D0                <1>     mov eax, edx    ;Get remainder in eax
   271                              <1>     ;lea eax, dword [eax + 4*eax]
   272                              <1>     ;add eax, edx    ;Essentially multiply by 6
   273 00005F68 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   274 00005F6B 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   275 00005F6E E98EFFFFFF          <1>     jmp .clkExit
   276                              <1> 
   277                              <1> .clkInputStatus:    ;Function 6
   278                              <1> ;Always return ready
   279 00005F73 B005                <1>     mov al, 05h ;Bad request structure length?
   280 00005F75 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   281 00005F78 7581                <1>     jne .clkWriteErrorCode
   282 00005F7A E982FFFFFF          <1>     jmp .clkExit
   283                              <1> .clkFlushInputBuffers:  ;Function 7
   284                              <1> ;Always return done immediately
   285 00005F7F B005                <1>     mov al, 05h ;Bad request structure length?
   286 00005F81 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   287 00005F84 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   288 00005F8A E972FFFFFF          <1>     jmp .clkExit
   289                              <1> 
   290                              <1> .clkWrite:          ;Functions 8 and 9
   291 00005F8F B005                <1>     mov al, 05h ;Bad request structure length?
   292 00005F91 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   293 00005F94 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   294                              <1> 
   295 00005F9A 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   296 00005F9D 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   297 00005FA1 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   298 00005FA5 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   299                              <1> 
   300 00005FAC 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   301 00005FAE 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   302 00005FB2 B105                <1>     mov cl, 5
   303 00005FB4 F6F1                <1>     div cl          ;Divide al by 5
   304 00005FB6 30E4                <1>     xor ah, ah      ;Remove the remainder
   305 00005FB8 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   306                              <1> ;Using the decimal part of this formula for the low count
   307                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   308 00005FBA 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   309 00005FBD B912000000          <1>     mov ecx, 18
   310 00005FC2 F7E1                <1>     mul ecx  
   311 00005FC4 01C3                <1>     add ebx, eax
   312                              <1> 
   313 00005FC6 31D2                <1>     xor edx, edx
   314 00005FC8 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   315 00005FCC B944040000          <1>     mov ecx, 1092
   316 00005FD1 F7E1                <1>     mul ecx
   317 00005FD3 01C3                <1>     add ebx, eax
   318 00005FD5 89DA                <1>     mov edx, ebx    ;edx now has low count
   319 00005FD7 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   320 00005FDB B401                <1>     mov ah, 01h     ;Set the system time
   321 00005FDD CD3A                <1>     int 3Ah
   322                              <1> 
   323 00005FDF 4889F3              <1>     mov rbx, rsi
   324 00005FE2 E91AFFFFFF          <1>     jmp .clkExit
   325                              <1> 
   326                              <1> .clkBCDtoHex:
   327                              <1> ;Converts a BCD value to a Hex byte
   328                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   329 00005FE7 51                  <1>     push rcx
   330 00005FE8 0FB6C0              <1>     movzx eax, al   ;Zero extend
   331 00005FEB 89C1                <1>     mov ecx, eax    ;Save al in ecx
   332 00005FED 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   333 00005FF2 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   334 00005FF8 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   335                              <1> .cbth0:
   336 00005FFB 050A000000          <1>     add eax, 10
   337 00006000 E2F9                <1>     loop .cbth0
   338 00006002 59                  <1>     pop rcx
   339 00006003 C3                  <1>     ret
   340                              <1> 
   341                              <1> .clkHexToBCD:
   342                              <1> ;Converts a Hex byte into two BCD digits
   343                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   344 00006004 51                  <1>     push rcx
   345 00006005 0FB6C0              <1>     movzx eax, al   ;Zero extend
   346 00006008 31C9                <1>     xor ecx, ecx
   347                              <1> .chtb0:
   348 0000600A 3D0A000000          <1>     cmp eax, 10
   349 0000600F 7209                <1>     jb .chtb1
   350 00006011 2D0A000000          <1>     sub eax, 10
   351 00006016 FFC1                <1>     inc ecx
   352 00006018 EBF0                <1>     jmp short .chtb0
   353                              <1> .chtb1:
   354 0000601A C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   355 0000601D 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   356 0000601F 59                  <1>     pop rcx
   357 00006020 C3                  <1>     ret
   358 00006021 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   359                              <1> 
   360                              <1> ;COM Driver headers and main interrupt strat
   361                              <1> com1Intr:
   362 00006023 C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   363 0000602A EB19                <1>     jmp short comIntr
   364                              <1> com2Intr:
   365 0000602C C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   366 00006033 EB10                <1>     jmp short comIntr
   367                              <1> com3Intr:
   368 00006035 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   369 0000603C EB07                <1>     jmp short comIntr
   370                              <1> com4Intr:
   371 0000603E C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   372                              <1> comIntr:
   373 00006045 50                  <1>     push rax
   374 00006046 53                  <1>     push rbx
   375 00006047 51                  <1>     push rcx
   376 00006048 52                  <1>     push rdx
   377 00006049 56                  <1>     push rsi
   378 0000604A 57                  <1>     push rdi
   379 0000604B 488B1D05FDFFFF      <1>     mov rbx, qword [reqHdrPtr]
   380 00006052 B003                <1>     mov al, 03h ;Unknown Command
   381 00006054 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   382 00006058 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   383                              <1> 
   384 0000605A 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   385 0000605D 3C04                <1>     cmp al, 4   ;Read Character(s)
   386 0000605F 7462                <1>     jz .comRead
   387 00006061 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   388 00006063 0F849B000000        <1>     jz .comNondestructiveRead   
   389 00006069 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   390 0000606B 0F8484000000        <1>     jz .comReadInputStatus
   391 00006071 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   392 00006073 0F84B9000000        <1>     jz .comFlushInputBuffers
   393 00006079 3C08                <1>     cmp al, 8
   394 0000607B 0F84DB000000        <1>     jz .comWrite
   395 00006081 3C09                <1>     cmp al, 9
   396 00006083 0F84D3000000        <1>     jz .comWrite
   397 00006089 3C0A                <1>     cmp al, 0Ah
   398 0000608B 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   399 00006091 EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   400                              <1> .comErrorNoCount:
   401 00006093 B002                <1>     mov al, 02h ;Unknown device
   402 00006095 EB19                <1>     jmp short .comWriteErrorCode
   403                              <1> .comReadError:
   404 00006097 BA0B000000          <1>     mov edx, 0Bh
   405                              <1> .comWriteError:
   406 0000609C BA0A000000          <1>     mov edx, 0Ah
   407                              <1> .comError:
   408 000060A1 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   409 000060A4 B902000000          <1>     mov ecx, 02h    ;Unknown device
   410 000060A9 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   411 000060AB 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   412 000060AE 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   413                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   414 000060B0 B480                <1>     mov ah, 80h ;Set error bit
   415 000060B2 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   416                              <1> .comExit:
   417 000060B6 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   418 000060BC 5F                  <1>     pop rdi
   419 000060BD 5E                  <1>     pop rsi
   420 000060BE 5A                  <1>     pop rdx
   421 000060BF 59                  <1>     pop rcx
   422 000060C0 5B                  <1>     pop rbx
   423 000060C1 58                  <1>     pop rax
   424 000060C2 C3                  <1>     ret
   425                              <1> 
   426                              <1> .comRead:
   427 000060C3 B005                <1>     mov al, 05h ;Bad request structure length?
   428 000060C5 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   429 000060C8 75E6                <1>     jne .comWriteErrorCode
   430                              <1> 
   431 000060CA 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   432 000060CE 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   433                              <1> .cr1:
   434 000060D0 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   435 000060D3 741B                <1>     je .cre2
   436                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   437 000060D5 B802000000          <1>     mov eax, 02h    ;Recieve 
   438 000060DA 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   439 000060E0 6698                <1>     cbw     ;Zero extend to upper byte
   440 000060E2 CD34                <1>     int 34h ;Recieve Char
   441 000060E4 72BB                <1>     jc .comError
   442 000060E6 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   443 000060E9 74EA                <1>     je .cr11
   444 000060EB AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   445 000060EC FFC1                <1>     inc ecx
   446 000060EE EBE0                <1>     jmp short .cr1
   447                              <1> .cre2:
   448 000060F0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   449 000060F3 EBC1                <1>     jmp short .comExit
   450                              <1> 
   451                              <1> .comReadInputStatus:
   452 000060F5 B005                <1>     mov al, 05h ;Bad request structure length?
   453 000060F7 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   454 000060FA 75B4                <1>     jne .comWriteErrorCode
   455 000060FC 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   456 00006102 EBB2                <1>     jmp short .comExit
   457                              <1> 
   458                              <1> .comNondestructiveRead:
   459                              <1> ;Acts like a "read one character if there is one" function
   460 00006104 B005                <1>     mov al, 05h ;Bad request structure length?
   461 00006106 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   462 00006109 75A5                <1>     jne .comWriteErrorCode
   463                              <1> .cndr1:
   464 0000610B B802000000          <1>     mov eax, 02h    ;Recieve 
   465 00006110 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   466 00006116 6698                <1>     cbw     ;Zero extend to upper byte
   467 00006118 CD34                <1>     int 34h ;Recieve Char
   468 0000611A 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   469 00006120 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   470 00006123 7405                <1>     je .cndr2
   471 00006125 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Get next char
   472 00006128 EB8C                <1>     jmp short .comExit
   473                              <1> .cndr2:
   474 0000612A 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 200h ;Busy bit set
   475 00006130 EB84                <1>     jmp short .comExit
   476                              <1> 
   477                              <1> .comFlushInputBuffers:
   478 00006132 B005                <1>     mov al, 05h ;Bad request structure length?
   479 00006134 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   480 00006137 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   481                              <1> .cfib0:
   482 0000613D 8A1584000000        <1>     mov dl, byte [.comDevice]
   483 00006143 6698                <1>     cbw
   484 00006145 B802000000          <1>     mov eax, 02h    ;Recieve
   485 0000614A CD34                <1>     int 34h
   486 0000614C 0F8241FFFFFF        <1>     jc .comErrorNoCount
   487 00006152 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   488 00006155 75E6                <1>     jne .cfib0
   489 00006157 E95AFFFFFF          <1>     jmp .comExit
   490                              <1> 
   491                              <1> .comWrite:
   492 0000615C B005                <1>     mov al, 05h ;Bad request structure length?
   493 0000615E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   494 00006161 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   495                              <1> 
   496 00006167 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   497 0000616B 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   498                              <1> .cw1: 
   499 0000616D 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   500 00006170 7417                <1>     je .cw2
   501 00006172 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   502 00006173 B401                <1>     mov ah, 01h ;Move function number into ah
   503 00006175 8A154C000000        <1>     mov dl, byte [.comDevice]
   504 0000617B 6698                <1>     cbw     ;Zero extend to upper byte
   505 0000617D CD34                <1>     int 34h ;Transmit char
   506 0000617F 0F821CFFFFFF        <1>     jc .comError
   507 00006185 FFC1                <1>     inc ecx
   508 00006187 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   509                              <1> .cw2:
   510 00006189 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   511 0000618C E925FFFFFF          <1>     jmp .comExit
   512                              <1> 
   513                              <1> .comOutputStatus:
   514                              <1> ;Read MODEM status
   515 00006191 B005                <1>     mov al, 05h ;Bad request structure length?
   516 00006193 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   517 00006196 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   518                              <1> 
   519 0000619C 8A1525000000        <1>     mov dl, byte [.comDevice]
   520 000061A2 6698                <1>     cbw     ;Zero extend to upper byte
   521 000061A4 B403                <1>     mov ah, 03h     ;Get status
   522 000061A6 CD34                <1>     int 34h
   523 000061A8 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   524 000061AE 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   525 000061B3 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   526 000061B6 F7D0                <1>     not eax      ;Bitwise inversion
   527 000061B8 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   528 000061BD 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   529 000061C2 E9EFFEFFFF          <1>     jmp .comExit
   530 000061C7 00                  <1> .comDevice   db 0
    45                                  %include "./Source/Drivers/diskDrv.asm"
    46                              <1> msdDriver:
    47 000061C8 50                  <1>     push rax
    48 000061C9 53                  <1>     push rbx
    49 000061CA 51                  <1>     push rcx
    50 000061CB 52                  <1>     push rdx
    51 000061CC 56                  <1>     push rsi
    52 000061CD 57                  <1>     push rdi
    53 000061CE 55                  <1>     push rbp
    54 000061CF 4150                <1>     push r8
    55 000061D1 488B1D7FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    56 000061D8 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    57 000061DC B003                <1>     mov al, drvBadCmd
    58 000061DE 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    59 000061E4 B001                <1>     mov al, drvBadUnit 
    60 000061E6 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    61 000061EA 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    62 000061F0 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    63 000061F7 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    64 000061FB C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    65 000061FE 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    66 00006202 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    67 00006206 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    68 00006208 488D0D9A000000      <1>     lea rcx, .msdTable
    69 0000620F 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    70 00006213 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    71 00006215 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    72 00006217 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    73 0000621A FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    74                              <1> .msdDriverExit:
    75 0000621C 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    76 00006222 4158                <1>     pop r8
    77 00006224 5D                  <1>     pop rbp
    78 00006225 5F                  <1>     pop rdi
    79 00006226 5E                  <1>     pop rsi
    80 00006227 5A                  <1>     pop rdx
    81 00006228 59                  <1>     pop rcx
    82 00006229 5B                  <1>     pop rbx
    83 0000622A 58                  <1>     pop rax
    84 0000622B C3                  <1>     ret
    85                              <1> 
    86                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    87 0000622C 4889FB              <1>     mov rbx, rdi
    88 0000622F 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    89 00006232 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    90 00006234 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    91                              <1> ;Now fall through to general error
    92                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    93 00006237 B401                <1>     mov ah, 01h
    94 00006239 CD33                <1>     int 33h ;Read status of last operation
    95 0000623B 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    96 0000623E B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    97 00006240 7460                <1>     je .msdWriteErrorCode 
    98 00006242 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    99 00006244 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   100 00006247 7459                <1>     je .msdWriteErrorCode 
   101 00006249 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   102 0000624C 7454                <1>     je .msdWriteErrorCode
   103                              <1> ;Device Not Ready
   104 0000624E B002                <1>     mov al, 02h  ;Device not ready code
   105 00006250 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   106 00006253 744D                <1>     je .msdWriteErrorCode
   107 00006255 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   108 00006259 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   109                              <1> ;Write Protected
   110 0000625D 30C0                <1>     xor al, al
   111 0000625F 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   112 00006264 743C                <1>     je .msdWriteErrorCode
   113                              <1> ;CRC Error
   114 00006266 B004                <1>     mov al, 04h     ;CRC error code
   115 00006268 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   116 0000626D 7433                <1>     je .msdWriteErrorCode
   117 0000626F 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   118 00006274 742C                <1>     je .msdWriteErrorCode
   119 00006276 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   120 0000627B 7425                <1>     je .msdWriteErrorCode
   121                              <1> ;Seek Error
   122 0000627D B006                <1>     mov al, 06h     ;Seek error code
   123 0000627F 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   124 00006282 741E                <1>     je .msdWriteErrorCode
   125                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   126                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   127 00006284 B007                <1>     mov al, 07h
   128 00006286 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   129 00006289 7417                <1>     je .msdWriteErrorCode
   130                              <1> ;Sector Not Found
   131 0000628B B008                <1>     mov al, 08h     ;Sector not found code
   132 0000628D 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   133 00006290 7410                <1>     je .msdWriteErrorCode
   134                              <1> ;Write faults
   135 00006292 B00A                <1>     mov al, 0Ah     ;Write fault
   136 00006294 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   137 00006297 7409                <1>     je .msdWriteErrorCode
   138                              <1> ;Read faults
   139 00006299 B00B                <1>     mov al, 0Bh     ;Read fault
   140 0000629B 80F911              <1>     cmp cl, 11h     ;Read error
   141 0000629E 7402                <1>     je .msdWriteErrorCode
   142                              <1> ;General Errors
   143 000062A0 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   144                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   145 000062A2 B480                <1>     mov ah, 80h ;Set error bit
   146 000062A4 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   147 000062A8 C3                  <1>     ret ;Return to set done bit
   148                              <1> .msdTable:
   149 000062A9 0000                <1>     dw 0                            ;Function 0
   150 000062AB 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   151 000062AD 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   152 000062AF 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   153 000062B1 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   154 000062B3 0000                <1>     dw 0                            ;Function 5
   155 000062B5 0000                <1>     dw 0                            ;Function 6
   156 000062B7 0000                <1>     dw 0                            ;Function 7
   157 000062B9 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   158 000062BB 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   159 000062BD 0000                <1>     dw 0                            ;Function 10
   160 000062BF 0000                <1>     dw 0                            ;Function 11
   161 000062C1 C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   162 000062C3 D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   163 000062C5 ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   164 000062C7 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   165 000062C9 0000                <1>     dw 0                            ;Function 16
   166 000062CB 0000                <1>     dw 0                            ;Function 17
   167 000062CD 0000                <1>     dw 0                            ;Function 18
   168 000062CF 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   169 000062D1 0000                <1>     dw 0                            ;Function 20
   170 000062D3 0000                <1>     dw 0                            ;Function 21
   171 000062D5 0000                <1>     dw 0                            ;Function 22
   172 000062D7 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   173 000062D9 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   174                              <1> 
   175                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   176                              <1> .msdMedChk:          ;Function 1
   177 000062DB B005                <1>     mov al, 05h ;Bad request structure length
   178 000062DD 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   179 000062E0 75C0                <1>     jne .msdWriteErrorCode
   180                              <1> 
   181 000062E2 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   182 000062E7 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   183 000062EE 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   184 000062F1 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   185 000062F4 753F                <1>     jnz .mmcNoChange
   186                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   187 000062F6 B416                <1>     mov ah, 16h 
   188 000062F8 CD33                <1>     int 33h
   189 000062FA 0F8237FFFFFF        <1>     jc .msdGenDiskError
   190 00006300 80FC80              <1>     cmp ah, 80h
   191 00006303 740E                <1>     je .mmcNoChangeLine
   192 00006305 80FC86              <1>     cmp ah, 86h
   193 00006308 7409                <1>     je .mmcNoChangeLine
   194 0000630A 84E4                <1>     test ah, ah ;No change?
   195 0000630C 7427                <1>     jz .mmcNoChange
   196 0000630E F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   197 00006311 750D                <1>     jnz .mmcChange
   198                              <1> ;If nothing, fall through and test manually, should never happen though
   199                              <1> .mmcNoChangeLine:
   200                              <1> ;Now we test Media Descriptor
   201 00006313 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   202 00006318 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   203 0000631B 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   204 0000631E 7410                <1>     je .mmcUnsure
   205                              <1> .mmcChange:
   206 00006320 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   207 00006324 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   208 0000632B 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   209                              <1>     ;Check here if there were any open handles on the device when it was changed
   210 0000632F C3                  <1>     ret
   211                              <1> .mmcUnsure:
   212 00006330 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   213 00006334 C3                  <1>     ret
   214                              <1> .mmcNoChange:
   215 00006335 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   216 00006339 C3                  <1>     ret
   217                              <1> 
   218                              <1> 
   219                              <1> .msdBuildBPB:        ;Function 2
   220 0000633A B005                <1>     mov al, 05h ;Bad request structure length
   221 0000633C 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   222 0000633F 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   223                              <1> 
   224 00006345 4889DE              <1>     mov rsi, rbx
   225 00006348 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   226 0000634D 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   227 00006354 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   228 00006357 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   229 0000635B 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   230 0000635D 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   231 00006360 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   232 00006365 CD33                <1>     int 33h
   233 00006367 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   234                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   235 0000636D 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   236 00006371 7418                <1>     je .mbbpb0
   237 00006373 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   238 00006377 7412                <1>     je .mbbpb0
   239 00006379 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   240 0000637D 740C                <1>     je .mbbpb0
   241 0000637F 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   242 00006383 B007                <1>     mov al, 07h ;Unknown media error code
   243 00006385 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   244                              <1> .mbbpb0:
   245 0000638B 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   246 0000638E 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   247 00006393 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   248 0000639A 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   249 0000639E 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   250 000063A1 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   251 000063A5 B90F000000          <1>     mov ecx, bpbEx_size/8
   252 000063AA F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   253 000063AD C3                  <1>     ret
   254                              <1> .msdIOCTLRead:       ;Function 3, returns done
   255 000063AE B005                <1>     mov al, drvBadDrvReq
   256 000063B0 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   257 000063B3 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   258 000063B9 C3                  <1>     ret
   259                              <1> .msdRead:            ;Function 4
   260                              <1> ;Will read one sector at a time.
   261 000063BA B005                <1>     mov al, 05h ;Bad request structure length
   262 000063BC 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   263 000063BF 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   264                              <1> 
   265 000063C5 4889DF              <1>     mov rdi, rbx
   266 000063C8 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   267                              <1> .msdr0:
   268 000063CA B682                <1>     mov dh, 82h ;LBA Read Sectors
   269 000063CC E841010000          <1>     call .msdBlkIOCommon
   270 000063D1 0F8255FEFFFF        <1>     jc .msdIOError
   271 000063D7 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   272 000063DF 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   273 000063E7 FFC6                <1>     inc esi
   274 000063E9 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   275 000063EC 75DC                <1>     jne .msdr0
   276 000063EE 4889FB              <1>     mov rbx, rdi
   277 000063F1 C3                  <1>     ret
   278                              <1> .msdWrite:           ;Function 8
   279                              <1> ;Will write one sector at a time.
   280 000063F2 B005                <1>     mov al, 05h ;Bad request structure length
   281 000063F4 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   282 000063F7 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   283                              <1> 
   284 000063FD 4889DF              <1>     mov rdi, rbx
   285 00006400 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   286                              <1> .msdw0:
   287 00006402 B683                <1>     mov dh, 83h ;LBA Write Sectors
   288 00006404 E809010000          <1>     call .msdBlkIOCommon
   289 00006409 0F821DFEFFFF        <1>     jc .msdIOError
   290 0000640F 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   291 00006417 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   292 0000641F FFC6                <1>     inc esi
   293 00006421 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   294 00006424 75DC                <1>     jne .msdw0
   295 00006426 4889FB              <1>     mov rbx, rdi
   296 00006429 C3                  <1>     ret
   297                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   298                              <1> ;Will write one sector at a time and then verify it.
   299 0000642A B005                <1>     mov al, 05h ;Bad request structure length
   300 0000642C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   301 0000642F 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   302                              <1> 
   303 00006435 4889DF              <1>     mov rdi, rbx
   304 00006438 31F6                <1>     xor esi, esi  ;Set counter to zero
   305                              <1> .msdwv0:
   306 0000643A B683                <1>     mov dh, 83h ;LBA Write Sectors
   307 0000643C E8D1000000          <1>     call .msdBlkIOCommon
   308 00006441 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   309 00006447 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   310 00006449 E8C4000000          <1>     call .msdBlkIOCommon
   311 0000644E 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   312 00006454 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   313 0000645C 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   314 00006464 FFC6                <1>     inc esi
   315 00006466 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   316 00006469 75CF                <1>     jne .msdwv0
   317 0000646B 4889FB              <1>     mov rbx, rdi
   318 0000646E C3                  <1>     ret
   319                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   320 0000646F B005                <1>     mov al, drvBadDrvReq
   321 00006471 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   322 00006474 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   323                              <1> 
   324 0000647A C3                  <1>     ret
   325                              <1> .msdDevOpen:         ;Function 13
   326 0000647B B005                <1>     mov al, drvBadDrvReq
   327 0000647D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   328 00006480 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   329                              <1> 
   330 00006486 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   331 0000648B 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   332 00006492 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   333 00006495 C3                  <1>     ret
   334                              <1> .msdDevClose:        ;Function 14
   335 00006496 B005                <1>     mov al, drvBadDrvReq
   336 00006498 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   337 0000649B 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   338                              <1> 
   339 000064A1 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   340 000064A6 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   341 000064AD FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   342 000064B0 C3                  <1>     ret
   343                              <1> .msdRemovableMedia:  ;Function 15
   344 000064B1 B005                <1>     mov al, drvBadDrvReq
   345 000064B3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   346 000064B6 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   347                              <1> 
   348 000064BC 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   349 000064C1 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   350 000064C8 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   351 000064CB B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   352 000064D0 31D2                <1>     xor edx, edx    ;Busy bit clear
   353 000064D2 A880                <1>     test al, 80h
   354 000064D4 0F44CA              <1>     cmovz ecx, edx
   355 000064D7 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   356 000064DB C3                  <1>     ret
   357                              <1> .msdGenericIOCTL:    ;Function 19
   358 000064DC B005                <1>     mov al, drvBadDrvReq
   359 000064DE 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   360 000064E1 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   361                              <1> 
   362 000064E7 C3                  <1>     ret
   363                              <1> .msdGetLogicalDev:   ;Function 23
   364 000064E8 B005                <1>     mov al, drvBadDrvReq
   365 000064EA 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   366 000064ED 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   367                              <1> 
   368 000064F3 8A0541000000        <1>     mov al, byte [.msdCurDev]
   369 000064F9 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   370 000064FC C3                  <1>     ret
   371                              <1> .msdSetLogicalDev:   ;Function 24
   372 000064FD B005                <1>     mov al, drvBadDrvReq
   373 000064FF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   374 00006502 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   375                              <1> 
   376 00006508 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   377 0000650B 880529000000        <1>     mov byte [.msdCurDev], al
   378 00006511 C3                  <1>     ret
   379                              <1> 
   380                              <1> .msdBlkIOCommon:  ;Does block IO
   381                              <1> ;Called with rdi containing old rbx value and ah with function number
   382                              <1> ;rbp points to bpb
   383                              <1> ;Error handled by caller
   384                              <1> ;Sector count handled by caller
   385                              <1> ;Called with dh = BIOS function number
   386 00006512 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   387 00006517 8A90[3B650000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   388 0000651D 31C9                <1>     xor ecx, ecx
   389 0000651F 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   390 00006522 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   391 00006526 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   392 0000652A 88F4                <1>     mov ah, dh
   393 0000652C B001                <1>     mov al, 01h ;Do one sector at a time 
   394 0000652E CD33                <1>     int 33h
   395 00006530 C3                  <1>     ret
   396                              <1> 
   397 00006531 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   398                              <1> ;LASTDRIVE default is 5
   399                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   400                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   401 0000653A 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   402                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   403 0000653B 0001FFFFFF          <1> .msdBIOSmap  db 0, 1, -1, -1, -1 ;Translates DOS drive number to BIOS number
   404 00006540 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   405 00006545 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   405 0000654E 000000000000000000- <1>
   405 00006557 000000000000000000- <1>
   405 00006560 000000000000000000- <1>
   405 00006569 00000000            <1>
   406                              <1> .msdBPBblks  defaultBPB ;Add two default BPB's. If no remdrv, these are used
   406                              <2> .msdBPBblks :
   181 0000656D E9                  <2>  db 0E9h
   182 0000656E 00                  <2>  db 00h
   183 0000656F 90                  <2>  db 90h
   184 00006570 534350444F537631    <2>  db 'SCPDOSv1'
   185 00006578 0002                <2>  dw 0200h
   186 0000657A 01                  <2>  db 01h
   187 0000657B 0100                <2>  dw 0001h
   188 0000657D 02                  <2>  db 02h
   189 0000657E E000                <2>  dw 00E0h
   190 00006580 400B                <2>  dw 0B40h
   191 00006582 F0                  <2>  db 0F0h
   192 00006583 0900                <2>  dw 0009h
   193 00006585 1200                <2>  dw 0012h
   194 00006587 0200                <2>  dw 0002h
   195 00006589 00000000            <2>  dd 0
   196 0000658D 00000000            <2>  dd 0
   197 00006591 00                  <2>  db 00h
   198 00006592 00                  <2>  db 00h
   199 00006593 29                  <2>  db 29h
   200 00006594 00000000            <2>  dd 0
   201 00006598 4E4F204E414D452020- <2>  db 'NO NAME    '
   201 000065A1 2020                <2>
   202 000065A3 4641543132202020    <2>  db 'FAT12   '
   203 000065AB 000000000000000000- <2>  db 58 dup 0
   203 000065B4 000000000000000000- <2>
   203 000065BD 000000000000000000- <2>
   203 000065C6 000000000000000000- <2>
   203 000065CF 000000000000000000- <2>
   203 000065D8 000000000000000000- <2>
   203 000065E1 00000000            <2>
   407                              <1>              defaultBPB ;If remdrvs found, these are overridden
   181 000065E5 E9                  <2>  db 0E9h
   182 000065E6 00                  <2>  db 00h
   183 000065E7 90                  <2>  db 90h
   184 000065E8 534350444F537631    <2>  db 'SCPDOSv1'
   185 000065F0 0002                <2>  dw 0200h
   186 000065F2 01                  <2>  db 01h
   187 000065F3 0100                <2>  dw 0001h
   188 000065F5 02                  <2>  db 02h
   189 000065F6 E000                <2>  dw 00E0h
   190 000065F8 400B                <2>  dw 0B40h
   191 000065FA F0                  <2>  db 0F0h
   192 000065FB 0900                <2>  dw 0009h
   193 000065FD 1200                <2>  dw 0012h
   194 000065FF 0200                <2>  dw 0002h
   195 00006601 00000000            <2>  dd 0
   196 00006605 00000000            <2>  dd 0
   197 00006609 00                  <2>  db 00h
   198 0000660A 00                  <2>  db 00h
   199 0000660B 29                  <2>  db 29h
   200 0000660C 00000000            <2>  dd 0
   201 00006610 4E4F204E414D452020- <2>  db 'NO NAME    '
   201 00006619 2020                <2>
   202 0000661B 4641543132202020    <2>  db 'FAT12   '
   203 00006623 000000000000000000- <2>  db 58 dup 0
   203 0000662C 000000000000000000- <2>
   203 00006635 000000000000000000- <2>
   203 0000663E 000000000000000000- <2>
   203 00006647 000000000000000000- <2>
   203 00006650 000000000000000000- <2>
   203 00006659 00000000            <2>
   408 0000665D 000000000000000000- <1>              db 3*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   408 00006666 000000000000000000- <1>
   408 0000666F 000000000000000000- <1>
   408 00006678 000000000000000000- <1>
   408 00006681 000000000000000000- <1>
   408 0000668A 000000000000000000- <1>
   408 00006693 000000000000000000- <1>
   408 0000669C 000000000000000000- <1>
   408 000066A5 000000000000000000- <1>
   408 000066AE 000000000000000000- <1>
   408 000066B7 000000000000000000- <1>
   408 000066C0 000000000000000000- <1>
   408 000066C9 000000000000000000- <1>
   408 000066D2 000000000000000000- <1>
   408 000066DB 000000000000000000- <1>
   408 000066E4 000000000000000000- <1>
   408 000066ED 000000000000000000- <1>
   408 000066F6 000000000000000000- <1>
   408 000066FF 000000000000000000- <1>
   408 00006708 000000000000000000- <1>
   408 00006711 000000000000000000- <1>
   408 0000671A 000000000000000000- <1>
   408 00006723 000000000000000000- <1>
   408 0000672C 000000000000000000- <1>
   408 00006735 000000000000000000- <1>
   408 0000673E 000000000000000000- <1>
   408 00006747 000000000000000000- <1>
   408 00006750 000000000000000000- <1>
   408 00006759 000000000000000000- <1>
   408 00006762 000000000000000000- <1>
   408 0000676B 000000000000000000- <1>
   408 00006774 000000000000000000- <1>
   408 0000677D 000000000000000000- <1>
   408 00006786 000000000000000000- <1>
   408 0000678F 000000000000000000- <1>
   408 00006798 000000000000000000- <1>
   408 000067A1 000000000000000000- <1>
   408 000067AA 000000000000000000- <1>
   408 000067B3 000000000000000000- <1>
   408 000067BC 000000000000000000  <1>
   409                              <1> endptr equ $
    46                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    47                                  ;Paragraph alignment
    48                                  %include "./Source/BSS/dosDynaDataArea.asm"
    49                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    50                              <1> ; the MCB chain!
    51                              <1> ddaStart:
    52 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    53                              <1> 
    54                              <1> dosDynamicArea: ;Difference of this symbol with cfgFrame endPtr gives alloc size
    55                              <1> ;Create DPB chain of first 5 available DPB slots
    56 00000010 <res 35h>           <1> firstDPB        resb dpb_size   ;First two are always present
    57 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    58 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    59 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    60 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    61                              <1> 
    62                              <1> ;fcbsArray       resb sfth_size + 4*sft_size ;One header plus 4 SFT entries
    63                              <1> 
    64 00000119 <res 1C7h>          <1> cdsArray        resb 5*cds_size ;5 CDS's unless more are specified
    65                              <1> 
    66 000002E0 <res 30h>           <1> tmpBufHdr       resb bufferHdr_size
    67 00000310 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    68                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    69                              <1> cfgLoad:    ;This symbol is used to read config.sys here
    70                              <1> dynamicDataAreaLength equ $ - ddaStart
    70          ------------------  <1>  info: assembly required 1+12+2 passes

