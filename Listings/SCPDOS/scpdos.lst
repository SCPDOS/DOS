     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs and strucs
     5                                  %include "./Source/Include/driverStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     9                              <1> ; device driver related structures.                     ;
    10                              <1> ;-------------------------------------------------------;
    11                              <1> 
    12                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    13                              <1> 
    14 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    15 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    16 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    17 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    18 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    19                              <1> 
    20                              <1> endstruc
    21                              <1> 
    22                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    23                              <1> 
    24                              <1>     .hdrlen resb 1  ;Length of the request header
    25                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    26                              <1>     .cmdcde resb 1  ;Command code
    27                              <1>     .status resw 1  ;Status word
    28                              <1>     .devptr resq 1  ;Device queue pointer field
    29                              <1> 
    30                              <1> %endmacro
    31                              <1> ;Command Code equates
    32                              <1>     drvINIT         equ 0
    33                              <1>     drvMEDCHK       equ 1
    34                              <1>     drvBUILDBPB     equ 2
    35                              <1>     drvIOCTLREAD    equ 3
    36                              <1>     drvREAD         equ 4
    37                              <1>     drvNONDESTREAD  equ 5
    38                              <1>     drvINSTATUS     equ 6
    39                              <1>     drvFLUSHINBUF   equ 7
    40                              <1>     drvWRITE        equ 8
    41                              <1>     drvWRITEVERIFY  equ 9
    42                              <1>     drvOUTSTATUS    equ 10
    43                              <1>     drvFLUSHOUTBUF  equ 11
    44                              <1>     drvIOCTLWRITE   equ 12
    45                              <1>     drvOPEN         equ 13
    46                              <1>     drvCLOSE        equ 14
    47                              <1>     drvREMMEDCHECK  equ 15
    48                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    49                              <1>     drvIOCTL        equ 19
    50                              <1>     drvGETDRVMAP    equ 23
    51                              <1>     drvSETDRVMAP    equ 24
    52                              <1>     
    53                              <1> ;Driver Error equates 
    54                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    55                              <1>     drvBadUnit      equ 1   ;Unknown unit
    56                              <1>     drvNotReady     equ 2   ;Device not ready
    57                              <1>     drvBadCmd       equ 3   ;Unknown command
    58                              <1>     drvCRCErr       equ 4   ;CRC Error
    59                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    60                              <1>     drvBadSeek      equ 6   ;Seek error
    61                              <1>     drvBadMed       equ 7   ;Unknown media
    62                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    63                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    64                              <1>     drvWriteFault   equ 10  ;Write Fault
    65                              <1>     drvReadFault    equ 11  ;Read Fault
    66                              <1>     drvGenFault     equ 12  ;General Fault
    67                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    68                              <1> 
    69                              <1> ;Drive structures
    70                              <1> struc drvReqHdr
    71                              <1>     drvReqHdrM
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc initReqPkt  ;Init Request Packet
    75                              <1> 
    76                              <1>     drvReqHdrM   ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    77 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    78 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    79 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    80 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    85                              <1> 
    86                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    87 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    88 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    89 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    90                              <1> 
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    94                              <1> 
    95                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    96 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    97 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    98 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    99                              <1> 
   100                              <1> endstruc
   101                              <1> 
   102                              <1> struc ioReqPkt   ;IO Request Packet
   103                              <1> 
   104                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   105 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   106 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   107 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   108 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   109 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   110                              <1> 
   111                              <1> endstruc
   112                              <1> 
   113                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
   114                              <1>     
   115                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   116 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc statusReqPkt   ;Status Request Packet
   121                              <1> 
   122                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   129                              <1>      
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc openReqPkt ;Open Device Request Packet
   133                              <1> 
   134                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   135                              <1>      
   136                              <1> endstruc
   137                              <1> 
   138                              <1> struc closeReqPkt ;Close Device Request Packet
   139                              <1> 
   140                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   141                              <1>      
   142                              <1> endstruc
   143                              <1> 
   144                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   145                              <1> 
   146                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   147                              <1>      
   148                              <1> endstruc
   149                              <1> 
   150                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   151                              <1> 
   152                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   153 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   154 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   155 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   156 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   157 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   162                              <1>     
   163                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   164                              <1> 
   165                              <1> endstruc
   166                              <1> 
   167                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   168                              <1>     
   169                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   170                              <1> 
   171                              <1> endstruc
     6                                  %include "./Source/Include/fatStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous FAT driver   ;
    10                              <1> ; structures. exFAT will have it's own files at a later ;
    11                              <1> ; stage.                                                ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    17                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    18                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    19                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    20                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    21                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    22                              <1> ;-------------------------------------------------------;
    23                              <1> 
    24                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    25                              <1> 
    26 00000000 ??????              <1>     .jmpBoot    resb 3 
    27 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    28 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    29 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    30 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    31 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    32 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    33 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    34 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    35 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    36 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    37 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    38 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    39 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    40                              <1> 
    41 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    42 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    43 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    44 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    45 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    46 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    47                              <1> 
    48                              <1> endstruc
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    51                              <1> 
    52 00000000 ??????              <1>     .jmpBoot    resb 3
    53 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    54 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    55 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    56 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    57 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    58 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    59 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    60 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    61 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    62 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    63 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    64 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    65 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    66                              <1> 
    67 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    68 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    69 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    70 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    71 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    72 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    73 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    74                              <1> 
    75 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    76 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    77 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    78 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    79 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    80 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mbr
    85 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    86 000001B8 ????????            <1>     .diskID     resb 4
    87 000001BC ????                <1>     .reserved   resb 2
    88 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    89 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    90 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    91 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    92 000001FE ????                <1>     .mbrSig     resb 2
    93                              <1> endstruc
    94                              <1> 
    95                              <1> struc mbrEntry
    96 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    97 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    98 00000004 ??                  <1>     .ptnType    resb 1
    99 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   100 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   101 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc ebr
   105 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   106 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   107 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   108 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   109 000001FE ????                <1>     .mbrSig     resb 2
   110                              <1> endstruc
   111                              <1> 
   112                              <1> 
   113                              <1> struc fatDirEntry
   114                              <1> 
   115 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   116 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   121 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   122 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   127                              <1> 
   128                              <1> endstruc
   129                              <1> ;Directory attribute equates
   130                              <1>     dirReadOnly     equ 01h
   131                              <1>     dirHidden       equ 02h
   132                              <1>     dirSystem       equ 04h
   133                              <1>     dirVolumeID     equ 08h
   134                              <1>     dirDirectory    equ 10h
   135                              <1>     dirArchive      equ 20h
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1> 
   138                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   139                              <1> 
   140 00000000 ??????              <1>     .jmpBoot                resb 3 
   141 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   142 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   143 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   144 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   145 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   146 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   147 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   148 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   149 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   150 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   151 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   152 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   153 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   154 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   155 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   156 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   157 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   158 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   159                              <1> 
   160                              <1> endstruc
   161                              <1> 
   162                              <1> struc FSInfo
   163                              <1> 
   164 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   165 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   166 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   167 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   168 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   169 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   170 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   171                              <1> 
   172                              <1> endstruc
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)x
    27 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000005 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000007 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000008 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    32 0000000A ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000E ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000012 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000016 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001A ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000022 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000023 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000024 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002C ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000030 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Flags: Bit 15 set = Network drive
    69                              <1> ;        Bit 14 set = Physical drive
    70                              <1> ;        Bit 13 set = JOIN'ed drive
    71                              <1> ;        Bit 12 set = SUBST'ed drive
    72                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    73                              <1> endstruc
    74                              <1> ;CDS equates
    75                              <1>     cdsNetDrive     equ 8000h
    76                              <1>     cdsPhysDrive    equ 4000h
    77                              <1>     cdsJoinDrive    equ 2000h
    78                              <1>     cdsSubstDrive   equ 1000h
    79                              <1>     cdsRedirDrive   equ 0080h
    80                              <1> ;------------------------------------------------------------------------;
    81                              <1> ; The SFT is a way to allow applications to open file handles to files 
    82                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    83                              <1> ; under the first header, and then a second header will be linked to the 
    84                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    85                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    86                              <1> ; using the FCBS= command. Default FCBS=5.
    87                              <1> ;
    88                              <1> ; A file handle describes the file, and the location within the file that
    89                              <1> ; we are reading. The file handle can be manipulated without the file
    90                              <1> ; being in memory, thus allowing the user to access data without needing 
    91                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    92                              <1> ; accessing devices, by treating them as files with their drivers 
    93                              <1> ; responding and translating the manipulations of the file handle itself.
    94                              <1> ; Neither the driver nor the application should see or use the SFT for
    95                              <1> ; the handle, as it is subject to change (and will change when file 
    96                              <1> ; sharing provisions are included). The DOS will make requests to the 
    97                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    98                              <1> ; track of the information in the SFT entry for that handle. 
    99                              <1> ;
   100                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   101                              <1> ; can point to the same file. It all depends on what the applications 
   102                              <1> ; want to do with the File.
   103                              <1> ;
   104                              <1> ; !!!!IMPORTANT!!!!
   105                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   106                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   107                              <1> ;
   108                              <1> ;Each SFT may look like this:
   109                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   110                              <1> ;            |                |
   111                              <1> ;       wNumFiles*sft    wNumFiles*sft
   112                              <1> ;
   113                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   114                              <1> ; System FCBs.
   115                              <1> ;
   116                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   117                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   118                              <1> ;
   119                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   120                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   121                              <1> ;------------------------------------------------------------------------;
   122                              <1> struc sfth   ;System file table header
   123                              <1> ; This is the SFT header.
   124                              <1> ; This structure comes before the start of the first file in the array/table.
   125 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   126 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc sft
   130                              <1> ;This is the file struc itself
   131 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   132 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   133 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   134 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   135 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   136 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   137 00000013 ????                <1>     .wTime       resw 1    ;File Time
   138 00000015 ????                <1>     .wDate       resw 1    ;File Date
   139 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   140 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   141 0000001F ????                <1>     .wRelSect    resw 1    ;Rel sector in the last cluster accessed
   142 00000021 ????????            <1>     .dDirSect    resd 1    ;Rel number of sector containing directory entry 
   143 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   144 00000026 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   145 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   146 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   147                              <1> endstruc
   148                              <1> ;Open Mode equates
   149                              <1> ;Access modes   Bits[2:0]
   150                              <1>     ReadAccess      equ 0h
   151                              <1>     WriteAccess     equ 1h
   152                              <1>     RWAccess        equ 2h
   153                              <1> ;Bit 3 reserved 0
   154                              <1> ;Sharing modes  Bits[6:4]
   155                              <1>     CompatShare     equ 0h
   156                              <1>     denyRWShare     equ 10h
   157                              <1>     denyWriteShare  equ 20h
   158                              <1>     denyReadShare   equ 30h
   159                              <1>     denyNoneShare   equ 40h
   160                              <1> ;Bit 7 reserved 0
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> ;Critical Error handling
   163                              <1>     critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   164                              <1> ;Buffering on writes
   165                              <1>     noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file?
   167                              <1>     FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1>     readOnlyFile    equ 1h
   170                              <1>     hiddenFile      equ 2h
   171                              <1>     systemFile      equ 4h
   172                              <1>     volumeLabel     equ 8h
   173                              <1>     directoryFile   equ 10h ;Directory entry
   174                              <1>     archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1>     charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1>     charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1>     charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1>     charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1>     charDevFastOut  equ 10h ;If set, device supports INT 49h
   182                              <1>     devBinary       equ 20h ;If set, r/w device in Binary mode!!!
   183                              <1>     charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1>     blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   185                              <1>     devCharDev      equ 80h ;If set, it is a char device!
   186                              <1>     charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1>     devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1>     charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1>     blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   190                              <1>     devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   214                              <1>     .dataarea:             ;Points to the start of the data area
   215                              <1> endstruc
   216                              <1> ;Buffer Flag equates
   217                              <1>     dosBuffer   equ 1h  ;DOS data sector in buffer
   218                              <1>     fatBuffer   equ 2h  ;FAT sector in buffer
   219                              <1>     dirBuffer   equ 4h  ;Directory sector in buffer
   220                              <1>     dataBuffer  equ 8h  ;File Data sector in buffer
   221                              <1>     refBuffer   equ 20h ;Data in buffer referenced by an application
   222                              <1>     dirtyBuffer equ 40h ;Data in buffer modified by an application
   223                              <1> ;------------------------------------------------------------------------;
   224                              <1> ; Memory control block for each memory arena
   225                              <1> ;------------------------------------------------------------------------;
   226                              <1> struc mcb
   227 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   228 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   229 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   230 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   231                              <1>     .program:
   232                              <1> endstruc
   233                              <1> ;MCB equates
   234                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   235                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   236                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   237                              <1> mcbMarkCtn      equ "M"
   238                              <1> mcbMarkEnd      equ "Z"
   239                              <1> 
   240                              <1> memFirstFit     equ 0   ;First free block goes to application
   241                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   242                              <1> memLastFit      equ 2   ;Last free block goes to application
   243                              <1> 
   244                              <1> ;Owner = Para aligned address => Owning application PSP
   245                              <1> ;...To consider...
   246                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   247                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   248                              <1> ;------------------------------------------------------------------------;
   249                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   250                              <1> ; following order, thus allowing for return values to be placed in the 
   251                              <1> ; registers by accessing the caller register stack frame.
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> struc callerFrame
   254 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   255 00000008 ????????????????    <1>     .rbx    resq 1    
   256 00000010 ????????????????    <1>     .rcx    resq 1
   257 00000018 ????????????????    <1>     .rdx    resq 1
   258 00000020 ????????????????    <1>     .rsi    resq 1
   259 00000028 ????????????????    <1>     .rdi    resq 1
   260 00000030 ????????????????    <1>     .rbp    resq 1
   261 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   262 00000040 ????????????????    <1>     .r9     resq 1
   263                              <1> ;Pushed by Processor when invoked via Interrupt
   264 00000048 ????????????????    <1>     .rip    resq 1
   265 00000050 ????????????????    <1>     .cs     resq 1
   266 00000058 ????????????????    <1>     .flags  resq 1
   267                              <1> endstruc
   268                              <1> 
   269                              <1> %macro pushDOS 0
   270                              <1>     push r9
   271                              <1>     push r8
   272                              <1>     push rbp
   273                              <1>     push rdi
   274                              <1>     push rsi
   275                              <1>     push rdx
   276                              <1>     push rcx
   277                              <1>     push rbx
   278                              <1>     push rax
   279                              <1> %endmacro
   280                              <1> 
   281                              <1> %macro popDOS 0
   282                              <1>     pop rax
   283                              <1>     pop rbx
   284                              <1>     pop rcx
   285                              <1>     pop rdx
   286                              <1>     pop rsi
   287                              <1>     pop rdi
   288                              <1>     pop rbp
   289                              <1>     pop r8
   290                              <1>     pop r9
   291                              <1> %endmacro
   292                              <1> struc fcb
   293                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   294 00000000 ??                  <1>     .driveNum   resb 1
   295 00000001 ????????????????    <1>     .filename   resb 8
   296 00000009 ??????              <1>     .fileext    resb 3
   297 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   298                              <1> ;One block consists of 128 records, of size denoted in the below
   299 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   300 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   301 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   302 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   303 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   304 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   305 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   306 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   307 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   308                              <1>     ;If record size > 64, high byte is ignored.
   309                              <1>     ;Used for random read and write operations to find the right record
   310                              <1> endstruc
   311                              <1> 
   312                              <1> struc psp
   313 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   314 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   315 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   316 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   317 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   318 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   319 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   320 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   321 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   322 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   323 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   324 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   325 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   326                              <1> ;Extra handle arrays are grouped into a linked list
   327                              <1> ;The below are in the same place as in DOS
   328 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   329 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   330                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   331 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   332 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   333                              <1> endstruc
   334                              <1> 
   335                              <1> struc clkStruc
   336 00000000 ????                <1>     .dateWord   resw 1
   337 00000002 ??                  <1>     .minutes    resb 1
   338 00000003 ??                  <1>     .hours      resb 1
   339 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   340 00000005 ??                  <1>     .seconds    resb 1
   341                              <1> endstruc
   342                              <1> 
   343                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   344                              <1> ;for a space of 64Gb
   345                              <1> dosAPTsize  equ 60*4096
     8                                  %include "./Source/Debug/debSym.inc"
     9                              <1> ;This file will include the debuging symbols
    10                              <1> 
    11                              <1> %define true 1
    12                              <1> %define false 0
    13                              <1> 
    14                              <1> ;Switch the DEBUG to false in production!
    15                              <1> %define DEBUG true
    16                              <1> %define DPBINFO true
    17                              <1> %define REGS true
    18                              <1> 
    19                              <1> ;Use this space as the debug stack
    20                              <1> %define debStackTop 80000h
     9                                  %include "./Source/Include/dosError.inc"
    10                              <1> ;DOS Error codes
    11                              <1> 
    12                              <1> ;Extended Error Codes
    13                              <1> errInvFnc   equ 1   ;Invalid function number
    14                              <1> errFnf      equ 2   ;File not found
    15                              <1> errPnf      equ 3   ;Path not found
    16                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    17                              <1> errAccDen   equ 5   ;Access denied (to resource)
    18                              <1> errBadHdl   equ 6   ;Invalid handle
    19                              <1> errMCBbad   equ 7   ;MCB's destroyed
    20                              <1> errNoMem    equ 8   ;Insufficient memory
    21                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    22                              <1> errBadEnv   equ 10  ;Invalid environment
    23                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    24                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    25                              <1> errInvDat   equ 13  ;Invalid data
    26                              <1> ;           equ 14  ;Reserved
    27                              <1> errBadDrv   equ 15  ;Invalid drive specified
    28                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    29                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    30                              <1> errNoFil    equ 18  ;No more files
    31                              <1> ;The following are Driver error codes + 19
    32                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    33                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    34                              <1> errUnkUnt   equ 20  ;Unknown Unit
    35                              <1> errDrvNR    equ 21  ;Drive not ready
    36                              <1> errUnkCmd   equ 22  ;Unknown Command
    37                              <1> errCRCerr   equ 23  ;Data (CRC) error
    38                              <1> errBadRLn   equ 24  ;Bad request structure length
    39                              <1> errSekErr   equ 25  ;Seek error
    40                              <1> errUnkMed   equ 26  ;Unknown media type
    41                              <1> errSecNF    equ 27  ;Sector not Found
    42                              <1> errNoPap    equ 28  ;Printer out of paper
    43                              <1> errWF       equ 29  ;Write fault
    44                              <1> errRF       equ 30  ;Read fault
    45                              <1> errGF       equ 31  ;General fault
    46                              <1> ;Number 32-33 reserved
    47                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    48                              <1> errNoFCB    equ 35  ;FCB unavailable
    49                              <1> ;Numbers 36-82 reserved
    50                              <1> errFI24     equ 83  ;Fail on INT 24h
    51                              <1> ;Numbers 84-88 reserved
    52                              <1> ;-----------------------------------------------------------------------------
    53                              <1> ;Error Loci
    54                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    55                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    56                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    57                              <1> eLocSer     equ 4   ;Serial Device error
    58                              <1> eLocMem     equ 5   ;Related to RAM
    59                              <1> ;-----------------------------------------------------------------------------
    60                              <1> ;Error Actions
    61                              <1> eActRet     equ 1   ;Retry
    62                              <1> eActDRet    equ 2   ;Delay then retry
    63                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    64                              <1> eActAbt     equ 4   ;Abort with cleanup
    65                              <1> eActKil     equ 5   ;Abort without cleanup
    66                              <1> eActIgn     equ 6   ;Ignore error
    67                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    68                              <1> ;-----------------------------------------------------------------------------
    69                              <1> ;Error classes
    70                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    71                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    72                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    73                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    74                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    75                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    76                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requestss etc...
    77                              <1> eClsNotFnd  equ 8   ;Resource not found
    78                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    79                              <1> eClsLocked  equ 10  ;Resource Locked
    80                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    81                              <1> eClsClash   equ 12  ;Resource already exists!
    82                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  Segment .text align=1   ;Init code
    11                                  %include "./Source/Sysinit/sysInit.asm"
    12                              <1> ; We arrive here with the following values in the registers.
    13                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    14                              <1> ; dx  = Int 33h boot device number
    15                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    16                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    17 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    18 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    18 0000000B 909090909090909090- <1>
    18 00000014 909090909090909090- <1>
    18 0000001D 909090909090909090- <1>
    18 00000026 909090909090909090- <1>
    18 0000002F 909090909090909090- <1>
    18 00000038 909090909090909090- <1>
    18 00000041 909090909090909090- <1>
    18 0000004A 909090909090909090- <1>
    18 00000053 909090909090909090- <1>
    18 0000005C 909090909090909090- <1>
    18 00000065 909090909090909090- <1>
    18 0000006E 909090909090909090- <1>
    18 00000077 909090909090909090- <1>
    18 00000080 909090909090909090- <1>
    18 00000089 909090909090909090- <1>
    18 00000092 909090909090909090- <1>
    18 0000009B 909090909090909090- <1>
    18 000000A4 909090909090909090- <1>
    18 000000AD 909090909090909090- <1>
    18 000000B6 909090909090909090- <1>
    18 000000BF 909090909090909090- <1>
    18 000000C8 909090909090909090- <1>
    18 000000D1 909090909090909090- <1>
    18 000000DA 909090909090909090- <1>
    18 000000E3 909090909090909090- <1>
    18 000000EC 909090909090909090- <1>
    18 000000F5 909090909090909090- <1>
    18 000000FE 9090                <1>
    19                              <1> ;First move the alignment of the DOSSEG to 4Kb
    20 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    21 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    22 00000106 0F32                <1>     rdmsr
    23 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    24 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    25 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    26 00000110 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    27 00000113 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    28 0000011A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    29 00000121 89F8                <1>     mov eax, edi
    30 00000123 4889FA              <1>     mov rdx, rdi
    31 00000126 48C1EA20            <1>     shr rdx, 20h
    32 0000012A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    33 0000012C 5A                  <1>     pop rdx
    34                              <1> ;------------------------------------------------;
    35                              <1> ;              Connect Debugger                  ;
    36                              <1> ;------------------------------------------------;
    37                              <1> %if DEBUG
    38                              <1> ;Only connect if in debug mode
    39 0000012D B801C50000          <1>     mov eax, 0C501h ;Connect debugger
    40 00000132 CD35                <1>     int 35h
    41                              <1> %endif
    42                              <1> ;------------------------------------------------;
    43                              <1> ;           Sanitise the data area               ;
    44                              <1> ;------------------------------------------------;
    45 00000134 B9[EFD30300]        <1>     mov ecx, dSegLen
    46 00000139 30C0                <1>     xor al, al
    47 0000013B 57                  <1>     push rdi    ;Temp save rdi on the stack
    48 0000013C F3AA                <1>     rep stosb
    49 0000013E 5F                  <1>     pop rdi
    50                              <1> ;------------------------------------------------;
    51                              <1> ;          Start saving Basic DOS data           ;
    52                              <1> ;------------------------------------------------;
    53 0000013F 64881425[10C00300]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    54                              <1> ;Copy DOS to its final resting place
    55 00000147 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    55 0000014C [00C00300]          <1>
    56 00000150 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    56 00000155 [08C00300]          <1>
    57 00000159 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    58 0000015C 4881C7[EFD30300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    59 00000163 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    60 0000016A B900100000          <1>     mov ecx, 1000h
    61 0000016F F348A5              <1>     rep movsq
    62                              <1> 
    63 00000172 CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    64 00000174 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    65 00000178 664489C0            <1>     mov ax, r8w
    66 0000017C 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
    67 00000184 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    68 0000018C 64C60425[B2C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    68 00000194 05                  <1>
    69 00000195 64C60425[13C00300]- <1>     mov byte fs:[numLogDrv], 0     ;Number of logical drives
    69 0000019D 00                  <1>
    70 0000019E 64C60425[B4C00300]- <1>     mov byte fs:[numFiles], 5      ;Default 8 files, at start 5
    70 000001A6 05                  <1>
    71 000001A7 64C60425[B3C00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
    71 000001AF 01                  <1>
    72                              <1>     ;If no detected Int 33h devices, halt 
    73 000001B0 49C1E810            <1>     shr r8, 2*8
    74 000001B4 4584C0              <1>     test r8b, r8b
    75 000001B7 0F84430B0000        <1>     jz errorInit
    76                              <1> ;------------------------------------------------;
    77                              <1> ;          Add additional page tables            ;
    78                              <1> ;------------------------------------------------;
    79                              <1> ;This will allow for up to 64Gb of addressible space
    80 000001BD 4889EF              <1>     mov rdi, rbp
    81                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    82 000001C0 B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
    83 000001C5 57                  <1>     push rdi
    84 000001C6 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    84 000001CF 00                  <1>
    85                              <1> pdtLoop:
    86 000001D0 48AB                <1>     stosq
    87 000001D2 480500002000        <1>     add rax, 200000h
    88 000001D8 FFC9                <1>     dec ecx
    89 000001DA 75F4                <1>     jnz pdtLoop
    90 000001DC 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
    91                              <1> ;Now we add every 4kb page to the page directory pointer table
    92                              <1> ;15 4kb pages to consider
    93 000001DD 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
    94 000001E0 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
    95 000001E3 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
    96 000001EA 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
    97 000001F1 B93C000000          <1>     mov ecx, 60
    98 000001F6 480D03000000        <1>     or rax, 3h      ;present and r/w
    99                              <1> pdptLoop:
   100 000001FC 48AB                <1>     stosq
   101 000001FE 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   102 00000204 FFC9                <1>     dec ecx
   103 00000206 75F4                <1>     jnz pdptLoop
   104 00000208 0F20DF              <1>     mov rdi, cr3
   105 0000020B 0F22DF              <1>     mov cr3, rdi
   106                              <1> 
   107                              <1> ;------------------------------------------------;
   108                              <1> ;                   MCB inits                    ;
   109                              <1> ;------------------------------------------------;
   110                              <1> mcbInit:
   111 0000020E B820E80000          <1>     mov eax, 0E820h
   112 00000213 CD35                <1>     int 35h
   113                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   114 00000215 E808010000          <1>     call .mcbFindAddress
   115 0000021A 7349                <1>     jnc .mcbi1  ;If found, proceed
   116                              <1>     ;Here, we try use E801h
   117 0000021C B801E80000          <1>     mov eax, 0E801h
   118 00000221 CD35                <1>     int 35h
   119 00000223 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   120 00000226 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   121 00000229 85C0                <1>     test eax, eax
   122 0000022B 741B                <1>     jz .worst
   123 0000022D C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   124 00000230 C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   125 00000233 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax
   126 0000023B 64891C25[18C00300]  <1>     mov dword fs:[hiProtMem], ebx
   127 00000243 E927010000          <1>     jmp mcbBuild
   128                              <1> .worst:
   129                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   130 00000248 B800002000          <1>     mov eax, 200000h
   131 0000024D 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   131 00000252 [08C00300]          <1>
   132 00000256 29D8                <1>     sub eax, ebx
   133 00000258 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   134 00000260 E90A010000          <1>     jmp mcbBuild 
   135                              <1> .mcbi1:
   136 00000265 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   137 00000268 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   137 00000271 00                  <1>
   138 00000272 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   139 00000276 0F85C6000000        <1>     jne .mcbFail
   140 0000027C 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   141                              <1>     ;PCI hole always exists so this value will always be a dword
   142 00000280 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax
   143 00000288 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   144 0000028B 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   145 0000028E 4881FB00000001      <1>     cmp rbx, 1000000h  
   146 00000295 773C                <1>     ja .skipISA
   147                              <1> ;Here we deal with ISA hole issues
   148 00000297 B820E80000          <1>     mov eax, 0E820h
   149 0000029C CD35                <1>     int 35h
   150 0000029E 48B800000001000000- <1>     mov rax, 1000000h
   150 000002A7 00                  <1>
   151 000002A8 E875000000          <1>     call .mcbFindAddress
   152 000002AD 0F82BC000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   153 000002B3 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   153 000002BC 00                  <1>
   154 000002BD 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   155 000002C1 0F85A8000000        <1>     jne mcbBuild  
   156                              <1>     ;mov rbx, qword [rax]    ;Get 16Mb value in rbx
   157                              <1>     ;add rbx, qword [rax + 8]    ;Get the domain size in rbx
   158 000002C7 488B5808            <1>     mov rbx, qword [rax + 8]
   159 000002CB 64891C25[18C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   160                              <1> .skipISA:
   161 000002D3 B820E80000          <1>     mov eax, 0E820h
   162 000002D8 CD35                <1>     int 35h
   163 000002DA 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   163 000002E3 00                  <1>
   164 000002E4 E839000000          <1>     call .mcbFindAddress
   165 000002E9 0F8280000000        <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   166 000002EF 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   166 000002F8 00                  <1>
   167 000002F9 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   168 000002FD 7570                <1>     jne mcbBuild   
   169                              <1>     ;mov rbx, qword [rax]    ;Get 4Gb value in rbx
   170                              <1>     ;add rbx, qword [rax + 8]    ;Get the domain size in rbx
   171 000002FF 488B5808            <1>     mov rbx, qword [rax + 8]
   172                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   173 00000303 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   173 0000030C 00                  <1>
   174 0000030D 4839CB              <1>     cmp rbx, rcx
   175 00000310 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   176 00000314 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   176 00000319 [1CC00300]          <1>
   177 0000031D E94D000000          <1>     jmp mcbBuild
   178                              <1> .mcbFindAddress:
   179                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   180                              <1> ;Entry: rax = Address of arena to search for
   181                              <1> ;       rsi = Pointer to memory map
   182                              <1> ;       ecx = Number of 24 byte entries
   183                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   184                              <1> ;       CF=CY : value in rax not found
   185 00000322 56                  <1>     push rsi
   186 00000323 51                  <1>     push rcx
   187 00000324 50                  <1>     push rax
   188                              <1> .mfa0:
   189 00000325 483B06              <1>     cmp rax, qword [rsi]
   190 00000328 7410                <1>     je .mcbAddressFound
   191 0000032A 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   192 00000331 FFC9                <1>     dec ecx
   193 00000333 79F0                <1>     jns .mfa0
   194                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   195 00000335 58                  <1>     pop rax
   196 00000336 59                  <1>     pop rcx
   197 00000337 5E                  <1>     pop rsi
   198 00000338 F9                  <1>     stc
   199 00000339 C3                  <1>     ret
   200                              <1> .mcbAddressFound:
   201 0000033A 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   202 0000033D 59                  <1>     pop rcx ;Pop old rax value off
   203 0000033E 59                  <1>     pop rcx
   204 0000033F 5E                  <1>     pop rsi
   205 00000340 F8                  <1>     clc
   206 00000341 C3                  <1>     ret
   207                              <1> .mcbFail:
   208 00000342 488D2D0C000000      <1>     lea rbp, .mcbFailmsg
   209 00000349 B804130000          <1>     mov eax, 1304h
   210 0000034E CD30                <1>     int 30h
   211 00000350 E9AB090000          <1>     jmp errorInit
   212 00000355 4D656D6F727920416C- <1> .mcbFailmsg: db "Memory Allocation Error",0Ah,0Dh,0
   212 0000035E 6C6F636174696F6E20- <1>
   212 00000367 4572726F720A0D00    <1>
   213                              <1> mcbBuild:
   214                              <1> ;Actually build the MCB chain here
   215                              <1> ;Start by computing the difference between userbase and DOS area
   216                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   217 0000036F 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   217 00000374 [08C00300]          <1>
   218 00000378 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   219 0000037F 56                  <1>     push rsi    ;Save ptr
   220 00000380 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   221 00000387 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   222 0000038A 64293425[14C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   223 00000392 5B                  <1>     pop rbx
   224 00000393 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   225 00000396 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   226 0000039E 648B3425[14C00300]  <1>     mov esi, dword fs:[loProtMem]
   227 000003A6 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   228 000003A9 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   229 000003AC 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   229 000003B1 [78C00300]          <1>
   230                              <1> 
   231                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   232 000003B5 64813C25[18C00300]- <1>     cmp dword fs:[hiProtMem], 0
   232 000003BD 00000000            <1>
   233 000003C1 746E                <1>     jz .skipISA
   234                              <1>     ;Here if an ISA hole exists, place a MCB around it
   235 000003C3 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   236                              <1>     ;Remove one MCB worth of space from alloc
   237 000003CA 31C9                <1>     xor ecx, ecx
   238 000003CC 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   239 000003CF 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   240 000003D5 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   241 000003D8 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   242 000003DB 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   243 000003DE C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   244 000003E1 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   245 000003E9 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   245 000003F2 00                  <1>
   246 000003F3 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   247 000003F6 480510000000        <1>     add rax, mcb_size
   248 000003FC 4829C1              <1>     sub rcx, rax    ;Take their difference
   249 000003FF C1E904              <1>     shr ecx, 4
   250 00000402 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   251 00000405 C1E104              <1>     shl ecx, 4  ;Get bytes again
   252 00000408 4881C310000000      <1>     add rbx, mcb_size
   253 0000040F 4801CB              <1>     add rbx, rcx
   254                              <1>     ;RBX should now be at 16Mb
   255 00000412 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   256 00000415 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   257 0000041D 648B0C25[18C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   258 00000425 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   259 00000428 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   260 0000042E 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   261                              <1> .skipISA:
   262                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   263                              <1>     ;rbx points to a block with "Z" marker
   264 00000431 64813C25[1CC00300]- <1>     cmp dword fs:[longMem], 0
   264 00000439 00000000            <1>
   265 0000043D 7470                <1>     jz .exit
   266                              <1>     ;Add PCI hole MCB
   267 0000043F 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   268                              <1>     ;Remove one MCB worth of space from alloc
   269 00000446 31C9                <1>     xor ecx, ecx
   270 00000448 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   271 0000044B 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   272 00000451 C1E104              <1>     shl ecx, 4  ;Get bytes
   273 00000454 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   274 00000457 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   275 0000045A C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   276 0000045D 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   277 00000465 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   277 0000046E 00                  <1>
   278 0000046F 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   279 00000472 480510000000        <1>     add rax, mcb_size
   280 00000478 4829C1              <1>     sub rcx, rax    ;Take their difference
   281 0000047B C1E904              <1>     shr ecx, 4
   282 0000047E 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   283 00000481 C1E104              <1>     shl ecx, 4  ;Get bytes again
   284 00000484 4881C310000000      <1>     add rbx, mcb_size
   285 0000048B 4801CB              <1>     add rbx, rcx
   286                              <1>     ;RBX should now be at 4Gb
   287 0000048E C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   288 00000491 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   289 00000499 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   289 0000049E [1CC00300]          <1>
   290 000004A2 48C1E904            <1>     shr rcx, 4
   291 000004A6 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   292 000004AC 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   293                              <1> .exit:
   294                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   295 000004AF 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   296                              <1> ;------------------------------------------------;
   297                              <1> ;          Kernel inits and adjustments          ;
   298                              <1> ;------------------------------------------------;
   299                              <1> ;Adjust Int 41h address table
   300                              <1> adjInt41h:
   301 000004B6 B96A000000          <1>     mov ecx, kernelDispatchTableL/8 ;Number of elements in table
   302 000004BB 48BB-               <1>     mov rbx, kernelDispatchTable ;Get EA of table
   302 000004BD [3218000000000000]  <1>
   303 000004C5 488D5C1D00          <1>     lea rbx, qword [rbp + rbx]    ;Point to the start of the relocated table 
   304                              <1> .ai41h:
   305 000004CA 48012B              <1>     add qword [rbx], rbp    ;Add base address value to entry in reloc table
   306 000004CD 4881C308000000      <1>     add rbx, 8              ;Each entry is size 8
   307 000004D4 FFC9                <1>     dec ecx
   308 000004D6 75F2                <1>     jnz .ai41h  ;Keep looping until all entries have been adjusted
   309                              <1> 
   310                              <1> ;Adjust Interrupt Entries Int 40h-49h
   311                              <1> adjInts:
   312 000004D8 B340                <1>     mov bl, 40h
   313 000004DA B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   314 000004DF CD35                <1>     int 35h
   315 000004E1 B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   316 000004E6 488D3D77080000      <1>     lea rdi, intData
   317 000004ED 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   318                              <1> .ai0:
   319 000004EF B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   320 000004F4 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   321 000004F7 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   322                              <1> .ai1:
   323 000004FA CD35                <1>     int 35h
   324 000004FC 4881C708000000      <1>     add rdi, 8
   325 00000503 FFC1                <1>     inc ecx
   326 00000505 81F94A000000        <1>     cmp ecx, 4Ah
   327 0000050B 75E2                <1>     jne .ai0
   328                              <1> 
   329                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   330                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   331                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   332                              <1>     %if DEBUG
   333                              <1> debugPopUpMsg:
   334 0000050D 53                  <1>     push rbx
   335 0000050E 55                  <1>     push rbp
   336 0000050F 51                  <1>     push rcx
   337 00000510 52                  <1>     push rdx
   338 00000511 B935000000          <1>     mov ecx, 53 ;A large number of lines
   339 00000516 31D2                <1>     xor edx, edx    ;COM 1
   340                              <1> .cls:
   341 00000518 B80A010000          <1>     mov eax, 010Ah ;Transmit Line feed
   342 0000051D CD34                <1>     int 34h
   343 0000051F FFC9                <1>     dec ecx
   344 00000521 75F5                <1>     jnz .cls
   345 00000523 488D9D[EE000000]    <1>     lea rbx, qword [debPrintNullString + rbp]
   346 0000052A 488D2D04000000      <1>     lea rbp, .msg
   347 00000531 FFD3                <1>     call rbx
   348 00000533 EB39                <1>     jmp short .exit
   349 00000535 0A0D5343502F444F53- <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   349 0000053E 204B65726E656C2044- <1>
   349 00000547 656275676765722043- <1>
   349 00000550 6F6E6E656374656420- <1>
   349 00000559 6F6E20434F4D313A32- <1>
   349 00000562 3430302C6E2C382C31- <1>
   349 0000056B 0A0D00              <1>
   350                              <1> .exit:
   351 0000056E 5A                  <1>     pop rdx
   352 0000056F 59                  <1>     pop rcx
   353 00000570 5D                  <1>     pop rbp
   354 00000571 5B                  <1>     pop rbx
   355                              <1>     %endif
   356                              <1> 
   357                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   358 00000572 488D1587070000      <1>     lea rdx, errorInit ;Get segment start address
   359 00000579 B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   360 0000057E CD41                <1>     int 41h
   361 00000580 488D1579070000      <1>     lea rdx, errorInit ;Get segment start address
   362 00000587 B844250000          <1>     mov eax, 2544h
   363 0000058C CD41                <1>     int 41h
   364                              <1> ;------------------------------------------------;
   365                              <1> ;          Driver Adjustments and inits          ;
   366                              <1> ;------------------------------------------------;
   367                              <1> ;Modify the pointers in nData before putting them in the data area
   368 0000058E 48012D1F080000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   369 00000595 48012D22080000      <1>     add qword [nData + drvHdr.strPtr], rbp
   370 0000059C 48012D23080000      <1>     add qword [nData + drvHdr.intPtr], rbp
   371                              <1> ;Copy the Null driver to its location in Sysvars
   372 000005A3 B922000000          <1>     mov ecx, drvHdr_size
   373 000005A8 488D3505080000      <1>     lea rsi, qword [nData]
   374 000005AF 488DBD[C0C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   375 000005B6 F3A4                <1>     rep movsb   
   376                              <1> 
   377                              <1> ;Adjust the addresses in the other driver headers 
   378 000005B8 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   378 000005BA [151E000000000000]  <1>
   379 000005C2 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   380 000005C7 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   381                              <1> adjDrivers:
   382 000005CB E81D070000          <1>     call adjustDrvHdr
   383 000005D0 E2F9                <1>     loop adjDrivers
   384                              <1> 
   385                              <1> ;Open NUL
   386 000005D2 488D9D[24C00300]    <1>     lea rbx, qword [rbp + charReqHdr]
   387 000005D9 C6030D              <1>     mov byte [rbx + openReqPkt.hdrlen], openReqPkt_size
   388 000005DC C6430300            <1>     mov byte [rbx + openReqPkt.status], 0
   389 000005E0 FF95[CAC00300]      <1>     call qword [rbp + nulDevHdr + drvHdr.strPtr]
   390 000005E6 FF95[D2C00300]      <1>     call qword [rbp + nulDevHdr + drvHdr.intPtr]
   391                              <1> ;Open CON
   392                              <1> conInit:    ;Rather than keeping this resident... do it here
   393                              <1> .ci0:
   394 000005EC B401                <1>     mov ah, 01      ;Get buffer status
   395 000005EE CD36                <1>     int 36h
   396 000005F0 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   397 000005F2 30E4                <1>     xor ah, ah
   398 000005F4 CD36                <1>     int 36h ;Read key to flush from buffer
   399 000005F6 EBF4                <1>     jmp short .ci0
   400                              <1> .ci1:
   401 000005F8 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   402 000005FD CD30                <1>     int 30h
   403 000005FF B402                <1>     mov ah, 02h
   404 00000601 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   405 00000603 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   406 00000605 CD30                <1>     int 30h
   407 00000607 B707                <1>     mov bh, 07h     ;Grey/Black attribs
   408 00000609 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   409 0000060E CD30                <1>     int 30h
   410                              <1> 
   411                              <1>     ;Save ptr to ConHdr in Sysvars
   412 00000610 488D85[151E0000]    <1>     lea rax, qword [rbp + conHdr]
   413 00000617 6448890425-         <1>     mov qword fs:[conPtr], rax
   413 0000061C [98C00300]          <1>
   414                              <1> 
   415                              <1>     ;Save ptr to ClkHdr in Sysvars
   416 00000620 488D85[7B1E0000]    <1>     lea rax, qword [rbp + clkHdr]
   417 00000627 6448890425-         <1>     mov qword fs:[clockPtr], rax
   417 0000062C [90C00300]          <1>
   418                              <1> 
   419                              <1> ;------------------------------------------------;
   420                              <1> ;         Link DOS to temporary Buffer           ;
   421                              <1> ;------------------------------------------------;
   422                              <1> tempBufferInit:
   423 00000630 488DBD[AA020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   424 00000637 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   424 0000063C [A2C00300]          <1>
   425 00000640 31C0                <1>     xor eax, eax
   426 00000642 48FFC8              <1>     dec rax
   427 00000645 48AB                <1>     stosq   ;.nextBufPTr, end of list
   428 00000647 AA                  <1>     stosb   ;.driveNumber, Free entry
   429 00000648 48FFC0              <1>     inc rax
   430 0000064B AA                  <1>     stosb   ;.bufferFlags, No flags
   431                              <1> ;------------------------------------------------;
   432                              <1> ;         Init msd driver, create DPB            ;
   433                              <1> ;------------------------------------------------;
   434                              <1> storageInits:
   435                              <1> ;First save dpb pointer in sysvars
   436 0000064C 488D9D[4B010000]    <1>     lea rbx, qword [rbp + firstDPB]
   437 00000653 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   437 00000658 [80C00300]          <1>
   438                              <1> ;Open Mass Storage
   439                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   440                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   441                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   442                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   443                              <1>     ;mov al, byte fs:[numLogDrv]
   444                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   445                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   446                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   447                              <1>     ;Check if it returned OK first!
   448                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   449                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   450                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   451                              <1>     ;mov byte fs:[numLogDrv], al
   452                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   453                              <1> 
   454                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   455 0000065C E875070000          <1>     call diskInit
   456 00000661 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   457 00000664 648A0425[13C00300]  <1>     mov al, byte fs:[numLogDrv]
   458 0000066C 488D95[AF270000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   459 00000673 30C9                <1>     xor cl, cl  ;Clear counter
   460 00000675 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   460 0000067A [80C00300]          <1>
   461                              <1> .si0:   
   462 0000067E 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   463 00000681 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   464 00000683 CD41                <1>     int 41h
   465                              <1> ;Add other data to DPB
   466 00000685 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   467 00000688 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   468 0000068B 50                  <1>     push rax
   469 0000068C 488D87[9D1E0000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   470 00000693 4889451A            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   471 00000697 58                  <1>     pop rax
   472 00000698 FEC1                <1>     inc cl
   473 0000069A 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   474 0000069C 7416                <1>     je .si1
   475 0000069E 50                  <1>     push rax
   476 0000069F 488D4534            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   477 000006A3 48894524            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   478 000006A7 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   479 000006AA 58                  <1>     pop rax
   480 000006AB 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   481 000006B2 EBCA                <1>     jmp short .si0
   482                              <1> .si1:
   483                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   484 000006B4 48C74524FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   485 000006BC 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   486                              <1> ;------------------------------------------------;
   487                              <1> ;          Find largest sector size              ;
   488                              <1> ;------------------------------------------------;
   489                              <1> sectorSizeSearch:
   490                              <1> ;Done by reading BPB's for each drive
   491 000006BF 488D9D[AF270000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   492                              <1>     
   493                              <1>     ;Go thru each block individually
   494 000006C6 31C0                <1>     xor eax, eax
   495 000006C8 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   496                              <1> .findLargest:
   497 000006CB 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   498 000006CF 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   499 000006D4 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   500 000006DB 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   501 000006DE 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   502 000006E1 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   503 000006E3 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   503 000006E8 [A0C00300]          <1>
   504                              <1>     
   505                              <1> ;------------------------------------------------;
   506                              <1> ;                 Temp CDS inits                 ;
   507                              <1> ;------------------------------------------------;
   508                              <1> tempCDS:
   509                              <1> ;Build a temporary CDS for Drive A to use it for booting
   510 000006EC 488DBD[4F020000]    <1>     lea rdi, qword [rbp + initCDS]
   511 000006F3 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   511 000006F8 [AAC00300]          <1>
   512 000006FC B943000000          <1>     mov ecx, 67 ;Buffer length
   513 00000701 31C0                <1>     xor eax, eax
   514 00000703 4889FB              <1>     mov rbx, rdi    ;Save CDS pointer in rbx
   515 00000706 F3AA                <1>     rep stosb   ;Zero out the path string
   516 00000708 4889DF              <1>     mov rdi, rbx
   517 0000070B B041                <1>     mov al, "A"
   518 0000070D AA                  <1>     stosb
   519 0000070E B03A                <1>     mov al, ":"
   520 00000710 AA                  <1>     stosb
   521 00000711 B05C                <1>     mov al, "\"
   522 00000713 AA                  <1>     stosb
   523 00000714 4889DF              <1>     mov rdi, rbx
   524 00000717 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   525 0000071D 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   525 00000722 [80C00300]          <1>
   526 00000726 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   527 0000072A 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   528                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   529                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   530                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   531 00000730 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax    ;eax was zeroed before
   532                              <1> ;------------------------------------------------;
   533                              <1> ;     Set up general PSP areas and DOS vars      ;
   534                              <1> ;------------------------------------------------;
   535                              <1>     ;Additional DOS Vars init
   536 00000733 31C0                <1>     xor eax, eax
   537 00000735 64880425[0DC10300]  <1>     mov byte fs:[currentDrv], al ;Current Drive = Drive A
   538 0000073D 64880425[0EC10300]  <1>     mov byte fs:[breakFlag], al  ;Break off
   539 00000745 64880425[0FC10300]  <1>     mov byte fs:[verifyFlag], al ;Write only
   540 0000074D 64880425[18C10300]  <1>     mov byte fs:[singleDrv], al  ;Only used on single drive systems
   541 00000755 64880425[E2C00300]  <1>     mov byte fs:[critErrFlag], al   ;Not in critical error
   542 0000075D 64880425[E3C00300]  <1>     mov byte fs:[inDOS], al      ;Not in DOS
   543 00000765 64C60425[E4C00300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   543 0000076D FF                  <1>
   544 0000076E 6466890425-         <1>     mov word fs:[lastRetCode], ax   ;Last return code is 0, no error
   544 00000773 [0AC10300]          <1>
   545 00000777 64880425[0CC10300]  <1>     mov byte fs:[allocStrat], al    ;First Fit
   546                              <1> 
   547                              <1>     ;SYSVARS PSP Init
   548 0000077F 488D1D7AF8FFFF      <1>     lea rbx, qword [tempPSP]
   549 00000786 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   549 0000078B [F2C00300]          <1>
   550 0000078F 53                  <1>     push rbx
   551 00000790 4881C380000000      <1>     add rbx, psp.dta
   552 00000797 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   552 0000079C [EAC00300]          <1>
   553 000007A0 5B                  <1>     pop rbx
   554 000007A1 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   555 000007A6 C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   556 000007AD 48895B02            <1>     mov qword [rbx + psp.startSeg], rbx ;Save start segment of app
   557 000007B1 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   558 000007B5 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   559 000007B9 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   560 000007BD 48B800000001020000- <1>     mov rax, 0000000201000000h  ;Store default handles in JFT
   560 000007C6 00                  <1>
   561 000007C7 48AB                <1>     stosq   ;8 bytes
   562 000007C9 31C0                <1>     xor eax, eax
   563 000007CB 48AB                <1>     stosq   ;16 bytes
   564 000007CD AB                  <1>     stosd   ;20 bytes
   565 000007CE 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   566 000007D6 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   567 000007DA C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   568 000007DE 4889DA              <1>     mov rdx, rbx
   569 000007E1 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   570 000007E6 CD41                <1>     int 41h
   571 000007E8 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   572 000007EC B843350000          <1>     mov eax, 3543h
   573 000007F1 CD41                <1>     int 41h
   574 000007F3 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   575 000007F7 B844350000          <1>     mov eax, 3544h
   576 000007FC CD41                <1>     int 41h
   577 000007FE 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   578                              <1> 
   579 00000802 B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   580 00000807 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   581 0000080B F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   582                              <1> ;------------------------------------------------;
   583                              <1> ;          Default File Handle Creation          ;
   584                              <1> ;------------------------------------------------;
   585                              <1> defaultFileHandles:
   586                              <1> ;Fill in the default file table entries
   587 0000080D 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstSftHeader]
   588 00000814 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   589 0000081B 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   590 00000821 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   590 00000826 [88C00300]          <1>
   591                              <1> ;GOTO FIRST FILE 
   592 0000082A 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   593                              <1> ;Write CON
   594 00000831 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   595 00000836 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   596 0000083C C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   597 00000840 C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   598                              <1>     ;No EOF when reading from the device
   599 00000844 64488B0425-         <1>     mov rax, qword fs:[conPtr]  ;Get pointer to CON device
   599 00000849 [98C00300]          <1>
   600 0000084D 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   601                              <1>     ;Ignore disk related fields and Date/Time of open
   602 00000851 488D7B26            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   603 00000855 488D3598000000      <1>     lea rsi, qword [.dfhCon]
   604                              <1>     ;11 chars in 8.3 name
   605 0000085C 48A5                <1>     movsq   ;8 chars
   606 0000085E 66A5                <1>     movsw   ;10 chars
   607 00000860 A4                  <1>     movsb   ;11 chars
   608 00000861 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   608 00000866 [F2C00300]          <1>
   609 0000086A 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   610                              <1> ;GOTO NEXT ENTRY
   611 0000086E 4881C33D000000      <1>     add rbx, sft_size   ;Goto next SFT
   612                              <1> ;Write AUX
   613 00000875 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   614 0000087A 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   615 00000880 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   616 00000884 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   617                              <1>     ;No EOF when reading from the device
   618 00000888 488B85[371E0000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   619 0000088F 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   620                              <1>     ;Ignore disk related fields and Date/Time of open
   621 00000893 488D7B26            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   622 00000897 488D3561000000      <1>     lea rsi, qword [.dfhAux]
   623                              <1>     ;11 chars in 8.3 name
   624 0000089E 48A5                <1>     movsq   ;8 chars
   625 000008A0 66A5                <1>     movsw   ;10 chars
   626 000008A2 A4                  <1>     movsb   ;11 chars
   627 000008A3 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   627 000008A8 [F2C00300]          <1>
   628 000008AC 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   629                              <1> ;GOTO NEXT ENTRY
   630 000008B0 4881C33D000000      <1>     add rbx, sft_size   ;Goto next SFT
   631                              <1> ;Write PRN
   632 000008B7 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   633 000008BC 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   634 000008C2 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   635 000008C6 C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   636                              <1>     ;Want EOF when reading from to the device
   637 000008CA 488B85[591E0000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   638 000008D1 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   639                              <1>     ;Ignore disk related fields and Date/Time of open
   640 000008D5 488D7B26            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   641 000008D9 488D352A000000      <1>     lea rsi, qword [.dfhPrn]
   642                              <1>     ;11 chars in 8.3 name
   643 000008E0 48A5                <1>     movsq   ;8 chars
   644 000008E2 66A5                <1>     movsw   ;10 chars
   645 000008E4 A4                  <1>     movsb   ;11 chars
   646 000008E5 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   646 000008EA [F2C00300]          <1>
   647 000008EE 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   648 000008F2 EB21                <1>     jmp short .dfhExit
   649 000008F4 434F4E202020202020- <1> .dfhCon db "CON        "
   649 000008FD 2020                <1>
   650 000008FF 415558202020202020- <1> .dfhAux db "AUX        "
   650 00000908 2020                <1>
   651 0000090A 50524E202020202020- <1> .dfhPrn db "PRN        "
   651 00000913 2020                <1>
   652                              <1> .dfhExit:
   653                              <1> ;------------------------------------------------;
   654                              <1> ;               Load CONFIG.SYS                  ;
   655                              <1> ;------------------------------------------------;
   656                              <1> ;------------------------------------------------;
   657                              <1> ;              Process CONFIG.SYS                ;
   658                              <1> ;------------------------------------------------;
   659                              <1> ;------------------------------------------------;
   660                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   661                              <1> ;------------------------------------------------;
   662                              <1> ;------------------------------------------------;
   663                              <1> ;   Setup Final Data Areas With Overrides from   ;
   664                              <1> ;                  CONFIG.SYS                    ;
   665                              <1> ;------------------------------------------------;
   666                              <1> ;------------------------------------------------;
   667                              <1> ;           Load Command interpreter             ;
   668                              <1> ;------------------------------------------------;
   669 00000915 488D15F5030000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   670 0000091C B409                <1>     mov ah, 09h
   671 0000091E CD41                <1>     int 41h
   672                              <1>     %if true
   673                              <1> debugFinal:
   674                              <1>     ;Print system state
   675 00000920 55                  <1>     push rbp    ;Only rbp really matters here
   676 00000921 4989E8              <1>     mov r8, rbp
   677                              <1> 
   678 00000924 488D2DD0020000      <1>     lea rbp, .msg2
   679 0000092B 4D8D88[EE000000]    <1>     lea r9, qword [r8 + debPrintNullString]
   680 00000932 41FFD1              <1>     call r9
   681                              <1> 
   682 00000935 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   683 0000093C 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   683 00000941 [08C00300]          <1>
   684                              <1> 
   685 00000945 4D8D88[29040000]    <1>     lea r9, qword [r8 + overlayQword]
   686 0000094C 41FFD1              <1>     call r9
   687                              <1> 
   688 0000094F 4881C31B000000      <1>     add rbx, 19+8
   689 00000956 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   689 0000095B [00C00300]          <1>
   690 0000095F 41FFD1              <1>     call r9
   691                              <1> 
   692 00000962 4881C31B000000      <1>     add rbx, 19+8
   693 00000969 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   693 0000096E [78C00300]          <1>
   694 00000972 41FFD1              <1>     call r9
   695                              <1> 
   696 00000975 4881C31C000000      <1>     add rbx, 20+8
   697 0000097C 4D8D88[E6030000]    <1>     lea r9, qword [r8 + overlayDword]
   698 00000983 648B0425[14C00300]  <1>     mov eax, dword fs:[loProtMem]
   699 0000098B 41FFD1              <1>     call r9
   700                              <1> 
   701 0000098E 4881C312000000      <1>     add rbx, 10+8
   702 00000995 648B0425[18C00300]  <1>     mov eax, dword fs:[hiProtMem]
   703 0000099D 41FFD1              <1>     call r9
   704                              <1> 
   705 000009A0 4881C312000000      <1>     add rbx, 10+8
   706 000009A7 64488B0425-         <1>     mov rax, qword fs:[longMem]
   706 000009AC [1CC00300]          <1>
   707 000009B0 4D8D88[29040000]    <1>     lea r9, qword [r8 + overlayQword]
   708 000009B7 41FFD1              <1>     call r9
   709                              <1> 
   710 000009BA 4881C31B000000      <1>     add rbx, 19+8
   711 000009C1 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   711 000009C6 [80C00300]          <1>
   712 000009CA 41FFD1              <1>     call r9
   713                              <1> 
   714 000009CD 4881C31B000000      <1>     add rbx, 19+8
   715 000009D4 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   715 000009D9 [88C00300]          <1>
   716 000009DD 41FFD1              <1>     call r9
   717                              <1> 
   718 000009E0 4881C31B000000      <1>     add rbx, 19+8
   719 000009E7 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   719 000009EC [A2C00300]          <1>
   720 000009F0 41FFD1              <1>     call r9
   721                              <1> 
   722 000009F3 4881C31B000000      <1>     add rbx, 19+8
   723 000009FA 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   723 000009FF [AAC00300]          <1>
   724 00000A03 41FFD1              <1>     call r9
   725                              <1> 
   726 00000A06 4D8D88[74030000]    <1>     lea r9, qword [r8 + overlayByte]
   727                              <1> 
   728 00000A0D 4881C32C000000      <1>     add rbx, 25+19
   729 00000A14 64480FB60425-       <1>     movzx rax, byte fs:[numLogDrv]
   729 00000A1A [13C00300]          <1>
   730 00000A1E 41FFD1              <1>     call r9
   731                              <1> 
   732 00000A21 4881C31E000000      <1>     add rbx, 30
   733 00000A28 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   733 00000A2E [12C00300]          <1>
   734 00000A32 41FFD1              <1>     call r9
   735                              <1> 
   736 00000A35 4881C31E000000      <1>     add rbx, 30
   737 00000A3C 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   737 00000A42 [11C00300]          <1>
   738 00000A46 41FFD1              <1>     call r9
   739                              <1> 
   740 00000A49 4881C310000000      <1>     add rbx, 16
   741 00000A50 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   741 00000A56 [10C00300]          <1>
   742 00000A5A 0441                <1>     add al, "A"
   743 00000A5C 8803                <1>     mov byte [rbx], al
   744                              <1> 
   745 00000A5E 488D2D10000000      <1>     lea rbp, .msg
   746 00000A65 4D8D88[EE000000]    <1>     lea r9, qword [r8 + debPrintNullString]
   747 00000A6C 41FFD1              <1>     call r9
   748 00000A6F 5D                  <1>     pop rbp
   749 00000A70 E99E010000          <1>     jmp l1
   750 00000A75 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   750 00000A7E 206261736520464646- <1>
   750 00000A87 464646464646464646- <1>
   750 00000A90 46464646680A0D      <1>
   751 00000A97 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   751 00000AA0 464646464646464646- <1>
   751 00000AA9 464646464646680A0D  <1>
   752 00000AB2 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   752 00000ABB 464646464646464646- <1>
   752 00000AC4 46464646464668200A- <1>
   752 00000ACD 0D                  <1>
   753 00000ACE 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   753 00000AD7 464646464646466820  <1>
   754 00000AE0 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   754 00000AE9 464646464646466820  <1>
   755 00000AF2 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   755 00000AFB 464646464646464646- <1>
   755 00000B04 464646464646680A0D  <1>
   756 00000B0D 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   756 00000B16 464646464646464646- <1>
   756 00000B1F 464646464646680A0D  <1>
   757 00000B28 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   757 00000B31 464646464646464646- <1>
   757 00000B3A 464646464646680A0D  <1>
   758 00000B43 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   758 00000B4C 464646464646464646- <1>
   758 00000B55 464646464646680A0D  <1>
   759 00000B5E 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   759 00000B67 464646464646464646- <1>
   759 00000B70 464646464646680A0D  <1>
   760 00000B79 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   760 00000B82 204C6F676963616C20- <1>
   760 00000B8B 447269766573204646- <1>
   760 00000B94 680A0D              <1>
   761 00000B97 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   761 00000BA0 204669786564204472- <1>
   761 00000BA9 697665732020204646- <1>
   761 00000BB2 680A0D              <1>
   762 00000BB5 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   762 00000BBE 2052656D6F7661626C- <1>
   762 00000BC7 652044727673204646- <1>
   762 00000BD0 680A0D              <1>
   763 00000BD3 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   763 00000BDC 65205A3A0A0D        <1>
   764 00000BE2 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   764 00000BEB 4F4D4D414E442E434F- <1>
   764 00000BF4 4D2E2E2E0A0D00      <1>
   765 00000BFB 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   765 00000C04 626F6F742073756D6D- <1>
   765 00000C0D 6172790A0D00        <1>
   766                              <1>     %endif
   767                              <1> l1:
   768 00000C13 B401                <1>     mov ah, 01h  ;Write with echo
   769 00000C15 CD41                <1>     int 41h
   770 00000C17 3C00                <1>     cmp al, 0
   771 00000C19 7402                <1>     je l2
   772 00000C1B EBF6                <1>     jmp short l1
   773                              <1> l2:
   774 00000C1D B407                <1>     mov ah, 07h
   775 00000C1F CD41                <1>     int 41h
   776 00000C21 3C42                <1>     cmp al, 42h
   777 00000C23 75EE                <1>     jne l1
   778                              <1> l3:
   779 00000C25 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   779 00000C2A [34C10300]0000      <1>
   780 00000C30 488D9D[24C00300]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   781 00000C37 488D85[34C10300]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   782 00000C3E C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   783 00000C41 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   784 00000C45 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   785 00000C4B 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   786 00000C4F C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   787 00000C56 FF95[851E0000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   788 00000C5C FF95[8D1E0000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr] 
   789                              <1> 
   790 00000C62 B403                <1>     mov ah, 03h
   791 00000C64 30FF                <1>     xor bh, bh
   792 00000C66 CD30                <1>     int 30h
   793 00000C68 30D2                <1>     xor dl, dl  ;0 column
   794 00000C6A B402                <1>     mov ah, 02h
   795 00000C6C CD30                <1>     int 30h
   796                              <1> 
   797 00000C6E 488D9D[34C10300]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   798 00000C75 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   799 00000C79 E832000000          <1>     call .clkHexToBCD
   800 00000C7E B40E                <1>     mov ah, 0Eh
   801 00000C80 B03A                <1>     mov al, ":"
   802 00000C82 CD30                <1>     int 30h
   803 00000C84 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   804 00000C88 E823000000          <1>     call .clkHexToBCD
   805 00000C8D B40E                <1>     mov ah, 0Eh
   806 00000C8F B03A                <1>     mov al, ":"
   807 00000C91 CD30                <1>     int 30h
   808 00000C93 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   809 00000C97 E814000000          <1>     call .clkHexToBCD
   810 00000C9C B40E                <1>     mov ah, 0Eh
   811 00000C9E B02E                <1>     mov al, "."
   812 00000CA0 CD30                <1>     int 30h
   813 00000CA2 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   814 00000CA6 E805000000          <1>     call .clkHexToBCD
   815 00000CAB E963FFFFFF          <1>     jmp l1
   816                              <1> .clkHexToBCD:
   817                              <1> ;Converts a Hex byte into two BCD digits
   818                              <1> ;Takes input in each nybble of al
   819 00000CB0 53                  <1>     push rbx
   820 00000CB1 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   820 00000CBA 00                  <1>
   821 00000CBB 31D2                <1>     xor edx, edx
   822 00000CBD 48F7F3              <1>     div rbx
   823 00000CC0 80C230              <1>     add dl, '0'
   824 00000CC3 80FA39              <1>     cmp dl, '9'
   825 00000CC6 7603                <1>     jbe .chtb0
   826 00000CC8 80C207              <1>     add dl, 'A'-'0'-10
   827                              <1> .chtb0:
   828 00000CCB 88D1                <1>     mov cl, dl    ;Save remainder byte
   829 00000CCD 31D2                <1>     xor edx, edx
   830 00000CCF 48F7F3              <1>     div rbx
   831 00000CD2 80C230              <1>     add dl, '0'
   832 00000CD5 80FA39              <1>     cmp dl, '9'
   833 00000CD8 7603                <1>     jbe .chtb1
   834 00000CDA 80C207              <1>     add dl, 'A'-'0'-10
   835                              <1> .chtb1:
   836 00000CDD 88D5                <1>     mov ch, dl    ;Save remainder byte
   837                              <1> 
   838 00000CDF 88E8                <1>     mov al, ch    ;Get most sig digit into al
   839 00000CE1 B40E                <1>     mov ah, 0Eh
   840 00000CE3 CD30                <1>     int 30h
   841 00000CE5 88C8                <1>     mov al, cl    ;Get least sig digit into al
   842 00000CE7 B40E                <1>     mov ah, 0Eh
   843 00000CE9 CD30                <1>     int 30h
   844 00000CEB 5B                  <1>     pop rbx
   845 00000CEC C3                  <1>     ret
   846                              <1> ;--------------------------------
   847                              <1> ;       PROCS FOR SYSINIT       :
   848                              <1> ;--------------------------------
   849                              <1> adjustDrvHdr:
   850                              <1> ;Input: rsi = Effective address of driver in DOS segment
   851                              <1> ;       rbp = Ptr to the start of the DOS segment
   852                              <1> ;Output: rsi = EA of next header in DOS segment
   853 00000CED 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   854 00000CF0 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   855 00000CF4 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   856 00000CF8 4881C622000000      <1>     add rsi, drvHdr_size
   857 00000CFF C3                  <1>     ret
   858                              <1> errorInit:
   859                              <1> ;If a critical error occurs during sysinit, fail through here
   860                              <1> ;Int 42h, 43h and 44h point here during sysinit
   861 00000D00 488D2D20000000      <1>     lea rbp, hltmsg
   862 00000D07 B804130000          <1>     mov eax, 1304h
   863 00000D0C CD30                <1>     int 30h
   864                              <1>     ;cli ;Clear interrupts
   865                              <1>     ;mov al, -1
   866                              <1>     ;mov dx, 0A1h    ;PIC2 data
   867                              <1>     ;out dx, al      ;Mask all lines
   868                              <1>     ;mov dx, 21h     ;PIC1 data
   869                              <1>     ;out dx, al      ;Mask all lines
   870                              <1> .ei0:
   871 00000D0E F4                  <1>     hlt
   872 00000D0F EBFD                <1>     jmp short .ei0
   873                              <1> ;--------------------------------
   874                              <1> ;       DATA FOR SYSINIT        :
   875                              <1> ;--------------------------------
   876 00000D11 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   876 00000D1A 5343502F444F532E2E- <1>
   876 00000D23 2E0A0D24            <1>
   877 00000D27 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   877 00000D30 7469616C6973696E67- <1>
   877 00000D39 20534350444F532E53- <1>
   877 00000D42 59532E205379737465- <1>
   877 00000D4B 6D2068616C74696E67- <1>
   877 00000D54 2E2E2E00            <1>
   878 00000D58 434F4E00            <1> conName db "CON",0
   879 00000D5C 41555800            <1> auxName db "AUX",0
   880 00000D60 50524E00            <1> prnName db "PRN",0
   881                              <1> intData:
   882 00000D64 [450D000000000000]  <1>     dq terminateProcess ;Int 40h
   883 00000D6C [CB0E000000000000]  <1>     dq functionDispatch ;Int 41h
   884 00000D74 [000D000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   885 00000D7C [470D000000000000]  <1>     dq ctrlCHandler     ;Int 43h, ignore any CTRL+C during init
   886 00000D84 [000D000000000000]  <1>     dq errorInit        ;Int 44h, If critical error in sysinit, halt system
   887 00000D8C [C00D000000000000]  <1>     dq absDiskRead      ;Int 45h
   888 00000D94 [490D000000000000]  <1>     dq absDiskWrite     ;Int 46h
   889 00000D9C [BD0E000000000000]  <1>     dq terminateResident    ;Int 47h
   890 00000DA4 [BD0E000000000000]  <1>     dq inDosHandler     ;Int 48h
   891 00000DAC [BF0E000000000000]  <1>     dq fastOutput       ;Int 49h
   892                              <1> nData:
   893 00000DB4 [151E000000000000]  <1>     dq conHdr
   894 00000DBC 0480                <1>     dw 08004h
   895 00000DBE [BD1F000000000000]  <1>     dq nulStrat
   896 00000DC6 [C31F000000000000]  <1>     dq nulIntr
   897 00000DCE 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   898                              <1> 
   899                              <1> diskInit:
   900                              <1>     ;We create a function to deal with BPB parsing etc
   901                              <1>     ;Start with the first primary partition on each hard disk (until max)
   902                              <1>     ;   They dont have to be bootable
   903                              <1>     ;Then go back and look for other partitions partitions. 
   904                              <1>     ;   Add each other primary or logical ptn (until max)
   905                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   906                              <1>     ;Use r8 as device counter
   907 00000DD6 488DBD[D7270000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
   908 00000DDD 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
   908 00000DE5 00                  <1>
   909 00000DE6 0F84C6000000        <1>     jz .remInit ;No? Go to removables
   910 00000DEC 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   910 00000DF5 00                  <1>
   911 00000DF6 B280                <1>     mov dl, 80h ;Start with HDD 0
   912                              <1> .primary:
   913 00000DF8 64803C25[13C00300]- <1>     cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
   913 00000E00 03                  <1>
   914 00000E01 0F84AB000000        <1>     je .remInit
   915 00000E07 31C9                <1>     xor ecx, ecx    ;Sector 0
   916 00000E09 E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   917 00000E0E 0F8289000000        <1>     jc .primaryEpilog
   918                              <1>     ;Here, check MBR or BPB
   919 00000E14 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   920 00000E1D 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   921                              <1>     ;Now check if BPB or MBR
   922 00000E1F 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   923 00000E21 8A6302              <1>     mov ah, byte [rbx + 2]
   924 00000E24 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   925 00000E28 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   926                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   927                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   928 00000E2A 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   929 00000E31 B104                <1>     mov cl, 4
   930                              <1> .checkPrimary:
   931 00000E33 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   932 00000E36 3C01                <1>     cmp al, 01
   933 00000E38 7421                <1>     je .primaryFound
   934 00000E3A 3C04                <1>     cmp al, 04
   935 00000E3C 741D                <1>     je .primaryFound
   936 00000E3E 3C06                <1>     cmp al, 06
   937 00000E40 7419                <1>     je .primaryFound
   938 00000E42 3C0B                <1>     cmp al, 0Bh
   939 00000E44 7415                <1>     je .primaryFound
   940 00000E46 3C0C                <1>     cmp al, 0Ch
   941 00000E48 7411                <1>     je .primaryFound
   942 00000E4A 3C0E                <1>     cmp al, 0Eh
   943 00000E4C 740D                <1>     je .primaryFound
   944 00000E4E 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   945 00000E55 FEC9                <1>     dec cl
   946 00000E57 7444                <1>     jz .primaryEpilog
   947 00000E59 EBD8                <1>     jmp short .checkPrimary
   948                              <1> .primaryFound:
   949                              <1>     ;Copy the first sector of this partition into memory
   950 00000E5B 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   951 00000E5E E8E9000000          <1>     call .initReadSector
   952 00000E63 7238                <1>     jc .primaryEpilog
   953                              <1>     ;Now verify this is a BPB
   954 00000E65 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   955 00000E67 8A6302              <1>     mov ah, byte [rbx + 2]
   956 00000E6A 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   957 00000E6E 752D                <1>     jne .primaryEpilog   ;If not, skip
   958                              <1>     ;Now copy data to internal tables
   959 00000E70 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   960 00000E73 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   961 00000E78 57                  <1>     push rdi
   962 00000E79 F348A5              <1>     rep movsq   ;Copy the BPB
   963 00000E7C 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
   964                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   965 00000E7D 4A8D9C05[A5270000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
   966                              <1>     ;Add device count to rbx to point to correct entry
   967 00000E85 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   968 00000E87 4A8D9CC5[AF270000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
   969 00000E8F 488933              <1>     mov qword [rbx], rsi
   970 00000E92 49FFC0              <1>     inc r8  ;Goto next logical drive
   971 00000E95 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have
   972                              <1> .primaryEpilog:
   973 00000E9D FEC2                <1>     inc dl  ;Goto next BIOS drive
   974 00000E9F 88D6                <1>     mov dh, dl
   975 00000EA1 80E67F              <1>     and dh, 7Fh ;Clear bit 7
   976 00000EA4 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
   977 00000EAC 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
   978                              <1> .extended:
   979                              <1> ;We have gone through all the devices once
   980                              <1>     ;cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
   981                              <1>     ;je .remInit ;If yes, get removable devices
   982                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
   983                              <1>     ;xor ecx, ecx    ;Get MBR back
   984                              <1>     ;call .initReadSector
   985                              <1>     ;Now we eventually search MBR for a FAT extended partition
   986                              <1> .remInit:
   987                              <1> ;Now handle removable devices, at least 2 rem. devs.
   988 00000EB2 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
   989 00000EB5 30D2                <1>     xor dl, dl  ;Start with removable device 0
   990 00000EB7 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
   991                              <1>     ;rdi points to the space for the subsequent bpb's
   992                              <1> .removables:
   993 00000EBA 31C9                <1>     xor ecx, ecx    ;Read sector 0
   994 00000EBC E88B000000          <1>     call .initReadSector
   995 00000EC1 7238                <1>     jc .removableEpilogue   ;Goto next device
   996                              <1>     ;Now verify this is a BPB
   997 00000EC3 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   998 00000EC5 8A6302              <1>     mov ah, byte [rbx + 2]
   999 00000EC8 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1000 00000ECC 752D                <1>     jne .removableEpilogue   ;If not, skip
  1001                              <1>     ;Now copy data to internal tables
  1002 00000ECE 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1003 00000ED1 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1004 00000ED6 57                  <1>     push rdi
  1005 00000ED7 F348A5              <1>     rep movsq   ;Copy the BPB
  1006 00000EDA 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1007                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1008 00000EDB 4A8D9C05[A5270000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1009                              <1>     ;Add device count to rbx to point to correct entry
  1010 00000EE3 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1011 00000EE5 4A8D9CC5[AF270000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1012 00000EED 488933              <1>     mov qword [rbx], rsi
  1013 00000EF0 49FFC0              <1>     inc r8  ;Goto next logical drive
  1014 00000EF3 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have    
  1015                              <1> .removableEpilogue:
  1016 00000EFB FEC2                <1>     inc dl  ;Goto next BIOS device now
  1017 00000EFD 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1018 00000F05 7412                <1>     je .end
  1019 00000F07 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1020 00000F0E 7403                <1>     je .re0
  1021 00000F10 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1022                              <1> .re0:
  1023 00000F13 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1024 00000F17 72A1                <1>     jb .removables
  1025                              <1> .end:
  1026 00000F19 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1026 00000F21 01                  <1>
  1027 00000F22 7401                <1>     je .singleRemDev
  1028 00000F24 C3                  <1>     ret
  1029                              <1> .singleRemDev:
  1030                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1031 00000F25 488D9D[A5270000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1032 00000F2C 8A95[A5270000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1033 00000F32 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1034 00000F35 488D9D[AF270000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1035 00000F3C 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1036 00000F3F 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1037 00000F43 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Gotta register the phantom drive!
  1038 00000F4B C3                  <1>     ret
  1039                              <1> .initReadSector:
  1040                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1041 00000F4C B482                <1>     mov ah, 82h ;Read
  1042 00000F4E B001                <1>     mov al, 1   ;One sector
  1043 00000F50 488D9D[CA020000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1044 00000F57 CD33                <1>     int 33h
  1045 00000F59 C3                  <1>     ret
    12                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    13                                  %include "./Source/BSS/dosSeg.asm"
    14                              <1> ;This file contains the main DOS data segment
    15                              <1> dosAPT: ;Additional Page tables
    16 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    17                              <1> dosDataArea:
    18 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    19 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    20 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    21 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    22 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    23 0003C013 ??                  <1>     numLogDrv   resb 1    ;Number of logical drives in system x
    24 0003C014 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    25 0003C018 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    26 0003C01C ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    27 0003C024 <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    28 0003C04E <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    29                              <1>     ;The device driver header with space for the largest possible packet
    30 0003C078 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    31                              <1> sysVarsPtr:
    32 0003C080 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    33 0003C088 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    34 0003C090 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    35                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    36 0003C098 ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    37                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    38 0003C0A0 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    39 0003C0A2 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    40 0003C0AA ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    41 0003C0B2 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    42 0003C0B3 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    43 0003C0B4 ??                  <1>     numFiles    resb 1    ;FILES=5 default
    44 0003C0B5 ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    45 0003C0BD ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    46 0003C0BF ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    47 0003C0C0 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    48                              <1> 
    49                              <1> ;Start of Swappable Data Area, this bit can remain static
    50 0003C0E2 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    51 0003C0E3 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    52 0003C0E4 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    53 0003C0E5 ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    54 0003C0E6 ????                <1>     errorExCde  resw 1  ;Extended Error Code
    55 0003C0E8 ??                  <1>     errorAction resb 1  ;Suggested action for error  
    56 0003C0E9 ??                  <1>     errorClass  resb 1  ;Error Class
    57                              <1> 
    58 0003C0EA ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    59 0003C0F2 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
    60 0003C0FA ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error (could make this di)
    61 0003C102 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    62 0003C10A ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch x
    63 0003C10C ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    64 0003C10D ??                  <1>     currentDrv  resb 1  ;Default drive x
    65 0003C10E ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
    66 0003C10F ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    67                              <1> ;SDA, needs to be replaced between processes
    68 0003C110 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    69                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    70 0003C118 ??                  <1>     singleDrv   resb 1  ;Set if last drive accessed was drive B x
    71                              <1> ;This is done to allow for DOS to give the user a change to swap devices
    72                              <1> 
    73 0003C119 ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    74 0003C11A ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    75 0003C11B ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    76 0003C11C ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    77 0003C124 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    78 0003C12C ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    79                              <1> ;Time stuff
    80 0003C134 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    81 0003C13A ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    82 0003C13B ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    83 0003C13C ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    84 0003C13D ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    85 0003C13F ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    86                              <1> ;String Stuff
    87 0003C140 <res FFh>           <1>     asciiBuffer resb 255    ;Have a 255 char buffer for the ascii terminal
    88                              <1> ;Stacks
    89 0003C23F <res 528h>          <1>     critStack   resq 165
    90 0003C767 ????????????????    <1>     critStakTop resq 1
    91 0003C76F <res 638h>          <1>     IOStack     resq 199
    92 0003CDA7 ????????????????    <1>     IOStakTop   resq 1
    93 0003CDAF <res 638h>          <1>     DiskStack   resq 199
    94 0003D3E7 ????????????????    <1>     DiskStakTop resq 1
    95                              <1>     dSegLen     equ     $
    14                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    15                                  %include "./Source/Data/staticData.asm"
    16                              <1> 
    17                              <1> ;-----------------------------------:
    18                              <1> ;           Static Data             :
    19                              <1> ;-----------------------------------:
    20 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    21 00000001 01                  <1> dosMinor    db 01h      ;.01
    22 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    22 0000000B 535953              <1>
    23 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    23 00000017 535953              <1>
    24 0000001A 2F                  <1> switchchar  db "/" ;Editable by the Int 41h/ah=37h
    16                                  %include "./Source/Debug/debug.asm"
    17                              <1> ;This file contains debugging macros, procs and strings
    18                              <1> ; that we can use to output to COM1 bypassing the operating system.
    19                              <1> ;A serial terminal must be connected for this to work.
    20                              <1> 
    21                              <1> ;Variables and equates
    22                              <1> 
    23 0000001B 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    24                              <1> 
    25 00000023 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    25 0000002C 39414243444546      <1>
    26                              <1> ;Common procedures
    27                              <1> debMakeDebuggerRespond:
    28 00000033 488D2D26000000      <1>     lea rbp, .msg
    29 0000003A E8AF000000          <1>     call debPrintNullString
    30 0000003F B900001000          <1>     mov ecx, 100000h
    31                              <1> .waiting:
    32 00000044 FFC9                <1>     dec ecx
    33 00000046 740C                <1>     jz .timeout
    34 00000048 B402                <1>     mov ah, 02h ;Blocking recieve!
    35 0000004A 31D2                <1>     xor edx, edx
    36 0000004C CD34                <1>     int 34h
    37 0000004E F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    38 00000051 75F1                <1>     jnz .waiting
    39 00000053 C3                  <1>     ret
    40                              <1> .timeout:
    41 00000054 488D2D47000000      <1>     lea rbp, .msg2
    42 0000005B E98E000000          <1>     jmp debPrintNullString
    43 00000060 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    43 00000069 6B6579206174207468- <1>
    43 00000072 65207465726D696E61- <1>
    43 0000007B 6C20746F20636F6E74- <1>
    43 00000084 696E7565206F722077- <1>
    43 0000008D 61697420666F722074- <1>
    43 00000096 696D656F75742E2E2E- <1>
    43 0000009F 0A0D00              <1>
    44 000000A2 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    44 000000AB 436F6E74696E75696E- <1>
    44 000000B4 672E2E2E0A0D00      <1>
    45                              <1> debPrintHexByte:
    46                              <1> ;Print the hex byte in al as a hex value
    47 000000BB 52                  <1>     push rdx
    48 000000BC 53                  <1>     push rbx
    49 000000BD 50                  <1>     push rax
    50                              <1> 
    51 000000BE 88C2                <1>     mov dl, al           ;save byte in dl
    52 000000C0 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    53 000000C4 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    54 000000C9 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    55 000000CD E80C000000          <1>     call .wrchar
    56 000000D2 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    57 000000D5 E804000000          <1>     call .wrchar
    58                              <1> 
    59 000000DA 58                  <1>     pop rax
    60 000000DB 5B                  <1>     pop rbx
    61 000000DC 5A                  <1>     pop rdx
    62 000000DD C3                  <1>     ret
    63                              <1> .wrchar:
    64 000000DE 6687DB              <1>     xchg bx, bx
    65 000000E1 488D1D3BFFFFFF      <1>     lea rbx, debascii
    66 000000E8 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    67 000000E9 B401                <1>     mov ah, 01h
    68 000000EB CD34                <1>     int 34h  ;print char
    69 000000ED C3                  <1>     ret
    70                              <1> 
    71                              <1> debPrintNullString:
    72                              <1> ;Print a null terminated string pointed to by rbp
    73 000000EE 56                  <1>     push rsi
    74 000000EF 50                  <1>     push rax
    75 000000F0 52                  <1>     push rdx
    76 000000F1 31D2                <1>     xor edx, edx    ;Select COM1
    77 000000F3 4889EE              <1>     mov rsi, rbp
    78                              <1> .getChar:
    79 000000F6 AC                  <1>     lodsb
    80 000000F7 84C0                <1>     test al, al
    81 000000F9 7406                <1>     jz .exit
    82 000000FB B401                <1>     mov ah, 01h
    83 000000FD CD34                <1>     int 34h
    84 000000FF EBF5                <1>     jmp short .getChar
    85                              <1> .exit:
    86 00000101 5A                  <1>     pop rdx
    87 00000102 58                  <1>     pop rax
    88 00000103 5E                  <1>     pop rsi
    89 00000104 C3                  <1>     ret
    90                              <1> 
    91                              <1> debPrintDOSStack:
    92                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    93                              <1> ;Shows me which function, and parameters passed and returned
    94 00000105 488D2DA5010000      <1>     lea rbp, .a1
    95 0000010C E8DDFFFFFF          <1>     call debPrintNullString
    96 00000111 488B15(24C10300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
    97 00000118 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
    98 0000011F 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
    99 00000122 E802030000          <1>     call overlayQword
   100 00000127 4881C316000000      <1>     add rbx, 22
   101 0000012E 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   102 00000132 E8F2020000          <1>     call overlayQword
   103 00000137 4881C316000000      <1>     add rbx, 22
   104 0000013E 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   105 00000142 E8E2020000          <1>     call overlayQword
   106 00000147 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   107 0000014E 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   108 00000152 E8D2020000          <1>     call overlayQword
   109 00000157 4881C316000000      <1>     add rbx, 22 
   110 0000015E 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   111 00000162 E8C2020000          <1>     call overlayQword
   112 00000167 4881C316000000      <1>     add rbx, 22
   113 0000016E 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   114 00000172 E8B2020000          <1>     call overlayQword
   115 00000177 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   116 0000017E 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   117 00000182 E8A2020000          <1>     call overlayQword
   118 00000187 4881C316000000      <1>     add rbx, 22
   119 0000018E 488B05(24C10300)    <1>     mov rax, qword [oldRSP]
   120 00000195 480560000000        <1>     add rax, callerFrame_size
   121 0000019B E889020000          <1>     call overlayQword
   122 000001A0 4881C316000000      <1>     add rbx, 22
   123 000001A7 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   124 000001AB E879020000          <1>     call overlayQword
   125 000001B0 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   126 000001B7 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   127 000001BB E869020000          <1>     call overlayQword
   128 000001C0 488D2D06000000      <1>     lea rbp, .a0
   129 000001C7 E822FFFFFF          <1>     call debPrintNullString
   130 000001CC C3                  <1>     ret
   131                              <1> 
   132 000001CD 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   132 000001D6 303030303030303030- <1>
   132 000001DF 30306820            <1>
   133 000001E3 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   133 000001EC 303030303030303030- <1>
   133 000001F5 30306820            <1>
   134 000001F9 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   134 00000202 303030303030303030- <1>
   134 0000020B 30306820            <1>
   135 0000020F 0A0D                <1>     db  0Ah,0Dh
   136 00000211 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   136 0000021A 303030303030303030- <1>
   136 00000223 30306820            <1>
   137 00000227 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   137 00000230 303030303030303030- <1>
   137 00000239 30306820            <1>
   138 0000023D 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   138 00000246 303030303030303030- <1>
   138 0000024F 30306820            <1>
   139 00000253 0A0D                <1>     db 0Ah, 0Dh
   140 00000255 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   140 0000025E 303030303030303030- <1>
   140 00000267 30306820            <1>
   141 0000026B 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   141 00000274 303030303030303030- <1>
   141 0000027D 30306820            <1>
   142 00000281 7269703D3030303030- <1>     db "rip=0000000000000000h"
   142 0000028A 303030303030303030- <1>
   142 00000293 303068              <1>
   143 00000296 0A0D                <1>     db 0Ah, 0Dh
   144 00000298 666C673D3030303030- <1>     db "flg=0000000000000000h "
   144 000002A1 303030303030303030- <1>
   144 000002AA 30306820            <1>
   145 000002AE 0A0D00              <1>     db 0Ah,0Dh,0
   146 000002B1 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   146 000002BA 206F6E20496E742034- <1>
   146 000002C3 316820737461636B0A- <1>
   146 000002CC 0D00                <1>
   147                              <1> 
   148                              <1> debDPBptr:
   149                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   150 000002CE 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   151 000002D5 4889E8              <1>     mov rax, rbp
   152 000002D8 E84C010000          <1>     call overlayQword
   153 000002DD 488D2D06000000      <1>     lea rbp, .dpb
   154 000002E4 E805FEFFFF          <1>     call debPrintNullString
   155 000002E9 C3                  <1>     ret
   156                              <1> .dpb: 
   157 000002EA 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   157 000002F3 203030303030303030- <1>
   157 000002FC 303030303030303068- <1>
   157 00000305 200A0D00            <1>
   158                              <1> 
   159                              <1> debDPBBPBptr:
   160                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   161                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   162 00000309 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   163 00000310 4889E8              <1>     mov rax, rbp
   164 00000313 E811010000          <1>     call overlayQword
   165 00000318 4881C321000000      <1>     add rbx, 33
   166 0000031F 4889F0              <1>     mov rax, rsi
   167 00000322 E802010000          <1>     call overlayQword
   168 00000327 488D2D06000000      <1>     lea rbp, .dpb
   169 0000032E E8BBFDFFFF          <1>     call debPrintNullString
   170 00000333 C3                  <1>     ret
   171                              <1> .dpb: 
   172 00000334 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   172 0000033D 203030303030303030- <1>
   172 00000346 303030303030303068- <1>
   172 0000034F 2066726F6D20        <1>
   173 00000355 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   173 0000035E 203030303030303030- <1>
   173 00000367 303030303030303068- <1>
   173 00000370 200A0D00            <1>
   174                              <1> overlayByte:
   175                              <1>     ;Called with number in rax
   176                              <1>     ;pointer to START of 16 byte space for number in rbx
   177 00000374 53                  <1>     push rbx
   178 00000375 51                  <1>     push rcx
   179 00000376 52                  <1>     push rdx
   180 00000377 55                  <1>     push rbp
   181 00000378 4889DD              <1>     mov rbp, rbx
   182 0000037B 4889C2              <1>     mov rdx, rax
   183 0000037E 48FFC5              <1>     inc rbp ;Go to end of number
   184                              <1> 
   185 00000381 488D1D9BFCFFFF      <1>     lea rbx, debascii
   186 00000388 88D0                <1>     mov al, dl  ;Go low nybble first
   187 0000038A 240F                <1>     and al, 0Fh
   188 0000038C D7                  <1>     xlatb
   189 0000038D 884500              <1>     mov byte [rbp], al
   190 00000390 48FFCD              <1>     dec rbp ;Go down one char pos
   191 00000393 88D0                <1>     mov al, dl
   192 00000395 24F0                <1>     and al, 0F0h    ;Hi nybble next
   193 00000397 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   194 0000039A D7                  <1>     xlatb
   195 0000039B 884500              <1>     mov byte [rbp], al  ;Store char
   196                              <1> 
   197 0000039E 5D                  <1>     pop rbp
   198 0000039F 5A                  <1>     pop rdx
   199 000003A0 59                  <1>     pop rcx
   200 000003A1 5B                  <1>     pop rbx
   201 000003A2 C3                  <1>     ret
   202                              <1> 
   203                              <1> overlayWord:
   204                              <1>     ;Called with number in rax
   205                              <1>     ;pointer to START of 16 byte space for number in rbx
   206 000003A3 53                  <1>     push rbx
   207 000003A4 51                  <1>     push rcx
   208 000003A5 52                  <1>     push rdx
   209 000003A6 55                  <1>     push rbp
   210 000003A7 4889DD              <1>     mov rbp, rbx
   211 000003AA 4889C2              <1>     mov rdx, rax
   212 000003AD 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   213 000003B4 B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   214 000003B9 488D1D63FCFFFF      <1>     lea rbx, debascii
   215                              <1> .ow0:
   216 000003C0 88D0                <1>     mov al, dl  ;Go low nybble first
   217 000003C2 240F                <1>     and al, 0Fh
   218 000003C4 D7                  <1>     xlatb
   219 000003C5 884500              <1>     mov byte [rbp], al
   220 000003C8 48FFCD              <1>     dec rbp ;Go down one char pos
   221 000003CB 88D0                <1>     mov al, dl
   222 000003CD 24F0                <1>     and al, 0F0h    ;Hi nybble next
   223 000003CF C0E804              <1>     shr al, 4   ;Shift hi nybble low
   224 000003D2 D7                  <1>     xlatb
   225 000003D3 884500              <1>     mov byte [rbp], al  ;Store char
   226 000003D6 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   227 000003DA 48FFCD              <1>     dec rbp
   228 000003DD FFC9                <1>     dec ecx
   229 000003DF 75DF                <1>     jnz .ow0
   230 000003E1 5D                  <1>     pop rbp
   231 000003E2 5A                  <1>     pop rdx
   232 000003E3 59                  <1>     pop rcx
   233 000003E4 5B                  <1>     pop rbx
   234 000003E5 C3                  <1>     ret
   235                              <1> 
   236                              <1> overlayDword:
   237                              <1>     ;Called with number in rax
   238                              <1>     ;pointer to START of 16 byte space for number in rbx
   239 000003E6 53                  <1>     push rbx
   240 000003E7 51                  <1>     push rcx
   241 000003E8 52                  <1>     push rdx
   242 000003E9 55                  <1>     push rbp
   243 000003EA 4889DD              <1>     mov rbp, rbx
   244 000003ED 4889C2              <1>     mov rdx, rax
   245 000003F0 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   246 000003F7 B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   247 000003FC 488D1D20FCFFFF      <1>     lea rbx, debascii
   248                              <1> .od0:
   249 00000403 88D0                <1>     mov al, dl  ;Go low nybble first
   250 00000405 240F                <1>     and al, 0Fh
   251 00000407 D7                  <1>     xlatb
   252 00000408 884500              <1>     mov byte [rbp], al
   253 0000040B 48FFCD              <1>     dec rbp ;Go down one char pos
   254 0000040E 88D0                <1>     mov al, dl
   255 00000410 24F0                <1>     and al, 0F0h    ;Hi nybble next
   256 00000412 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   257 00000415 D7                  <1>     xlatb
   258 00000416 884500              <1>     mov byte [rbp], al  ;Store char
   259 00000419 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   260 0000041D 48FFCD              <1>     dec rbp
   261 00000420 FFC9                <1>     dec ecx
   262 00000422 75DF                <1>     jnz .od0
   263 00000424 5D                  <1>     pop rbp
   264 00000425 5A                  <1>     pop rdx
   265 00000426 59                  <1>     pop rcx
   266 00000427 5B                  <1>     pop rbx
   267 00000428 C3                  <1>     ret
   268                              <1> 
   269                              <1> overlayQword:
   270                              <1>     ;Called with number in rax
   271                              <1>     ;pointer to START of 16 byte space for number in rbx
   272 00000429 53                  <1>     push rbx
   273 0000042A 51                  <1>     push rcx
   274 0000042B 52                  <1>     push rdx
   275 0000042C 55                  <1>     push rbp
   276 0000042D 4889DD              <1>     mov rbp, rbx
   277 00000430 4889C2              <1>     mov rdx, rax
   278 00000433 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   279 0000043A B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   280 0000043F 488D1DDDFBFFFF      <1>     lea rbx, debascii
   281                              <1> .oq0:
   282 00000446 88D0                <1>     mov al, dl  ;Go low nybble first
   283 00000448 240F                <1>     and al, 0Fh
   284 0000044A D7                  <1>     xlatb
   285 0000044B 884500              <1>     mov byte [rbp], al
   286 0000044E 48FFCD              <1>     dec rbp ;Go down one char pos
   287 00000451 88D0                <1>     mov al, dl
   288 00000453 24F0                <1>     and al, 0F0h    ;Hi nybble next
   289 00000455 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   290 00000458 D7                  <1>     xlatb
   291 00000459 884500              <1>     mov byte [rbp], al  ;Store char
   292 0000045C 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   293 00000460 48FFCD              <1>     dec rbp
   294 00000463 FFC9                <1>     dec ecx
   295 00000465 75DF                <1>     jnz .oq0
   296 00000467 5D                  <1>     pop rbp
   297 00000468 5A                  <1>     pop rdx
   298 00000469 59                  <1>     pop rcx
   299 0000046A 5B                  <1>     pop rbx
   300 0000046B C3                  <1>     ret
   301                              <1> 
   302                              <1> debPrintFunctionName:
   303                              <1> ;Prints the DOS function that has been entered
   304                              <1> ;Entered with ah = Function number
   305 0000046C 88E0                <1>     mov al, ah  ;Get dos function number
   306 0000046E 488D1DAEFBFFFF      <1>     lea rbx, debascii
   307 00000475 488D1535000000      <1>     lea rdx, .number
   308 0000047C 24F0                <1>     and al, 0F0h    ;Get high nybble first
   309 0000047E C0E804              <1>     shr al, 4
   310 00000481 D7                  <1>     xlatb
   311 00000482 8802                <1>     mov byte [rdx], al
   312 00000484 88E0                <1>     mov al, ah
   313 00000486 240F                <1>     and al, 0Fh
   314 00000488 D7                  <1>     xlatb
   315 00000489 884201              <1>     mov byte [rdx + 1], al
   316 0000048C 488D2D06000000      <1>     lea rbp, .dosString
   317 00000493 E856FCFFFF          <1>     call debPrintNullString
   318 00000498 C3                  <1>     ret
   319 00000499 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   319 000004A2 696F6E20496E742034- <1>
   319 000004AB 31682F41483D        <1>
   320 000004B1 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   321                              <1> 
   322                              <1> ;----------------:
   323                              <1> ;!!!! MACROS !!!!:
   324                              <1> ;----------------:
   325                              <1> ;Insert macro when entering a debug block
   326                              <1> %macro debugEnterM 0
   327                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   328                              <1>     mov rsp, debStackTop
   329                              <1> ;Push all registers except rsp on stack
   330                              <1>     push rax
   331                              <1>     push rbx
   332                              <1>     push rcx
   333                              <1>     push rdx
   334                              <1>     push rsi
   335                              <1>     push rdi
   336                              <1>     push rbp
   337                              <1>     push r8
   338                              <1>     push r9
   339                              <1>     push r10
   340                              <1>     push r11
   341                              <1>     push r12
   342                              <1>     push r13
   343                              <1>     push r14
   344                              <1>     push r15
   345                              <1>     pushfq
   346                              <1> %endmacro
   347                              <1> ;Insert macro when exiting a debug block
   348                              <1> %macro debugExitM 0
   349                              <1>     popfq
   350                              <1>     pop r15
   351                              <1>     pop r14
   352                              <1>     pop r13
   353                              <1>     pop r12
   354                              <1>     pop r11
   355                              <1>     pop r10
   356                              <1>     pop r9
   357                              <1>     pop r8
   358                              <1>     pop rbp
   359                              <1>     pop rdi
   360                              <1>     pop rsi
   361                              <1>     pop rdx
   362                              <1>     pop rcx
   363                              <1>     pop rbx
   364                              <1>     pop rax
   365                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   366                              <1> %endmacro
    17                                  %include "./Source/Kernel/bufferFunctions.asm"
    18                              <1> ;This file contains miscellaneous disk buffer related functions that
    19                              <1> ; dont fit anywhere else
    20                              <1> 
    21                              <1> readBuffer: ;EXTERNAL LINKAGE
    22                              <1> ;
    23                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
    24                              <1> ;TO CALL!
    25                              <1> ;
    26                              <1> ;This function will return a pointer to the desired data sector OR 
    27                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
    28                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
    29                              <1> ;Entry: rax = Sector to read
    30                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data) 
    31                              <1> ;       rsi = DPB of transacting drive
    32                              <1> ;Exit:  CF = NC : All ok!
    33                              <1> ;       rbx = Pointer to buffer header with valid data in buffer.
    34                              <1> ;       All other registers as before
    35                              <1> ;       CF = CY: Something went wrong, return error code or INT 44h
    36                              <1> ;       ch = 0 -> Data Not Flushed To Disk
    37                              <1> ;       ch = 1 -> Data Not Read From Disk
    38                              <1> ;       rbx = Pointer to buffer containing sector without valid data in buffer ;            (either unflushed or unread)
    39 000004B7 52                  <1>     push rdx
    40 000004B8 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
    41 000004BA E848010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
    42 000004BF 4881FBFFFFFFFF      <1>     cmp rbx, -1
    43 000004C6 7403                <1>     je .rbReadNewSector
    44                              <1> .rbExit:
    45 000004C8 F8                  <1>     clc
    46                              <1> .rbExitNoFlag:
    47 000004C9 5A                  <1>     pop rdx
    48 000004CA C3                  <1>     ret
    49                              <1> .rbReadNewSector:
    50 000004CB E8C6000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rbx
    51 000004D0 4889DD              <1>     mov rbp, rbx
    52 000004D3 30ED                <1>     xor ch, ch
    53 000004D5 E869000000          <1>     call flushBuffer
    54 000004DA 72ED                <1>     jc .rbExitNoFlag    ;Exit in error
    55                              <1> ;rbp points to bufferHdr that has been appropriately linked to the head of chain
    56 000004DC 51                  <1>     push rcx
    57 000004DD 885508              <1>     mov byte [rbp + bufferHdr.driveNumber], dl
    58 000004E0 884D09              <1>     mov byte [rbp + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
    59 000004E3 4889450A            <1>     mov qword [rbp + bufferHdr.bufferLBA], rax
    60 000004E7 80F902              <1>     cmp cl, fatBuffer
    61 000004EA B201                <1>     mov dl, 1   ;Default values if not fat buffer
    62 000004EC B900000000          <1>     mov ecx, 0  ;Ditto!
    63 000004F1 7506                <1>     jne .rbNonFATbuffer
    64 000004F3 8A5607              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
    65 000004F6 8B4E12              <1>     mov ecx, dword [rsi + dpb.dFATlength]
    66                              <1> .rbNonFATbuffer:
    67 000004F9 885512              <1>     mov byte [rbp + bufferHdr.bufFATcopy], dl
    68 000004FC 894D13              <1>     mov dword [rbp + bufferHdr.bufFATsize], ecx
    69 000004FF 48897517            <1>     mov qword [rbp + bufferHdr.driveDPBPtr], rsi
    70 00000503 C6451F00            <1>     mov byte [rbp + bufferHdr.reserved], 0
    71 00000507 59                  <1>     pop rcx
    72 00000508 FEC5                <1>     inc ch  ;If an error occurs, have the signature in ch
    73 0000050A E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
    74 0000050F EBB8                <1>     jmp short .rbExitNoFlag
    75                              <1> 
    76                              <1> readSectorBuffer:
    77                              <1> ;Reads a sector into a built sector buffer
    78                              <1> ;Entry: rbp = Pointer to buffer header
    79                              <1> ;Exit:  CF=NC : Success
    80                              <1> ;       CF=CY : Fail, terminate the request
    81                              <1> ;       rbx pointing to buffer header
    82                              <1> ;First make request to device driver
    83 00000511 50                  <1>     push rax
    84 00000512 53                  <1>     push rbx
    85 00000513 51                  <1>     push rcx
    86 00000514 52                  <1>     push rdx
    87 00000515 56                  <1>     push rsi
    88                              <1> .rsRequest0:
    89 00000516 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
    90                              <1> .rsRequest1:
    91 0000051B 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
    92 0000051E B901000000          <1>     mov ecx, 1  ;One sector to copy
    93 00000523 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
    94 00000527 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
    95 0000052B E890080000          <1>     call absDiskRead    ;Call INT 45h
    96 00000530 7207                <1>     jc .rsFail
    97                              <1> .rsExit:
    98 00000532 F8                  <1>     clc
    99                              <1> .rsExitBad:
   100 00000533 5E                  <1>     pop rsi
   101 00000534 5A                  <1>     pop rdx
   102 00000535 59                  <1>     pop rcx
   103 00000536 5B                  <1>     pop rbx
   104 00000537 58                  <1>     pop rax
   105 00000538 C3                  <1>     ret
   106                              <1> .rsFail:
   107                              <1> ;Enter here only if the request failed
   108 00000539 FFCE                <1>     dec esi
   109 0000053B 75DE                <1>     jnz .rsRequest1 ;Try the request again!
   110                              <1> ;Request failed thrice, critical error call
   111 0000053D F9                  <1>     stc
   112 0000053E E9F0FFFFFF          <1>     jmp .rsExitBad  ;Abort
   113                              <1> 
   114                              <1> flushBuffer:
   115                              <1> ;Flushes the data in a sector buffer to disk!
   116                              <1> ;Entry: rbp = Pointer to buffer header for this buffer
   117                              <1> ;Exit:  CF=NC : Success
   118                              <1> ;       CF=CY : Fail, terminate the request
   119                              <1> ;First make request to device driver
   120 00000543 50                  <1>     push rax
   121 00000544 53                  <1>     push rbx
   122 00000545 51                  <1>     push rcx
   123 00000546 52                  <1>     push rdx
   124 00000547 56                  <1>     push rsi
   125 00000548 F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   126 0000054C 7433                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   127                              <1> .fbRequest0:
   128 0000054E BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   129                              <1> .fbRequest1:
   130 00000553 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   131 00000556 B901000000          <1>     mov ecx, 1  ;One sector to copy
   132 0000055B 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
   133 0000055F 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
   134 00000563 E8E1070000          <1>     call absDiskWrite    ;Call INT 46h
   135 00000568 7222                <1>     jc .fbFail
   136                              <1> ;Now check if the buffer was a FAT, to write additional copies
   137 0000056A F6450902            <1>     test byte [rbp + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   138 0000056E 7411                <1>     jz .fbFreeExit  ;If not, exit
   139 00000570 FE4D12              <1>     dec byte [rbp + bufferHdr.bufFATcopy]
   140 00000573 740C                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   141 00000575 8B4513              <1>     mov eax, dword [rbp + bufferHdr.bufFATsize]
   142 00000578 4801450A            <1>     add qword [rbp + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   143 0000057C E9CDFFFFFF          <1>     jmp .fbRequest0 ;Make another request
   144                              <1> .fbFreeExit:
   145                              <1> ;Free the buffer if it was flushed successfully
   146 00000581 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1
   147 00000585 F8                  <1>     clc
   148                              <1> .fbExitBad:
   149 00000586 5E                  <1>     pop rsi
   150 00000587 5A                  <1>     pop rdx
   151 00000588 59                  <1>     pop rcx
   152 00000589 5B                  <1>     pop rbx
   153 0000058A 58                  <1>     pop rax
   154 0000058B C3                  <1>     ret
   155                              <1> .fbFail:
   156                              <1> ;Enter here only if the request failed
   157 0000058C FFCE                <1>     dec esi
   158 0000058E 75C3                <1>     jnz .fbRequest1 ;Try the request again!
   159                              <1> ;Request failed thrice, critical error call
   160 00000590 F9                  <1>     stc
   161 00000591 E9F0FFFFFF          <1>     jmp .fbExitBad  ;Abort
   162                              <1>     
   163                              <1> findLRUBuffer: 
   164                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   165                              <1> ; in rbx
   166                              <1> ;Input: Nothing
   167                              <1> ;Output: rbx = Pointer to the buffer hdr to use
   168 00000596 52                  <1>     push rdx
   169 00000597 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
   170 0000059E 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   171 000005A2 7436                <1>     je .flbExit 
   172 000005A4 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   173 000005AB 742D                <1>     je .flbExit
   174                              <1> .flbWalk:
   175 000005AD 4889DA              <1>     mov rdx, rbx    ;Save a ptr to the previous buffer header
   176 000005B0 488B1A              <1>     mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   177 000005B3 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1
   178 000005B7 7423                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   179 000005B9 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   180 000005C0 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   181 000005C2 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   182                              <1> .flbHeadLink:
   183 000005C9 488B15(A2C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   184 000005D0 48891D(A2C00300)    <1>     mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
   185 000005D7 488913              <1>     mov qword [rbx + bufferHdr.nextBufPtr], rdx
   186                              <1> .flbExit:
   187 000005DA 5A                  <1>     pop rdx
   188 000005DB C3                  <1>     ret
   189                              <1> .flbFreeLink:
   190 000005DC 51                  <1>     push rcx
   191 000005DD 488B0B              <1>     mov rcx, qword [rbx + bufferHdr.nextBufPtr]
   192 000005E0 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rbx
   193 000005E3 59                  <1>     pop rcx
   194 000005E4 EBE3                <1>     jmp short .flbHeadLink
   195                              <1> 
   196                              <1> findDirtyBufferForDrive:    ;EXTERNAL LINKAGE
   197                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   198                              <1> ;Input: dl = Drive number
   199                              <1> ;Output: rbx = Pointer to dirty buffer for drive letter if exists or -1 if not
   200 000005E6 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
   201                              <1> .fdbfdCheckBuffer:
   202 000005ED 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   203 000005F0 7507                <1>     jne .fdbfdGotoNextBuffer
   204 000005F2 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   205 000005F6 7401                <1>     jz .fdbfdGotoNextBuffer ;Bit not set, goto next buffer
   206                              <1> .fdbfdExit:
   207 000005F8 C3                  <1>     ret
   208                              <1> .fdbfdGotoNextBuffer:
   209 000005F9 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   210 000005FC 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   211 00000603 74F3                <1>     je .fdbfdExit
   212 00000605 EBE6                <1>     jmp short .fdbfdCheckBuffer
   213                              <1> 
   214                              <1> findSectorInBuffer:     ;EXTERNAL LINKAGE
   215                              <1> ;Finds the Buffer for a sector
   216                              <1> ;If the sector is not in a buffer, returns with a -1
   217                              <1> ;Input: rax = Sector number
   218                              <1> ;        dl = Drive number
   219                              <1> ;Output: rbx = Buffer hdr pointer or -1
   220 00000607 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
   221                              <1> .fsiCheckBuffer:
   222 0000060E 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   223 00000611 7507                <1>     jne .fsiGotoNextBuffer
   224 00000613 4839430A            <1>     cmp qword [rbx + bufferHdr.bufferLBA], rax
   225 00000617 7501                <1>     jne .fsiGotoNextBuffer
   226                              <1> .fsiExit:
   227 00000619 C3                  <1>     ret
   228                              <1> .fsiGotoNextBuffer:
   229 0000061A 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   230 0000061D 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   231 00000624 74F3                <1>     je .fsiExit
   232 00000626 EBE6                <1>     jmp short .fsiCheckBuffer
    18                                  %include "./Source/Kernel/fat.asm"
    19                              <1> ;-----------------------------------:
    20                              <1> ;       File System routines        :
    21                              <1> ;-----------------------------------:
    22                              <1> name2Clust:
    23                              <1> ;Converts a file name to a first cluster number
    24                              <1> ;Entry : rbx = Points to ASCIIZ string to parse for a Cluster number
    25                              <1> ;Exit : rax = Cluster number or -1 if file not found
    26                              <1> ;Three cases:
    27                              <1> ;1) Start with a letter and a : => Full path and Drive specified
    28                              <1> ;2) Start with \ or / => Current Drive and relative path from root
    29                              <1> ;3) Else => File name in Current Dir or a subdir from current dir
    30 00000628 56                  <1>     push rsi
    31 00000629 57                  <1>     push rdi
    32 0000062A 51                  <1>     push rcx
    33 0000062B 52                  <1>     push rdx
    34 0000062C 4889DF              <1>     mov rdi, rbx    ;Save string ptr in rdi
    35 0000062F 807F013A            <1>     cmp byte [rdi + 1], ":" ;Check it is a colon for full path
    36 00000633 7427                <1>     je .fullPath
    37 00000635 803F5C              <1>     cmp byte [rdi], "\"
    38 00000638 7422                <1>     je .relPath
    39 0000063A 803F2F              <1>     cmp byte [rdi], "/"
    40 0000063D 741D                <1>     je .relPath ;Both CPM and UNIX are considered acceptible path separators
    41                              <1>     ;Else search the current dir for an entry
    42 0000063F 480FB605(0DC10300)  <1>     movzx rax, byte [currentDrv]   ;Get current drive
    43 00000647 E8DA060000          <1>     call getCDS
    44 0000064C 8B434D              <1>     mov eax, dword [rbx + cds.dStartCluster]    ;Get start cluster
    45 0000064F 488B7345            <1>     mov rsi, qword [rbx + cds.qDPBPtr]  ;Get dpb ptr in rsi
    46 00000653 85C0                <1>     test eax, eax
    47 00000655 7505                <1>     jnz .localFileNoRoot
    48                              <1>     ;Here, we deal with Root Directories
    49 00000657 E872000000          <1>     call getFATtype ;rsi points to dpb
    50                              <1>     ;if ecx = 2, then FAT 32 and must treat differently
    51                              <1> 
    52                              <1> .localFileNoRoot:
    53                              <1> .relPath:
    54                              <1> .fullPath:
    55                              <1> .exit:
    56 0000065C 5A                  <1>     pop rdx
    57 0000065D 59                  <1>     pop rcx
    58 0000065E 5F                  <1>     pop rdi
    59 0000065F 5E                  <1>     pop rsi
    60 00000660 C3                  <1>     ret
    61                              <1> 
    62                              <1> searchDirectorySectorForEntry:
    63                              <1> ;Proc that searches the sector for the string 
    64                              <1> ; UP UNTIL the NULL char or the path separator
    65                              <1> ;If a . is found in file name, skip it
    66                              <1> ;If a sector entry is found to start with 0, return fail
    67                              <1> ;Entry: rdx = Path Section ptr (point to first A/N char)
    68                              <1> ;       rbx = Sector buffer pointer
    69                              <1> ;       rsi = DPB pointer
    70                              <1> ;Exit: CF=NC => Found, CF=CY => Not found
    71                              <1> ;       If CF=CY read char pointed to by rbx.
    72                              <1> ;       If this char is 0, then end of directory reached!
    73 00000661 50                  <1>     push rax
    74 00000662 51                  <1>     push rcx
    75                              <1>     ;cl has number of entries per sector
    76 00000663 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
    77 00000666 80E905              <1>     sub cl, 5   ;5 is the number of bytes per dir entry shift
    78 00000669 B801000000          <1>     mov eax, 1
    79 0000066E D3E0                <1>     shl eax, cl ;eax has number of directory entries in sector
    80                              <1>     ;Now search each entry for name
    81                              <1>     ;Use ecx as counter for each entry
    82 00000670 89C1                <1>     mov ecx, eax
    83                              <1> .searchDir:
    84 00000672 803B00              <1>     cmp byte [rbx], 0 ;Check if dir empty before proceeding
    85 00000675 744E                <1>     jz .exitNotOK
    86                              <1>     ;Do string compare here, search for / or \ or 0 to exit
    87 00000677 52                  <1>     push rdx    ;Push the name pointer 
    88 00000678 53                  <1>     push rbx    ;Push sector pointer
    89                              <1> .searchLoop:
    90 00000679 8A02                <1>     mov al, byte [rdx] ;Get char in ASCIIZ buffer
    91 0000067B 3C2E                <1>     cmp al, "." ;Verify if name separator or directory entry
    92 0000067D 742C                <1>     je .dotCase
    93 0000067F 3C05                <1>     cmp al, 05h ;Special Case
    94 00000681 7424                <1>     je .specialCase
    95 00000683 3C2F                <1>     cmp al, "/" ;Name Found
    96 00000685 7442                <1>     je .nameFound
    97 00000687 3C5C                <1>     cmp al, "\" ;Name Found
    98 00000689 743E                <1>     je .nameFound
    99 0000068B 3C00                <1>     cmp al, 0   ;End of ASCIIZ string!
   100 0000068D 743A                <1>     je .nameFound
   101                              <1> .specRet:
   102 0000068F 3A03                <1>     cmp al, byte [rbx]  ;Compare to char in sector buffer
   103 00000691 7520                <1>     jne .nameNotFound
   104 00000693 48FFC3              <1>     inc rbx
   105                              <1> .skipChar:
   106 00000696 48FFC2              <1>     inc rdx ;Go to Filename extension
   107 00000699 5B                  <1>     pop rbx ;Get start of directory entry into rbx
   108 0000069A 53                  <1>     push rbx
   109 0000069B 4881C308000000      <1>     add rbx, 8  ;Go to the extension portion of the Filename
   110 000006A2 E9D2FFFFFF          <1>     jmp .searchLoop
   111                              <1> .specialCase:
   112 000006A7 B0E5                <1>     mov al, 0E5h
   113 000006A9 EBE4                <1>     jmp short .specRet
   114                              <1> .dotCase:
   115                              <1> ;Check if next char is geq than 'A'. If yes, path separator
   116 000006AB 807A0141            <1>     cmp byte [rdx + 1], 'A'
   117 000006AF 7CDE                <1>     jnge .specRet   ;Not Path Separator
   118 000006B1 EBE3                <1>     jmp short .skipChar
   119                              <1> .nameNotFound:
   120 000006B3 5B                  <1>     pop rbx
   121 000006B4 5A                  <1>     pop rdx
   122 000006B5 4881C320000000      <1>     add rbx, 20h    ;Goto next sector entry
   123 000006BC 803B00              <1>     cmp byte [rbx], 0   ;Are we at the end of the Directory?
   124 000006BF 7404                <1>     jz .exitNotOK   ;Exit early, end of directory
   125 000006C1 FFC9                <1>     dec ecx
   126 000006C3 75AD                <1>     jnz .searchDir
   127                              <1> .exitNotOK:
   128 000006C5 F9                  <1>     stc
   129                              <1> .exitOk:
   130 000006C6 59                  <1>     pop rcx
   131 000006C7 58                  <1>     pop rax
   132 000006C8 C3                  <1>     ret
   133                              <1> .nameFound:
   134 000006C9 5B                  <1>     pop rbx
   135 000006CA 5A                  <1>     pop rdx
   136 000006CB F8                  <1>     clc
   137 000006CC EBF8                <1>     jmp short .exitOk
   138                              <1> getFATtype:
   139                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
   140                              <1> ;Entry: rsi = DPB to ascertain FAT
   141                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
   142 000006CE 53                  <1>     push rbx
   143 000006CF 8B5E0E              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
   144 000006D2 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
   145 000006D7 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
   146 000006DD 730F                <1>     jae .exit
   147 000006DF FFC9                <1>     dec ecx     ;FAT 12 marker
   148 000006E1 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
   149 000006E7 7205                <1>     jb .exit
   150 000006E9 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
   151                              <1> .exit:
   152 000006EE 5B                  <1>     pop rbx
   153 000006EF C3                  <1>     ret
   154                              <1> 
   155                              <1> clust2FATEntry:
   156                              <1> ;Converts a cluster number to a offset in the FAT
   157                              <1> ;Entry:  rsi points to the DPB for the transacting device
   158                              <1> ;        eax = Cluster number to look for
   159                              <1> ;Exit:   eax = Sector on disk of FAT 
   160                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
   161                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
   162 000006F0 53                  <1>     push rbx
   163 000006F1 8B5E0E              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
   164 000006F4 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
   165 000006FA 731E                <1>     jae .fat32
   166 000006FC 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
   167 00000702 7209                <1>     jb .fat12
   168                              <1> ;FAT16
   169 00000704 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
   170 00000706 6801000000          <1>     push qword 1
   171 0000070B EB15                <1>     jmp short .common
   172                              <1> .fat12:
   173 0000070D 89C1                <1>     mov ecx, eax    ;ecx = eax
   174 0000070F D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
   175 00000711 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
   176 00000713 6800000000          <1>     push qword 0
   177 00000718 EB08                <1>     jmp short .common
   178                              <1> .fat32:
   179 0000071A 6802000000          <1>     push qword 2
   180 0000071F C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
   181                              <1> .common:
   182                              <1> ;eax has the FAToffset
   183 00000722 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
   184 00000725 BA01000000          <1>     mov edx, 1
   185 0000072A D3E2                <1>     shl edx, cl    ;Turn edx to number of bytes per sector
   186 0000072C 89D1                <1>     mov ecx, edx
   187 0000072E 31D2                <1>     xor edx, edx    ;edx = 0
   188 00000730 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
   189 00000732 0FB75E05            <1>     movzx ebx, word [rsi + dpb.wFAToffset]   ;Add the offset to the first FAT
   190 00000736 01D8                <1>     add eax, ebx
   191 00000738 59                  <1>     pop rcx ;Pop the FAT type back into rcx
   192 00000739 5B                  <1>     pop rbx
   193 0000073A C3                  <1>     ret
   194                              <1> getStartSectorOfCluster:
   195                              <1> ;Input: eax = Cluster Number
   196                              <1> ;       r9 = dpb pointer
   197                              <1> ;Output: eax = Starting Sector number for cluster
   198                              <1> ;Gives the data sector we are at in the current cluster
   199                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
   200 0000073B 51                  <1>     push rcx
   201 0000073C 2D02000000          <1>     sub eax, 2
   202 00000741 418A4904            <1>     mov cl, byte [r9 + dpb.bSectorsPerClusterShift]
   203 00000745 D3E0                <1>     shl eax, cl
   204 00000747 4103410A            <1>     add eax, [r9 + dpb.dClusterHeapOffset]
   205                              <1>     ;eax now has the first sector of the current cluster
   206 0000074B 59                  <1>     pop rcx
   207 0000074C C3                  <1>     ret
   208                              <1> getNextSectorOfFile:
   209                              <1> ;This function will read the next sector for a file into a buffer.
   210                              <1> ;If the next sector to be read lives in the next cluster, it will update
   211                              <1> ; the file handle of the file being read/written to the new cluster
   212                              <1> ;
   213                              <1> ;Input: r8 = sft pointer
   214                              <1> ;       r9 = dpb pointer
   215                              <1> ;Output:
   216                              <1> ;       rbx = Pointer to buffer data
   217                              <1> ;       CF = NC, buffer OK to read
   218                              <1> ;       CF = CY, buffer not ok, something went wrong
   219                              <1> ;           ZF = ZE(1), Data not flushed to disk
   220                              <1> ;           ZF = NZ(0), Data no read from disk
   221                              <1>     ;Read next sector. If at last sector in cluster, walk map, get
   222                              <1>     ; next cluster and read first sector 
   223 0000074D 50                  <1>     push rax
   224 0000074E 51                  <1>     push rcx
   225 0000074F 52                  <1>     push rdx
   226 00000750 56                  <1>     push rsi
   227 00000751 57                  <1>     push rdi
   228                              <1>     ;Check if we need to go to next cluster
   229 00000752 66418B401F          <1>     mov ax, word [r8 + sft.wRelSect]    ;Upper byte is ALWAYS 0
   230 00000757 413A4103            <1>     cmp al, byte [r9 + dpb.bMaxSectorInCluster]
   231 0000075B 745F                <1>     je .gotoNextCluster
   232                              <1>     ;Goto next sector
   233 0000075D 6641FF401F          <1>     inc word [r8 + sft.wRelSect]    ;Goto next sector in cluster
   234                              <1> .getSector:
   235 00000762 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr] ;Get cluster number
   236 00000766 E8D0FFFFFF          <1>     call getStartSectorOfCluster
   237 0000076B 410FB7581F          <1>     movzx ebx, word [r8 + sft.wRelSect] ;Get relative sector number
   238                              <1>     ;eax now has the correct sector in the cluster
   239 00000770 01D8                <1>     add eax, ebx    
   240                              <1>     ;Read the sector into a buffer
   241                              <1>     ;The sector read here is either DATA or DOS
   242 00000772 498D7026            <1>     lea rsi, qword [r8 + sft.sFileName]
   243 00000776 488D3D85F8FFFF      <1>     lea rdi, dosBIOSName    ;Check if the file being read is the BIOS
   244 0000077D B90B000000          <1>     mov ecx, 11             ;File name length
   245 00000782 F3A6                <1>     repe cmpsb
   246 00000784 742D                <1>     je .OSFile
   247 00000786 498D7026            <1>     lea rsi, qword [r8 + sft.sFileName]
   248 0000078A 488D3D7DF8FFFF      <1>     lea rdi, dosKernName
   249 00000791 B90B000000          <1>     mov ecx, 11             ;File name length
   250 00000796 F3A6                <1>     repe cmpsb
   251 00000798 7419                <1>     je .OSFile
   252                              <1>     ;Not an OS file, dataBuffer
   253 0000079A B108                <1>     mov cl, dataBuffer
   254                              <1> .getSectorRead:
   255 0000079C 4C89CE              <1>     mov rsi, r9
   256 0000079F E813FDFFFF          <1>     call readBuffer
   257 000007A4 7211                <1>     jc .getSectorFailed
   258 000007A6 4881C320000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   259                              <1> .getSectorExit:
   260 000007AD 5F                  <1>     pop rdi
   261 000007AE 5E                  <1>     pop rsi
   262 000007AF 5A                  <1>     pop rdx
   263 000007B0 59                  <1>     pop rcx
   264 000007B1 58                  <1>     pop rax
   265 000007B2 C3                  <1>     ret
   266                              <1> .OSFile:
   267 000007B3 B101                <1>     mov cl, dosBuffer
   268 000007B5 EBE5                <1>     jmp short .getSectorRead
   269                              <1> .getSectorFailed:
   270                              <1>     ;CF = CY => Something went wrong!
   271                              <1>     ;   Set the Zero flag for data not flushed to disk
   272                              <1>     ;   Clear Zero flag for data not read from disk
   273 000007B7 84ED                <1>     test ch, ch ;This sets the zero flag correctly, but mangles CF
   274 000007B9 F9                  <1>     stc ;Set the carry flag!
   275 000007BA EBF1                <1>     jmp short .getSectorExit
   276                              <1> 
   277                              <1> .gotoNextCluster:
   278                              <1>     ;Read FAT, find next cluster in cluster map, update SFT entries
   279 000007BC 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr] ;Get the current cluster
   280 000007C0 4C89CE              <1>     mov rsi, r9 ;Move dpb pointer into rsi, eax has cluster number
   281 000007C3 E828FFFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   282 000007C8 410FB75905          <1>     movzx ebx, word [r9 + dpb.wFAToffset]
   283 000007CD 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   284 000007CF B102                <1>     mov cl, fatBuffer
   285 000007D1 E8E1FCFFFF          <1>     call readBuffer ;Buffer Header in ebx
   286 000007D6 72DF                <1>     jc .getSectorFailed
   287                              <1>     ;Check if FAT 12, 16, 32
   288 000007D8 4885FF              <1>     test rdi, rdi
   289 000007DB 7429                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   290 000007DD 48F7C701000000      <1>     test rdi, 1
   291 000007E4 7407                <1>     jz .goToNextClusterCommonFat32
   292                              <1>     ;Here we handle FAT16
   293 000007E6 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   294 000007EB EB09                <1>     jmp short .goToNextClusterCommon
   295                              <1> .goToNextClusterCommonFat32:
   296 000007ED 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   297 000007F1 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   298                              <1> .goToNextClusterCommon:
   299 000007F6 41894039            <1>     mov dword [r8 + sft.dAbsClusr], eax ;Save new cluster number
   300 000007FA 6641C7401F0000      <1>     mov word [r8 + sft.wRelSect], 0 ;First sector in next cluster
   301 00000801 E95CFFFFFF          <1>     jmp .getSector
   302                              <1> .gotoNextClusterFat12:
   303                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   304                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   305 00000806 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   306 00000809 FFC0                <1>     inc eax ;Get next sector
   307 0000080B E8A7FCFFFF          <1>     call readBuffer ;Buffer Header in ebx
   308 00000810 72A5                <1>     jc .getSectorFailed
   309                              <1>     ;rdi has first buffer header, rbx has second buffer header
   310                              <1>     ;rdx has offset into first header for entry
   311 00000812 41F7403901000000    <1>     test dword [r8 + sft.dAbsClusr], 1  ;Check if cluster is odd
   312 0000081A 7429                <1>     jz .gotoNextClusterFat12Even
   313                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   314 0000081C B801000000          <1>     mov eax, 1
   315 00000821 418A4802            <1>     mov cl, byte [r8 + dpb.bBytesPerSectorShift]
   316 00000825 D3E0                <1>     shl eax, cl
   317 00000827 29D0                <1>     sub eax, edx
   318 00000829 FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   319 0000082B 750E                <1>     jnz .gotoNextClusterFat12NoCross
   320                              <1>     ;Boundary cross, build entry properly
   321 0000082D 31C0                <1>     xor eax, eax
   322 0000082F 8A441720            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   323 00000833 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   324 00000836 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   325 00000839 EBBB                <1>     jmp short .goToNextClusterCommon
   326                              <1> .gotoNextClusterFat12NoCross:
   327 0000083B 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   328 00000840 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   329 00000843 EBB1                <1>     jmp short .goToNextClusterCommon
   330                              <1> .gotoNextClusterFat12Even:
   331                              <1>     ;Here the cluster is even and can't cross a sector boundary
   332 00000845 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   333 0000084A 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   334 0000084F EBA5                <1>     jmp short .goToNextClusterCommon
   335                              <1> ;---------------------------------------------------:
   336                              <1> ;                   KERNEL FUNCTIONS                :
   337                              <1> ;---------------------------------------------------:
   338                              <1> makeDIR:           ;ah = 39h
   339                              <1> removeDIR:         ;ah = 3Ah
   340                              <1> changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
   341                              <1> getCurrentDIR:     ;ah = 47h
   342                              <1> getSetFileDateTime:;ah = 57h
   343                              <1> trueName:          ;ah = 60h, get fully qualified name
   344 00000851 C3                  <1>     ret
    19                                  %include "./Source/Kernel/charFunctions.asm"
    20                              <1> ;Dos default char functions live here
    21                              <1> 
    22                              <1> stdinReadEcho:     ;ah = 01h
    23                              <1> ;Return char that has been read and echoed in al
    24 00000852 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    25 00000859 488D0566000000      <1>     lea rax, .stdinReadEchoBuffer
    26 00000860 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    27 00000863 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    28 00000867 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    29 0000086D 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    30 00000871 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    31 00000878 FF15A1150000        <1>     call qword [conHdr + drvHdr.strPtr]
    32 0000087E FF15A3150000        <1>     call qword [conHdr + drvHdr.intPtr]
    33 00000884 803D3B00000000      <1>     cmp byte [.stdinReadEchoBuffer], 00h
    34 0000088B 7432                <1>     jz .stdireexit
    35 0000088D 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    36 00000894 488D052B000000      <1>     lea rax, .stdinReadEchoBuffer
    37 0000089B C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    38 0000089E C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    39 000008A2 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    40 000008A8 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    41 000008AC C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    42 000008B3 FF1566150000        <1>     call qword [conHdr + drvHdr.strPtr]
    43 000008B9 FF1568150000        <1>     call qword [conHdr + drvHdr.intPtr]
    44                              <1> .stdireexit:
    45 000008BF 8A0501000000        <1>     mov al, byte [.stdinReadEchoBuffer]
    46 000008C5 C3                  <1>     ret
    47 000008C6 00                  <1> .stdinReadEchoBuffer    db 0
    48                              <1> stdoutWrite:       ;ah = 02h
    49                              <1> ;Bspace is regular cursor left, does not insert a blank
    50 000008C7 881533000000        <1>     mov byte [.stdoutWriteBuffer], dl
    51 000008CD 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    52 000008D4 488D1525000000      <1>     lea rdx, .stdoutWriteBuffer
    53 000008DB C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    54 000008DE C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    55 000008E2 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    56 000008E8 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    57 000008EC C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    58 000008F3 FF1526150000        <1>     call qword [conHdr + drvHdr.strPtr]
    59 000008F9 FF1528150000        <1>     call qword [conHdr + drvHdr.intPtr]
    60 000008FF C3                  <1>     ret
    61 00000900 00                  <1> .stdoutWriteBuffer db 0
    62                              <1> stdauxRead:        ;ah = 03h
    63                              <1> stdauxWrite:       ;ah = 04h
    64                              <1> stdprnWrite:       ;ah = 05h
    65                              <1> directCONIO:       ;ah = 06h
    66                              <1> waitDirectInNoEcho:;ah = 07h
    67                              <1> ;Return char in al
    68 00000901 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    69 00000908 488D052B000000      <1>     lea rax, .function7buffer
    70 0000090F C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    71 00000912 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    72 00000916 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    73 0000091C 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    74 00000920 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    75 00000927 FF15F2140000        <1>     call qword [conHdr + drvHdr.strPtr]
    76 0000092D FF15F4140000        <1>     call qword [conHdr + drvHdr.intPtr]
    77 00000933 8A0501000000        <1>     mov al, byte [.function7buffer]
    78 00000939 C3                  <1>     ret
    79 0000093A 00                  <1> .function7buffer    db 0
    80                              <1> waitStdinNoEcho:   ;ah = 08h
    81 0000093B C3                  <1>     ret
    82                              <1> printString:       ;ah = 09h
    83 0000093C 31C9                <1>     xor ecx, ecx    ;Clear char counter
    84 0000093E B824000000          <1>     mov eax, "$"    ;Terminating char
    85 00000943 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
    86                              <1> .ps0:   ;Search for $ to get count of chars
    87 00000946 AE                  <1>     scasb
    88 00000947 7404                <1>     je .ps1
    89 00000949 FFC1                <1>     inc ecx
    90 0000094B EBF9                <1>     jmp short .ps0
    91                              <1> .ps1:   ;Use handle 
    92 0000094D 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    93 00000954 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    94 00000957 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    95 0000095B 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    96 00000961 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    97 00000965 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
    98 00000968 FF15B1140000        <1>     call qword [conHdr + drvHdr.strPtr]
    99 0000096E FF15B3140000        <1>     call qword [conHdr + drvHdr.intPtr]
   100                              <1> 
   101 00000974 488B1D(24C10300)    <1>     mov rbx, qword [oldRSP]
   102 0000097B 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
   103 0000097D C3                  <1>     ret
   104                              <1> buffStdinInput:    ;ah = 0Ah
   105                              <1> checkStdinStatus:  ;ah = 0Bh
   106                              <1> clearbuffDoFunc:   ;ah = 0Ch
    20                                  %include "./Source/Kernel/fcbFunctions.asm"
    21                              <1> openFileFCB:       ;ah = 0Fh
    22                              <1> closeFileFCB:      ;ah = 10h
    23                              <1> findFirstFileFCB:  ;ah = 11h
    24                              <1> findNextFileFCB:   ;ah = 12h
    25                              <1> deleteFileFCB:     ;ah = 13h
    26                              <1> sequentialReadFCB: ;ah = 14h
    27                              <1> sequentialWriteFCB:;ah = 15h
    28                              <1> createFileFCB:     ;ah = 16h
    29                              <1> renameFileFCB:     ;ah = 17h
    30 0000097E C3                  <1>     ret
    31                              <1> setDTA:            ;ah = 1Ah
    32                              <1> ;Called with:
    33                              <1> ;   rdx = Pointer to the new default DTA
    34 0000097F 488B1D(24C10300)    <1>     mov rbx, qword [oldRSP]
    35 00000986 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    36 0000098A 488915(EAC00300)    <1>     mov qword [currentDTA], rdx
    37 00000991 C3                  <1>     ret
    38                              <1> randomReadFCB:     ;ah = 21h
    39                              <1> randomWriteFCB:    ;ah = 22h
    40                              <1> getFileSizeFCB:    ;ah = 23h
    41                              <1> setRelRecordFCB:   ;ah = 24h
    42                              <1> randBlockReadFCB:  ;ah = 27h
    43                              <1> randBlockWriteFCB: ;ah = 28h
    44                              <1> parseFilenameFCB:  ;ah = 29h
    45 00000992 C3                  <1>     ret
    46                              <1> getDTA:            ;ah = 2Fh
    47 00000993 488B15(24C10300)    <1>     mov rdx, qword [oldRSP]
    48 0000099A 488B1D(EAC00300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    49 000009A1 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    50 000009A5 C3                  <1>     ret
    21                                  %include "./Source/Kernel/handleFunctions.asm"
    22                              <1> ;-----------------------------------:
    23                              <1> ;    File Handle Kernel routines    :
    24                              <1> ;-----------------------------------:
    25                              <1> 
    26                              <1> createFileHdl:     ;ah = 3Ch, handle function
    27                              <1> openFileHdl:       ;ah = 3Dh, handle function
    28                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    29 000009A6 C3                  <1>     ret
    30                              <1> readFileHdl:       ;ah = 3Fh, handle function
    31 000009A7 488B2D(24C10300)    <1>     mov rbp, qword [oldRSP]
    32 000009AE E83F000000          <1>     call getSFTPtr
    33 000009B3 722B                <1>     jc .rfhErrorHandle  ;Function can only fail for bad file handle
    34                              <1> ;Here rdi points to the correct SFT 
    35 000009B5 668B4702            <1>     mov ax, word [rdi + sft.wOpenMode]  ;Get open mode
    36 000009B9 A802                <1>     test al, RWAccess  ;Check r/w permission
    37 000009BB 7504                <1>     jnz .rfh2   ;Bit set, proceed
    38 000009BD 84C0                <1>     test al, al  ;Check read access (it is 0)
    39 000009BF 751F                <1>     jnz .rfhNoPermission    ;If not zero then it is write only permission
    40                              <1> .rfh2:
    41                              <1>     ;So now read the number of bytes from the data buffers
    42 000009C1 4889FB              <1>     mov rbx, rdi    ;Move SFT pointer into rbx
    43 000009C4 F6430520            <1>     test byte [rbx + sft.wDeviceInfo], devBinary
    44 000009C8 7409                <1>     jz .rfhASCII    ;If not set, read in ASCII
    45 000009CA E870000000          <1>     call readBinaryBytesFromFile
    46 000009CF 720F                <1>     jc .rfCriticalError
    47 000009D1 EB07                <1>     jmp short .rfhExitOK
    48                              <1> .rfhASCII:
    49 000009D3 E866000000          <1>     call readASCIIBytesFromFile
    50 000009D8 7206                <1>     jc .rfCriticalError
    51                              <1> .rfhExitOK:
    52 000009DA 88C8                <1>     mov al, cl  ;Get low byte in cl
    53 000009DC 894D00              <1>     mov dword [rbp + callerFrame.rax], ecx  ;Save number of bytes transf.
    54 000009DF C3                  <1>     ret
    55                              <1> .rfCriticalError:
    56                              <1>     ;Fail due to driver error. Invoke Int 44h if set to in SFT
    57                              <1> .rfhErrorHandle:
    58                              <1>     ;Fail due to bad file handle provided
    59                              <1> .rfhNoPermission:
    60                              <1>     ;Fail due to bad permissions
    61                              <1> writeFileHdl:      ;ah = 40h, handle function
    62 000009E0 E80D000000          <1>     call getSFTPtr
    63 000009E5 720A                <1>     jc .wfhErrorHandle  ;Function can only fail for bad file handle
    64 000009E7 668B4702            <1>     mov ax, word [rdi + sft.wOpenMode]  ;Get open mode
    65 000009EB 66A90300            <1>     test ax, 3
    66 000009EF 7400                <1>     jz .wfhNoPermission ;Bad permissions! No r/w or w permissions
    67                              <1> .wfCriticalError:
    68                              <1>     ;Fail due to driver error. Invoke Int 44h if set to in SFT
    69                              <1> .wfhErrorHandle:
    70                              <1>     ;Fail due to bad file handle provided
    71                              <1> .wfhNoPermission:
    72                              <1>     ;Fail due to bad permissions
    73                              <1> 
    74                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    75                              <1> movFileReadPtr:    ;ah = 42h, handle function, LSEEK
    76                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
    77                              <1> ioctrl:            ;ah = 44h, handle function
    78                              <1> duplicateHandle:   ;ah = 45h, handle function
    79                              <1> forceDuplicateHdl: ;ah = 46h, handle function
    80                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
    81                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
    82                              <1> renameFile:        ;ah = 56h
    83                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
    84                              <1> createNewFile:     ;ah = 5Bh
    85                              <1> lockUnlockFile:    ;ah = 5Ch
    86                              <1> setHandleCount:    ;ah = 67h
    87                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
    88 000009F1 C3                  <1>     ret
    89                              <1> ;-----------------------------------:
    90                              <1> ;        File Handle routines       :
    91                              <1> ;-----------------------------------:
    92                              <1> getSFTPtr:
    93                              <1> ;Gets the SFT pointer for a given file handle from the calling application
    94                              <1> ;On entry:
    95                              <1> ;   bl = File handle
    96                              <1> ;On exit:
    97                              <1> ;   rsi = currentPSP
    98                              <1> ;   rdi = SFT pointer
    99                              <1> ;   rax, rbx trashed
   100 000009F2 488B35(F2C00300)    <1>     mov rsi, qword [currentPSP]
   101 000009F9 480FB6DB            <1>     movzx rbx, bl
   102 000009FD 8A5C1E2A            <1>     mov bl, byte [rsi + psp.jobFileTbl + rbx]   ;Use jft entry to get sft num
   103 00000A01 31C0                <1>     xor eax, eax
   104 00000A03 488B3D(88C00300)    <1>     mov rdi, qword [sftHeadPtr]
   105                              <1> .gsp0:
   106 00000A0A 66034708            <1>     add ax, word [rdi + sfth.wNumFiles]
   107 00000A0E 38D8                <1>     cmp al, bl  ;Check if the file header block contains the entry
   108 00000A10 760E                <1>     jbe .gsp1   ;IF bl is below or equal to al then it does
   109 00000A12 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of list
   110 00000A19 7421                <1>     je .gspFail   ;If we have a number greater than the last entry, fail
   111 00000A1B 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Walk the chain
   112 00000A1E EBEA                <1>     jmp short .gsp0 ;Search again
   113                              <1> .gsp1: 
   114                              <1>     ;Now point to the right entry
   115 00000A20 28D8                <1>     sub al, bl  ;Subtract the number from the total so far to get offset
   116 00000A22 0FB6C0              <1>     movzx eax, al
   117 00000A25 4881C70A000000      <1>     add rdi, sfth_size  ;Point to first file in table
   118 00000A2C 84C0                <1>     test al, al ;Check if rdi points to the first file in this block
   119 00000A2E 740B                <1>     jz .gsp12   ;Skip walking down the sft blocks
   120                              <1> .gsp11:
   121 00000A30 4881C73D000000      <1>     add rdi, sft_size
   122 00000A37 FEC8                <1>     dec al
   123 00000A39 75F5                <1>     jnz .gsp11  ;Keep adding one until al is zero
   124                              <1> .gsp12:
   125 00000A3B C3                  <1>     ret
   126                              <1> .gspFail:
   127 00000A3C F9                  <1>     stc
   128 00000A3D C3                  <1>     ret
   129                              <1> 
   130                              <1> readASCIIBytesFromFile:
   131 00000A3E C3                  <1>     ret
   132                              <1> readBinaryBytesFromFile:
   133                              <1> ;Reads a byte from a SFT entry, does not translate it. 
   134                              <1> ;Read or RW permissions are checked at the INT 41h level
   135                              <1> ;Entry: rbp = Pointer to the caller stack
   136                              <1> ;       rbx = SFT entry pointer
   137                              <1> ;       On stack:
   138                              <1> ;           rdx = Address of the data buffer to read to
   139                              <1> ;           ecx = Number of bytes to read
   140                              <1> ;Exit: If CF = NC : All ok!
   141                              <1> ;       rbx = SFT entry pointer
   142                              <1> ;       ecx = Number of chars read/written
   143                              <1> ;      If CF = CY : Error!
   144                              <1> ;       rbx = SFT entry pointer
   145                              <1> ;       al = Error code to ret if user returns fail from int 44h or no int 44h
   146                              <1> 
   147 00000A3F 66F743058000        <1>     test word [rbx + sft.wDeviceInfo], devCharDev
   148 00000A45 755C                <1>     jnz .readBinaryBytesFromCharDevice
   149                              <1> .readBinaryBytesFromHardFile:
   150                              <1> ;Disk files are accessed from here
   151                              <1> ;Use the sector buffers if the data is already buffered,
   152                              <1> ; else use the dpb to fill a sector buffer
   153 00000A47 53                  <1>     push rbx
   154 00000A48 4989D8              <1>     mov r8, rbx                     ;Use r8 as sft pointer
   155 00000A4B 4D8B4807            <1>     mov r9, qword [r8 + sft.qPtr]   ;Use r9 as dpb pointer
   156                              <1>     ;First compute the number of bytes to read for the current sector
   157                              <1>     ;Compute how many bytes in a sector
   158 00000A4F 418A4902            <1>     mov cl, byte [r9 + dpb.bBytesPerSectorShift]
   159 00000A53 B801000000          <1>     mov eax, 1
   160 00000A58 D3E0                <1>     shl eax, cl
   161 00000A5A 89C1                <1>     mov ecx, eax    ;ecx has bytes per sector
   162 00000A5C 488B4510            <1>     mov rax, qword [rbp + callerFrame.rcx]  ;Get total number of bytes
   163 00000A60 31D2                <1>     xor edx, edx
   164 00000A62 48895510            <1>     mov qword [rbp + callerFrame.rcx], rdx  ;Zero this field
   165 00000A66 F7F1                <1>     div ecx ;Divide by number of bytes per sector
   166 00000A68 87CA                <1>     xchg ecx, edx    ;Get "in current sector remainder of bytes" in ecx
   167                              <1>                      ;and bytes per sector in edx
   168 00000A6A 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr]  ;Get cluster number
   169 00000A6E E8C8FCFFFF          <1>     call getStartSectorOfCluster
   170 00000A73 410FB7581F          <1>     movzx ebx, word [r8 + sft.wRelSect] ;Add the offset into the cluster
   171 00000A78 01D8                <1>     add eax, ebx    ;eax now has the sector number
   172 00000A7A 4C89CE              <1>     mov rsi, r9 ;Move dpb pointer into rsi
   173 00000A7D 4831FF              <1>     xor rdi, rdi
   174 00000A80 89CF                <1>     mov edi, ecx    ;Save in current sector remainder of bytes in edi
   175 00000A82 B108                <1>     mov cl, dataBuffer
   176 00000A84 E82EFAFFFF          <1>     call readBuffer ;Read the data
   177 00000A89 7218                <1>     jc .readBinaryBytesFromHardFileError
   178 00000A8B 4881C320000000      <1>     add rbx, bufferHdr.dataarea
   179 00000A92 4889DE              <1>     mov rsi, rbx
   180 00000A95 4889F9              <1>     mov rcx, rdi    ;Get the number of bytes to read in this sector to rbx
   181 00000A98 488B7D18            <1>     mov rdi, qword [rbp + callerFrame.rdx]  ;Point to destination
   182 00000A9C 48014D10            <1>     add qword [rbp + callerFrame.rcx], rcx
   183 00000AA0 F3A4                <1>     rep movsb   ;Move the bytes from this sector
   184                              <1> 
   185 00000AA2 5B                  <1>     pop rbx
   186                              <1> .readBinaryBytesFromHardFileError:
   187                              <1> 
   188                              <1> .readBinaryBytesFromCharDevice:
   189                              <1> ;Devices are accessed from here
   190 00000AA3 488B6B07            <1>     mov rbp, qword [rbx + sft.qPtr] ;Get device driver header pointer
   191 00000AA7 53                  <1>     push rbx
   192 00000AA8 488D1D(24C00300)    <1>     lea rbx, charReqHdr
   193 00000AAF C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   194 00000AB2 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], drvREAD
   195 00000AB6 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   196 00000ABC 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   197 00000AC0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   198                              <1> 
   199 00000AC3 FF550A              <1>     call qword [rbp + drvHdr.strPtr]
   200 00000AC6 FF5512              <1>     call qword [rbp + drvHdr.intPtr]
   201 00000AC9 8B4316              <1>     mov eax, dword [rbx + ioReqPkt.tfrlen] ;Get number of bytes read
   202 00000ACC 66F743030080        <1>     test word [rbx + ioReqPkt.status], 8000h    ;Test the error bit is set
   203 00000AD2 5B                  <1>     pop rbx
   204 00000AD3 7400                <1>     jz .readBinaryBytesExitGood  ;Error bit not set, all good!
   205                              <1> .readBinaryBytesExitGood:
   206 00000AD5 C3                  <1>     ret
   207                              <1> 
    22                                  %include "./Source/Kernel/memoryFunctions.asm"
    23                              <1> ;Memory related functions
    24                              <1> 
    25                              <1> ;-----------------------------------:
    26                              <1> ;  Memory related Kernel routines   :
    27                              <1> ;-----------------------------------:
    28                              <1> allocateMemory:    ;ah = 48h
    29                              <1>     ;Maintain 2 pointers, best and last
    30                              <1>     ; Also maintain a variable, ecx for the size of the allocation
    31                              <1>     ;All sizes in paragraphs
    32                              <1> freeMemory:        ;ah = 49h
    33                              <1> ;Input: r8 = segment of the block to be returned (MCB + 1 para)
    34                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
    35                              <1> ;Always skip the first block as this is the anchor for DOS
    36 00000AD6 31C9                <1>     xor ecx, ecx
    37 00000AD8 488B35(78C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
    38 00000ADF 4889F7              <1>     mov rdi, rsi
    39 00000AE2 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    40 00000AE5 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
    41 00000AE9 4881C110000000      <1>     add rcx, mcb.program
    42 00000AF0 4801CE              <1>     add rsi, rcx    ;Go to next block
    43                              <1> .mainLoop:
    44 00000AF3 31C9                <1>     xor ecx, ecx
    45 00000AF5 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    46 00000AF8 7409                <1>     je .valid
    47 00000AFA 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    48 00000AFD 0F8514010000        <1>     jne memSysHalt
    49                              <1> .valid:
    50 00000B03 4939F0              <1>     cmp r8, rsi
    51 00000B06 741C                <1>     je .blockFound
    52                              <1>     ;Not valid, check if last block in chain
    53 00000B08 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    54 00000B0B 0F8482000000        <1>     je .blockNotFound
    55 00000B11 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    56 00000B14 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
    57 00000B18 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
    58 00000B1F 4801CE              <1>     add rsi, rcx    ;Go to next block
    59 00000B22 EBCF                <1>     jmp short .mainLoop
    60                              <1> .blockFound:
    61                              <1>     ;If hole, error.
    62                              <1>     ;Else, set free, check if previous block is free, then check if next is free
    63 00000B24 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
    64 00000B2C 746E                <1>     je .blockHole
    65 00000B2E 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
    66 00000B36 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
    67 00000B3E 7511                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
    68                              <1>     ;It is, let it absorb this space
    69 00000B40 31C9                <1>     xor ecx, ecx
    70 00000B42 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    71 00000B45 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
    72 00000B4B 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
    73 00000B4E 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
    74                              <1> .blockFoundCheckFollowing:
    75                              <1>     ;First check if we are the last block in chain
    76 00000B51 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    77 00000B54 742C                <1>     je .blockFoundExit  ;If yes, exit!
    78 00000B56 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
    79 00000B59 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    80 00000B5C 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
    81 00000B60 4881C110000000      <1>     add rcx, mcb.program
    82 00000B67 4801CE              <1>     add rsi, rcx    ;Go to next block
    83 00000B6A 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    84 00000B72 750E                <1>     jne .blockFoundExit ;If not free, exit
    85                              <1>     ;If free, absorb into block pointed to by rdi
    86 00000B74 31C9                <1>     xor ecx, ecx
    87 00000B76 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    88 00000B79 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
    89 00000B7F 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
    90                              <1> .blockFoundExit:
    91 00000B82 E869000000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
    92 00000B87 488B1D(24C10300)    <1>     mov rbx, qword [oldRSP]
    93 00000B8E 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
    94 00000B92 C3                  <1>     ret
    95                              <1> .blockNotFound:
    96                              <1>     ;Set CF and error code
    97 00000B93 C605(E9C00300)08    <1>     mov byte [errorClass], eClsNotFnd   ;Block not found 
    98 00000B9A EB07                <1>     jmp short .blockError
    99                              <1> .blockHole:
   100                              <1> ;Cannot free a hole! Fail!
   101 00000B9C C605(E9C00300)0A    <1>     mov byte [errorClass], eClsLocked   ;Cant free a hole
   102                              <1> .blockError:
   103 00000BA3 C605(E4C00300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   104 00000BAA C605(E5C00300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   105 00000BB1 66C705(E6C00300)09- <1>     mov word [errorExCde], errMemAddr   ;Invalid mem addr
   105 00000BB9 00                  <1>
   106 00000BBA C605(E8C00300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   107 00000BC1 B809000000          <1>     mov eax, errMemAddr
   108 00000BC6 488B1D(24C10300)    <1>     mov rbx, qword [oldRSP]
   109 00000BCD 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   110 00000BD0 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   111 00000BD4 C3                  <1>     ret
   112                              <1> reallocMemory:     ;ah = 4Ah
   113                              <1> ;Input: r8 = segment of the block to be realloc'ed (MCB + 1 para)
   114                              <1> ;       ebx = How much memory this block should contain after realloc,
   115                              <1> ;               in paragraphs. If ebx = 0, jump to free memory
   116 00000BD5 85DB                <1>     test ebx, ebx
   117 00000BD7 0F84F9FEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   118 00000BDD 31C9                <1>     xor ecx, ecx
   119 00000BDF 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   120 00000BE2 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   121 00000BE5 7405                <1>     je .ctn
   122 00000BE7 803E5A              <1>     cmp byte [rsi + mcb.marker],mcbMarkEnd
   123 00000BEA 752B                <1>     jne memSysHalt
   124                              <1> .ctn:
   125                              <1>     ;This MCB is valid, proceed to resize
   126                              <1>     ;There needs to be at least 20h bytes free for the realloc to work
   127 00000BEC 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get current blocksize
   128                              <1>     
   129                              <1> 
   130                              <1> getsetMallocStrat: ;ah = 58h
   131 00000BEF C3                  <1>     ret
   132                              <1> ;-----------------------------------:
   133                              <1> ;      Memory related routines      :
   134                              <1> ;-----------------------------------:
   135                              <1> verifyIntegrityOfMCBChain:
   136 00000BF0 488B1D(78C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   137                              <1> .ok:
   138 00000BF7 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   139 00000BFA 7406                <1>     je .ok1
   140 00000BFC 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   141 00000BFF 7516                <1>     jne memSysHalt    ;It was not M or Z, fail violently
   142                              <1> .exit:
   143 00000C01 C3                  <1>     ret ;We have reached the end of the chain, return all good!
   144                              <1> .ok1:
   145 00000C02 31C0                <1>     xor eax, eax
   146 00000C04 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   147 00000C07 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   148 00000C0B 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   149 00000C12 4801C3              <1>     add rbx, rax
   150 00000C15 EBE0                <1>     jmp short .ok
   151                              <1> memSysHalt:
   152                              <1> ;Only arrive here if the integrity of the system is not verified
   153                              <1> ;Lock the system
   154 00000C17 488D1D07000000      <1>     lea rbx, .sysHltString
   155 00000C1E B409                <1>     mov ah, 09h
   156 00000C20 CD41                <1>     int 41h
   157                              <1>     ;Only halt IRQ's in production!
   158                              <1>     %if !DEBUG
   159                              <1>     cli ;Halt interrupts
   160                              <1>     mov al, 0FFh    ;Mask IRQ lines 
   161                              <1>     out 0A1h, al
   162                              <1>     out 021h, al
   163                              <1>     %endif
   164 00000C22 F4                  <1>     hlt             ;Halt the system
   165 00000C23 EBFB                <1>     jmp short $ - 3 ;Go back far enough to capture the hlt
   166 00000C25 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
   166 00000C2E 6C6F636174696F6E20- <1>
   166 00000C37 6572726F720D0A      <1>
   167 00000C3E 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
   167 00000C47 616420434F4D4D414E- <1>
   167 00000C50 442C2073797374656D- <1>
   167 00000C59 2068616C74656424    <1>
    23                                  %include "./Source/Kernel/dateTimeFunctions.asm"
    24                              <1> ;Major kernel date time functions and subroutines
    25                              <1> 
    26                              <1> getDate:           ;ah = 2Ah
    27                              <1> setDate:           ;ah = 2Bh
    28                              <1> getTime:           ;ah = 2Ch
    29                              <1> setTime:           ;ah = 2Dh
    30 00000C61 C3                  <1>     ret
    24                                  %include "./Source/Kernel/localisation.asm"
    25                              <1> ;Localisation based functions live here
    26                              <1> 
    27                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    28                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    29                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    30                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    31 00000C62 C3                  <1>     ret
    25                                  %include "./Source/Kernel/dosKernel.asm"
    26                              <1> ;-----------------------------------:
    27                              <1> ;       Misc System routines        :
    28                              <1> ;-----------------------------------:
    29                              <1> criticalDOSError:
    30                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    31                              <1> ; to the critical error handler.
    32                              <1> ; Called with ax, di and rsi set as required by Int 44h (caller decides)
    33                              <1> ;               AH = Critical Error Bitfield
    34                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    35                              <1> ;               Bit 6 - Reserved
    36                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    37                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    38                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    39                              <1> ;               Bits [2-1] = Affected Disk Error
    40                              <1> ;                     0 0   DOS area
    41                              <1> ;                     0 1   FAT area
    42                              <1> ;                     1 0   Directory area
    43                              <1> ;                     1 1   Data area
    44                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    45                              <1> ;               AL  = Failing drive number if AH[7] = 0
    46                              <1> ;               DIL = Error code for errorMsg
    47                              <1> ;               RSI = EA of Device Header for which device the error occured
    48                              <1> ;Return:
    49                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    50                              <1> ;                  = 1 - Retry the Operation    (Retry)
    51                              <1> ;                  = 2 - Terminate the Program  (Abort)
    52                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    53                              <1> ; Return response from int 44h in al
    54 00000C63 FA                  <1>     cli ;Disable Interrupts
    55 00000C64 C605(E2C00300)01    <1>     mov byte [critErrFlag], 1   ;Set flag for critical error
    56 00000C6B 488925(10C10300)    <1>     mov qword [xInt44hRSP], rsp
    57 00000C72 488B25(24C10300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    58 00000C79 CD44                <1>     int 44h ;Call critical error handler
    59 00000C7B 488B25(10C10300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    60 00000C82 C605(E2C00300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    61 00000C89 FB                  <1>     sti ;Reenable Interrupts
    62 00000C8A C3                  <1>     ret
    63                              <1> 
    64                              <1> findDPB:
    65                              <1> ;Finds the DPB for a given drive
    66                              <1> ;Input:  dl = Drive number (0=A, 1=B etc...)
    67                              <1> ;Output: al = 00, rbp = Pointer to the DPB
    68                              <1> ;        al = -1, Failed, no DPB for device, rbx destroyed
    69 00000C8B 488B1D(80C00300)    <1>     mov rbx, qword [dpbHeadPtr]
    70                              <1> .fd1:
    71 00000C92 30C0                <1>     xor al, al
    72 00000C94 385500              <1>     cmp byte [rbp + dpb.bDriveNumber], dl
    73 00000C97 740F                <1>     je .fd2
    74 00000C99 488B6D24            <1>     mov rbp, qword [rbp + dpb.qNextDPBPtr]
    75 00000C9D B0FF                <1>     mov al, -1
    76 00000C9F 4881FDFFFFFFFF      <1>     cmp rbp, -1 ;If rbx followed last item in list, no DPB exists for dl
    77 00000CA6 75EA                <1>     jne .fd1
    78                              <1> .fd2:
    79                              <1>     %if DEBUG
    80                              <1>     ;Print DPB 
    81                              <1>     debugEnterM
   327 00000CA8 4889256CF3FFFF      <2>  mov qword [debOldRSP], rsp
   328 00000CAF 48BC00000800000000- <2>  mov rsp, debStackTop
   328 00000CB8 00                  <2>
   329                              <2> 
   330 00000CB9 50                  <2>  push rax
   331 00000CBA 53                  <2>  push rbx
   332 00000CBB 51                  <2>  push rcx
   333 00000CBC 52                  <2>  push rdx
   334 00000CBD 56                  <2>  push rsi
   335 00000CBE 57                  <2>  push rdi
   336 00000CBF 55                  <2>  push rbp
   337 00000CC0 4150                <2>  push r8
   338 00000CC2 4151                <2>  push r9
   339 00000CC4 4152                <2>  push r10
   340 00000CC6 4153                <2>  push r11
   341 00000CC8 4154                <2>  push r12
   342 00000CCA 4155                <2>  push r13
   343 00000CCC 4156                <2>  push r14
   344 00000CCE 4157                <2>  push r15
   345 00000CD0 9C                  <2>  pushfq
    82 00000CD1 4989E8              <1>     mov r8, rbp ;Save dpb pointer
    83 00000CD4 488D2D0F000000      <1>     lea rbp, .l0000
    84 00000CDB E80EF4FFFF          <1>     call debPrintNullString
    85 00000CE0 4C89C5              <1>     mov rbp, r8
    86 00000CE3 E8E6F5FFFF          <1>     call debDPBptr
    87 00000CE8 EB1C                <1>     jmp short .l0001
    88 00000CEA 496E7465726E616C20- <1> .l0000 db "Internal call to find DPB",0Ah,0Dh,0
    88 00000CF3 63616C6C20746F2066- <1>
    88 00000CFC 696E64204450420A0D- <1>
    88 00000D05 00                  <1>
    89                              <1> .l0001:
    90                              <1>     debugExitM
   349 00000D06 9D                  <2>  popfq
   350 00000D07 415F                <2>  pop r15
   351 00000D09 415E                <2>  pop r14
   352 00000D0B 415D                <2>  pop r13
   353 00000D0D 415C                <2>  pop r12
   354 00000D0F 415B                <2>  pop r11
   355 00000D11 415A                <2>  pop r10
   356 00000D13 4159                <2>  pop r9
   357 00000D15 4158                <2>  pop r8
   358 00000D17 5D                  <2>  pop rbp
   359 00000D18 5F                  <2>  pop rdi
   360 00000D19 5E                  <2>  pop rsi
   361 00000D1A 5A                  <2>  pop rdx
   362 00000D1B 59                  <2>  pop rcx
   363 00000D1C 5B                  <2>  pop rbx
   364 00000D1D 58                  <2>  pop rax
   365 00000D1E 488B25F6F2FFFF      <2>  mov rsp, qword [debOldRSP]
    91                              <1>     %endif
    92 00000D25 C3                  <1>     ret
    93                              <1> getCDS:
    94                              <1>     ;Gets the CDS for the current drive in rax
    95                              <1>     ;Input: rax = Drive number, 0 = A ...
    96                              <1>     ;Output: rbx = Pointer to CDS for drive in rax
    97 00000D26 50                  <1>     push rax
    98 00000D27 51                  <1>     push rcx
    99 00000D28 52                  <1>     push rdx
   100 00000D29 488D1D(AAC00300)    <1>     lea rbx, qword [cdsHeadPtr] ;Point to cds array
   101 00000D30 48B95B000000000000- <1>     mov rcx, cds_size   
   101 00000D39 00                  <1>
   102 00000D3A 31D2                <1>     xor edx, edx
   103 00000D3C F7E1                <1>     mul ecx 
   104 00000D3E 4801C3              <1>     add rbx, rax    ;Move rbx to the right offset in the array
   105 00000D41 5A                  <1>     pop rdx
   106 00000D42 59                  <1>     pop rcx
   107 00000D43 58                  <1>     pop rax
   108 00000D44 C3                  <1>     ret
   109                              <1> ;-----------------------------------:
   110                              <1> ;        Interrupt routines         :
   111                              <1> ;-----------------------------------:
   112                              <1> terminateProcess:   ;Int 40h
   113 00000D45 48CF                <1>     iretq
   114                              <1> terminateHandler:   ;Int 42h
   115                              <1> ctrlCHandler:       ;Int 43h
   116 00000D47 48CF                <1>     iretq
   117                              <1> absDiskWrite:       ;Int 46h
   118                              <1> ;al = Drive number
   119                              <1> ;rbx = Memory Buffer address to read from
   120                              <1> ;ecx = Number of sectors to write
   121                              <1> ;rdx = Start LBA to write to
   122                              <1>     %if DEBUG
   123                              <1>     ;Print DPB 
   124                              <1>     debugEnterM
   327 00000D49 488925CBF2FFFF      <2>  mov qword [debOldRSP], rsp
   328 00000D50 48BC00000800000000- <2>  mov rsp, debStackTop
   328 00000D59 00                  <2>
   329                              <2> 
   330 00000D5A 50                  <2>  push rax
   331 00000D5B 53                  <2>  push rbx
   332 00000D5C 51                  <2>  push rcx
   333 00000D5D 52                  <2>  push rdx
   334 00000D5E 56                  <2>  push rsi
   335 00000D5F 57                  <2>  push rdi
   336 00000D60 55                  <2>  push rbp
   337 00000D61 4150                <2>  push r8
   338 00000D63 4151                <2>  push r9
   339 00000D65 4152                <2>  push r10
   340 00000D67 4153                <2>  push r11
   341 00000D69 4154                <2>  push r12
   342 00000D6B 4155                <2>  push r13
   343 00000D6D 4156                <2>  push r14
   344 00000D6F 4157                <2>  push r15
   345 00000D71 9C                  <2>  pushfq
   125 00000D72 488D2D07000000      <1>     lea rbp, .l0000
   126 00000D79 E870F3FFFF          <1>     call debPrintNullString
   127 00000D7E EB13                <1>     jmp short .l0001
   128 00000D80 456E746572696E6720- <1> .l0000 db "Entering Int 46h",0Ah,0Dh,0
   128 00000D89 496E74203436680A0D- <1>
   128 00000D92 00                  <1>
   129                              <1> .l0001:
   130                              <1>     debugExitM
   349 00000D93 9D                  <2>  popfq
   350 00000D94 415F                <2>  pop r15
   351 00000D96 415E                <2>  pop r14
   352 00000D98 415D                <2>  pop r13
   353 00000D9A 415C                <2>  pop r12
   354 00000D9C 415B                <2>  pop r11
   355 00000D9E 415A                <2>  pop r10
   356 00000DA0 4159                <2>  pop r9
   357 00000DA2 4158                <2>  pop r8
   358 00000DA4 5D                  <2>  pop rbp
   359 00000DA5 5F                  <2>  pop rdi
   360 00000DA6 5E                  <2>  pop rsi
   361 00000DA7 5A                  <2>  pop rdx
   362 00000DA8 59                  <2>  pop rcx
   363 00000DA9 5B                  <2>  pop rbx
   364 00000DAA 58                  <2>  pop rax
   365 00000DAB 488B2569F2FFFF      <2>  mov rsp, qword [debOldRSP]
   131                              <1>     %endif
   132 00000DB2 50                  <1>     push rax
   133 00000DB3 53                  <1>     push rbx
   134 00000DB4 52                  <1>     push rdx
   135 00000DB5 55                  <1>     push rbp
   136 00000DB6 B408                <1>     mov ah, drvWRITE
   137 00000DB8 0225(0FC10300)      <1>     add ah, byte [verifyFlag]   ;Change to Write/Verify if set
   138 00000DBE EB6F                <1>     jmp short absDiskReadWriteCommon
   139                              <1> absDiskRead:        ;Int 45h
   140                              <1> ;al = Drive number
   141                              <1> ;rbx = Memory Buffer address to write to
   142                              <1> ;ecx = Number of sectors to read
   143                              <1> ;rdx = Start LBA to read from
   144                              <1>     %if DEBUG
   145                              <1>     ;Print DPB 
   146                              <1>     debugEnterM
   327 00000DC0 48892554F2FFFF      <2>  mov qword [debOldRSP], rsp
   328 00000DC7 48BC00000800000000- <2>  mov rsp, debStackTop
   328 00000DD0 00                  <2>
   329                              <2> 
   330 00000DD1 50                  <2>  push rax
   331 00000DD2 53                  <2>  push rbx
   332 00000DD3 51                  <2>  push rcx
   333 00000DD4 52                  <2>  push rdx
   334 00000DD5 56                  <2>  push rsi
   335 00000DD6 57                  <2>  push rdi
   336 00000DD7 55                  <2>  push rbp
   337 00000DD8 4150                <2>  push r8
   338 00000DDA 4151                <2>  push r9
   339 00000DDC 4152                <2>  push r10
   340 00000DDE 4153                <2>  push r11
   341 00000DE0 4154                <2>  push r12
   342 00000DE2 4155                <2>  push r13
   343 00000DE4 4156                <2>  push r14
   344 00000DE6 4157                <2>  push r15
   345 00000DE8 9C                  <2>  pushfq
   147 00000DE9 488D2D07000000      <1>     lea rbp, .l0000
   148 00000DF0 E8F9F2FFFF          <1>     call debPrintNullString
   149 00000DF5 EB13                <1>     jmp short .l0001
   150 00000DF7 456E746572696E6720- <1> .l0000 db "Entering Int 45h",0Ah,0Dh,0
   150 00000E00 496E74203435680A0D- <1>
   150 00000E09 00                  <1>
   151                              <1> .l0001:
   152                              <1>     debugExitM
   349 00000E0A 9D                  <2>  popfq
   350 00000E0B 415F                <2>  pop r15
   351 00000E0D 415E                <2>  pop r14
   352 00000E0F 415D                <2>  pop r13
   353 00000E11 415C                <2>  pop r12
   354 00000E13 415B                <2>  pop r11
   355 00000E15 415A                <2>  pop r10
   356 00000E17 4159                <2>  pop r9
   357 00000E19 4158                <2>  pop r8
   358 00000E1B 5D                  <2>  pop rbp
   359 00000E1C 5F                  <2>  pop rdi
   360 00000E1D 5E                  <2>  pop rsi
   361 00000E1E 5A                  <2>  pop rdx
   362 00000E1F 59                  <2>  pop rcx
   363 00000E20 5B                  <2>  pop rbx
   364 00000E21 58                  <2>  pop rax
   365 00000E22 488B25F2F1FFFF      <2>  mov rsp, qword [debOldRSP]
   153                              <1>     %endif
   154 00000E29 50                  <1>     push rax
   155 00000E2A 53                  <1>     push rbx
   156 00000E2B 52                  <1>     push rdx
   157 00000E2C 55                  <1>     push rbp
   158 00000E2D B404                <1>     mov ah, drvREAD
   159                              <1> absDiskReadWriteCommon:
   160                              <1> ;Entered with the appropriate function number in ah
   161 00000E2F 52                  <1>     push rdx    ;Save start LBA
   162 00000E30 50                  <1>     push rax
   163 00000E31 88C2                <1>     mov dl, al
   164 00000E33 E853FEFFFF          <1>     call findDPB   ;Get dpb ptr in rbp
   165 00000E38 58                  <1>     pop rax
   166 00000E39 5A                  <1>     pop rdx
   167                              <1> 
   168 00000E3A C605(4EC00300)2A    <1>     mov byte [diskReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   169 00000E41 8805(4FC00300)      <1>     mov byte [diskReqHdr + ioReqPkt.unitnm], al
   170 00000E47 8825(50C00300)      <1>     mov byte [diskReqHdr + ioReqPkt.cmdcde], ah
   171 00000E4D 66C705(51C00300)00- <1>     mov word [diskReqHdr + ioReqPkt.status], 0
   171 00000E55 00                  <1>
   172 00000E56 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   173 00000E59 8805(5BC00300)      <1>     mov byte [diskReqHdr + ioReqPkt.medesc], al
   174 00000E5F 48891D(5CC00300)    <1>     mov qword [diskReqHdr + ioReqPkt.bufptr], rbx
   175 00000E66 488915(68C00300)    <1>     mov qword [diskReqHdr + ioReqPkt.strtsc], rdx
   176 00000E6D 890D(64C00300)      <1>     mov dword [diskReqHdr + ioReqPkt.tfrlen], ecx
   177 00000E73 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver pointer
   178                              <1> 
   179 00000E77 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr
   180 00000E7E FF520A              <1>     call qword [rdx + drvHdr.strPtr]  ;Call with ptr to request block in rbx
   181 00000E81 FF5212              <1>     call qword [rdx + drvHdr.intPtr]
   182 00000E84 5D                  <1>     pop rbp
   183 00000E85 5A                  <1>     pop rdx
   184 00000E86 5B                  <1>     pop rbx
   185 00000E87 58                  <1>     pop rax
   186 00000E88 66F705(51C00300)00- <1>     test word [diskReqHdr + ioReqPkt.status], 8000h
   186 00000E90 80                  <1>
   187 00000E91 7402                <1>     je .absDiskError
   188 00000E93 F8                  <1>     clc
   189 00000E94 C3                  <1>     ret
   190                              <1> .absDiskError:
   191 00000E95 8A05(51C00300)      <1>     mov al, byte [diskReqHdr + ioReqPkt.status] ;Get low byte into al
   192 00000E9B B480                <1>     mov ah, 80h ;Attachment failure
   193 00000E9D 3C0C                <1>     cmp al, 0Ch ;Gen error
   194 00000E9F 741A                <1>     je .absExit
   195 00000EA1 B440                <1>     mov ah, 40h ;Seek error
   196 00000EA3 3C06                <1>     cmp al, 06h
   197 00000EA5 7414                <1>     je .absExit
   198 00000EA7 B408                <1>     mov ah, 08h ;Bad CRC
   199 00000EA9 3C04                <1>     cmp al, 04h
   200 00000EAB 740E                <1>     je .absExit
   201 00000EAD B404                <1>     mov ah, 04h ;Sector not found
   202 00000EAF 3C08                <1>     cmp al, 08h
   203 00000EB1 7408                <1>     je .absExit
   204 00000EB3 30E4                <1>     xor ah, ah  ;Write Protect Violation
   205 00000EB5 84C0                <1>     test al, al
   206 00000EB7 7402                <1>     je .absExit
   207 00000EB9 B402                <1>     mov ah, 02h ;Other Error
   208                              <1> .absExit:
   209 00000EBB F9                  <1>     stc
   210 00000EBC C3                  <1>     ret
   211                              <1> 
   212                              <1> terminateResident:  ;Int 47h
   213                              <1> inDosHandler:       ;Int 48h
   214                              <1> ;Called when DOS idle
   215 00000EBD 48CF                <1>     iretq
   216                              <1> fastOutput:         ;Int 49h
   217                              <1> ;Called with char to transfer in al
   218 00000EBF 50                  <1>     push rax
   219 00000EC0 B40E                <1>     mov ah, 0Eh
   220 00000EC2 CD30                <1>     int 30h
   221 00000EC4 58                  <1>     pop rax
   222 00000EC5 48CF                <1>     iretq
   223                              <1> passCommand:        ;Int 4Eh, hooked by COMMAND.COM
   224 00000EC7 48CF                <1>     iretq
   225                              <1> multiplex:          ;Int 4Fh, kept as iretq for now
   226 00000EC9 48CF                <1>     iretq
   227                              <1> ;-----------------------------------:
   228                              <1> ;        Main Kernel routines       :
   229                              <1> ;-----------------------------------:
   230                              <1> functionDispatch:   ;Int 41h Main function dispatcher
   231                              <1> ;ah = Function number, all other registers have various meanings
   232                              <1>  %if DEBUG
   233                              <1>     ;Entry function
   234                              <1>     debugEnterM
   327 00000ECB 48892549F1FFFF      <2>  mov qword [debOldRSP], rsp
   328 00000ED2 48BC00000800000000- <2>  mov rsp, debStackTop
   328 00000EDB 00                  <2>
   329                              <2> 
   330 00000EDC 50                  <2>  push rax
   331 00000EDD 53                  <2>  push rbx
   332 00000EDE 51                  <2>  push rcx
   333 00000EDF 52                  <2>  push rdx
   334 00000EE0 56                  <2>  push rsi
   335 00000EE1 57                  <2>  push rdi
   336 00000EE2 55                  <2>  push rbp
   337 00000EE3 4150                <2>  push r8
   338 00000EE5 4151                <2>  push r9
   339 00000EE7 4152                <2>  push r10
   340 00000EE9 4153                <2>  push r11
   341 00000EEB 4154                <2>  push r12
   342 00000EED 4155                <2>  push r13
   343 00000EEF 4156                <2>  push r14
   344 00000EF1 4157                <2>  push r15
   345 00000EF3 9C                  <2>  pushfq
   235 00000EF4 488D2D0C000000      <1>     lea rbp, .l0000
   236 00000EFB E8EEF1FFFF          <1>     call debPrintNullString
   237 00000F00 E867F5FFFF          <1>     call debPrintFunctionName
   238 00000F05 EB15                <1>     jmp short .l0001
   239 00000F07 0A0D456E746572696E- <1> .l0000 db 0Ah,0Dh,"Entering Int 41h",0Ah,0Dh,0
   239 00000F10 6720496E7420343168- <1>
   239 00000F19 0A0D00              <1>
   240                              <1> .l0001:    
   241                              <1>     debugExitM
   349 00000F1C 9D                  <2>  popfq
   350 00000F1D 415F                <2>  pop r15
   351 00000F1F 415E                <2>  pop r14
   352 00000F21 415D                <2>  pop r13
   353 00000F23 415C                <2>  pop r12
   354 00000F25 415B                <2>  pop r11
   355 00000F27 415A                <2>  pop r10
   356 00000F29 4159                <2>  pop r9
   357 00000F2B 4158                <2>  pop r8
   358 00000F2D 5D                  <2>  pop rbp
   359 00000F2E 5F                  <2>  pop rdi
   360 00000F2F 5E                  <2>  pop rsi
   361 00000F30 5A                  <2>  pop rdx
   362 00000F31 59                  <2>  pop rcx
   363 00000F32 5B                  <2>  pop rbx
   364 00000F33 58                  <2>  pop rax
   365 00000F34 488B25E0F0FFFF      <2>  mov rsp, qword [debOldRSP]
   242                              <1>     %endif
   243 00000F3B FA                  <1>     cli ;Halt external interrupts
   244 00000F3C FC                  <1>     cld ;Ensure all string ops occur in the right direction
   245 00000F3D 80FC6A              <1>     cmp ah, kernelDispatchTableL/8    ;Number of functions
   246 00000F40 0F8730020000        <1>     ja .fdExitBad
   247                              <1>     ;Cherry pick functions
   248 00000F46 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
   249 00000F49 722C                <1>     jb .fsbegin   ;If below skip these checks
   250 00000F4B 0F845C060000        <1>     je ctrlBreakCheck
   251 00000F51 80FC64              <1>     cmp ah, 64h
   252 00000F54 0F84D5080000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
   253 00000F5A 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
   254 00000F5C 80FC51              <1>     cmp ah, 51h
   255 00000F5F 0F8404070000        <1>     je getCurrProcessID    ;This and below are exactly the same
   256 00000F65 80FC62              <1>     cmp ah, 62h
   257 00000F68 0F84B8080000        <1>     je getPSPaddr          ;Calls the above function
   258 00000F6E 80FC50              <1>     cmp ah, 50h
   259 00000F71 0F84E9060000        <1>     je setCurrProcessID
   260                              <1> .fsbegin:
   261                              <1>     pushDOS ;Push the usual prologue registers
   270 00000F77 4151                <2>  push r9
   271 00000F79 4150                <2>  push r8
   272 00000F7B 55                  <2>  push rbp
   273 00000F7C 57                  <2>  push rdi
   274 00000F7D 56                  <2>  push rsi
   275 00000F7E 52                  <2>  push rdx
   276 00000F7F 51                  <2>  push rcx
   277 00000F80 53                  <2>  push rbx
   278 00000F81 50                  <2>  push rax
   262 00000F82 488B05(24C10300)    <1>     mov rax, qword [oldRSP]
   263 00000F89 488905(1CC10300)    <1>     mov qword [oldoldRSP], rax
   264 00000F90 FE05(E3C00300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
   265 00000F96 488925(24C10300)    <1>     mov qword [oldRSP], rsp
   266                              <1> ;Here, we want to save oldRSP in the callers PSP
   267 00000F9D 803D(E3C00300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
   268 00000FA4 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
   269 00000FA6 488B05(F2C00300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
   270 00000FAD 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   271                              <1> .fsb1:
   272 00000FB1 58                  <1>     pop rax     ;Get old rax back
   273 00000FB2 50                  <1>     push rax    ;and push it back onto the stack
   274 00000FB3 488D25(67C70300)    <1>     lea rsp, critStakTop
   275 00000FBA FB                  <1>     sti         ;Reenable interrupts
   276                              <1> 
   277 00000FBB C605(1BC10300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   278                              <1> 
   279 00000FC2 48891D(2CC10300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   280 00000FC9 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
   281 00000FCC C1E303              <1>     shl ebx, 3      ;Multiply the function number by 8 for offset into table
   282 00000FCF 50                  <1>     push rax        ;Push rax onto the stack
   283 00000FD0 488D055B080000      <1>     lea rax, qword [kernelDispatchTable]
   284 00000FD7 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   285 00000FDA 58                  <1>     pop rax
   286 00000FDB 488B1B              <1>     mov rbx, qword [rbx]    ;Get the address from the dispatch table
   287                              <1> 
   288 00000FDE 84E4                <1>     test ah, ah     ;Simple Terminate function?
   289 00000FE0 741C                <1>     jz .fddiskOp
   290 00000FE2 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   291 00000FE5 7443                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   292 00000FE7 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   293 00000FEA 7712                <1>     ja .fddiskOp
   294                              <1> ;Char operations here
   295 00000FEC F605(E2C00300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   296 00000FF3 7535                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   297 00000FF5 488D25(A7CD0300)    <1>     lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   298 00000FFC EB2C                <1>     jmp short .fdGoToFunction
   299                              <1> .fddiskOp:
   300                              <1>     ;Disk operations go here
   301                              <1>     ;Clear up error info
   302 00000FFE C605(E5C00300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   303 00001005 C605(E2C00300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   304 0000100C C605(E4C00300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   305                              <1> 
   306 00001013 C605(1BC10300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   307 0000101A 488D25(E7D30300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   308 00001021 F605(0EC10300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   309 00001028 7400                <1>     jz .fdGoToFunction
   310                              <1> ; HANDLE CTRL+BREAK HERE!
   311                              <1> .fdGoToFunction:
   312 0000102A 48871D(2CC10300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   313                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   314                              <1>     ;
   315                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   316                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   317                              <1>     ;
   318                              <1>     %if DEBUG && REGS
   319                              <1>     ;Print stack if necessary function
   320                              <1>     debugEnterM
   327 00001031 488925E3EFFFFF      <2>  mov qword [debOldRSP], rsp
   328 00001038 48BC00000800000000- <2>  mov rsp, debStackTop
   328 00001041 00                  <2>
   329                              <2> 
   330 00001042 50                  <2>  push rax
   331 00001043 53                  <2>  push rbx
   332 00001044 51                  <2>  push rcx
   333 00001045 52                  <2>  push rdx
   334 00001046 56                  <2>  push rsi
   335 00001047 57                  <2>  push rdi
   336 00001048 55                  <2>  push rbp
   337 00001049 4150                <2>  push r8
   338 0000104B 4151                <2>  push r9
   339 0000104D 4152                <2>  push r10
   340 0000104F 4153                <2>  push r11
   341 00001051 4154                <2>  push r12
   342 00001053 4155                <2>  push r13
   343 00001055 4156                <2>  push r14
   344 00001057 4157                <2>  push r15
   345 00001059 9C                  <2>  pushfq
   321 0000105A E8A6F0FFFF          <1>     call debPrintDOSStack
   322                              <1>     debugExitM
   349 0000105F 9D                  <2>  popfq
   350 00001060 415F                <2>  pop r15
   351 00001062 415E                <2>  pop r14
   352 00001064 415D                <2>  pop r13
   353 00001066 415C                <2>  pop r12
   354 00001068 415B                <2>  pop r11
   355 0000106A 415A                <2>  pop r10
   356 0000106C 4159                <2>  pop r9
   357 0000106E 4158                <2>  pop r8
   358 00001070 5D                  <2>  pop rbp
   359 00001071 5F                  <2>  pop rdi
   360 00001072 5E                  <2>  pop rsi
   361 00001073 5A                  <2>  pop rdx
   362 00001074 59                  <2>  pop rcx
   363 00001075 5B                  <2>  pop rbx
   364 00001076 58                  <2>  pop rax
   365 00001077 488B259DEFFFFF      <2>  mov rsp, qword [debOldRSP]
   323                              <1>     %endif
   324 0000107E FF15(2CC10300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   325                              <1>     %if DEBUG
   326                              <1>     ;Entry function
   327                              <1>     debugEnterM
   327 00001084 48892590EFFFFF      <2>  mov qword [debOldRSP], rsp
   328 0000108B 48BC00000800000000- <2>  mov rsp, debStackTop
   328 00001094 00                  <2>
   329                              <2> 
   330 00001095 50                  <2>  push rax
   331 00001096 53                  <2>  push rbx
   332 00001097 51                  <2>  push rcx
   333 00001098 52                  <2>  push rdx
   334 00001099 56                  <2>  push rsi
   335 0000109A 57                  <2>  push rdi
   336 0000109B 55                  <2>  push rbp
   337 0000109C 4150                <2>  push r8
   338 0000109E 4151                <2>  push r9
   339 000010A0 4152                <2>  push r10
   340 000010A2 4153                <2>  push r11
   341 000010A4 4154                <2>  push r12
   342 000010A6 4155                <2>  push r13
   343 000010A8 4156                <2>  push r14
   344 000010AA 4157                <2>  push r15
   345 000010AC 9C                  <2>  pushfq
   328 000010AD 488D2D16000000      <1>     lea rbp, .l0002
   329 000010B4 E835F0FFFF          <1>     call debPrintNullString
   330 000010B9 488B1D(24C10300)    <1>     mov rbx, qword [oldRSP]
   331 000010C0 668B03              <1>     mov ax, word [rbx + callerFrame.rax]  ;Get ah value
   332 000010C3 E8A4F3FFFF          <1>     call debPrintFunctionName
   333 000010C8 EB14                <1>     jmp short .l0003
   334 000010CA 0A0D45786974696E67- <1> .l0002 db 0Ah,0Dh,"Exiting Int 41h",0Ah,0Dh,0
   334 000010D3 20496E74203431680A- <1>
   334 000010DC 0D00                <1>
   335                              <1> .l0003:    
   336                              <1>     debugExitM
   349 000010DE 9D                  <2>  popfq
   350 000010DF 415F                <2>  pop r15
   351 000010E1 415E                <2>  pop r14
   352 000010E3 415D                <2>  pop r13
   353 000010E5 415C                <2>  pop r12
   354 000010E7 415B                <2>  pop r11
   355 000010E9 415A                <2>  pop r10
   356 000010EB 4159                <2>  pop r9
   357 000010ED 4158                <2>  pop r8
   358 000010EF 5D                  <2>  pop rbp
   359 000010F0 5F                  <2>  pop rdi
   360 000010F1 5E                  <2>  pop rsi
   361 000010F2 5A                  <2>  pop rdx
   362 000010F3 59                  <2>  pop rcx
   363 000010F4 5B                  <2>  pop rbx
   364 000010F5 58                  <2>  pop rax
   365 000010F6 488B251EEFFFFF      <2>  mov rsp, qword [debOldRSP]
   337                              <1>     %endif
   338                              <1>     %if DEBUG && REGS
   339                              <1>     ;Exit function
   340                              <1>     debugEnterM
   327 000010FD 48892517EFFFFF      <2>  mov qword [debOldRSP], rsp
   328 00001104 48BC00000800000000- <2>  mov rsp, debStackTop
   328 0000110D 00                  <2>
   329                              <2> 
   330 0000110E 50                  <2>  push rax
   331 0000110F 53                  <2>  push rbx
   332 00001110 51                  <2>  push rcx
   333 00001111 52                  <2>  push rdx
   334 00001112 56                  <2>  push rsi
   335 00001113 57                  <2>  push rdi
   336 00001114 55                  <2>  push rbp
   337 00001115 4150                <2>  push r8
   338 00001117 4151                <2>  push r9
   339 00001119 4152                <2>  push r10
   340 0000111B 4153                <2>  push r11
   341 0000111D 4154                <2>  push r12
   342 0000111F 4155                <2>  push r13
   343 00001121 4156                <2>  push r14
   344 00001123 4157                <2>  push r15
   345 00001125 9C                  <2>  pushfq
   341 00001126 E8DAEFFFFF          <1>     call debPrintDOSStack
   342                              <1>     debugExitM
   349 0000112B 9D                  <2>  popfq
   350 0000112C 415F                <2>  pop r15
   351 0000112E 415E                <2>  pop r14
   352 00001130 415D                <2>  pop r13
   353 00001132 415C                <2>  pop r12
   354 00001134 415B                <2>  pop r11
   355 00001136 415A                <2>  pop r10
   356 00001138 4159                <2>  pop r9
   357 0000113A 4158                <2>  pop r8
   358 0000113C 5D                  <2>  pop rbp
   359 0000113D 5F                  <2>  pop rdi
   360 0000113E 5E                  <2>  pop rsi
   361 0000113F 5A                  <2>  pop rdx
   362 00001140 59                  <2>  pop rcx
   363 00001141 5B                  <2>  pop rbx
   364 00001142 58                  <2>  pop rax
   365 00001143 488B25D1EEFFFF      <2>  mov rsp, qword [debOldRSP]
   343                              <1>     %endif
   344                              <1> .fdExit:
   345 0000114A FA                  <1>     cli     ;Redisable interrupts
   346                              <1>     ;???
   347 0000114B FE0D(E3C00300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   348 00001151 488B25(24C10300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   349 00001158 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   350 0000115B 488B05(1CC10300)    <1>     mov rax, qword [oldoldRSP]
   351 00001162 488905(24C10300)    <1>     mov qword [oldRSP], rax
   352                              <1>     popDOS  ;Pop the frame
   282 00001169 58                  <2>  pop rax
   283 0000116A 5B                  <2>  pop rbx
   284 0000116B 59                  <2>  pop rcx
   285 0000116C 5A                  <2>  pop rdx
   286 0000116D 5E                  <2>  pop rsi
   287 0000116E 5F                  <2>  pop rdi
   288 0000116F 5D                  <2>  pop rbp
   289 00001170 4158                <2>  pop r8
   290 00001172 4159                <2>  pop r9
   353 00001174 48CF                <1>     iretq
   354                              <1> .fdExitBad:
   355 00001176 B400                <1>     mov ah, 0
   356 00001178 48CF                <1>     iretq
   357                              <1> 
   358                              <1> ;========================================:
   359                              <1> ;            Kernel Functions            :
   360                              <1> ;========================================:
   361                              <1> simpleTerminate:   ;ah = 00h
   362 0000117A C3                  <1>     ret
   363                              <1> diskReset:         ;ah = 0Dh
   364                              <1> ;Flush all dirty buffers to disk
   365 0000117B 488B2D(A2C00300)    <1>     mov rbp, qword [bufHeadPtr]
   366                              <1> .drCheckBuffer:
   367 00001182 F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   368 00001186 7407                <1>     jz .drGotoNextBuffer
   369                              <1> .drFlushBuffer:
   370 00001188 E8B6F3FFFF          <1>     call flushBuffer    ;Called with rbp = buffer header
   371 0000118D 720E                <1>     jc .drError
   372                              <1> .drGotoNextBuffer:
   373 0000118F 488B6D00            <1>     mov rbp, qword [rbp + bufferHdr.nextBufPtr]
   374 00001193 4881FDFFFFFFFF      <1>     cmp rbp, -1     ;If rbp points to -1, exit
   375 0000119A 75E6                <1>     jne .drCheckBuffer
   376 0000119C C3                  <1>     ret
   377                              <1> .drError:
   378                              <1> ;Abort/Retry/Ignore
   379                              <1> ;Abort returns to DOS, 
   380                              <1> ;Retry retries the write on the buffer, 
   381                              <1> ;Ignore marks the buffer as clean and proceeds as normal
   382 0000119D 8A4509              <1>     mov al, byte [rbp + bufferHdr.bufferFlags]
   383 000011A0 240F                <1>     and al, 0Fh ;Clear the upper nybble
   384 000011A2 B431                <1>     mov ah, 31h ;Disk Error, Ignore,Retry and Write operation
   385 000011A4 3C01                <1>     cmp al, dosBuffer
   386 000011A6 740F                <1>     je .drErrorMain
   387 000011A8 80C402              <1>     add ah, 2
   388 000011AB 3C02                <1>     cmp al, fatBuffer
   389 000011AD 7408                <1>     je .drErrorMain
   390 000011AF 80C402              <1>     add ah, 2
   391 000011B2 3C04                <1>     cmp al, dirBuffer
   392 000011B4 80C402              <1>     add ah, 2
   393                              <1> .drErrorMain:
   394 000011B7 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   395 000011BA 488B7517            <1>     mov rsi, qword [rbp + bufferHdr.driveDPBPtr]
   396 000011BE 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   397 000011C2 668B3D(51C00300)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]    ;Disk error occured!
   398 000011C9 6681E7FF00          <1>     and di, 0FFh    ;Only bottom byte
   399 000011CE 66893D(E6C00300)    <1>     mov word [errorExCde], di     ;Save driver error code
   400 000011D5 668105(E6C00300)13- <1>     add word [errorExCde], drvErrShft    ;Add offset to driver error codes
   400 000011DD 00                  <1>
   401 000011DE 8805(E4C00300)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   402 000011E4 C605(E5C00300)02    <1>     mov byte [errorLocus], eLocDsk   ;Error in Block Device Request code
   403 000011EB C605(E9C00300)0B    <1>     mov byte [errorClass], eClsMedia ;Media error (bad BPB or other) code
   404 000011F2 C605(E8C00300)01    <1>     mov byte [errorAction], eActRet   ;Retry request code
   405 000011F9 E865FAFFFF          <1>     call criticalDOSError       ;Critical error handler
   406 000011FE 84C0                <1>     test al, al ;Ignore the troublesome buffer and mark it as free
   407 00001200 7406                <1>     jz .drIgnore
   408 00001202 3C01                <1>     cmp al, 1   ;Retry flushing the buffer
   409 00001204 7482                <1>     je .drFlushBuffer
   410 00001206 CD43                <1>     int 43h     ;Abort and fail both abort through int 43h
   411                              <1> .drIgnore:
   412 00001208 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1  ;Mark buffer as free
   413 0000120C E97EFFFFFF          <1>     jmp .drGotoNextBuffer
   414                              <1> 
   415                              <1> selectDisk:        ;ah = 0Eh
   416                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   417 00001211 8A05(13C00300)      <1>     mov al, byte [numLogDrv]        ;Value 1 based
   418 00001217 8A1D(B2C00300)      <1>     mov bl, byte [lastdrvNum]       ;Value 1 based
   419 0000121D FEC8                <1>     dec al
   420 0000121F FECB                <1>     dec bl
   421 00001221 38C3                <1>     cmp bl, al
   422 00001223 0F47C3              <1>     cmova eax, ebx    ;If bl > al, move bl to al
   423 00001226 38C2                <1>     cmp dl, al  ;If dl is bigger than al
   424 00001228 7707                <1>     ja .error
   425 0000122A 8815(0DC10300)      <1>     mov byte [currentDrv], dl   ;Only save dl if it is a valid number
   426 00001230 C3                  <1>     ret ;al = lastdrv as retcode
   427                              <1> .error:
   428 00001231 488B2D(24C10300)    <1>     mov rbp, qword [oldRSP]
   429 00001238 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   430 00001240 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   431 00001245 668905(E6C00300)    <1>     mov word [errorExCde], ax     
   432 0000124C C605(E5C00300)01    <1>     mov byte [errorLocus], eLocUnk    ;Not appropriate
   433 00001253 C605(E9C00300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   434 0000125A C605(E8C00300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   435 00001261 C3                  <1>     ret
   436                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   437 00001262 8A05(0DC10300)      <1>     mov al, byte [currentDrv]
   438 00001268 C3                  <1>     ret
   439                              <1> FATinfoDefault:    ;ah = 1Bh
   440 00001269 30D2                <1>     xor dl, dl
   441                              <1> FATinfoDevice:     ;ah = 1Ch
   442                              <1> ;Return in:
   443                              <1> ;   al = Number of sectors per cluster
   444                              <1> ;   edx = Number of clusters
   445                              <1> ;   cx =  Size of a clsuter
   446 0000126B 84D2                <1>     test dl, dl
   447 0000126D 7408                <1>     jz .fidSkipdefault
   448 0000126F 8A15(0DC10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   449 00001275 EB02                <1>     jmp short .fidMain
   450                              <1> .fidSkipdefault:
   451 00001277 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   452                              <1> .fidMain:
   453                              <1> ;Walk the dpb chain manually
   454 00001279 E80DFAFFFF          <1>     call findDPB    ;Get in rbp the dpb pointer for drive dl
   455 0000127E 84C0                <1>     test al, al
   456 00001280 7433                <1>     jz .fidDPBFound
   457                              <1> ;Else, we at an error.
   458                              <1> ;Simply return with CY set and error code in al with extended error info
   459 00001282 488B2D(24C10300)    <1>     mov rbp, qword [oldRSP]
   460 00001289 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   461 00001291 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   462 00001296 66C705(E6C00300)0F- <1>     mov word [errorExCde], errBadDrv     
   462 0000129E 00                  <1>
   463 0000129F C605(E5C00300)01    <1>     mov byte [errorLocus], eLocUnk    ;Not appropriate
   464 000012A6 C605(E9C00300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   465 000012AD C605(E8C00300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   466 000012B4 C3                  <1>     ret
   467                              <1> .fidDPBFound:
   468 000012B5 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   469 000012B8 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   470 000012BA 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   471 000012BD 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   472 000012C0 BB01000000          <1>     mov ebx, 1
   473 000012C5 D3E3                <1>     shl ebx, cl
   474 000012C7 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   475 000012C9 488D5D22            <1>     lea rbx, qword [rbp + dpb.bMediaDescriptor]
   476 000012CD 488B2D(24C10300)    <1>     mov rbp, qword [oldRSP]
   477 000012D4 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   478 000012D8 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   479 000012DC 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   480 000012E0 C3                  <1>     ret
   481                              <1> ;===============================
   482                              <1> setIntVector:      ;ah = 25h
   483                              <1> ;Called with:
   484                              <1> ;   rdx = Pointer to interrupt handler
   485                              <1> ;   al = Interrupt number
   486 000012E1 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   487 000012E3 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   488                              <1> ;First call to get default BIOS segement selector and attribute word
   489 000012E9 88C3                <1>     mov bl, al  ;Set interrupt number 
   490 000012EB B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   491 000012F0 CD35                <1>     int 35h
   492 000012F2 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   493 000012F4 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   494                              <1> ;dx preserves the attribute word
   495 000012F6 488B2D(24C10300)    <1>     mov rbp, qword [oldRSP]
   496 000012FD 488B5D18            <1>     mov rbx, qword [rbp + callerFrame.rdx]  ;Pointer passed in rdx
   497 00001301 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   498 00001306 CD35                <1>     int 35h
   499                              <1> 
   500 00001308 8A4500              <1>     mov al, byte [rbp + callerFrame.rax]    ;Preserve low byte of rax
   501 0000130B C3                  <1>     ret
   502                              <1> createNewPSP:      ;ah = 26h
   503 0000130C C3                  <1>     ret
   504                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   505 0000130D 8805(0FC10300)      <1>     mov byte [verifyFlag], al
   506 00001313 8025(0FC10300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   507 0000131A C3                  <1>     ret
   508                              <1> getDOSversion:     ;ah = 30h
   509 0000131B 488B15(24C10300)    <1>     mov rdx, qword [oldRSP]
   510 00001322 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   511 00001324 886209              <1>     mov byte [rdx + callerFrame.rbx + 1], ah    ;Clear bh 
   512 00001327 668B05D2ECFFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   513 0000132E 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save ax
   514 00001331 C3                  <1>     ret
   515                              <1> terminateStayRes:  ;ah = 31h
   516 00001332 C3                  <1>     ret
   517                              <1> ;-------------------------------------------
   518                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply calls int 41h ah = 32h with dl = 0
   519 00001333 30D2                <1>     xor dl, dl
   520                              <1> getDeviceDPBptr:   ;ah = 32h
   521                              <1> ;On entry: dl = Drive number
   522                              <1> ;On exit: rbx = DPB pointer
   523 00001335 84D2                <1>     test dl, dl
   524 00001337 7508                <1>     jnz .gddpskipdefault
   525 00001339 8A15(0DC10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   526 0000133F EB02                <1>     jmp short .gddpcommon
   527                              <1> .gddpskipdefault:
   528                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   529 00001341 FECA                <1>     dec dl
   530                              <1> .gddpcommon:
   531 00001343 E843F9FFFF          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
   532 00001348 84C0                <1>     test al, al
   533 0000134A 741F                <1>     jz .gddpMediaCheck
   534                              <1> ;Put in here error info
   535 0000134C 66C705(E6C00300)0F- <1>     mov word [errorExCde], errBadDrv ;Invalid drive spec
   535 00001354 00                  <1>
   536 00001355 C605(E5C00300)02    <1>     mov byte [errorLocus], eLocDsk    ;Block device driver
   537 0000135C C605(E9C00300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   538 00001363 C605(E8C00300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after intervention
   539 0000136A C3                  <1>     ret ;Return. al = -1
   540                              <1> .gddpMediaCheck:
   541                              <1> ;Media Check Section
   542 0000136B C605(4EC00300)17    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   543 00001372 8815(4FC00300)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.unitnm], dl
   544 00001378 C605(50C00300)01    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   545 0000137F 66C705(51C00300)00- <1>     mov word [diskReqHdr + mediaCheckReqPkt.status], 0
   545 00001387 00                  <1>
   546 00001388 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   547 0000138B 8805(5BC00300)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.medesc], al
   548 00001391 88D0                <1>     mov al, dl  ;Save device number in al
   549 00001393 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr]
   550 00001397 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   551 0000139E FF520A              <1>     call [rdx + drvHdr.strPtr]
   552 000013A1 FF5212              <1>     call [rdx + drvHdr.intPtr]
   553 000013A4 66F705(51C00300)00- <1>     test word [diskReqHdr + mediaCheckReqPkt.status], 8000h
   553 000013AC 80                  <1>
   554 000013AD 0F85EA000000        <1>     jnz .gddpError
   555 000013B3 88C2                <1>     mov dl, al
   556 000013B5 803D(5CC00300)01    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 1 ;Certified no change
   557 000013BC 0F84B0000000        <1>     je .gddpretdbp
   558 000013C2 803D(5CC00300)00    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 0
   559 000013C9 7512                <1>     jne .gddpBuildBPB   ;This means Media changed declared
   560 000013CB E816F2FFFF          <1>     call findDirtyBufferForDrive
   561 000013D0 48F7C3FFFFFFFF      <1>     test rbx, -1    ;This is the case if no dirty buffers for drive
   562 000013D7 0F8595000000        <1>     jne .gddpretdbp ;If there is a dirty buffer for the drive, dont build bpb
   563                              <1> .gddpBuildBPB:
   564                              <1> ;BPB Build Section, only here if need a new bpb, i.e. sure of a new device
   565 000013DD E8B4F1FFFF          <1>     call findLRUBuffer  ;Get lru buffer pointer in rbx
   566 000013E2 3A5308              <1>     cmp dl, byte [rbx + bufferHdr.driveNumber]  ;Does buffer belong to old drv?
   567 000013E5 7414                <1>     je .gddpBuildBPBInvalidateBuffer    ;Yes, immediately invalidate data
   568                              <1>     ;If no, flush the data to disk.
   569                              <1> .gddpBuildBPBFlush:
   570 000013E7 4889EE              <1>     mov rsi, rbp    ;Save rbp as pointer to old dl drive dpb
   571 000013EA 4889DD              <1>     mov rbp, rbx    ;Get buffer header pointer in rbp
   572 000013ED E851F1FFFF          <1>     call flushBuffer    ;Flush the buffer to disk, rbx preserved
   573 000013F2 4889F5              <1>     mov rbp, rsi    ;Return old drive dpb pointer to rbp
   574 000013F5 0F820F010000        <1>     jc .gddpErrorType2  ;rbx points to buffer header
   575                              <1> .gddpBuildBPBInvalidateBuffer:
   576                              <1>     ;Write new buffer header
   577 000013FB 885308              <1>     mov byte [rbx + bufferHdr.driveNumber], dl
   578 000013FE C6430908            <1>     mov byte [rbx + bufferHdr.bufferFlags], dataBuffer
   579 00001402 48C7430A00000000    <1>     mov qword [rbx + bufferHdr.bufferLBA], 0
   580 0000140A C6431201            <1>     mov byte [rbx + bufferHdr.bufFATcopy], 1
   581 0000140E C7431300000000      <1>     mov dword [rbx + bufferHdr.bufFATsize], 0
   582 00001415 48896B17            <1>     mov qword [rbx + bufferHdr.driveDPBPtr], rbp
   583 00001419 488D5B20            <1>     lea rbx, qword [rbx + bufferHdr.dataarea]
   584                              <1>     ;Build BPB request
   585 0000141D C605(4EC00300)1E    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   586 00001424 8815(4FC00300)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.unitnm], dl
   587 0000142A C605(50C00300)02    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   588 00001431 66C705(51C00300)00- <1>     mov word [diskReqHdr + bpbBuildReqPkt.status], 0 
   588 00001439 00                  <1>
   589 0000143A 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   590 0000143D 8805(5BC00300)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.medesc], al
   591 00001443 48891D(5CC00300)    <1>     mov qword [diskReqHdr + bpbBuildReqPkt.bufptr], rbx ;Put lru pointer in rbx
   592 0000144A 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   593 0000144E 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   594 00001455 FF520A              <1>     call [rdx + drvHdr.strPtr]
   595 00001458 FF5212              <1>     call [rdx + drvHdr.intPtr]
   596 0000145B 66F705(51C00300)00- <1>     test word [diskReqHdr + bpbBuildReqPkt.status], 8000h
   596 00001463 80                  <1>
   597 00001464 7537                <1>     jnz .gddpError
   598 00001466 488B35(64C00300)    <1>     mov rsi, qword [diskReqHdr + bpbBuildReqPkt.bpbptr]
   599                              <1>     ;rbp points to dpb so we good to go
   600                              <1>     ;Call int 41h ah=53h Build DPB without reentering Int 41h
   601                              <1>     ;Since this function doesnt modify the caller stack, it is safe to do so
   602 0000146D E813020000          <1>     call createDPB 
   603                              <1> .gddpretdbp: 
   604 00001472 C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Clear access flag
   605 00001476 488B15(24C10300)    <1>     mov rdx, qword [oldRSP]
   606 0000147D 48896A08            <1>     mov qword [rdx + callerFrame.rbx], rbp  ;Here, all paths have rbp as dpbptr
   607 00001481 30C0                <1>     xor al, al  ;Set al = 0 to indicate rbx=dpb pointer
   608 00001483 C3                  <1>     ret
   609                              <1> .gddpretdpbFail:
   610 00001484 488B15(24C10300)    <1>     mov rdx, qword [oldRSP]
   611 0000148B 48814A5801000000    <1>     or qword [rdx + callerFrame.flags], 1   ;Set CF=CY
   612 00001493 66C705(E6C00300)53- <1>     mov word [errorExCde], errFI24 ;Fail on INT 44h error code
   612 0000149B 00                  <1>
   613 0000149C C3                  <1>     ret
   614                              <1> .gddpError:
   615                              <1> ;Abort, Retry, Ignore are the only acceptible responses
   616                              <1> ;Entered with rbp = dpb for failing drive
   617                              <1> ;             rdx = driver header that caused fault
   618 0000149D 4889D6              <1>     mov rsi, rdx    ;rdx points to driver header in both cases
   619 000014A0 488B1D(24C10300)    <1>     mov rbx, qword [oldRSP]
   620 000014A7 8A4318              <1>     mov al, byte [rbx + callerFrame.rdx]    ;Get low byte = dl = Drive number
   621 000014AA 88C2                <1>     mov dl, al  ;Save in dl
   622 000014AC 84C0                <1>     test al, al
   623 000014AE 7508                <1>     jnz .gddpE0
   624 000014B0 8A05(0DC10300)      <1>     mov al, byte [currentDrv]
   625 000014B6 EB02                <1>     jmp short .gddpE1
   626                              <1> .gddpE0:
   627 000014B8 FEC8                <1>     dec al
   628                              <1> .gddpE1:
   629 000014BA B436                <1>     mov ah, 36h ;Read operation, data area, abort/retry/ignore, disk error
   630 000014BC 668B3D(51C00300)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   631 000014C3 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   632 000014C8 66893D(E6C00300)    <1>     mov word [errorExCde], di     ;Save driver error code
   633 000014CF 668105(E6C00300)13- <1>     add word [errorExCde], drvErrShft    ;Add offset to driver error codes
   633 000014D7 00                  <1>
   634 000014D8 8805(E4C00300)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   635 000014DE C605(E5C00300)02    <1>     mov byte [errorLocus], eLocDsk    ;Error in Block Device Request code
   636 000014E5 C605(E9C00300)0B    <1>     mov byte [errorClass], eClsMedia   ;Media error (bad BPB or other) code
   637 000014EC C605(E8C00300)01    <1>     mov byte [errorAction], eActRet   ;Retry request code
   638 000014F3 E86BF7FFFF          <1>     call criticalDOSError   ;Critical error handler
   639 000014F8 84C0                <1>     test al, al
   640 000014FA 0F8472FFFFFF        <1>     jz .gddpretdbp  ;Ignore error, return, rbp has old dpb pointer
   641 00001500 3C01                <1>     cmp al, 1
   642 00001502 0F842DFEFFFF        <1>     je getDeviceDPBptr ;Reenter the function, dl has drive code
   643 00001508 CD43                <1>     int 43h ;Else, restart DOS
   644                              <1> .gddpErrorType2:
   645                              <1> ;Error flushing the old buffer
   646                              <1> ;   rbx = Buffer header for data transfer
   647 0000150A B439                <1>     mov ah, 39h ;Write operation, abort/retry/ignore/fail, disk error
   648 0000150C 807B0901            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dosBuffer
   649 00001510 7414                <1>     je .gddpErrorType2main
   650 00001512 80CC02              <1>     or ah, 2h   ;Set bit 1
   651 00001515 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   652 00001519 740B                <1>     je .gddpErrorType2main
   653 0000151B B43D                <1>     mov ah, 3Dh ;Set bit 2, clear bit 1
   654 0000151D 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   655 00001521 7403                <1>     je .gddpErrorType2main
   656 00001523 80CC02              <1>     or ah, 2h   ;Set bit 2 and 1
   657                              <1> .gddpErrorType2main:    
   658 00001526 668B3D(51C00300)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   659 0000152D 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   660 00001532 66893D(E6C00300)    <1>     mov word [errorExCde], di     ;Save driver error code
   661 00001539 668105(E6C00300)13- <1>     add word [errorExCde], drvErrShft   ;Add offset to driver error codes
   661 00001541 00                  <1>
   662 00001542 8A4308              <1>     mov al, byte [rbx + bufferHdr.driveNumber]
   663 00001545 8805(E4C00300)      <1>     mov byte [errorDrv], al
   664 0000154B C605(E5C00300)02    <1>     mov byte [errorLocus], eLocDsk    ;Error in Block Device Request code
   665 00001552 C605(E9C00300)0B    <1>     mov byte [errorClass], eClsMedia  ;Media error (bad disk write) code
   666 00001559 C605(E8C00300)01    <1>     mov byte [errorAction], eActRet   ;Retry request code
   667 00001560 488B7317            <1>     mov rsi, qword [rbx + bufferHdr.driveDPBPtr]
   668 00001564 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get device driver header in rsi
   669 00001568 E8F6F6FFFF          <1>     call criticalDOSError   ;Critical error handler
   670 0000156D 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   671 00001571 7420                <1>     je .gddpErrorType2FatDir
   672 00001573 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   673 00001577 741A                <1>     je .gddpErrorType2FatDir
   674 00001579 84C0                <1>     test al, al
   675 0000157B 0F847AFEFFFF        <1>     jz .gddpBuildBPBInvalidateBuffer ;Ignore error, invalidate data
   676 00001581 3C01                <1>     cmp al, 1
   677 00001583 0F845EFEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   678 00001589 3C03                <1>     cmp al, 3
   679 0000158B 0F84F3FEFFFF        <1>     je .gddpretdpbFail
   680 00001591 CD43                <1>     int 43h ;al = 2, means just abort
   681                              <1> .gddpErrorType2FatDir:
   682 00001593 84C0                <1>     test al, al ;Ignore converted to fail
   683 00001595 0F84E9FEFFFF        <1>     jz .gddpretdpbFail
   684 0000159B 3C01                <1>     cmp al, 1
   685 0000159D 0F8444FEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   686 000015A3 3C03                <1>     cmp al, 3
   687 000015A5 0F84D9FEFFFF        <1>     je .gddpretdpbFail
   688 000015AB CD43                <1>     int 43h ;al = 2, means just abort
   689                              <1> ;-------------------------------------------
   690                              <1> 
   691                              <1> ctrlBreakCheck:    ;ah = 33h
   692 000015AD 84C0                <1>     test al, al
   693 000015AF 7406                <1>     jz .cbcget  ;Get the state
   694 000015B1 8815(0EC10300)      <1>     mov byte [breakFlag], dl    ;Set the state
   695                              <1> .cbcget:
   696 000015B7 8A15(0EC10300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   697 000015BD 48CF                <1>     iretq
   698                              <1> getInDOSflagPtr:   ;ah = 34h
   699 000015BF 488D15(E3C00300)    <1>     lea rdx, inDOS
   700 000015C6 488B1D(24C10300)    <1>     mov rbx, qword [oldRSP]
   701 000015CD 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;save ptr in rbx
   702 000015D1 C3                  <1>     ret
   703                              <1> getIntVector:      ;ah = 35h
   704                              <1> ;Called with:
   705                              <1> ;   al = Interrupt Number
   706                              <1> ;Returns:
   707                              <1> ;   rbx = Pointer to interrupt handler
   708 000015D2 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   709 000015D4 B807F00000          <1>     mov eax, 0F007h
   710 000015D9 CD35                <1>     int 35h
   711 000015DB 488B15(24C10300)    <1>     mov rdx, qword [oldRSP]
   712 000015E2 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx  ;Save pointer in rbx
   713 000015E6 8A02                <1>     mov al, byte [rdx + callerFrame.rax]    ;Get the low byte in al
   714 000015E8 C3                  <1>     ret
   715                              <1> getDiskFreeSpace:  ;ah = 36h
   716 000015E9 84D2                <1>     test dl, dl
   717 000015EB 7408                <1>     jz .gdfsSkipdefault
   718 000015ED 8A15(0DC10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   719 000015F3 EB02                <1>     jmp short .gdfsMain
   720                              <1> .gdfsSkipdefault:
   721 000015F5 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   722                              <1> .gdfsMain:
   723 000015F7 E88FF6FFFF          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
   724 000015FC 84C0                <1>     test al, al
   725 000015FE 7434                <1>     jz .gdfsDPBFound
   726                              <1> ;Else, we at an error.
   727                              <1> ;Simply return with CY set and error code in al with extended error info
   728 00001600 66C705(E6C00300)0F- <1>     mov word [errorExCde], errBadDrv     ;Invalid drive error
   728 00001608 00                  <1>
   729 00001609 C605(E5C00300)02    <1>     mov byte [errorLocus], eLocDsk    ;Not appropriate
   730 00001610 C605(E9C00300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   731 00001617 C605(E8C00300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   732 0000161E 488B2D(24C10300)    <1>     mov rbp, qword [oldRSP]
   733 00001625 66C74500FFFF        <1>     mov word [rbp + callerFrame.rax], -1    ;Set ax=FFFFh
   734 0000162B 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set CF=CY
   735 00001633 C3                  <1>     ret
   736                              <1> .gdfsDPBFound:
   737 00001634 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   738 00001637 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   739 00001639 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   740 0000163C 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   741 0000163F BB01000000          <1>     mov ebx, 1
   742 00001644 D3E3                <1>     shl ebx, cl
   743 00001646 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   744 00001648 8B5D30              <1>     mov ebx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   745 0000164B 488B2D(24C10300)    <1>     mov rbp, qword [oldRSP]
   746 00001652 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   747 00001656 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   748 0000165A 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   749 0000165E C3                  <1>     ret
   750                              <1> 
   751                              <1> loadExecChild:     ;ah = 4Bh, EXEC
   752                              <1> terminateClean:    ;ah = 4Ch, EXIT
   753                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   754 0000165F C3                  <1>     ret
   755                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   756 00001660 48891D(F2C00300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   757 00001667 48CF                <1>     iretq
   758                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   759 00001669 488B15(F2C00300)    <1>     mov rdx, qword [currentPSP]
   760 00001670 48CF                <1>     iretq
   761                              <1> getSysVarsPtr:     ;ah = 52h
   762 00001672 488D15(80C00300)    <1>     lea rdx, sysVarsPtr
   763 00001679 488B1D(24C10300)    <1>     mov rbx, qword [oldRSP]
   764 00001680 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx
   765 00001684 C3                  <1>     ret
   766                              <1> createDPB:         ;ah = 53h, generates a DPB from a given BPB
   767                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   768                              <1> ;This is done so that the other fields of the DPB can be recycled
   769                              <1> ;Input: rsi = ptr to the BPB
   770                              <1> ;       rbp = ptr to the DPB
   771                              <1> ;bMediaDescriptor
   772 00001685 8A4615              <1>     mov al, byte [rsi + bpb.media]
   773 00001688 884522              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   774                              <1> ;bAccessFlag
   775 0000168B C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Not accessed
   776                              <1> ;dFirstFreeCluster
   777 0000168F C7452C00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   778                              <1> ;dNumberOfFreeClusters
   779 00001696 C74530FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   780                              <1> ;bBytesPerSectorShift
   781 0000169D 668B460B            <1>     mov ax, word [rsi + bpb.bytsPerSec]
   782 000016A1 B107                <1>     mov cl, 7   ;Start with 128 byte sectors (not supported, min 512)
   783 000016A3 66D3E8              <1>     shr ax, cl  ;Shift down
   784                              <1> .cd0:
   785 000016A6 66D1E8              <1>     shr ax, 1
   786 000016A9 7404                <1>     jz .cd1
   787 000016AB FEC1                <1>     inc cl
   788 000016AD EBF7                <1>     jmp short .cd0
   789                              <1> .cd1:
   790 000016AF 884D02              <1>     mov byte [rbp + dpb.bBytesPerSectorShift], cl
   791                              <1> ;bMaxSectorInCluster
   792 000016B2 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   793 000016B5 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   794 000016B7 884503              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   795                              <1> ;bSectorsPerClusterShift
   796 000016BA FEC0                <1>     inc al
   797 000016BC 30C9                <1>     xor cl, cl
   798                              <1> .cd2:
   799 000016BE D0E8                <1>     shr al, 1
   800 000016C0 7404                <1>     jz .cd3
   801 000016C2 FEC1                <1>     inc cl
   802 000016C4 EBF8                <1>     jmp short .cd2
   803                              <1> .cd3:
   804 000016C6 884D04              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   805                              <1> ;wFAToffset, number of reserved sectors in partition
   806 000016C9 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   807 000016CD 66894505            <1>     mov word [rbp + dpb.wFAToffset], ax
   808                              <1> ;bNumberOfFATs
   809 000016D1 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   810 000016D4 884507              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   811                              <1> ;wNumberRootDirSectors
   812 000016D7 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   813 000016DB C1E005              <1>     shl eax, 5  ;Multiply by 32
   814 000016DE 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   815 000016E2 FFC9                <1>     dec ecx
   816 000016E4 01C8                <1>     add eax, ecx
   817 000016E6 31D2                <1>     xor edx, edx    ;Clear for divide
   818 000016E8 F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   819 000016EA 66894508            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   820                              <1> ;dFATlength, get the FAT length
   821 000016EE 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   822 000016F2 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   823 000016F5 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   824 000016F7 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   825 000016FA 894512              <1>     mov dword [rbp + dpb.dFATlength], eax
   826                              <1> ;Complex cases below...
   827                              <1> ;dClusterHeapOffset, start sector of the data area
   828 000016FD 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   829 00001701 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   830 00001704 85C0                <1>     test eax, eax
   831 00001706 0F44C3              <1>     cmovz eax, ebx
   832                              <1> ;eax = FATsz
   833 00001709 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   834 0000170D 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   835 00001710 85DB                <1>     test ebx, ebx
   836 00001712 0F44D9              <1>     cmovz ebx, ecx 
   837                              <1> ;ebx = TotSec
   838 00001715 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   839 00001718 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   840                              <1> .cd4:
   841 0000171A 01C2                <1>     add edx, eax
   842 0000171C FEC9                <1>     dec cl
   843 0000171E 75FA                <1>     jnz .cd4
   844 00001720 89D0                <1>     mov eax, edx    ;Store product in eax
   845 00001722 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   846 00001726 01D0                <1>     add eax, edx
   847 00001728 0FB75508            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   848 0000172C 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   849                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   850                              <1>     ;aka eax = Start sector of the data area in volume
   851 0000172E 89450A              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   852                              <1> ;dClusterCount
   853 00001731 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   854 00001733 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   855 00001735 31D2                <1>     xor edx, edx
   856 00001737 BB01000000          <1>     mov ebx, 1
   857 0000173C 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   858 0000173F D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   859 00001741 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   860 00001743 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   861 00001745 89450E              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   862                              <1> ;dFirstUnitOfRootDir
   863 00001748 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   864 0000174D 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   865 00001750 7709                <1>     ja .cd5
   866                              <1>     ;Else, we need to find the first sector of the root directory
   867                              <1>     ;Get the start sector of data area in volume 
   868                              <1>     ; and sub the number of sectors in the root directory
   869 00001752 8B450A              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   870 00001755 0FB75D08            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   871 00001759 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   872                              <1> .cd5:
   873 0000175B 894516              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   874                              <1> ;Exit epilogue
   875 0000175E 488B1D(24C10300)    <1>     mov rbx, qword [oldRSP]
   876 00001765 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   877                              <1>     %if DEBUG && DPBINFO
   878                              <1>     ;Print DPB 
   879                              <1>     debugEnterM
   327 00001767 488925ADE8FFFF      <2>  mov qword [debOldRSP], rsp
   328 0000176E 48BC00000800000000- <2>  mov rsp, debStackTop
   328 00001777 00                  <2>
   329                              <2> 
   330 00001778 50                  <2>  push rax
   331 00001779 53                  <2>  push rbx
   332 0000177A 51                  <2>  push rcx
   333 0000177B 52                  <2>  push rdx
   334 0000177C 56                  <2>  push rsi
   335 0000177D 57                  <2>  push rdi
   336 0000177E 55                  <2>  push rbp
   337 0000177F 4150                <2>  push r8
   338 00001781 4151                <2>  push r9
   339 00001783 4152                <2>  push r10
   340 00001785 4153                <2>  push r11
   341 00001787 4154                <2>  push r12
   342 00001789 4155                <2>  push r13
   343 0000178B 4156                <2>  push r14
   344 0000178D 4157                <2>  push r15
   345 0000178F 9C                  <2>  pushfq
   880 00001790 55                  <1>     push rbp
   881 00001791 488D2D12000000      <1>     lea rbp, .l0000
   882 00001798 E851E9FFFF          <1>     call debPrintNullString
   883 0000179D 5D                  <1>     pop rbp
   884 0000179E E866EBFFFF          <1>     call debDPBBPBptr
   885 000017A3 E88BE8FFFF          <1>     call debMakeDebuggerRespond
   886 000017A8 EB28                <1>     jmp short .l0001
   887 000017AA 436F6E737472756374- <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   887 000017B3 656420445042206672- <1>
   887 000017BC 6F6D20676976656E20- <1>
   887 000017C5 646576696365204250- <1>
   887 000017CE 420A0D00            <1>
   888                              <1> .l0001:
   889                              <1>     debugExitM
   349 000017D2 9D                  <2>  popfq
   350 000017D3 415F                <2>  pop r15
   351 000017D5 415E                <2>  pop r14
   352 000017D7 415D                <2>  pop r13
   353 000017D9 415C                <2>  pop r12
   354 000017DB 415B                <2>  pop r11
   355 000017DD 415A                <2>  pop r10
   356 000017DF 4159                <2>  pop r9
   357 000017E1 4158                <2>  pop r8
   358 000017E3 5D                  <2>  pop rbp
   359 000017E4 5F                  <2>  pop rdi
   360 000017E5 5E                  <2>  pop rsi
   361 000017E6 5A                  <2>  pop rdx
   362 000017E7 59                  <2>  pop rcx
   363 000017E8 5B                  <2>  pop rbx
   364 000017E9 58                  <2>  pop rax
   365 000017EA 488B252AE8FFFF      <2>  mov rsp, qword [debOldRSP]
   890                              <1>     %endif
   891 000017F1 C3                  <1>     ret
   892                              <1> getVerifySetting:  ;ah = 54h
   893 000017F2 8A05(0FC10300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   894 000017F8 C3                  <1>     ret
   895                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   896 000017F9 C3                  <1>     ret
   897                              <1> getExtendedError:  ;ah = 59h
   898 000017FA 488B15(24C10300)    <1>     mov rdx, qword [oldRSP]
   899 00001801 668B05(E6C00300)    <1>     mov ax, word [errorExCde]
   900 00001808 8A2D(E5C00300)      <1>     mov ch, byte [errorLocus]
   901 0000180E 8A3D(E9C00300)      <1>     mov bh, byte [errorClass]
   902 00001814 8A1D(E8C00300)      <1>     mov bl, byte [errorAction]
   903 0000181A 668902              <1>     mov word [rdx + callerFrame.rax], ax
   904 0000181D 66895A08            <1>     mov word [rdx + callerFrame.rbx], bx
   905 00001821 886A11              <1>     mov byte [rdx + callerFrame.rcx + 1], ch
   906 00001824 C3                  <1>     ret
   907                              <1> getCritErrorInfo:  ;ah = 5Dh
   908                              <1> networkServices:   ;ah = 5Eh, do nothing
   909                              <1> networkRedirection:;ah = 5Fh, do nothing
   910 00001825 C3                  <1>     ret
   911                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   912 00001826 488B15(F2C00300)    <1>     mov rdx, qword [currentPSP]
   913 0000182D 48CF                <1>     iretq
   914                              <1>                     ;ah = 63h, reserved
   915                              <1> setDriverLookahead:;ah = 64h, reserved
   916 0000182F 48CF                <1>     iretq
   917                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   918                              <1> return:
   919 00001831 C3                  <1>     ret
   920                              <1> 
   921                              <1> kernelDispatchTable:
   922 00001832 [7A11000000000000]  <1>     dq simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   923 0000183A [5208000000000000]  <1>     dq stdinReadEcho       ;AH = 01H, CHAR IO
   924 00001842 [C708000000000000]  <1>     dq stdoutWrite         ;AH = 02H, CHAR IO
   925 0000184A [0109000000000000]  <1>     dq stdauxRead          ;AH = 03H, CHAR IO
   926 00001852 [0109000000000000]  <1>     dq stdauxWrite         ;AH = 04H, CHAR IO
   927 0000185A [0109000000000000]  <1>     dq stdprnWrite         ;AH = 05H, CHAR IO
   928 00001862 [0109000000000000]  <1>     dq directCONIO         ;AH = 06H, CHAR IO
   929 0000186A [0109000000000000]  <1>     dq waitDirectInNoEcho  ;AH = 07H, CHAR IO
   930 00001872 [3B09000000000000]  <1>     dq waitStdinNoEcho     ;AH = 08H, CHAR IO
   931 0000187A [3C09000000000000]  <1>     dq printString         ;AH = 09H, CHAR IO
   932 00001882 [7E09000000000000]  <1>     dq buffStdinInput      ;AH = 0AH, CHAR IO
   933 0000188A [7E09000000000000]  <1>     dq checkStdinStatus    ;AH = 0BH, CHAR IO
   934 00001892 [7E09000000000000]  <1>     dq clearbuffDoFunc     ;AH = 0CH, CHAR IO
   935 0000189A [7B11000000000000]  <1>     dq diskReset           ;AH = 0DH, DISK MANAGEMENT
   936 000018A2 [1112000000000000]  <1>     dq selectDisk          ;AH = 0EH, DISK MANAGEMENT
   937 000018AA [7E09000000000000]  <1>     dq openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   938 000018B2 [7E09000000000000]  <1>     dq closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   939 000018BA [7E09000000000000]  <1>     dq findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   940 000018C2 [7E09000000000000]  <1>     dq findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   941 000018CA [7E09000000000000]  <1>     dq deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   942 000018D2 [7E09000000000000]  <1>     dq sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   943 000018DA [7E09000000000000]  <1>     dq sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   944 000018E2 [7E09000000000000]  <1>     dq createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   945 000018EA [7E09000000000000]  <1>     dq renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   946 000018F2 [3118000000000000]  <1>     dq return              ;AH = 18H, RESERVED
   947 000018FA [6212000000000000]  <1>     dq getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   948 00001902 [7F09000000000000]  <1>     dq setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   949 0000190A [6912000000000000]  <1>     dq FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   950 00001912 [6B12000000000000]  <1>     dq FATinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   951 0000191A [3118000000000000]  <1>     dq return              ;AH = 1DH, RESERVED
   952 00001922 [3118000000000000]  <1>     dq return              ;AH = 1EH, RESERVED
   953 0000192A [3313000000000000]  <1>     dq getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   954 00001932 [3118000000000000]  <1>     dq return              ;AH = 20H, RESERVED
   955 0000193A [9209000000000000]  <1>     dq randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   956 00001942 [9209000000000000]  <1>     dq randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   957 0000194A [9209000000000000]  <1>     dq getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   958 00001952 [9209000000000000]  <1>     dq setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   959 0000195A [E112000000000000]  <1>     dq setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   960 00001962 [0C13000000000000]  <1>     dq createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   961 0000196A [9209000000000000]  <1>     dq randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   962 00001972 [9209000000000000]  <1>     dq randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   963 0000197A [9209000000000000]  <1>     dq parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   964 00001982 [610C000000000000]  <1>     dq getDate             ;AH = 2AH, TIME AND DATE
   965 0000198A [610C000000000000]  <1>     dq setDate             ;AH = 2BH, TIME AND DATE
   966 00001992 [610C000000000000]  <1>     dq getTime             ;AH = 2CH, TIME AND DATE
   967 0000199A [610C000000000000]  <1>     dq setTime             ;AH = 2DH, TIME AND DATE
   968 000019A2 [0D13000000000000]  <1>     dq setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   969 000019AA [9309000000000000]  <1>     dq getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   970 000019B2 [1B13000000000000]  <1>     dq getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   971 000019BA [3213000000000000]  <1>     dq terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   972 000019C2 [3513000000000000]  <1>     dq getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   973 000019CA [AD15000000000000]  <1>     dq ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   974 000019D2 [BF15000000000000]  <1>     dq getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   975 000019DA [D215000000000000]  <1>     dq getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   976 000019E2 [E915000000000000]  <1>     dq getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   977 000019EA [620C000000000000]  <1>     dq getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   978 000019F2 [620C000000000000]  <1>     dq getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   979 000019FA [5108000000000000]  <1>     dq makeDIR             ;AH = 39H, DIRECTORY OPERATION
   980 00001A02 [5108000000000000]  <1>     dq removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   981 00001A0A [5108000000000000]  <1>     dq changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   982 00001A12 [A609000000000000]  <1>     dq createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   983 00001A1A [A609000000000000]  <1>     dq openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   984 00001A22 [A609000000000000]  <1>     dq closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   985 00001A2A [A709000000000000]  <1>     dq readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   986 00001A32 [E009000000000000]  <1>     dq writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   987 00001A3A [F109000000000000]  <1>     dq deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
   988 00001A42 [F109000000000000]  <1>     dq movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
   989 00001A4A [F109000000000000]  <1>     dq changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
   990 00001A52 [F109000000000000]  <1>     dq ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
   991 00001A5A [F109000000000000]  <1>     dq duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
   992 00001A62 [F109000000000000]  <1>     dq forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
   993 00001A6A [5108000000000000]  <1>     dq getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
   994 00001A72 [D60A000000000000]  <1>     dq allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
   995 00001A7A [D60A000000000000]  <1>     dq freeMemory          ;AH = 49H, MEMORY MANAGEMENT
   996 00001A82 [D50B000000000000]  <1>     dq reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
   997 00001A8A [5F16000000000000]  <1>     dq loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
   998 00001A92 [5F16000000000000]  <1>     dq terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
   999 00001A9A [5F16000000000000]  <1>     dq getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
  1000 00001AA2 [F109000000000000]  <1>     dq findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
  1001 00001AAA [F109000000000000]  <1>     dq findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
  1002 00001AB2 [6016000000000000]  <1>     dq setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
  1003 00001ABA [6916000000000000]  <1>     dq getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
  1004 00001AC2 [7216000000000000]  <1>     dq getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
  1005 00001ACA [8516000000000000]  <1>     dq createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
  1006 00001AD2 [F217000000000000]  <1>     dq getVerifySetting    ;AH = 54H, DISK MANAGEMENT
  1007 00001ADA [F917000000000000]  <1>     dq createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
  1008 00001AE2 [F109000000000000]  <1>     dq renameFile          ;AH = 56H, FILE OPERATION       HANDLE
  1009 00001AEA [5108000000000000]  <1>     dq getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
  1010 00001AF2 [EF0B000000000000]  <1>     dq getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
  1011 00001AFA [FA17000000000000]  <1>     dq getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
  1012 00001B02 [F109000000000000]  <1>     dq createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
  1013 00001B0A [F109000000000000]  <1>     dq createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
  1014 00001B12 [F109000000000000]  <1>     dq lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
  1015 00001B1A [2518000000000000]  <1>     dq getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
  1016 00001B22 [2518000000000000]  <1>     dq networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
  1017 00001B2A [2518000000000000]  <1>     dq networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
  1018 00001B32 [5108000000000000]  <1>     dq trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
  1019 00001B3A [3118000000000000]  <1>     dq return              ;AH = 61H, RESERVED
  1020 00001B42 [2618000000000000]  <1>     dq getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
  1021 00001B4A [3118000000000000]  <1>     dq return              ;AH = 63H, RESERVED
  1022 00001B52 [2F18000000000000]  <1>     dq setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
  1023 00001B5A [620C000000000000]  <1>     dq getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
  1024 00001B62 [620C000000000000]  <1>     dq getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
  1025 00001B6A [F109000000000000]  <1>     dq setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
  1026 00001B72 [F109000000000000]  <1>     dq commitFile          ;AH = 68H, FILE OPERATION       HANDLE
  1027 00001B7A [3118000000000000]  <1>     dq getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
  1028                              <1> kernelDispatchTableL  equ $ - kernelDispatchTable 
    26                                  %include "./Source/Misc/int44h.asm"
    27                              <1> critErrorHandler:   ;Int 44h
    28                              <1> ;User Stack in usage here, must be swapped to before this is called
    29                              <1> ;Entered with:  
    30                              <1> ;               AH = Critical Error Bitfield
    31                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    32                              <1> ;               Bit 6 - Reserved
    33                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    34                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    35                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    36                              <1> ;               Bits [2-1] = Affected Disk Error
    37                              <1> ;                     0 0   DOS area
    38                              <1> ;                     0 1   FAT area
    39                              <1> ;                     1 0   Directory area
    40                              <1> ;                     1 1   Data area
    41                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    42                              <1> ;               AL  = Failing drive number if AH[7] = 0
    43                              <1> ;               DIL = Error code for errorMsg
    44                              <1> ;               RSI = EA of Device Header for which device the error occured
    45                              <1> ;Return:
    46                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    47                              <1> ;                  = 1 - Retry the Operation    (Retry)
    48                              <1> ;                  = 2 - Terminate the Program  (Abort)
    49                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    50 00001B82 53                  <1>     push rbx
    51 00001B83 51                  <1>     push rcx
    52 00001B84 52                  <1>     push rdx
    53 00001B85 57                  <1>     push rdi
    54 00001B86 56                  <1>     push rsi
    55 00001B87 FC                  <1>     cld         ;Make String ops go forward
    56                              <1> 
    57 00001B88 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    58 00001B8B 488D155E020000      <1>     lea rdx, qword [.crlf]
    59 00001B92 B409                <1>     mov ah, 09h ;Print String
    60 00001B94 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    61                              <1> 
    62 00001B96 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    63 00001B9C B90C000000          <1>     mov ecx, 0Ch
    64 00001BA1 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    65 00001BA3 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    66 00001BA6 480FB7FF            <1>     movzx rdi, di
    67 00001BAA 4889FA              <1>     mov rdx, rdi    ;Copy error code
    68 00001BAD 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    69 00001BB1 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    70 00001BB4 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    71 00001BB7 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    72 00001BBE 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    73 00001BC2 B409                <1>     mov ah, 09h ;Print String
    74 00001BC4 CD41                <1>     int 41h     ;Call DOS to print first part of message
    75                              <1> 
    76 00001BC6 488D1505020000      <1>     lea rdx, qword [.readmsg]
    77 00001BCD 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    78 00001BD4 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    79 00001BD7 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    80 00001BDB B409                <1>     mov ah, 09h ;Print String
    81 00001BDD CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    82                              <1> 
    83 00001BDF F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    84 00001BE2 0F85DF000000        <1>     jnz .charError
    85                              <1> ;Disk error continues here
    86 00001BE8 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    87 00001BEF B409                <1>     mov ah, 09h
    88 00001BF1 CD41                <1>     int 41h
    89 00001BF3 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    90 00001BF5 80C241              <1>     add dl, "A" ;Add ASCII code
    91 00001BF8 B402                <1>     mov ah, 02h ;Print char in dl
    92 00001BFA CD41                <1>     int 41h
    93                              <1> .userInput:
    94 00001BFC 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
    95 00001C03 B409                <1>     mov ah, 09h
    96 00001C05 CD41                <1>     int 41h
    97                              <1> ;Abort, Retry, Ignore, Fail is word order
    98                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    99                              <1> .userAbort:
   100                              <1> ;Abort is always an option
   101 00001C07 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   102 00001C0E B409                <1>     mov ah, 09h
   103 00001C10 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   104                              <1> .userRetry:
   105 00001C12 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   106 00001C15 7416                <1>     jz .userIgnore    ;If clear, dont print message
   107 00001C17 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   108 00001C1E B409                <1>     mov ah, 09h
   109 00001C20 CD41                <1>     int 41h
   110 00001C22 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   111 00001C29 B409                <1>     mov ah, 09h
   112 00001C2B CD41                <1>     int 41h
   113                              <1> .userIgnore:
   114 00001C2D F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   115 00001C30 7416                <1>     jz .userFail
   116 00001C32 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   117 00001C39 B409                <1>     mov ah, 09h
   118 00001C3B CD41                <1>     int 41h
   119 00001C3D 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   120 00001C44 B409                <1>     mov ah, 09h
   121 00001C46 CD41                <1>     int 41h
   122                              <1> .userFail:
   123 00001C48 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   124 00001C4B 7416                <1>     jz .userMsgEnd
   125 00001C4D 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   126 00001C54 B409                <1>     mov ah, 09h
   127 00001C56 CD41                <1>     int 41h
   128 00001C58 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   129 00001C5F B409                <1>     mov ah, 09h
   130 00001C61 CD41                <1>     int 41h
   131                              <1> .userMsgEnd:
   132 00001C63 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   133 00001C6A B409                <1>     mov ah, 09h
   134 00001C6C CD41                <1>     int 41h
   135                              <1> ;Get user input now 
   136 00001C6E 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   137 00001C70 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   138 00001C77 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   139 00001C79 CD41                <1>     int 41h ;Get char in al
   140 00001C7B 3C61                <1>     cmp al, "a" ;Chack if lowercase
   141 00001C7D 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   142 00001C7F 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   143                              <1> .uip1:
   144 00001C81 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   145 00001C82 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   146 00001C84 FFC1                <1>     inc ecx
   147 00001C86 81F904000000        <1>     cmp ecx, 4
   148 00001C8C 75F3                <1>     jne .uip1
   149 00001C8E E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   150                              <1> .validInput:
   151 00001C93 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   152                              <1> ;Now check if the input is permitted
   153 00001C95 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   154 00001C97 7427                <1>     je .cehExit
   155 00001C99 84C0                <1>     test al, al ;Check if 0 => Ignore
   156 00001C9B 740F                <1>     je .viIgnore
   157 00001C9D 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   158 00001C9F 7416                <1>     je .viRetry
   159                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   160 00001CA1 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   161 00001CA4 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   162 00001CAA EB14                <1>     jmp short .cehExit
   163                              <1> .viIgnore:
   164 00001CAC F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   165 00001CAF 0F8447FFFFFF        <1>     jz .userInput
   166 00001CB5 EB09                <1>     jmp short .cehExit
   167                              <1> .viRetry:
   168 00001CB7 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   169 00001CBA 0F843CFFFFFF        <1>     jz .userInput
   170                              <1> .cehExit:
   171 00001CC0 5E                  <1>     pop rsi
   172 00001CC1 5F                  <1>     pop rdi
   173 00001CC2 5A                  <1>     pop rdx
   174 00001CC3 59                  <1>     pop rcx
   175 00001CC4 5B                  <1>     pop rbx
   176 00001CC5 48CF                <1>     iretq
   177                              <1> .charError:
   178 00001CC7 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   179 00001CCC 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   180                              <1> .ce1:
   181 00001CD3 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   182 00001CD4 88C2                <1>     mov dl, al  ;Move char into dl
   183 00001CD6 B402                <1>     mov ah, 02h
   184 00001CD8 CD41                <1>     int 41h ;Print char
   185 00001CDA E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   186 00001CDC E91BFFFFFF          <1>     jmp .userInput
   187                              <1> 
   188                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   189 00001CE1 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   189 00001CEA 746563742024202020  <1>
   190 00001CF3 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   190 00001CFC 6E6974202420202020  <1>
   191 00001D05 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   191 00001D0E 202420202020202020  <1>
   192 00001D17 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   192 00001D20 6F6D6D616E64202420  <1>
   193 00001D29 446174612024202020- <1>             db "Data $            "       ;Error 4
   193 00001D32 202020202020202020  <1>
   194 00001D3B 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   194 00001D44 737420242020202020  <1>
   195 00001D4D 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   195 00001D56 202020202020202020  <1>
   196 00001D5F 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   196 00001D68 656469612024202020  <1>
   197 00001D71 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   197 00001D7A 7420466F756E642024  <1>
   198 00001D83 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   198 00001D8C 706572202420202020  <1>
   199 00001D95 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   199 00001D9E 6C7420242020202020  <1>
   200 00001DA7 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   200 00001DB0 742024202020202020  <1>
   201 00001DB9 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   201 00001DC2 61696C757265202420  <1>
   202                              <1> 
   203 00001DCB 64726976652024      <1> .drive      db "drive $"
   204 00001DD2 6572726F7220726561- <1> .readmsg    db "error reading $"
   204 00001DDB 64696E672024        <1>
   205 00001DE1 6572726F7220777269- <1> .writemsg   db "error writing $"
   205 00001DEA 74696E672024        <1>
   206 00001DF0 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   207 00001DF3 41626F727424        <1> .abortmsg   db "Abort$" 
   208 00001DF9 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   209 00001E00 526574727924        <1> .retrymsg   db "Retry$"
   210 00001E06 4661696C24          <1> .failmsg    db "Fail$"
   211 00001E0B 2C2024              <1> .betweenMsg db ", $"
   212 00001E0E 3F2024              <1> .endMsg     db "? $"
   213 00001E11 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    27                                  %include "./Source/Drivers/drvData.asm"
    28                              <1> ;-----------------------------------:
    29                              <1> ;          Driver routines          :
    30                              <1> ;-----------------------------------:
    31                              <1> drivers:
    32                              <1> conHdr:
    33 00001E15 [371E000000000000]  <1>     dq auxHdr
    34 00001E1D 1308                <1>     dw 0813h
    35 00001E1F [B51F000000000000]  <1>     dq commonStrat
    36 00001E27 [C41F000000000000]  <1>     dq conDriver
    37 00001E2F 434F4E2020202020    <1>     db "CON     "
    38                              <1> auxHdr:
    39 00001E37 [591E000000000000]  <1>     dq prnHdr
    40 00001E3F 0080                <1>     dw 08000h
    41 00001E41 [B51F000000000000]  <1>     dq commonStrat
    42 00001E49 [8D22000000000000]  <1>     dq com1Intr
    43 00001E51 4155582020202020    <1>     db "AUX     "
    44                              <1> prnHdr:
    45 00001E59 [7B1E000000000000]  <1>     dq clkHdr
    46 00001E61 40A0                <1>     dw 0A040h
    47 00001E63 [BD1F000000000000]  <1>     dq nulStrat
    48 00001E6B [C31F000000000000]  <1>     dq nulIntr
    49 00001E73 50524E2020202020    <1>     db "PRN     "
    50                              <1> clkHdr:
    51 00001E7B [9D1E000000000000]  <1>     dq msdHdr
    52 00001E83 0880                <1>     dw 08008h
    53 00001E85 [B51F000000000000]  <1>     dq commonStrat
    54 00001E8D [0021000000000000]  <1>     dq clkDriver
    55 00001E95 434C4F434B242020    <1>     db "CLOCK$  "
    56                              <1> msdHdr:
    57 00001E9D [BF1E000000000000]  <1>     dq com1Hdr
    58 00001EA5 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    59 00001EA7 [B51F000000000000]  <1>     dq commonStrat
    60 00001EAF [3224000000000000]  <1>     dq msdDriver
    61 00001EB7 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    62                              <1> com1Hdr:
    63 00001EBF [E11E000000000000]  <1>     dq com2Hdr
    64 00001EC7 0080                <1>     dw 08000h
    65 00001EC9 [B51F000000000000]  <1>     dq commonStrat
    66 00001ED1 [8D22000000000000]  <1>     dq com1Intr
    67 00001ED9 434F4D3120202020    <1>     db "COM1    "
    68                              <1> com2Hdr:
    69 00001EE1 [031F000000000000]  <1>     dq com3Hdr
    70 00001EE9 0080                <1>     dw 08000h
    71 00001EEB [B51F000000000000]  <1>     dq commonStrat
    72 00001EF3 [9622000000000000]  <1>     dq com2Intr
    73 00001EFB 434F4D3220202020    <1>     db "COM2    "
    74                              <1> com3Hdr:
    75 00001F03 [251F000000000000]  <1>     dq com4Hdr
    76 00001F0B 0080                <1>     dw 08000h
    77 00001F0D [B51F000000000000]  <1>     dq commonStrat
    78 00001F15 [9F22000000000000]  <1>     dq com3Intr
    79 00001F1D 434F4D3320202020    <1>     db "COM3    "
    80                              <1> com4Hdr:
    81 00001F25 [471F000000000000]  <1>     dq lpt1Hdr
    82 00001F2D 0080                <1>     dw 08000h
    83 00001F2F [B51F000000000000]  <1>     dq commonStrat
    84 00001F37 [A822000000000000]  <1>     dq com4Intr
    85 00001F3F 434F4D3420202020    <1>     db "COM4    "
    86                              <1> lpt1Hdr:
    87 00001F47 [691F000000000000]  <1>     dq lpt2Hdr
    88 00001F4F 40A0                <1>     dw 0A040h
    89 00001F51 [BD1F000000000000]  <1>     dq nulStrat
    90 00001F59 [C31F000000000000]  <1>     dq nulIntr
    91 00001F61 4C50543120202020    <1>     db "LPT1    "
    92                              <1> lpt2Hdr:
    93 00001F69 [8B1F000000000000]  <1>     dq lpt3Hdr
    94 00001F71 40A0                <1>     dw 0A040h
    95 00001F73 [BD1F000000000000]  <1>     dq nulStrat
    96 00001F7B [C31F000000000000]  <1>     dq nulIntr
    97 00001F83 4C50543220202020    <1>     db "LPT2    "
    98                              <1> lpt3Hdr:
    99 00001F8B FFFFFFFFFFFFFFFF    <1>     dq -1
   100 00001F93 40A0                <1>     dw 0A040h
   101 00001F95 [BD1F000000000000]  <1>     dq nulStrat
   102 00001F9D [C31F000000000000]  <1>     dq nulIntr
   103 00001FA5 4C50543320202020    <1>     dq "LPT3    "
   104 00001FAD 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    28                                  %include "./Source/Drivers/charDrv.asm"
    29                              <1> commonStrat:
    30                              <1> ;DOS calls this function with rbx=Ptr to request header
    31 00001FB5 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    32 00001FBC C3                  <1>     ret
    33                              <1> nulStrat:
    34 00001FBD 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    35                              <1> nulIntr:
    36 00001FC3 C3                  <1>     ret
    37                              <1> conDriver:
    38 00001FC4 50                  <1>     push rax
    39 00001FC5 53                  <1>     push rbx
    40 00001FC6 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    41 00001FCD B003                <1>     mov al, 03h ;Unknown Command
    42 00001FCF 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    43 00001FD3 7739                <1>     ja .conWriteErrorCode ;If yes, error!
    44                              <1> 
    45 00001FD5 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    46 00001FD8 3C04                <1>     cmp al, 4
    47 00001FDA 7441                <1>     jz .conRead
    48 00001FDC 3C05                <1>     cmp al, 5
    49 00001FDE 0F847F000000        <1>     jz .conNondestructiveRead
    50 00001FE4 3C06                <1>     cmp al, 6
    51 00001FE6 0F84A8000000        <1>     jz .conInputStatus
    52 00001FEC 3C07                <1>     cmp al, 7
    53 00001FEE 0F84B0000000        <1>     jz .conFlushInputBuffers
    54 00001FF4 3C08                <1>     cmp al, 8
    55 00001FF6 0F84CA000000        <1>     jz .conWrite
    56 00001FFC 3C09                <1>     cmp al, 9
    57 00001FFE 0F84C2000000        <1>     jz .conWrite
    58 00002004 3C0A                <1>     cmp al, 0Ah
    59 00002006 0F84E3000000        <1>     jz .conOutputStatus
    60 0000200C EB06                <1>     jmp short .conExit  ;All other valid functions return done
    61                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    62 0000200E B480                <1>     mov ah, 80h ;Set error bit
    63 00002010 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    64                              <1> .conExit:
    65 00002014 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    66 0000201A 5B                  <1>     pop rbx
    67 0000201B 58                  <1>     pop rax
    68 0000201C C3                  <1>     ret
    69                              <1> .conRead:    ;Function 4
    70 0000201D B005                <1>     mov al, 05h ;Bad request structure length?
    71 0000201F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    72 00002022 75EA                <1>     jne .conWriteErrorCode
    73                              <1> 
    74 00002024 57                  <1>     push rdi
    75 00002025 51                  <1>     push rcx
    76 00002026 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    77 0000202A 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    78                              <1> .cre1:
    79 0000202C 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    80 0000202F 741C                <1>     je .cre2
    81 00002031 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    82 00002038 751A                <1>     jnz .cre3   ;No, get the buffer value
    83 0000203A 31C0                <1>     xor eax, eax
    84 0000203C CD36                <1>     int 36h
    85                              <1> .cre11:
    86 0000203E AA                  <1>     stosb
    87 0000203F 84C0                <1>     test al, al ;Was the ascii code 0?
    88 00002041 7506                <1>     jnz .cre12  ;No, skip storing scancode
    89 00002043 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    90                              <1> .cre12:
    91 00002049 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    92 0000204B EBDF                <1>     jmp short .cre1
    93                              <1> .cre2:
    94 0000204D 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    95 00002050 59                  <1>     pop rcx
    96 00002051 5F                  <1>     pop rdi
    97 00002052 EBC0                <1>     jmp short .conExit
    98                              <1> .cre3:
    99 00002054 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   100 0000205A C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   101 00002061 EBDB                <1>     jmp short .cre11
   102                              <1> 
   103                              <1> .conNondestructiveRead:  ;Function 5
   104 00002063 B005                <1>     mov al, 05h ;Bad request structure length?
   105 00002065 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   106 00002068 75A4                <1>     jne .conWriteErrorCode
   107 0000206A 803D8E00000000      <1>     cmp byte [.conBuf], 0
   108 00002071 7519                <1>     jnz .cnr2
   109 00002073 B401                <1>     mov ah, 01h     ;Get key if exists
   110 00002075 CD36                <1>     int 36h
   111 00002077 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   112                              <1>     ;Keystroke available
   113                              <1> .cnr0:
   114 00002079 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   115 0000207C E993FFFFFF          <1>     jmp .conExit
   116                              <1> .cnr1: ;No keystroke available
   117 00002081 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   118 00002087 E988FFFFFF          <1>     jmp .conExit
   119                              <1> .cnr2:
   120 0000208C 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   121 00002092 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   122                              <1> 
   123                              <1> .conInputStatus:         ;Function 6
   124 00002094 B005                <1>     mov al, 05h ;Bad request structure length?
   125 00002096 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   126 00002099 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   127 0000209F E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   128                              <1> 
   129                              <1> .conFlushInputBuffers:   ;Function 7
   130 000020A4 B005                <1>     mov al, 05h ;Bad request structure length?
   131 000020A6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   132 000020A9 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   133 000020AF C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   134                              <1> .cfib0:
   135 000020B6 B401                <1>     mov ah, 01      ;Get buffer status
   136 000020B8 CD36                <1>     int 36h
   137 000020BA 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   138 000020C0 30E4                <1>     xor ah, ah
   139 000020C2 CD36                <1>     int 36h ;Read key to flush from buffer
   140 000020C4 EBF0                <1>     jmp short .cfib0
   141                              <1> 
   142                              <1> .conWrite:   ;Function 8 and 9
   143 000020C6 B005                <1>     mov al, 05h ;Bad request structure length?
   144 000020C8 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   145 000020CB 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   146                              <1> 
   147 000020D1 56                  <1>     push rsi
   148 000020D2 51                  <1>     push rcx
   149 000020D3 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   150 000020D7 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   151                              <1> .cw1: 
   152 000020D9 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   153 000020DC 7407                <1>     je .cw2
   154 000020DE AC                  <1>     lodsb   ;Get char into al, and inc rsi
   155 000020DF CD49                <1>     int 49h ;Fast print char
   156 000020E1 FFC1                <1>     inc ecx
   157 000020E3 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   158                              <1> .cw2:
   159 000020E5 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   160 000020E8 59                  <1>     pop rcx
   161 000020E9 5E                  <1>     pop rsi
   162 000020EA E925FFFFFF          <1>     jmp .conExit
   163                              <1> .conOutputStatus:   ;Function 0Ah
   164 000020EF B005                <1>     mov al, 05h ;Bad request structure length?
   165 000020F1 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   166 000020F4 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   167 000020FA E915FFFFFF          <1>     jmp .conExit
   168                              <1> 
   169 000020FF 00                  <1> .conBuf db 0    ;Single byte buffer
   170                              <1> clkDriver:
   171 00002100 50                  <1>     push rax
   172 00002101 53                  <1>     push rbx
   173 00002102 51                  <1>     push rcx
   174 00002103 52                  <1>     push rdx
   175 00002104 56                  <1>     push rsi
   176 00002105 55                  <1>     push rbp
   177 00002106 488B1DA0FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   178 0000210D B003                <1>     mov al, 03h ;Unknown Command
   179 0000210F 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   180 00002113 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   181                              <1> 
   182 00002115 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   183 00002118 3C04                <1>     cmp al, 04h
   184 0000211A 7437                <1>     jz .clkRead
   185 0000211C 3C06                <1>     cmp al, 06h
   186 0000211E 0F8494000000        <1>     jz .clkInputStatus
   187 00002124 3C07                <1>     cmp al, 07h
   188 00002126 0F8498000000        <1>     jz .clkFlushInputBuffers
   189 0000212C 3C08                <1>     cmp al, 08h
   190 0000212E 0F84A0000000        <1>     jz .clkWrite
   191 00002134 3C09                <1>     cmp al, 09h
   192 00002136 0F8498000000        <1>     jz .clkWrite
   193 0000213C EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   194                              <1> .clkNotFunctioning:
   195 0000213E B002                <1>     mov al, 02h ;Device not ready error
   196                              <1> .clkWriteErrorCode:
   197 00002140 B480                <1>     mov ah, 80h ;Set error bit
   198 00002142 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   199                              <1> .clkExit:
   200 00002146 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   201 0000214C 5D                  <1>     pop rbp
   202 0000214D 5E                  <1>     pop rsi
   203 0000214E 5A                  <1>     pop rdx
   204 0000214F 59                  <1>     pop rcx
   205 00002150 5B                  <1>     pop rbx
   206 00002151 58                  <1>     pop rax
   207 00002152 C3                  <1>     ret
   208                              <1> 
   209                              <1> .clkRead:           ;Function 4
   210 00002153 B005                <1>     mov al, 05h ;Bad request structure length?
   211 00002155 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   212 00002158 75E6                <1>     jne .clkWriteErrorCode
   213                              <1> 
   214 0000215A 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   215 0000215D 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   216 00002161 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   217 00002168 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   218 0000216C 30E4                <1>     xor ah, ah
   219 0000216E CD3A                <1>     int 3Ah         ;Read the system timer
   220 00002170 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   221 00002172 740D                <1>     jz .clkr1       ;Nope, now just time 
   222 00002174 30E4                <1>     xor ah, ah
   223                              <1>     ;This works as al should keep count of the # of days passed since last read
   224 00002176 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   225 0000217A 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   226                              <1> .clkr1:
   227 00002181 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   228 00002184 0FB7D2              <1>     movzx edx, dx
   229 00002187 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   230 00002189 89D0                <1>     mov eax, edx
   231 0000218B 31D2                <1>     xor edx, edx
   232 0000218D 89D8                <1>     mov eax, ebx
   233 0000218F B944040000          <1>     mov ecx, 1092   
   234 00002194 F7F1                <1>     div ecx
   235 00002196 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   236 00002199 89D0                <1>     mov eax, edx    ;Get remainder in eax
   237 0000219B 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   238 0000219F 31D2                <1>     xor edx, edx
   239 000021A1 B95B000000          <1>     mov ecx, 91 ;5*18.2
   240 000021A6 F7F1                <1>     div ecx
   241 000021A8 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   242 000021AB 89D0                <1>     mov eax, edx    ;Get remainder in eax
   243                              <1>     ;lea eax, dword [eax + 4*eax]
   244                              <1>     ;add eax, edx    ;Essentially multiply by 6
   245 000021AD 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   246 000021B0 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   247 000021B3 E98EFFFFFF          <1>     jmp .clkExit
   248                              <1> 
   249                              <1> .clkInputStatus:    ;Function 6
   250                              <1> ;Always return ready
   251 000021B8 B005                <1>     mov al, 05h ;Bad request structure length?
   252 000021BA 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   253 000021BD 7581                <1>     jne .clkWriteErrorCode
   254 000021BF E982FFFFFF          <1>     jmp .clkExit
   255                              <1> .clkFlushInputBuffers:  ;Function 7
   256                              <1> ;Always return done immediately
   257 000021C4 B005                <1>     mov al, 05h ;Bad request structure length?
   258 000021C6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   259 000021C9 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   260 000021CF E972FFFFFF          <1>     jmp .clkExit
   261                              <1> 
   262                              <1> .clkWrite:          ;Functions 8 and 9
   263 000021D4 B005                <1>     mov al, 05h ;Bad request structure length?
   264 000021D6 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   265 000021D9 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   266                              <1> 
   267 000021DF 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   268 000021E2 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   269 000021E6 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   270 000021EA 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   271                              <1> 
   272 000021F1 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   273 000021F3 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   274 000021F7 B105                <1>     mov cl, 5
   275 000021F9 F6F1                <1>     div cl          ;Divide al by 5
   276 000021FB 30E4                <1>     xor ah, ah      ;Remove the remainder
   277 000021FD 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   278                              <1> ;Using the decimal part of this formula for the low count
   279                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   280 000021FF 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   281 00002202 B912000000          <1>     mov ecx, 18
   282 00002207 F7E1                <1>     mul ecx  
   283 00002209 01C3                <1>     add ebx, eax
   284                              <1> 
   285 0000220B 31D2                <1>     xor edx, edx
   286 0000220D 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   287 00002211 B944040000          <1>     mov ecx, 1092
   288 00002216 F7E1                <1>     mul ecx
   289 00002218 01C3                <1>     add ebx, eax
   290 0000221A 89DA                <1>     mov edx, ebx    ;edx now has low count
   291 0000221C 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   292 00002220 B401                <1>     mov ah, 01h     ;Set the system time
   293 00002222 CD3A                <1>     int 3Ah
   294                              <1> 
   295 00002224 4889F3              <1>     mov rbx, rsi
   296 00002227 E91AFFFFFF          <1>     jmp .clkExit
   297                              <1> 
   298                              <1> .clkBCDtoHex:
   299                              <1> ;Converts a BCD value to a Hex byte
   300                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   301 0000222C 51                  <1>     push rcx
   302 0000222D 0FB6C0              <1>     movzx eax, al   ;Zero extend
   303 00002230 89C1                <1>     mov ecx, eax    ;Save al in ecx
   304 00002232 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   305 00002237 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   306 0000223D C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   307                              <1> .cbth0:
   308 00002240 050A000000          <1>     add eax, 10
   309 00002245 E2F9                <1>     loop .cbth0
   310 00002247 59                  <1>     pop rcx
   311 00002248 C3                  <1>     ret
   312                              <1> 
   313                              <1> .clkHexToBCD:
   314                              <1> ;Converts a Hex byte into two BCD digits
   315                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   316 00002249 51                  <1>     push rcx
   317 0000224A 0FB6C0              <1>     movzx eax, al   ;Zero extend
   318 0000224D 31C9                <1>     xor ecx, ecx
   319                              <1> .chtb0:
   320 0000224F 3D0A000000          <1>     cmp eax, 10
   321 00002254 7209                <1>     jb .chtb1
   322 00002256 2D0A000000          <1>     sub eax, 10
   323 0000225B FFC1                <1>     inc ecx
   324 0000225D EBF0                <1>     jmp short .chtb0
   325                              <1> .chtb1:
   326 0000225F C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   327 00002262 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   328 00002264 59                  <1>     pop rcx
   329 00002265 C3                  <1>     ret
   330 00002266 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   331                              <1> ;When counting the number of days, first compute the number of years since
   332                              <1> ; 1980 and your year. 
   333                              <1> ;Then, using the table below, find the number of leap years between 1980
   334                              <1> ; and (YourYear - 1). 
   335                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   336                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   337                              <1> ;Use the months table to get the number of days in a normal month as leap 
   338                              <1> ; years are added using the previous comment.
   339                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   340                              <1> ; a leap year using the table. If it is, add an extra day.
   341                              <1> .clkLeapYears:
   342 00002268 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   342 00002271 24282C30            <1>
   343 00002275 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   343 0000227E 585C60              <1>
   344                              <1> .clkMonths:
   345 00002281 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   345 0000228A 1F1E1F              <1>
   346                              <1> ;COM Driver headers and main interrupt strat
   347                              <1> com1Intr:
   348 0000228D C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   349 00002294 EB19                <1>     jmp short comIntr
   350                              <1> com2Intr:
   351 00002296 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   352 0000229D EB10                <1>     jmp short comIntr
   353                              <1> com3Intr:
   354 0000229F C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   355 000022A6 EB07                <1>     jmp short comIntr
   356                              <1> com4Intr:
   357 000022A8 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   358                              <1> comIntr:
   359 000022AF 50                  <1>     push rax
   360 000022B0 53                  <1>     push rbx
   361 000022B1 51                  <1>     push rcx
   362 000022B2 52                  <1>     push rdx
   363 000022B3 56                  <1>     push rsi
   364 000022B4 57                  <1>     push rdi
   365 000022B5 488B1DF1FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   366 000022BC B003                <1>     mov al, 03h ;Unknown Command
   367 000022BE 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   368 000022C2 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   369                              <1> 
   370 000022C4 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   371 000022C7 3C04                <1>     cmp al, 4   ;Read Character(s)
   372 000022C9 7462                <1>     jz .comRead
   373 000022CB 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   374 000022CD 0F849B000000        <1>     jz .comNondestructiveRead   
   375 000022D3 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   376 000022D5 0F8484000000        <1>     jz .comReadInputStatus
   377 000022DB 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   378 000022DD 0F84B9000000        <1>     jz .comFlushInputBuffers
   379 000022E3 3C08                <1>     cmp al, 8
   380 000022E5 0F84DB000000        <1>     jz .comWrite
   381 000022EB 3C09                <1>     cmp al, 9
   382 000022ED 0F84D3000000        <1>     jz .comWrite
   383 000022F3 3C0A                <1>     cmp al, 0Ah
   384 000022F5 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   385 000022FB EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   386                              <1> .comErrorNoCount:
   387 000022FD B002                <1>     mov al, 02h ;Unknown device
   388 000022FF EB19                <1>     jmp short .comWriteErrorCode
   389                              <1> .comReadError:
   390 00002301 BA0B000000          <1>     mov edx, 0Bh
   391                              <1> .comWriteError:
   392 00002306 BA0A000000          <1>     mov edx, 0Ah
   393                              <1> .comError:
   394 0000230B 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   395 0000230E B902000000          <1>     mov ecx, 02h    ;Unknown device
   396 00002313 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   397 00002315 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   398 00002318 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   399                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   400 0000231A B480                <1>     mov ah, 80h ;Set error bit
   401 0000231C 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   402                              <1> .comExit:
   403 00002320 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   404 00002326 5F                  <1>     pop rdi
   405 00002327 5E                  <1>     pop rsi
   406 00002328 5A                  <1>     pop rdx
   407 00002329 59                  <1>     pop rcx
   408 0000232A 5B                  <1>     pop rbx
   409 0000232B 58                  <1>     pop rax
   410 0000232C C3                  <1>     ret
   411                              <1> 
   412                              <1> .comRead:
   413 0000232D B005                <1>     mov al, 05h ;Bad request structure length?
   414 0000232F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   415 00002332 75E6                <1>     jne .comWriteErrorCode
   416                              <1> 
   417 00002334 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   418 00002338 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   419                              <1> .cr1:
   420 0000233A 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   421 0000233D 741B                <1>     je .cre2
   422                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   423 0000233F B802000000          <1>     mov eax, 02h    ;Recieve 
   424 00002344 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   425 0000234A 6698                <1>     cbw     ;Zero extend to upper byte
   426 0000234C CD34                <1>     int 34h ;Recieve Char
   427 0000234E 72BB                <1>     jc .comError
   428 00002350 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   429 00002353 74EA                <1>     je .cr11
   430 00002355 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   431 00002356 FFC1                <1>     inc ecx
   432 00002358 EBE0                <1>     jmp short .cr1
   433                              <1> .cre2:
   434 0000235A 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   435 0000235D EBC1                <1>     jmp short .comExit
   436                              <1> 
   437                              <1> .comReadInputStatus:
   438 0000235F B005                <1>     mov al, 05h ;Bad request structure length?
   439 00002361 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   440 00002364 75B4                <1>     jne .comWriteErrorCode
   441 00002366 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   442 0000236C EBB2                <1>     jmp short .comExit
   443                              <1> 
   444                              <1> .comNondestructiveRead:
   445                              <1> ;Acts like a "read one character if there is one" function
   446 0000236E B005                <1>     mov al, 05h ;Bad request structure length?
   447 00002370 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   448 00002373 75A5                <1>     jne .comWriteErrorCode
   449                              <1> .cndr1:
   450 00002375 B802000000          <1>     mov eax, 02h    ;Recieve 
   451 0000237A 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   452 00002380 6698                <1>     cbw     ;Zero extend to upper byte
   453 00002382 CD34                <1>     int 34h ;Recieve Char
   454 00002384 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   455 0000238A 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   456 0000238D 7405                <1>     je .cndr2
   457 0000238F 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   458 00002392 EB8C                <1>     jmp short .comExit
   459                              <1> .cndr2:
   460 00002394 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   461 0000239A EB84                <1>     jmp short .comExit
   462                              <1> 
   463                              <1> .comFlushInputBuffers:
   464 0000239C B005                <1>     mov al, 05h ;Bad request structure length?
   465 0000239E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   466 000023A1 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   467                              <1> .cfib0:
   468 000023A7 8A1584000000        <1>     mov dl, byte [.comDevice]
   469 000023AD 6698                <1>     cbw
   470 000023AF B802000000          <1>     mov eax, 02h    ;Recieve
   471 000023B4 CD34                <1>     int 34h
   472 000023B6 0F8241FFFFFF        <1>     jc .comErrorNoCount
   473 000023BC 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   474 000023BF 75E6                <1>     jne .cfib0
   475 000023C1 E95AFFFFFF          <1>     jmp .comExit
   476                              <1> 
   477                              <1> .comWrite:
   478 000023C6 B005                <1>     mov al, 05h ;Bad request structure length?
   479 000023C8 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   480 000023CB 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   481                              <1> 
   482 000023D1 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   483 000023D5 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   484                              <1> .cw1: 
   485 000023D7 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   486 000023DA 7417                <1>     je .cw2
   487 000023DC AC                  <1>     lodsb   ;Get char into al, and inc rsi
   488 000023DD B401                <1>     mov ah, 01h ;Move function number into ah
   489 000023DF 8A154C000000        <1>     mov dl, byte [.comDevice]
   490 000023E5 6698                <1>     cbw     ;Zero extend to upper byte
   491 000023E7 CD34                <1>     int 34h ;Transmit char
   492 000023E9 0F821CFFFFFF        <1>     jc .comError
   493 000023EF FFC1                <1>     inc ecx
   494 000023F1 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   495                              <1> .cw2:
   496 000023F3 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   497 000023F6 E925FFFFFF          <1>     jmp .comExit
   498                              <1> 
   499                              <1> .comOutputStatus:
   500                              <1> ;Read MODEM status
   501 000023FB B005                <1>     mov al, 05h ;Bad request structure length?
   502 000023FD 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   503 00002400 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   504                              <1> 
   505 00002406 8A1525000000        <1>     mov dl, byte [.comDevice]
   506 0000240C 6698                <1>     cbw     ;Zero extend to upper byte
   507 0000240E B403                <1>     mov ah, 03h     ;Get status
   508 00002410 CD34                <1>     int 34h
   509 00002412 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   510 00002418 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   511 0000241D C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   512 00002420 F7D0                <1>     not eax      ;Bitwise inversion
   513 00002422 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   514 00002427 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   515 0000242C E9EFFEFFFF          <1>     jmp .comExit
   516 00002431 00                  <1> .comDevice   db 0
    29                                  %include "./Source/Drivers/diskDrv.asm"
    30                              <1> msdDriver:
    31 00002432 50                  <1>     push rax
    32 00002433 53                  <1>     push rbx
    33 00002434 51                  <1>     push rcx
    34 00002435 52                  <1>     push rdx
    35 00002436 56                  <1>     push rsi
    36 00002437 57                  <1>     push rdi
    37 00002438 55                  <1>     push rbp
    38 00002439 4150                <1>     push r8
    39 0000243B 488B1D6BFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    40 00002442 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    41 00002446 B003                <1>     mov al, drvBadCmd
    42 00002448 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    43 0000244E B001                <1>     mov al, drvBadUnit 
    44 00002450 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    45 00002454 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    46 0000245A 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    47 00002461 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    48 00002465 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    49 00002468 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    50 0000246C 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    51 00002470 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    52 00002472 488D0D9A000000      <1>     lea rcx, .msdTable
    53 00002479 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    54 0000247D 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    55 0000247F 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    56 00002481 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    57 00002484 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    58                              <1> .msdDriverExit:
    59 00002486 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    60 0000248C 4158                <1>     pop r8
    61 0000248E 5D                  <1>     pop rbp
    62 0000248F 5F                  <1>     pop rdi
    63 00002490 5E                  <1>     pop rsi
    64 00002491 5A                  <1>     pop rdx
    65 00002492 59                  <1>     pop rcx
    66 00002493 5B                  <1>     pop rbx
    67 00002494 58                  <1>     pop rax
    68 00002495 C3                  <1>     ret
    69                              <1> 
    70                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    71 00002496 4889FB              <1>     mov rbx, rdi
    72 00002499 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    73 0000249C 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    74 0000249E 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    75                              <1> ;Now fall through to general error
    76                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    77 000024A1 B401                <1>     mov ah, 01h
    78 000024A3 CD33                <1>     int 33h ;Read status of last operation
    79 000024A5 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    80 000024A8 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    81 000024AA 7460                <1>     je .msdWriteErrorCode 
    82 000024AC B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    83 000024AE 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    84 000024B1 7459                <1>     je .msdWriteErrorCode 
    85 000024B3 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    86 000024B6 7454                <1>     je .msdWriteErrorCode
    87                              <1> ;Device Not Ready
    88 000024B8 B002                <1>     mov al, 02h  ;Device not ready code
    89 000024BA 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    90 000024BD 744D                <1>     je .msdWriteErrorCode
    91 000024BF 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    92 000024C3 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    93                              <1> ;Write Protected
    94 000024C7 30C0                <1>     xor al, al
    95 000024C9 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
    96 000024CE 743C                <1>     je .msdWriteErrorCode
    97                              <1> ;CRC Error
    98 000024D0 B004                <1>     mov al, 04h     ;CRC error code
    99 000024D2 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   100 000024D7 7433                <1>     je .msdWriteErrorCode
   101 000024D9 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   102 000024DE 742C                <1>     je .msdWriteErrorCode
   103 000024E0 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   104 000024E5 7425                <1>     je .msdWriteErrorCode
   105                              <1> ;Seek Error
   106 000024E7 B006                <1>     mov al, 06h     ;Seek error code
   107 000024E9 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   108 000024EC 741E                <1>     je .msdWriteErrorCode
   109                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   110                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   111 000024EE B007                <1>     mov al, 07h
   112 000024F0 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   113 000024F3 7417                <1>     je .msdWriteErrorCode
   114                              <1> ;Sector Not Found
   115 000024F5 B008                <1>     mov al, 08h     ;Sector not found code
   116 000024F7 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   117 000024FA 7410                <1>     je .msdWriteErrorCode
   118                              <1> ;Write faults
   119 000024FC B00A                <1>     mov al, 0Ah     ;Write fault
   120 000024FE 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   121 00002501 7409                <1>     je .msdWriteErrorCode
   122                              <1> ;Read faults
   123 00002503 B00B                <1>     mov al, 0Bh     ;Read fault
   124 00002505 80F911              <1>     cmp cl, 11h     ;Read error
   125 00002508 7402                <1>     je .msdWriteErrorCode
   126                              <1> ;General Errors
   127 0000250A B00C                <1>     mov al, 0Ch     ;Everything else is general error
   128                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   129 0000250C B480                <1>     mov ah, 80h ;Set error bit
   130 0000250E 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   131 00002512 C3                  <1>     ret ;Return to set done bit
   132                              <1> .msdTable:
   133 00002513 0000                <1>     dw 0                            ;Function 0
   134 00002515 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   135 00002517 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   136 00002519 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   137 0000251B 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   138 0000251D 0000                <1>     dw 0                            ;Function 5
   139 0000251F 0000                <1>     dw 0                            ;Function 6
   140 00002521 0000                <1>     dw 0                            ;Function 7
   141 00002523 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   142 00002525 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   143 00002527 0000                <1>     dw 0                            ;Function 10
   144 00002529 0000                <1>     dw 0                            ;Function 11
   145 0000252B C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   146 0000252D D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   147 0000252F ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   148 00002531 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   149 00002533 0000                <1>     dw 0                            ;Function 16
   150 00002535 0000                <1>     dw 0                            ;Function 17
   151 00002537 0000                <1>     dw 0                            ;Function 18
   152 00002539 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   153 0000253B 0000                <1>     dw 0                            ;Function 20
   154 0000253D 0000                <1>     dw 0                            ;Function 21
   155 0000253F 0000                <1>     dw 0                            ;Function 22
   156 00002541 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   157 00002543 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   158                              <1> 
   159                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   160                              <1> .msdMedChk:          ;Function 1
   161 00002545 B005                <1>     mov al, 05h ;Bad request structure length
   162 00002547 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   163 0000254A 75C0                <1>     jne .msdWriteErrorCode
   164                              <1> 
   165 0000254C 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   166 00002551 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   167 00002558 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   168 0000255B F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   169 0000255E 753F                <1>     jnz .mmcNoChange
   170                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   171 00002560 B416                <1>     mov ah, 16h 
   172 00002562 CD33                <1>     int 33h
   173 00002564 0F8237FFFFFF        <1>     jc .msdGenDiskError
   174 0000256A 80FC80              <1>     cmp ah, 80h
   175 0000256D 740E                <1>     je .mmcNoChangeLine
   176 0000256F 80FC86              <1>     cmp ah, 86h
   177 00002572 7409                <1>     je .mmcNoChangeLine
   178 00002574 84E4                <1>     test ah, ah ;No change?
   179 00002576 7427                <1>     jz .mmcNoChange
   180 00002578 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   181 0000257B 750D                <1>     jnz .mmcChange
   182                              <1> ;If nothing, fall through and test manually, should never happen though
   183                              <1> .mmcNoChangeLine:
   184                              <1> ;Now we test Media Descriptor
   185 0000257D 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   186 00002582 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   187 00002585 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   188 00002588 7410                <1>     je .mmcUnsure
   189                              <1> .mmcChange:
   190 0000258A C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   191 0000258E 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   192 00002595 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   193                              <1>     ;Check here if there were any open handles on the device when it was changed
   194 00002599 C3                  <1>     ret
   195                              <1> .mmcUnsure:
   196 0000259A C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   197 0000259E C3                  <1>     ret
   198                              <1> .mmcNoChange:
   199 0000259F C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   200 000025A3 C3                  <1>     ret
   201                              <1> 
   202                              <1> 
   203                              <1> .msdBuildBPB:        ;Function 2
   204 000025A4 B005                <1>     mov al, 05h ;Bad request structure length
   205 000025A6 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   206 000025A9 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   207                              <1> 
   208 000025AF 4889DE              <1>     mov rsi, rbx
   209 000025B2 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   210 000025B7 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   211 000025BE 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   212 000025C1 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   213 000025C5 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   214 000025C7 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   215 000025CA B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   216 000025CF CD33                <1>     int 33h
   217 000025D1 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   218                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   219 000025D7 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   220 000025DB 7418                <1>     je .mbbpb0
   221 000025DD 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   222 000025E1 7412                <1>     je .mbbpb0
   223 000025E3 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   224 000025E7 740C                <1>     je .mbbpb0
   225 000025E9 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   226 000025ED B007                <1>     mov al, 07h ;Unknown media error code
   227 000025EF 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   228                              <1> .mbbpb0:
   229 000025F5 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   230 000025F8 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   231 000025FD 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   232 00002604 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   233 00002608 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   234 0000260B 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   235 0000260F B90F000000          <1>     mov ecx, bpbEx_size/8
   236 00002614 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   237 00002617 C3                  <1>     ret
   238                              <1> .msdIOCTLRead:       ;Function 3, returns done
   239 00002618 B005                <1>     mov al, drvBadDrvReq
   240 0000261A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   241 0000261D 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   242 00002623 C3                  <1>     ret
   243                              <1> .msdRead:            ;Function 4
   244                              <1> ;Will read one sector at a time.
   245 00002624 B005                <1>     mov al, 05h ;Bad request structure length
   246 00002626 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   247 00002629 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   248                              <1> 
   249 0000262F 4889DF              <1>     mov rdi, rbx
   250 00002632 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   251                              <1> .msdr0:
   252 00002634 B682                <1>     mov dh, 82h ;LBA Read Sectors
   253 00002636 E841010000          <1>     call .msdBlkIOCommon
   254 0000263B 0F8255FEFFFF        <1>     jc .msdIOError
   255 00002641 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   256 00002649 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   257 00002651 FFC6                <1>     inc esi
   258 00002653 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   259 00002656 75DC                <1>     jne .msdr0
   260 00002658 4889FB              <1>     mov rbx, rdi
   261 0000265B C3                  <1>     ret
   262                              <1> .msdWrite:           ;Function 8
   263                              <1> ;Will write one sector at a time.
   264 0000265C B005                <1>     mov al, 05h ;Bad request structure length
   265 0000265E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   266 00002661 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   267                              <1> 
   268 00002667 4889DF              <1>     mov rdi, rbx
   269 0000266A 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   270                              <1> .msdw0:
   271 0000266C B683                <1>     mov dh, 83h ;LBA Write Sectors
   272 0000266E E809010000          <1>     call .msdBlkIOCommon
   273 00002673 0F821DFEFFFF        <1>     jc .msdIOError
   274 00002679 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   275 00002681 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   276 00002689 FFC6                <1>     inc esi
   277 0000268B 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   278 0000268E 75DC                <1>     jne .msdw0
   279 00002690 4889FB              <1>     mov rbx, rdi
   280 00002693 C3                  <1>     ret
   281                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   282                              <1> ;Will write one sector at a time and then verify it.
   283 00002694 B005                <1>     mov al, 05h ;Bad request structure length
   284 00002696 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   285 00002699 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   286                              <1> 
   287 0000269F 4889DF              <1>     mov rdi, rbx
   288 000026A2 31F6                <1>     xor esi, esi  ;Set counter to zero
   289                              <1> .msdwv0:
   290 000026A4 B683                <1>     mov dh, 83h ;LBA Write Sectors
   291 000026A6 E8D1000000          <1>     call .msdBlkIOCommon
   292 000026AB 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   293 000026B1 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   294 000026B3 E8C4000000          <1>     call .msdBlkIOCommon
   295 000026B8 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   296 000026BE 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   297 000026C6 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   298 000026CE FFC6                <1>     inc esi
   299 000026D0 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   300 000026D3 75CF                <1>     jne .msdwv0
   301 000026D5 4889FB              <1>     mov rbx, rdi
   302 000026D8 C3                  <1>     ret
   303                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   304 000026D9 B005                <1>     mov al, drvBadDrvReq
   305 000026DB 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   306 000026DE 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   307                              <1> 
   308 000026E4 C3                  <1>     ret
   309                              <1> .msdDevOpen:         ;Function 13
   310 000026E5 B005                <1>     mov al, drvBadDrvReq
   311 000026E7 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   312 000026EA 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   313                              <1> 
   314 000026F0 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   315 000026F5 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   316 000026FC FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   317 000026FF C3                  <1>     ret
   318                              <1> .msdDevClose:        ;Function 14
   319 00002700 B005                <1>     mov al, drvBadDrvReq
   320 00002702 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   321 00002705 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   322                              <1> 
   323 0000270B 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   324 00002710 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   325 00002717 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   326 0000271A C3                  <1>     ret
   327                              <1> .msdRemovableMedia:  ;Function 15
   328 0000271B B005                <1>     mov al, drvBadDrvReq
   329 0000271D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   330 00002720 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   331                              <1> 
   332 00002726 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   333 0000272B 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   334 00002732 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   335 00002735 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   336 0000273A 31D2                <1>     xor edx, edx    ;Busy bit clear
   337 0000273C A880                <1>     test al, 80h
   338 0000273E 0F44CA              <1>     cmovz ecx, edx
   339 00002741 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   340 00002745 C3                  <1>     ret
   341                              <1> .msdGenericIOCTL:    ;Function 19
   342 00002746 B005                <1>     mov al, drvBadDrvReq
   343 00002748 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   344 0000274B 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   345                              <1> 
   346 00002751 C3                  <1>     ret
   347                              <1> .msdGetLogicalDev:   ;Function 23
   348 00002752 B005                <1>     mov al, drvBadDrvReq
   349 00002754 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   350 00002757 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   351                              <1> 
   352 0000275D 8A0541000000        <1>     mov al, byte [.msdCurDev]
   353 00002763 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   354 00002766 C3                  <1>     ret
   355                              <1> .msdSetLogicalDev:   ;Function 24
   356 00002767 B005                <1>     mov al, drvBadDrvReq
   357 00002769 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   358 0000276C 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   359                              <1> 
   360 00002772 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   361 00002775 880529000000        <1>     mov byte [.msdCurDev], al
   362 0000277B C3                  <1>     ret
   363                              <1> 
   364                              <1> .msdBlkIOCommon:  ;Does block IO
   365                              <1> ;Called with rdi containing old rbx value and ah with function number
   366                              <1> ;rbp points to bpb
   367                              <1> ;Error handled by caller
   368                              <1> ;Sector count handled by caller
   369                              <1> ;Called with dh = BIOS function number
   370 0000277C 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   371 00002781 8A90[A5270000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   372 00002787 31C9                <1>     xor ecx, ecx
   373 00002789 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   374 0000278C 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   375 00002790 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   376 00002794 88F4                <1>     mov ah, dh
   377 00002796 B001                <1>     mov al, 01h ;Do one sector at a time 
   378 00002798 CD33                <1>     int 33h
   379 0000279A C3                  <1>     ret
   380                              <1> 
   381 0000279B 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   382                              <1> ;LASTDRIVE default is 5
   383                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   384                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   385 000027A4 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   386                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   387 000027A5 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   388 000027AA 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   389 000027AF 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   389 000027B8 000000000000000000- <1>
   389 000027C1 000000000000000000- <1>
   389 000027CA 000000000000000000- <1>
   389 000027D3 00000000            <1>
   390 000027D7 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   390 000027E0 000000000000000000- <1>
   390 000027E9 000000000000000000- <1>
   390 000027F2 000000000000000000- <1>
   390 000027FB 000000000000000000- <1>
   390 00002804 000000000000000000- <1>
   390 0000280D 000000000000000000- <1>
   390 00002816 000000000000000000- <1>
   390 0000281F 000000000000000000- <1>
   390 00002828 000000000000000000- <1>
   390 00002831 000000000000000000- <1>
   390 0000283A 000000000000000000- <1>
   390 00002843 000000000000000000- <1>
   390 0000284C 000000000000000000- <1>
   390 00002855 000000000000000000- <1>
   390 0000285E 000000000000000000- <1>
   390 00002867 000000000000000000- <1>
   390 00002870 000000000000000000- <1>
   390 00002879 000000000000000000- <1>
   390 00002882 000000000000000000- <1>
   390 0000288B 000000000000000000- <1>
   390 00002894 000000000000000000- <1>
   390 0000289D 000000000000000000- <1>
   390 000028A6 000000000000000000- <1>
   390 000028AF 000000000000000000- <1>
   390 000028B8 000000000000000000- <1>
   390 000028C1 000000000000000000- <1>
   390 000028CA 000000000000000000- <1>
   390 000028D3 000000000000000000- <1>
   390 000028DC 000000000000000000- <1>
   390 000028E5 000000000000000000- <1>
   390 000028EE 000000000000000000- <1>
   390 000028F7 000000000000000000- <1>
   390 00002900 000000000000000000- <1>
   390 00002909 000000000000000000- <1>
   390 00002912 000000000000000000- <1>
   390 0000291B 000000000000000000- <1>
   390 00002924 000000000000000000- <1>
   390 0000292D 000000000000000000- <1>
   390 00002936 000000000000000000- <1>
   390 0000293F 000000000000000000- <1>
   390 00002948 000000000000000000- <1>
   390 00002951 000000000000000000- <1>
   390 0000295A 000000000000000000- <1>
   390 00002963 000000000000000000- <1>
   390 0000296C 000000000000000000- <1>
   390 00002975 000000000000000000- <1>
   390 0000297E 000000000000000000- <1>
   390 00002987 000000000000000000- <1>
   390 00002990 000000000000000000- <1>
   390 00002999 000000000000000000- <1>
   390 000029A2 000000000000000000- <1>
   390 000029AB 000000000000000000- <1>
   390 000029B4 000000000000000000- <1>
   390 000029BD 000000000000000000- <1>
   390 000029C6 000000000000000000- <1>
   390 000029CF 000000000000000000- <1>
   390 000029D8 000000000000000000- <1>
   390 000029E1 000000000000000000- <1>
   390 000029EA 000000000000000000- <1>
   390 000029F3 000000000000000000- <1>
   390 000029FC 000000000000000000- <1>
   390 00002A05 000000000000000000- <1>
   390 00002A0E 000000000000000000- <1>
   390 00002A17 000000000000000000- <1>
   390 00002A20 000000000000000000- <1>
   390 00002A29 000000000000        <1>
   391                              <1> 
   392                              <1> endptr equ $
    30                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    31                                  ;Paragraph alignment
    32                                  %include "./Source/BSS/dosDynaDataArea.asm"
    33                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    34                              <1> ; the MCB chain!
    35 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    36                              <1> 
    37                              <1> ;Create SFT header and corresponding array of five default sft entries
    38 00000010 <res Ah>            <1> firstSftHeader  resb sfth_size
    39 0000001A <res 3Dh>           <1> firstSft        resb sft_size
    40 00000057 <res 3Dh>           <1> secondSft       resb sft_size
    41 00000094 <res 3Dh>           <1> thirdSft        resb sft_size
    42 000000D1 <res 3Dh>           <1> fourthSft       resb sft_size
    43 0000010E <res 3Dh>           <1> fifthSft        resb sft_size
    44                              <1> 
    45                              <1> ;Create DPB chain of first 5 available DPB slots
    46                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    47 0000014B <res 34h>           <1> firstDPB        resb dpb_size
    48 0000017F <res 34h>           <1> secondDPB       resb dpb_size
    49                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    50                              <1> ;Always jettison this space
    51 000001B3 <res 34h>           <1> thirdDPB        resb dpb_size
    52 000001E7 <res 34h>           <1> fourthDPB       resb dpb_size
    53 0000021B <res 34h>           <1> fifthDPB        resb dpb_size 
    54                              <1> 
    55                              <1> ;Create a one drive CDS to keep track of drive A's current dir
    56                              <1> ;Replace once CONFGI.SYS has been read
    57 0000024F <res 5Bh>           <1> initCDS         resb cds_size 
    58                              <1> 
    59                              <1> 
    60 000002AA <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    61 000002CA <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    62                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    63                              <1> dynamicDataAreaLength equ $
