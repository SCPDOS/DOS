     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    13 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    14                              <1> 
    15                              <1> endstruc
    16                              <1> 
    17                              <1> ;Command Code equates
    18                              <1>     drvINIT         equ 0
    19                              <1>     drvMEDCHK       equ 1
    20                              <1>     drvBUILDBPB     equ 2
    21                              <1>     drvIOCTLREAD    equ 3
    22                              <1>     drvREAD         equ 4
    23                              <1>     drvNONDESTREAD  equ 5
    24                              <1>     drvINSTATUS     equ 6
    25                              <1>     drvFLUSHINBUF   equ 7
    26                              <1>     drvWRITE        equ 8
    27                              <1>     drvWRITEVERIFY  equ 9
    28                              <1>     drvOUTSTATUS    equ 10
    29                              <1>     drvFLUSHOUTBUF  equ 11
    30                              <1>     drvIOCTLWRITE   equ 12
    31                              <1>     drvOPEN         equ 13
    32                              <1>     drvCLOSE        equ 14
    33                              <1>     drvREMMEDCHECK  equ 15
    34                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    35                              <1>     drvIOCTL        equ 19
    36                              <1>     drvGETDRVMAP    equ 23
    37                              <1>     drvSETDRVMAP    equ 24
    38                              <1>     
    39                              <1> ;Driver Error equates 
    40                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    41                              <1>     drvBadUnit      equ 1   ;Unknown unit
    42                              <1>     drvNotReady     equ 2   ;Device not ready
    43                              <1>     drvBadCmd       equ 3   ;Unknown command
    44                              <1>     drvCRCErr       equ 4   ;CRC Error
    45                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    46                              <1>     drvBadSeek      equ 6   ;Seek error
    47                              <1>     drvBadMed       equ 7   ;Unknown media
    48                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    49                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    50                              <1>     drvWriteFault   equ 10  ;Write Fault
    51                              <1>     drvReadFault    equ 11  ;Read Fault
    52                              <1>     drvGenFault     equ 12  ;General Fault
    53                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    54                              <1> 
    55                              <1> ;Driver status word status bit meanings
    56                              <1>     drvErrStatus    equ 8000h  
    57                              <1>     drvDonStatus    equ 0100h
    58                              <1>     drvBsyStatus    equ 0200h
    59                              <1> 
    60                              <1> ;Driver Attribute Word bit meanings
    61                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    62                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    63                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    64                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    65                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    66                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    67                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    68                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    69                              <1>     devDrvChar     equ 8000h ;If set, Char device
    70                              <1> ;Bit 0 1=console input
    71                              <1> ;    1 1=console output (character devices)
    72                              <1> ;    2 1=NUL device
    73                              <1> ;    3 1=CLOCK device
    74                              <1> ;    4 1=INT 49 output (CON)
    75                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    76                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    77                              <1> ;   11 1=open/close/removable media supported (3.0+)
    78                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    79                              <1> ;      1=media descriptor in FAT required (block devices)
    80                              <1> ;   14 1=IOCTL supported
    81                              <1> ;   15 0=block device
    82                              <1> ;      1=character device
    83                              <1> 
    84                              <1> ;Driver structures
    85                              <1> 
    86                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    87                              <1> 
    88                              <1>     .hdrlen resb 1  ;Length of the request header
    89                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    90                              <1>     .cmdcde resb 1  ;Command code
    91                              <1>     .status resw 1  ;Status word
    92                              <1>     .devptr resq 1  ;Device queue pointer field
    93                              <1> 
    94                              <1> %endmacro
    95                              <1> 
    96                              <1> struc drvReqHdr
    97                              <1>     drvReqHdrM
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
    98                              <1> endstruc
    99                              <1> 
   100                              <1> struc initReqPkt  ;Init Request Packet
   101                              <1> 
   102                              <1>     drvReqHdrM   ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   103 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   104 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   105 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   106 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   107                              <1> 
   108                              <1> endstruc
   109                              <1> 
   110                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   111                              <1> 
   112                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   113 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   114 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   115 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   116                              <1> 
   117                              <1> endstruc
   118                              <1> 
   119                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   120                              <1> 
   121                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   122 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   123 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   124 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   125                              <1> 
   126                              <1> endstruc
   127                              <1> 
   128                              <1> struc ioReqPkt   ;IO Request Packet
   129                              <1> 
   130                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   131 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   132 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   133 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   134 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   135 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   136                              <1> 
   137                              <1> endstruc
   138                              <1> 
   139                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   140                              <1>     
   141                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   142 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   143                              <1> 
   144                              <1> endstruc
   145                              <1> 
   146                              <1> struc statusReqPkt   ;Status Request Packet
   147                              <1> 
   148                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   149                              <1> 
   150                              <1> endstruc
   151                              <1> 
   152                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   153                              <1> 
   154                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   155                              <1>      
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc openReqPkt ;Open Device Request Packet
   159                              <1> 
   160                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   161                              <1>      
   162                              <1> endstruc
   163                              <1> 
   164                              <1> struc closeReqPkt ;Close Device Request Packet
   165                              <1> 
   166                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   167                              <1>      
   168                              <1> endstruc
   169                              <1> 
   170                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   171                              <1> 
   172                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   173                              <1>      
   174                              <1> endstruc
   175                              <1> 
   176                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   177                              <1> 
   178                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   179 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   180 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   181 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   182 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   183 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   184                              <1> 
   185                              <1> endstruc
   186                              <1> 
   187                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   188                              <1>     
   189                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   190                              <1> 
   191                              <1> endstruc
   192                              <1> 
   193                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   194                              <1>     
   195                              <1>     drvReqHdrM    ;Common Driver Header Macro
    87                              <2> 
    88 00000000 ??                  <2>  .hdrlen resb 1
    89 00000001 ??                  <2>  .unitnm resb 1
    90 00000002 ??                  <2>  .cmdcde resb 1
    91 00000003 ????                <2>  .status resw 1
    92 00000005 ????????????????    <2>  .devptr resq 1
    93                              <2> 
   196                              <1> 
   197                              <1> endstruc
   198                              <1> 
   199                              <1> 
   200                              <1> struc genioctlGetParamsTable
   201 00000000 ??                  <1>     .size           resb 1
   202 00000001 ??????????????      <1>     .res            resb 7
   203 00000008 ????????????????    <1>     .sectorSize     resb 8  ;Only the lower dword is valid here
   204 00000010 ????????????????    <1>     .numSectors     resb 8
   205                              <1> endstruc
   206                              <1> 
   207                              <1> ;THE WRITE STRUCT MUST BE A STRICT SUPERSET OF THE FORMAT STRUCT ALWAYS
   208                              <1> struc genioctlLBAformat
   209 00000000 ??                  <1>     .size           resb 1
   210 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to format
   211 00000002 ????????????        <1>     .res            resb 6
   212 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start format at
   213                              <1> endstruc
   214                              <1> 
   215                              <1> struc genioctlLBAwrite
   216 00000000 ??                  <1>     .size           resb 1
   217 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to write
   218 00000002 ????????????        <1>     .res            resb 6
   219 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start write at
   220 00000010 ????????????????    <1>     .xferBuffer     resb 8  ;Transfer buffer for data
   221                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    19                              <1> 
    20 00000000 ??????              <1>     .jmpBoot    resb 3 
    21 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    22 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    23 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    24 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    25 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    26 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    27 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    28 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    29 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    30 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    31 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    32 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    33 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    34                              <1> 
    35 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    36 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    37 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    38 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    39 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    40 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    41                              <1> 
    42                              <1> endstruc
    43                              <1> 
    44                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    45                              <1> 
    46 00000000 ??????              <1>     .jmpBoot    resb 3
    47 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    48 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    49 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    50 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    51 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    52 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    53 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    54 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    55 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    56 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    57 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    58 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    59 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    60                              <1> 
    61 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    62 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    63 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    64 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    65 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    66 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    67 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    68                              <1> 
    69 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    70 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    71 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    72 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    73 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    74 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    75                              <1> 
    76                              <1> endstruc
    77                              <1> 
    78                              <1> struc mbr
    79 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    80 000001B8 ????????            <1>     .diskID     resb 4
    81 000001BC ????                <1>     .reserved   resb 2
    82 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    83 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    84 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    85 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    86 000001FE ????                <1>     .mbrSig     resb 2
    87                              <1> endstruc
    88                              <1> 
    89                              <1> struc mbrEntry
    90 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    91 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    92 00000004 ??                  <1>     .ptnType    resb 1  ;This being 00 means free
    93 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    94 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    95 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    96                              <1> endstruc
    97                              <1> 
    98                              <1> struc ebr
    99 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   100 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   101 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   102 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   103 000001FE ????                <1>     .mbrSig     resb 2
   104                              <1> endstruc
   105                              <1> 
   106                              <1> 
   107                              <1> struc fatDirEntry
   108                              <1> 
   109 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   110 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   111 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   112 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   113 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   114 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   115 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   116 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   117 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   118 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   119 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   120 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   121                              <1> 
   122                              <1> endstruc
   123                              <1> ;Directory attribute equates
   124                              <1>     dirReadOnly     equ 01h
   125                              <1>     dirHidden       equ 02h
   126                              <1>     dirSystem       equ 04h
   127                              <1>     dirVolumeID     equ 08h
   128                              <1>     dirDirectory    equ 10h
   129                              <1>     dirArchive      equ 20h
   130                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   131                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   132                              <1>     ;If any of the three bits are set, then ALL three bits are set
   133                              <1>     ; in addition to whatever the user passed to search for.
   134                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   135                              <1>     dirIncFiles     equ dirHidden | dirSystem
   136                              <1> 
   137                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   138                              <1> 
   139 00000000 ??????              <1>     .jmpBoot                resb 3 
   140 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   141 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   142 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   143 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   144 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   145 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   146 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   147 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   148 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   149 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   150 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   151 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   152 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   153 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   154 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   155 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   156 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   157 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc FSInfo
   162                              <1> 
   163 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   164 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   165 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   166 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   167 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   168 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   169 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   170                              <1> 
   171                              <1> endstruc
   172                              <1> 
   173                              <1> %macro defaultBPB 0
   174                              <1>     db 0E9h
   175                              <1>     db 00h
   176                              <1>     db 90h
   177                              <1>     db 'SCPDOSv1'
   178                              <1>     dw 0200h                       
   179                              <1>     db 01h                         
   180                              <1>     dw 0001h                           
   181                              <1>     db 02h                              
   182                              <1>     dw 00E0h            
   183                              <1>     dw 0B40h   
   184                              <1>     db 0F0h                   
   185                              <1>     dw 0009h                   
   186                              <1>     dw 0012h                     
   187                              <1>     dw 0002h                  
   188                              <1>     dd 0                 
   189                              <1>     dd 0 
   190                              <1>     db 00h
   191                              <1>     db 00h
   192                              <1>     db 29h
   193                              <1>     dd 0
   194                              <1>     db 'NO NAME    '
   195                              <1>     db 'FAT12   '
   196                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   197                              <1> %endmacro
     8                                  %include "./Source/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     9                                  %include "./Source/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    57 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    58                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    59                              <1> ; another, we save the number of chars to skip to that deep level).
    60                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    61                              <1> ; Only affects for SUBST drives, not JOIN
    62                              <1> ; Flags: Bit 15 set = Network drive
    63                              <1> ;        Bit 14 set = Physical drive
    64                              <1> ;        Bit 13 set = JOIN'ed drive
    65                              <1> ;        Bit 12 set = SUBST'ed drive
    66                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    67                              <1> endstruc
    68                              <1> ;CDS equates
    69                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    70                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    71                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    72                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    73                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    74                              <1> ;------------------------------------------------------------------------;
    75                              <1> ; The SFT is a way to allow applications to open file handles to files 
    76                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    77                              <1> ; under the first header, and then a second header will be linked to the 
    78                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    79                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    80                              <1> ; using the FCBS= command. Default FCBS=5.
    81                              <1> ;
    82                              <1> ; A file handle describes the file, and the location within the file that
    83                              <1> ; we are reading. The file handle can be manipulated without the file
    84                              <1> ; being in memory, thus allowing the user to access data without needing 
    85                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    86                              <1> ; accessing devices, by treating them as files with their drivers 
    87                              <1> ; responding and translating the manipulations of the file handle itself.
    88                              <1> ; Neither the driver nor the application should see or use the SFT for
    89                              <1> ; the handle, as it is subject to change (and will change when file 
    90                              <1> ; sharing provisions are included). The DOS will make requests to the 
    91                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    92                              <1> ; track of the information in the SFT entry for that handle. 
    93                              <1> ;
    94                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    95                              <1> ; can point to the same file. It all depends on what the applications 
    96                              <1> ; want to do with the File.
    97                              <1> ;
    98                              <1> ; !!!!IMPORTANT!!!!
    99                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   100                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   101                              <1> ;
   102                              <1> ;Each SFT may look like this:
   103                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   104                              <1> ;            |                |
   105                              <1> ;       wNumFiles*sft    wNumFiles*sft
   106                              <1> ;
   107                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   108                              <1> ; System FCBs.
   109                              <1> ;
   110                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   111                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   112                              <1> ;
   113                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   114                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   115                              <1> ;------------------------------------------------------------------------;
   116                              <1> struc sfth   ;System file table header
   117                              <1> ; This is the SFT header.
   118                              <1> ; This structure comes before the start of the first file in the array/table.
   119 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   120 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   121                              <1> endstruc
   122                              <1> 
   123                              <1> struc sft
   124                              <1> ;This is the file struc itself
   125 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   126 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   127 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   128 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   129 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   130 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   131 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   132 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   133 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   134 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   135 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   136 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   137 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   138 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   139 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   140 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   141 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   142 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   143 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   144                              <1> ;                           0 means no record
   145                              <1> endstruc
   146                              <1> ;Open Mode equates
   147                              <1> ;Access modes   Bits[2:0]
   148                              <1> ReadAccess      equ 0h
   149                              <1> WriteAccess     equ 1h
   150                              <1> RWAccess        equ 2h
   151                              <1> ;Bit 3 reserved 0
   152                              <1> ;Sharing modes  Bits[6:4]
   153                              <1> CompatShare     equ 0h
   154                              <1> denyRWShare     equ 10h
   155                              <1> denyWriteShare  equ 20h
   156                              <1> denyReadShare   equ 30h
   157                              <1> denyNoneShare   equ 40h
   158                              <1> netFCBShare     equ 70h
   159                              <1> noInherit       equ 80h
   160                              <1> ;Bits 8-12 reserved 0
   161                              <1> 
   162                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   163                              <1> ;Buffering on writes
   164                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   165                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   166                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   167                              <1> ;Attribute Byte
   168                              <1> readOnlyFile    equ 1h
   169                              <1> hiddenFile      equ 2h
   170                              <1> systemFile      equ 4h
   171                              <1> volumeLabel     equ 8h
   172                              <1> directoryFile   equ 10h ;Directory entry
   173                              <1> archiveFile     equ 20h
   174                              <1> ;Device Info equates
   175                              <1> ;For a block device, bits [5:0] contain the drive number
   176                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   177                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   178                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   179                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   180                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   181                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   182                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   183                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   184                              <1> devCharDev      equ 80h ;If set, it is a char device!
   185                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   186                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   187                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   188                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   189                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   190                              <1>  
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   214 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   215                              <1>     .dataarea:             ;Points to the start of the data area
   216                              <1> endstruc
   217                              <1> ;Buffer Flag equates
   218                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   219                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   220                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   221                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   222                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   223                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   224                              <1> ;Note! A buffer is marked as referenced only when the application 
   225                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   226                              <1> ;------------------------------------------------------------------------;
   227                              <1> ; Memory control block for each memory arena
   228                              <1> ;------------------------------------------------------------------------;
   229                              <1> struc mcb
   230 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   231 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   232 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   233 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   234                              <1>     .program:
   235                              <1> endstruc
   236                              <1> ;MCB equates
   237                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   238                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   239                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   240                              <1> mcbMarkCtn      equ "M"
   241                              <1> mcbMarkEnd      equ "Z"
   242                              <1> 
   243                              <1> memFirstFit     equ 0   ;First free block goes to application
   244                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   245                              <1> memLastFit      equ 2   ;Last free block goes to application
   246                              <1> 
   247                              <1> ;Owner = Para aligned address => Owning application PSP
   248                              <1> ;...To consider...
   249                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   250                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   251                              <1> ;------------------------------------------------------------------------;
   252                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   253                              <1> ; following order, thus allowing for return values to be placed in the 
   254                              <1> ; registers by accessing the caller register stack frame.
   255                              <1> ;------------------------------------------------------------------------;
   256                              <1> struc callerFrame
   257 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   258 00000008 ????????????????    <1>     .rbx    resq 1    
   259 00000010 ????????????????    <1>     .rcx    resq 1
   260 00000018 ????????????????    <1>     .rdx    resq 1
   261 00000020 ????????????????    <1>     .rsi    resq 1
   262 00000028 ????????????????    <1>     .rdi    resq 1
   263 00000030 ????????????????    <1>     .rbp    resq 1
   264 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   265 00000040 ????????????????    <1>     .r9     resq 1
   266                              <1> ;Pushed by Processor when invoked via Interrupt
   267 00000048 ????????????????    <1>     .rip    resq 1
   268 00000050 ????????????????    <1>     .cs     resq 1
   269 00000058 ????????????????    <1>     .flags  resq 1
   270                              <1> endstruc
   271                              <1> 
   272                              <1> struc dpl
   273                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   274                              <1> ; server calls
   275 00000000 ????????????????    <1>     .rax    resq 1
   276 00000008 ????????????????    <1>     .rbx    resq 1
   277 00000010 ????????????????    <1>     .rcx    resq 1
   278 00000018 ????????????????    <1>     .rdx    resq 1
   279 00000020 ????????????????    <1>     .rsi    resq 1
   280 00000028 ????????????????    <1>     .rdi    resq 1
   281 00000030 ????????????????    <1>     .r8     resq 1
   282 00000038 ????????????????    <1>     .r9     resq 1
   283 00000040 ????????????????    <1>     .align  resq 1
   284 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   285 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   286                              <1> endstruc
   287                              <1> 
   288                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   289 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   290 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   291 00000010 ????????????????    <1>     .newSFTVal      resq 1
   292 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   293 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   294 00000028 ????????????????    <1>     .newLastdrive   resq 1
   295 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   296 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   297 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   298 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   299 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   300 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   301 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   302                              <1> endstruc
   303                              <1> 
   304                              <1> struc filename
   305                              <1> ;8.3 File name struct
   306 00000000 ????????????????    <1>     .fName  resb 8
   307 00000008 ??????              <1>     .fExt   resb 3
   308                              <1> endstruc
   309                              <1> 
   310                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   311 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   312 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   313 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   314 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   315 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   316 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   317 00000016 ????                <1>     .fileTime   resw 1  ;File time
   318 00000018 ????                <1>     .fileDate   resw 1  ;File date
   319 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   320 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   321                              <1> endstruc
   322                              <1> 
   323                              <1> struc psp
   324 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   325 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   326 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   327 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   328 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   329 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   330 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   331 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   332 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   333 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   334 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   335 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   336 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   337 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   338                              <1> ;Extra handle arrays are grouped into a linked list
   339                              <1> ;The below are in the same place as in DOS
   340 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   341 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   342                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   343 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   344 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   345                              <1> endstruc
   346                              <1> 
   347                              <1> struc clkStruc
   348 00000000 ????                <1>     .dateWord   resw 1
   349 00000002 ??                  <1>     .minutes    resb 1
   350 00000003 ??                  <1>     .hours      resb 1
   351 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   352 00000005 ??                  <1>     .seconds    resb 1
   353                              <1> endstruc
   354                              <1> 
   355                              <1> struc countryStruc
   356 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   357                              <1>                         ;0 = month day year hh:mm:ss
   358                              <1>                         ;1 = day month year hh:mm:ss
   359                              <1>                         ;2 = year month day hh:mm:ss
   360 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   361 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   362 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   363 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   364 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   365 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   366                              <1>                         ;0 = Symbol leads, without space
   367                              <1>                         ;1 = Symbol follows, without space
   368                              <1>                         ;2 = Symbol leads, one space
   369                              <1>                         ;3 = Symbol follows, one space
   370                              <1>                         ;4 = Symbol replace decimal separator
   371 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   372 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   373 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   374 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   375 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   376                              <1> endstruc
   377                              <1> 
   378                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   379                              <1> ;for a space of 64Gb
   380                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   381                              <1> dosLowBase  equ 600h    ;Low load address
   382                              <1> 
   383                              <1> ;Critical Error AH bitfield equates
   384                              <1> critRead    equ 0h
   385                              <1> critWrite   equ 1h
   386                              <1> critDOS     equ 0h
   387                              <1> critFAT     equ 2h
   388                              <1> critDir     equ 4h
   389                              <1> critData    equ 6h
   390                              <1> critFailOK  equ 8h
   391                              <1> critRetryOK equ 10h
   392                              <1> critIgnorOK equ 20h
   393                              <1> critCharDev equ 80h
   394                              <1> 
   395                              <1> critIgnore  equ 0
   396                              <1> critRetry   equ 1
   397                              <1> critAbort   equ 2
   398                              <1> critFail    equ 3
   399                              <1> 
   400                              <1> ;MISC ASCII control chars
   401                              <1> NUL equ 00h ;^@         | ASCII Null
   402                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   403                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   404                              <1> BEL equ 07h ;^G         | ASCII Bell
   405                              <1> BSP equ 08h ;^H         | ASCII Backspace
   406                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   407                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   408                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   409                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   410                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   411                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   412                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   413                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   414                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   415                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   416                              <1> SPC equ 20h ;Printable  | ASCII Space
   417                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   418                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   419                              <1> 
   420                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   421                              <1> ;Extended Ascii Codes
   422                              <1> eF1     equ 3Bh ;F1 second byte
   423                              <1> eF2     equ 3Ch ;F2 second byte
   424                              <1> eF3     equ 3Dh ;F3 second byte
   425                              <1> eF4     equ 3Eh ;F4 second byte
   426                              <1> eF5     equ 3Fh ;F5 second byte
   427                              <1> eF6     equ 40h ;F6 second byte
   428                              <1> eF7     equ 41h ;F7 second byte
   429                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   430                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   431                              <1> eIns    equ 52h ;Insert second byte
   432                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   433                              <1> 
   434                              <1> ;Default Configuration for the system
   435                              <1> 
   436                              <1> buffersDefault  equ 30
   437                              <1> filesDefault    equ 20
   438                              <1> fcbsDefault     equ 4
   439                              <1> safeFcbsDeflt   equ 0
   440                              <1> lastDriveDeflt  equ 5   
    10                                  %include "./Source/Debug/debSym.inc"
     1                              <1> ;This file will include the debuging symbols
     2                              <1> 
     3                              <1> %define true 1
     4                              <1> %define false 0
     5                              <1> 
     6                              <1> ;Switch the DEBUG to false in production!
     7                              <1> %define DEBUG false
     8                              <1> %define DPBINFO false
     9                              <1> %define REGS false
    10                              <1> %define ENDSTATUS false
    11                              <1> %define ALLOCTEST false
    12                              <1> 
    13                              <1> 
    14                              <1> ;Use this space as the debug stack
    15                              <1> %define debStackTop 80000h
    11                                  %include "./Source/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on INT 44h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    12                                  %include "./Source/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 41h/4Bh
     3                              <1> 
     4                              <1> ;Int 41h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> 
    11                              <1> struc execFrame
    12 00000000 ????????????????    <1>     .oldRBP     resq 1  
    13 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    14 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    15 00000018 ????????????????    <1>     .wEnvSize   resq 1  ;Size of the environment block
    16 00000020 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000028 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000030 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000038 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000040 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000048 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000050 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000058 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    26                              <1> .pProgEP:   ;Program EP, recycle this qword
    27 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    28 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    29                              <1> .qRelocVal:  ;Used when computing relocations, Rebasing factor
    30                              <1> endstruc
    31                              <1> 
    32                              <1> ;Possible blocks to be pointed to by rbx
    33                              <1> 
    34                              <1> struc execProg 
    35 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    36 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    37 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    38 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    39                              <1> endstruc
    40                              <1> 
    41                              <1> struc loadProg
    42 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    43 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    44 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    45 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    46 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    47 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    48                              <1> endstruc
    49                              <1> 
    50                              <1> struc loadOvly
    51 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    52 00000008 ????????            <1>     .dRelocFct  resd 1  ;Relocation factor for 
    53                              <1> endstruc
    54                              <1> 
    55                              <1> ;----------------------------
    56                              <1> ;   EXE header structures   :
    57                              <1> ;----------------------------
    58                              <1> 
    59                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    60                              <1> dosMagicSignature   equ "MZ"
    61                              <1> dosMagicSignature2  equ "ZM"
    62                              <1> struc imageDosHdr
    63 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    64 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    65 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    66 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    67 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    68 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    69 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    70 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    71 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    72 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    73 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    74 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    75 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    76 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    77 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    78 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    79 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    80 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    81 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    82                              <1> endstruc
    83                              <1> 
    84                              <1> ;Pssobile signatures pointed to by e_lfanew
    85                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    86                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    87                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    88                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    89                              <1> 
    90                              <1> ;COFF File header @ [e_lfanew]
    91                              <1> 
    92                              <1> struc imageFileHeader
    93 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    94 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    95 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    96 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    97 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    98 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
    99 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   100 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   101                              <1> endstruc
   102                              <1> 
   103                              <1> ;The only valid values in the .machineType field
   104                              <1> 
   105                              <1> imageFileMachineUnknown equ 0
   106                              <1> imageFileMachineAMD64   equ 08664h 
   107                              <1> 
   108                              <1> ;Characteristics to check for
   109                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   110                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   111                              <1> 
   112                              <1> ;Optional header, immediately follows COFF header
   113                              <1> 
   114                              <1> struc imageFileOptionalHeader
   115 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   116 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   117 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   118 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   119 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   120 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   121 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   122 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   123 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   124 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   125 00000024 ????????            <1> 	.dFileAlignment             resd 1
   126 00000028 ????                <1> 	.wMajOSVer                  resw 1
   127 0000002A ????                <1> 	.wMinOSVer                  resw 1
   128 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   129 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   130 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   131 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   132 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   133 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   134 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   135 00000040 ????????            <1> 	.dCheckSum                  resd 1
   136 00000044 ????                <1> 	.wSubsystem                 resw 1
   137 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   138 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   139 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   140 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   141 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   142 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   143 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   144                              <1> endstruc
   145                              <1> 
   146                              <1> romMagicNum     equ 0107h
   147                              <1> pe32MagicNum    equ 010Bh
   148                              <1> pe64MagicNum    equ 020Bh
   149                              <1> 
   150                              <1> ;Data directory header structure
   151                              <1> 
   152                              <1> struc imageDataDirectory
   153 00000000 ????????            <1>     .virtualAddress  resd 1
   154 00000004 ????????            <1>     .size    resd 1
   155                              <1> endstruc
   156                              <1> 
   157                              <1> struc baseRelocBlock
   158 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   159 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   160                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   161                              <1> endstruc
   162                              <1> ;Section headers that form the Section Table.
   163                              <1> ;There are wNumberOfSections many entries in this table.
   164                              <1> ;Each entry is one imageSectionHdr
   165                              <1> 
   166                              <1> struc imageSectionHdr       ;size 40 bytes
   167 00000000 ????????????????    <1>     .qName                  resb 8
   168 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   169 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   170 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   171 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   172 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   173 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   174 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   175 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   176 00000024 ????????            <1> 	.dCharacteristics       resd 1
   177                              <1> endstruc
   178                              <1> 
   179                              <1> ;Section Hdr characteristics flags 
   180                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   181                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   182                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    13                                  Segment .text align=1   ;Init code
    14                                  %define currSegVBase 0
    15                                  %include "./Source/Sysinit/sysinit.asm"
     1                              <1> ; We arrive here with the following values in the registers.
     2                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
     3                              <1> ; dx  = Int 33h boot device number
     4                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
     5                              <1> 
     6 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
     7 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
     8 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
     9 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    10 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    11 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    12 0000001A F348A5              <1>     rep movsq   ;Copy over
    13 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    14 00000022 50                  <1>     push rax
    15 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    16                              <1> sysInitldr:
    17                              <1> ;Now the tough part, load DOS to 800
    18 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    19                              <1> .read:
    20 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    21 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    21 00000035 00                  <1>
    22 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    23 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    24 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    25 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    26 0000003F CD33                <1>     int 33h
    27 00000041 7206                <1>     jc .readFail
    28 00000043 6800080000          <1>     push qword 800h
    29 00000048 C3                  <1>     ret   ;No error? Yay, DOS loaded.
    30                              <1> .readFail:
    31 00000049 FFCE                <1>     dec esi
    32 0000004B 75DC                <1>     jnz .read
    33 0000004D 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    34 00000054 B804130000          <1>     mov eax, 1304h
    35 00000059 CD30                <1>     int 30h
    36 0000005B CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    37 0000005D 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    37 00000066 6F6164204572726F72- <1>
    37 0000006F 0A0D00              <1>
    38 00000072 000000000000000000- <1>     db 100h-($-$$) dup 00h ;Fill with nulls  
    38 0000007B 000000000000000000- <1>
    38 00000084 000000000000000000- <1>
    38 0000008D 000000000000000000- <1>
    38 00000096 000000000000000000- <1>
    38 0000009F 000000000000000000- <1>
    38 000000A8 000000000000000000- <1>
    38 000000B1 000000000000000000- <1>
    38 000000BA 000000000000000000- <1>
    38 000000C3 000000000000000000- <1>
    38 000000CC 000000000000000000- <1>
    38 000000D5 000000000000000000- <1>
    38 000000DE 000000000000000000- <1>
    38 000000E7 000000000000000000- <1>
    38 000000F0 000000000000000000- <1>
    38 000000F9 00000000000000      <1>
    39                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    40                              <1>     ;Store space for a static PSP
    41 00000100 000000000000000000- <1>     db 100h dup 00h
    41 00000109 000000000000000000- <1>
    41 00000112 000000000000000000- <1>
    41 0000011B 000000000000000000- <1>
    41 00000124 000000000000000000- <1>
    41 0000012D 000000000000000000- <1>
    41 00000136 000000000000000000- <1>
    41 0000013F 000000000000000000- <1>
    41 00000148 000000000000000000- <1>
    41 00000151 000000000000000000- <1>
    41 0000015A 000000000000000000- <1>
    41 00000163 000000000000000000- <1>
    41 0000016C 000000000000000000- <1>
    41 00000175 000000000000000000- <1>
    41 0000017E 000000000000000000- <1>
    41 00000187 000000000000000000- <1>
    41 00000190 000000000000000000- <1>
    41 00000199 000000000000000000- <1>
    41 000001A2 000000000000000000- <1>
    41 000001AB 000000000000000000- <1>
    41 000001B4 000000000000000000- <1>
    41 000001BD 000000000000000000- <1>
    41 000001C6 000000000000000000- <1>
    41 000001CF 000000000000000000- <1>
    41 000001D8 000000000000000000- <1>
    41 000001E1 000000000000000000- <1>
    41 000001EA 000000000000000000- <1>
    41 000001F3 000000000000000000- <1>
    41 000001FC 00000000            <1>
    42                              <1> ;END OF FIRST SECTOR!!
    43                              <1> ;DOS SYSINIT BEGINS HERE
    44                              <1> ;First move the alignment of the DOSSEG to 4Kb
    45                              <1> initBegin:
    46 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    47 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    48 00000206 0F32                <1>     rdmsr
    49 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    50 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    51 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    52 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    53 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    54 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    55 00000221 89F8                <1>     mov eax, edi
    56 00000223 4889FA              <1>     mov rdx, rdi
    57 00000226 48C1EA20            <1>     shr rdx, 20h
    58 0000022A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    59                              <1> ;------------------------------------------------;
    60                              <1> ;              Connect Debugger                  ;
    61                              <1> ;------------------------------------------------;
    62                              <1> %if DEBUG
    63                              <1> ;Only connect if in debug mode
    64                              <1>     mov eax, 0C501h ;Connect debugger
    65                              <1>     int 35h
    66                              <1> %endif
    67                              <1> ;------------------------------------------------;
    68                              <1> ;           Sanitise the data area               ;
    69                              <1> ;------------------------------------------------;
    70                              <1> ; This call initialises ALL fields in the DOS    ;
    71                              <1> ; data area with 0's. Thus any fields, which     ;
    72                              <1> ; need to be initialised with a 0 value, are     ;
    73                              <1> ; initialised for free.                          ;
    74                              <1> ;------------------------------------------------;
    75 0000022C B9[BCDA0300]        <1>     mov ecx, dSegLen
    76 00000231 30C0                <1>     xor al, al
    77 00000233 57                  <1>     push rdi    ;Temp save rdi on the stack
    78 00000234 F3AA                <1>     rep stosb
    79 00000236 5F                  <1>     pop rdi
    80                              <1> ;------------------------------------------------;
    81                              <1> ;          Start saving Basic DOS data           ;
    82                              <1> ;------------------------------------------------;
    83 00000237 6444883C25-         <1>     mov byte fs:[bootDrive], r15b ;Save the boot drive in memory
    83 0000023C [10C00300]          <1>
    84                              <1> ;Copy DOS to its final resting place
    85 00000240 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    85 00000245 [00C00300]          <1>
    86 00000249 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    86 0000024E [08C00300]          <1>
    87 00000252 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    88 00000255 4881C7[BCDA0300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    89 0000025C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    90 00000263 B900100000          <1>     mov ecx, 1000h
    91 00000268 F348A5              <1>     rep movsq
    92                              <1> 
    93 0000026B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    94 0000026D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    95 00000271 664489C0            <1>     mov ax, r8w
    96 00000275 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
    97 0000027D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    98 00000285 64C60425[7EC00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    98 0000028D 05                  <1>
    99 0000028E 64C60425[A3C00300]- <1>     mov byte fs:[numFiles], 5      ;Default 20 files, at start 5
    99 00000296 05                  <1>
   100 00000297 64C60425[7FC00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
   100 0000029F 01                  <1>
   101 000002A0 6466C70425-         <1>     mov word fs:[shareCount], 3    ;Retry the repeat 3 times before failing
   101 000002A5 [25C00300]0300      <1>
   102 000002AB 6466C70425-         <1>     mov word fs:[shareDelay], 1    ;Go through one multiple of countdown loop
   102 000002B0 [27C00300]0100      <1>
   103                              <1>     ;If no detected Int 33h devices, halt 
   104 000002B6 49C1E810            <1>     shr r8, 2*8
   105 000002BA 4584C0              <1>     test r8b, r8b
   106 000002BD 0F842C100000        <1>     jz errorInit
   107                              <1> ;------------------------------------------------;
   108                              <1> ;          Add additional page tables            ;
   109                              <1> ;------------------------------------------------;
   110                              <1> ;This will allow for up to 64Gb of addressible space
   111 000002C3 4889EF              <1>     mov rdi, rbp
   112                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
   113 000002C6 B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
   114 000002CB 57                  <1>     push rdi
   115 000002CC 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
   115 000002D5 00                  <1>
   116                              <1> pdtLoop:
   117 000002D6 48AB                <1>     stosq
   118 000002D8 480500002000        <1>     add rax, 200000h
   119 000002DE FFC9                <1>     dec ecx
   120 000002E0 75F4                <1>     jnz pdtLoop
   121 000002E2 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   122                              <1> ;Now we add every 4kb page to the page directory pointer table
   123                              <1> ;15 4kb pages to consider
   124 000002E3 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   125 000002E6 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   126 000002E9 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   127 000002F0 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   128 000002F7 B93C000000          <1>     mov ecx, 60
   129 000002FC 480D03000000        <1>     or rax, 3h      ;present and r/w
   130                              <1> pdptLoop:
   131 00000302 48AB                <1>     stosq
   132 00000304 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   133 0000030A FFC9                <1>     dec ecx
   134 0000030C 75F4                <1>     jnz pdptLoop
   135 0000030E 0F20DF              <1>     mov rdi, cr3
   136 00000311 0F22DF              <1>     mov cr3, rdi
   137                              <1> ;------------------------------------------------;
   138                              <1> ;                   MCB inits                    ;
   139                              <1> ;------------------------------------------------;
   140                              <1> mcbInit:
   141 00000314 B820E80000          <1>     mov eax, 0E820h
   142 00000319 CD35                <1>     int 35h
   143                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   144 0000031B E804010000          <1>     call .mcbFindAddress
   145 00000320 7349                <1>     jnc .mcbi1  ;If found, proceed
   146                              <1>     ;Here, we try use E801h
   147 00000322 B801E80000          <1>     mov eax, 0E801h
   148 00000327 CD35                <1>     int 35h
   149 00000329 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   150 0000032C 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   151 0000032F 85C0                <1>     test eax, eax
   152 00000331 741B                <1>     jz .worst
   153 00000333 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   154 00000336 C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   155 00000339 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   156 00000341 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   157 00000349 E909010000          <1>     jmp mcbBuild
   158                              <1> .worst:
   159                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   160 0000034E B800002000          <1>     mov eax, 200000h
   161 00000353 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   161 00000358 [08C00300]          <1>
   162 0000035C 29D8                <1>     sub eax, ebx
   163 0000035E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   164 00000366 E9EC000000          <1>     jmp mcbBuild 
   165                              <1> .mcbi1:
   166 0000036B 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   167 0000036E 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   167 00000377 00                  <1>
   168 00000378 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   169 0000037C 0F85C2000000        <1>     jne .mcbFail
   170 00000382 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   171                              <1>     ;PCI hole always exists so this value will always be a dword
   172 00000386 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   173 0000038E 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   174 00000391 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   175 00000394 4881FB00000001      <1>     cmp rbx, 1000000h  
   176 0000039B 773C                <1>     ja .skipISA
   177                              <1> ;Here we deal with ISA hole issues
   178 0000039D B820E80000          <1>     mov eax, 0E820h
   179 000003A2 CD35                <1>     int 35h
   180 000003A4 48B800000001000000- <1>     mov rax, 1000000h
   180 000003AD 00                  <1>
   181 000003AE E871000000          <1>     call .mcbFindAddress
   182 000003B3 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   183 000003B9 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   183 000003C2 00                  <1>
   184 000003C3 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   185 000003C7 0F858A000000        <1>     jne mcbBuild  
   186 000003CD 488B5808            <1>     mov rbx, qword [rax + 8]
   187 000003D1 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   188                              <1> .skipISA:
   189 000003D9 B820E80000          <1>     mov eax, 0E820h
   190 000003DE CD35                <1>     int 35h
   191 000003E0 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   191 000003E9 00                  <1>
   192 000003EA E835000000          <1>     call .mcbFindAddress
   193 000003EF 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   194 000003F1 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   194 000003FA 00                  <1>
   195 000003FB 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   196 000003FF 7556                <1>     jne mcbBuild   
   197 00000401 488B5808            <1>     mov rbx, qword [rax + 8]
   198                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   199 00000405 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   199 0000040E 00                  <1>
   200 0000040F 4839CB              <1>     cmp rbx, rcx
   201 00000412 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   202 00000416 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   202 0000041B [1BC00300]          <1>
   203 0000041F E933000000          <1>     jmp mcbBuild
   204                              <1> .mcbFindAddress:
   205                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   206                              <1> ;Entry: rax = Address of arena to search for
   207                              <1> ;       rsi = Pointer to memory map
   208                              <1> ;       ecx = Number of 24 byte entries
   209                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   210                              <1> ;       CF=CY : value in rax not found
   211 00000424 56                  <1>     push rsi
   212 00000425 51                  <1>     push rcx
   213 00000426 50                  <1>     push rax
   214                              <1> .mfa0:
   215 00000427 483B06              <1>     cmp rax, qword [rsi]
   216 0000042A 7410                <1>     je .mcbAddressFound
   217 0000042C 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   218 00000433 FFC9                <1>     dec ecx
   219 00000435 79F0                <1>     jns .mfa0
   220                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   221 00000437 58                  <1>     pop rax
   222 00000438 59                  <1>     pop rcx
   223 00000439 5E                  <1>     pop rsi
   224 0000043A F9                  <1>     stc
   225 0000043B C3                  <1>     ret
   226                              <1> .mcbAddressFound:
   227 0000043C 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   228 0000043F 59                  <1>     pop rcx ;Pop old rax value off
   229 00000440 59                  <1>     pop rcx
   230 00000441 5E                  <1>     pop rsi
   231 00000442 F8                  <1>     clc
   232 00000443 C3                  <1>     ret
   233                              <1> .mcbFail:
   234 00000444 488D2DDA0E0000      <1>     lea rbp, mcbFailmsg
   235 0000044B B804130000          <1>     mov eax, 1304h
   236 00000450 CD30                <1>     int 30h
   237 00000452 E9980E0000          <1>     jmp errorInit
   238                              <1> 
   239                              <1> mcbBuild:
   240                              <1> ;Actually build the MCB chain here
   241                              <1> ;Start by computing the difference between userbase and DOS area
   242                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   243 00000457 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   243 0000045C [08C00300]          <1>
   244 00000460 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   245 00000467 56                  <1>     push rsi    ;Save ptr
   246 00000468 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   247 0000046F 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   248 00000472 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   249 0000047A 5B                  <1>     pop rbx
   250 0000047B C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   251 0000047E 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   252 00000486 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   253 0000048E C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   254 00000491 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   255 00000494 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   255 00000499 [39C00300]          <1>
   256                              <1> 
   257                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   258 0000049D 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   258 000004A5 00000000            <1>
   259 000004A9 746E                <1>     jz .skipISA
   260                              <1>     ;Here if an ISA hole exists, place a MCB around it
   261 000004AB 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   262                              <1>     ;Remove one MCB worth of space from alloc
   263 000004B2 31C9                <1>     xor ecx, ecx
   264 000004B4 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   265 000004B7 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   266 000004BD C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   267 000004C0 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   268 000004C3 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   269 000004C6 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   270 000004C9 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   271 000004D1 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   271 000004DA 00                  <1>
   272 000004DB 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   273 000004DE 480510000000        <1>     add rax, mcb_size
   274 000004E4 4829C1              <1>     sub rcx, rax    ;Take their difference
   275 000004E7 C1E904              <1>     shr ecx, 4
   276 000004EA 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   277 000004ED C1E104              <1>     shl ecx, 4  ;Get bytes again
   278 000004F0 4881C310000000      <1>     add rbx, mcb_size
   279 000004F7 4801CB              <1>     add rbx, rcx
   280                              <1>     ;RBX should now be at 16Mb
   281 000004FA C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   282 000004FD 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   283 00000505 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   284 0000050D C1E904              <1>     shr ecx, 4  ;Get paragraphs
   285 00000510 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   286 00000516 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   287                              <1> .skipISA:
   288                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   289                              <1>     ;rbx points to a block with "Z" marker
   290 00000519 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   290 00000521 00000000            <1>
   291 00000525 7470                <1>     jz .exit
   292                              <1>     ;Add PCI hole MCB
   293 00000527 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   294                              <1>     ;Remove one MCB worth of space from alloc
   295 0000052E 31C9                <1>     xor ecx, ecx
   296 00000530 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   297 00000533 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   298 00000539 C1E104              <1>     shl ecx, 4  ;Get bytes
   299 0000053C C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   300 0000053F 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   301 00000542 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   302 00000545 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   303 0000054D 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   303 00000556 00                  <1>
   304 00000557 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   305 0000055A 480510000000        <1>     add rax, mcb_size
   306 00000560 4829C1              <1>     sub rcx, rax    ;Take their difference
   307 00000563 C1E904              <1>     shr ecx, 4
   308 00000566 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   309 00000569 C1E104              <1>     shl ecx, 4  ;Get bytes again
   310 0000056C 4881C310000000      <1>     add rbx, mcb_size
   311 00000573 4801CB              <1>     add rbx, rcx
   312                              <1>     ;RBX should now be at 4Gb
   313 00000576 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   314 00000579 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   315 00000581 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   315 00000586 [1BC00300]          <1>
   316 0000058A 48C1E904            <1>     shr rcx, 4
   317 0000058E 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   318 00000594 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   319                              <1> .exit:
   320                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   321 00000597 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   322                              <1> ;------------------------------------------------;
   323                              <1> ;          Kernel inits and adjustments          ;
   324                              <1> ;------------------------------------------------;
   325                              <1> ;Adjust Interrupt Entries Int 00h-15h
   326                              <1> adjExceptions:
   327 0000059E 30DB                <1>     xor bl, bl
   328 000005A0 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   329 000005A5 CD35                <1>     int 35h
   330 000005A7 31C9                <1>     xor ecx, ecx    ;Start from interrupt 00h
   331 000005A9 488D3D2B0E0000      <1>     lea rdi, exceptData
   332 000005B0 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   333                              <1> .ai0:
   334 000005B2 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   335 000005B7 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   336 000005BA 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   337                              <1> .ai1:
   338 000005BD CD35                <1>     int 35h
   339 000005BF 4881C708000000      <1>     add rdi, 8
   340 000005C6 FFC1                <1>     inc ecx
   341 000005C8 81F915000000        <1>     cmp ecx, 21
   342 000005CE 75E2                <1>     jne .ai0
   343                              <1> ;Adjust Interrupt Entries Int 40h-49h
   344                              <1> adjInts:
   345 000005D0 B340                <1>     mov bl, 40h
   346 000005D2 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   347 000005D7 CD35                <1>     int 35h
   348 000005D9 B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   349 000005DE 488D3DA60E0000      <1>     lea rdi, intData
   350 000005E5 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   351                              <1> .ai0:
   352 000005E7 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   353 000005EC 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   354 000005EF 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   355                              <1> .ai1:
   356 000005F2 CD35                <1>     int 35h
   357 000005F4 4881C708000000      <1>     add rdi, 8
   358 000005FB FFC1                <1>     inc ecx
   359 000005FD 81F950000000        <1>     cmp ecx, 50h
   360 00000603 75E2                <1>     jne .ai0
   361                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   362                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   363                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   364                              <1>     %if DEBUG
   365                              <1> debugPopUpMsg:
   366                              <1>     push rbx
   367                              <1>     push rbp
   368                              <1>     push rcx
   369                              <1>     push rdx
   370                              <1>     mov ecx, 53 ;A large number of lines
   371                              <1>     xor edx, edx    ;COM 1
   372                              <1> .cls:
   373                              <1>     mov eax, 010Ah ;Transmit Line feed
   374                              <1>     int 34h
   375                              <1>     dec ecx
   376                              <1>     jnz .cls
   377                              <1>     lea rbx, qword [debPrintNullString + rbp]
   378                              <1>     lea rbp, .msg
   379                              <1>     call rbx
   380                              <1>     jmp short .exit
   381                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   382                              <1> .exit:
   383                              <1>     pop rdx
   384                              <1>     pop rcx
   385                              <1>     pop rbp
   386                              <1>     pop rbx
   387                              <1>     %endif
   388                              <1> 
   389                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   390 00000605 488D15E30C0000      <1>     lea rdx, errorInit ;Get segment start address
   391 0000060C B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   392 00000611 CD41                <1>     int 41h
   393 00000613 488D15D50C0000      <1>     lea rdx, errorInit ;Get segment start address
   394 0000061A B844250000          <1>     mov eax, 2544h
   395 0000061F CD41                <1>     int 41h
   396                              <1> ;------------------------------------------------;
   397                              <1> ;          Driver Adjustments and inits          ;
   398                              <1> ;------------------------------------------------;
   399                              <1> ;Modify the pointers in nData before putting them in the data area
   400 00000621 48012DE30E0000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   401 00000628 48012DE60E0000      <1>     add qword [nData + drvHdr.strPtr], rbp
   402 0000062F 48012DE70E0000      <1>     add qword [nData + drvHdr.intPtr], rbp
   403                              <1> ;Copy the Null driver to its location in Sysvars
   404 00000636 B922000000          <1>     mov ecx, drvHdr_size
   405 0000063B 488D35C90E0000      <1>     lea rsi, qword [nData]
   406 00000642 488DBD[80C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   407 00000649 F3A4                <1>     rep movsb   
   408                              <1> 
   409                              <1> ;Adjust the addresses in the other driver headers 
   410 0000064B 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   410 0000064D [3171000000000000]  <1>
   411 00000655 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   412 0000065A 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   413                              <1> adjDrivers:
   414 0000065E E8700C0000          <1>     call adjustDrvHdr
   415 00000663 E2F9                <1>     loop adjDrivers
   416                              <1> ;Open NUL
   417                              <1> ;NUL opened
   418                              <1> ;Open CON
   419                              <1> conInit:    ;Rather than keeping this resident... do it here
   420                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   421 00000665 488D95[1C740000]    <1>     lea rdx, qword [rbp + fastOutput]
   422 0000066C B849250000          <1>     mov eax, 2549h
   423 00000671 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   424 00000673 488D95[24740000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   425 0000067A B83B250000          <1>     mov eax, 253Bh
   426 0000067F CD41                <1>     int 41h ;Hook int 3Bh
   427                              <1> .ci0:
   428 00000681 B401                <1>     mov ah, 01      ;Get buffer status
   429 00000683 CD36                <1>     int 36h
   430 00000685 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   431 00000687 30E4                <1>     xor ah, ah
   432 00000689 CD36                <1>     int 36h ;Read key to flush from buffer
   433 0000068B EBF4                <1>     jmp short .ci0
   434                              <1> .ci1:
   435 0000068D B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   436 00000692 CD30                <1>     int 30h
   437 00000694 B402                <1>     mov ah, 02h
   438 00000696 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   439 00000698 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   440 0000069A CD30                <1>     int 30h
   441 0000069C B707                <1>     mov bh, 07h     ;Grey/Black attribs
   442 0000069E B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   443 000006A3 CD30                <1>     int 30h
   444                              <1> 
   445                              <1>     ;Save ptr to ConHdr in Sysvars
   446 000006A5 488D85[31710000]    <1>     lea rax, qword [rbp + conHdr]
   447 000006AC 6448890425-         <1>     mov qword fs:[vConPtr], rax
   447 000006B1 [59C00300]          <1>
   448                              <1> 
   449                              <1>     ;Fix the ext ESC function handler address
   450 000006B5 488D85[5C250000]    <1>     lea rax, qword [rbp + editKeys]
   451 000006BC 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   451 000006C1 [5A000000]          <1>
   452                              <1> 
   453                              <1> ;CLOCK init prock
   454                              <1> ;Set the time and date using the RTC (if present)
   455                              <1> clkInit:
   456                              <1>    ;Save ptr to ClkHdr in Sysvars first
   457 000006C5 488D85[97710000]    <1>     lea rax, qword [rbp + clkHdr]
   458 000006CC 6448890425-         <1>     mov qword fs:[clockPtr], rax
   458 000006D1 [51C00300]          <1>
   459                              <1> ;CH - Hours, in BCD
   460                              <1> ;CL - Minutes, in BCD
   461                              <1> ;DH - Seconds, in BCD
   462 000006D5 B402                <1>     mov ah, 02  ;Read RTC Time
   463 000006D7 CD3A                <1>     int 3Ah
   464 000006D9 7271                <1>     jc .clkEnd  ;if error, just exit
   465                              <1>     ;Now set the driver time. Convert From BCD to Decimal
   466 000006DB 0FB6C5              <1>     movzx eax, ch   ;Hours
   467 000006DE E84D000000          <1>     call .bcd2Bin
   468 000006E3 88C5                <1>     mov ch, al
   469 000006E5 0FB6C1              <1>     movzx eax, cl     ;Mins
   470 000006E8 E843000000          <1>     call .bcd2Bin
   471 000006ED 88C1                <1>     mov cl, al
   472 000006EF 0FB6C6              <1>     movzx eax, dh   ;Seconds
   473 000006F2 E839000000          <1>     call .bcd2Bin
   474 000006F7 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
   475 000006F9 89C2                <1>     mov edx, eax
   476 000006FB B42D                <1>     mov ah, 2Dh ;DOS Set Time
   477 000006FD CD41                <1>     int 41h
   478                              <1> ;Now get the date from RTC
   479                              <1> ;CL - Year, in BCD
   480                              <1> ;DH - Month, in BCD
   481                              <1> ;DL - Day, in BCD
   482 000006FF B404                <1>     mov ah, 04  ;Read RTC Date
   483 00000701 CD3A                <1>     int 3Ah
   484 00000703 7247                <1>     jc .clkEnd
   485                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
   486 00000705 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
   487 00000708 E823000000          <1>     call .bcd2Bin
   488 0000070D 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
   489 00000710 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
   490 00000716 0FB6C6              <1>     movzx eax, dh   ;Get Months
   491 00000719 E812000000          <1>     call .bcd2Bin
   492 0000071E 88C6                <1>     mov dh, al  
   493 00000720 0FB6C2              <1>     movzx eax, dl   ;Get day
   494 00000723 E808000000          <1>     call .bcd2Bin
   495 00000728 88C2                <1>     mov dl, al
   496 0000072A B42B                <1>     mov ah, 2Bh ;DOS Set Date
   497 0000072C CD41                <1>     int 41h
   498 0000072E EB1C                <1>     jmp short .clkEnd
   499                              <1> .bcd2Bin:
   500                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   501 00000730 51                  <1>     push rcx
   502 00000731 89C1                <1>     mov ecx, eax
   503 00000733 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   504 00000738 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   505 0000073E 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   506 00000741 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   507                              <1> .b2blp:
   508 00000744 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   509 00000746 FFC9                <1>     dec ecx
   510 00000748 75FA                <1>     jnz .b2blp
   511                              <1> .b2bexit:
   512 0000074A 59                  <1>     pop rcx
   513 0000074B C3                  <1>     ret
   514                              <1> .clkEnd:
   515                              <1> ;------------------------------------------------;
   516                              <1> ;         Link DOS to temporary Buffer           ;
   517                              <1> ;------------------------------------------------;
   518                              <1> tempBufferInit:
   519 0000074C 488DBD[E0020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   520 00000753 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   520 00000758 [63C00300]          <1>
   521 0000075C 31C0                <1>     xor eax, eax
   522 0000075E 48FFC8              <1>     dec rax
   523 00000761 48AB                <1>     stosq   ;.nextBufPtr, end of list
   524 00000763 AA                  <1>     stosb   ;.driveNumber, Free entry
   525 00000764 48FFC0              <1>     inc rax
   526 00000767 AA                  <1>     stosb   ;.bufferFlags, No flags
   527                              <1> ;------------------------------------------------;
   528                              <1> ;         Init msd driver, create DPB            ;
   529                              <1> ;------------------------------------------------;
   530                              <1> storageInits:
   531                              <1> ;First save dpb pointer in sysvars
   532 00000768 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   533 0000076F 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   533 00000774 [41C00300]          <1>
   534                              <1> ;Open Mass Storage
   535 00000778 55                  <1>     push rbp
   536 00000779 E8AF0D0000          <1>     call diskInit
   537 0000077E 5D                  <1>     pop rbp
   538 0000077F 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   539 00000782 648A0425[7DC00300]  <1>     mov al, byte fs:[numPhysVol]
   540 0000078A 84C0                <1>     test al, al ;If no media with valid filesystems were detected, stop boot
   541 0000078C 0F845D0B0000        <1>     jz errorInit
   542 00000792 488D95[BB7B0000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   543 00000799 30C9                <1>     xor cl, cl  ;Clear counter
   544 0000079B 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   544 000007A0 [41C00300]          <1>
   545                              <1> .si0:   
   546 000007A4 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   547 000007A7 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   548 000007A9 CD41                <1>     int 41h
   549                              <1> ;Add other data to DPB
   550 000007AB 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   551 000007AE 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   552 000007B1 50                  <1>     push rax
   553 000007B2 488D87[B9710000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   554 000007B9 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   555 000007BD 58                  <1>     pop rax
   556 000007BE FEC1                <1>     inc cl
   557 000007C0 64380C25[7DC00300]  <1>     cmp byte fs:[numPhysVol], cl  ;When equal, we are have finished
   558 000007C8 7416                <1>     je .si1
   559 000007CA 50                  <1>     push rax
   560 000007CB 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   561 000007CF 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   562 000007D3 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   563 000007D6 58                  <1>     pop rax
   564 000007D7 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   565 000007DE EBC4                <1>     jmp short .si0
   566                              <1> .si1:
   567                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   568 000007E0 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   569 000007E8 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   570                              <1> ;------------------------------------------------;
   571                              <1> ;          Find largest sector size              ;
   572                              <1> ;------------------------------------------------;
   573                              <1> sectorSizeSearch:
   574                              <1> ;Done by reading BPB's for each drive
   575 000007EB 488D9D[BB7B0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   576                              <1>     
   577                              <1>     ;Go thru each block individually
   578 000007F2 31C0                <1>     xor eax, eax
   579 000007F4 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   580                              <1> .findLargest:
   581 000007F7 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   582 000007FB 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   583 00000800 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   584 00000807 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   585 0000080A 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   586 0000080D 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   587 0000080F 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   587 00000814 [61C00300]          <1>
   588                              <1> ;------------------------------------------------;
   589                              <1> ;                CDS array inits                 ;
   590                              <1> ;------------------------------------------------;
   591 00000818 B905000000          <1>     mov ecx, 5    ;Use as a counter, build 5 CDS entries
   592 0000081D 488DBD[19010000]    <1>     lea rdi, qword [rbp + cdsArray] ;Setup array
   593 00000824 E802000000          <1>     call makeCDSArray
   594 00000829 EB50                <1>     jmp short initialCDSWritten ;Go past the function
   595                              <1> makeCDSArray:
   596                              <1> ;Input: ecx = Size of array
   597                              <1> ;       rdi = Pointer to the start of the CDS array
   598                              <1> ;Ouput: rdi = first byte past the end of the table
   599 0000082B 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   599 00000830 [6BC00300]          <1>
   600 00000834 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]
   600 00000839 [41C00300]          <1>
   601 0000083D B8413A5C00          <1>     mov eax, 005C3A41h      ;"A:\"+NULL char
   602                              <1> .tempCDS:
   603 00000842 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax
   604 00000844 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   605 00000848 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir for all!
   606 0000084F 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the X:
   607 00000855 31D2                <1>     xor edx, edx    ;Use edx for flags
   608 00000857 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Is rbx an invalid DPB ptr?
   609 0000085E 7409                <1>     je .skipValidCDS
   610 00000860 BA00400000          <1>     mov edx, cdsValidDrive  ;If not, set drive to valid and...
   611 00000865 488B5B25            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]  ;... go to next DPB
   612                              <1> .skipValidCDS:
   613 00000869 66895743            <1>     mov word [rdi + cds.wFlags], dx ;Store the flags now
   614 0000086D FFC0                <1>     inc eax ;Increment the drive letter
   615 0000086F 4881C75B000000      <1>     add rdi, cds_size   ;Goto next array entry
   616 00000876 FFC9                <1>     dec ecx
   617 00000878 75C8                <1>     jnz .tempCDS
   618 0000087A C3                  <1>     ret
   619                              <1> initialCDSWritten:
   620                              <1> ;------------------------------------------------;
   621                              <1> ;     Set up general PSP areas and DOS vars      ;
   622                              <1> ;------------------------------------------------;
   623                              <1> ;Additional DOS Vars init and fixups
   624 0000087B 64C60425[FEC30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   624 00000883 FF                  <1>
   625 00000884 64C60425[C6C30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   625 0000088C 2F                  <1>
   626 0000088D 488DBD[D1010000]    <1>     lea rdi, qword [rbp + extAsciiTbl]  ;Get the load of dflt extascii tbl
   627 00000894 6448893C25-         <1>     mov qword fs:[ctryTbl + countryStruc.mapaddr], rdi ;Store in country table
   627 00000899 [2E000000]          <1>
   628                              <1> 
   629                              <1> ;Server Table setup
   630 0000089D 488D3D(F5030000)    <1>     lea rdi, serverDispTbl  ;Get pointer to table
   631 000008A4 48893D(83DA0300)    <1>     mov qword [serverDispTblPtr], rdi   ;Store to use
   632                              <1> 
   633                              <1> ;Set network machine name to... nothing!
   634 000008AB 488DBD[CBC30300]    <1>     lea rdi, qword [rbp + machineName]
   635 000008B2 B910000000          <1>     mov ecx, 10h    ;16 chars long
   636 000008B7 B020                <1>     mov al, SPC ;Space char
   637 000008B9 F3AA                <1>     rep stosb   ;Fill with space chars
   638                              <1> 
   639                              <1> 
   640                              <1> ;Patch Data Table init
   641 000008BB 488DBD[DBC30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   642 000008C2 488D85[05690000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   643 000008C9 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   644 000008CB 488D85[0F690000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   645 000008D2 48AB                <1>     stosq
   646 000008D4 488D85[19690000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   647 000008DB 48AB                <1>     stosq
   648 000008DD 488D85[23690000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   649 000008E4 48AB                <1>     stosq
   650                              <1> 
   651                              <1> ;Initial PSP Init
   652 000008E6 488D1D13F8FFFF      <1>     lea rbx, qword [tempPSP]
   653 000008ED 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   653 000008F2 [14C40300]          <1>
   654 000008F6 53                  <1>     push rbx
   655 000008F7 4881C380000000      <1>     add rbx, psp.dta
   656 000008FE 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   656 00000903 [0CC40300]          <1>
   657 00000907 5B                  <1>     pop rbx
   658 00000908 66C703CD40          <1>     mov word [rbx + psp.return], 040CDh ;DOS return function
   659 0000090D 66C74350CD41        <1>     mov word [rbx + psp.unixEntry], 041CDh  ;Int 41h!
   660 00000913 C64352CB            <1>     mov byte [rbx + psp.unixEntry + 2], 0CBh    ;Return!
   661 00000917 48C7430200000000    <1>     mov qword [rbx + psp.allocSize], 0    ;Size of allocation (dummy value)
   662 0000091F 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   663 00000923 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   664 00000927 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   665 0000092B 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   665 00000934 FF                  <1>
   666 00000935 48AB                <1>     stosq   ;8 bytes
   667 00000937 31C0                <1>     xor eax, eax
   668 00000939 50                  <1>     push rax    ;Save 0 on the stack
   669 0000093A 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   670 0000093D 48AB                <1>     stosq   ;16 bytes
   671 0000093F AB                  <1>     stosd   ;20 bytes
   672 00000940 58                  <1>     pop rax ;Get 0 back
   673 00000941 4889433E            <1>     mov qword [rbx + psp.envPtr], rax    ;No environment
   674 00000945 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   675 00000949 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   676 0000094D 4889DA              <1>     mov rdx, rbx
   677 00000950 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   678 00000955 CD41                <1>     int 41h
   679 00000957 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   680 0000095B B843350000          <1>     mov eax, 3543h
   681 00000960 CD41                <1>     int 41h
   682 00000962 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   683 00000966 B844350000          <1>     mov eax, 3544h
   684 0000096B CD41                <1>     int 41h
   685 0000096D 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   686                              <1> 
   687 00000971 B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   688 00000976 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   689 0000097A F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   690                              <1> ;------------------------------------------------;
   691                              <1> ;          Default File Handle Creation          ;
   692                              <1> ;                                                ;
   693                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   694                              <1> ;------------------------------------------------;
   695                              <1> defaultFileHandles:
   696                              <1> ;Fill in the default file table entries
   697 0000097C 488D9D[2CC10300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   698 00000983 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   699 0000098A 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   700 00000990 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   700 00000995 [49C00300]          <1>
   701 00000999 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   701 000009A2 20                  <1>
   702                              <1> ;GOTO FIRST FILE 
   703 000009A3 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   704                              <1> ;Write AUX
   705 000009AA 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   706 000009AF 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   707 000009B5 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   708 000009B9 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   709                              <1>     ;No EOF when reading from the device
   710 000009BD 488B85[53710000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   711 000009C4 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   712                              <1>     ;Ignore disk related fields and Date/Time of open
   713 000009C8 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   714                              <1>     ;11 chars in 8.3 name
   715 000009CC 488D35C6090000      <1>     lea rsi, auxName
   716 000009D3 B903000000          <1>     mov ecx, 3
   717 000009D8 F3A4                <1>     rep movsb   ;Move the three bytes
   718 000009DA 4889D0              <1>     mov rax, rdx
   719 000009DD 48AB                <1>     stosq   ;Eight spaces left to print
   720 000009DF 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   720 000009E4 [14C40300]          <1>
   721 000009E8 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   722                              <1> ;GOTO NEXT ENTRY
   723 000009EC 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   724                              <1>     ;Write CON
   725 000009F3 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   726 000009F8 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   727 000009FE C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   728 00000A02 C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   729                              <1>     ;No EOF when reading from the device
   730 00000A06 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   730 00000A0B [59C00300]          <1>
   731 00000A0F 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   732                              <1>     ;Ignore disk related fields and Date/Time of open
   733 00000A13 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   734                              <1>     ;11 chars in 8.3 name
   735 00000A17 488D3577090000      <1>     lea rsi, conName
   736 00000A1E B903000000          <1>     mov ecx, 3
   737 00000A23 F3A4                <1>     rep movsb   ;Move the three bytes
   738 00000A25 4889D0              <1>     mov rax, rdx
   739 00000A28 48AB                <1>     stosq   ;Eight spaces left to print
   740 00000A2A 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   740 00000A2F [14C40300]          <1>
   741 00000A33 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   742                              <1> ;GOTO NEXT ENTRY
   743 00000A37 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   744                              <1> ;Write PRN
   745 00000A3E 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   746 00000A43 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   747 00000A49 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   748 00000A4D C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   749                              <1>     ;Want EOF when reading from to the device
   750 00000A51 488B85[75710000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   751 00000A58 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   752                              <1>     ;Ignore disk related fields and Date/Time of open
   753 00000A5C 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   754                              <1>     ;11 chars in 8.3 name
   755 00000A60 488D3536090000      <1>     lea rsi, prnName
   756 00000A67 B903000000          <1>     mov ecx, 3
   757 00000A6C F3A4                <1>     rep movsb   ;Move the three bytes
   758 00000A6E 4889D0              <1>     mov rax, rdx
   759 00000A71 48AB                <1>     stosq   ;Eight spaces left to print
   760 00000A73 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   760 00000A78 [14C40300]          <1>
   761 00000A7C 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   762                              <1> ;Zero word 0 of entry 4 and 5
   763 00000A80 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   764 00000A87 31C0                <1>     xor eax, eax
   765                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   766                              <1>     ; which is ok as these are empty entries, ready to be used)
   767 00000A89 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   768 00000A8B 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   769 00000A92 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   770                              <1> ;------------------------------------------------;
   771                              <1> ;              Setup DLLMGR Hooks                ;
   772                              <1> ;------------------------------------------------;   
   773 00000A94 488DBD[A4C00300]    <1>     lea rdi, qword [rbp + dllHooks]
   774 00000A9B 488D85[F46F0000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = CY
   775 00000AA2 48AB                <1>     stosq
   776 00000AA4 48AB                <1>     stosq
   777                              <1> ;------------------------------------------------;
   778                              <1> ;               Setup Share Hooks                ;
   779                              <1> ;------------------------------------------------;
   780 00000AA6 488DBD[B4C00300]    <1>     lea rdi, qword [rbp + shareHooks]
   781 00000AAD 488D9D[F46F0000]    <1>     lea rbx, qword [rbp + goodDfltShareHook]
   782 00000AB4 488D85[EE6F0000]    <1>     lea rax, qword [rbp + badDfltShareHook]
   783 00000ABB 48AB                <1>     stosq   ;Store bad for openFileCheck
   784 00000ABD 4893                <1>     xchg rax, rbx
   785 00000ABF 48AB                <1>     stosq   ;Store good for open
   786 00000AC1 48AB                <1>     stosq   ;Store good for close
   787 00000AC3 4893                <1>     xchg rax, rbx
   788                              <1> ;Store bad for close for machine, task, name, lock and unlock file
   789 00000AC5 B905000000          <1>     mov ecx, 5
   790 00000ACA F348AB              <1>     rep stosq
   791 00000ACD 4893                <1>     xchg rax, rbx
   792 00000ACF 48AB                <1>     stosq   ;Store good for check file lock exists
   793 00000AD1 4893                <1>     xchg rax, rbx
   794                              <1> ;Store bad for open file, update fcb from sft and get fst cluster of fcb
   795 00000AD3 B903000000          <1>     mov ecx, 3
   796 00000AD8 F348AB              <1>     rep stosq
   797 00000ADB 4893                <1>     xchg rax, rbx
   798 00000ADD 48AB                <1>     stosq   ;Store good for close dup file share
   799 00000ADF 4893                <1>     xchg rax, rbx
   800 00000AE1 48AB                <1>     stosq   ;Store bad for close handles for new file opened 
   801 00000AE3 48AB                <1>     stosq   ;Store bad for update dir information
   802                              <1> ;------------------------------------------------;
   803                              <1> ;             Print Welcome Message              ;
   804                              <1> ;------------------------------------------------;
   805 00000AE5 488D1523080000      <1>     lea rdx, strtmsg
   806 00000AEC B409                <1>     mov ah, 09h
   807 00000AEE CD41                <1>     int 41h    
   808                              <1> ;------------------------------------------------;
   809                              <1> ;               Load CONFIG.SYS                  ;
   810                              <1> ;------------------------------------------------;
   811                              <1> ;Setup stackframe, workout base 
   812 00000AF0 488DBD[45000000]    <1>     lea rdi, qword [rbp + secondDPB]
   813                              <1>     ;Check if this DPB is the last dpb. The first two ALWAYS exist.
   814 00000AF7 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   815 00000AFB 483DFFFFFFFF        <1>     cmp rax, -1 ;Was second DPB the last one?
   816 00000B01 7421                <1>     je setupFrame   ;If so, jump
   817 00000B03 4889C7              <1>     mov rdi, rax    ;Move rdi to thirdDPB
   818 00000B06 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   819 00000B0A 483DFFFFFFFF        <1>     cmp rax, -1 ;Was third DPB the last one?
   820 00000B10 7412                <1>     je setupFrame   ;If so, jump
   821 00000B12 4889C7              <1>     mov rdi, rax    ;Move rdi to fourthDPB
   822 00000B15 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   823 00000B19 483DFFFFFFFF        <1>     cmp rax, -1 ;Was fourth DPB the last one?
   824 00000B1F 7403                <1>     je setupFrame   ;If so, jump
   825 00000B21 4889C7              <1>     mov rdi, rax    ;Move rdi to fifthDPB
   826                              <1> setupFrame:
   827 00000B24 4881C735000000      <1>     add rdi, dpb_size   ;Else, goto end of the dpb rdi points to
   828 00000B2B 55                  <1>     push rbp
   829 00000B2C 4889E5              <1>     mov rbp, rsp
   830 00000B2F 4881EC68000000      <1>     sub rsp, cfgFrame_size
   831 00000B36 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Store the end pointer here
   832 00000B3A 48C745F81E000000    <1>     mov qword [rbp - cfgFrame.newBuffers], buffersDefault
   833 00000B42 48C745F014000000    <1>     mov qword [rbp - cfgFrame.newSFTVal], filesDefault
   834 00000B4A 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   835 00000B52 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   836 00000B5A 48C745D805000000    <1>     mov qword [rbp - cfgFrame.newLastdrive], lastDriveDeflt
   837                              <1> 
   838 00000B62 648A0425[10C00300]  <1>     mov al, byte fs:[bootDrive]
   839 00000B6A A880                <1>     test al, 80h    ;Was boot drive hard disk?
   840 00000B6C 7406                <1>     jz notHDD
   841                              <1> ;Set Current Drive to C:
   842 00000B6E B202                <1>     mov dl, 2
   843 00000B70 B40E                <1>     mov ah, 0Eh ;Select C: Drive
   844 00000B72 CD41                <1>     int 41h
   845                              <1> notHDD:
   846 00000B74 488D1526080000      <1>     lea rdx, cfgspec    ;CONFIG.SYS, must be on bootdrive for now
   847 00000B7B B43D                <1>     mov ah, 3Dh ;Open file for reading
   848 00000B7D B000                <1>     mov al, ReadAccess
   849 00000B7F CD41                <1>     int 41h
   850 00000B81 0F8267050000        <1>     jc noCfg  ;If no CONFIG.SYS found, just use defaults that are already setup
   851                              <1> ;------------------------------------------------;
   852                              <1> ;              Process CONFIG.SYS                ;
   853                              <1> ;------------------------------------------------;
   854                              <1> ;Create a stack frame with the following order.
   855                              <1> ;Values greater than max are set to max. Values less than min are set to min.
   856                              <1> ; New Buffers value.        Default = 30, Min = 1, Max = 99
   857                              <1> ; New SFT value.            Default = 20, Min = 8, Max = 254
   858                              <1> ; New FCBS value.           Default = 4,  Min = 4, Max = 254
   859                              <1> ; New protected FCBS value. Default = 0,  Min = 0, Max = New FCBS value
   860                              <1> ; New CDS value.            Default = 5,  Min = 5, Max = 26
   861                              <1> ;
   862                              <1> ;Remember to maintain the base of occupied memory on stack (endPtr)
   863                              <1> ;-------------------------------------------------------------------------;
   864                              <1> ; CONFIG.SYS processing pseudocode:-
   865                              <1> ;
   866                              <1> ; _START:
   867                              <1> ; Read file one byte at a time a until a EOF or CR encountered.
   868                              <1> ; If (EOF encountered)
   869                              <1> ;   Insert a terminating ^Z to the end of the line. 
   870                              <1> ;   Close handle.
   871                              <1> ; Parse the line from beginning looking for a DOS terminating char.
   872                              <1> ;   If (CR or EOF encoutered before terminating char)
   873                              <1> ;       Bad line error msg. 
   874                              <1> ;       If (CR encountered)
   875                              <1> ;           Goto _START
   876                              <1> ;       Else
   877                              <1> ;           Goto _EXIT
   878                              <1> ;   Else 
   879                              <1> ;       If (Keyword AND not DEVICE) 
   880                              <1> ;           Store it's value on stack or change internal variable value
   881                              <1> ;       If (DEVICE)
   882                              <1> ;           Move endPtr after end of line and try load the driver.
   883                              <1> ;           If (driver doesn't exist or fails to init)
   884                              <1> ;               print bad driver error msg.
   885                              <1> ;       Else 
   886                              <1> ;           Bad line error msg
   887                              <1> ;       If (line terminated by CR)
   888                              <1> ;           Goto _START
   889                              <1> ; _EXIT:
   890                              <1> ;-------------------------------------------------------------------------;
   891                              <1> ; Note:
   892                              <1> ; If driver a Block Device Driver, build all the DPB's for it (up until max)
   893                              <1> ;   directly after the driver pointer as returned by the driver. Then, 
   894                              <1> ;   adjust the memory pointer and start loading next line.
   895                              <1> ;   The space marked as "endPtr" can be used as a buffer by the disk buffers.
   896                              <1> ; Once EOF has been reached, we jmp to noCfg which configures the other
   897                              <1> ;   data structures according to the values on the stack frame.
   898                              <1> ;-------------------------------------------------------------------------;
   899                              <1> ;Start CONFIG.SYS parsing here
   900                              <1> configParse:
   901 00000B87 488945B8            <1>     mov qword [rbp - cfgFrame.cfgHandle], rax
   902 00000B8B 48C745B000000000    <1>     mov qword [rbp - cfgFrame.lastLine], 0
   903                              <1> .newLine:
   904                              <1> ;Keeps the new line unless a DEVICE= command read it, which adjusts endPtr
   905 00000B93 488B55A8            <1>     mov rdx, qword [rbp - cfgFrame.endPtr]  ;Start reading into here
   906 00000B97 488955A0            <1>     mov qword [rbp - cfgFrame.linePtr], rdx	;Use var for start of line ptr
   907                              <1> .nextChar:
   908 00000B9B 488B5DB8            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into ebx
   909 00000B9F 6681FBFFFF          <1>     cmp bx, -1
   910 00000BA4 0F84D4000000        <1>     je .stopProcessError
   911 00000BAA B8003F0000          <1>     mov eax, 3F00h  ;Read handle
   912 00000BAF B901000000          <1>     mov ecx, 1  ;Read one byte
   913 00000BB4 CD41                <1>     int 41h
   914 00000BB6 0F82C2000000        <1>     jc .stopProcessError
   915 00000BBC 85C9                <1>     test ecx, ecx	;If this is zero, EOF reached
   916 00000BBE 7508                <1>     jnz .notEOF
   917 00000BC0 48C745B0FFFFFFFF    <1>     mov qword [rbp - cfgFrame.lastLine], -1	;Note we are at EOF
   918                              <1> .notEOF:
   919 00000BC8 48FF45A8            <1>     inc qword [rbp - cfgFrame.endPtr]	;Goto next byte
   920 00000BCC 0FB602              <1>     movzx eax, byte [rdx]
   921 00000BCF 3C0D                <1>     cmp al, CR
   922 00000BD1 741C                <1>     je .endOfLine
   923 00000BD3 3C0A                <1>     cmp al, LF
   924 00000BD5 7418                <1>     je .endOfLine
   925 00000BD7 3C61                <1>     cmp al, "a"
   926 00000BD9 720F                <1>     jb .notChar
   927 00000BDB 3C7A                <1>     cmp al, "z"
   928 00000BDD 770B                <1>     ja .notChar
   929 00000BDF 50                  <1>     push rax    ;Push rax on stack as the argument to normalise
   930 00000BE0 B813120000          <1>     mov eax, 1213h  ;Uppercase the char
   931 00000BE5 CD4F                <1>     int 4fh
   932 00000BE7 8802                <1>     mov byte [rdx], al  ;Replace the char with the capitalised form
   933 00000BE9 58                  <1>     pop rax ;Pop into rax to renormalise the stack
   934                              <1> .notChar:
   935 00000BEA 48FFC2              <1>     inc rdx ;Now move our local pointer to the next byte
   936 00000BED EBAC                <1>     jmp short .nextChar
   937                              <1> .endOfLine:
   938                              <1> ;rdx points to terminating char
   939                              <1> ;First find the length of the instruction word
   940 00000BEF 31C9                <1>     xor ecx, ecx
   941                              <1> .cmdNameLenGet:
   942 00000BF1 AC                  <1>     lodsb
   943 00000BF2 E875000000          <1>     call .isCharTerminal
   944 00000BF7 740A                <1>     jz .endOfCommandFound
   945 00000BF9 FFC1                <1>     inc ecx
   946 00000BFB 81F90A000000        <1>     cmp ecx, 10 ;If shorter than longest command, keep looping
   947 00000C01 72EE                <1>     jb .cmdNameLenGet
   948                              <1> ;Else, fall through in error
   949                              <1> .endOfCommandFound:
   950                              <1> ;ecx has the length of the command
   951 00000C03 81F90A000000        <1>     cmp ecx, 10
   952 00000C09 7473                <1>     je .stopProcessError
   953 00000C0B 488D3DCE000000      <1>     lea rdi, .keyTbl ;Put rdi at the table to search for
   954                              <1> .cmdSearch:
   955 00000C12 803FFF              <1>     cmp byte [rdi], -1
   956 00000C15 7467                <1>     je .stopProcessError
   957 00000C17 380F                <1>     cmp byte [rdi], cl
   958 00000C19 7544                <1>     jne .gotoNextCmd
   959                              <1>     ;Candidate command found, check said command is the command we want
   960 00000C1B 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   961 00000C1F 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Error?
   962 00000C26 7456                <1>     je .stopProcessError
   963 00000C28 57                  <1>     push rdi
   964 00000C29 51                  <1>     push rcx
   965 00000C2A 48FFC7              <1>     inc rdi ;Go to next char
   966 00000C2D F3A6                <1>     repe cmpsb  ;Compare whilst the strings are equal
   967 00000C2F 59                  <1>     pop rcx
   968 00000C30 5F                  <1>     pop rdi
   969 00000C31 752C                <1>     jne .gotoNextCmd    ;If not equal, just goto next command
   970                              <1>     ;Else, rdi + rcx points to the word ptr of the function
   971                              <1>     ;rdx points to the terminating char of the line 
   972 00000C33 52                  <1>     push rdx    ;This is to know whether we continue processing or end now
   973 00000C34 488D35A5000000      <1>     lea rsi, .keyTbl
   974 00000C3B 4889F0              <1>     mov rax, rsi    ;Keep a copy in rax
   975 00000C3E 4803740F01          <1>     add rsi, qword [rdi + rcx + 1]  ;This is the offset from .keyTbl
   976 00000C43 4801C6              <1>     add rsi, rax    ;So add the EA of the head of the tbl before calling
   977 00000C46 F8                  <1>     clc ;Esure flags are happy before entering
   978 00000C47 FFD6                <1>     call rsi    ;Call this function
   979 00000C49 5A                  <1>     pop rdx
   980 00000C4A 7232                <1>     jc .stopProcessError    ;If the function returns CF=CY, error exit
   981 00000C4C 48F745B0FFFFFFFF    <1>     test qword [rbp - cfgFrame.lastLine], -1 ;If we concluded at EOF, exit
   982 00000C54 0F8589040000        <1>     jnz .cfgExit
   983 00000C5A E934FFFFFF          <1>     jmp .newLine
   984                              <1> .gotoNextCmd:
   985 00000C5F 0FB607              <1>     movzx eax, byte [rdi]
   986 00000C62 0503000000          <1>     add eax, 3
   987 00000C67 4801C7              <1>     add rdi, rax
   988 00000C6A EBA6                <1>     jmp short .cmdSearch
   989                              <1> .isCharTerminal:
   990                              <1> ;Input: AL = Char to check
   991                              <1> ;Output: ZF=ZE -> Char terminal
   992                              <1> ;        ZF=NZ -> Char not terminal
   993 00000C6C 3C3D                <1>     cmp al, "="
   994                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34 00000C6E 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000C70 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
   995 00000C71 3C20                <1>     cmp al, SPC
   996                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000C73 74(70)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   997 00000C75 3C09                <1>     cmp al, TAB
   998                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000C77 74(70)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   999 00000C79 3C3B                <1>     cmp al, ";"
  1000                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000C7B 74(70)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1001                              <1>     return
    13                              <2> %%_ret:
    14 00000C7D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1002                              <1> .stopProcessError:
  1003 00000C7E 488D1534000000      <1>     lea rdx, .speLine
  1004 00000C85 B800090000          <1>     mov eax, 0900h
  1005 00000C8A CD41                <1>     int 41h
  1006                              <1>     ;Reset all values to default
  1007 00000C8C 48C745F81E000000    <1>     mov qword [rbp - cfgFrame.newBuffers], buffersDefault
  1008 00000C94 48C745F014000000    <1>     mov qword [rbp - cfgFrame.newSFTVal], filesDefault
  1009 00000C9C 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
  1010 00000CA4 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
  1011 00000CAC 48C745D805000000    <1>     mov qword [rbp - cfgFrame.newLastdrive], lastDriveDeflt
  1012 00000CB4 E92A040000          <1>     jmp .cfgExit
  1013 00000CB9 0D0A556E7265636F67- <1> .speLine:   db CR,LF,"Unrecognised command in CONFIG.SYS",CR,LF,"$"
  1013 00000CC2 6E6973656420636F6D- <1>
  1013 00000CCB 6D616E6420696E2043- <1>
  1013 00000CD4 4F4E4649472E535953- <1>
  1013 00000CDD 0D0A24              <1>
  1014                              <1> .keyTbl: 
  1015 00000CE0 05425245414B        <1>     db 5, "BREAK"           ;DONE
  1016 00000CE6 5D00                <1> 	dw .breakHandler - .keyTbl
  1017 00000CE8 0742554646455253    <1>     db 7, "BUFFERS"         ;DONE
  1018 00000CF0 8A00                <1> 	dw .bufHandler - .keyTbl
  1019 00000CF2 07434F554E545259    <1> 	db 7, "COUNTRY"         ;Ignored for now
  1020 00000CFA FC00                <1> 	dw .countryScan - .keyTbl
  1021 00000CFC 06444556494345      <1> 	db 6, "DEVICE"          ;DONE
  1022 00000D03 FD00                <1> 	dw .drvLoader - .keyTbl
  1023 00000D05 0446434253          <1> 	db 4, "FCBS"            ;DONE (to be ignored for a while now)
  1024 00000D0A 2B03                <1> 	dw .fcbHandler - .keyTbl
  1025 00000D0C 0546494C4553        <1> 	db 5, "FILES"           ;DONE
  1026 00000D12 2C03                <1> 	dw .sftHandler - .keyTbl
  1027 00000D14 094C41535444524956- <1> 	db 9, "LASTDRIVE"       ;DONE
  1027 00000D1D 45                  <1>
  1028 00000D1E B203                <1> 	dw .lastdriveHandler - .keyTbl
  1029 00000D20 055348454C4C        <1> 	db 5, "SHELL"           ;Ignored for now
  1030 00000D26 0004                <1> 	dw .shellHandler - .keyTbl
  1031 00000D28 06535441434B53      <1> 	db 6, "STACKS"          ;Ignored for now
  1032 00000D2F 0104                <1> 	dw .stacksHandler - .keyTbl
  1033 00000D31 08445249565041524D  <1>     db 8, "DRIVPARM"
  1034 00000D3A 0204                <1>     dw .drivParm - .keyTbl  ;Ignored for now
  1035 00000D3C FF                  <1> 	db -1	;End of table marker
  1036                              <1> .breakHandler:
  1037 00000D3D 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1038 00000D41 4881C606000000      <1>     add rsi, 6  ;Go past BREAK=
  1039                              <1>     ;This must be the word ON or OFF 
  1040 00000D48 31D2                <1>     xor edx, edx    ;Clear CF and default to OFF
  1041 00000D4A 66813E4F4E          <1>     cmp word [rsi], "ON"
  1042 00000D4F 740F                <1>     je .breakOn
  1043 00000D51 66813E4F46          <1>     cmp word [rsi], "OF"
  1044 00000D56 7506                <1>     jne .breakBad
  1045 00000D58 807E0246            <1>     cmp byte [rsi + 2], "F"
  1046 00000D5C 7404                <1>     je .breakCommon
  1047                              <1> .breakBad:
  1048 00000D5E F9                  <1>     stc
  1049                              <1>     return
    13                              <2> %%_ret:
    14 00000D5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1050                              <1> .breakOn:
  1051 00000D60 FFC2                <1>     inc edx ;Go from OFF to ON  (keeps CF=NC)
  1052                              <1> .breakCommon:
  1053 00000D62 B801330000          <1>     mov eax, 3301h  ;Set break to value in dl
  1054 00000D67 CD41                <1>     int 41h
  1055                              <1>     return
    13                              <2> %%_ret:
    14 00000D69 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1056                              <1> 
  1057                              <1> .bufHandler:
  1058 00000D6A 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1059 00000D6E 4881C608000000      <1>     add rsi, 8  ;Go past BUFFERS=
  1060                              <1>     ;This must be at most three digits, anything else is a failure
  1061 00000D75 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
  1062 00000D78 31C9                <1>     xor ecx, ecx
  1063 00000D7A AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
  1064 00000D7B 3C30                <1>     cmp al, "0"
  1065 00000D7D 724A                <1>     jb .bufHandlerErr
  1066 00000D7F 3C39                <1>     cmp al, "9"
  1067 00000D81 7746                <1>     ja .bufHandlerErr
  1068 00000D83 FFC1                <1>     inc ecx ;Increment char counter
  1069 00000D85 AC                  <1>     lodsb   ;Get second char
  1070 00000D86 E840000000          <1>     call .bufHandlerTermCheck
  1071 00000D8B 7410                <1>     je .bufHandlerProcess   ;If it is a terminating char, exit
  1072 00000D8D 3C30                <1>     cmp al, "0"
  1073 00000D8F 7238                <1>     jb .bufHandlerErr
  1074 00000D91 3C39                <1>     cmp al, "9"
  1075 00000D93 7734                <1>     ja .bufHandlerErr
  1076 00000D95 AC                  <1>     lodsb   ;Check no more chars!
  1077 00000D96 E830000000          <1>     call .bufHandlerTermCheck
  1078 00000D9B 752C                <1>     jne .bufHandlerErr
  1079                              <1> .bufHandlerProcess:
  1080 00000D9D 31D2                <1>     xor edx, edx    ;Accumulate value in edx
  1081 00000D9F 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
  1082                              <1> .bufHandlerLp:
  1083 00000DA2 AC                  <1>     lodsb   ;Get the digit
  1084 00000DA3 E817000000          <1>     call .bufHandlerMul
  1085 00000DA8 67E304              <1>     jecxz .bufHandlerPrepExit
  1086 00000DAB FFC9                <1>     dec ecx
  1087 00000DAD EBF3                <1>     jmp short .bufHandlerLp 
  1088                              <1> .bufHandlerPrepExit:
  1089                              <1> ;edx has the value now, so place it in stack
  1090 00000DAF B91E000000          <1>     mov ecx, buffersDefault
  1091 00000DB4 85D2                <1>     test edx, edx
  1092 00000DB6 0F44D1              <1>     cmovz edx, ecx  ;Replace zero with default if the user specified 0 buffers
  1093 00000DB9 488955F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rdx
  1094 00000DBD F8                  <1>     clc
  1095                              <1>     return
    13                              <2> %%_ret:
    14 00000DBE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1096                              <1> .bufHandlerMul:
  1097 00000DBF 2C30                <1>     sub al, "0" ;Convert to a binary value
  1098 00000DC1 F6E1                <1>     mul cl  ;Multiply al by cl, answer in ax
  1099 00000DC3 0FB7C0              <1>     movzx eax, ax
  1100 00000DC6 01C2                <1>     add edx, eax
  1101                              <1>     return
    13                              <2> %%_ret:
    14 00000DC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1102                              <1> .bufHandlerErr:
  1103 00000DC9 F9                  <1>     stc
  1104                              <1>     return
    13                              <2> %%_ret:
    14 00000DCA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1105                              <1> .bufHandlerTermCheck:
  1106 00000DCB 3C20                <1>     cmp al, SPC
  1107                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000DCD 74(CA)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1108 00000DCF 3C09                <1>     cmp al, TAB
  1109                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000DD1 74(CA)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1110 00000DD3 3C0D                <1>     cmp al, CR
  1111                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000DD5 74(CA)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1112 00000DD7 3C0A                <1>     cmp al, LF
  1113                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000DD9 74(CA)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1114                              <1>     return
    13                              <2> %%_ret:
    14 00000DDB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1115                              <1> .countryScan:
  1116                              <1>     return
    13                              <2> %%_ret:
    14 00000DDC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1117                              <1> .drvLoader:
  1118                              <1> ;We first try to read the driver into the byte after rdx.
  1119                              <1> ;If we cannot open the file, or we can open but not read the whole file
  1120                              <1> ; we error with Bad or missing filename msg, and proceed as if nothing happened 
  1121                              <1> ; (CF=NC). 
  1122                              <1> ; Thus we DO NOT adjust .endPtr or .linePtr and recycle that space for the 
  1123                              <1> ; next line.
  1124                              <1> ;If the open succeeded and we were able to read the whole driver into memory, 
  1125                              <1> ; we pass the lineptr to the driver and call init for the driver.
  1126                              <1> ; Once the driver returns, if the DONE bit is set, we read the offset of 
  1127                              <1> ; free memory above the driver and add that to the endPtr. If the driver
  1128                              <1> ; is a block driver, we add to the endPtr the space for "Units supported" 
  1129                              <1> ; number of DPBs.
  1130 00000DDD 4889D6              <1>     mov rsi, rdx    ;Save the ptr to past the end of the line in rsi
  1131 00000DE0 488B7DA0            <1>     mov rdi, qword [rbp - cfgFrame.linePtr]
  1132 00000DE4 4881C707000000      <1>     add rdi, 7  ;Go past DEVICE= to the pathname
  1133 00000DEB 4889FA              <1>     mov rdx, rdi    ;Prepare rdx for the open
  1134 00000DEE B820000000          <1>     mov eax, SPC
  1135                              <1> .drvFindEndOfFileName:
  1136 00000DF3 AE                  <1>     scasb  ;Is this char the space?
  1137 00000DF4 7416                <1>     je .fileNameFound
  1138                              <1>     ;Was the char terminal?
  1139 00000DF6 807FFF0D            <1>     cmp byte [rdi - 1], CR
  1140 00000DFA 0F84A0010000        <1>     je .drvBad
  1141 00000E00 807FFF0A            <1>     cmp byte [rdi - 1], LF
  1142 00000E04 0F8496010000        <1>     je .drvBad
  1143 00000E0A EBE7                <1>     jmp short .drvFindEndOfFileName
  1144                              <1> .fileNameFound:
  1145 00000E0C C647FF00            <1>     mov byte [rdi - 1], 0   ;Null terminate the path to the file
  1146 00000E10 B8003D0000          <1>     mov eax, 3D00h  ;Read only file
  1147 00000E15 CD41                <1>     int 41h
  1148 00000E17 0F8283010000        <1>     jc .drvBad
  1149 00000E1D C647FF20            <1>     mov byte [rdi - 1], " " ;Replace the null with a space now again
  1150 00000E21 0FB7D8              <1>     movzx ebx, ax   ;Get the handle in ebx
  1151 00000E24 668905DE010000      <1>     mov word [.drvHandle], ax   ;Save the handle in variable
  1152 00000E2B 31D2                <1>     xor edx, edx    ;Move the handle to the end of the file
  1153 00000E2D B802420000          <1>     mov eax, 4202h  ;LSEEK to SEEK_END
  1154 00000E32 CD41                <1>     int 41h
  1155 00000E34 89C1                <1>     mov ecx, eax    ;Get the file size in ecx
  1156 00000E36 31D2                <1>     xor edx, edx    ;Move the handle to the start of the file
  1157 00000E38 B800420000          <1>     mov eax, 4200h  ;LSEEK to SEEK_SET (start of the file)
  1158 00000E3D CD41                <1>     int 41h
  1159                              <1>     ;Now we read ecx bytes to rsi as rsi points to first byte past the end
  1160                              <1>     ; of the DEVICE= line 
  1161 00000E3F 4889F2              <1>     mov rdx, rsi    ;Point to first byte past the end of DEVICE= line
  1162 00000E42 89CE                <1>     mov esi, ecx    ;Save the number of bytes to read in esi
  1163 00000E44 B8003F0000          <1>     mov eax, 3F00h  ;Read handle    
  1164 00000E49 CD41                <1>     int 41h
  1165 00000E4B 0F8241010000        <1>     jc .drvBadClose
  1166 00000E51 39CE                <1>     cmp esi, ecx    ;Were all bytes read in?
  1167 00000E53 0F8539010000        <1>     jne .drvBadClose
  1168                              <1>     ;Ok, full file read in, now prepare to call driver init routine
  1169 00000E59 4889D6              <1>     mov rsi, rdx    ;Move ptr to driver header to rsi
  1170 00000E5C 488D1D87010000      <1>     lea rbx, .drvInitStruc
  1171 00000E63 C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
  1172 00000E66 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], drvINIT
  1173 00000E6A 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0
  1174 00000E70 C6430D00            <1>     mov byte [rbx + initReqPkt.numunt], 0
  1175 00000E74 488B45A0            <1>     mov rax, qword [rbp - cfgFrame.linePtr] ;Get the line pointer
  1176 00000E78 480507000000        <1>     add rax, 7  ;Goto the first byte past DEVICE=
  1177 00000E7E 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
  1178 00000E82 48C7431600000000    <1>     mov qword [rbx + initReqPkt.optptr], 0
  1179 00000E8A 640FB60425-         <1>     movzx eax, byte fs:[numPhysVol]
  1179 00000E8F [7DC00300]          <1>
  1180 00000E93 FFC8                <1>     dec eax ;Get a 0 based count
  1181 00000E95 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al
  1182 00000E98 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
  1183 00000E9B FF5612              <1>     call qword [rsi + drvHdr.intPtr]
  1184 00000E9E 66F743030001        <1>     test word [rbx + initReqPkt.status], drvDonStatus
  1185 00000EA4 0F84E8000000        <1>     jz .drvBadClose
  1186 00000EAA 66F743030080        <1>     test word [rbx + initReqPkt.status], drvErrStatus
  1187 00000EB0 0F85DC000000        <1>     jnz .drvBadClose
  1188                              <1>     ;Now check that the driver wants to be installed
  1189 00000EB6 483B730E            <1>     cmp rsi, qword [rbx + initReqPkt.endptr]    ;This is for char and blk devs
  1190 00000EBA 0F84C2000000        <1>     je .drvWantsClose
  1191 00000EC0 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
  1192 00000EC6 750A                <1>     jnz .drvChar
  1193 00000EC8 807B0D00            <1>     cmp byte [rbx + initReqPkt.numunt], 0
  1194 00000ECC 0F84B0000000        <1>     je .drvWantsClose
  1195                              <1> .drvChar:
  1196                              <1>     ;Otherwise, this init passed, now build the structures we need.
  1197                              <1>     ;First adjust .endPtr
  1198 00000ED2 488B430E            <1>     mov rax, qword [rbx + initReqPkt.endptr]    ;Get the end pointer
  1199 00000ED6 488945A8            <1>     mov qword [rbp - cfgFrame.endPtr], rax  ;Move it here
  1200                              <1>     ;Now we link the driver into the driver chain
  1201 00000EDA 488B3D(80C00300)    <1>     mov rdi, qword [nulDevHdr + drvHdr.nxtPtr]  ;Get next ptr from nul drvr
  1202 00000EE1 48893E              <1>     mov qword [rsi + drvHdr.nxtPtr], rdi    ;And store it here
  1203 00000EE4 488935(80C00300)    <1>     mov qword [nulDevHdr + drvHdr.nxtPtr], rsi  ;And link nul to this driver
  1204                              <1>     ;Now if we are a char device, we are done so check here
  1205 00000EEB 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
  1206 00000EF1 0F85B9000000        <1>     jnz .drvWantsCloseChar  ;We are complete
  1207                              <1>     ;Now for block devices, we get the BPB ptr array and numUnits supported
  1208 00000EF7 0FB64B0D            <1>     movzx ecx, byte [rbx + initReqPkt.numunt]
  1209 00000EFB 488B5B16            <1>     mov rbx, qword [rbx + initReqPkt.optptr]    ;Get the BPB array pointer
  1210                              <1> 
  1211 00000EFF 4889F2              <1>     mov rdx, rsi    ;Move the driver pointer to rdx
  1212 00000F02 488B75A8            <1>     mov rsi, qword [rbp - cfgFrame.endPtr]  ;Build DPB array here
  1213 00000F06 4889F7              <1>     mov rdi, rsi    ;Move rdi here too, to point to first new DPB later
  1214 00000F09 51                  <1>     push rcx
  1215 00000F0A 52                  <1>     push rdx
  1216 00000F0B 31D2                <1>     xor edx, edx
  1217 00000F0D B835000000          <1>     mov eax, dpb_size
  1218 00000F12 F7E1                <1>     mul ecx ;Multiply the number of DPB's needed with the size of a dpb
  1219 00000F14 480145A8            <1>     add qword [rbp - cfgFrame.endPtr], rax  ;Add this value to endPtr
  1220 00000F18 5A                  <1>     pop rdx ;Get back the driver ptr in rdx
  1221 00000F19 59                  <1>     pop rcx ;Get back the number of units count
  1222                              <1>     
  1223 00000F1A 4887EB              <1>     xchg rbp, rbx   ;Swap stack frame ptr and BPB array ptr
  1224 00000F1D 4887F5              <1>     xchg rsi, rbp   ;Swap BPB array and DPB space ptrs
  1225                              <1> .drvBuildDPB:
  1226 00000F20 B800530000          <1>     mov eax, 5300h
  1227 00000F25 CD41                <1>     int 41h
  1228 00000F27 4881C678000000      <1>     add rsi, bpbEx_size ;Goto next bpb in array
  1229                              <1>     ;Adjust fields in DPB
  1230 00000F2E 64FE0425[7DC00300]  <1>     inc byte fs:[numPhysVol] 
  1231 00000F36 648A0425[7DC00300]  <1>     mov al, byte fs:[numPhysVol]
  1232 00000F3E 884500              <1>     mov byte [rbp + dpb.bDriveNumber], al
  1233 00000F41 886D01              <1>     mov byte [rbp + dpb.bUnitNumber], ch
  1234 00000F44 4889551B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rdx
  1235 00000F48 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Point to next DPB
  1236 00000F4C 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
  1237 00000F50 FEC5                <1>     inc ch  ;Increment unit number 
  1238 00000F52 38E9                <1>     cmp cl, ch  ;Are we done?
  1239 00000F54 7409                <1>     je .dpbInitDone
  1240 00000F56 4881C535000000      <1>     add rbp, dpb_size   ;Go to space for next DPB
  1241 00000F5D EBC1                <1>     jmp short .drvBuildDPB
  1242                              <1> .dpbInitDone:
  1243                              <1> ;Make sure we now make the last qNextDPBPtr = -1
  1244 00000F5F 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
  1245                              <1>     ;Now we set the old last dpb to point to the first one
  1246 00000F67 64488B3425-         <1>     mov rsi, qword fs:[dpbHeadPtr]
  1246 00000F6C [41C00300]          <1>
  1247                              <1> .drvDPBLp:
  1248 00000F70 807E25FF            <1>     cmp byte [rsi + dpb.qNextDPBPtr], -1
  1249 00000F74 7406                <1>     je .drvLastDPBFound
  1250 00000F76 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Goto next DPB
  1251 00000F7A EBF4                <1>     jmp short .drvDPBLp
  1252                              <1> .drvLastDPBFound:
  1253 00000F7C 48893E              <1>     mov qword [rsi], rdi    ;Chain this dpb now to the first new dpb
  1254 00000F7F 4889DD              <1>     mov rbp, rbx    ;Return the stack frame ptr to rbp
  1255                              <1> ;And we are done!
  1256                              <1> .drvWantsClose:
  1257                              <1> ;If the driver wants to not install silently, it can here
  1258 00000F82 0FB71D80000000      <1>     movzx ebx, word [.drvHandle] ;Get the handle back, close it and proceed
  1259 00000F89 B8003E0000          <1>     mov eax, 3E00h  
  1260 00000F8E CD41                <1>     int 41h 
  1261 00000F90 F8                  <1>     clc ;Never return with CF=CY
  1262                              <1>     return  
    13                              <2> %%_ret:
    14 00000F91 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1263                              <1> .drvBadClose:
  1264 00000F92 0FB71D70000000      <1>     movzx ebx, word [.drvHandle]    ;Get back handle to close
  1265 00000F99 B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
  1266 00000F9E CD41                <1>     int 41h
  1267                              <1> .drvBad:
  1268 00000FA0 488D1529000000      <1>     lea rdx, .drvBadMsg
  1269 00000FA7 B800090000          <1>     mov eax, 0900h
  1270 00000FAC CD41                <1>     int 41h
  1271 00000FAE F8                  <1>     clc ;Never return with CF=CY
  1272                              <1>     return
    13                              <2> %%_ret:
    14 00000FAF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1273                              <1> .drvWantsCloseChar:
  1274                              <1> ;Final checks, to see if we are CLOCK$ or CON
  1275 00000FB0 66F746080100        <1>     test word [rsi + drvHdr.attrib], devDrvConIn
  1276 00000FB6 7407                <1>     jz .dwccClock
  1277 00000FB8 488935(59C00300)    <1>     mov qword [vConPtr], rsi
  1278                              <1> .dwccClock:
  1279 00000FBF 66F746080800        <1>     test word [rsi + drvHdr.attrib], devDrvClockDev
  1280 00000FC5 74BB                <1>     jz .drvWantsClose
  1281 00000FC7 488935(51C00300)    <1>     mov qword [clockPtr], rsi
  1282 00000FCE EBB2                <1>     jmp short .drvWantsClose
  1283 00000FD0 426164206F72206D69- <1> .drvBadMsg: db "Bad or missing filename",CR,LF,"$"
  1283 00000FD9 7373696E672066696C- <1>
  1283 00000FE2 656E616D650D0A24    <1>
  1284 00000FEA 000000000000000000- <1> .drvInitStruc: db initReqPkt_size dup (0)  
  1284 00000FF3 000000000000000000- <1>
  1284 00000FFC 000000000000000000- <1>
  1284 00001005 00000000            <1>
  1285 00001009 FFFF                <1> .drvHandle: dw -1
  1286                              <1> 
  1287                              <1> .fcbHandler:
  1288                              <1>     return
    13                              <2> %%_ret:
    14 0000100B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1289                              <1> .sftHandler:
  1290                              <1> ;This reads the line to set the number of FILE to between 1 and 254
  1291 0000100C 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1292 00001010 4881C606000000      <1>     add rsi, 6  ;Go past FILES=
  1293                              <1>     ;This must be at most three digits, anything else is a failure
  1294 00001017 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
  1295 0000101A 31C9                <1>     xor ecx, ecx
  1296 0000101C AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
  1297 0000101D 3C30                <1>     cmp al, "0"
  1298 0000101F 725E                <1>     jb .sftHandlerErr
  1299 00001021 3C39                <1>     cmp al, "9"
  1300 00001023 775A                <1>     ja .sftHandlerErr
  1301 00001025 FFC1                <1>     inc ecx ;Increment char counter
  1302 00001027 AC                  <1>     lodsb   ;Get second char
  1303 00001028 E854000000          <1>     call .sftHandlerTermCheck
  1304 0000102D 7420                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
  1305 0000102F 3C30                <1>     cmp al, "0"
  1306 00001031 724C                <1>     jb .sftHandlerErr
  1307 00001033 3C39                <1>     cmp al, "9"
  1308 00001035 7748                <1>     ja .sftHandlerErr
  1309 00001037 FFC1                <1>     inc ecx ;Increment char counter
  1310 00001039 AC                  <1>     lodsb   ;Get third char
  1311 0000103A E842000000          <1>     call .sftHandlerTermCheck
  1312 0000103F 3C30                <1>     cmp al, "0"
  1313 00001041 723C                <1>     jb .sftHandlerErr
  1314 00001043 3C32                <1>     cmp al, "2" ;Max BUFFERS=254 soooo, sorry buddy!
  1315 00001045 7738                <1>     ja .sftHandlerErr
  1316 00001047 AC                  <1>     lodsb   ;Check no more chars!
  1317 00001048 E834000000          <1>     call .sftHandlerTermCheck
  1318 0000104D 7530                <1>     jne .sftHandlerErr
  1319                              <1> .sftHandlerProcess:
  1320 0000104F 31D2                <1>     xor edx, edx    ;Accumulate value in edx
  1321 00001051 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
  1322                              <1> .sftHandlerLp:
  1323 00001054 AC                  <1>     lodsb   ;Get the digit
  1324 00001055 E81B000000          <1>     call .sftHandlerMul
  1325 0000105A 67E304              <1>     jecxz .sftHandlerPrepExit
  1326 0000105D FFC9                <1>     dec ecx
  1327 0000105F EBF3                <1>     jmp short .sftHandlerLp 
  1328                              <1> .sftHandlerPrepExit:
  1329                              <1> ;edx has the value now, so place it in stack
  1330 00001061 B914000000          <1>     mov ecx, filesDefault  ;Get default if the user specifies less than min
  1331 00001066 81FA08000000        <1>     cmp edx, 8
  1332 0000106C 0F42D1              <1>     cmovb edx, ecx
  1333 0000106F 488955F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rdx
  1334 00001073 F8                  <1>     clc
  1335                              <1>     return
    13                              <2> %%_ret:
    14 00001074 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1336                              <1> .sftHandlerMul:
  1337 00001075 2C30                <1>     sub al, "0" ;Convert to a binary value
  1338 00001077 F6E1                <1>     mul cl  ;Multiply al by cl, answer in ax
  1339 00001079 0FB7C0              <1>     movzx eax, ax
  1340 0000107C 01C2                <1>     add edx, eax
  1341                              <1>     return
    13                              <2> %%_ret:
    14 0000107E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1342                              <1> .sftHandlerErr:
  1343 0000107F F9                  <1>     stc
  1344                              <1>     return
    13                              <2> %%_ret:
    14 00001080 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1345                              <1> .sftHandlerTermCheck:
  1346 00001081 3C20                <1>     cmp al, SPC
  1347                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001083 74(80)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1348 00001085 3C09                <1>     cmp al, TAB
  1349                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001087 74(80)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1350 00001089 3C0D                <1>     cmp al, CR
  1351                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000108B 74(80)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1352 0000108D 3C0A                <1>     cmp al, LF
  1353                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000108F 74(80)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1354                              <1>     return
    13                              <2> %%_ret:
    14 00001091 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1355                              <1> .lastdriveHandler:
  1356 00001092 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1357 00001096 4881C60A000000      <1>     add rsi, 10  ;Go past LASTDRIVE=
  1358 0000109D AC                  <1>     lodsb   ;Get this char
  1359 0000109E 0FB6C0              <1>     movzx eax, al   ;Zero extend to eax
  1360 000010A1 50                  <1>     push rax    ;Push on stack
  1361 000010A2 B813120000          <1>     mov eax, 1213h  ;Uppercase the char
  1362 000010A7 CD4F                <1>     int 4Fh
  1363 000010A9 5B                  <1>     pop rbx
  1364 000010AA 3C5A                <1>     cmp al, "Z"
  1365 000010AC 77D1                <1>     ja .sftHandlerErr
  1366 000010AE 3C41                <1>     cmp al, "A"
  1367 000010B0 72CD                <1>     jb .sftHandlerErr
  1368 000010B2 803E0D              <1>     cmp byte [rsi], CR
  1369 000010B5 740F                <1>     je .ldProceed
  1370 000010B7 803E0A              <1>     cmp byte [rsi], LF
  1371 000010BA 740A                <1>     je .ldProceed
  1372 000010BC 803E09              <1>     cmp byte [rsi], TAB
  1373 000010BF 7405                <1>     je .ldProceed
  1374 000010C1 803E20              <1>     cmp byte [rsi], SPC
  1375 000010C4 75B9                <1>     jne .sftHandlerErr
  1376                              <1> .ldProceed:
  1377 000010C6 2C41                <1>     sub al, "A" ;Convert into a number
  1378 000010C8 0FB6C0              <1>     movzx eax, al   ;Zero extend in case DOS rets something dumb in upper bits
  1379 000010CB BA05000000          <1>     mov edx, lastDriveDeflt
  1380 000010D0 3D05000000          <1>     cmp eax, lastDriveDeflt
  1381 000010D5 0F42C2              <1>     cmovb eax, edx
  1382 000010D8 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
  1383 000010DC F8                  <1>     clc
  1384                              <1>     return
    13                              <2> %%_ret:
    14 000010DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1385                              <1> .ldBad:
  1386 000010DE F9                  <1>     stc
  1387                              <1>     return
    13                              <2> %%_ret:
    14 000010DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1388                              <1> .shellHandler:
  1389                              <1>     return
    13                              <2> %%_ret:
    14 000010E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1390                              <1> .stacksHandler:
  1391                              <1>     return
    13                              <2> %%_ret:
    14 000010E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1392                              <1> .drivParm:
  1393                              <1>     return
    13                              <2> %%_ret:
    14 000010E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1394                              <1> 
  1395                              <1> .cfgExit:
  1396 000010E3 488B5DB8            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle] ;Get the handle back
  1397 000010E7 B83E000000          <1>     mov eax, 3eh    ;Close the handle
  1398 000010EC CD41                <1>     int 41h ;bx already has the handle
  1399                              <1> ;------------------------------------------------;
  1400                              <1> ;   Setup Final Data Areas With Overrides from   ;
  1401                              <1> ;                  CONFIG.SYS                    ;
  1402                              <1> ;------------------------------------------------;
  1403                              <1> ;Add additional buffers. Start from tmpBufHdr
  1404                              <1> ;Add additional SFT entries. By default, 1 new SFT header, with 15 SFT entries
  1405                              <1> ;Add additional FCBS.
  1406                              <1> ;Create a larger CDS if needed.
  1407                              <1> noCfg:
  1408                              <1> ;Start with buffers:
  1409 000010EE 488B4DF8            <1>     mov rcx, qword [rbp - cfgFrame.newBuffers]    ;Get new buffers size
  1410 000010F2 64880C25[7FC00300]  <1>     mov byte fs:[numBuffers], cl    ;Store this value in var
  1411                              <1>     ;Now do the allocation at rdi. Each buffer = maxSectorSize + bufferHdr_size
  1412 000010FA 640FB71C25-         <1>     movzx ebx, word fs:[maxBytesSec]    ;Get buffer sector size
  1412 000010FF [61C00300]          <1>
  1413 00001103 81C330000000        <1>     add ebx, bufferHdr_size ;rbx has the size to add
  1414                              <1>     ;Each buffer has no flags, drive number must be -1
  1415 00001109 488B7DA8            <1>     mov rdi, qword [rbp - cfgFrame.endPtr]  ;Get current allocation end pointer
  1416 0000110D 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Reset the var here
  1416 00001112 [63C00300]          <1>
  1417 00001116 4889FE              <1>     mov rsi, rdi    ;Points rsi to first new buffer space
  1418 00001119 31C0                <1>     xor eax, eax    ;Use for sanitising buffer headers
  1419 0000111B 67E325              <1>     jecxz .lastBuffer
  1420                              <1> .bufferLoop:
  1421 0000111E 4801DF              <1>     add rdi, rbx    ;Goto next buffer space
  1422 00001121 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Point to next buffer
  1423 00001124 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1424 0000112A 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1425 0000112E 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1426 00001131 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1427 00001134 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1428 00001138 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
  1429 0000113C 4889FE              <1>     mov rsi, rdi    ;Move rsi to next buffer position
  1430 0000113F FFC9                <1>     dec ecx
  1431 00001141 75DB                <1>     jnz .bufferLoop
  1432                              <1> .lastBuffer:
  1433 00001143 4801DF              <1>     add rdi, rbx    ;Goto past the last buffer
  1434 00001146 48C706FFFFFFFF      <1>     mov qword [rsi + bufferHdr.nextBufPtr], -1 ;Point to no buffer
  1435 0000114D 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1436 00001153 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1437 00001157 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1438 0000115A 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1439 0000115D 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1440 00001161 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
  1441 00001165 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1442                              <1> 
  1443                              <1> ;Now build a new SFT header for the number of files specified by user
  1444 00001169 488B4DF0            <1>     mov rcx, qword [rbp - cfgFrame.newSFTVal]
  1445 0000116D 81F905000000        <1>     cmp ecx, 5  ;If we are not adding anything, skip building SFT
  1446 00001173 7430                <1>     je .skipSFT
  1447 00001175 64488B3425-         <1>     mov rsi, qword fs:[sftHeadPtr]  ;Get the current only SFT head pointer
  1447 0000117A [49C00300]          <1>
  1448 0000117E 48893E              <1>     mov qword [rsi + sfth.qNextSFTPtr], rdi ;Move rdi as new SFT pointer
  1449 00001181 662B4E08            <1>     sub cx, word [rsi + sfth.wNumFiles] ;Remove the number of files we already have
  1450 00001185 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move remaining files here
  1451 00001189 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;Last table in chain
  1452 00001190 4881C70A000000      <1>     add rdi, sfth_size  ;Goto sft area, now need to compute size
  1453 00001197 B84F000000          <1>     mov eax, sft_size
  1454 0000119C F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
  1455 0000119E 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
  1456 000011A1 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1457                              <1> .skipSFT:
  1458                              <1> ;FCBS at rdi
  1459 000011A5 6448893C25-         <1>     mov qword fs:[fcbsHeadPtr], rdi ;Setup the fcbs var here
  1459 000011AA [73C00300]          <1>
  1460 000011AE 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;No more FCBS headers for now
  1461 000011B5 488B4DE8            <1>     mov rcx, qword [rbp - cfgFrame.newFCBSVal]
  1462 000011B9 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move this value here
  1463 000011BD B84F000000          <1>     mov eax, sft_size
  1464 000011C2 F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
  1465 000011C4 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
  1466 000011C7 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1467 000011CB 488B4DE0            <1>     mov rcx, qword [rbp - cfgFrame.newProtFCBSVal] ;Get number of safe FCBs
  1468 000011CF 6466890C25-         <1>     mov word fs:[numSafeSFCB], cx   ;And save that there
  1468 000011D4 [7BC00300]          <1>
  1469                              <1> ;And CDS now
  1470 000011D8 488B4DD8            <1>     mov rcx, qword [rbp - cfgFrame.newLastdrive]
  1471 000011DC 64880C25[7EC00300]  <1>     mov byte fs:[lastdrvNum], cl ;Save this value
  1472 000011E4 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi  ;Point cdsHeadPtr here
  1472 000011E9 [6BC00300]          <1>
  1473 000011ED E839F6FFFF          <1>     call makeCDSArray
  1474 000011F2 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1475                              <1> 
  1476                              <1> ;Computation of new space is complete, now work out how many bytes this is
  1477 000011F6 4889EC              <1>     mov rsp, rbp    ;Return stack pointer to original position
  1478 000011F9 5D                  <1>     pop rbp
  1479 000011FA 488D9D[10000000]    <1>     lea rbx, qword [rbp + dosDynamicArea]
  1480 00001201 4829DF              <1>     sub rdi, rbx    ;Gives difference now
  1481 00001204 678D5F11            <1>     lea ebx, dword [edi + 11h]  ;Add 11 to round up a paragraph
  1482 00001208 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
  1483                              <1> ;Resize DOS allocation before loading COMMAND.COM
  1484 0000120B 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
  1484 00001210 [39C00300]          <1>
  1485 00001214 4981C010000000      <1>     add r8, mcb.program
  1486 0000121B B44A                <1>     mov ah, 4Ah
  1487 0000121D CD41                <1>     int 41h
  1488                              <1> ;Now we close all five default handles and open AUX, CON and PRN.
  1489 0000121F 644C8B0425-         <1>     mov r8, qword fs:[currentPSP]
  1489 00001224 [14C40300]          <1>
  1490 00001228 31DB                <1>     xor ebx, ebx
  1491                              <1> closeHandlesLoop:
  1492 0000122A B8003E0000          <1>     mov eax, 3e00h  ;Close
  1493 0000122F CD41                <1>     int 41h
  1494 00001231 FFC3                <1>     inc ebx ;Goto next handle
  1495 00001233 81FB06000000        <1>     cmp ebx, 6
  1496 00001239 75EF                <1>     jne closeHandlesLoop
  1497 0000123B 488D1557010000      <1>     lea rdx, auxName
  1498 00001242 B8023D0000          <1>     mov eax, 3D02h   ;Open read/write
  1499 00001247 CD41                <1>     int 41h
  1500 00001249 89C3                <1>     mov ebx, eax
  1501 0000124B B903000000          <1>     mov ecx, 3  ;
  1502 00001250 B800460000          <1>     mov eax, 4600h  ;DUP2
  1503 00001255 CD41                <1>     int 41h
  1504 00001257 B8003E0000          <1>     mov eax, 3e00h
  1505 0000125C CD41                <1>     int 41h ;Close the original handle
  1506 0000125E B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
  1507 00001263 488D152B010000      <1>     lea rdx, conName
  1508 0000126A CD41                <1>     int 41h
  1509 0000126C 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
  1510 0000126E B800450000          <1>     mov eax, 4500h  ;DUP
  1511 00001273 CD41                <1>     int 41h
  1512 00001275 B800450000          <1>     mov eax, 4500h  ;DUP
  1513 0000127A CD41                <1>     int 41h
  1514 0000127C 488D151A010000      <1>     lea rdx, prnName
  1515 00001283 B8023D0000          <1>     mov eax, 3D02h
  1516 00001288 CD41                <1>     int 41h       ;Open file
  1517                              <1> 
  1518                              <1>     
  1519                              <1>     %if DEBUG && ALLOCTEST
  1520                              <1> ;Test Allocation, Growth and Deallocation
  1521                              <1>     mov r15, qword fs:[currentPSP]
  1522                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
  1523                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
  1524                              <1>     mov ah, 48h ;Allocate
  1525                              <1>     int 41h
  1526                              <1> 
  1527                              <1>     mov byte [rax - 10h], 0 ;Trash chain
  1528                              <1>     mov r8, rax ;Move the pointer to r8
  1529                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
  1530                              <1>     mov ah, 4Ah
  1531                              <1>     int 41h
  1532                              <1> 
  1533                              <1>     mov ah, 49h ;Free r8
  1534                              <1>     int 41h
  1535                              <1>     mov qword fs:[currentPSP], r15
  1536                              <1>     %endif
  1537                              <1> 
  1538                              <1>     %if ENDSTATUS
  1539                              <1> debugFinal:
  1540                              <1>     ;Print system state
  1541                              <1>     push rbp    ;Only rbp really matters here
  1542                              <1>     mov r8, rbp
  1543                              <1> 
  1544                              <1>     lea rbp, .msg2
  1545                              <1>     lea r9, qword [r8 + debPrintNullString]
  1546                              <1>     call r9
  1547                              <1> 
  1548                              <1>     lea rbx, qword [.msg + 15]
  1549                              <1>     mov rax, qword fs:[biosUBase]
  1550                              <1> 
  1551                              <1>     lea r9, qword [r8 + overlayQword]
  1552                              <1>     call r9
  1553                              <1> 
  1554                              <1>     add rbx, 19+8
  1555                              <1>     mov rax, qword fs:[dosSegPtr]
  1556                              <1>     call r9
  1557                              <1> 
  1558                              <1>     add rbx, 19+8
  1559                              <1>     mov rax, qword fs:[mcbChainPtr]
  1560                              <1>     call r9
  1561                              <1> 
  1562                              <1>     add rbx, 20+8
  1563                              <1>     lea r9, qword [r8 + overlayDword]
  1564                              <1>     mov eax, dword fs:[loProtMem]
  1565                              <1>     call r9
  1566                              <1> 
  1567                              <1>     add rbx, 10+8
  1568                              <1>     mov eax, dword fs:[hiProtMem]
  1569                              <1>     call r9
  1570                              <1> 
  1571                              <1>     add rbx, 10+8
  1572                              <1>     mov rax, qword fs:[longMem]
  1573                              <1>     lea r9, qword [r8 + overlayQword]
  1574                              <1>     call r9
  1575                              <1> 
  1576                              <1>     add rbx, 19+8
  1577                              <1>     mov rax, qword fs:[dpbHeadPtr]
  1578                              <1>     call r9
  1579                              <1> 
  1580                              <1>     add rbx, 19+8
  1581                              <1>     mov rax, qword fs:[sftHeadPtr]
  1582                              <1>     call r9
  1583                              <1> 
  1584                              <1>     add rbx, 19+8
  1585                              <1>     mov rax, qword fs:[bufHeadPtr]
  1586                              <1>     call r9
  1587                              <1> 
  1588                              <1>     add rbx, 19+8
  1589                              <1>     mov rax, qword fs:[cdsHeadPtr]
  1590                              <1>     call r9
  1591                              <1> 
  1592                              <1>     lea r9, qword [r8 + overlayByte]
  1593                              <1> 
  1594                              <1>     add rbx, 25+19
  1595                              <1>     movzx rax, byte fs:[numPhysVol]
  1596                              <1>     call r9
  1597                              <1> 
  1598                              <1>     add rbx, 30
  1599                              <1>     movzx rax, byte fs:[numFixDrv]
  1600                              <1>     call r9
  1601                              <1> 
  1602                              <1>     add rbx, 30
  1603                              <1>     movzx rax, byte fs:[numRemDrv]
  1604                              <1>     call r9
  1605                              <1> 
  1606                              <1>     add rbx, 16
  1607                              <1>     movzx rax, byte fs:[bootDrive]
  1608                              <1>     add al, "A"
  1609                              <1>     mov byte [rbx], al
  1610                              <1> 
  1611                              <1>     lea rbp, .msg
  1612                              <1>     lea r9, qword [r8 + debPrintNullString]
  1613                              <1>     call r9
  1614                              <1>     pop rbp
  1615                              <1>     jmp l1
  1616                              <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
  1617                              <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1618                              <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
  1619                              <1>         db "Arena1: FFFFFFFFh ",
  1620                              <1>         db "Arena2: FFFFFFFFh ",
  1621                              <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1622                              <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1623                              <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1624                              <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1625                              <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1626                              <1>         db "Number of Logical Drives FFh",0Ah,0Dh
  1627                              <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
  1628                              <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
  1629                              <1>         db "Boot drive Z:",0Ah,0Dh
  1630                              <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
  1631                              <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
  1632                              <1>     %endif
  1633                              <1> l1:
  1634                              <1>     ;Load COMMAND.COM
  1635                              <1>     ;Get currentPSP ptr
  1636 0000128A B462                <1>     mov ah, 62h ;Get current PSP ptr in rdx
  1637 0000128C CD41                <1>     int 41h
  1638 0000128E B419                <1>     mov ah, 19h ;Get current Drive letter in al
  1639 00001290 CD41                <1>     int 41h
  1640 00001292 0441                <1>     add al, "A"
  1641 00001294 880512010000        <1>     mov byte [cmdLine], al  ;Store drive letter at start of command line
  1642 0000129A 488D1D1A010000      <1>     lea rbx, cmdBlock
  1643 000012A1 488D425C            <1>     lea rax, qword [rdx + psp.fcb1]
  1644 000012A5 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1645 000012A9 488D426C            <1>     lea rax, qword [rdx + psp.fcb2]
  1646 000012AD 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1647 000012B1 488D15F4000000      <1>     lea rdx, cmdLine
  1648 000012B8 48895308            <1>     mov qword [rbx + execProg.pCmdLine], rdx    ;Store command line here
  1649 000012BC B8004B0000          <1>     mov eax, 4B00h  ;Exec Prog
  1650 000012C1 CD41                <1>     int 41h
  1651 000012C3 488D15A6000000      <1>     lea rdx, badCom
  1652 000012CA B409                <1>     mov ah, 09h ;Print message
  1653 000012CC CD41                <1>     int 41h
  1654 000012CE E92A000000          <1>     jmp errorInit.ei0
  1655                              <1>     
  1656                              <1> ;--------------------------------
  1657                              <1> ;       PROCS FOR SYSINIT       :
  1658                              <1> ;--------------------------------
  1659                              <1> adjustDrvHdr:
  1660                              <1> ;Input: rsi = Effective address of driver in DOS segment
  1661                              <1> ;       rbp = Ptr to the start of the DOS segment
  1662                              <1> ;Output: rsi = EA of next header in DOS segment
  1663 000012D3 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
  1664 000012D7 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
  1665 000012DB 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
  1666 000012E2 740A                <1>     je .exit
  1667 000012E4 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
  1668 000012E7 4881C622000000      <1>     add rsi, drvHdr_size
  1669                              <1> .exit:
  1670 000012EE C3                  <1>     ret
  1671                              <1> errorInit:
  1672                              <1> ;If a critical error occurs during sysinit, fail through here
  1673                              <1> ;Int 42h, 43h and 44h point here during sysinit
  1674 000012EF 488D2D49000000      <1>     lea rbp, hltmsg
  1675 000012F6 B804130000          <1>     mov eax, 1304h
  1676 000012FB CD30                <1>     int 30h
  1677                              <1>     ;cli ;Clear interrupts
  1678                              <1>     ;mov al, -1
  1679                              <1>     ;mov dx, 0A1h    ;PIC2 data
  1680                              <1>     ;out dx, al      ;Mask all lines
  1681                              <1>     ;mov dx, 21h     ;PIC1 data
  1682                              <1>     ;out dx, al      ;Mask all lines
  1683                              <1> .ei0:
  1684 000012FD F4                  <1>     hlt
  1685 000012FE F390                <1>     pause
  1686 00001300 EBFB                <1>     jmp short .ei0
  1687                              <1> noCmdCom:
  1688 00001302 488D1567000000      <1>     lea rdx, badCom
  1689 00001309 B409                <1>     mov ah, 09h
  1690 0000130B CD41                <1>     int 41h
  1691 0000130D EBEE                <1>     jmp short errorInit.ei0
  1692                              <1> ;--------------------------------
  1693                              <1> ;       DATA FOR SYSINIT        :
  1694                              <1> ;--------------------------------
  1695 0000130F 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
  1695 00001318 5343502F444F532E2E- <1>
  1695 00001321 2E0A0D24            <1>
  1696 00001325 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
  1696 0000132E 6C6F636174696F6E20- <1>
  1696 00001337 4572726F720A0D00    <1>
  1697 0000133F 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
  1697 00001348 7469616C6973696E67- <1>
  1697 00001351 20534350444F532E53- <1>
  1697 0000135A 59532E205379737465- <1>
  1697 00001363 6D2068616C74696E67- <1>
  1697 0000136C 2E2E2E00            <1>
  1698 00001370 426164206F72206D69- <1> badCom  db "Bad or missing Command interpreter",0Ah,0Dh,"$"
  1698 00001379 7373696E6720436F6D- <1>
  1698 00001382 6D616E6420696E7465- <1>
  1698 0000138B 727072657465720A0D- <1>
  1698 00001394 24                  <1>
  1699 00001395 434F4E00            <1> conName db "CON",0
  1700 00001399 41555800            <1> auxName db "AUX",0
  1701 0000139D 50524E00            <1> prnName db "PRN",0
  1702                              <1> 
  1703 000013A1 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
  1703 000013AA 5300                <1>
  1704 000013AC 5F3A5C434F4D4D414E- <1> cmdLine db "_:\COMMAND.COM",0
  1704 000013B5 442E434F4D00        <1>
  1705                              <1> cmdBlock:
  1706                              <1>     istruc execProg
  1707 000013BB 0000000000000000    <1>     at execProg.pEnv,       dq 0    ;Keep at 0 to "copy" DOS's environment ptr
  1708 000013C3 0000000000000000    <1>     at execProg.pCmdLine,   dq 0
  1709 000013CB 0000000000000000    <1>     at execProg.pfcb1,      dq 0    ;Set to DOS's fcb 1 and 2
  1710 000013D3 0000000000000000    <1>     at execProg.pfcb2,      dq 0
  1711                              <1>     iend
  1712                              <1> exceptData:
  1713 000013DB [B85C000000000000]  <1>     dq i0
  1714 000013E3 [BF5C000000000000]  <1>     dq i1
  1715 000013EB [C95C000000000000]  <1>     dq i2
  1716 000013F3 [D35C000000000000]  <1>     dq i3
  1717 000013FB [DD5C000000000000]  <1>     dq i4
  1718 00001403 [E75C000000000000]  <1>     dq i5
  1719 0000140B [EE5C000000000000]  <1>     dq i6
  1720 00001413 [F55C000000000000]  <1>     dq i7
  1721 0000141B [FC5C000000000000]  <1>     dq i8
  1722 00001423 [035D000000000000]  <1>     dq i9
  1723 0000142B [0A5D000000000000]  <1>     dq i10
  1724 00001433 [115D000000000000]  <1>     dq i11
  1725 0000143B [185D000000000000]  <1>     dq i12
  1726 00001443 [1F5D000000000000]  <1>     dq i13
  1727 0000144B [265D000000000000]  <1>     dq i14
  1728 00001453 [2D5D000000000000]  <1>     dq i15
  1729 0000145B [345D000000000000]  <1>     dq i16
  1730 00001463 [3B5D000000000000]  <1>     dq i17
  1731 0000146B [425D000000000000]  <1>     dq i18
  1732 00001473 [495D000000000000]  <1>     dq i19
  1733 0000147B [505D000000000000]  <1>     dq i20
  1734 00001483 [575D000000000000]  <1>     dq i21
  1735                              <1> 
  1736                              <1> intData:
  1737 0000148B [1951000000000000]  <1>     dq terminateProcess ;Int 40h
  1738 00001493 [7F67000000000000]  <1>     dq functionDispatch ;Int 41h
  1739 0000149B [EF12000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
  1740 000014A3 [D568000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
  1741 000014AB [8060000000000000]  <1>     dq dosDefCritErrHdlr 
  1742 000014B3 [5061000000000000]  <1>     dq absDiskRead      ;Int 45h
  1743 000014BB [3161000000000000]  <1>     dq absDiskWrite     ;Int 46h
  1744 000014C3 [2051000000000000]  <1>     dq terminateRes     ;Int 47h
  1745 000014CB [D568000000000000]  <1>     dq defaultIretq     ;Int 48h
  1746 000014D3 [D568000000000000]  <1>     dq defaultIretq     ;Int 49h
  1747 000014DB [D568000000000000]  <1>     dq defaultIretq     ;Int 4Ah
  1748 000014E3 [D568000000000000]  <1>     dq defaultIretq     ;Int 4Bh
  1749 000014EB [D568000000000000]  <1>     dq defaultIretq     ;Int 4Ch
  1750 000014F3 [D568000000000000]  <1>     dq defaultIretq     ;Int 4Dh
  1751 000014FB [D568000000000000]  <1>     dq defaultIretq     ;Int 4Eh
  1752 00001503 [836F000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
  1753                              <1> nData:
  1754 0000150B [3171000000000000]  <1>     dq conHdr
  1755 00001513 0480                <1>     dw 08004h
  1756 00001515 [D972000000000000]  <1>     dq nulStrat
  1757 0000151D [DF72000000000000]  <1>     dq nulIntr
  1758 00001525 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1759                              <1> 
  1760                              <1> diskInit:
  1761                              <1>     ;We create a function to deal with BPB parsing etc
  1762                              <1>     ;Start with the first primary partition on each hard disk (until max)
  1763                              <1>     ;   They dont have to be bootable
  1764                              <1>     ;Then go back and look for other partitions partitions. 
  1765                              <1>     ;   Add each other primary or logical ptn (until max)
  1766                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
  1767                              <1>     ;Use r8 as device counter
  1768                              <1>     ;Use r15 as the pointer to the next free BPB entry
  1769                              <1>     ;First set up the two default BPB's if no removable drives
  1770 0000152D 4C8DBD[E37B0000]    <1>     lea r15, [rbp + msdDriver.msdBPBblks]    ;Point to the BPB storage place
  1771 00001534 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
  1771 0000153C 00                  <1>
  1772 0000153D 0F8480000000        <1>     jz .remInit ;No? Go to removables
  1773 00001543 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
  1773 0000154C 00                  <1>
  1774 0000154D B280                <1>     mov dl, 80h ;Start with HDD 0
  1775                              <1> .primary:
  1776 0000154F 64803C25[7DC00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1776 00001557 03                  <1>
  1777 00001558 7469                <1>     je .remInit
  1778 0000155A 31C9                <1>     xor ecx, ecx    ;Sector 0
  1779 0000155C E8EC000000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
  1780 00001561 724F                <1>     jc .primaryEpilog
  1781                              <1>     ;Here, check MBR or BPB
  1782 00001563 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
  1783 0000156C 7544                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
  1784                              <1>     ;Now check if BPB or MBR
  1785 0000156E 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1786 00001570 8A6302              <1>     mov ah, byte [rbx + 2]
  1787 00001573 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1788 00001577 7439                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
  1789                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
  1790                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
  1791 00001579 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
  1792 00001580 B104                <1>     mov cl, 4
  1793                              <1> .checkPrimary:
  1794 00001582 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
  1795 00001585 3C01                <1>     cmp al, 01
  1796 00001587 7421                <1>     je .primaryFound
  1797 00001589 3C04                <1>     cmp al, 04
  1798 0000158B 741D                <1>     je .primaryFound
  1799 0000158D 3C06                <1>     cmp al, 06
  1800 0000158F 7419                <1>     je .primaryFound
  1801 00001591 3C0B                <1>     cmp al, 0Bh
  1802 00001593 7415                <1>     je .primaryFound
  1803 00001595 3C0C                <1>     cmp al, 0Ch
  1804 00001597 7411                <1>     je .primaryFound
  1805 00001599 3C0E                <1>     cmp al, 0Eh
  1806 0000159B 740D                <1>     je .primaryFound
  1807 0000159D 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1808 000015A4 FEC9                <1>     dec cl
  1809 000015A6 740A                <1>     jz .primaryEpilog
  1810 000015A8 EBD8                <1>     jmp short .checkPrimary
  1811                              <1> .primaryFound:
  1812                              <1>     ;Copy the first sector of this partition into memory
  1813 000015AA 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1814 000015AD E8A9000000          <1>     call .readSectorAndAddDataToTables
  1815                              <1> .primaryEpilog:
  1816 000015B2 FEC2                <1>     inc dl  ;Goto next BIOS drive
  1817 000015B4 88D6                <1>     mov dh, dl
  1818 000015B6 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1819 000015B9 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1820 000015C1 758C                <1>     jne .primary    ;Whilst we have fewer, go back
  1821                              <1> .extended:
  1822                              <1> ;We have gone through all the devices once
  1823                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1824                              <1>     ;je .remInit ;If yes, get removable devices
  1825                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1826                              <1>     ;xor ecx, ecx    ;Get MBR back
  1827                              <1>     ;call .initReadSector
  1828                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1829                              <1> .remInit:
  1830                              <1> ;Start by linking the default BPB's in the pointers table in the event that
  1831                              <1> ; for some reason the removable drives stop working or dont exist.
  1832 000015C3 488DB5[3B7E0000]    <1>     lea rsi, qword [rbp + msdDriver.dfltBPB]  ;Point to the default BPB
  1833 000015CA 488DBD[BB7B0000]    <1>     lea rdi, qword [rbp + msdDriver.msdBPBTbl]  ;Point to the BPB ptr table
  1834 000015D1 488937              <1>     mov qword [rdi], rsi    ;Store the pointer in the first two entries
  1835 000015D4 48897708            <1>     mov qword [rdi + 8], rsi
  1836                              <1> ;This forces the hard drives to start at C:
  1837 000015D8 4D89C1              <1>     mov r9, r8  ;Save number of next device after fixed drive in r9
  1838 000015DB 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1839 000015DD 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1840                              <1>     ;rdi points to the space for the subsequent bpb's
  1841 000015E0 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 0  ;Just skip removable init if no rem drives
  1841 000015E8 00                  <1>
  1842 000015E9 750A                <1>     jnz .removables
  1843 000015EB 64800425[7DC00300]- <1>     add byte fs:[numPhysVol], 2 ;Pretend we have two more drives (A: and B:)
  1843 000015F3 02                  <1>
  1844 000015F4 C3                  <1>     ret ;and return!
  1845                              <1> .removables:
  1846 000015F5 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1847 000015F7 E85F000000          <1>     call .readSectorAndAddDataToTables
  1848                              <1> .removableEpilogue:
  1849 000015FC FEC2                <1>     inc dl  ;Goto next BIOS device now
  1850 000015FE 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1851 00001606 7412                <1>     je .end
  1852 00001608 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1853 0000160F 7503                <1>     jne .re0
  1854 00001611 4588C8              <1>     mov r8b, r9b    ;Return to this drive number
  1855                              <1> .re0:
  1856 00001614 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1857 00001618 72DB                <1>     jb .removables
  1858                              <1> .end:
  1859 0000161A 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1859 00001622 01                  <1>
  1860 00001623 7401                <1>     je .singleRemDev
  1861 00001625 C3                  <1>     ret
  1862                              <1> .singleRemDev:
  1863                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1864 00001626 488D9D[B17B0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1865 0000162D 8A95[B17B0000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1866 00001633 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1867 00001636 488D9D[BB7B0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1868 0000163D 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1869 00001640 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1870 00001644 64FE0425[7DC00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1871 0000164C C3                  <1>     ret
  1872                              <1> .initReadSector:
  1873                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1874 0000164D B482                <1>     mov ah, 82h ;Read
  1875 0000164F B001                <1>     mov al, 1   ;One sector
  1876 00001651 488D9D[10030000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1877 00001658 CD33                <1>     int 33h
  1878 0000165A C3                  <1>     ret
  1879                              <1> 
  1880                              <1> .readSectorAndAddDataToTables:
  1881                              <1> ;Input:
  1882                              <1> ;ecx = Sector number to read
  1883                              <1> ;r15 -> bpb array entry for the BPB
  1884                              <1> ;r8 = Logical Drive number (offset into arrays)
  1885 0000165B E8EDFFFFFF          <1>     call .initReadSector
  1886                              <1>     retc   ;Goto next device
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001660 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001662 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1887                              <1>     ;Now verify this is a BPB
  1888 00001663 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1889 00001665 8A6302              <1>     mov ah, byte [rbx + 2]
  1890 00001668 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1891                              <1>     retne   ;If not, skip
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000166C 75(62)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1892                              <1>     ;Now copy data to internal tables
  1893 0000166E 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1894 00001671 51                  <1>     push rcx
  1895 00001672 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1896 00001677 4C89FF              <1>     mov rdi, r15
  1897 0000167A F348A5              <1>     rep movsq   ;Copy the BPB
  1898 0000167D 59                  <1>     pop rcx
  1899                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1900 0000167E 4A8D9C05[B17B0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1901                              <1>     ;Add device count to rbx to point to correct entry
  1902 00001686 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1903 00001688 4A8D9CC5[BB7B0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1904 00001690 4C893B              <1>     mov qword [rbx], r15
  1905 00001693 49FFC0              <1>     inc r8  ;Goto next logical drive
  1906 00001696 64FE0425[7DC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1907 0000169E 4981C778000000      <1>     add r15, bpbEx_size  ;Goto next table entry
  1908                              <1>     return
    13                              <2> %%_ret:
    14 000016A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    16                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    17                                  %include "./Source/BSS/dosSeg.asm"
     1                              <1> ;This file contains the main DOS data segment
     2                              <1> dosAPT: ;Additional Page tables
     3 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
     4                              <1> dosDataArea:
     5 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
     6 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
     7 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
     8 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
     9 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    10 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    11 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    12 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    13                              <1> ;Above is the system stats
    14                              <1> ;Below is the DOS vars, DO NOT TOUCH FROM SHARE TO NUMJOINDRV
    15                              <1> ;Both below variables can be edited with Int 41h AX=440Bh
    16 0003C023 ????                <1>     validNetNam resw 1    ;Flag if machinename valid, deflt no=0
    17 0003C025 ????                <1>     shareCount  resw 1    ;Share Retry Count, number of repeats before fail.
    18 0003C027 ????                <1>     shareDelay  resw 1    ;Share Delay, in multiples of ms. (TEMP, just loop)
    19 0003C029 ????????????????    <1>                 resq 1    ;Unused ptr for future, current disk buffer
    20 0003C031 ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    21                              <1>     ;   A value of 0 means no chars buffered.
    22 0003C039 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    23                              <1> sysVarsPtr:
    24 0003C041 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    25 0003C049 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    26 0003C051 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    27                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    28 0003C059 ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    29                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    30 0003C061 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    31 0003C063 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    32 0003C06B ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    33 0003C073 ????????????????    <1>     fcbsHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    34 0003C07B ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    35                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    36 0003C07D ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    37 0003C07E ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    38 0003C07F ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    39 0003C080 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    40 0003C0A2 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    41                              <1> ;Additional internal variables
    42 0003C0A3 ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    43                              <1> 
    44                              <1>     ;DLL Manager hook functions here
    45                              <1>     ;All DLLMGR hooks are 8 byte pointers and are new to the DOS kernel.
    46                              <1>     ;They allow for the installation of a DLL manager program, which hooks
    47                              <1>     ; these pointers, to point to their own subroutines in the DLLMGR prog.
    48                              <1>     ;These hooks are called from within EXEC, only for PE type executables
    49                              <1>     ; and from within EXIT. 
    50                              <1>     ;
    51                              <1>     ;In EXEC mode, modes 0 and 1 create a PSP for the task and thus the 
    52                              <1>     ; task is self standing and has a PSP as a Unique ID. 
    53                              <1>     ;If mode 3, this is an overlay EXE. This means it is not it's own task and 
    54                              <1>     ; is an extension of the parent task. In such a case, the DLL Manager must 
    55                              <1>     ; look at where the overlay is to be loaded (execFrame.pProgBase), and if 
    56                              <1>     ; there is already an overlay there, to remove it's functions from the 
    57                              <1>     ; registery, replacing them with the new overlay's functions. All overlay
    58                              <1>     ; exports must be flagged as belonging to the parent task PSP so that
    59                              <1>     ; on EXIT, they can be removed from the registry. 
    60                              <1>     ;
    61                              <1>     ;In EXIT, the PSP of the ending task must be taken
    62                              <1>     ; into consideration, as if the PSP isn't registered then the task ending
    63                              <1>     ; is a .COM file or an .EXE with no exports.
    64                              <1>     ;Furthermore, if register fails (due to memory or namespace constraints),
    65                              <1>     ; it must return CF=CY.
    66                              <1> dllHooks:
    67 0003C0A4 ????????????????    <1>     registerDLL   resq 1    ;Entered with rbp = execFrame
    68 0003C0AC ????????????????    <1>     unloadDLLHook   resq 1  ;
    69                              <1>     ;Share hook functions here
    70                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
    71                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
    72                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
    73                              <1> 
    74                              <1>     ;Note to programmer - Please adjust as necessary:
    75                              <1>     ;Functions which are nowhere called (yet) are noted as UNUSED in caps.
    76                              <1>     ;Those which are not meant to be used are noted as unused in lower case.
    77                              <1>     ;Those suffixed with a ? have their future in question.
    78                              <1>     ;Those suffixed with a / are done partially wrt MSDOS.
    79                              <1> 
    80                              <1>     ;SCPDOS has an optional handle, openFileCheck. This function can be used 
    81                              <1>     ; to see if there are any open handles. Its implementation is completely
    82                              <1>     ; optional, and an equivalent form of the function is provided for older
    83                              <1>     ; SHARE versions that might be ported that don't have a particular function.
    84                              <1>     ;This function is defined as follows:
    85                              <1>     ; Input: fname1Ptr -> Filename we want to see if there are any open records
    86                              <1>     ;                       for.
    87                              <1>     ; Output: CF=CY -> Handle not supported.
    88                              <1>     ;         CF=NC -> Handle supported. 
    89                              <1>     ;           ZF=ZE -> No Files open.
    90                              <1>     ;           ZF=NZ -> Some files are open.
    91                              <1> shareHooks:
    92                              <1>     ;markerShare resq 1  ;Marker Share hook
    93 0003C0B4 ????????????????    <1>     openFileCheck   resq 1  ;Check if share record for file exist       DONE
    94 0003C0BC ????????????????    <1>     openShare   resq 1  ;Share called on open.                          DONE 
    95 0003C0C4 ????????????????    <1>     closeShare  resq 1  ;Share called on close.                         DONE/
    96 0003C0CC ????????????????    <1>     closeCompShare  resq 1  ;Share to close all files for a machine.    DONE
    97 0003C0D4 ????????????????    <1>     closeTaskShare  resq 1  ;Share to close all files for a task.       DONE
    98 0003C0DC ????????????????    <1>     closeNameShare  resq 1  ;Share to close file by name.               DONE/
    99 0003C0E4 ????????????????    <1>     lockFileShare   resq 1  ;Share to lock file region.                 DONE
   100 0003C0EC ????????????????    <1>     unlockFileShare resq 1  ;Share to unlock file region.               DONE
   101 0003C0F4 ????????????????    <1>     checkFileLockShare  resq 1  ;Share to check file region locked.     DONE
   102 0003C0FC ????????????????    <1>     openFileListShare   resq 1  ;Share to get open file list entry.     DONE
   103 0003C104 ????????????????    <1>     updateFCBfromSFTShr resq 1  ;Share to update FCB from the SFT.      UNUSED?
   104 0003C10C ????????????????    <1>     fstClstOfFCBShare   resq 1  ;Share to get first cluster of FCB.     UNUSED?
   105 0003C114 ????????????????    <1>     closeDupFileShare   resq 1  ;Share to close file if dup for proc.   DONE
   106 0003C11C ????????????????    <1>     closeNewHdlShare    resq 1  ;Share to close hdls of rec opened file. DONE
   107 0003C124 ????????????????    <1>     updateDirShare      resq 1  ;Share to update dir info in SFT.       DONE 
   108                              <1> ;Create SFT header and corresponding array of five default sft entries
   109 0003C12C <res Ah>            <1>     firstSftHeader  resb sfth_size
   110 0003C136 <res 4Fh>           <1>     firstSft    resb sft_size
   111 0003C185 <res 4Fh>           <1>     secondSft   resb sft_size
   112 0003C1D4 <res 4Fh>           <1>     thirdSft    resb sft_size
   113 0003C223 <res 4Fh>           <1>     fourthSft   resb sft_size
   114 0003C272 <res 4Fh>           <1>     fifthSft    resb sft_size
   115                              <1> 
   116                              <1> ;Virtual CONsole Buffers
   117 0003C2C1 ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
   118                              <1>     ;Only incremented when CON device runs vCon
   119                              <1> vConBuf:    ;Proper buffer symbol
   120 0003C2C2 ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
   121 0003C2C3 <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
   122                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
   123 0003C343 <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
   124 0003C3C3 ??                  <1>     bufpad      resb 1     ;Used to pad with LF
   125                              <1> 
   126 0003C3C4 ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
   127 0003C3C5 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
   128 0003C3C6 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
   129 0003C3C7 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
   130                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   131                              <1> 
   132 0003C3C8 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
   133                              <1> ;Server stuff. Default to all zeros (blank)
   134 0003C3C9 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
   135                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   136 0003C3CA ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5E01h call
   137 0003C3CB <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5E01h) (set to SPC)    
   138                              <1> ;Swappable Data Area
   139 0003C3DB <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
   140 0003C3FB ??                  <1>                 resb 1  ;Alignment byte
   141                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   142 0003C3FC ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
   143 0003C3FD ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
   144 0003C3FE ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
   145 0003C3FF ??                  <1>     errorLocus  resb 1  ;Where the error took place  
   146 0003C400 ????                <1>     errorExCde  resw 1  ;Extended Error Code
   147 0003C402 ??                  <1>     errorAction resb 1  ;Suggested action for error  
   148 0003C403 ??                  <1>     errorClass  resb 1  ;Error Class
   149 0003C404 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
   150 0003C40C ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   151 0003C414 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   152                              <1> 
   153 0003C41C ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   154 0003C424 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   155                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   156                              <1>     ;Lower byte: User Specified
   157 0003C426 ??                  <1>     currentDrv  resb 1  ;Default drive x
   158 0003C427 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   159                              <1> ;SDA, needs to be replaced between processes
   160                              <1> sdaMainSwap:
   161 0003C428 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   162 0003C430 ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   163 0003C438 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   164 0003C43A ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   165 0003C442 ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   166 0003C44A ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   167 0003C452 ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   168 0003C454 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   169 0003C45C ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   170 0003C45D ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   171 0003C45E ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   172                              <1> 
   173 0003C45F ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   174 0003C467 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   175 0003C46F ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   176 0003C477 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   177 0003C47F ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   178                              <1> ;The below flag tells DOS to print ^C in the termination function
   179 0003C480 ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   180 0003C481 ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   181                              <1> ;Time stuff
   182                              <1> ;Read the below two as a word
   183 0003C482 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   184 0003C483 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   185 0003C484 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   186 0003C485 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   187 0003C487 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   188                              <1> 
   189 0003C488 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   190 0003C489 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   191 0003C48A ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   192                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   193                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   194                              <1> ; without forcing to re-build the whole primary request block.
   195                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   196                              <1> ; with secondary char output going through the secondary header
   197                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   198                              <1> ; for output)
   199                              <1> ;ioReqPkt is the largest possible packet
   200 0003C48B <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   201 0003C4B5 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   202                              <1>     altRet: ;Accessed as a qword
   203 0003C4DF <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   204 0003C509 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   205                              <1> ;Swappable Buffers
   206 0003C50A ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   207                              <1>     ;We add an additional byte to save ah too
   208 0003C510 ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   209 0003C512 <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   210 0003C592 <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   211 0003C612 ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   212 0003C61A ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   213 0003C622 ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   214                              <1> ;Misc bookkeeping flags and vars
   215 0003C623 <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal search block (fullsize unlike DOS)
   216 0003C64E <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   217 0003C66E <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need a tmp CDS
   218 0003C6C9 <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   219 0003C6D5 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards for rename
   220 0003C6E1 ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   221                              <1> 
   222 0003C6E9 ??                  <1>     volIncmpFCB resb 1  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   223 0003C6EA ??                  <1>     extFCBAttr  resb 1  ;Extended FCB file attribute
   224 0003C6EB ??                  <1>     extFCBFlag  resb 1  ;Set to -1 if Extended FCB
   225 0003C6EC ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   226 0003C6ED ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   227 0003C6EE ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   228 0003C6EF ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   229 0003C6F0 ??                  <1>     rwFlag      resb 1  ;00h=Read, -1=Write, read/write/share error reporting
   230 0003C6F1 ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   231 0003C6F2 ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   232                              <1> 
   233 0003C6F3 ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   234 0003C6F4 ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   235 0003C6F5 ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   236 0003C6F6 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlvl
   237 0003C6F7 ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   238 0003C6F8 ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   239 0003C6F9 ??                  <1>     workingDrv  resb 1  ;Working drive number, 0 based, from DPB
   240                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   241                              <1> workingDD:  ;Create a symbol for the working device driver too
   242 0003C6FA ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   243 0003C702 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   244 0003C70A ????????????????    <1>     workingFCB  resq 1  ;Ptr to the caller FCB for FCB function
   245                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   246                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   247 0003C712 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   248 0003C71A ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   249 0003C722 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   250 0003C72A ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   251 0003C72C ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   252 0003C72E ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   253                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   254                              <1> ; and 32 byte offset into the sector for directory
   255 0003C736 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   256                              <1> sectTfr:    ;Symbol to use this var to hold a counter on disk read/write ops 
   257                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   258 0003C73E ????                <1>     entry       resw 1  ;32 byte offset into a sector or #fats sectors/fat
   259                              <1> ;***************************************************|
   260                              <1> ; Needs to be set up before any file access         |
   261                              <1> ; These vars keep track of file access properties   |
   262                              <1> ;   and must be used only for such purposes.        |
   263                              <1> ;***************************************************|
   264 0003C740 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   265 0003C744 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   266                              <1> 
   267 0003C748 ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   268 0003C74C ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   269 0003C74D ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   270                              <1> 
   271 0003C755 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   272 0003C757 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   273                              <1> ;***************************************************|
   274 0003C75B ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   275 0003C75F ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   276 0003C763 ??                  <1>     fileGrowing resb 1  ;Flag to indicate the file is growing
   277 0003C764 ????????            <1>     bytesAppend resd 1  ;Number of bytes by which a file has been extended by
   278 0003C768 ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   279 0003C76C ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   280                              <1> ;Directory stuff
   281 0003C770 ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   282 0003C774 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   283 0003C778 ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   284 0003C77A ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   285                              <1> ;Error DPB 
   286 0003C77E ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary situations
   287 0003C786 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   288                              <1>     
   289 0003C787 <res 2Bh>           <1>     renameFFBlk resb ffBlock_size   ;Source file "find first" block
   290 0003C7B2 <res 20h>           <1>     renameDir   resb fatDirEntry_size   ;Build new file dir entry here
   291                              <1> ;Stacks and scratch SFT
   292 0003C7D2 ????????????        <1>     alignb  8
   293 0003C7D8 <res 528h>          <1>     critStack   resq 165
   294 0003CD00 ????????????????    <1>     critStakTop resq 1
   295                              <1> 
   296 0003CD08 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   297                              <1>     
   298 0003CD57 ??                  <1>     alignb  8
   299 0003CD58 <res 638h>          <1>     AuxStack    resq 199
   300 0003D390 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   301 0003D398 <res 638h>          <1>     DiskStack   resq 199
   302 0003D9D0 ????????????????    <1>     DiskStakTop resq 1
   303                              <1> 
   304 0003D9D8 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   305 0003D9D9 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls! 
   306                              <1> ;Putting this in SDA as multiple tasks can try to parse EXE's simultaneously
   307 0003D9DA <res 70h>           <1>     exeHdrSpace resb imageFileOptionalHeader_size   ;Use for parsing an EXE hdr
   308 0003DA4A <res 28h>           <1>     sectHdr     resb imageSectionHdr_size   ;Use to load one sctn hdr at a time
   309                              <1> ;Exception handler vars in SDA now 
   310 0003DA72 <res 10h>           <1>     byteBuffer  resb 16 ;Used by DOS exception handler to build strings
   311 0003DA82 ??                  <1>     haltDOS     resb 1  ;Set by DOS exception handler to indicate DOS will halt
   312                              <1>     sdaLen      equ     $ - sda 
   313                              <1>     sdaMSLen    equ     $ - sdaMainSwap
   314                              <1> 
   315                              <1> ;Additional variables NOT in the SDA
   316 0003DA83 ????????????????    <1>     serverDispTblPtr    resq 1  ;DO NOT MOVE! Used to find server dispatch tbl
   317 0003DA8B ??                  <1>     xActDrv     resb 1  ;0 based number of last drive to transact
   318 0003DA8C <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   319                              <1>     ;for saving the current header when quickly doing a second request
   320                              <1> 
   321 0003DAB6 ??                  <1>     lastDiskNum resb 1  ;Last drive that operated
   322 0003DAB7 ????                <1>     lastOpTime  resw 1  ;Packed Time of last successful disk operation
   323                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   324                              <1> inExtASCII:
   325 0003DAB9 ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   326 0003DABA ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   327                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   328                              <1>     ; copy of the date/time record
   329                              <1> 
   330                              <1>     dSegLen     equ     $
    18                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    19                                  %define currSegVBase section.resSeg.vstart
    20                                  %include "./Source/Data/staticData.asm"
     1                              <1> 
     2                              <1> ;-----------------------------------:
     3                              <1> ;       Static Data Variables       :
     4                              <1> ;-----------------------------------:
     5 00000000 00                  <1> dosMajor    db 00h      ;Version 0
     6 00000001 5E                  <1> dosMinor    db 94      ;.94
     7 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
     7 0000000B 535953              <1>
     8 0000000E 534350444F5320202E- <1> dosKernName db "SCPDOS  .SYS"
     8 00000017 535953              <1>
     9 0000001A 1400                <1> maxHndls    dw 20    ;Initially hardcoded 20, will be made changable soon
    10                              <1> ;Use the idea of having a JFT valid byte in the PSP to reuse PSP as ptrToNewJFT
    11                              <1> ;At that point, maxHndls will be removed
    12                              <1> ;-----------------------------------:
    13                              <1> ;        Static Data Tables         :
    14                              <1> ;-----------------------------------:
    15                              <1> ctryTbl:
    16                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
    17 0000001C 0100                <1>     dw 1            
    18 0000001E 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
    19 00000023 2C00                <1>     db ",",0
    20 00000025 2E00                <1>     db ".",0
    21 00000027 2D00                <1>     db "-",0
    22 00000029 3A00                <1>     db ":",0
    23 0000002B 00                  <1>     db 0
    24 0000002C 02                  <1>     db 2 
    25 0000002D 00                  <1>     db 0 
    26 0000002E 0000000000000000    <1>     dq 0 
    27 00000036 2C00                <1>     db ",",0    
    28 00000038 000000000000000000- <1>     db 0,0,0,0,0,0,0,0,0,0
    28 00000041 00                  <1>
    29                              <1> 
    30                              <1> ;IO Char table
    31                              <1> ;This table has Request header length, command code and error flags
    32                              <1> ; as a packed DWORD entry
    33                              <1> ioRqCmdErrTbl:
    34                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    35                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    36 00000042 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    37 00000046 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    38 0000004A 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    39 0000004E 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    40 00000052 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    41 00000056 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    42                              <1> 
    43                              <1> 
    44                              <1> 
    45                              <1> ;Keyboard vCon static data taht can be edited and replaced by a user if they
    46                              <1> ; wish to install their own custom logic.
    47 0000005A 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    48 00000062 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    49 00000063 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    50                              <1> ;Extended ASCII keys with special meanings
    51 00000064 3B                  <1> extKeyTbl   db eF1
    52 00000065 4424                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    53 00000067 3C                  <1>             db eF2
    54 00000068 3624                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    55 0000006A 3D                  <1>             db eF3
    56 0000006B 3D24                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    57 0000006D 3E                  <1>             db eF4
    58 0000006E 7224                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    59 00000070 3F                  <1>             db eF5
    60 00000071 B724                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    61 00000073 40                  <1>             db eF6
    62 00000074 CD24                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    63 00000076 41                  <1>             db eF7
    64 00000077 D424                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    65 00000079 4B                  <1>             db eCursL
    66 0000007A 9B23                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    67 0000007C 4D                  <1>             db eCursR
    68 0000007D 4424                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    69 0000007F 52                  <1>             db eIns
    70 00000080 DF24                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    71 00000082 53                  <1>             db eDel
    72 00000083 E624                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    73                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    74                              <1> 
    75                              <1> ;When counting the number of days, first compute the number of years since
    76                              <1> ; 1980 and your year. 
    77                              <1> ;Then, using the table below, find the number of leap years between 1980
    78                              <1> ; and (YourYear - 1). 
    79                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
    80                              <1> ; days since 01/01/1980 and 01/01/YourYear.
    81                              <1> ;
    82                              <1> ;Use the months table to get the number of days in a normal month as leap 
    83                              <1> ; years are added using the previous comment.
    84                              <1> 
    85                              <1> ;This table is the number of days in the month
    86                              <1> ;The function which updates the days in Feb writes the number to this table
    87                              <1> monthsTbl:  
    88 00000085 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    88 0000008E 1F1E1F              <1>
    89                              <1> 
    90                              <1> ;Error tables
    91                              <1> errXlatTbl:
    92                              <1> ;Each entry is n bytes long, defined as
    93                              <1> ; Byte 0      : DOS function number for which translation will occur
    94                              <1> ; Byte 1      : Length of the table entry - 2
    95                              <1> ; Bytes n - 3 : Acceptable Error codes
    96                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
    97                              <1> ;The table is terminated with a single -1 byte
    98                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
    99                              <1> ; only on entry to a disk function
   100 00000091 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   101 00000095 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   102 0000009A 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   103 000000A0 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   104 000000A4 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   105 000000AA 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   106 000000B1 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   107 000000B4 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   108 000000B8 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   109 000000BC 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   110 000000C1 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   111 000000C5 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   112 000000CB 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   113 000000D2 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   114 000000D6 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   115 000000DA 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   116 000000DD 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   117 000000E1 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   118 000000E5 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   119 000000EA 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   120 000000F2 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   121 000000F4 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   122 000000F9 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   123 000000FC 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   124 00000102 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   125 00000106 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   126 00000109 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   127 0000010F 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   128 00000116 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   129 0000011C 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   130 00000120 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   131 00000124 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   132 00000127 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   133 0000012C FF                  <1>     db -1   ;End Of Table marker
   134                              <1> 
   135                              <1> 
   136                              <1> extErrTbl:
   137                              <1> ;This table contains the default values for how to respond
   138                              <1> ; to particular errors. Fields with -1 need to be filled in before
   139                              <1> ; setting variables using this table.
   140                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   141                              <1> ; Byte 0: Extended Error Code as a byte
   142                              <1> ; Byte 1: Error Class
   143                              <1> ; Byte 2: Error Suggested Action
   144                              <1> ; Byte 3: Error Locus
   145                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   146                              <1> ;
   147                              <1> ;Error 01: Invalid function number
   148 0000012D 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   149                              <1> ;Error 02: File not found
   150 00000131 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   151                              <1> ;Error 03: Path not found
   152 00000135 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   153                              <1> ;Error 04: Too many open handles, and no handles are left
   154 00000139 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   155                              <1> ;Error 05: Access being denied
   156 0000013D 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   157                              <1> ;Error 06: Invalid File handle being provided
   158 00000141 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   159                              <1> ;Error 07: MCB chain destroyed
   160 00000145 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   161                              <1> ;Error 08: No Memory remaining
   162 00000149 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   163                              <1> ;Error 09: Invalid MCB block Address
   164 0000014D 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   165                              <1> ;Error 0A: Bad Environment block
   166 00000151 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   167                              <1> ;Error 0B: Data provided in a bad format
   168 00000155 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   169                              <1> ;Error 0C: Access Code Invalid
   170 00000159 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   171                              <1> ;Error 0D: Error due to Invalid Data provided
   172 0000015D 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   173                              <1> ;Error 0F: Error due to a bad drive letter being provided
   174 00000161 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   175                              <1> ;Error 10: Error due to attempting to delete the CWD
   176 00000165 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   177                              <1> ;Error 11: Error due to a unknown device being used
   178 00000169 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   179                              <1> ;Error 12: No more file handles available
   180 0000016D 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   181                              <1> ;Error 50: Network request not supported
   182 00000171 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   183                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   184 00000175 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   185                              <1> ;Error 21: File Locking Violation
   186 00000179 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   187                              <1> ;Error 54: Too many levels of redirection error
   188 0000017D 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   189                              <1> ;Error 56: Bad resource password provided
   190 00000181 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   191                              <1> ;Error 52: Directory already exists
   192 00000185 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   193                              <1> ;Error 32: Network request not supported by DOS
   194 00000189 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   195                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   196 0000018D 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   197                              <1> ;Error 57: Bad parameter in request
   198 00000191 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   199                              <1> ;Error 53: Fail was returned from Int 44h
   200 00000195 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   201                              <1> ;Error 24: Sharing Buffer Full
   202 00000199 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   203 0000019D FFFFFFFF            <1>     dd -1   ;End of table signature
   204                              <1> 
   205                              <1> badDirNameChar: ;This table needs to be replaced in other Codepages (i.e. Kanji)
   206 000001A1 000102030405060708- <1>     db 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
   206 000001AA 090A0B0C0D0E0F      <1>
   207 000001B1 101112131415161718- <1>     db 10h,11h,12h,13h,14h,15h,16h,17h,18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
   207 000001BA 191A1B1C1D1E1F      <1>
   208 000001C1 222A2B2C2E2F3A3B3C- <1>     db '"', "*", "+",",",".","/",":",";","<","=",">","?","[","\","]","|"
   208 000001CA 3D3E3F5B5C5D7C      <1>
   209                              <1> badDirNameCharL equ $ - badDirNameChar
   210                              <1> ;The chars * ? . \ / need to always be handled separately
   211                              <1> 
   212                              <1> extAsciiTbl:    ;This table needs to be replaced in other Codepages
   213 000001D1 809A45418E418F8045- <1>     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 45h, 45h, 45h, 49h, 49h, 49h
   213 000001DA 4545494949          <1>
   214 000001DF 8E8F9092924F994F55- <1>     db 8Eh, 8Fh, 90h, 92h, 92h, 4Fh, 99h, 4Fh, 55h, 55h, 59h, 99h, 9Ah, 9Bh
   214 000001E8 5559999A9B          <1>
   215 000001ED 9C9D9E9F41494F55A5- <1>     db 9Ch, 9Dh, 9Eh, 9Fh, 41h, 49h, 4Fh, 55h, 0A5h, 0A5h, 0A6h, 0A7h, 0A8h
   215 000001F6 A5A6A7A8            <1>
   216 000001FA A9AAABACADAEAFB0B1- <1>     db 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h
   216 00000203 B2B3B4              <1>
   217 00000206 B5B6B7B8B9BABBBCBD- <1>     db 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h 
   217 0000020F BEBFC0              <1>
   218 00000212 C1C2C3C4C5C6C7C8C9- <1>     db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh
   218 0000021B CACBCC              <1>
   219 0000021E CDCECFD0D1D2D3D4D5- <1>     db 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h 
   219 00000227 D6D7D8              <1>
   220 0000022A D9DADBDCDDDEDFE0E1- <1>     db 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
   220 00000233 E2E3E4              <1>
   221 00000236 E5E6E7E8E9EAEBECED- <1>     db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h
   221 0000023F EEEFF0              <1>
   222 00000242 F1F2F3F4F5F6F7F8F9- <1>     db 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh
   222 0000024B FAFBFC              <1>
   223 0000024E FDFEFF              <1>     db 0FDh, 0FEh, 0FFh
   224                              <1> 
   225                              <1> asciiCharProperties:   ;This table needs to replaces in other Codepages
   226 00000251 F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F0h, 0F6h, 0F6h 
   226 0000025A F0F6F6              <1>
   227 0000025D F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h
   227 00000266 F6F6F6              <1>
   228 00000269 F6F6F6F6F6F6F6F6F8- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F8h, 0FFh, 0F6h, 0FFh 
   228 00000272 FFF6FF              <1>
   229 00000275 FFFFFFFFFFFFFFF4F4- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h 
   229 0000027E FFFEF6              <1>
   230 00000281 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h 
   230 0000028A FFF4F4              <1>
   231 0000028D F4F4F4FFFFFFFFFFFF- <1>     db 0F4h, 0F4h, 0F4h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   231 00000296 FFFFFF              <1>
   232 00000299 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   232 000002A2 FFFFFF              <1>
   233 000002A5 FFFFFFFFFFFFFFF6F6- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh 
   233 000002AE F6FFFF              <1>
   234 000002B1 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   234 000002BA FFFFFF              <1>
   235 000002BD FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   235 000002C6 FFFFFF              <1>
   236 000002C9 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   
   237                              <1> 
   238                              <1> hardErrorStack:
   239 000002D1 13                  <1>     db errWpd
   240 000002D2 0B                  <1>     db eClsMedia
   241 000002D3 07                  <1>     db eActRetUsr
   242 000002D4 02                  <1>     db eLocDsk
    21                                  %include "./Source/Data/dispTbl.asm"
     1                              <1> ;Kernel Dispatch Function Table
     2                              <1> 
     3                              <1> kDispTbl:
     4 000002D5 654F                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
     5 000002D7 AF1B                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
     6 000002D9 BC1B                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
     7 000002DB 901C                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
     8 000002DD B91C                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
     9 000002DF C11C                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    10 000002E1 D91C                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    11 000002E3 0C1D                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    12 000002E5 311D                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    13 000002E7 901D                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    14 000002E9 4320                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    15 000002EB 9F1D                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    16 000002ED AB1D                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    17 000002EF 8B67                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    18 000002F1 BD67                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    19 000002F3 F927                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    20 000002F5 F927                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    21 000002F7 8225                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    22 000002F9 3B26                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    23 000002FB C226                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    24 000002FD F927                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    25 000002FF F927                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    26 00000301 E427                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    27 00000303 F126                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    28 00000305 4A6A                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    29 00000307 D667                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    30 00000309 AF27                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    31 0000030B DD67                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    32 0000030D DF67                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    33 0000030F 4A6A                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    34 00000311 4A6A                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    35 00000313 7D68                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    36 00000315 4A6A                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    37 00000317 F927                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    38 00000319 F927                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    39 0000031B 5C27                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    40 0000031D F927                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    41 0000031F 2868                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    42 00000321 714E                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    43 00000323 F927                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    44 00000325 F927                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    45 00000327 D527                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    46 00000329 BC22                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    47 0000032B E322                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    48 0000032D E922                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    49 0000032F 0A23                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    50 00000331 5A68                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    51 00000333 C227                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    52 00000335 6868                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    53 00000337 374F                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    54 00000339 7F68                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    55 0000033B 3A67                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    56 0000033D B768                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    57 0000033F C868                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    58 00000341 D968                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    59 00000343 E157                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    60 00000345 0A58                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    61 00000347 8912                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    62 00000349 B914                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    63 0000034B 9216                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    64 0000034D EE29                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    65 0000034F FF29                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    66 00000351 292B                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    67 00000353 682B                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    68 00000355 A32B                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    69 00000357 AF2B                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    70 00000359 142C                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    71 0000035B 832C                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    72 0000035D A743                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    73 0000035F 9B2D                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    74 00000361 D62D                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    75 00000363 5A17                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    76 00000365 ED48                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    77 00000367 174B                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    78 00000369 1F4C                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    79 0000036B CC50                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    80 0000036D 674F                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
    81 0000036F 1D69                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
    82 00000371 EB2D                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
    83 00000373 562E                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
    84 00000375 6867                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
    85 00000377 7167                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
    86 00000379 2B69                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
    87 0000037B 3C69                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
    88 0000037D 1A6A                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
    89 0000037F 5E4E                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
    90 00000381 862E                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
    91 00000383 122F                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
    92 00000385 BD4D                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
    93 00000387 216A                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
    94 00000389 5A2F                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
    95 0000038B 2230                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
    96 0000038D 5C30                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
    97 0000038F 4B6A                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
    98 00000391 0C6C                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
    99 00000393 726C                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   100 00000395 DD17                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   101 00000397 4A6A                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   102 00000399 7A67                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   103 0000039B 4A6A                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   104 0000039D 8367                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   105 0000039F 3958                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   106 000003A1 3958                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   107 000003A3 C830                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   108 000003A5 3630                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   109 000003A7 4A6A                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   110                              <1> kDispTblL  equ $ - kDispTbl 
   111                              <1> 
   112                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   113 000003A9 2C6C                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   114 000003AB C138                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   115 000003AD F360                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   116 000003AF 2F6C                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   117 000003B1 1B62                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   118 000003B3 EA1A                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   119 000003B5 F957                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   120 000003B7 6300                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   121 000003B9 6442                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   122 000003BB 9500                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   123 000003BD 126D                <1>     dw shareCriticalError - mDispTbl    ;AX=120Ah, Signal Share Critical Error
   124 000003BF 9A6C                <1>     dw shareCheckOpenViolation - mDispTbl  ;AX=120Bh, Signal Sharing Violation 
   125 000003C1 8C35                <1>     dw openDriverMux - mDispTbl ;AX=120Ch, Open device
   126 000003C3 9B24                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   127 000003C5 A300                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   128 000003C7 BD00                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   129 000003C9 CB00                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   130 000003CB 7762                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   131 000003CD 5962                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   132 000003CF 2762                <1>     dw uppercaseChar - mDispTbl ;AX=1213h, Uppercase Char
   133 000003D1 A563                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   134 000003D3 DE00                <1>     dw flushBuffer - mDispTbl   ;AX=1215h
   135 000003D5 9341                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   136 000003D7 E961                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   137 000003D9 0161                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   138 000003DB 8E61                <1>     dw getCDS - mDispTbl    ;AX=1219h
   139 000003DD E60B                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   140 000003DF 2E24                <1>     dw setDaysInFeb - mDispTbl  ;AX=121Bh
   141 000003E1 7669                <1>     dw noOp - mDispTbl  ;AX=121Ch -> Old Checksum memory
   142 000003E3 7669                <1>     dw noOp - mDispTbl  ;AX=121Dh -> Old Sum Memory
   143 000003E5 9062                <1>     dw compareFileNames - mDispTbl ;AX=121Eh, Compare Filenames
   144 000003E7 3F61                <1>     dw buildNewCDS - mDispTbl   ;AX=121Fh, Build CDS
   145 000003E9 C841                <1>     dw getJFTPtr - mDispTbl     ;AX=1220h, Get JFT entry
   146 000003EB FF16                <1>     dw trueNameMultiplex - mDispTbl     ;AX=1221h, Truename
   147 000003ED 0066                <1>     dw setErrorVars - mDispTbl ;AX=1222h, Set Extended Error Info
   148 000003EF 2211                <1>     dw checkIfCharDevice - mDispTbl  ;AX=1223, Check If Char Device
   149 000003F1 776C                <1>     dw shareRetryCountdown - mDispTbl   ;AX=1224h, Share Retry
   150 000003F3 4E62                <1>     dw strlen2 - mDispTbl   ;AX=1225h, strlen
   151                              <1> mDispTblL   equ     $ - mDispTbl
   152                              <1> 
   153                              <1> serverDispTbl:  ;Server Dispatch functions
   154 000003F5 0B                  <1>     db 0Bh  ;Number of entries
   155 000003F6 7269                <1>     dw serverDispatch - serverDispTbl           ;AX=5D00h
   156 000003F8 C469                <1>     dw commitAllFilesForProcess - serverDispTbl ;AX=5D01h
   157 000003FA 1D6A                <1>     dw closeFilesByName - serverDispTbl         ;AX=5D02h
   158 000003FC 2E6A                <1>     dw closeFilesByComputer - serverDispTbl     ;AX=5D03h
   159 000003FE 366A                <1>     dw closeFilesByProcess - serverDispTbl      ;AX=5D04h
   160 00000400 3E6A                <1>     dw getOpenFileListEntry - serverDispTbl     ;AX=5D05h
   161 00000402 596A                <1>     dw getSDAData - serverDispTbl               ;AX=5D06h
   162 00000404 836A                <1>     dw printerRedir - serverDispTbl             ;AX=5D07h
   163 00000406 836A                <1>     dw printerRedir - serverDispTbl             ;AX=5D08h
   164 00000408 836A                <1>     dw printerRedir - serverDispTbl             ;AX=5D09h
   165 0000040A 906A                <1>     dw setExtendedErrorInfo - serverDispTbl     ;AX=5D0Ah
    22                                  %if DEBUG
    23                                  %include "./Source/Debug/debug.asm"
    24                                  %endif
    25                                  %include "./Source/Kernel/FAT/buffun.asm"
     1                              <1> ;This file contains FAT disk buffer related functions that
     2                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
     3                              <1> ;----------------------------------------------------
     4                              <1> ;           Externally referenced functions         :
     5                              <1> ;----------------------------------------------------
     6                              <1> 
     7                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
     8                              <1> ;Sets the buffer in rdi to the head of the chain
     9                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    10                              <1> ;Output: Buffer header set to the head of the chain
    11 0000040C 48393D(63C00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    12 00000413 7428                <1>     je .exit
    13 00000415 56                  <1>     push rsi
    14 00000416 488B35(63C00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    15                              <1> .mainlp:
    16 0000041D 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    17 00000420 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    18 00000422 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    19 00000425 EBF6                <1>     jmp short .mainlp
    20                              <1> .fnd:
    21 00000427 57                  <1>     push rdi
    22 00000428 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    23 0000042B 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    24 0000042E 5F                  <1>     pop rdi ;Get original buf back
    25 0000042F 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    26 00000432 488735(63C00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    27 00000439 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    28 0000043C 5E                  <1>     pop rsi
    29                              <1> .exit:
    30                              <1>     return
    13                              <2> %%_ret:
    14 0000043D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> 
    32                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h 
    33                              <1> ;1 External reference
    34                              <1> ;Input: rdi = Buffer header to flush and free
    35 0000043E E844000000          <1>     call flushBuffer
    36 00000443 7206                <1>     jc .exit
    37                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    38 00000445 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    39                              <1> .exit:
    40                              <1>     return
    13                              <2> %%_ret:
    14 0000044B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    41                              <1> 
    42                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    43                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    44                              <1> ;Output: rdi = First disk buffer
    45 0000044C 488B3D(63C00300)    <1>     mov rdi, [bufHeadPtr]
    46 00000453 57                  <1>     push rdi
    47                              <1> .lp:
    48 00000454 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    49 00000458 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    50 0000045B 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    51 00000462 75F0                <1>     jne .lp
    52 00000464 5F                  <1>     pop rdi
    53                              <1>     return
    13                              <2> %%_ret:
    14 00000465 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> 
    55                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    56                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    57                              <1> ; second buffer in the chain in rdi
    58                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    59                              <1> ;Output: rdi = Second buffer in the chain
    60 00000466 52                  <1>     push rdx
    61 00000467 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    62 0000046A E89DFFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    63 0000046F 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    64 00000472 5A                  <1>     pop rdx
    65                              <1>     return
    13                              <2> %%_ret:
    14 00000473 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    66                              <1> 
    67                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    68                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    69                              <1> ;Input: rdi = Buffer header to start searching at
    70                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    71                              <1> ;        ZF=ZE => No unreferenced buffer found
    72 00000474 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    73 00000478 750C                <1>     jnz .exit
    74 0000047A 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    75 0000047D 4881FFFFFFFFFF      <1>     cmp rdi, -1
    76 00000484 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    77                              <1> .exit:
    78                              <1>     return
    13                              <2> %%_ret:
    14 00000486 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    79                              <1> 
    80                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
    81                              <1> ;Flushes the data in a sector buffer to disk!
    82                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
    83                              <1> ;Exit:  CF=NC : Success
    84                              <1> ;       CF=CY : Fail, terminate the request
    85                              <1> ;First make request to device driver
    86 00000487 50                  <1>     push rax
    87 00000488 53                  <1>     push rbx
    88 00000489 51                  <1>     push rcx
    89 0000048A 52                  <1>     push rdx
    90 0000048B 56                  <1>     push rsi
    91 0000048C 55                  <1>     push rbp
    92                              <1> ;If the buffer is freed, skip flushing to avoid issues
    93 0000048D 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
    94 00000491 7454                <1>     je .fbFreeExit  ;If it is free exit
    95 00000493 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
    96 00000497 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
    97                              <1> .fbRequest0:
    98 00000499 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
    99 0000049E F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   100 000004A2 7406                <1>     jz .fbRequest1
   101 000004A4 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   102                              <1> .fbRequest1:
   103 000004AA 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   104 000004AD B901000000          <1>     mov ecx, 1  ;One sector to copy
   105 000004B2 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   106 000004B6 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   107 000004BA 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   108 000004BE E8855E0000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   109 000004C3 E8035D0000          <1>     call absDiskDriverCall    ;Make Driver Request
   110 000004C8 7525                <1>     jnz .fbFail
   111                              <1> ;Now check if the buffer was a FAT, to write additional copies
   112 000004CA F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   113 000004CE 7417                <1>     jz .fbFreeExit  ;If not, exit
   114 000004D0 FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   115 000004D3 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   116 000004D5 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   117 000004D8 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   118 000004DC E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   119                              <1> .fbFreeExit1:
   120 000004E1 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   121 000004E4 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   122                              <1> .fbFreeExit:
   123 000004E7 F8                  <1>     clc
   124                              <1> .fbExitFail:
   125 000004E8 5D                  <1>     pop rbp
   126 000004E9 5E                  <1>     pop rsi
   127 000004EA 5A                  <1>     pop rdx
   128 000004EB 59                  <1>     pop rcx
   129 000004EC 5B                  <1>     pop rbx
   130 000004ED 58                  <1>     pop rax
   131                              <1>     return
    13                              <2> %%_ret:
    14 000004EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   132                              <1> .fbFail:
   133                              <1> ;Enter here only if the request failed
   134 000004EF FFCE                <1>     dec esi
   135 000004F1 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   136                              <1> ;Request failed thrice, critical error call
   137 000004F3 C605(5CC40300)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   138 000004FA E83A560000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   139 000004FF 3C01                <1>     cmp al, critRetry
   140 00000501 7496                <1>     je .fbRequest0
   141                              <1>     ;Else we fail (Ignore=Fail here)
   142 00000503 F9                  <1>     stc ;Set error flag to indicate fail
   143 00000504 E9DFFFFFFF          <1>     jmp .fbExitFail
   144                              <1> 
   145                              <1> testDirtyBufferForDrive:    ;External linkage
   146                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   147                              <1> ;Input: al = Drive number (0 based)
   148                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   149                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   150 00000509 53                  <1>     push rbx
   151 0000050A 488B1D(63C00300)    <1>     mov rbx, qword [bufHeadPtr]
   152                              <1> .tdbfdCheckBuffer:
   153 00000511 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   154 00000514 7509                <1>     jne .tdbfdGotoNextBuffer
   155 00000516 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   156 0000051A 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   157 0000051C F9                  <1>     stc ;Else dirty buffer found, set carry flag
   158                              <1> .tdbfdExit:
   159 0000051D 5B                  <1>     pop rbx
   160                              <1>     return
    13                              <2> %%_ret:
    14 0000051E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   161                              <1> .tdbfdGotoNextBuffer:
   162 0000051F 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   163 00000522 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   164 00000529 74F2                <1>     je .tdbfdExit
   165 0000052B EBE4                <1>     jmp short .tdbfdCheckBuffer
   166                              <1> 
   167                              <1> 
   168                              <1> cancelWriteThroughBuffers:  ;External linkage
   169                              <1> ; Frees all buffers for the workingDPB
   170                              <1> ; Alternative symbol for the same function. Used on Fails and Aborts.
   171                              <1> freeBuffersForDPB:  ;External Linkage (Before Get BPB in medchk)
   172                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   173                              <1> ; to have a drive number of -1, thus freeing it
   174                              <1> ;Given DPB is in rbp
   175 0000052D 53                  <1>     push rbx
   176 0000052E 488B1D(63C00300)    <1>     mov rbx, qword [bufHeadPtr]
   177                              <1> .i0:
   178 00000535 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   179 00000539 7506                <1>     jne .i1 ;If no, skip freeing
   180 0000053B 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   181                              <1> .i1:
   182 00000541 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   183 00000544 4881FBFFFFFFFF      <1>     cmp rbx, -1
   184 0000054B 75E8                <1>     jne .i0
   185                              <1> .exit:
   186 0000054D 5B                  <1>     pop rbx
   187                              <1>     return
    13                              <2> %%_ret:
    14 0000054E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   188                              <1> 
   189                              <1> writeThroughBuffers: ;External linkage
   190                              <1> ; Flushes and resets the dirty bit for all dirty bufs for working drive
   191                              <1> ; Returns: CF=NC => All is well, buffer flushed and dirty bit cleaned
   192                              <1> ;          CF=CY => Buffer failed to flush, marked as dirty and return
   193 0000054F 50                  <1>     push rax
   194 00000550 57                  <1>     push rdi
   195 00000551 488B05(FAC60300)    <1>     mov rax, qword [workingDPB]    ;Get current DPB to compare with
   196 00000558 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   197                              <1> .mainLp:
   198 0000055F 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;When we get to the end of the buffer chain, exit
   199 00000566 7416                <1>     je .exit   
   200 00000568 48394717            <1>     cmp qword [rdi + bufferHdr.driveDPBPtr], rax  ;Compare dpb numbers
   201 0000056C 750B                <1>     jne .nextBuffer
   202 0000056E E814FFFFFF          <1>     call flushBuffer    ;Flush this buffer if it on dpb we want
   203 00000573 7209                <1>     jc .exit  ;If something went wrong, exit
   204 00000575 806709BF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~dirtyBuffer
   205                              <1> .nextBuffer:
   206 00000579 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Goto next buffer
   207 0000057C EBE1                <1>     jmp short .mainLp
   208                              <1> .exit:
   209 0000057E 5F                  <1>     pop rdi
   210 0000057F 58                  <1>     pop rax
   211                              <1>     return
    13                              <2> %%_ret:
    14 00000580 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   212                              <1> 
   213                              <1> markBufferDirty:
   214 00000581 55                  <1>     push rbp
   215 00000582 9C                  <1>     pushfq
   216 00000583 488B2D(2EC70300)    <1>     mov rbp, qword [currBuff]
   217 0000058A 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   218 0000058E 9D                  <1>     popfq
   219 0000058F 5D                  <1>     pop rbp
   220                              <1>     return
    13                              <2> %%_ret:
    14 00000590 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   221                              <1> 
   222                              <1> 
   223                              <1> getBuffer: ;Internal Linkage ONLY
   224                              <1> ;
   225                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   226                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   227                              <1> ;Flushes if not in disk change mode. 
   228                              <1> ;If in disk change mode, will check to see if the selected buffer 
   229                              <1> ; has data referring a device using the same DPB as we are changing.
   230                              <1> ; If it is, skip flushing, if not, flush first!
   231                              <1> ;
   232                              <1> ;This function will return a pointer to the desired data sector OR 
   233                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   234                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   235                              <1> ;Entry: rax = Sector to read
   236                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   237                              <1> ;       rsi = DPB to use for transaction
   238                              <1> ;Exit:  CF=NC => 
   239                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   240                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   241 00000591 51                  <1>     push rcx
   242 00000592 52                  <1>     push rdx
   243 00000593 56                  <1>     push rsi
   244 00000594 57                  <1>     push rdi
   245 00000595 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   246 00000597 E832010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   247 0000059C 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   248 000005A3 7418                <1>     je .rbReadNewSector
   249 000005A5 48893D(2EC70300)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   250 000005AC 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer ;Only set if in buf chain
   251                              <1> .rbExit:
   252 000005B0 F8                  <1>     clc
   253                              <1> .rbExitNoFlag:
   254 000005B1 5F                  <1>     pop rdi
   255 000005B2 5E                  <1>     pop rsi
   256 000005B3 5A                  <1>     pop rdx
   257 000005B4 59                  <1>     pop rcx
   258 000005B5 488B1D(2EC70300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   259                              <1>     return
    13                              <2> %%_ret:
    14 000005BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   260                              <1> .rbReadNewSector:
   261 000005BD E8B5000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   262 000005C2 803D(D8D90300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   263 000005C9 7506                <1>     jne .flush  ;We are not, flush buffer
   264 000005CB 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   265 000005CF 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used. Lose the sector
   266                              <1> .flush:
   267 000005D1 E868FEFFFF          <1>     call flushAndFreeBuffer
   268 000005D6 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   269                              <1> .skipFlush:
   270                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   271                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   272                              <1>     ; is no longer owned by that File so we mark the owner as none
   273 000005D8 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   274 000005E0 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   275 000005E3 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   276 000005E6 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   277 000005EA 80F902              <1>     cmp cl, fatBuffer
   278 000005ED B201                <1>     mov dl, 1   ;Default values if not fat buffer
   279 000005EF 7503                <1>     jne .rbNonFATbuffer
   280 000005F1 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   281                              <1> .rbNonFATbuffer:
   282 000005F4 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   283 000005F7 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   284 000005FA 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   285 000005FD 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   286 00000601 C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   287 00000605 E804000000          <1>     call readSectorBuffer ;Carry the flag from the request
   288 0000060A 72A5                <1>     jc .rbExitNoFlag
   289 0000060C EBA2                <1>     jmp short .rbExit
   290                              <1> 
   291                              <1> readSectorBuffer:   ;Internal Linkage
   292                              <1> ;Reads a sector into a built sector buffer
   293                              <1> ;Entry: rdi = Pointer to buffer header
   294                              <1> ;Exit:  CF=NC : Success
   295                              <1> ;       CF=CY : Fail, terminate the request
   296                              <1> ;       rbx pointing to buffer header
   297                              <1> ;First make request to device driver
   298 0000060E 50                  <1>     push rax
   299 0000060F 53                  <1>     push rbx
   300 00000610 51                  <1>     push rcx
   301 00000611 52                  <1>     push rdx
   302 00000612 56                  <1>     push rsi
   303 00000613 55                  <1>     push rbp
   304                              <1> .rsRequest0:
   305 00000614 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   306 00000619 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   307 0000061D 7406                <1>     jz .rsRequest1
   308 0000061F 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   309                              <1> .rsRequest1:
   310 00000625 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   311 00000628 B901000000          <1>     mov ecx, 1  ;One sector to copy
   312 0000062D 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   313 00000631 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   314 00000635 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   315 00000639 E8155D0000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   316 0000063E E8885B0000          <1>     call absDiskDriverCall    ;Make Driver Request
   317 00000643 7508                <1>     jnz .rsFail
   318                              <1> .rsExit:
   319 00000645 F8                  <1>     clc
   320                              <1> .rsExitFail:
   321 00000646 5D                  <1>     pop rbp
   322 00000647 5E                  <1>     pop rsi
   323 00000648 5A                  <1>     pop rdx
   324 00000649 59                  <1>     pop rcx
   325 0000064A 5B                  <1>     pop rbx
   326 0000064B 58                  <1>     pop rax
   327                              <1>     return
    13                              <2> %%_ret:
    14 0000064C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   328                              <1> .rsFail:
   329                              <1> ;Enter here only if the request failed
   330 0000064D FFCE                <1>     dec esi
   331 0000064F 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   332                              <1> ;Request failed thrice, critical error call
   333                              <1> ;First free the buffer if we failed to read data into it 
   334 00000651 0FB74F08            <1>     movzx ecx, word [rdi + bufferHdr.driveNumber]   ;Save drv num for retry
   335 00000655 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh ;Free buffer and clear flags
   336 0000065B C605(5CC40300)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   337 00000662 E8D2540000          <1>     call diskDevErr
   338 00000667 3C01                <1>     cmp al, critRetry
   339 00000669 7506                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   340 0000066B 66894F08            <1>     mov word [rdi + bufferHdr.driveNumber], cx ;Put drvNm + flgs if trying again
   341 0000066F EBA3                <1>     jmp short .rsRequest0
   342                              <1> .fail:
   343 00000671 F9                  <1>     stc ;Set error flag to indicate fail
   344 00000672 E9CFFFFFFF          <1>     jmp .rsExitFail
   345                              <1>     
   346                              <1> findLRUBuffer: ;Internal Linkage
   347                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   348                              <1> ; in rbx and the currBuff variable
   349                              <1> ;Input: Nothing
   350                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   351                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   352 00000677 52                  <1>     push rdx
   353 00000678 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   354 0000067F 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   355 00000683 7436                <1>     je .flbExit 
   356 00000685 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   357 0000068C 742D                <1>     je .flbExit
   358                              <1> .flbWalk:
   359 0000068E 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   360 00000691 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   361 00000694 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   362 00000698 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   363 0000069A 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   364 000006A1 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   365 000006A3 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   366                              <1> .flbHeadLink:
   367 000006AA 488B15(63C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   368 000006B1 48893D(63C00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   369 000006B8 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   370                              <1> .flbExit:
   371 000006BB 5A                  <1>     pop rdx
   372 000006BC 48893D(2EC70300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   373                              <1>     return
    13                              <2> %%_ret:
    14 000006C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   374                              <1> .flbFreeLink:
   375 000006C4 51                  <1>     push rcx
   376 000006C5 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   377 000006C8 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   378 000006CB 59                  <1>     pop rcx
   379 000006CC EBDC                <1>     jmp short .flbHeadLink
   380                              <1> 
   381                              <1> findSectorInBuffer:     ;Internal linkage
   382                              <1> ;Finds the Buffer for a sector belonging to a particular dpb device
   383                              <1> ;If the sector is not in a buffer, returns with a -1
   384                              <1> ;Input: rax = Sector number
   385                              <1> ;       dl = Drive number
   386                              <1> ;Output: rdi = Buffer hdr pointer or -1
   387 000006CE 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   388                              <1> .fsiCheckBuffer:
   389 000006D5 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   390 000006D8 7507                <1>     jne .fsiGotoNextBuffer
   391 000006DA 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   392 000006DE 7501                <1>     jne .fsiGotoNextBuffer
   393                              <1> .fsiExit:
   394                              <1>     return
    13                              <2> %%_ret:
    14 000006E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   395                              <1> .fsiGotoNextBuffer:
   396 000006E1 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   397 000006E4 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   398 000006EB 74F3                <1>     je .fsiExit
   399 000006ED EBE6                <1>     jmp short .fsiCheckBuffer
   400                              <1> 
   401                              <1> ;-----------------------------------------------------------------------------
   402                              <1> ;SPECIAL BUFFER FUNCTIONS
   403                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   404                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   405                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   406                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   407                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   408                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   409                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   410                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   411                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   412                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   413                              <1> ;-----------------------------------------------------------------------------
   414                              <1> getBufForDataNoFile:
   415                              <1> ;Returns a buffer to use for disk data in rbx
   416                              <1> ;Requires a File Handle.
   417                              <1> ;Input: [workingDPB] = DPB to transact on
   418                              <1> ;       rax = Sector to transfer
   419                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   420 000006EF 51                  <1>     push rcx
   421 000006F0 B108                <1>     mov cl, dataBuffer
   422 000006F2 56                  <1>     push rsi
   423 000006F3 57                  <1>     push rdi
   424 000006F4 488B35(FAC60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   425 000006FB E891FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   426 00000700 725F                <1>     jc getBufCommon.exit
   427 00000702 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   428 0000070A EB55                <1>     jmp short getBufCommon.exit
   429                              <1> getBufForDirNoFile:
   430                              <1> ;Returns a buffer to use for disk dir data in rbx
   431                              <1> ;Requires a File Handle.
   432                              <1> ;Input: [workingDPB] = DPB to transact on
   433                              <1> ;       rax = Sector to transfer
   434                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   435 0000070C 51                  <1>     push rcx
   436 0000070D B104                <1>     mov cl, dirBuffer
   437 0000070F 56                  <1>     push rsi
   438 00000710 57                  <1>     push rdi
   439 00000711 488B35(FAC60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   440 00000718 E874FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   441 0000071D 7242                <1>     jc getBufCommon.exit
   442 0000071F 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   443 00000727 EB38                <1>     jmp short getBufCommon.exit
   444                              <1> getBufForFat:
   445                              <1> ;Returns a buffer to use for fat data in rbx
   446                              <1> ;Input: [workingDPB] = DPB to transact on
   447                              <1> ;       rax = Sector to transfer
   448                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   449 00000729 51                  <1>     push rcx
   450 0000072A B102                <1>     mov cl, fatBuffer
   451 0000072C EB03                <1>     jmp short getBufCommon2
   452                              <1> getBufForDOS:
   453                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   454                              <1> ;Input: [workingDPB] = DPB to transact on
   455                              <1> ;       rax = Sector to transfer
   456                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   457 0000072E 51                  <1>     push rcx
   458 0000072F B101                <1>     mov cl, dosBuffer
   459                              <1> getBufCommon2:
   460 00000731 56                  <1>     push rsi
   461 00000732 57                  <1>     push rdi    ;Push rdi to preserve it
   462 00000733 488B35(FAC60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   463 0000073A EB15                <1>     jmp short getBufCommon.makeReq
   464                              <1> getBufForDir:
   465                              <1> ;Returns a buffer to use for disk directory data in rbx
   466                              <1> ;Input: [currentSFT] = File to manipulate
   467                              <1> ;       rax = Sector to transfer
   468                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   469 0000073C 51                  <1>     push rcx
   470 0000073D B104                <1>     mov cl, dirBuffer
   471 0000073F EB03                <1>     jmp short getBufCommon
   472                              <1> getBufForData:
   473                              <1> ;Returns a buffer to use for disk data in rbx
   474                              <1> ;Requires a File Handle.
   475                              <1> ;Input: [currentSFT] = File to manipulate
   476                              <1> ;       rax = Sector to transfer
   477                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   478 00000741 51                  <1>     push rcx
   479 00000742 B108                <1>     mov cl, dataBuffer
   480                              <1> getBufCommon:
   481 00000744 56                  <1>     push rsi
   482 00000745 57                  <1>     push rdi
   483 00000746 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
   484 0000074D 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   485                              <1> .makeReq:
   486 00000751 E83BFEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   487 00000756 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   488                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   489                              <1>     ; flushed to the file!
   490                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   491                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   492                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   493 00000758 F6C103              <1>     test cl, dosBuffer | fatBuffer
   494 0000075B 7504                <1>     jnz .exit
   495 0000075D 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   496                              <1> .exit:
   497 00000761 5F                  <1>     pop rdi
   498 00000762 5E                  <1>     pop rsi
   499 00000763 59                  <1>     pop rcx
   500                              <1>     return
    13                              <2> %%_ret:
    14 00000764 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   501                              <1> 
   502                              <1> flushFile:
   503                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   504                              <1> ; FAT/DOS buffers to flush
   505                              <1> ; We flush and free, and set to head of chain before continuing to search
   506                              <1> ;Input: rdi = is the file (sft) we wish to flush
   507                              <1> ;Output: CF=NC => All ok
   508                              <1> ;        CF=CY => A sector failed, exit. 
   509 00000765 57                  <1>     push rdi
   510 00000766 56                  <1>     push rsi
   511                              <1>     ;First check if the file has been written to?
   512 00000767 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   513 0000076D 7534                <1>     jnz .exitNoFlush ;Exit without flushing if set
   514 0000076F 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   515 00000772 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   516                              <1> .ffLoop:
   517 00000779 4881FFFFFFFFFF      <1>     cmp rdi, -1
   518 00000780 741B                <1>     je .exit
   519 00000782 F6470907            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer | dirBuffer
   520 00000786 751E                <1>     jnz .found  ;Flush if either bit is set
   521 00000788 48817F1FFFFFFFFF    <1>     cmp qword [rdi + bufferHdr.owningFile], -1  ;If owning file is -1, flush too
   522 00000790 7414                <1>     je .found
   523 00000792 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   524 00000796 740E                <1>     je .found
   525 00000798 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   526 0000079B EBDC                <1>     jmp short .ffLoop
   527                              <1> .exit:
   528                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   529 0000079D 66814E054000        <1>     or word [rsi + sft.wDeviceInfo], blokFileNoFlush  ;Set that bit again!
   530                              <1> .exitNoFlush:
   531 000007A3 5E                  <1>     pop rsi
   532 000007A4 5F                  <1>     pop rdi
   533                              <1>     return
    13                              <2> %%_ret:
    14 000007A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   534                              <1> .found:
   535                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   536                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   537 000007A6 E893FCFFFF          <1>     call flushAndFreeBuffer ;Flush and free buffer
   538 000007AB 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   539                              <1>     ;If the sector has been successfully flushed, then it
   540                              <1>     ; is no longer owned by that File so we mark the owner as none
   541 000007AD 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   542 000007B5 E8ACFCFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   543 000007BA EBBD                <1>     jmp short .ffLoop
    26                                  %include "./Source/Kernel/FAT/fat.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;       File System routines        :
     3                              <1> ;-----------------------------------:
     4                              <1> getFATtype:
     5                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
     6                              <1> ;Entry: rbp = DPB to ascertain FAT
     7                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
     8 000007BC 53                  <1>     push rbx
     9 000007BD 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    10 000007C0 B902000000          <1>     mov ecx, 2  ;FAT 32 marker
    11 000007C5 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    12 000007CB 730C                <1>     jae .exit
    13 000007CD FFC9                <1>     dec ecx     ;FAT 16 marker
    14 000007CF 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    15 000007D5 7302                <1>     jae .exit
    16 000007D7 FFC9                <1>     dec ecx     ;FAT 12 marker
    17                              <1> .exit:
    18 000007D9 5B                  <1>     pop rbx
    19                              <1>     return
    13                              <2> %%_ret:
    14 000007DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> clust2FATEntry:
    22                              <1> ;Converts a cluster number to a offset in the FAT
    23                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    24                              <1> ;        eax = Cluster number to look for
    25                              <1> ;Exit:   eax = Sector on disk of FAT 
    26                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    27                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    28 000007DB 53                  <1>     push rbx
    29 000007DC 55                  <1>     push rbp
    30 000007DD 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
    31 000007E4 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    32 000007E7 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    33 000007ED 731E                <1>     jae .fat32
    34 000007EF 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    35 000007F5 7209                <1>     jb .fat12
    36                              <1> ;FAT16
    37 000007F7 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    38 000007F9 6801000000          <1>     push qword 1
    39 000007FE EB15                <1>     jmp short .common
    40                              <1> .fat12:
    41 00000800 89C1                <1>     mov ecx, eax    ;ecx = eax
    42 00000802 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    43 00000804 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    44 00000806 6800000000          <1>     push qword 0
    45 0000080B EB08                <1>     jmp short .common
    46                              <1> .fat32:
    47 0000080D 6802000000          <1>     push qword 2
    48 00000812 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    49                              <1> .common:
    50                              <1> ;eax has the FAToffset
    51 00000815 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    52 00000819 31D2                <1>     xor edx, edx    ;edx = 0
    53 0000081B F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    54 0000081D 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    55 00000821 01D8                <1>     add eax, ebx
    56 00000823 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    57 00000824 5D                  <1>     pop rbp
    58 00000825 5B                  <1>     pop rbx
    59                              <1>     return
    13                              <2> %%_ret:
    14 00000826 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> getStartSectorOfCluster:
    62                              <1> ;Input: eax = Cluster Number
    63                              <1> ;       rbp = dpb pointer
    64                              <1> ;Output: rax = Starting Sector number for cluster
    65                              <1> ;Gives the data sector we are at in the current cluster
    66                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    67 00000827 51                  <1>     push rcx
    68 00000828 09C0                <1>     or eax, eax ;Zero upper dword
    69 0000082A 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    70                              <1> .fat32Root:
    71 0000082C 482D02000000        <1>     sub rax, 2
    72 00000832 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    73 00000835 48D3E0              <1>     shl rax, cl
    74 00000838 31C9                <1>     xor ecx, ecx
    75 0000083A 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    76 0000083D 4801C8              <1>     add rax, rcx
    77                              <1>     ;rax now has the first sector of the current cluster
    78 00000840 59                  <1>     pop rcx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00000841 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .rootDir:
    81 00000842 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
    82 00000845 E872FFFFFF          <1>     call getFATtype
    83 0000084A 81F902000000        <1>     cmp ecx, 2
    84 00000850 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
    85                              <1>     ;Else rax has the first sector of the Root Dir
    86 00000852 59                  <1>     pop rcx
    87                              <1>     return
    13                              <2> %%_ret:
    14 00000853 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> 
    90                              <1> getLastClusterInChain:
    91                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
    92                              <1> ;Input: eax = Cluster to start searching at
    93                              <1> ;Output: eax = Last cluster in chain
    94                              <1> ;If input eax = 0, output eax = 0
    95 00000854 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
    96                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000856 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    97 00000858 53                  <1>     push rbx
    98                              <1> .lp:
    99 00000859 89C3                <1>     mov ebx, eax
   100 0000085B E8C9010000          <1>     call readFAT
   101 00000860 7209                <1>     jc .exit
   102 00000862 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   103 00000867 75F0                <1>     jne .lp
   104 00000869 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   105                              <1> .exit: 
   106 0000086B 5B                  <1>     pop rbx
   107                              <1>     return
    13                              <2> %%_ret:
    14 0000086C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> getNumberOfClustersInChain:
   110                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   111                              <1> ;Input: eax = Cluster to start searching at
   112                              <1> ;Output: eax = Number of clusters in the chain
   113                              <1> ;If input eax = 0, output eax = 0
   114 0000086D 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   115                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000086F 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   116 00000871 51                  <1>     push rcx
   117 00000872 31C9                <1>     xor ecx, ecx
   118                              <1> .lp:
   119 00000874 FFC1                <1>     inc ecx
   120 00000876 E8AE010000          <1>     call readFAT
   121 0000087B 7209                <1>     jc .exit
   122 0000087D 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   123 00000882 75F0                <1>     jne .lp
   124 00000884 89C8                <1>     mov eax, ecx    ;Get the count
   125                              <1> .exit: 
   126 00000886 59                  <1>     pop rcx
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000887 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> getClusterInChain:
   130                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   131                              <1> ;If an EOC is encountered, then ecx will not be 
   132                              <1> ;Input: eax = Start Cluster to start searching from
   133                              <1> ;       ecx = Number of clusters to go forwards by;
   134                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   135                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   136                              <1> ;Also usual CF babble.
   137 00000888 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   138                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000088A 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   139 0000088C 53                  <1>     push rbx
   140 0000088D 67E30F              <1>     jecxz .exit
   141                              <1> .lp:
   142 00000890 89C3                <1>     mov ebx, eax
   143 00000892 E892010000          <1>     call readFAT
   144 00000897 7206                <1>     jc .exit
   145 00000899 FFC9                <1>     dec ecx
   146 0000089B 75F3                <1>     jnz .lp
   147 0000089D 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   148                              <1> .exit:
   149 0000089F 5B                  <1>     pop rbx
   150                              <1>     return
    13                              <2> %%_ret:
    14 000008A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> startNewChain:
   153                              <1> ;Working dpb must be set
   154                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   155                              <1> ;If CF=CY, hard error
   156 000008A1 53                  <1>     push rbx
   157 000008A2 56                  <1>     push rsi
   158 000008A3 E862000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   159 000008A8 721A                <1>     jc .exit    ;Disk read error?
   160 000008AA 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   161 000008AF 7413                <1>     je .exit
   162 000008B1 BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   163 000008B6 89C3                <1>     mov ebx, eax
   164 000008B8 E80D020000          <1>     call writeFAT   ;Propagate the CF 
   165 000008BD 89D8                <1>     mov eax, ebx
   166 000008BF E8BC020000          <1>     call decrementFreeClusterCount
   167                              <1> .exit:
   168 000008C4 5E                  <1>     pop rsi
   169 000008C5 5B                  <1>     pop rbx
   170                              <1>     return
    13                              <2> %%_ret:
    14 000008C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   171                              <1> 
   172                              <1> allocateClusters:
   173                              <1> ;Working dpb must be set. 
   174                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   175                              <1> ;       ebx = Cluster to link to the new cluster
   176                              <1> ;Output:    
   177                              <1> ;   CF=NC => Complete.
   178                              <1> ;   If eax = -1, then no more free clusters. 
   179                              <1> ;   CF=CY => Hard error, exit
   180                              <1> ; ecx always has number of allocated clusters
   181 000008C7 F8                  <1>     clc ;Always clear the flags before starting
   182 000008C8 53                  <1>     push rbx
   183 000008C9 56                  <1>     push rsi
   184 000008CA 51                  <1>     push rcx    ;Save tfr count on stack
   185 000008CB 67E332              <1>     jecxz .exit ;Allocating nothing? Exit
   186                              <1> .allocateLoop:
   187 000008CE E837000000          <1>     call findFreeCluster
   188 000008D3 722B                <1>     jc .exit
   189 000008D5 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   190 000008DA 7424                <1>     je .exit    ;If the cluster number is -1, return immediately
   191                              <1>     ;eax has first free cluster value to use
   192                              <1>     ;First we link the previous cluster to this cluster
   193 000008DC BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   194 000008E1 50                  <1>     push rax
   195 000008E2 E8E3010000          <1>     call writeFAT   ;Allocate this cluster first
   196 000008E7 58                  <1>     pop rax
   197 000008E8 7216                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   198 000008EA E891020000          <1>     call decrementFreeClusterCount
   199                              <1>     ;eax points to this allocated cluster
   200                              <1>     ;ebx points to the previous last cluster
   201 000008EF 89C6                <1>     mov esi, eax    ;New cluster as "value"
   202 000008F1 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   203 000008F3 E8D2010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   204 000008F8 7206                <1>     jc .exit
   205 000008FA 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   206 000008FC FFC9                <1>     dec ecx ;One less cluster allocated
   207 000008FE 75CE                <1>     jnz .allocateLoop
   208                              <1> .exit:
   209 00000900 5E                  <1>     pop rsi ;Pop the tfr count into esi
   210 00000901 9C                  <1>     pushfq
   211 00000902 F7D9                <1>     neg ecx
   212 00000904 01F1                <1>     add ecx, esi
   213 00000906 9D                  <1>     popfq
   214 00000907 5E                  <1>     pop rsi
   215 00000908 5B                  <1>     pop rbx
   216                              <1>     return
    13                              <2> %%_ret:
    14 00000909 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> 
   218                              <1> findFreeCluster:
   219                              <1> ;Walks the FAT to find a free cluster and returns the 
   220                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   221                              <1> ;Works on the workingDPB
   222                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   223 0000090A 53                  <1>     push rbx
   224 0000090B 52                  <1>     push rdx
   225 0000090C 55                  <1>     push rbp
   226 0000090D 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   227                              <1>     ;Use readFAT
   228                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   229                              <1>     ;If readFAT returns 0 then its a free cluster
   230 00000914 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   231                              <1> .fatLoop:
   232 00000919 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   233 0000091B E809010000          <1>     call readFAT    ;Read the value at eax, if it is 0, then eax is free
   234 00000920 7210                <1>     jc .exitFail    ;If something goes wrong, just return
   235 00000922 85C0                <1>     test eax, eax   ;Is this cluster free?
   236 00000924 7409                <1>     jz .exit    ;If yes, exit
   237 00000926 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   238 0000092A 3B450F              <1>     cmp eax, dword [rbp + dpb.dClusterCount]
   239 0000092D 76EA                <1>     jbe .fatLoop
   240                              <1> .exit:
   241 0000092F 89D8                <1>     mov eax, ebx
   242 00000931 F8                  <1>     clc
   243                              <1> .exitFail:      ;Keep carry flag
   244 00000932 5D                  <1>     pop rbp
   245 00000933 5A                  <1>     pop rdx
   246 00000934 5B                  <1>     pop rbx
   247                              <1>     return
    13                              <2> %%_ret:
    14 00000935 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   248                              <1> 
   249                              <1> findFreeClusterData:
   250                              <1> ;Walks the FAT to find a free cluster and returns the 
   251                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   252                              <1> ; Also finds NumberOfFreeCLusters, if it is unknown. 
   253                              <1> ; Both fields get filled in the workingDPB
   254                              <1> ;Works on the workingDPB
   255                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   256 00000936 53                  <1>     push rbx
   257 00000937 52                  <1>     push rdx
   258 00000938 55                  <1>     push rbp
   259 00000939 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   260 00000940 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   261                              <1>     ;Mark dFirstFreeCluster as -1, unknown
   262 00000944 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dFirstFreeCluster], -1
   263                              <1>     ;Use readFAT
   264                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   265                              <1>     ;If readFAT returns 0 then its a free cluster
   266 0000094B B802000000          <1>     mov eax, 2  ;Start with cluster 2
   267 00000950 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   268                              <1> .fatLoop:
   269 00000953 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   270 00000955 E8CF000000          <1>     call readFAT
   271 0000095A 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   272 0000095C 85C0                <1>     test eax, eax   ;Is this cluster free?
   273 0000095E 750C                <1>     jne .fatProceed
   274 00000960 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   275 00000967 7413                <1>     je .fatFirst
   276 00000969 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   277                              <1> .fatProceed:
   278 0000096C 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   279 00000970 39D0                <1>     cmp eax, edx
   280 00000972 76DF                <1>     jbe .fatLoop
   281                              <1> .exit:
   282 00000974 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   283 00000977 F8                  <1>     clc
   284                              <1> .exitFail:      ;Keep carry flag
   285 00000978 5D                  <1>     pop rbp
   286 00000979 5A                  <1>     pop rdx
   287 0000097A 5B                  <1>     pop rbx
   288                              <1>     return
    13                              <2> %%_ret:
    14 0000097B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   289                              <1> .fatFirst:
   290                              <1> ;Set the first free cluster value in the DPB and check if we need to get a count
   291 0000097C 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   292 0000097F 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1 ;If unknown, get count
   293 00000986 74E4                <1>     je .fatProceed
   294 00000988 EBEA                <1>     jmp short .exit ;Else, we have valid count so just exit
   295                              <1> 
   296                              <1> getNextSectorOfFile:
   297                              <1> ;This function will read the next sector for a file into a buffer.
   298                              <1> ;If the next sector to be read lives in the next cluster, it will update
   299                              <1> ; the vars appropriately
   300                              <1> ;
   301                              <1> ;Input: rbp = dpb pointer
   302                              <1> ;Output:
   303                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   304                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   305                              <1> ;       CF=CY => Critical error occurred and was FAILed
   306                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   307                              <1> ; next cluster and read first sector 
   308                              <1>     ;Check if we need to go to next cluster
   309 0000098A 8A05(4CC70300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   310 00000990 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   311 00000993 7416                <1>     je .gotoNextCluster
   312                              <1>     ;Goto next sector in same cluster
   313 00000995 FE05(4CC70300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   314 0000099B 48FF05(4DC70300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   315 000009A2 488B05(4DC70300)    <1>     mov rax, qword [currSectD]
   316                              <1> .exitOK:
   317 000009A9 F8                  <1>     clc
   318                              <1> .exitFail:
   319                              <1>     return
    13                              <2> %%_ret:
    14 000009AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   320                              <1> .gotoNextCluster:
   321 000009AB 8B05(44C70300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   322 000009B1 E873000000          <1>     call readFAT
   323 000009B6 72F2                <1>     jc .exitFail
   324                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   325 000009B8 3DFFFFFFFF          <1>     cmp eax, -1
   326 000009BD 74EA                <1>     je .exitOK
   327                              <1> ;Update the new cluster and sector information
   328 000009BF 8905(44C70300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   329 000009C5 FF05(40C70300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   330 000009CB E857FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   331 000009D0 488905(4DC70300)    <1>     mov qword [currSectD], rax  ;Save it
   332 000009D7 C605(4CC70300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   333 000009DE EBC9                <1>     jmp short .exitOK
   334                              <1> 
   335                              <1> unlinkFAT:
   336                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   337                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   338                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   339                              <1> ; cluster must be set to EOC before this proc is called.
   340                              <1> ;Stops at first invalid cluster number.
   341                              <1> ;
   342                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   343                              <1> ;       rbp = Current DPB to use for disk
   344                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   345                              <1> 
   346 000009E0 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   347 000009E1 56                  <1>     push rsi
   348 000009E2 E813000000          <1>     call truncateFAT    ;Preserved eax
   349 000009E7 720E                <1>     jc .exit
   350 000009E9 31F6                <1>     xor esi, esi  ;Free first cluster too
   351 000009EB E8DA000000          <1>     call writeFAT
   352 000009F0 7205                <1>     jc .exit
   353 000009F2 E87A010000          <1>     call incrementFreeClusterCount  ;One more cluster freed
   354                              <1> .exit:
   355 000009F7 5E                  <1>     pop rsi
   356 000009F8 58                  <1>     pop rax
   357                              <1>     return
    13                              <2> %%_ret:
    14 000009F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   358                              <1> 
   359                              <1> truncateFAT:
   360                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   361                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   362                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   363                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   364                              <1> ;Stops at first invalid cluster number.
   365                              <1> ;
   366                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   367                              <1> ;       rbp = Current DPB to use for disk
   368                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   369 000009FA 50                  <1>     push rax
   370 000009FB 53                  <1>     push rbx
   371 000009FC 51                  <1>     push rcx
   372 000009FD 56                  <1>     push rsi
   373 000009FE 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   374                              <1> .lp:
   375 00000A00 E824000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   376 00000A05 721D                <1>     jc .exit    ;Error exit
   377 00000A07 89C1                <1>     mov ecx, eax   ;Move chain marker to ecx
   378 00000A09 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   379 00000A0A 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   380 00000A0C E8B9000000          <1>     call writeFAT
   381 00000A11 7211                <1>     jc .exit    ;Error exit
   382 00000A13 E859010000          <1>     call incrementFreeClusterCount  ;Successfully freed the cluster
   383 00000A18 81F9FFFFFFFF        <1>     cmp ecx, -1 ;End of chain?
   384 00000A1E 7404                <1>     je .exit
   385 00000A20 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   386 00000A22 EBDC                <1>     jmp short .lp
   387                              <1> .exit:
   388 00000A24 5E                  <1>     pop rsi
   389 00000A25 59                  <1>     pop rcx
   390 00000A26 5B                  <1>     pop rbx
   391 00000A27 58                  <1>     pop rax
   392                              <1>     return
    13                              <2> %%_ret:
    14 00000A28 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   393                              <1> readFAT:
   394                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   395                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   396                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   397                              <1> ;       rbp = DPB
   398                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   399                              <1> ;If carry set, getBuffer failed!
   400 00000A29 53                  <1>     push rbx
   401 00000A2A 51                  <1>     push rcx
   402 00000A2B 52                  <1>     push rdx
   403 00000A2C 57                  <1>     push rdi
   404 00000A2D 55                  <1>     push rbp
   405 00000A2E 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   406 00000A30 E8A6FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   407                              <1>     ;and FAT type in ecx
   408 00000A35 E8EFFCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   409 00000A3A 7237                <1>     jc .exitFail
   410                              <1>     ;Check if FAT 12, 16, 32
   411 00000A3C 85C9                <1>     test ecx, ecx
   412 00000A3E 7439                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   413 00000A40 F7C101000000        <1>     test ecx, 1
   414 00000A46 7413                <1>     jz .goToNextClusterFat32
   415                              <1>     ;Here we handle FAT16
   416 00000A48 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   417 00000A4D 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   418 00000A52 721E                <1>     jb .exit
   419 00000A54 B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   420 00000A59 EB17                <1>     jmp short .exit
   421                              <1> .goToNextClusterFat32:
   422 00000A5B 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   423 00000A5F 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   424 00000A64 7207                <1>     jb .validCluster32   
   425 00000A66 B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   426 00000A6B EB05                <1>     jmp short .exit
   427                              <1> .validCluster32:
   428 00000A6D 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   429                              <1> .exit:
   430 00000A72 F8                  <1>     clc
   431                              <1> .exitFail:
   432 00000A73 5D                  <1>     pop rbp
   433 00000A74 5F                  <1>     pop rdi
   434 00000A75 5A                  <1>     pop rdx
   435 00000A76 59                  <1>     pop rcx
   436 00000A77 5B                  <1>     pop rbx
   437                              <1>     return
    13                              <2> %%_ret:
    14 00000A78 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> .gotoNextClusterFat12:
   439                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   440                              <1> ;eax has the sector number of the FAT
   441                              <1> ;edx has byte offset into the sector
   442                              <1> ;edi has current cluster number
   443                              <1> ;rbx has ptr to buffer header
   444 00000A79 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   445 00000A7F 742E                <1>     jz .gotoNextClusterFat12Even
   446                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   447 00000A81 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   448 00000A85 29D1                <1>     sub ecx, edx
   449 00000A87 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   450 00000A89 751A                <1>     jnz .gotoNextClusterFat12NoCross
   451                              <1>     ;Boundary cross, build entry properly
   452 00000A8B 0FB65C1330          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   453 00000A90 FFC0                <1>     inc eax ;Get next FAT sector
   454 00000A92 53                  <1>     push rbx
   455 00000A93 E891FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   456 00000A98 59                  <1>     pop rcx ;Get bl in ecx, the last entry from the previous buffer
   457 00000A99 72D8                <1>     jc .exitFail
   458 00000A9B 89C8                <1>     mov eax, ecx    ;Move the entry if all ok
   459 00000A9D 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   460 00000AA0 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   461 00000AA3 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   462                              <1> .gotoNextClusterFat12NoCross:
   463 00000AA5 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   464 00000AAA C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   465 00000AAD EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   466                              <1> .gotoNextClusterFat12Even:
   467                              <1>     ;Here the cluster is even and can't cross a sector boundary
   468 00000AAF 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   469 00000AB4 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   470                              <1> .checkIfLastFAT12Cluster:
   471 00000AB9 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   472 00000ABE 72B2                <1>     jb .exit         ;If so, exit with it in eax (and clear CF)
   473 00000AC0 B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   474 00000AC5 E9A8FFFFFF          <1>     jmp .exit
   475                              <1> 
   476                              <1> writeFAT:
   477                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   478                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   479                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   480                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   481                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   482 00000ACA 53                  <1>     push rbx
   483 00000ACB 51                  <1>     push rcx
   484 00000ACC 52                  <1>     push rdx
   485 00000ACD 56                  <1>     push rsi
   486 00000ACE 57                  <1>     push rdi
   487 00000ACF 55                  <1>     push rbp
   488 00000AD0 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   489 00000AD2 E804FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   490                              <1>     ;and FAT type in ecx
   491 00000AD7 E84DFCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   492 00000ADC 7223                <1>     jc .exitFail
   493                              <1>     ;Check if FAT 12, 16, 32
   494 00000ADE 85C9                <1>     test ecx, ecx
   495 00000AE0 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   496 00000AE2 F7C101000000        <1>     test ecx, 1
   497 00000AE8 7407                <1>     jz .goToNextClusterFat32
   498                              <1>     ;Here we handle FAT16
   499 00000AEA 6689741330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], si ;Store the value
   500 00000AEF EB0A                <1>     jmp short .exit
   501                              <1> .goToNextClusterFat32:
   502 00000AF1 81E6FFFFFF0F        <1>     and esi, 0FFFFFFFh  ;Zero upper nybble
   503 00000AF7 89741330            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], esi
   504                              <1> .exit:
   505 00000AFB E881FAFFFF          <1>     call markBufferDirty
   506 00000B00 F8                  <1>     clc
   507                              <1> .exitFail:
   508 00000B01 5D                  <1>     pop rbp
   509 00000B02 5F                  <1>     pop rdi
   510 00000B03 5E                  <1>     pop rsi
   511 00000B04 5A                  <1>     pop rdx
   512 00000B05 59                  <1>     pop rcx
   513 00000B06 5B                  <1>     pop rbx
   514                              <1>     return
    13                              <2> %%_ret:
    14 00000B07 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   515                              <1> .gotoNextClusterFat12:
   516                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   517                              <1> ;eax has the sector number of the FAT
   518                              <1> ;edx has byte offset into the sector
   519                              <1> ;edi has current cluster number
   520                              <1> ;rbx has ptr to buffer header
   521 00000B08 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   522 00000B0E F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   523 00000B14 7445                <1>     jz .gotoNextClusterFat12Even
   524                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   525 00000B16 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   526 00000B1A 29D1                <1>     sub ecx, edx
   527 00000B1C FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   528 00000B1E 752C                <1>     jnz .gotoNextClusterFat12NoCross
   529                              <1>     ;Boundary cross, build entry properly
   530                              <1>     ;Replace the high nybble of the low byte 
   531                              <1>     ;breakpoint
   532 00000B20 0FB64C1330          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   533 00000B25 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   534 00000B2B C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   535 00000B2E 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   536 00000B30 C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   537 00000B33 884C1330            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   538 00000B37 E845FAFFFF          <1>     call markBufferDirty
   539 00000B3C FFC0                <1>     inc eax ;Get next FAT sector
   540 00000B3E E8E6FBFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   541 00000B43 72BC                <1>     jc .exitFail
   542 00000B45 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   543 00000B47 884B30              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   544 00000B4A EBAF                <1>     jmp short .exit
   545                              <1> .gotoNextClusterFat12NoCross:
   546 00000B4C 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   547 00000B51 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   548 00000B56 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   549 00000B59 EB0A                <1>     jmp short .fat12common
   550                              <1> .gotoNextClusterFat12Even:
   551                              <1>     ;Here the cluster is even and can't cross a sector boundary
   552 00000B5B 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   553 00000B60 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   554                              <1> .fat12common:
   555 00000B65 09F0                <1>     or eax, esi     ;Add the new entry bits
   556 00000B67 6689441330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   557 00000B6C E98AFFFFFF          <1>     jmp .exit
   558                              <1> 
   559                              <1> incrementFreeClusterCount:
   560                              <1> ;Cluster Deallocated Function
   561 00000B71 9C                  <1>     pushfq
   562 00000B72 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   563 00000B79 7403                <1>     je .exit
   564 00000B7B FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters]
   565                              <1> .exit:
   566 00000B7E 9D                  <1>     popfq
   567                              <1>     return
    13                              <2> %%_ret:
    14 00000B7F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   568                              <1> decrementFreeClusterCount:
   569                              <1> ;Cluster Allocated Function
   570 00000B80 9C                  <1>     pushfq
   571 00000B81 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   572 00000B88 7403                <1>     je .exit
   573 00000B8A FF4D31              <1>     dec dword [rbp + dpb.dNumberOfFreeClusters]
   574                              <1> .exit:
   575 00000B8D 9D                  <1>     popfq
   576                              <1>     return
    13                              <2> %%_ret:
    14 00000B8E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    27                                  %include "./Source/Kernel/FAT/findfile.asm"
     1                              <1> ;Generic Find First and Find Next functions here
     2                              <1> findNextMain:
     3 00000B8F 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
     4 00000B96 F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
     5 00000B99 7408                <1>     jz .notNet
     6 00000B9B B81C110000          <1>     mov eax, 0111Ch ;Netowrk find next
     7 00000BA0 CD4F                <1>     int 4Fh
     8                              <1>     return  ;Return propagating the error code
    13                              <2> %%_ret:
    14 00000BA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> .notNet:
    10 00000BA3 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    11 00000BA5 FEC0                <1>     inc al  ;Convert into 1 based number
    12 00000BA7 E8595D0000          <1>     call dosCrit1Enter
    13 00000BAC E81D590000          <1>     call setDrive   ;Set CDS and current drive vars
    14 00000BB1 720C                <1>     jc .critError   ;Return error if this fails
    15 00000BB3 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] 
    16 00000BBA E831560000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    17                              <1> .critError:
    18 00000BBF E84B5D0000          <1>     call dosCrit1Exit
    19                              <1>     retc    ;Return error if this fails
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000BC4 72DC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    20 00000BC6 E801000000          <1>     call searchMoreDir
    21                              <1>     return
    13                              <2> %%_ret:
    14 00000BCB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> searchMoreDir:
    23                              <1> ;The three directory variables are set up from the ffblock. 
    24                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    25                              <1> ;Current DTA is also used to contain the ff block address
    26                              <1> ;All registers can be trashed
    27 00000BCC 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
    28                              <1>     ;First setup dirClustA and dirSect vars
    29 00000BD3 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA]
    30 00000BDA 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    31 00000BDD 8805(ECC60300)      <1>     mov byte [searchAttr], al   ;And save it
    32 00000BE3 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    33 00000BE6 8905(74C70300)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    34 00000BEC 8905(70C70300)      <1>     mov dword [dirClustPar], eax
    35                              <1>     ;Get number of 32 byte entries in a sector
    36 00000BF2 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    37 00000BF5 8905(7AC70300)      <1>     mov dword [dirEntry], eax
    38                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    39 00000BFB C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    40                              <1>     ;Now get bytes per cluster
    41 00000BFE 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    42 00000C00 813D(74C70300)0000- <1>     cmp dword [dirClustA], 0   ;If we at cluster 0, we are in old style root dir
    42 00000C08 0000                <1>
    43 00000C0A 0F8496000000        <1>     je .oldFat
    44 00000C10 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    45 00000C14 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    46 00000C18 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    47 00000C1A 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    48 00000C1C 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    49 00000C1E 31D2                <1>     xor edx, edx
    50 00000C20 F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    51                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    52                              <1>     ;edx has byte offset into cluster (or Root dir)
    53 00000C22 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    54                              <1>     ;Now compute sector offset into cluster
    55 00000C24 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    56 00000C28 89D0                <1>     mov eax, edx    ;Move offset into cluster
    57 00000C2A 31D2                <1>     xor edx, edx
    58 00000C2C F7F1                <1>     div ecx 
    59                              <1>     ;eax now has sector offset into cluster
    60                              <1>     ;edx has byte offset into sector 
    61 00000C2E 668905(78C70300)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    62 00000C35 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    63                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    64 00000C3B 89D9                <1>     mov ecx, ebx
    65 00000C3D 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    66                              <1> .fatlp:
    67 00000C40 E8E4FDFFFF          <1>     call readFAT
    68 00000C45 3DFFFFFFFF          <1>     cmp eax, -1
    69 00000C4A 7477                <1>     je .errorExit
    70 00000C4C FFC9                <1>     dec ecx
    71 00000C4E 75F0                <1>     jnz .fatlp
    72 00000C50 8905(74C70300)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    73                              <1> .skipFatWalk:
    74 00000C56 488D05AA000000      <1>     lea rax, searchDir.nextEp
    75 00000C5D 50                  <1>     push rax    ;Push the return address onto stack
    76 00000C5E 8B05(74C70300)      <1>     mov eax, dword [dirClustA]
    77 00000C64 E8BEFBFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
    78 00000C69 0FB71D(78C70300)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
    79 00000C70 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
    80                              <1> .common:
    81 00000C73 E8B6FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
    82 00000C78 0F8224010000        <1>     jc searchDir.hardError
    83 00000C7E E822010000          <1>     call adjustDosDirBuffer  ;rbx has the buffer ptr for this dir sector
    84 00000C83 E8DE010000          <1>     call findInBuffer.getNumberOfEntries    ;Get in ecx # of entries in sector
    85 00000C88 8B05(7AC70300)      <1>     mov eax, dword [dirEntry]
    86 00000C8E 250F000000          <1>     and eax, 0Fh    ;Get the value modulo 16
    87 00000C93 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
    88 00000C95 C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
    89 00000C98 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
    90                              <1>     ;We continue AS IF this entry was bad
    91                              <1>     ;Now setup al as upon normal entry 
    92 00000C9B 8A05(ECC60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
    93 00000CA1 E96D010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within function
    94                              <1>     ;The return address on the stack will return to the ep's pushed
    95                              <1> .oldFat:
    96                              <1> ;Old FAT 12/16 root dirs fall thru here only
    97                              <1> ;esi = byte ptr in root dir of entry
    98 00000CA6 488D05D9000000      <1>     lea rax, searchDir.oldNextEP
    99 00000CAD 50                  <1>     push rax    ;Push return address onto the stack
   100 00000CAE 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   101 00000CB2 31D2                <1>     xor edx, edx
   102 00000CB4 96                  <1>     xchg esi, eax
   103 00000CB5 F7F6                <1>     div esi ;Divide dir file position by bytes per sector
   104                              <1>     ;eax = Sector number 
   105                              <1>     ;edx = Byte offset within the sector
   106 00000CB7 668905(78C70300)    <1>     mov word [dirSect], ax ;Set the root directory sector offset
   107 00000CBE 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   108 00000CC1 EBB0                <1>     jmp short .common
   109                              <1> .errorExit:
   110 00000CC3 F9                  <1>     stc
   111                              <1>     return
    13                              <2> %%_ret:
    14 00000CC4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   112                              <1> searchDir:
   113                              <1> ;Called in a level 1 critical section. 
   114                              <1> ;The directory variables are set and fcbName has the pattern to match
   115                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   116                              <1> ;All registers can be trashed
   117                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   118                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   119                              <1> 
   120                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   121                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   122 00000CC5 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   123 00000CCC 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   124 00000CD2 7408                <1>     jz .notNet
   125 00000CD4 B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   126 00000CD9 CD4F                <1>     int 4fh
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000CDB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> .notNet:
   129 00000CDC 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   130 00000CE3 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   131 00000CE9 85C0                <1>     test eax, eax
   132 00000CEB 747E                <1>     jz .oldRoot
   133 00000CED E835FBFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   134                              <1> .sectorLoop:
   135 00000CF2 E837FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   136 00000CF7 0F82A5000000        <1>     jc .hardError
   137 00000CFD E8A3000000          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   138                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   139 00000D02 E8B2000000          <1>     call findInBuffer
   140                              <1> .nextEp:
   141                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000D07 73D2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   142 00000D09 0F848F000000        <1>     jz .fnfError    ;CF=CY AND ZF=ZE => File not found
   143                              <1>     ;If ZF=ZE then fnfError (i.e. we hit an entry starting with 00)
   144                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   145                              <1>     ;IF however, the next cluster is -1, then we return fail
   146 00000D0F 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   147 00000D15 8905(44C70300)      <1>     mov dword [currClustD], eax
   148 00000D1B 668B05(78C70300)    <1>     mov ax, word [dirSect]
   149 00000D22 8805(4CC70300)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   150 00000D28 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   151 00000D2C 488905(4DC70300)    <1>     mov qword [currSectD], rax  
   152 00000D33 C705(40C70300)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   152 00000D3B 0000                <1>
   153 00000D3D E848FCFFFF          <1>     call getNextSectorOfFile
   154 00000D42 725E                <1>     jc .hardError
   155 00000D44 3DFFFFFFFF          <1>     cmp eax, -1
   156 00000D49 7453                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   157 00000D4B 66FF05(78C70300)    <1>     inc word [dirSect]  ;Goto next sector
   158 00000D52 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   159 00000D58 3B05(44C70300)      <1>     cmp eax, dword [currClustD] ;Did it change?
   160 00000D5E 7492                <1>     je .sectorLoop  ;If not, we advanced sectors only
   161 00000D60 66C705(78C70300)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   161 00000D68 00                  <1>
   162 00000D69 EB87                <1>     jmp short .sectorLoop 
   163                              <1> 
   164                              <1> .oldRoot:
   165                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   166                              <1> ; one large contiguous cluster.
   167                              <1> .oldSectorLp:
   168 00000D6B 0FB705(78C70300)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   169 00000D72 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   170 00000D75 E8B4F9FFFF          <1>     call getBufForDOS
   171 00000D7A 7226                <1>     jc .hardError
   172 00000D7C E824000000          <1>     call adjustDosDirBuffer      ;rbx has the buffer pointer for this dir sector
   173 00000D81 E833000000          <1>     call findInBuffer
   174                              <1> .oldNextEP:
   175                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000D86 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000D88 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   176 00000D89 7413                <1>     jz .fnfError
   177 00000D8B 66FF05(78C70300)    <1>     inc word [dirSect]  ;Goto next sector in directory
   178 00000D92 0FB74509            <1>     movzx eax, word [rbp + dpb.wNumberRootDirEntries]
   179 00000D96 3905(7AC70300)      <1>     cmp dword [dirEntry], eax ;Have we reached the last dir entry?
   180 00000D9C 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   181                              <1> .fnfError:
   182 00000D9E B012                <1>     mov al, errNoFil
   183 00000DA0 F9                  <1>     stc
   184                              <1>     return
    13                              <2> %%_ret:
    14 00000DA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> .hardError:
   186 00000DA2 B0FF                <1>     mov al, -1
   187                              <1>     return
    13                              <2> %%_ret:
    14 00000DA4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   188                              <1> adjustDosDirBuffer:
   189 00000DA5 804B0904            <1>     or byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   190 00000DA9 806309FE            <1>     and byte [rbx + bufferHdr.bufferFlags], ~dosBuffer
   191 00000DAD 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   192 00000DB1 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   193 00000DB5 C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   194                              <1>     return
    13                              <2> %%_ret:
    14 00000DB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   195                              <1> 
   196                              <1> findInBuffer:
   197                              <1> ;Input:  rsi = Sector buffer data area
   198                              <1> ;Output: CF=CY => No entries found
   199                              <1> ;        ZF=NE => Keep searching in subsequent directories
   200                              <1> ;        ZF=ZE => End of directory reached early, stop
   201                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   202                              <1> ;        rsi = Points to start of the disk buffer directory entry
   203 00000DB9 E8A8000000          <1>     call .getNumberOfEntries    ;Get in ecx # of entries in sector
   204 00000DBE 8A05(ECC60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   205 00000DC4 E8AE000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   206                              <1> .searchMainLp:
   207                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   208 00000DC9 8A25(F8C60300)      <1>     mov ah, byte [delChar]
   209 00000DCF 803E00              <1>     cmp byte [rsi], 00h
   210 00000DD2 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   211 00000DD4 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   212 00000DD6 750F                <1>     jne .notLookingForEmpty
   213                              <1> .emptySlot:
   214                              <1> ;Here we check if we are looking for an empty directory entry or
   215                              <1> ; we have reached the end of the file (if the first byte is 00h)
   216                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   217 00000DD8 3A25(C9C60300)      <1>     cmp ah, byte [fcbName] 
   218                              <1>     rete    ;Return if equal (CF=NC too)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000DDE 74D8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   219                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   220 00000DE0 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   221 00000DE3 752E                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   222 00000DE5 F9                  <1>     stc
   223                              <1>     return
    13                              <2> %%_ret:
    14 00000DE6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   224                              <1> .notLookingForEmpty:
   225 00000DE7 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   226 00000DEA 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   227 00000DED 803D(5DC40300)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   228 00000DF4 7434                <1>     je .exclusiveDir
   229 00000DF6 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume only?
   230 00000DF8 7437                <1>     je .volFile ;If so, go here
   231 00000DFA 80FC08              <1>     cmp ah, 08h ;Is this file a volume lbl that we are not looking for?
   232 00000DFD 7414                <1>     je .nextEntry
   233 00000DFF 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   234 00000E01 7710                <1>     ja .nextEntry
   235                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   236                              <1> .scanName:
   237 00000E03 56                  <1>     push rsi
   238 00000E04 488D3D(C9C60300)    <1>     lea rdi, fcbName ;Goto name template to search for
   239 00000E0B E83E000000          <1>     call .nameCompare
   240 00000E10 5E                  <1>     pop rsi
   241 00000E11 7424                <1>     je .searchEntryFound
   242                              <1> .nextEntry:
   243                              <1> ;Go to next entry
   244 00000E13 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   245 00000E1A FF05(7AC70300)      <1>     inc dword [dirEntry] ;And denote that in variable
   246 00000E20 FFC9                <1>     dec ecx
   247 00000E22 75A5                <1>     jnz .searchMainLp
   248                              <1> .badExit:
   249 00000E24 31C0                <1>     xor eax, eax
   250 00000E26 FFC0                <1>     inc eax ;Clear ZF
   251 00000E28 F9                  <1>     stc
   252                              <1>     return
    13                              <2> %%_ret:
    14 00000E29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   253                              <1> .exclusiveDir:
   254                              <1> ;Used when going down a path, dir bit simply need be set
   255 00000E2A F6C410              <1>     test ah, dirDirectory
   256 00000E2D 75D4                <1>     jnz .scanName
   257 00000E2F EBE2                <1>     jmp short .nextEntry
   258                              <1> 
   259                              <1> .volFile:
   260 00000E31 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   261 00000E33 74CE                <1>     je .scanName       ;If so, scan the name agrees
   262 00000E35 EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   263                              <1> 
   264                              <1> .searchEntryFound:
   265                              <1> ;Here a good entry was found!
   266 00000E37 56                  <1>     push rsi
   267 00000E38 57                  <1>     push rdi
   268 00000E39 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   269 00000E3B 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
   270 00000E42 B904000000          <1>     mov ecx, 32/8
   271 00000E47 F348A5              <1>     rep movsq   ;Copy the directory to SDA
   272 00000E4A 5F                  <1>     pop rdi
   273 00000E4B 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   274 00000E4C F8                  <1>     clc
   275                              <1>     return
    13                              <2> %%_ret:
    14 00000E4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> 
   277                              <1> .nameCompare:
   278                              <1> ;Input: rsi = source string
   279                              <1> ;       rdi = string template to compare against
   280                              <1> ;Output: ZF=ZE => Strings are ok
   281                              <1> ;        ZF=NZ => Strings not ok
   282                              <1> ;Accepts wildcards. Trashes al
   283 00000E4E 51                  <1>     push rcx
   284 00000E4F 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   285                              <1> .ncLp:
   286 00000E51 81F90B000000        <1>     cmp ecx, 11
   287 00000E57 740B                <1>     je .ncExit
   288 00000E59 FFC1                <1>     inc ecx
   289 00000E5B A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   290 00000E5C 74F3                <1>     je .ncLp    ;If equal, keep going
   291 00000E5E 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   292 00000E62 74ED                <1>     je .ncLp
   293                              <1> .ncExit:
   294 00000E64 59                  <1>     pop rcx
   295                              <1>     return
    13                              <2> %%_ret:
    14 00000E65 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> .getNumberOfEntries:
   297 00000E66 55                  <1>     push rbp
   298 00000E67 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   299 00000E6E 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   300 00000E72 C1E905              <1>     shr ecx, 5  ;Divide by 32
   301 00000E75 5D                  <1>     pop rbp
   302                              <1>     return
    13                              <2> %%_ret:
    14 00000E76 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   303                              <1> adjustSearchAttr:
   304                              <1> ;Converts the byte to a system only if the bit is set
   305                              <1> ;Input: eax = User selected search mask
   306                              <1> ;Output: eax = Modified search mask
   307 00000E77 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   308 00000E7C A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   309                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E81 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   310 00000E83 B808000000          <1>     mov eax, dirVolumeID
   311                              <1>     return
    13                              <2> %%_ret:
    14 00000E88 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   312                              <1> 
   313                              <1> asciiToFCB:
   314                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   315                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   316                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   317                              <1> ;Name is space padded.
   318                              <1> ;Input: rsi = ASCII string buffer
   319                              <1> ;       rdi = FCB name buffer
   320                              <1> ;Output: al = Char that terminated the source string 
   321 00000E89 53                  <1>     push rbx    
   322 00000E8A 57                  <1>     push rdi
   323 00000E8B B90B000000          <1>     mov ecx, 11
   324 00000E90 B020                <1>     mov al, " "
   325 00000E92 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   326 00000E94 5F                  <1>     pop rdi
   327 00000E95 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   328                              <1> .processName:
   329 00000E98 AC                  <1>     lodsb   ;Get the char in al
   330 00000E99 E832570000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   331 00000E9E 84C0                <1>     test al, al
   332 00000EA0 742D                <1>     jz .exit
   333 00000EA2 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   334 00000EA4 740E                <1>     je .extSpace
   335 00000EA6 3C2E                <1>     cmp al, "."
   336 00000EA8 7413                <1>     je .ext
   337                              <1>     ;Test if the char is valid
   338 00000EAA E862580000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   339 00000EAF 741E                <1>     jz .exit    ;If the char invalid, consider it a terminator
   340 00000EB1 AA                  <1>     stosb   ;Store the char
   341 00000EB2 EBE4                <1>     jmp short .processName
   342                              <1> .extSpace:
   343                              <1> ;Now we scan for a period in the name
   344 00000EB4 AC                  <1>     lodsb   ;Get a char and increase rsi
   345 00000EB5 84C0                <1>     test al, al
   346 00000EB7 7416                <1>     jz .exit
   347 00000EB9 3C2E                <1>     cmp al, "."     ;If al is not a period...
   348 00000EBB 75F7                <1>     jne .extSpace   ; keep searching
   349                              <1> .ext:
   350 00000EBD 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   351                              <1> .processExt:
   352 00000EC1 AC                  <1>     lodsb
   353 00000EC2 84C0                <1>     test al, al
   354 00000EC4 7409                <1>     jz .exit
   355 00000EC6 3C20                <1>     cmp al, " "
   356 00000EC8 7405                <1>     je .exit
   357 00000ECA AA                  <1>     stosb
   358 00000ECB EBF4                <1>     jmp short .processExt
   359                              <1> .exitBadChar:
   360 00000ECD 30C0                <1>     xor al, al  ;Return a null terminator
   361                              <1> .exit:
   362 00000ECF 5B                  <1>     pop rbx
   363                              <1>     return
    13                              <2> %%_ret:
    14 00000ED0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> 
   365                              <1> FCBToAsciiz:
   366                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   367                              <1> ;Name is space padded too
   368                              <1> ;Input: rsi = FCB name buffer
   369                              <1> ;       rdi = ASCIIZ string buffer
   370 00000ED1 B908000000          <1>     mov ecx, 8
   371 00000ED6 F3A4                <1>     rep movsb   ;Move the name over
   372                              <1> .scanNameSpace:
   373 00000ED8 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   374 00000EDC 750D                <1>     jne .ext
   375 00000EDE 48FFCF              <1>     dec rdi
   376 00000EE1 FFC1                <1>     inc ecx
   377 00000EE3 81F908000000        <1>     cmp ecx, 8
   378 00000EE9 72ED                <1>     jb .scanNameSpace
   379                              <1> .ext:
   380 00000EEB 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   381 00000EF0 7506                <1>     jne .validExt
   382 00000EF2 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   383 00000EF6 7415                <1>     je .exit
   384                              <1> .validExt:
   385 00000EF8 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   386 00000EFA AA                  <1>     stosb
   387 00000EFB B903000000          <1>     mov ecx, 3
   388 00000F00 F3A4                <1>     rep movsb   ;Move the three extension chars over
   389                              <1> .scanExtSpace:
   390 00000F02 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   391 00000F06 7505                <1>     jne .exit
   392 00000F08 48FFCF              <1>     dec rdi
   393 00000F0B EBF5                <1>     jmp short .scanExtSpace
   394                              <1> .exit:
   395 00000F0D 31C0                <1>     xor eax, eax
   396 00000F0F AA                  <1>     stosb   ;Store a null at the end
   397                              <1>     return
    13                              <2> %%_ret:
    14 00000F10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> setupFFBlock:
   400                              <1> ;Sets up the find first block for the search
   401                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   402 00000F11 50                  <1>     push rax
   403 00000F12 53                  <1>     push rbx
   404 00000F13 56                  <1>     push rsi
   405 00000F14 57                  <1>     push rdi
   406 00000F15 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   407 00000F18 8A05(ECC60300)      <1>     mov al, byte [searchAttr]
   408 00000F1E 243F                <1>     and al, 3Fh ;Clear upper two bits
   409 00000F20 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   410 00000F23 0FB605(F9C60300)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   411 00000F2A 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   412                              <1>     ;xchg bx, bx
   413 00000F2C 488D35(C9C60300)    <1>     lea rsi, fcbName
   414 00000F33 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   415 00000F37 57                  <1>     push rdi
   416 00000F38 48B820202020202020- <1>     mov rax, "        "
   416 00000F41 20                  <1>
   417 00000F42 48AB                <1>     stosq
   418 00000F44 66AB                <1>     stosw
   419 00000F46 AA                  <1>     stosb
   420 00000F47 5F                  <1>     pop rdi
   421 00000F48 48A5                <1>     movsq   ;Move 8 chars
   422 00000F4A 66A5                <1>     movsw   ;Move 2 chars
   423 00000F4C A4                  <1>     movsb   ;Move the final char
   424                              <1> 
   425 00000F4D 8B05(7AC70300)      <1>     mov eax, dword [dirEntry]
   426 00000F53 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   427 00000F56 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]
   428 00000F5C 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   429 00000F5F 8A05(59C60300)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   430 00000F65 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   431 00000F68 8B05(64C60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   432 00000F6E 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   433 00000F71 8B05(6AC60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   434 00000F77 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   435 00000F7A 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   436 00000F7E 488D35(4EC60300)    <1>     lea rsi, curDirCopy
   437 00000F85 E847FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   438                              <1> 
   439 00000F8A 5F                  <1>     pop rdi
   440 00000F8B 5E                  <1>     pop rsi
   441 00000F8C 5B                  <1>     pop rbx
   442 00000F8D 58                  <1>     pop rax
   443                              <1>     return
    13                              <2> %%_ret:
    14 00000F8E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> getDrvLetterFromPath:   ;Int 4Fh, AX=121Ah
   446                              <1> ;Gets the drive letter for the path in al
   447                              <1> ;Input: rsi = Buffer to process
   448                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   449                              <1> ;       ZF=ZE and al = 0 => Null path
   450                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   451                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   452                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   453 00000F8F 30C0                <1>     xor al, al
   454 00000F91 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   455                              <1>     retz    ;Return if a null path
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000F94 74F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   456 00000F96 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   457                              <1>     retne   ;If not equal, Relative path or network path
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000F9A 75F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   458 00000F9C 66AD                <1>     lodsw   ;Get first word, rsi += 2
   459                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   460 00000F9E 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   461 00000FA0 2C60                <1>     sub al, 60h
   462                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FA2 75EA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   463 00000FA4 B0FF                <1>     mov al, -1  ;Else not a valid drive number
   464                              <1>     return
    13                              <2> %%_ret:
    14 00000FA6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   465                              <1> canonicaliseFileName:
   466                              <1> ;Always trying to build and qualify a full pathname
   467                              <1> ;Does getPath without hitting the disk
   468 00000FA7 B0FF                <1>     mov al, -1
   469 00000FA9 8805(5DC40300)      <1>     mov byte [fileDirFlag], al  
   470 00000FAF 8805(F1C60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   471 00000FB5 48893D(12C60300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   472 00000FBC FEC0                <1>     inc al  ;make al = 0
   473 00000FBE 8805(22C60300)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   474 00000FC4 E854000000          <1>     call getPath.epAlt
   475                              <1>     retc    ;Return if an error
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FC9 72DB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   476 00000FCB 48FFCF              <1>     dec rdi ;Point to what should be the null char
   477 00000FCE 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Was the prev char a drive sep?
   478 00000FD2 7503                <1>     jne .storeNull
   479 00000FD4 B05C                <1>     mov al, "\"
   480 00000FD6 AA                  <1>     stosb   ;Store the pathsep and increment rdi
   481                              <1> .storeNull:
   482 00000FD7 803F00              <1>     cmp byte [rdi], 0   ;Ensure path is null terminated (and clear CF)
   483                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FDA 74CA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   484 00000FDC C60700              <1>     mov byte [rdi], 0   ;Store a terminating zero if necessary
   485                              <1>     return
    13                              <2> %%_ret:
    14 00000FDF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   486                              <1> getDirPathNoCanon:
   487 00000FE0 31C0                <1>     xor eax, eax
   488 00000FE2 4889FE              <1>     mov rsi, rdi
   489 00000FE5 EB1B                <1>     jmp short getPath.noCanon
   490                              <1> getFilePathNoCanon:
   491                              <1> ;Used when the path is constructed internally (as for FCB functions)
   492                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   493 00000FE7 B0FF                <1>     mov al, -1
   494 00000FE9 4889FE              <1>     mov rsi, rdi
   495 00000FEC EB14                <1>     jmp short getPath.noCanon
   496                              <1> getDirPath:
   497 00000FEE 30C0                <1>     xor al, al   ;Set to Directory
   498 00000FF0 EB02                <1>     jmp short getPath
   499                              <1> getFilePath:
   500 00000FF2 B0FF                <1>     mov al, -1  ;Set to File
   501                              <1> getPath:
   502                              <1> ;Determines whether the path is spliced or not and transfers the chars
   503                              <1> ; from the user buffer into an internal buffer, normalising them.
   504                              <1> ; Single and double dot entries are left as is, but the wildcard * is converted
   505                              <1> ; to ?. Wildcards can only be present in the LAST portion of the given path.
   506                              <1> ; If the portion with wildcards does not end with an ASCII null, we fail the 
   507                              <1> ; request with pnf. If there is a redirector which needs to normalise the path, 
   508                              <1> ; we let it do its thing and return.
   509                              <1> ;If the user requests data from a remote server (i.e. a pathspec starting with
   510                              <1> ; \\) then wildcards, the colon and dots are forbidden.
   511                              <1> ;If a remote user requests data (dosInvoke = -1), then the pathspec must be an
   512                              <1> ; absolute path (no wildcards or dots) and must begin with a drive letter 
   513                              <1> ; (converted from using machine name by the net client program).
   514                              <1> ;We check if we are a net invoke to ensure that the pathspec that was recieved
   515                              <1> ; was good.
   516                              <1> ;Called with:
   517                              <1> ; rdi = SDA Buffer for filename
   518                              <1> ; rsi = Potentially unqualified filename
   519                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   520 00000FF4 50                  <1>     push rax
   521 00000FF5 57                  <1>     push rdi
   522 00000FF6 E8ACFFFFFF          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   523 00000FFB 5F                  <1>     pop rdi
   524 00000FFC 58                  <1>     pop rax
   525 00000FFD 4889FE              <1>     mov rsi, rdi    ;Use the newly built path as the source
   526                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001000 72DD                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   527                              <1> .noCanon:
   528 00001002 8805(5DC40300)      <1>     mov byte [fileDirFlag], al  
   529 00001008 B0FF                <1>     mov al, -1
   530 0000100A 8805(F1C60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   531 00001010 48893D(12C60300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   532 00001017 8805(22C60300)      <1>     mov byte [skipDisk], al  ;Store -1 to NOT skip checking the file on disk
   533                              <1> .epAlt:
   534 0000101D C605(F5C60300)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   535 00001024 C605(F4C60300)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   536 0000102B F605(F2C60300)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   537 00001032 7428                <1>     jz .notServer
   538                              <1>     ;In this case, the client network program will have correctly
   539                              <1>     ; substituted the drive letter for the path before making the request.
   540                              <1>     ;Thus we can immediately assume the existance of a drive letter in the path 
   541 00001034 E856FFFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in X:    call getCDS ;Get the cds for the drive letter on the path
   543                              <1>     ;REMEMBER, FOR ALL THE LOGIC TO WORK, HERE WE MUST ENSURE THE PATH
   544                              <1>     ; CONTAINS NO . or .., NO INVALID CHARS OR MULTIPLE \\ AND IS 0 TERMINATED.
   545                              <1>     ;We do not scan for this criteria but the client program must adhere to 
   546                              <1>     ; these requirements.
   547                              <1>     ;When a server request is made, the request can ONLY be for a file on
   548                              <1>     ; a CDS drive.
   549 00001039 FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   550 0000103B 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   551 00001042 50                  <1>     push rax
   552 00001043 E8BD580000          <1>     call dosCrit1Enter
   553 00001048 E8A3510000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   554 0000104D E8BD580000          <1>     call dosCrit1Exit
   555 00001052 58                  <1>     pop rax
   556 00001053 0F8382000000        <1>     jnc .driveOk
   557                              <1> .serverExit:
   558 00001059 B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   559                              <1>     return
    13                              <2> %%_ret:
    14 0000105B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   560                              <1> .notServer:
   561                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   562 0000105C 48C705(02C70300)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   562 00001064 FFFFFF              <1>
   563 00001067 B823110000          <1>     mov eax, 1123h
   564 0000106C CD4F                <1>     int 4fh ;CF=CY if not resolved. CF=NC if resolved
   565                              <1>     retnc  ;Return if resolved
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000106E 73EB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   566 00001070 E81AFFFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   567 00001075 9C                  <1>     pushfq  ;Save the flag state on stack
   568 00001076 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   569 00001077 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   570 0000107A E845550000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   571 0000107F 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. \\)
   572 00001081 E83E550000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   573 00001086 7543                <1>     jnz .notNet
   574 00001088 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   575 0000108A 753F                <1>     jne .notNet
   576 0000108C 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   577 0000108D 9D                  <1>     popfq
   578 0000108E 66AD                <1>     lodsw
   579 00001090 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   580 00001094 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   581                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   582                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   583                              <1> ; redirector Find First Without CDS
   584                              <1> 
   585 00001096 8A1D(22C60300)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   586 0000109C C605(22C60300)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   587 000010A3 53                  <1>     push rbx
   588                              <1> .moveNetChars:
   589 000010A4 AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   590 000010A5 E826550000          <1>     call uppercaseChar  ;Make char in al uppercase
   591 000010AA 84C0                <1>     test al, al
   592 000010AC 740F                <1>     jz .netEnd
   593 000010AE E811550000          <1>     call swapPathSeparator  ;If path sep, swap it
   594 000010B3 AA                  <1>     stosb
   595 000010B4 75EE                <1>     jnz .moveNetChars  ;If not a path separating char in al, keep looking
   596 000010B6 E85C000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   597 000010BB EBE7                <1>     jmp short .moveNetChars
   598                              <1> .netEnd:
   599 000010BD 5B                  <1>     pop rbx
   600 000010BE AA                  <1>     stosb
   601 000010BF 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   602                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000010C1 7498                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   603 000010C3 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   604 000010C8 CD4F                <1>     int 4Fh
   605                              <1>     return
    13                              <2> %%_ret:
    14 000010CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   606                              <1> .notNet:
   607                              <1> ;This is the normal case; paths can be relative, or absolute.
   608 000010CB 58                  <1>     pop rax ;Get the drive letter back
   609 000010CC 9D                  <1>     popfq   ;Get the flag state back
   610 000010CD 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   611                              <1> .pnfErr:
   612 000010CF B003                <1>     mov al, errPnf  ;Null path error
   613 000010D1 F9                  <1>     stc
   614                              <1>     return
    13                              <2> %%_ret:
    14 000010D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   615                              <1> .notNull:
   616 000010D3 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   617 000010D5 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   618 000010D7 B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   619 000010D9 F9                  <1>     stc
   620                              <1>     return
    13                              <2> %%_ret:
    14 000010DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   621                              <1> .driveOk:
   622 000010DB 84C0                <1>     test al, al
   623 000010DD 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   624                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   625 000010DF 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   626 000010E2 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   627 000010E4 50                  <1>     push rax    ;Save the drive letter
   628 000010E5 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   629 000010E6 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   630 000010E9 E8D6540000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   631                              <1>     ;If al is a path separator, then this path is absolute.
   632 000010EE 58                  <1>     pop rax ;Get back the drive letter
   633 000010EF 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   634                              <1> .absoPath:
   635                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   636 000010F1 48FFC6              <1>     inc rsi
   637 000010F4 EB1A                <1>     jmp short .commonDir
   638                              <1> .curPath:
   639                              <1> ;This is only jumped to if we are relative the current drive
   640                              <1> ;rsi points to first char in path
   641                              <1> ;If this char is \ or /, then it is an absolute path.
   642 000010F6 8A05(26C40300)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   643 000010FC FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   644 000010FE 50                  <1>     push rax    ;Save the current drive number
   645 000010FF 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   646 00001101 E8BE540000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   647 00001106 58                  <1>     pop rax ;Get back the current drive number
   648 00001107 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   649                              <1> .relMain:
   650 00001109 C605(F1C60300)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   651                              <1> .commonDir:
   652                              <1> ;rsi points to the start of the string we will be appending
   653                              <1> ;Fall through now
   654                              <1> pathWalk:
   655                              <1> ;Input: rsi must point to source buffer for path to expand
   656                              <1> ;       rdi must point to a destination buffer
   657                              <1> ;       al must contain the drive 1 based number
   658 00001110 E8B5000000          <1>     call prepareDir    ;Prepare the dir if the drive is subst/join drive
   659 00001115 727C                <1>     jc .badDriveExit
   660                              <1>     ;If the user requests to .. to a point before rbx, we fail if a disk
   661                              <1>     ; resolution
   662                              <1> .netEp: ;For net path resolution (resolution ONLY) ptrs must point past "\\"
   663 00001117 4889FB              <1>     mov rbx, rdi
   664                              <1>     ;If rsi at the end of the string, exit for ROOT dir
   665 0000111A 803E00              <1>     cmp byte [rsi], 0
   666 0000111D 7512                <1>     jnz .mainlp
   667                              <1>     ;Setup dummy dir data
   668 0000111F 31C0                <1>     xor eax, eax
   669 00001121 668905(62C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   670 00001128 668905(68C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   671 0000112F EB68                <1>     jmp short .exitGood
   672                              <1> .mainlp:
   673 00001131 E868010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   674 00001136 84C0                <1>     test al, al
   675 00001138 7507                <1>     jnz .notFile
   676 0000113A C605(F5C60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   677                              <1> .notFile:
   678 00001141 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   679 00001142 E856030000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   680 00001147 58                  <1>     pop rax
   681 00001148 736B                <1>     jnc .deviceFound
   682 0000114A E816020000          <1>     call searchForPathspec  ;and search the directory
   683 0000114F 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   684 00001151 E865020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   685 00001156 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   686 00001158 84C0                <1>     test al, al ;Exit if this pathspec was a file
   687 0000115A 743D                <1>     jz .exitGood
   688                              <1>     ;Here I have to take the cluster data from the found directory entry
   689                              <1>     ; and setup the search for the next pathspec portion
   690                              <1>     ;Copy necessary data from the current directory copy
   691 0000115C 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   692 00001163 74CC                <1>     jz .mainlp
   693 00001165 0FB705(62C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   694 0000116C C1E010              <1>     shl eax, 10h    ;Shift it high
   695 0000116F 668B05(68C60300)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   696                              <1>     ;eax now has the cluster number of the search
   697 00001176 8905(74C70300)      <1>     mov dword [dirClustA], eax
   698 0000117C 8905(70C70300)      <1>     mov dword [dirClustPar], eax
   699 00001182 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   700 00001184 8905(7AC70300)      <1>     mov dword [dirEntry], eax
   701 0000118A 668905(78C70300)    <1>     mov word [dirSect], ax
   702 00001191 EB9E                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   703                              <1> .badDriveExit:
   704 00001193 B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   705                              <1>     return
    13                              <2> %%_ret:
    14 00001198 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   706                              <1> .exitGood:
   707 00001199 C605(F4C60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   708                              <1> .exit:
   709                              <1>     return
    13                              <2> %%_ret:
    14 000011A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   710                              <1> .checkDev:
   711                              <1> ;If the return code is errNoFil AND Int44Fail = 0, then we check to see if 
   712                              <1> ; we are in \DEV pseudo dir
   713 000011A1 F605(5EC40300)FF    <1>     test byte [Int44Fail], -1   ;Make sure we are not returning from a FAIL
   714 000011A8 751D                <1>     jnz .nodev  ;If any bits set, ignore this check
   715                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   716 000011AA 56                  <1>     push rsi
   717 000011AB 57                  <1>     push rdi
   718 000011AC E87A020000          <1>     call checkDevPath
   719 000011B1 5F                  <1>     pop rdi
   720 000011B2 5E                  <1>     pop rsi
   721 000011B3 72EB                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   722                              <1> .deviceFound:
   723 000011B5 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   724 000011B7 C605(F5C60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   725 000011BE C605(F4C60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   726 000011C5 EBD9                <1>     jmp short .exit   
   727                              <1> .nodev:
   728 000011C7 F9                  <1>     stc
   729 000011C8 EBD6                <1>     jmp short .exit
   730                              <1> 
   731                              <1> prepareDir:
   732                              <1> ;Used to transfer the current directory if it is necessary.
   733                              <1> ;Always necessary if the user specified a subst/join drive. Else only if 
   734                              <1> ; relative
   735                              <1> ;Input: al = 1-based drive letter
   736                              <1> ;Output: rdi = Pointing at where to place chars from source string
   737                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   738 000011CA 56                  <1>     push rsi
   739 000011CB E835570000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   740 000011D0 E8F9520000          <1>     call setDrive   ;Set internal variables, working CDS etc etc
   741 000011D5 720D                <1>     jc .critExit    ;If the drive number in al is too great or drive invalid
   742 000011D7 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] 
   743 000011DE 57                  <1>     push rdi    ;Push CDS pointer on stack...
   744 000011DF E80C500000          <1>     call getDiskDPB  ;Update working DPB and drv before searching, dpbptr in rbp
   745                              <1> .critExit:
   746 000011E4 E826570000          <1>     call dosCrit1Exit
   747 000011E9 5E                  <1>     pop rsi     ; ...and get CDS pointer in rsi
   748 000011EA 724A                <1>     jc .badDriveExit 
   749 000011EC 488B3D(12C60300)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   750                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   751                              <1>     ;If this CDS is a join drive, copy the first 3 chars and up to the next 
   752                              <1>     ;   terminating char (\, / or Null)
   753                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   754                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   755 000011F3 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive
   756 000011F9 753D                <1>     jnz .prepDirJoin
   757 000011FB 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   758 00001201 7556                <1>     jnz .prepDirSubst
   759                              <1> .prepMain:
   760                              <1> ;Ok so now preliminary copy complete, now we check if path spliced
   761 00001203 F605(F1C60300)FF    <1>     test byte [spliceFlag], -1
   762 0000120A 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   763                              <1>     ;Else we copy the first two chars only (X:)
   764 0000120C 66A5                <1>     movsw  
   765 0000120E B05C                <1>     mov al, "\"
   766 00001210 AA                  <1>     stosb   ;Store the path separator and increment rdi
   767 00001211 31C0                <1>     xor eax, eax    ;Get cluster 0
   768 00001213 EB1B                <1>     jmp short .prepDirExitSkip
   769                              <1> .prepLoop:
   770 00001215 AC                  <1>     lodsb
   771 00001216 84C0                <1>     test al, al ;If al was null, then we stop
   772 00001218 7403                <1>     jz .prepDirExit
   773 0000121A AA                  <1>     stosb
   774 0000121B EBF8                <1>     jmp short .prepLoop
   775                              <1> .prepDirExit:
   776 0000121D 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   777 00001221 7403                <1>     je .prepDirExitSkipPathsep
   778 00001223 B05C                <1>     mov al, "\"
   779 00001225 AA                  <1>     stosb   ;Store the path separator and increment rdi
   780                              <1> .prepDirExitSkipPathsep:
   781 00001226 488B35(02C70300)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   782 0000122D 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   783                              <1> .prepDirExitSkip:
   784 00001230 E837000000          <1>     call .prepSetupDirSearchVars
   785 00001235 F8                  <1>     clc ;Clear carry before exiting
   786                              <1> .badDriveExit:
   787 00001236 5E                  <1>     pop rsi
   788                              <1>     return
    13                              <2> %%_ret:
    14 00001237 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   789                              <1> .prepDirJoin:
   790 00001238 51                  <1>     push rcx
   791 00001239 56                  <1>     push rsi
   792 0000123A 4881C602000000      <1>     add rsi, 2  ;Goto the backslash for the dir
   793 00001241 B902000000          <1>     mov ecx, 2  ;Instantiate ecx to copy X:
   794                              <1> .prepDirJoin1:
   795 00001246 AC                  <1>     lodsb   ;Get the char
   796 00001247 84C0                <1>     test al, al ;Null char?
   797 00001249 740B                <1>     jz .prepDirJoin2
   798 0000124B E874530000          <1>     call swapPathSeparator
   799 00001250 7404                <1>     jz .prepDirJoin2
   800 00001252 FFC1                <1>     inc ecx ;Accrue length to copy
   801 00001254 EBF0                <1>     jmp short .prepDirJoin1
   802                              <1> .prepDirJoin2:
   803 00001256 5E                  <1>     pop rsi ;Return rsi to the start of the buffer
   804 00001257 EB05                <1>     jmp short .prepDirCopy1
   805                              <1> .prepDirSubst:
   806 00001259 51                  <1>     push rcx
   807 0000125A 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   808                              <1> .prepDirCopy1:
   809 0000125E F3A4                <1>     rep movsb   ;Copy the string over
   810 00001260 59                  <1>     pop rcx
   811 00001261 F605(F1C60300)FF    <1>     test byte [spliceFlag], -1
   812 00001268 75B3                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   813 0000126A EBA9                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   814                              <1> .prepSetupDirSearchVars:
   815                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   816                              <1> ;       rbp = DPB pointer for the device which will do transaction
   817 0000126C 51                  <1>     push rcx
   818 0000126D 31C9                <1>     xor ecx, ecx
   819 0000126F 66890D(78C70300)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   820 00001276 890D(7AC70300)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   821 0000127C E83BF5FFFF          <1>     call getFATtype ;Get type of fat
   822 00001281 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   823 00001287 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   824                              <1>     ;FAT 32 here
   825 00001289 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   826 0000128B 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   827 0000128D 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   828                              <1> .psdsvExit:
   829 00001290 8905(74C70300)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   830 00001296 8905(70C70300)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   831 0000129C 59                  <1>     pop rcx
   832                              <1>     return 
    13                              <2> %%_ret:
    14 0000129D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   833                              <1> 
   834                              <1> copyPathspec:
   835                              <1> ;1) Copies a path portion from the source buffer to the destination
   836                              <1> ;2) Advances rsi to the next null, \ or /
   837                              <1> ;3) Expands all * to ?'s
   838                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   839                              <1> ;    next path separator and rdi pointing to the previous pathsep
   840                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   841                              <1> ;    with rsi moving to path separator
   842                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   843                              <1> ;
   844                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   845                              <1> ;           rdi = Points to where to store it
   846                              <1> ;
   847                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   848                              <1> ;           rdi = First char of next space to store next pathspec
   849                              <1> ;           al = Last char stored (either \ or NULL)
   850                              <1> ;           CF=NC = OK path
   851                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   852                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   853 0000129E 57                  <1>     push rdi    ;Save the pointer into the user buffer
   854 0000129F C605(81C40300)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   855 000012A6 488D3D(C9C60300)    <1>     lea rdi, fcbName
   856 000012AD 57                  <1>     push rdi
   857 000012AE B903000000          <1>     mov ecx, 3
   858 000012B3 B820202020          <1>     mov eax, "    " ;Four spaces
   859 000012B8 F3AB                <1>     rep stosd   ;Store 12 spaces
   860 000012BA 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   861                              <1> 
   862 000012BB 488D1D(D4C60300)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   863 000012C2 AC                  <1>     lodsb   ;Get first char from user path in al
   864 000012C3 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   865 000012C5 745B                <1>     je .cpsDots
   866 000012C7 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   867                              <1> ;First char is not a dot, so now check if starts with E5h? 
   868                              <1> ;If so, store 05h in its place! KANJI SUPPORT WOOHOO!
   869 000012CA 3CE5                <1>     cmp al, 0E5h
   870 000012CC 7506                <1>     jne .cpsMainLoop
   871 000012CE 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   872 000012D1 B005                <1>     mov al, 05h
   873 000012D3 AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   874                              <1> .cpsMainLoop:
   875 000012D4 AC                  <1>     lodsb   ;Get the char in al and advance rsi
   876 000012D5 84C0                <1>     test al, al ;Is it the null char?
   877 000012D7 7471                <1>     jz .cpsStore  ;If so, terminate immediately
   878 000012D9 E8E6520000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   879 000012DE 746A                <1>     jz .cpsStore ; and then exit with the final converted pathsep in al
   880 000012E0 3C2E                <1>     cmp al, "." ;Filename extension separator
   881 000012E2 7420                <1>     je .cpsExtension
   882                              <1>     ;If we have space in the filename, we check to see if the next char is *
   883 000012E4 3C2A                <1>     cmp al, "*" ;Wildcard?
   884 000012E6 7430                <1>     je .cpsWildcard
   885 000012E8 3C3F                <1>     cmp al, "?" ;Good wildcard?
   886 000012EA 740C                <1>     je .store
   887 000012EC E8DF520000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   888 000012F1 E81B540000          <1>     call checkCharValid ; and check it is a valid char
   889 000012F6 7408                <1>     je .cpsInvalidChar  ;If it is not valid, replace with 0 and exit
   890                              <1> .store:
   891 000012F8 4839DF              <1>     cmp rdi, rbx
   892 000012FB 742D                <1>     je .cpsProcessName ;Skip any non-terminating chars
   893 000012FD AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   894 000012FE EBD4                <1>     jmp short .cpsMainLoop
   895                              <1> .cpsInvalidChar:
   896 00001300 30C0                <1>     xor al, al
   897 00001302 EB26                <1>     jmp short .cpsProcessName
   898                              <1> .cpsExtension:
   899                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   900 00001304 B903000000          <1>     mov ecx, 3 
   901 00001309 488D3D(D1C60300)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   902 00001310 57                  <1>     push rdi
   903 00001311 B020                <1>     mov al, " "
   904 00001313 F3AA                <1>     rep stosb
   905 00001315 5F                  <1>     pop rdi
   906 00001316 EBBC                <1>     jmp short .cpsMainLoop
   907                              <1> .cpsWildcard:
   908 00001318 B03F                <1>     mov al, "?"
   909                              <1> .cpsWildcardLp:
   910 0000131A AA                  <1>     stosb
   911 0000131B 4839DF              <1>     cmp rdi, rbx
   912 0000131E 75FA                <1>     jne .cpsWildcardLp
   913 00001320 EBB2                <1>     jmp short .cpsMainLoop
   914                              <1> 
   915                              <1> .cpsDots:
   916 00001322 AA                  <1>     stosb   ;Store the first dot
   917 00001323 8A06                <1>     mov al, byte [rsi]
   918 00001325 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   919 00001327 752B                <1>     jne .oneDotResolve
   920 00001329 A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   921                              <1> 
   922                              <1> .cpsProcessName:
   923                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
   924 0000132A 84C0                <1>     test al, al 
   925 0000132C 741C                <1>     jz .cpsStore
   926 0000132E E891520000          <1>     call swapPathSeparator
   927 00001333 7415                <1>     jz .cpsStore
   928                              <1> .cpsFindTerminator:
   929 00001335 AC                  <1>     lodsb
   930 00001336 84C0                <1>     test al, al 
   931 00001338 7410                <1>     jz .cpsStore
   932 0000133A E885520000          <1>     call swapPathSeparator
   933 0000133F 7409                <1>     jz .cpsStore
   934 00001341 E8CB530000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
   935 00001346 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
   936                              <1>     ;If we encounter a terminator, convert to 0
   937 00001348 30C0                <1>     xor al, al
   938                              <1> .cpsStore:
   939 0000134A 488D3D(D4C60300)    <1>     lea rdi, fcbName+11
   940 00001351 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   941 00001352 5F                  <1>     pop rdi
   942                              <1>     return
    13                              <2> %%_ret:
    14 00001353 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   943                              <1> .oneDotResolve:
   944 00001354 488D3D(D4C60300)    <1>     lea rdi, fcbName+11
   945 0000135B AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   946 0000135C 5F                  <1>     pop rdi ;rdi points to fresh space
   947 0000135D 48FFCF              <1>     dec rdi ;Point to the previous path separator
   948 00001360 AA                  <1>     stosb   ;Store this separator as if it is what we had before
   949                              <1>     return
    13                              <2> %%_ret:
    14 00001361 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   950                              <1> .cpsBadChar:
   951 00001362 30C0                <1>     xor al, al  ;Convert the char to a terminator
   952                              <1>     return
    13                              <2> %%_ret:
    14 00001364 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   953                              <1> 
   954                              <1> searchForPathspec:
   955                              <1>     ;Now search the current directory for this filename
   956                              <1>     ;Find first using SDA ffBlock
   957                              <1>     ;If al = 0, we have final file name or directory name
   958                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
   959                              <1>     ;Output: CF=CY => Error occured
   960                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
   961                              <1>     ;                 FF block somewhat setup
   962                              <1>     ;Preserves rax, rbx, rsi,  rdi
   963 00001365 50                  <1>     push rax
   964 00001366 53                  <1>     push rbx
   965 00001367 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
   966 00001368 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
   967 00001369 0FB61D(5DC40300)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
   968 00001370 53                  <1>     push rbx    ;and push it onto the stack
   969                              <1> ;Evaluate whether we are searching for a file for a directory
   970 00001371 84C0                <1>     test al, al
   971 00001373 741D                <1>     jz .sfpPNfile
   972                              <1>     ;Fall if subdir
   973 00001375 488D3D(C9C60300)    <1>     lea rdi, fcbName
   974 0000137C B03F                <1>     mov al, "?" ;Search for wildcard
   975 0000137E B90B000000          <1>     mov ecx, 11
   976 00001383 F2AE                <1>     repne scasb
   977 00001385 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
   978 00001387 B010                <1>     mov al, dirDirectory    ;We want a directory only search.
   979 00001389 C605(5DC40300)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
   980 00001390 EB07                <1>     jmp short .sfpPNMain
   981                              <1> .sfpPNfile:
   982                              <1>     ;Here if we are searching for a file or directory as setup by search init
   983 00001392 0FB605(ECC60300)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
   984                              <1> .sfpPNMain:
   985 00001399 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
   986 000013A0 7405                <1>     je .sfpPNNoDisk
   987 000013A2 E81EF9FFFF          <1>     call searchDir
   988                              <1> .sfpPNNoDisk:
   989 000013A7 5B                  <1>     pop rbx
   990 000013A8 881D(5DC40300)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
   991 000013AE 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
   992 000013AF 5E                  <1>     pop rsi
   993 000013B0 5B                  <1>     pop rbx
   994 000013B1 58                  <1>     pop rax
   995                              <1>     return
    13                              <2> %%_ret:
    14 000013B2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   996                              <1> .sfpPnf:
   997 000013B3 B803000000          <1>     mov eax, errPnf
   998                              <1> .sfpErrExit:
   999 000013B8 F9                  <1>     stc ;Set carry
  1000 000013B9 EBEC                <1>     jmp short .sfpPNNoDisk
  1001                              <1> 
  1002                              <1> addPathspecToBuffer:
  1003                              <1> ;Input: fcbName = Qualified pathname portion
  1004                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
  1005                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
  1006                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
  1007                              <1> ;rbx points to the "head of the path"
  1008 000013BB F605(22C60300)FF    <1>     test byte [skipDisk], -1
  1009                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000013C2 75EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1010 000013C4 803D(C9C60300)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
  1011 000013CB 741F                <1>     je .aptbPNDots
  1012                              <1>     ;Copy filename over to internal buffer
  1013 000013CD 56                  <1>     push rsi    ;Save source pointer position
  1014 000013CE 488D35(C9C60300)    <1>     lea rsi, fcbName
  1015 000013D5 E8F7FAFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1016 000013DA 48FFCF              <1>     dec rdi ;Go back to the copied Null char
  1017 000013DD 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1018                              <1> .aptbOkExit:
  1019 000013DE 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the prev pathspec term char in al
  1020 000013E1 E8DE510000          <1>     call swapPathSeparator
  1021 000013E6 7402                <1>     jz .aptbPNexit
  1022 000013E8 30C0                <1>     xor al, al  ;Set al to 0 else (all other chars are terminators)
  1023                              <1> .aptbPNexit:
  1024 000013EA AA                  <1>     stosb   ;Store this final char (either \ or NULL) and return
  1025                              <1>     return
    13                              <2> %%_ret:
    14 000013EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1026                              <1> .aptbPNDots:
  1027                              <1> ;For one dot, we leave rdi where it is
  1028                              <1> ;For two dots, we search backwards for the previous "\"
  1029 000013EC 803D(CAC60300)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1030 000013F3 F8                  <1>     clc ;Ensure we clear CF if we return via here
  1031 000013F4 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the previous char in al if we return
  1032                              <1>     retne   ;Return with rdi untouched and rsi advanced.
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000013F7 75F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1033                              <1>     ;Here we have two dots
  1034                              <1>     ;Walk rdi backwards until a \ is found
  1035 000013F9 48FFCF              <1>     dec rdi  ;rdi points to current char. Preceeding it is a \. Skip that
  1036 000013FC 66817FFF3A5C        <1>     cmp word [rdi - 1], ":\" ;IF the char preceeding \ is :, then error out
  1037 00001402 7420                <1>     je .aptbPnf
  1038 00001404 66817FFF5C5C        <1>     cmp word [rdi - 1], "\\" ;Similar net name check
  1039 0000140A 7418                <1>     je .aptbPnf
  1040                              <1> .aptbPNDotsLp:
  1041 0000140C 48FFCF              <1>     dec rdi
  1042 0000140F 803F5C              <1>     cmp byte [rdi], "\"
  1043 00001412 75F8                <1>     jne .aptbPNDotsLp  ;Keep looping around until it is a "\"
  1044                              <1>     ;Don't go past the pathsep, since we may need to replace it with a null
  1045 00001414 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;Are we in name resolution mode?
  1046 0000141B 74C1                <1>     je .aptbOkExit    ;If clear, we are, so just return
  1047 0000141D 4839DF              <1>     cmp rdi, rbx    ;Are we before the start of the path? (i.e in subst?)
  1048 00001420 7202                <1>     jb .aptbPnf
  1049 00001422 EBBA                <1>     jmp short .aptbOkExit
  1050                              <1> ;.aptbSearchError:
  1051                              <1> ;    mov eax, errFnf
  1052                              <1> ;    jmp short .aptbErrExit
  1053                              <1> .aptbPnf:
  1054 00001424 B803000000          <1>     mov eax, errPnf
  1055                              <1> .aptbErrExit:
  1056 00001429 F9                  <1>     stc ;Set carry
  1057                              <1>     return
    13                              <2> %%_ret:
    14 0000142A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1058                              <1> 
  1059                              <1> checkDevPath:
  1060                              <1> ;Called only if the file/directory was not found on disk.
  1061                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1062                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1063                              <1> ; and check to see if it is a char device. If it is, build a directory
  1064                              <1> ; If it is not, proceed with the request fail.
  1065                              <1> ;
  1066                              <1> ;Input: rsi = Pointer to the next path spec
  1067                              <1> ;Output: CF=NC => Char device found, directory built
  1068                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1069 0000142B 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1070                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001432 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1071 00001434 803D(D4C60300)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1072 0000143B 7459                <1>     je .notOk                      
  1073                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1074 0000143D 50                  <1>     push rax
  1075 0000143E 48B844455620202020- <1>     mov rax, "DEV     "
  1075 00001447 20                  <1>
  1076 00001448 483905(C9C60300)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1077 0000144F 58                  <1>     pop rax
  1078 00001450 7544                <1>     jne .notOk
  1079 00001452 813D(D1C60300)2020- <1>     cmp dword [fcbName + 8], "   \"
  1079 0000145A 205C                <1>
  1080 0000145C 7538                <1>     jne .notOk
  1081                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1082                              <1>     ; looking for a device driver
  1083                              <1>     ;First append it to rdi 
  1084 0000145E B84445565C          <1>     mov eax, "DEV\" 
  1085 00001463 AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1086 00001464 57                  <1>     push rdi
  1087 00001465 488D3D(C9C60300)    <1>     lea rdi, fcbName
  1088 0000146C E818FAFFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1089                              <1>     ;Returns in al the terminating char of the source string
  1090 00001471 5F                  <1>     pop rdi
  1091                              <1>     ;If al is a pathsep, fail
  1092 00001472 E84D510000          <1>     call swapPathSeparator
  1093 00001477 741D                <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1094 00001479 30C0                <1>     xor al, al
  1095 0000147B 8805(D4C60300)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1096 00001481 53                  <1>     push rbx
  1097 00001482 E844000000          <1>     call checkIfCharDevice
  1098 00001487 5B                  <1>     pop rbx ;Don't need bh yet
  1099 00001488 720C                <1>     jc .notOk
  1100 0000148A E873000000          <1>     call buildCharDir
  1101                              <1>     ;Here the device was determined to be a char device.
  1102                              <1>     ;A dummy directory entry was built for it.
  1103                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1104                              <1>     ; Do not Find Next!
  1105                              <1> .copyName:
  1106 0000148F E83DFAFFFF          <1>     call FCBToAsciiz    ;Copy the ASCII form of the name over 
  1107 00001494 F8                  <1>     clc
  1108                              <1>     return
    13                              <2> %%_ret:
    14 00001495 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1109                              <1> .notOk:
  1110 00001496 B802000000          <1>     mov eax, errFnf
  1111 0000149B F9                  <1>     stc
  1112                              <1>     return
    13                              <2> %%_ret:
    14 0000149C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1113                              <1> .charDevSearch:
  1114 0000149D 53                  <1>     push rbx
  1115 0000149E E828000000          <1>     call checkIfCharDevice
  1116 000014A3 5B                  <1>     pop rbx ;Dont need bh yet
  1117 000014A4 72F0                <1>     jc .notOk
  1118 000014A6 E857000000          <1>     call buildCharDir
  1119 000014AB 803D(D4C60300)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1120 000014B2 750C                <1>     jne .cds2
  1121 000014B4 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1122 000014B8 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1123 000014BA 48FFCF              <1>     dec rdi
  1124 000014BD B02F                <1>     mov al, "/" ;Replace \ with "/"
  1125 000014BF AA                  <1>     stosb   ;Store that and let the dir write the filename
  1126                              <1> .cds2:
  1127 000014C0 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1128 000014C7 75C6                <1>     jne .copyName    ;Now jump if in disk search
  1129 000014C9 F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1130                              <1>     return
    13                              <2> %%_ret:
    14 000014CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1131                              <1> 
  1132                              <1> checkIfCharDevice:  ;Int 4Fh AX=1223h
  1133                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1134                              <1> ; device driver chain. 
  1135                              <1> ;Output: CF=CY if not found
  1136                              <1> ;        CF=NC if found
  1137                              <1> ;           BH = Low byte of the device attribute word
  1138 000014CB 50                  <1>     push rax
  1139 000014CC 57                  <1>     push rdi
  1140 000014CD 488B05(C9C60300)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1141 000014D4 488D3D(80C00300)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1142                              <1> .checkName:
  1143 000014DB 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1144 000014DF 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1145 000014E1 F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1146 000014E4 740C                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1147 000014E6 80CF20              <1>     or bh, 20h  ;RBIL says Bit 5 set and Bits 6-7 clear if Char dev
  1148 000014E9 80E73F              <1>     and bh, ~(80h|40h) ;Clear the upper two bits
  1149 000014EC 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1150 000014F0 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1151                              <1> .walkList:
  1152 000014F2 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1153 000014F5 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1154 000014FC 75DD                <1>     jne .checkName  ;If no, rdi points to char device
  1155 000014FE F9                  <1>     stc
  1156                              <1> .exit:
  1157 000014FF 5F                  <1>     pop rdi
  1158 00001500 58                  <1>     pop rax
  1159                              <1>     return
    13                              <2> %%_ret:
    14 00001501 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1160                              <1> 
  1161                              <1> buildCharDir:
  1162                              <1> ;Build a dummy directory entry for the char device in FCBName
  1163                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1164 00001502 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1165                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001509 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1166 0000150B 50                  <1>     push rax
  1167 0000150C 57                  <1>     push rdi
  1168 0000150D C605(D4C60300)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1169 00001514 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
  1170                              <1>     ;Zero the directory copy (32 bytes)
  1171 0000151B 50                  <1>     push rax
  1172 0000151C 51                  <1>     push rcx
  1173 0000151D 57                  <1>     push rdi
  1174 0000151E 31C0                <1>     xor eax, eax    ;Zero rax
  1175 00001520 B904000000          <1>     mov ecx, 4
  1176 00001525 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1177 00001528 5F                  <1>     pop rdi
  1178 00001529 59                  <1>     pop rcx
  1179 0000152A 58                  <1>     pop rax
  1180 0000152B 488B05(C9C60300)    <1>     mov rax, qword [fcbName]
  1181 00001532 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1182 00001535 B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1183 0000153A 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1184 0000153D C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1185                              <1>     ;Get date and time and set the write time in the directory entry
  1186 00001541 E8C9110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1187 00001546 E8AF120000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1188 0000154B 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1189 0000154E 31C0                <1>     xor eax, eax
  1190 00001550 5F                  <1>     pop rdi
  1191 00001551 58                  <1>     pop rax
  1192                              <1>     return
    13                              <2> %%_ret:
    14 00001552 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1193                              <1> 
  1194                              <1> checkFailingComp:
  1195                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1196                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1197                              <1> ;Returns: ZF=ZE => Last path componant
  1198                              <1> ;         ZF=NZ => Not last path componant
  1199 00001553 50                  <1>     push rax
  1200 00001554 8A05(D4C60300)      <1>     mov al, byte [fcbName + 11]
  1201 0000155A 84C0                <1>     test al, al
  1202 0000155C 58                  <1>     pop rax
  1203                              <1>     return
    13                              <2> %%_ret:
    14 0000155D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    28                                  %include "./Source/Kernel/FAT/dirfun.asm"
     1                              <1> ;---------------------------------------------------:
     2                              <1> ;                   KERNEL FUNCTIONS                :
     3                              <1> ;---------------------------------------------------:
     4                              <1> makeDIR:           ;ah = 39h
     5                              <1> ;For make, the path must exist but the final componant must not exist.
     6                              <1> ;Input: rdx = Pointer to ASCIIZ string
     7 0000155E 4889D7              <1>     mov rdi, rdx
     8 00001561 E89C500000          <1>     call strlen
     9 00001566 81F940000000        <1>     cmp ecx, 64
    10 0000156C 7607                <1>     jbe .okLength
    11                              <1> .badPath:
    12 0000156E B003                <1>     mov al, errPnf
    13 00001570 E9DB530000          <1>     jmp extErrExit
    14                              <1> .okLength:
    15 00001575 4889D6              <1>     mov rsi, rdx
    16 00001578 E8EF500000          <1>     call checkPathspecOK
    17 0000157D 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
    18                              <1> .pathOk:
    19 0000157F E87A510000          <1>     call scanPathWC
    20 00001584 72E8                <1>     jc .badPath ;Dont allow wildcards
    21                              <1>     ;Path is ok, now proceed
    22 00001586 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
    23 0000158D E860FAFFFF          <1>     call getFilePath ;Get a Directory path in buffer1, hitting the disk
    24                              <1>     ;If the path exists, exit error
    25 00001592 0F83B8530000        <1>     jnc extErrExit
    26                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    27 00001598 E8B6FFFFFF          <1>     call checkFailingComp
    28 0000159D 0F85AD530000        <1>     jnz extErrExit
    29                              <1>     ;So all is well, the new subdirectories name is in fcbName
    30                              <1>     ;The parent dir's directory entry is in the curDirCopy
    31 000015A3 E8954E0000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    32                              <1>     ;returns in rdi the working cds ptr
    33 000015A8 7312                <1>     jnc .notNet
    34 000015AA B803110000          <1>     mov eax, 1103h
    35 000015AF CD4F                <1>     int 4fh
    36 000015B1 0F8299530000        <1>     jc extErrExit
    37 000015B7 E986530000          <1>     jmp extGoodExit
    38                              <1> .notNet:
    39 000015BC E844530000          <1>     call dosCrit1Enter
    40                              <1>     ;Current dpb ptr is already set
    41                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    42                              <1>     ;First we make a dummy dir in curDirCopy
    43 000015C1 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
    44 000015C8 488D35(C9C60300)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    45 000015CF 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
    46 000015D6 48A5                <1>     movsq   ;Copy the name over
    47 000015D8 A5                  <1>     movsd
    48 000015D9 E831110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    49 000015DE E817120000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    50 000015E3 8905(5CC60300)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    51 000015E9 8905(64C60300)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    52 000015EF 31C0                <1>     xor eax, eax
    53 000015F1 8905(6AC60300)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    54 000015F7 C605(59C60300)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    55 000015FE 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]
    56                              <1> .searchForDirSpace:
    57 00001604 8905(74C70300)      <1>     mov dword [dirClustA], eax
    58 0000160A 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    59 0000160C 668905(78C70300)    <1>     mov word [dirSect], ax
    60 00001613 8905(7AC70300)      <1>     mov dword [dirEntry], eax
    61 00001619 E8CE040000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    62 0000161E 7328                <1>     jnc .dirEntryFnd
    63 00001620 813D(70C70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    63 00001628 0000                <1>
    64 0000162A 0F844A010000        <1>     je .bad ;Set CF and exit
    65 00001630 E801060000          <1>     call growDirectory  ;Increase directory size by 1 cluster, writes to buffer
    66 00001635 0F823F010000        <1>     jc .bad
    67 0000163B 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    68 00001640 0F8434010000        <1>     je .bad
    69                              <1>     ;Else eax = Newly allocated cluster
    70 00001646 EBBC                <1>     jmp short .searchForDirSpace
    71                              <1> .dirEntryFnd:
    72                              <1> ;rdi points to current directory copy
    73                              <1> ;rsi now points to offset in the buffer to write the entry to
    74                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
    75 00001648 488B1D(2EC70300)    <1>     mov rbx, qword [currBuff]
    76 0000164F 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
    77                              <1>      
    78 00001653 488905(36C70300)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
    79 0000165A 4881C330000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
    80 00001661 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
    81 00001664 668935(3EC70300)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
    82                              <1> ;Must now request a cluster and sanitise it
    83 0000166B E831F2FFFF          <1>     call startNewChain  ;Get cluster number in eax
    84 00001670 0F8209010000        <1>     jc .badExit
    85 00001676 E8EE050000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax, writes to buf
    86 0000167B 0F82FE000000        <1>     jc .badExit
    87                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
    88 00001681 668905(68C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
    89 00001688 C1E810              <1>     shr eax, 10h    ;Get high word low
    90 0000168B 668905(62C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
    91 00001692 488B05(36C70300)    <1>     mov rax, qword [tempSect]   ;Get the sector back
    92 00001699 E86EF0FFFF          <1>     call getBufForDirNoFile
    93 0000169E 0F82DB000000        <1>     jc .badExit
    94 000016A4 0FB705(3EC70300)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
    95 000016AB 488D35(4EC60300)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
    96 000016B2 488D7C0330          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
    97 000016B7 B904000000          <1>     mov ecx, 4
    98 000016BC F348A5              <1>     rep movsq   ;Copy over the buffered directory
    99 000016BF E8BDEEFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   100                              <1>     ;Now need to read in data sector and make two entries . and ..
   101 000016C4 57                  <1>     push rdi
   102 000016C5 51                  <1>     push rcx
   103 000016C6 B90B000000          <1>     mov ecx, 11
   104 000016CB 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
   105 000016D2 B020                <1>     mov al, " "
   106 000016D4 F3AA                <1>     rep stosb
   107 000016D6 59                  <1>     pop rcx
   108 000016D7 5F                  <1>     pop rdi
   109 000016D8 48B82E000000000000- <1>     mov rax, "."
   109 000016E1 00                  <1>
   110 000016E2 8805(4EC60300)      <1>     mov byte [curDirCopy], al
   111 000016E8 0FB705(68C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   112 000016EF 0FB715(62C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   113 000016F6 C605(59C60300)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
   114 000016FD C1E210              <1>     shl edx, 10h
   115 00001700 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   116 00001702 E820F1FFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   117 00001707 E800F0FFFF          <1>     call getBufForDirNoFile
   118 0000170C 7271                <1>     jc .badExit
   119                              <1>     ;rbx has buffer pointer now
   120 0000170E 488D35(4EC60300)    <1>     lea rsi, curDirCopy
   121 00001715 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   122 00001719 B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   123 0000171E F348A5              <1>     rep movsq
   124                              <1>     ;Now create .. entry
   125 00001721 C605(4FC60300)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   126 00001728 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   127 0000172E E889F0FFFF          <1>     call getFATtype
   128 00001733 81F902000000        <1>     cmp ecx, 2
   129 00001739 7207                <1>     jb .notFAT32
   130 0000173B 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   131 0000173E 7502                <1>     jne .notFAT32
   132 00001740 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   133                              <1> .notFAT32:
   134 00001742 668905(68C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   135 00001749 C1E810              <1>     shr eax, 10h
   136 0000174C 668905(62C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   137 00001753 488D35(4EC60300)    <1>     lea rsi, curDirCopy
   138 0000175A B904000000          <1>     mov ecx, 4
   139 0000175F F348A5              <1>     rep movsq
   140 00001762 E81AEEFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   141 00001767 E8E3EDFFFF          <1>     call writeThroughBuffers    ;Write the buffers to disk
   142 0000176C 7211                <1>     jc .badExit
   143                              <1> .okExit:
   144                              <1>     ;AND WE ARE DONE!
   145 0000176E E89C510000          <1>     call dosCrit1Exit
   146 00001773 31C0                <1>     xor eax, eax
   147 00001775 E9C8510000          <1>     jmp extGoodExit
   148                              <1> .bad:
   149 0000177A B805000000          <1>     mov eax, errAccDen
   150                              <1> .badExit:
   151 0000177F E8A9EDFFFF          <1>     call cancelWriteThroughBuffers
   152 00001784 E886510000          <1>     call dosCrit1Exit
   153 00001789 E9C2510000          <1>     jmp extErrExit
   154                              <1> 
   155                              <1> removeDIR:         ;ah = 3Ah
   156 0000178E 4889D7              <1>     mov rdi, rdx
   157 00001791 E86C4E0000          <1>     call strlen
   158 00001796 81F940000000        <1>     cmp ecx, 64
   159 0000179C 7607                <1>     jbe .okLength
   160                              <1> .badPath:
   161 0000179E B003                <1>     mov al, errPnf
   162 000017A0 E9AB510000          <1>     jmp extErrExit
   163                              <1> .okLength:
   164 000017A5 4889D6              <1>     mov rsi, rdx
   165 000017A8 E8BF4E0000          <1>     call checkPathspecOK
   166 000017AD 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   167                              <1> .pathOk:
   168 000017AF E84A4F0000          <1>     call scanPathWC
   169 000017B4 72E8                <1>     jc .badPath ;Dont allow wildcards
   170                              <1>     ;Path is ok, now proceed
   171 000017B6 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   172 000017BD E82CF8FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   173 000017C2 72DA                <1>     jc .badPath    ;Path Doesn't exist
   174 000017C4 E8744C0000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   175 000017C9 7312                <1>     jnc .notNet
   176 000017CB B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   177 000017D0 CD4F                <1>     int 4fh
   178 000017D2 0F8278510000        <1>     jc extErrExit
   179 000017D8 E965510000          <1>     jmp extGoodExit
   180                              <1> .notNet:
   181 000017DD E823510000          <1>     call dosCrit1Enter
   182 000017E2 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   183                              <1>     ;Now let use check that our directory is not the CDS currentdir
   184 000017E9 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
   185 000017F0 488D3D(12C50300)    <1>     lea rdi, buffer1
   186 000017F7 E8064E0000          <1>     call strlen ;Get the length of the full qualified name in ecx
   187 000017FC 66890D(3EC70300)    <1>     mov word [pathLen], cx
   188 00001803 E8114E0000          <1>     call strcmp ;Then compare rdi to CDS string
   189 00001808 750F                <1>     jnz .notEqual
   190 0000180A B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   191 0000180F E8FB500000          <1>     call dosCrit1Exit
   192 00001814 E937510000          <1>     jmp extErrExit
   193                              <1> .notEqual:
   194 00001819 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   195                              <1>     ;If the given path length is one more than the backslash offset
   196                              <1>     ; due to the terminating null, then the user is trying to delete the 
   197                              <1>     ; root dir. Fail this.
   198 0000181C 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   199 00001820 FFC1                <1>     inc ecx
   200 00001822 663B0D(3EC70300)    <1>     cmp cx, word [pathLen]
   201 00001829 0F8423010000        <1>     je .accessDenied
   202 0000182F E8CB020000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   203                              <1>     ;for the entry in the sector we are hoping to delete
   204 00001834 0FB705(62C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   205 0000183B C1E010              <1>     shl eax, 10h
   206 0000183E 0FB71D(68C60300)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   207 00001845 09D8                <1>     or eax, ebx
   208 00001847 8905(70C70300)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   209 0000184D E8D5EFFFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   210 00001852 E8B5EEFFFF          <1>     call getBufForDirNoFile
   211 00001857 0F82FA000000        <1>     jc .exitBad
   212                              <1>     ;rbx points to buffer
   213 0000185D 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   214 00001861 48B82E202020202020- <1>     mov rax, ".       "
   214 0000186A 20                  <1>
   215 0000186B 483906              <1>     cmp qword [rsi], rax
   216 0000186E 0F85DE000000        <1>     jne .accessDenied
   217 00001874 B42E                <1>     mov ah, "." ;Screw the partial stall
   218 00001876 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   219 0000187A 0F85D2000000        <1>     jne .accessDenied
   220 00001880 4881C620000000      <1>     add rsi, fatDirEntry_size
   221 00001887 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
   222 0000188E B904000000          <1>     mov ecx, 4
   223 00001893 F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   224                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   225                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   226 00001896 488D3D(C9C60300)    <1>     lea rdi, fcbName
   227 0000189D B03F                <1>     mov al, "?"
   228 0000189F B90B000000          <1>     mov ecx, 11
   229 000018A4 F3AA                <1>     rep stosb   ;Store the pattern to search for
   230 000018A6 30C0                <1>     xor al, al  ;Store a terminating zero
   231 000018A8 AA                  <1>     stosb
   232 000018A9 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   233 000018AF 50                  <1>     push rax    ;Save on stack temporarily
   234 000018B0 8905(74C70300)      <1>     mov dword [dirClustA], eax
   235 000018B6 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   236 000018B8 668905(78C70300)    <1>     mov word [dirSect], ax
   237 000018BF C705(7AC70300)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   237 000018C7 0000                <1>
   238 000018C9 C605(ECC60300)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   239 000018D0 58                  <1>     pop rax
   240 000018D1 E851EFFFFF          <1>     call getStartSectorOfCluster
   241 000018D6 E853EEFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   242 000018DB 727A                <1>     jc .exitBad
   243 000018DD E8C3F4FFFF          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   244 000018E2 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   245 000018E9 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   246 000018EF C605(5DC40300)FF    <1>     mov byte [fileDirFlag], -1  ;Make sure we are searching for everythin
   247 000018F6 E807F4FFFF          <1>     call searchDir.rmdirEP
   248 000018FB 7355                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   249                              <1>     ;Else, this is a empty dir, we can remove it
   250                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   251 000018FD 488B05(36C70300)    <1>     mov rax, qword [tempSect]
   252 00001904 E825EEFFFF          <1>     call getBufForDOS
   253 00001909 724C                <1>     jc .exitBad
   254 0000190B E895F4FFFF          <1>     call adjustDosDirBuffer
   255 00001910 0FB705(3EC70300)    <1>     movzx eax, word [entry]
   256 00001917 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   257 0000191B 4801C6              <1>     add rsi, rax    
   258 0000191E 8A05(F8C60300)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   259 00001924 8806                <1>     mov byte [rsi], al  ;Store delchar there
   260 00001926 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   261 0000192A 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   262 0000192E E84EECFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   263 00001933 C1E210              <1>     shl edx, 10h
   264 00001936 09D0                <1>     or eax, edx
   265                              <1>     ;Now remove the FAT chain
   266 00001938 E8A3F0FFFF          <1>     call unlinkFAT
   267 0000193D 7218                <1>     jc .exitBad
   268 0000193F E80BECFFFF          <1>     call writeThroughBuffers
   269 00001944 7211                <1>     jc .exitBad
   270 00001946 E8C44F0000          <1>     call dosCrit1Exit
   271 0000194B 31C0                <1>     xor eax, eax
   272 0000194D E9F04F0000          <1>     jmp extGoodExit
   273                              <1> .accessDenied:
   274 00001952 B805000000          <1>     mov eax, errAccDen
   275                              <1> .exitBad:
   276 00001957 E8D1EBFFFF          <1>     call cancelWriteThroughBuffers
   277 0000195C F9                  <1>     stc
   278 0000195D E8AD4F0000          <1>     call dosCrit1Exit
   279 00001962 E9E94F0000          <1>     jmp extErrExit
   280                              <1> 
   281                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   282                              <1> ;Input: rdx = Pointer to ASCIIZ string
   283 00001967 4889D7              <1>     mov rdi, rdx
   284 0000196A E8934C0000          <1>     call strlen
   285 0000196F 81F940000000        <1>     cmp ecx, 64
   286 00001975 7607                <1>     jbe .okLength
   287                              <1> .badPath:
   288 00001977 B003                <1>     mov al, errPnf
   289 00001979 E9D24F0000          <1>     jmp extErrExit
   290                              <1> .okLength:
   291 0000197E 4889D6              <1>     mov rsi, rdx
   292 00001981 E8E64C0000          <1>     call checkPathspecOK
   293 00001986 72EF                <1>     jc .badPath  ;Don't allow any malformed chars or wildcards
   294 00001988 E8C54D0000          <1>     call checkPathNet
   295 0000198D 74E8                <1>     jz .badPath ;Or Net paths
   296                              <1>     ;Path is ok, now proceed
   297 0000198F 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   298 00001996 E853F6FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   299 0000199B 0F82AF4F0000        <1>     jc extErrExit   ;Exit with error code in eax
   300                              <1>     ;The path must've been ok, so now copy the path into the CDS
   301                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   302 000019A1 488B35(02C70300)    <1>     mov rsi, qword [workingCDS] ;Copy the CDS to the tmpCDS
   303 000019A8 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   304 000019AE 756D                <1>     jnz .net    ;This is done by the redirector for redirector drives
   305 000019B0 488D3D(6EC60300)    <1>     lea rdi, tmpCDS
   306 000019B7 B95B000000          <1>     mov ecx, cds_size
   307 000019BC F3A4                <1>     rep movsb
   308                              <1>     ;If the path is longer than 67, call it an invalid path
   309 000019BE 488D3D(12C50300)    <1>     lea rdi, buffer1
   310 000019C5 E8384C0000          <1>     call strlen ;Get the length of this path
   311 000019CA 81F943000000        <1>     cmp ecx, 67
   312 000019D0 77A5                <1>     ja .badPath
   313 000019D2 4889FE              <1>     mov rsi, rdi    ;Move buffer source to rsi
   314 000019D5 488D3D(6EC60300)    <1>     lea rdi, tmpCDS
   315 000019DC F3A4                <1>     rep movsb   ;Copy the path over
   316                              <1>     ;Now get the start cluster from the directory copy
   317 000019DE 0FB715(68C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   318 000019E5 0FB705(62C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   319 000019EC C1E010              <1>     shl eax, 10h
   320 000019EF 09D0                <1>     or eax, edx ;Add low bits to eax
   321 000019F1 8905(BBC60300)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   322 000019F7 488D35(6EC60300)    <1>     lea rsi, tmpCDS
   323 000019FE 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   324 00001A05 B95B000000          <1>     mov ecx, cds_size
   325 00001A0A E8F64E0000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   326 00001A0F F3A4                <1>     rep movsb
   327 00001A11 E8F94E0000          <1>     call dosCrit1Exit
   328 00001A16 31C0                <1>     xor eax, eax
   329 00001A18 E9254F0000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   330                              <1> .net:
   331                              <1> ;SDA Vars are setup for this request
   332 00001A1D B805110000          <1>     mov eax, 1105h
   333 00001A22 CD4F                <1>     int 4fh
   334 00001A24 0F82264F0000        <1>     jc extErrExit
   335 00001A2A E9134F0000          <1>     jmp extGoodExit
   336                              <1> getCurrentDIR:     ;ah = 47h
   337                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   338                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   339 00001A2F E8D14E0000          <1>     call dosCrit1Enter
   340 00001A34 88D0                <1>     mov al, dl  ;Move drive number into al
   341 00001A36 E8934A0000          <1>     call setDrive ;Set drive variables if it is valid and NOT join
   342 00001A3B 730F                <1>     jnc .okDrive
   343                              <1> .badExit:
   344 00001A3D E8CD4E0000          <1>     call dosCrit1Exit
   345 00001A42 B80F000000          <1>     mov eax, errBadDrv
   346 00001A47 E9044F0000          <1>     jmp extErrExit
   347                              <1> .okDrive:
   348                              <1>     ;Now we update the DPB, to be accurate for swapped disks
   349 00001A4C 56                  <1>     push rsi
   350 00001A4D 57                  <1>     push rdi
   351 00001A4E 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] ;Get CDS ptr in rdi
   352 00001A55 E896470000          <1>     call getDiskDPB
   353 00001A5A 5F                  <1>     pop rdi
   354 00001A5B 5E                  <1>     pop rsi
   355 00001A5C 0F82EE4E0000        <1>     jc extErrExit
   356                              <1>     ;Here, work needs to be done to ensure that the path built is proper
   357 00001A62 4889F7              <1>     mov rdi, rsi    ;Save destination buffer in rdi
   358 00001A65 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]  ;Get pointer to current CDS in rsi
   359 00001A6C 31C0                <1>     xor eax, eax
   360 00001A6E FFC8                <1>     dec eax
   361 00001A70 39464D              <1>     cmp dword [rsi + cds.dStartCluster], eax    ;StartCluster != -1 is all ok
   362 00001A73 7516                <1>     jne .writePathInBuffer
   363 00001A75 FFC0                <1>     inc eax
   364 00001A77 89464D              <1>     mov dword [rsi + cds.dStartCluster], eax    ;Set to root dir
   365 00001A7A 66817E430000        <1>     cmp word [rsi + cds.wFlags], 0  ;Is this a newly deactivated drive?
   366 00001A80 74BB                <1>     je .badExit ;TEMP, ERROR IF SO (WAS A SUBST DRIVE)
   367                              <1>     ;Here we now add a terminating null at wBackslashOffset
   368 00001A82 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   369 00001A86 C644060100          <1>     mov byte [rsi + rax + 1], 0 ;Store a zero just past the backslash
   370                              <1> .writePathInBuffer:
   371 00001A8B 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   372 00001A8F FFC0                <1>     inc eax ;Go past the backslash
   373 00001A91 4801C6              <1>     add rsi, rax ;Add this many chars to rsi to point to first char to copy
   374 00001A94 E8784B0000          <1>     call strcpy
   375 00001A99 E8714E0000          <1>     call dosCrit1Exit
   376 00001A9E B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   377 00001AA3 E99A4E0000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   378                              <1> 
   379                              <1> trueNameMultiplex:  ;Int 4Fh, AX=1221h
   380 00001AA8 50                  <1>     push rax
   381 00001AA9 B800600000          <1>     mov eax, 6000h
   382 00001AAE CD41                <1>     int 41h
   383 00001AB0 58                  <1>     pop rax
   384                              <1>     return
    13                              <2> %%_ret:
    14 00001AB1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1>     
   386                              <1> trueName:          ;ah = 60h, get fully qualified name. 
   387                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   388 00001AB2 E8B54B0000          <1>     call checkPathspecOK    ;This preserves rsi
   389 00001AB7 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   390 00001AB9 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   391                              <1> .badPath:
   392 00001ABB B803000000          <1>     mov eax, errPnf
   393 00001AC0 E98B4E0000          <1>     jmp extErrExit
   394                              <1> .pathspecOk:
   395 00001AC5 57                  <1>     push rdi    ;Save the destination
   396 00001AC6 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   397 00001ACD E8D5F4FFFF          <1>     call canonicaliseFileName
   398 00001AD2 5F                  <1>     pop rdi
   399 00001AD3 0F82774E0000        <1>     jc extErrExit
   400 00001AD9 488D35(12C50300)    <1>     lea rsi, buffer1
   401 00001AE0 E82C4B0000          <1>     call strcpy
   402 00001AE5 31C0                <1>     xor eax, eax
   403 00001AE7 E9564E0000          <1>     jmp extGoodExit
   404                              <1> 
   405                              <1> ;-----------------------------------
   406                              <1> ;    General Directory Routines    :
   407                              <1> ;-----------------------------------
   408                              <1> 
   409                              <1> findFreeDiskDirEntry:
   410                              <1> ;Find a space in the directory we are searching for a directory entry
   411                              <1> ;Accept first entry starting with a 0E5h or 00h
   412                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   413                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   414                              <1> ; be called for CDS's that are NOT net CDS's).
   415                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   416                              <1> ;       Directory vars must be set up for the directory we are searching in
   417                              <1> ;Output: CF=CY => Error, eax has error code
   418                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   419                              <1>     ;breakpoint
   420 00001AEC 8A05(F8C60300)      <1>     mov al, byte [delChar]
   421 00001AF2 8805(C9C60300)      <1>     mov byte [fcbName], al
   422 00001AF8 E8C8F1FFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   423                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001AFD 72B2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   424                              <1> ;Free entry found, dir variables are set for the free entry. 
   425                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   426                              <1> getDiskDirectoryEntry:
   427                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   428                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   429                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   430                              <1> ;        qword [tempSect] = Disk sector number of directory
   431                              <1> ;        word [entry] = 32 byte offset into sector
   432                              <1> ;        CF=CY => Error, exit 
   433 00001AFF 53                  <1>     push rbx
   434 00001B00 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  
   435                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   436                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   437 00001B06 0FB71D(78C70300)    <1>     movzx ebx, word [dirSect]
   438 00001B0D 85C0                <1>     test eax, eax
   439 00001B0F 7407                <1>     jz .skipCluster
   440 00001B11 E811EDFFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   441 00001B16 EB1B                <1>     jmp short .skipOldFat
   442                              <1> .skipCluster:
   443 00001B18 55                  <1>     push rbp
   444 00001B19 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   445 00001B20 0FB705(78C70300)    <1>     movzx eax, word [dirSect]
   446 00001B27 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   447                              <1>     ;If dirSect is greater than wNumberRootDirEntries, then ret fail
   448 00001B2A 663B4509            <1>     cmp ax, word [rbp + dpb.wNumberRootDirEntries]
   449 00001B2E 5D                  <1>     pop rbp
   450 00001B2F 7202                <1>     jb .skipOldFat
   451 00001B31 F9                  <1>     stc
   452                              <1>     return
    13                              <2> %%_ret:
    14 00001B32 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   453                              <1> .skipOldFat:
   454 00001B33 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   455 00001B36 488905(36C70300)    <1>     mov qword [tempSect], rax   ;Save this sector number
   456 00001B3D E8ECEBFFFF          <1>     call getBufForDOS   ;Get buffer for DOS in rbx
   457 00001B42 5B                  <1>     pop rbx
   458                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001B43 72ED                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   459 00001B45 53                  <1>     push rbx
   460 00001B46 488B1D(2EC70300)    <1>     mov rbx, qword [currBuff]
   461 00001B4D E853F2FFFF          <1>     call adjustDosDirBuffer ;Change buffer to Dir buffer
   462                              <1>     ;Above function gets data buffer ptr in rsi
   463 00001B52 0FB705(78C70300)    <1>     movzx eax, word [dirSect]   ;Get the sector in which the offset lies
   464 00001B59 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   465 00001B5D F7E3                <1>     mul ebx ;Multiply these two words so eax has number of bytes to
   466                              <1>     ; the current sector
   467 00001B5F C1E805              <1>     shr eax, 5  ;Divide by 32 to get the number of dir entries we are skipping
   468 00001B62 8B1D(7AC70300)      <1>     mov ebx, dword [dirEntry]   ;Get offset into dir file cluster
   469 00001B68 29C3                <1>     sub ebx, eax    ;Now ebx has the dir entry offset in the current sector
   470 00001B6A C1E305              <1>     shl ebx, 5  ;Multiply by 32 to get byte offset
   471 00001B6D 66891D(3EC70300)    <1>     mov word [entry], bx  ;Save 32 byte offset into sector
   472 00001B74 4801DE              <1>     add rsi, rbx    ;rsi now points to the entry
   473 00001B77 5B                  <1>     pop rbx
   474                              <1>     return
    13                              <2> %%_ret:
    14 00001B78 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   475                              <1> 
   476                              <1> 
   477                              <1> updateDirectoryEntryForFile:    
   478                              <1> ;Updates the directory entry for disk files
   479                              <1> ;Called with:
   480                              <1> ;   [workingDPB] = DPB pointer for the disk device
   481                              <1> ;   [currentSFT] = Current SFT pointer
   482 00001B79 50                  <1>     push rax
   483 00001B7A 53                  <1>     push rbx
   484 00001B7B 57                  <1>     push rdi
   485 00001B7C 55                  <1>     push rbp
   486                              <1> 
   487 00001B7D E8834D0000          <1>     call dosCrit1Enter
   488 00001B82 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
   489 00001B89 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   490 00001B90 66F74705C000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush | devCharDev
   491 00001B96 0F8581000000        <1>     jnz .exit   ;If it is a char dev or hasn't been written to yet, skip this
   492 00001B9C 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
   493 00001BA2 751B                <1>     jnz .skipDT
   494                              <1>     ;Get date and time words and add them to the directory entry
   495 00001BA4 E8660B0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   496                              <1>     ;Build date and time words
   497 00001BA9 E84C0C0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   498                              <1>     ;Update SFT fields
   499 00001BAE 66894713            <1>     mov word [rdi + sft.wTime], ax
   500 00001BB2 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   501 00001BB5 66894715            <1>     mov word [rdi + sft.wDate], ax
   502 00001BB9 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush  ;We update DT, so flush
   503                              <1> .skipDT:
   504                              <1> ;Before we read the dir sector in, if we never wrote to the disk
   505                              <1> ; we skip all of this
   506 00001BBF 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   507 00001BC5 7556                <1>     jnz .exit ;If the file was never written to, don't bother updating DIR data
   508 00001BC7 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   509 00001BCB E86CEBFFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
   510 00001BD0 7255                <1>     jc .exitBad    ;If an error is to be returned from, we skip the rest of this
   511                              <1>     ;Now we write the changes to the sector
   512                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
   513 00001BD2 488D6B30            <1>     lea rbp, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   514 00001BD6 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   515 00001BDA C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   516 00001BDD 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
   517 00001BE0 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
   518 00001BE3 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
   519 00001BE6 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
   520 00001BEA 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
   521 00001BEE 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
   522 00001BF2 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
   523 00001BF6 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
   524 00001BFA 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
   525 00001BFD 6689451A            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusLo], ax
   526 00001C01 C1E810              <1>     shr eax, 10h
   527 00001C04 66894514            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusHi], ax
   528                              <1>     ;Directory sector updated and marked to be flushed to disk!
   529 00001C08 31C0                <1>     xor eax, eax
   530 00001C0A FF15(24C10300)      <1>     call qword [updateDirShare]
   531 00001C10 F8                  <1>     clc ;Clear CF as updateDirShare Defaults to CF=CY
   532 00001C11 E86BE9FFFF          <1>     call markBufferDirty
   533 00001C16 E834E9FFFF          <1>     call writeThroughBuffers
   534 00001C1B 720A                <1>     jc .exitBad
   535                              <1> .exit:
   536 00001C1D E8ED4C0000          <1>     call dosCrit1Exit
   537 00001C22 5D                  <1>     pop rbp
   538 00001C23 5F                  <1>     pop rdi
   539 00001C24 5B                  <1>     pop rbx
   540 00001C25 58                  <1>     pop rax
   541                              <1>     return
    13                              <2> %%_ret:
    14 00001C26 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   542                              <1> .exitBad:
   543 00001C27 E801E9FFFF          <1>     call cancelWriteThroughBuffers
   544 00001C2C 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
   545 00001C2D 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush
   546 00001C33 9D                  <1>     popfq
   547 00001C34 EBE7                <1>     jmp short .exit
   548                              <1>     
   549                              <1> growDirectory:
   550                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   551                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   552                              <1> ;                 eax = New Cluster number
   553                              <1> ;               TWO NON CF ERROR CASES.
   554                              <1> ;               If eax = -1 => disk full!
   555                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   556                              <1> ;        CF=CY => Something went wrong. Rip. 
   557 00001C36 53                  <1>     push rbx
   558 00001C37 51                  <1>     push rcx
   559 00001C38 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   560 00001C3E 85C0                <1>     test eax, eax
   561 00001C40 7424                <1>     jz .exit
   562 00001C42 E80DECFFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   563 00001C47 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   564 00001C49 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   565 00001C4E E874ECFFFF          <1>     call allocateClusters   ;ebx has last cluster value
   566 00001C53 7211                <1>     jc .exit
   567 00001C55 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   568 00001C57 E8CDEDFFFF          <1>     call readFAT
   569 00001C5C 7208                <1>     jc .exit
   570 00001C5E E806000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   571 00001C63 7201                <1>     jc .exit
   572 00001C65 F8                  <1>     clc
   573                              <1> .exit:
   574 00001C66 59                  <1>     pop rcx
   575 00001C67 5B                  <1>     pop rbx
   576                              <1>     return   
    13                              <2> %%_ret:
    14 00001C68 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   577                              <1> sanitiseCluster:
   578                              <1> ;Sanitises the cluster in eax to all zeros
   579                              <1> ;Does not move file pointers
   580                              <1> ;Currently, is only called to sanitise subdirectory clusters
   581                              <1> ;Input: eax = Cluster number
   582                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   583                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   584                              <1> ;        If CF=CY => Error, exit
   585 00001C69 50                  <1>     push rax
   586 00001C6A 53                  <1>     push rbx
   587 00001C6B 51                  <1>     push rcx
   588 00001C6C 52                  <1>     push rdx
   589 00001C6D 56                  <1>     push rsi
   590 00001C6E 55                  <1>     push rbp
   591 00001C6F 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   592 00001C76 E8ACEBFFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   593 00001C7B 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   594 00001C7F FFC2                <1>     inc edx ;Make it a count of sectors
   595                              <1> .getSectorInCluster:
   596 00001C81 E869EAFFFF          <1>     call getBufForDataNoFile  ;Get a generic data buffer in rbx
   597 00001C86 721E                <1>     jc .exitBad
   598 00001C88 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   599 00001C8C 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   600 00001C90 31C0                <1>     xor eax, eax
   601 00001C92 F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   602 00001C94 E8E8E8FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   603                              <1> 
   604 00001C99 FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   605 00001C9B 740A                <1>     jz .exit    ;Jump if we done
   606 00001C9D 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   607 00001CA1 48FFC0              <1>     inc rax ;Goto next sector in cluster
   608 00001CA4 EBDB                <1>     jmp short .getSectorInCluster
   609                              <1> .exitBad:
   610 00001CA6 F9                  <1>     stc
   611                              <1> .exit:
   612 00001CA7 5D                  <1>     pop rbp
   613 00001CA8 5E                  <1>     pop rsi
   614 00001CA9 5A                  <1>     pop rdx
   615 00001CAA 59                  <1>     pop rcx
   616 00001CAB 5B                  <1>     pop rbx
   617 00001CAC 58                  <1>     pop rax
   618                              <1>     return
    13                              <2> %%_ret:
    14 00001CAD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                                  %include "./Source/Kernel/FileIO/devio.asm"
     1                              <1> ;This file contains the primitive dev io function, which will be called 
     2                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
     3                              <1> ; make requests for device IO.
     4                              <1> 
     5                              <1> mainCharIO:
     6                              <1> ;This is the main IO clearing function for Char IO.
     7                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
     8                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
     9                              <1> ;
    10                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    11                              <1> ;       ah = {0,..., 5}, a subfunction number
    12                              <1> ;       Function 0: Read Char (drvREAD)
    13                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    14                              <1> ;       Function 2: Write Char (drvWrite)
    15                              <1> ; In the case the below functions are called for Disk/Net files
    16                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    17                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    18                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    19                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    20                              <1> ;
    21                              <1> ; If and only if ah = 02h, al = Char to write to device
    22                              <1> ;
    23                              <1> ;
    24                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    25                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    26                              <1> ;                                           ZF = NZ => Device ready (not busy)
    27                              <1> ;                                               If ND read, AL = Next Char
    28                              <1> ; For Files/Net:
    29                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    30                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    31                              <1> ;           For Read and ND Read:
    32                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    33                              <1> ;               Read returns ^Z on EOF.
    34                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    35                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    36                              <1> ;
    37                              <1> ;All registers preserved EXCEPT for ax and flags
    38                              <1> 
    39                              <1> ;Reference Request Header
    40                              <1> ;Common Section:
    41                              <1> ;    .hdrlen resb 1  ;Length of the request header
    42                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    43                              <1> ;    .cmdcde resb 1  ;Command code
    44                              <1> ;    .status resw 1  ;Status word
    45                              <1> ;    .devptr resq 1  ;Reserved. Unused
    46                              <1> ;Below used by calls 0,1,2,5
    47                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    48                              <1> ;Below used by calls 0,2
    49                              <1> ;    .bufptr resq 1
    50                              <1> ;    .tfrlen resd 1
    51                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    52                              <1> ;    .strtsc resq 1
    53                              <1> ;    .desptr resq 1
    54                              <1> 
    55                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    56 00001CAE 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    57 00001CAF 488D1D(10C50300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    58 00001CB6 48891D(99C40300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    59 00001CBD 5B                  <1>     pop rbx
    60 00001CBE C705(A1C40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    60 00001CC6 0000                <1>
    61 00001CC8 668905(10C50300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    62 00001CCF 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    63 00001CD5 0F85A1000000        <1>     jnz .notChar
    64 00001CDB 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    65 00001CE1 0F8495000000        <1>     jz .notChar
    66                              <1> ;Char devices only here
    67 00001CE7 E8024C0000          <1>     call dosPushRegs    ;Save context here
    68 00001CEC 488D1D4FE3FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    69 00001CF3 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    70 00001CF6 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    71 00001CF9 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    72 00001CFC 890D(8BC40300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    73                              <1>     ;Now set up cx for status word
    74 00001D02 31C9                <1>     xor ecx, ecx
    75 00001D04 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
    76 00001D07 7506                <1>     jne .skipBsySet
    77 00001D09 81C900020000        <1>     or ecx, drvBsyStatus
    78                              <1> .skipBsySet:
    79 00001D0F 66870D(8EC40300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
    80                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
    81 00001D16 488D1D(8BC40300)    <1>     lea rbx, secdReqHdr
    82 00001D1D E862430000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
    83 00001D22 668B3D(8EC40300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
    84 00001D29 F7C700800000        <1>     test edi, drvErrStatus
    85 00001D2F 752D                <1>     jnz .error
    86                              <1> .ignoreRet:
    87 00001D31 803D(8DC40300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
    88 00001D38 750C                <1>     jne .notNDRead
    89 00001D3A 8A05(98C40300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
    90 00001D40 8805(10C50300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
    91                              <1> .notNDRead:
    92 00001D46 8A25(8FC40300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
    93 00001D4C F6D4                <1>     not ah
    94 00001D4E 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
    95 00001D51 E8814B0000          <1>     call dosPopRegs ;Get back the context
    96 00001D56 668B05(10C50300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
    97                              <1>     return ;Return to caller
    13                              <2> %%_ret:
    14 00001D5D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    98                              <1> .error:
    99                              <1>     ;cl has flags
   100 00001D5E 88CC                <1>     mov ah, cl
   101 00001D60 E8273E0000          <1>     call charDevErr
   102 00001D65 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   103 00001D67 750A                <1>     jne .errorIgnore
   104                              <1>     ;Fallthrough => Retry
   105 00001D69 E8694B0000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   106 00001D6E E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   107                              <1> .errorIgnore:
   108                              <1>     ;Clear the busy bit in the status word
   109 00001D73 8025(8FC40300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   110 00001D7A EBB5                <1>     jmp short .ignoreRet
   111                              <1> .notChar:
   112                              <1> ;rsi -> SFT to read/write to
   113 00001D7C 84E4                <1>     test ah, ah ;If ah = 0, read 1 byte
   114 00001D7E 7409                <1>     jz .makeDiskNetReadReq
   115 00001D80 FECC                <1>     dec ah
   116 00001D82 7421                <1>     jz .makeDiskNetNonDestReq
   117 00001D84 FECC                <1>     dec ah
   118 00001D86 7429                <1>     jz .makeDiskNetWriteReq
   119                              <1>     ;Else just return with ZF=NZ
   120                              <1>     return
    13                              <2> %%_ret:
    14 00001D88 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> .makeDiskNetReadReq:
   122 00001D89 E833000000          <1>     call .prepDiskNetIO
   123 00001D8E E8541F0000          <1>     call readBytes
   124 00001D93 85C9                <1>     test ecx, ecx   ;Set flags for how many bytes we read, ZF=ZE => No read
   125 00001D95 E850000000          <1>     call .cleanDiskNetIO
   126 00001D9A 8A05(10C50300)      <1>     mov al, byte [singleIObyt]
   127                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001DA0 75E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   128 00001DA2 B01A                <1>     mov al, EOF ;Else return an EOF
   129                              <1>     return
    13                              <2> %%_ret:
    14 00001DA4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   130                              <1> .makeDiskNetNonDestReq:
   131                              <1>     ;Save the SFT file pointer position and read a char
   132 00001DA5 FF761B              <1>     push qword [rsi + sft.dCurntOff]
   133 00001DA8 E8DCFFFFFF          <1>     call .makeDiskNetReadReq
   134 00001DAD 8F461B              <1>     pop  qword [rsi + sft.dCurntOff]
   135                              <1>     return
    13                              <2> %%_ret:
    14 00001DB0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   136                              <1> .makeDiskNetWriteReq:
   137 00001DB1 E80B000000          <1>     call .prepDiskNetIO
   138 00001DB6 E864220000          <1>     call writeBytes
   139 00001DBB E82A000000          <1>     call .cleanDiskNetIO
   140                              <1>     return
    13                              <2> %%_ret:
    14 00001DC0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> .prepDiskNetIO:
   142                              <1> ;Set up the currentDTA to the internal buffer
   143                              <1> ;We use this here only so we can tweak it for this purpose
   144 00001DC1 8F05(DFC40300)      <1>     pop qword [altRet]
   145 00001DC7 E8224B0000          <1>     call dosPushRegs
   146 00001DCC FF35(0CC40300)      <1>     push qword [currentDTA]
   147 00001DD2 488D0D(10C50300)    <1>     lea rcx, singleIObyt   ;Get the buffer ptr
   148 00001DD9 48890D(0CC40300)    <1>     mov qword [currentDTA], rcx ;and use it as the current DTA
   149 00001DE0 31C9                <1>     xor ecx, ecx
   150 00001DE2 FFC1                <1>     inc ecx ;IO 1 byte only
   151                              <1> .cleanDNIOReturn:
   152 00001DE4 FF25(DFC40300)      <1>     jmp qword [altRet]
   153                              <1> .cleanDiskNetIO:
   154 00001DEA 8F05(DFC40300)      <1>     pop qword [altRet]
   155 00001DF0 8F05(0CC40300)      <1>     pop qword [currentDTA]
   156 00001DF6 E8DC4A0000          <1>     call dosPopRegs
   157 00001DFB EBE7                <1>     jmp short .cleanDNIOReturn
   158                              <1> 
   159                              <1> openSFT:
   160                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   161                              <1> ;Input: rdi = SFT pointer
   162 00001DFD E8EC4A0000          <1>     call dosPushRegs
   163 00001E02 B00D                <1>     mov al, drvOPEN
   164 00001E04 EB07                <1>     jmp short openCloseCommon
   165                              <1> closeSFT:
   166                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   167 00001E06 E8E34A0000          <1>     call dosPushRegs
   168 00001E0B B00E                <1>     mov al, drvCLOSE
   169                              <1> openCloseCommon:
   170                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   171 00001E0D 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   172 00001E13 7469                <1>     jz .exit    ;Exit if so
   173 00001E15 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   174 00001E19 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   175 00001E1D 7512                <1>     jnz .charDev
   176                              <1>     ;Here a disk drive, rdi is a DPB ptr
   177 00001E1F 803D(C9C30300)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   178 00001E26 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   179 00001E28 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   180 00001E2B 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   181 00001E2D 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   182                              <1> .charDev:
   183 00001E31 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   184 00001E37 7445                <1>     jz .exit    ;No, exit!
   185 00001E39 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   186 00001E3C 488D1D(B5C40300)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   187 00001E43 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   188                              <1> .retryEP:
   189 00001E46 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   190 00001E49 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   191 00001E4C 50                  <1>     push rax    ;Save the dword
   192 00001E4D E836420000          <1>     call goDriver
   193 00001E52 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   194 00001E59 F7C700800000        <1>     test edi, drvErrStatus
   195 00001E5F 741C                <1>     jz .exitPop
   196                              <1>     ;Error here, check if char or block drive
   197 00001E61 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   198 00001E67 7404                <1>     jz .blockError
   199                              <1>     ;Char error here
   200 00001E69 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   201 00001E6B EB04                <1>     jmp short .errorCmn
   202                              <1> .blockError:
   203 00001E6D 88C8                <1>     mov al, cl  ;Move drive number into al
   204 00001E6F B406                <1>     mov ah, critData    ;Data on block dev error
   205                              <1> .errorCmn:
   206                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   207 00001E71 E8163D0000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   208 00001E76 B001                <1>     mov al, critRetry   ;al returns user response
   209 00001E78 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   210 00001E7A 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   211 00001E7B EBC9                <1>     jmp short .retryEP  ;Reset
   212                              <1> .exitPop:
   213 00001E7D 58                  <1>     pop rax    
   214                              <1> .exit:
   215 00001E7E E8544A0000          <1>     call dosPopRegs
   216                              <1>     return
    13                              <2> %%_ret:
    14 00001E83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    30                                  %include "./Source/Kernel/FileIO/charFunc.asm"
     1                              <1> ;-----------------------------------------------------------------------:
     2                              <1> ;                  DOS default char functions live here                 :
     3                              <1> ;                                                                       :
     4                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
     5                              <1> ;                                                                       :
     6                              <1> ;Rules for the naming of the DOS functions                              :
     7                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
     8                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
     9                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    10                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    11                              <1> ;                                                                       :
    12                              <1> ;-----------------------------------------------------------------------:
    13                              <1> 
    14                              <1> charIn_BE:     ;ah = 01h
    15                              <1> ;Return char that has been read and echoed in al
    16 00001E84 E87D010000          <1>     call charIn_B
    17 00001E89 50                  <1>     push rax
    18 00001E8A E804000000          <1>     call charOut_B.in    ;Output it to screen
    19 00001E8F 58                  <1>     pop rax
    20                              <1>     return
    13                              <2> %%_ret:
    14 00001E90 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> charOut_B:       ;ah = 02h
    23                              <1> ;Bspace is regular cursor left, does not insert a blank
    24 00001E91 88D0                <1>     mov al, dl
    25                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 4Fh, AX=1205h
    26 00001E93 3C20                <1>     cmp al, asciiCaret
    27 00001E95 0F8286000000        <1>     jb .control
    28 00001E9B 3C7F                <1>     cmp al, DEL ;DEL char?
    29 00001E9D 7406                <1>     je .skipCurs
    30 00001E9F FE05(C1C20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    31                              <1> .skipCurs:
    32 00001EA5 FE05(C7C30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    33 00001EAB 8025(C7C30300)03    <1>     and byte [vConErr], 3
    34 00001EB2 56                  <1>     push rsi
    35 00001EB3 7507                <1>     jnz .skipErrorCheck
    36 00001EB5 50                  <1>     push rax
    37 00001EB6 E897020000          <1>     call vConCtrlCheck
    38 00001EBB 58                  <1>     pop rax
    39                              <1> .skipErrorCheck:
    40 00001EBC E81F020000          <1>     call outputOnStdout
    41 00001EC1 5E                  <1>     pop rsi
    42 00001EC2 F605(C4C30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    43                              <1>     retz    ;If zero, no echo
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001EC9 74C5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    44 00001ECB 53                  <1>     push rbx
    45 00001ECC 56                  <1>     push rsi
    46 00001ECD BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    47 00001ED2 E842030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    48 00001ED7 0F82CE000000        <1>     jc auxOutCmn.exit
    49                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    50 00001EDD 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    51 00001EE1 F7C300800000        <1>     test ebx, devRedirDev
    52 00001EE7 0F85BE000000        <1>     jnz auxOutCmn.exit  ;Exit if STDOUT is redir
    53 00001EED F7C380000000        <1>     test ebx, devCharDev
    54 00001EF3 0F84B2000000        <1>     jz auxOutCmn.exit
    55 00001EF9 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    56 00001EFE E816030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    57 00001F03 0F82A2000000        <1>     jc auxOutCmn.exit   ;Exit if handle closed
    58 00001F09 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    59 00001F0F 0F8491000000        <1>     jz auxOutCmn.diskFileEP
    60 00001F15 C605(C4C30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    61 00001F1C E98A000000          <1>     jmp auxOutCmn.netFileEP
    62                              <1> .control:
    63 00001F21 3C0D                <1>     cmp al, CR
    64 00001F23 7429                <1>     je .newline
    65 00001F25 3C08                <1>     cmp al, BSP
    66 00001F27 7431                <1>     je .back
    67 00001F29 3C09                <1>     cmp al, TAB
    68 00001F2B 0F8574FFFFFF        <1>     jne .skipCurs   ;Treat as normal
    69                              <1>     ;TAB key here
    70                              <1> .tab:
    71 00001F31 51                  <1>     push rcx
    72 00001F32 0FB60D(C1C20300)    <1>     movzx ecx, byte [vConCursPos]
    73 00001F39 80C9F8              <1>     or cl, ~7
    74 00001F3C F6D9                <1>     neg cl
    75 00001F3E 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
    76                              <1> .tabloop:
    77 00001F41 B020                <1>     mov al, SPC
    78 00001F43 E84BFFFFFF          <1>     call charOut_B.in   ;Output the char
    79 00001F48 FEC9                <1>     dec cl
    80 00001F4A 75F5                <1>     jnz .tabloop
    81                              <1> .stopTab:
    82 00001F4C 59                  <1>     pop rcx
    83                              <1>     return ;Exit
    13                              <2> %%_ret:
    14 00001F4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    84                              <1> .newline:
    85 00001F4E C605(C1C20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
    86 00001F55 E94BFFFFFF          <1>     jmp .skipCurs   ;And echo 
    87                              <1> .back:
    88 00001F5A FE0D(C1C20300)      <1>     dec byte [vConCursPos]
    89 00001F60 E940FFFFFF          <1>     jmp .skipCurs   ;And echo
    90                              <1> 
    91                              <1> auxIn_B:        ;ah = 03h
    92 00001F65 E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
    93 00001F6A BB03000000          <1>     mov ebx, 3
    94 00001F6F E8A5020000          <1>     call getCharDevSFT
    95                              <1>     retc    ;Return if CF set (handle 3 is closed)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001F74 72D7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    96                              <1> .auxloop:
    97 00001F76 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
    98 00001F78 E831FDFFFF          <1>     call mainCharIO
    99 00001F7D 7408                <1>     jz .signalLoop
   100 00001F7F 30E4                <1>     xor ah, ah  ;Read the char in
   101 00001F81 E828FDFFFF          <1>     call mainCharIO
   102                              <1>     return
    13                              <2> %%_ret:
    14 00001F86 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .signalLoop:
   104 00001F87 E8A3010000          <1>     call callInt48h
   105 00001F8C EBE8                <1>     jmp short .auxloop
   106                              <1> 
   107                              <1> auxOut_B:       ;ah = 04h
   108 00001F8E 53                  <1>     push rbx
   109 00001F8F BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   110 00001F94 EB06                <1>     jmp short auxOutCmn
   111                              <1> prnOut_B:       ;ah = 05h
   112 00001F96 53                  <1>     push rbx
   113 00001F97 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   114                              <1> auxOutCmn: ;Auxilliary output device common 
   115 00001F9C 88D0                <1>     mov al, dl  ;Get the char into al
   116 00001F9E 50                  <1>     push rax
   117 00001F9F E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   118 00001FA4 58                  <1>     pop rax
   119 00001FA5 56                  <1>     push rsi
   120                              <1> .diskFileEP:
   121 00001FA6 E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   122                              <1> .netFileEP:
   123                              <1> .exit:
   124 00001FAB 5E                  <1>     pop rsi
   125 00001FAC 5B                  <1>     pop rbx
   126                              <1>     return
    13                              <2> %%_ret:
    14 00001FAD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> directConIO:    ;ah = 06h
   129 00001FAE 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   130 00001FB0 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   131 00001FB2 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   132                              <1> ;Here is the read char direct function
   133 00001FB8 31DB                <1>     xor ebx, ebx    
   134 00001FBA E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   135                              <1>     retc    ;Return error if ebx closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001FBF 72EC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   136 00001FC1 488B2D(6FC40300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   137 00001FC8 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   138 00001FCA E8DFFCFFFF          <1>     call mainCharIO
   139 00001FCF E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   140 00001FD4 7507                <1>     jnz .readChar
   141 00001FD6 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   142 00001FDA 30C0                <1>     xor al, al  ;Set caller return code to 0
   143                              <1>     return
    13                              <2> %%_ret:
    14 00001FDC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   144                              <1> .readChar:
   145 00001FDD 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   146                              <1>     ;Fallthrough here to get the char at STDIN
   147                              <1> charIn:         ;ah = 07h
   148                              <1> ;Return char in al from STDIN without waiting
   149 00001FE1 31DB                <1>     xor ebx, ebx
   150 00001FE3 E831020000          <1>     call getCharDevSFT
   151                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001FE8 72F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   152 00001FEA B401                <1>     mov ah, 01  ;ND read for char
   153 00001FEC E8BDFCFFFF          <1>     call mainCharIO
   154 00001FF1 750B                <1>     jnz .getChar
   155 00001FF3 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   156 00001FF5 CD4A                <1>     int 4Ah
   157 00001FF7 E833010000          <1>     call callInt48h
   158 00001FFC EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   159                              <1> .getChar:
   160                              <1>     ;Get the char in al and exit
   161 00001FFE 30E4                <1>     xor ah, ah
   162 00002000 E8A9FCFFFF          <1>     call mainCharIO
   163                              <1>     return
    13                              <2> %%_ret:
    14 00002005 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   164                              <1> charIn_B:       ;ah = 08h
   165                              <1> ;Return char in al from STDIN
   166 00002006 56                  <1>     push rsi
   167                              <1> .readAgain:
   168 00002007 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   169                              <1>     ;Also sets rsi to point to the device SFT for 
   170 0000200C 7543                <1>     jnz .pullChar
   171 0000200E 803D(D9D90300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   172 00002015 7507                <1>     jne .skiplookahead
   173 00002017 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   174 00002019 E890FCFFFF          <1>     call mainCharIO
   175                              <1> .skiplookahead:
   176 0000201E B484                <1>     mov ah, 84h
   177 00002020 CD4A                <1>     int 4ah ;Multitasking keyboard loop
   178 00002022 66813D(BADA0300)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   178 0000202A FF                  <1>
   179 0000202B 751B                <1>     jne .skipClockRead
   180 0000202D E8BC480000          <1>     call dosPushRegs
   181 00002032 F8                  <1>     clc ;Clear CF, write primary header to backup
   182 00002033 E882000000          <1>     call swapPrimaryHeader
   183 00002038 E8D2060000          <1>     call readDateTimeRecord
   184 0000203D F9                  <1>     stc ;Set CF, write backup to primary header
   185 0000203E E877000000          <1>     call swapPrimaryHeader
   186 00002043 E88F480000          <1>     call dosPopRegs
   187                              <1> .skipClockRead:
   188 00002048 66FF05(BADA0300)    <1>     inc word [keybTicks]
   189 0000204F EBB6                <1>     jmp short .readAgain
   190                              <1> .pullChar:
   191 00002051 30E4                <1>     xor ah, ah
   192 00002053 E856FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   193 00002058 5E                  <1>     pop rsi
   194 00002059 3C00                <1>     cmp al, NUL ;Is this the null char?
   195 0000205B 7507                <1>     jne .exit
   196                              <1>     ;We are mid extended ascii, prevent printer toggling
   197 0000205D C605(B9DA0300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   198                              <1> .exit:
   199                              <1>     return
    13                              <2> %%_ret:
    14 00002064 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printString_B:      ;ah = 09h
   202 00002065 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   203                              <1> .ps0:
   204 00002068 AC                  <1>     lodsb   ;Get char in al and inc rsi
   205 00002069 3C24                <1>     cmp al, "$" ;End of string char?
   206                              <1>     rete    ;Return if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000206B 74F7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   207 0000206D E821FEFFFF          <1>     call charOut_B.in
   208 00002072 EBF4                <1>     jmp short .ps0
   209                              <1> 
   210                              <1> checkStdinStatus:  ;ah = 0Bh
   211                              <1> ;Returns the status of the driver controlling vCon
   212 00002074 E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   213 00002079 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   214                              <1>     retz    ;If BSY set (no chars available), return with al=00
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000207B 74E7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   215 0000207D FEC8                <1>     dec al  ;Set al to -1 if char available
   216                              <1>     return  ;Exit
    13                              <2> %%_ret:
    14 0000207F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> clearbuffDoFunc:   ;ah = 0Ch
   218                              <1> ;Clears any buffers and issues a console read command (the command in al)
   219                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   220 00002080 50                  <1>     push rax
   221 00002081 52                  <1>     push rdx
   222 00002082 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   223 00002084 E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   224 00002089 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   225 0000208B B404                <1>     mov ah, 04h ;Flush input buffers
   226 0000208D E81CFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   227                              <1> .skipFlush:
   228 00002092 5A                  <1>     pop rdx
   229 00002093 58                  <1>     pop rax
   230 00002094 88C4                <1>     mov ah, al  ;Move function number into ah
   231 00002096 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   232 00002098 7507                <1>     jne .others
   233 0000209A 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   234 0000209D 7412                <1>     jz .bad ;Yes, exit
   235 0000209F EB13                <1>     jmp short .callFunction ;Else, call function in ah
   236                              <1> .others:
   237 000020A1 3C01                <1>     cmp al, 01h
   238 000020A3 740F                <1>     je .callFunction
   239 000020A5 3C07                <1>     cmp al, 07h
   240 000020A7 740B                <1>     je .callFunction
   241 000020A9 3C08                <1>     cmp al, 08h
   242 000020AB 7407                <1>     je .callFunction
   243 000020AD 3C0A                <1>     cmp al, 0Ah
   244 000020AF 7403                <1>     je .callFunction
   245                              <1> .bad:
   246 000020B1 30C0                <1>     xor al, al
   247                              <1>     return
    13                              <2> %%_ret:
    14 000020B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   248                              <1> .callFunction:
   249 000020B4 FA                  <1>     cli ;Prepare to swap stack pointer
   250                              <1>     ;The below address avoids "properly" reentering DOS
   251                              <1>     ;We simply reuse the function dispatch aspect. 
   252                              <1>     ;this means we dont trash the caller's register frame 
   253 000020B5 E945470000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   254                              <1> ;------------------------
   255                              <1> ;  Primitive functions  :
   256                              <1> ;------------------------
   257                              <1> swapPrimaryHeader:
   258                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   259                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   260 000020BA 56                  <1>     push rsi
   261 000020BB 57                  <1>     push rdi
   262 000020BC 51                  <1>     push rcx
   263 000020BD 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   263 000020C6 00                  <1>
   264 000020C7 488D35(B5C40300)    <1>     lea rsi, primReqHdr
   265 000020CE 488D3D(8CDA0300)    <1>     lea rdi, bkupReqHdr
   266 000020D5 7303                <1>     jnc .read
   267 000020D7 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   268                              <1> .read:
   269 000020DA F3A4                <1>     rep movsb   ;Swap
   270 000020DC 59                  <1>     pop rcx
   271 000020DD 5F                  <1>     pop rdi
   272 000020DE 5E                  <1>     pop rsi
   273                              <1>     return
    13                              <2> %%_ret:
    14 000020DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   274                              <1> outputOnStdout:
   275                              <1> ;Input: al = Char to output
   276                              <1> ;Output: CF=CY, all good
   277 000020E0 53                  <1>     push rbx
   278 000020E1 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   279 000020E6 E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   280 000020EB 7217                <1>     jc .exit
   281 000020ED 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   282 000020F3 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   283 000020F5 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   284 000020F9 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   285 000020FF 7405                <1>     jz .notCharDevOrFast
   286 00002101 CD49                <1>     int 49h ;Fast output
   287                              <1> .exitOk:
   288 00002103 F8                  <1>     clc
   289                              <1> .exit:
   290 00002104 5B                  <1>     pop rbx
   291                              <1>     return
    13                              <2> %%_ret:
    14 00002105 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   292                              <1> .notCharDevOrFast:
   293 00002106 E809000000          <1>     call outputOnSFT
   294 0000210B 5B                  <1>     pop rbx
   295                              <1>     return
    13                              <2> %%_ret:
    14 0000210C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> 
   297                              <1> outputToHandle:
   298                              <1> ;Char to output must be in al
   299 0000210D E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   300                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002112 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   301                              <1> outputOnSFT:
   302                              <1> ;Output char in al to SFT in rsi
   303                              <1> ;Waits until device is not busy to send char.
   304                              <1> ;Calls int 48h if device busy
   305 00002114 50                  <1>     push rax
   306 00002115 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   307 00002117 E892FBFFFF          <1>     call mainCharIO
   308 0000211C 58                  <1>     pop rax
   309 0000211D 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   310 0000211F B402                <1>     mov ah, 02h ;Output char in al
   311 00002121 E888FBFFFF          <1>     call mainCharIO
   312 00002126 F8                  <1>     clc
   313                              <1>     return
    13                              <2> %%_ret:
    14 00002127 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   314                              <1> .signalLoop:
   315 00002128 E802000000          <1>     call callInt48h
   316 0000212D EBE5                <1>     jmp short outputOnSFT
   317                              <1> 
   318                              <1> callInt48h:
   319                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   320 0000212F 9C                  <1>     pushfq
   321 00002130 F605(89C40300)FF    <1>     test byte [int48Flag], -1
   322 00002137 7417                <1>     jz .exit    ;If zero, not safe
   323 00002139 F605(FCC30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   324 00002140 750E                <1>     jnz .exit
   325                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   326 00002142 FF35(89C40300)      <1>     push qword [int48Flag] 
   327 00002148 CD48                <1>     int 48h
   328 0000214A 8F05(89C40300)      <1>     pop qword [int48Flag]    ;Return original value
   329                              <1> .exit:
   330 00002150 9D                  <1>     popfq
   331                              <1>     return
    13                              <2> %%_ret:
    14 00002151 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   332                              <1> 
   333                              <1> 
   334                              <1> vConCtrlCheck:
   335                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   336                              <1> ; the processing. 
   337                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   338                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   339                              <1> ;
   340                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   341                              <1> ;^S will pause screen processing until another key is processed by vCon input
   342                              <1> ;^P will toggle the printer echo feature of the vConsole
   343                              <1> ;
   344                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   345                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   346                              <1> ;
   347                              <1> ;Output: 
   348                              <1> ;   CF=CY : Error
   349                              <1> ;   CF=NC : ...
   350                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   351                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   352 00002152 E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   353 00002157 53                  <1>     push rbx
   354 00002158 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   355 0000215A E8BA000000          <1>     call getCharDevSFT
   356 0000215F 5B                  <1>     pop rbx
   357                              <1>     retc    ;Return if CF=CY
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002160 72EF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   358 00002162 B401                <1>     mov ah, 01  ;Non destructively read CON
   359 00002164 E845FBFFFF          <1>     call mainCharIO
   360 00002169 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   361                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   362 0000216B 3C13                <1>     cmp al, DC3 ;^S ?
   363 0000216D 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   364 0000216F 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   365 00002171 E838FBFFFF          <1>     call mainCharIO
   366 00002176 E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   367                              <1> .checkPrintOrExit:
   368 0000217B 3C10                <1>     cmp al, DLE ;Do we have ^P?
   369 0000217D 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   370 0000217F 3C03                <1>     cmp al, ETX ;Do we have ^C?
   371 00002181 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   372                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   373                              <1>     return 
    13                              <2> %%_ret:
    14 00002183 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   374                              <1> .printToggle:
   375 00002184 F615(C4C30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   376 0000218A 53                  <1>     push rbx
   377 0000218B BB04000000          <1>     mov ebx, 4  ;PRN handle
   378 00002190 E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   379 00002195 5B                  <1>     pop rbx
   380                              <1>     retc    ;If CF=CY, exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002196 72EB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   381 00002198 57                  <1>     push rdi
   382 00002199 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   383 0000219C 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   384 000021A2 741D                <1>     jz .notNet
   385 000021A4 50                  <1>     push rax
   386 000021A5 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   387 000021AA CD4F                <1>     int 4Fh
   388 000021AC 58                  <1>     pop rax
   389 000021AD 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   390                              <1>     ;If something went wrong, turn off echo
   391 000021AF C605(C4C30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   392 000021B6 50                  <1>     push rax
   393 000021B7 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   394 000021BC CD4F                <1>     int 4Fh
   395 000021BE 58                  <1>     pop rax
   396 000021BF EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   397                              <1> .notNet:
   398                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   399                              <1> ; 0Dh or 0Eh
   400 000021C1 803D(C4C30300)00    <1>     cmp byte [printEcho], 00
   401 000021C8 7507                <1>     jnz .echoOn
   402 000021CA E837FCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   403 000021CF EB05                <1>     jmp short .printExit
   404                              <1> .echoOn:
   405 000021D1 E827FCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   406                              <1> .printExit:
   407 000021D6 5F                  <1>     pop rdi
   408                              <1>     return
    13                              <2> %%_ret:
    14 000021D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   410 000021D8 E852FFFFFF          <1>     call callInt48h
   411                              <1> .waitNextChar:   ;Here get next char
   412 000021DD B401                <1>     mov ah, 01h ;ND read
   413 000021DF E8CAFAFFFF          <1>     call mainCharIO
   414 000021E4 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   415                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   416 000021E6 53                  <1>     push rbx
   417 000021E7 31DB                <1>     xor ebx, ebx
   418 000021E9 E82B000000          <1>     call getCharDevSFT
   419 000021EE 5B                  <1>     pop rbx
   420                              <1>     retc    ;Return if STDIN closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000021EF 72E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   421 000021F1 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   422 000021F3 E8B6FAFFFF          <1>     call mainCharIO
   423 000021F8 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   424 000021FA 7514                <1>     jnz .checkBreak2
   425 000021FC 803D(B9DA0300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   426 00002203 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   427 00002209 C605(B9DA0300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   428                              <1> .checkBreak2:
   429 00002210 3C03                <1>     cmp al, ETX
   430                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002212 75C3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   431 00002214 E92C3A0000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   432                              <1> 
   433                              <1> 
   434                              <1> getCharDevSFT:
   435                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   436                              <1> ;Input: bx = zero extended handle number
   437                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   438                              <1> ;        CF=CY => al = Error code, abort operation
   439 00002219 F605(88C40300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   440 00002220 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   441                              <1> .getSFT:
   442 00002222 57                  <1>     push rdi
   443 00002223 E897230000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   444 00002228 4889FE              <1>     mov rsi, rdi
   445 0000222B 5F                  <1>     pop rdi
   446                              <1>     return  ;Return with CF set
    13                              <2> %%_ret:
    14 0000222C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   447                              <1> .swap:
   448                              <1> ;workingSFT is only set for CON calls
   449 0000222D 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   450 00002233 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   451 00002235 488B35(12C70300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   452 0000223C F8                  <1>     clc
   453                              <1>     return
    13                              <2> %%_ret:
    14 0000223D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   454                              <1> 
   455                              <1> ;------------------------
   456                              <1> ;   Utility functions   :
   457                              <1> ;------------------------
   458                              <1> printCaretASCII:
   459                              <1> ;Input: al = Char to print with a caret
   460                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   461                              <1> ;First check if the char should be careted, and then print normally if so
   462 0000223E 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   463 00002240 0F834DFCFFFF        <1>     jae charOut_B.in
   464 00002246 3C09                <1>     cmp al, TAB
   465 00002248 0F8445FCFFFF        <1>     je charOut_B.in
   466 0000224E 3C15                <1>     cmp al, NAK
   467 00002250 0F843DFCFFFF        <1>     je charOut_B.in
   468 00002256 3C14                <1>     cmp al, DC4
   469 00002258 0F8435FCFFFF        <1>     je charOut_B.in
   470 0000225E 50                  <1>     push rax
   471 0000225F B05E                <1>     mov al, "^" ;Get caret in place
   472 00002261 E82DFCFFFF          <1>     call charOut_B.in
   473 00002266 58                  <1>     pop rax
   474 00002267 0440                <1>     add al, "@" ;Turn into an ASCII Char
   475 00002269 E925FCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   476                              <1> printCRLF:
   477 0000226E B00D                <1>     mov al, CR
   478 00002270 E81EFCFFFF          <1>     call charOut_B.in
   479 00002275 B00A                <1>     mov al, LF
   480 00002277 E917FCFFFF          <1>     jmp charOut_B.in
   481                              <1> 
   482                              <1> checkBreak:
   483                              <1> ;Reads bytes from CON if there are any bytes to read and 
   484                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   485 0000227C 803D(FDC30300)01    <1>     cmp byte [inDOS], 1
   486                              <1>     retne    ;Return if not inDOS only once
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002283 75B8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   487                              <1> ;Returns in al the keystroke that is available IF one is available
   488                              <1> ; or al=0 if no keystroke available
   489 00002285 53                  <1>     push rbx
   490 00002286 56                  <1>     push rsi
   491 00002287 488B35(59C00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   492                              <1>     ;Place command code and a zero status word at the same time
   493 0000228E C705(E1C40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   493 00002296 0000                <1>
   494                              <1>     ;Place the packet size in the hdrlen field
   495 00002298 C605(DFC40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   496 0000229F 488D1D(DFC40300)    <1>     lea rbx, critReqHdr
   497 000022A6 E8DD3D0000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   498                              <1>     ;Check if the busy bit is set (No keystroke available)
   499 000022AB 66F705(E2C40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   499 000022B3 02                  <1>
   500 000022B4 7405                <1>     jz .charFound
   501                              <1> .exit:
   502 000022B6 30C0                <1>     xor al, al
   503 000022B8 5E                  <1>     pop rsi
   504 000022B9 5B                  <1>     pop rbx
   505                              <1>     return
    13                              <2> %%_ret:
    14 000022BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   506                              <1> .charFound:
   507                              <1> ;Keystroke available, proceed
   508 000022BB 8A05(ECC40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   509 000022C1 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   510 000022C3 75F1                <1>     jne .exit   ;If not equal exit
   511                              <1> ;Now we pull the char out of the buffer
   512 000022C5 C705(E1C40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   512 000022CD 0000                <1>
   513 000022CF C605(DFC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   514                              <1>     ;Place pointers and number of chars
   515 000022D6 C705(F5C40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   515 000022DE 0000                <1>
   516                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   517 000022E0 488D05(ECC40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   518 000022E7 488905(EDC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   519 000022EE E8953D0000          <1>     call goDriver   ;RSI and RBX as before
   520 000022F3 E94D390000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   521                              <1> 
   522                              <1> vConSwapDriver:
   523                              <1> ;Sets up the vCon to use the alternative SFT pointer
   524 000022F8 57                  <1>     push rdi
   525 000022F9 C605(88C40300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   526 00002300 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   527 00002307 48893D(12C70300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   528 0000230E 5F                  <1>     pop rdi
   529                              <1>     return
    13                              <2> %%_ret:
    14 0000230F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> vConRetDriver:
   532                              <1> ;Returns the original driver (sets flag down)
   533 00002310 C605(88C40300)00    <1>     mov byte [vConDrvSwp], 0
   534                              <1>     return
    13                              <2> %%_ret:
    14 00002317 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   535                              <1> 
   536                              <1> ;--------------------------------------------------
   537                              <1> ;      Main Keyboard Buffered Input Function      :
   538                              <1> ;--------------------------------------------------
   539                              <1> buffCharInput_BE:  ;ah = 0Ah
   540                              <1> ;Buffer pointer in rdx
   541                              <1> ; byte [rdx + 0], buffer length
   542                              <1> ; byte [rdx + 1], number of chars in buffer
   543                              <1> ; byte [rdx + 2], buffer start
   544                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   545                              <1> ;Register use
   546                              <1> ; dh = Char offset in internal buffer
   547                              <1> ; dl = Buffer length
   548                              <1> ; bh = Char offset in user buffer
   549                              <1> ; bl = Number of chars already in the buffer
   550                              <1> ; rdi = Internal buffer
   551                              <1> ; rsi = User buffer
   552 00002318 4889D6              <1>     mov rsi, rdx
   553 0000231B 66AD                <1>     lodsw   ;Get buffer metadata in ax
   554 0000231D 84C0                <1>     test al, al
   555                              <1>     retz    ;If buffer length zero, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000231F 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   556 00002321 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   557 00002324 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   558 00002326 7606                <1>     jbe .avoidcheck
   559 00002328 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   560 0000232C 7402                <1>     je .functionKeyOk
   561                              <1> .avoidcheck:
   562 0000232E 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   563                              <1> .functionKeyOk:
   564 00002330 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   565 00002333 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   566                              <1> .breakEP:
   567 00002335 8A05(C1C20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   568 0000233B 8805(C2C20300)      <1>     mov byte [vConCurCnt], al
   569 00002341 56                  <1>     push rsi    ;Push user buffer address
   570 00002342 488D3D(C3C20300)    <1>     lea rdi, vConBuffer
   571 00002349 C605(F3C60300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   572                              <1> .mainLoop:
   573 00002350 E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   574 00002355 3C0A                <1>     cmp al, LF
   575 00002357 7505                <1>     jne .checkControlChars
   576                              <1> .mainLoop2:
   577 00002359 E8A8FCFFFF          <1>     call charIn_B
   578                              <1> .checkControlChars:
   579 0000235E 3C06                <1>     cmp al, ACK
   580 00002360 74F7                <1>     je .mainLoop2   ;Get another char
   581 00002362 3A05FADCFFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   582 00002368 0F8426010000        <1>     je .escape
   583 0000236E 3C7F                <1>     cmp al, DEL
   584 00002370 0F8489000000        <1>     je .delete
   585 00002376 3C08                <1>     cmp al, BSP
   586 00002378 0F8481000000        <1>     je .delete
   587 0000237E 3C17                <1>     cmp al, ETB
   588                              <1>     ;Add space for patched jump instructions
   589 00002380 9090909090          <1>     db 5 dup (90h)  ;NOP
   590 00002385 3C15                <1>     cmp al, NAK
   591 00002387 9090909090          <1>     db 5 dup (90h)
   592 0000238C 3C0D                <1>     cmp al, CR
   593 0000238E 744C                <1>     je .carriageReturn
   594 00002390 3C0A                <1>     cmp al, LF
   595 00002392 7461                <1>     je .lineFeed
   596 00002394 3A05C9DCFFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   597 0000239A 7429                <1>     je .break
   598                              <1> .checkIfCanInsert:
   599 0000239C 38D6                <1>     cmp dh, dl
   600 0000239E 731C                <1>     jae .bufOflw
   601 000023A0 AA                  <1>     stosb   ;Store the byte and increment rdi!
   602 000023A1 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   603 000023A3 E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   604 000023A8 803D(F3C60300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   605 000023AF 75A8                <1>     jne .mainLoop2
   606                              <1>     ;IF not in insert mode, we fall here
   607                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   608                              <1>     ; or insert chars if needed.
   609 000023B1 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   610 000023B3 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   611 000023B5 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   612 000023B8 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   613 000023BA EB9D                <1>     jmp short .mainLoop2
   614                              <1> .bufOflw:
   615                              <1> ;Buffer overflow
   616 000023BC B007                <1>     mov al, BEL ;Sound the bell
   617 000023BE E8D0FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   618 000023C3 EB94                <1>     jmp short .mainLoop2
   619                              <1> .break:
   620                              <1> ;Break, Place a "\", and do a CRLF
   621 000023C5 B05C                <1>     mov al, "\"
   622 000023C7 E8C7FAFFFF          <1>     call charOut_B.in
   623 000023CC 5E                  <1>     pop rsi ;Realign stack
   624                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   625 000023CD E89CFEFFFF          <1>     call printCRLF
   626                              <1>     ;Align to next tabstop
   627 000023D2 E85AFBFFFF          <1>     call charOut_B.tab
   628 000023D7 E959FFFFFF          <1>     jmp .breakEP
   629                              <1> .carriageReturn:
   630 000023DC AA                  <1>     stosb
   631 000023DD E8B1FAFFFF          <1>     call charOut_B.in
   632 000023E2 5F                  <1>     pop rdi ;User buffer address was pushed 
   633 000023E3 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   634 000023E6 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   635                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   636 000023E8 488D35(C3C20300)    <1>     lea rsi, vConBuffer
   637 000023EF 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   638 000023F2 F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   639                              <1>     return
    13                              <2> %%_ret:
    14 000023F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   640                              <1> .lineFeed:
   641 000023F5 E874FEFFFF          <1>     call printCRLF
   642 000023FA E95AFFFFFF          <1>     jmp .mainLoop2
   643                              <1> .delete:
   644 000023FF E805000000          <1>     call .removeChar
   645 00002404 E950FFFFFF          <1>     jmp .mainLoop2
   646                              <1> .removeChar:
   647 00002409 84F6                <1>     test dh, dh ;Is char count 0?
   648 0000240B 741C                <1>     jz .normalChar   ;If so, skip going back!
   649 0000240D E868000000          <1>     call .vConErase
   650 00002412 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   651 00002414 3C20                <1>     cmp al, SPC
   652 00002416 7311                <1>     jae .normalChar
   653 00002418 3C09                <1>     cmp al, TAB
   654 0000241A 7420                <1>     je .eraTab
   655 0000241C 3C15                <1>     cmp al, NAK
   656 0000241E 7409                <1>     je .normalChar
   657 00002420 3C14                <1>     cmp al, DC4
   658 00002422 7405                <1>     je .normalChar
   659 00002424 E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   660                              <1> .normalChar:
   661 00002429 803D(F3C60300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   662                              <1>     retne ;Yes, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002430 75C2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   663 00002432 84FF                <1>     test bh, bh ;Beginning of user buffer?
   664                              <1>     retz    ;Yes, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002434 74BE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   665 00002436 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   666 00002439 FECF                <1>     dec bh
   667                              <1>     return
    13                              <2> %%_ret:
    14 0000243B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   668                              <1> .eraTab:
   669                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   670                              <1> ; up to a tab stop worth of space chars printed
   671 0000243C 57                  <1>     push rdi
   672 0000243D 48FFCF              <1>     dec rdi
   673 00002440 FD                  <1>     std ;Go backwards
   674 00002441 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   675 00002444 B020                <1>     mov al, SPC
   676 00002446 53                  <1>     push rbx
   677 00002447 BB07000000          <1>     mov ebx, 7
   678 0000244C 67E30D              <1>     jecxz .onTabstop
   679                              <1> .scanString:
   680 0000244F AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   681 00002450 7608                <1>     jbe .notChar    ;No, skip handling
   682 00002452 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   683 00002456 740A                <1>     je .tabChar
   684 00002458 FECB                <1>     dec bl
   685                              <1> .notChar:
   686 0000245A E2F3                <1>     loop .scanString
   687                              <1> .onTabstop:
   688 0000245C 2A1D(C2C20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   689                              <1> .tabChar:
   690 00002462 28F3                <1>     sub bl, dh  ;Same on tabstop
   691 00002464 00D9                <1>     add cl, bl
   692 00002466 80E107              <1>     and cl, 7
   693 00002469 5B                  <1>     pop rbx
   694 0000246A 5F                  <1>     pop rdi
   695 0000246B FC                  <1>     cld
   696 0000246C 74BB                <1>     jz .normalChar
   697                              <1>     ;Now erase all the spaces placed on the vCon
   698                              <1> .vConDelTab:
   699 0000246E E80C000000          <1>     call .vConEraseNoDec
   700 00002473 E2F9                <1>     loop .vConDelTab
   701 00002475 E9AFFFFFFF          <1>     jmp .normalChar
   702                              <1> .vConErase:
   703                              <1> ;Erase the char on the vCon
   704                              <1> ;Return through the output function
   705 0000247A 48FFCF              <1>     dec rdi ;Go back a space in the 
   706 0000247D FECE                <1>     dec dh  ;Decrement char count in the buffer
   707                              <1> .vConEraseNoDec:
   708 0000247F B008                <1>     mov al, BSP ;Move cursor back
   709 00002481 E80DFAFFFF          <1>     call charOut_B.in
   710 00002486 B020                <1>     mov al, SPC ;Replace with a space
   711 00002488 E806FAFFFF          <1>     call charOut_B.in
   712 0000248D B008                <1>     mov al, BSP ;Move cursor back again
   713 0000248F E9FFF9FFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   714                              <1> .escape:
   715                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   716                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   717                              <1> ; including the function keys.
   718 00002494 FF25C0DBFFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   719                              <1> .f2:
   720 0000249A E846000000          <1>     call .fCommon2
   721 0000249F EB0C                <1>     jmp short .fCommon
   722                              <1> .f3:
   723 000024A1 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   724 000024A4 28F9                <1>     sub cl, bh  ;Sub our current position
   725 000024A6 EB05                <1>     jmp short .fCommon
   726                              <1> .f1:
   727 000024A8 B901000000          <1>     mov ecx, 1  ;Get one char
   728                              <1> .fCommon:
   729 000024AD C605(F3C60300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   730 000024B4 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   731 000024B6 0F849DFEFFFF        <1>     je .mainLoop2
   732 000024BC 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   733 000024BE 0F8495FEFFFF        <1>     je .mainLoop2
   734                              <1>     ;Else, copy byte by byte, and retain char in al
   735 000024C4 AC                  <1>     lodsb
   736 000024C5 AA                  <1>     stosb
   737 000024C6 E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   738 000024CB FEC7                <1>     inc bh
   739 000024CD FEC6                <1>     inc dh
   740 000024CF E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   741 000024D1 E983FEFFFF          <1>     jmp .mainLoop2
   742                              <1> .f4:
   743 000024D6 E80A000000          <1>     call .fCommon2
   744 000024DB 4801CE              <1>     add rsi, rcx
   745 000024DE 00CF                <1>     add bh, cl
   746 000024E0 E974FEFFFF          <1>     jmp .mainLoop2
   747                              <1> .fCommon2:
   748 000024E5 E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   749 000024EA 3A0572DBFFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   750 000024F0 750B                <1>     jne .fnotEscape
   751                              <1>     ;Get another char if they typed escape and force it in the buffer
   752                              <1>     ; Do not return to caller
   753 000024F2 E80FFBFFFF          <1>     call charIn_B
   754                              <1> .fforceExit:
   755 000024F7 59                  <1>     pop rcx ;Get original return address from stack
   756 000024F8 E95CFEFFFF          <1>     jmp .mainLoop2
   757                              <1> .fnotEscape:
   758 000024FD 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   759 00002500 28F9                <1>     sub cl, bh
   760 00002502 74F3                <1>     jz .fforceExit
   761 00002504 FFC9                <1>     dec ecx
   762 00002506 74EF                <1>     jz .fforceExit
   763 00002508 57                  <1>     push rdi
   764 00002509 4889F7              <1>     mov rdi, rsi
   765 0000250C 48FFC7              <1>     inc rdi
   766 0000250F F2AE                <1>     repne scasb ;Search for the char to start printing from
   767 00002511 5F                  <1>     pop rdi
   768 00002512 75E3                <1>     jne .fforceExit ;If char not found, return
   769 00002514 F6D1                <1>     not cl
   770 00002516 00D9                <1>     add cl, bl
   771 00002518 28F9                <1>     sub cl, bh
   772                              <1>     return
    13                              <2> %%_ret:
    14 0000251A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   773                              <1> .f5:
   774 0000251B B040                <1>     mov al, "@"
   775 0000251D E871F9FFFF          <1>     call charOut_B.in   ;Print the char
   776 00002522 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   777 00002523 57                  <1>     push rdi
   778 00002524 E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   779 00002529 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   780 0000252A 88F3                <1>     mov bl, dh
   781 0000252C E99CFEFFFF          <1>     jmp .breakAlt
   782                              <1> .f6:
   783                              <1> ;If the user wants to insert a EOF, they can use F6
   784 00002531 B01A                <1>     mov al, EOF
   785 00002533 E964FEFFFF          <1>     jmp .checkIfCanInsert
   786                              <1> .f7:
   787                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   788 00002538 8A0524DBFFFF        <1>     mov al, byte [extESC]
   789 0000253E E959FEFFFF          <1>     jmp .checkIfCanInsert
   790                              <1> .toggleIns:
   791 00002543 F615(F3C60300)      <1>     not byte [vConInsert]   ;Toggle
   792                              <1>     return
    13                              <2> %%_ret:
    14 00002549 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   793                              <1> .eDel:
   794 0000254A 38DF                <1>     cmp bh, bl
   795 0000254C 0F8407FEFFFF        <1>     je .mainLoop2
   796 00002552 FEC7                <1>     inc bh
   797 00002554 48FFC6              <1>     inc rsi
   798 00002557 E9FDFDFFFF          <1>     jmp .mainLoop2
   799                              <1> 
   800                              <1> editKeys:
   801                              <1> ;Our Default Extended keys handler
   802 0000255C E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   803 00002561 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   804 00002566 57                  <1>     push rdi    ;Preserve rdi
   805 00002567 488D3DF6DAFFFF      <1>     lea rdi, extKeyTbl
   806 0000256E 57                  <1>     push rdi
   807                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   808                              <1>     ; offset of function from extKeyTbl
   809                              <1> .lp:
   810 0000256F AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   811 00002570 740D                <1>     je .charFound
   812 00002572 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   813 00002574 7414                <1>     jz .notInTable
   814 00002576 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   815 0000257D EBF0                <1>     jmp short .lp
   816                              <1> .charFound:
   817 0000257F 59                  <1>     pop rcx ;Pop back the effective address of the table
   818 00002580 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   819 00002584 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   820 00002587 5F                  <1>     pop rdi
   821 00002588 FFE1                <1>     jmp rcx
   822                              <1> .notInTable:
   823 0000258A 59                  <1>     pop rcx ;Realign stack
   824 0000258B 59                  <1>     pop rcx
   825 0000258C E9C8FDFFFF          <1>     jmp buffCharInput_BE.mainLoop2
    31                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
     1                              <1> ;Major kernel date time functions and subroutines
     2                              <1> 
     3                              <1> getDate:           ;ah = 2Ah
     4 00002591 E879010000          <1>     call readDateTimeRecord ;Update date if necessary
     5 00002596 E80F3F0000          <1>     call getUserRegs
     6 0000259B 668B15(82C40300)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
     7                              <1> ;    mov dh, byte [monthOfYear]
     8 000025A2 0FB60D(84C40300)    <1>     movzx ecx, byte [years]
     9 000025A9 8A05(87C40300)      <1>     mov al, byte [dayOfWeek]
    10 000025AF 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    11 000025B3 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    12                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 000025B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> setDate:           ;ah = 2Bh
    14                              <1> ;	CX = year (1980-2099)
    15                              <1> ;   DH = month (1-12)
    16                              <1> ;	DL = day (1-31)
    17 000025B8 E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    18                              <1>     return
    13                              <2> %%_ret:
    14 000025BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> getTime:           ;ah = 2Ch
    20 000025BE E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    21 000025C3 E8E23E0000          <1>     call getUserRegs
    22 000025C8 668B0D(0CC50300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    23 000025CF 668B15(0EC50300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    24 000025D6 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    25 000025DA 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    26                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 000025DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    27                              <1> setTime:           ;ah = 2Dh
    28                              <1> ;   CH = hour (0-23)
    29                              <1> ;	CL = minutes (0-59)
    30                              <1> ;	DH = seconds (0-59)
    31                              <1> ;	DL = hundredths (0-99)
    32 000025DF 80FD17              <1>     cmp ch, 23
    33 000025E2 7749                <1>     ja .exitBad
    34 000025E4 80F93B              <1>     cmp cl, 59
    35 000025E7 7744                <1>     ja .exitBad
    36 000025E9 80FE3B              <1>     cmp dh, 59
    37 000025EC 773F                <1>     ja .exitBad
    38 000025EE 80FA63              <1>     cmp dl, 99
    39 000025F1 773A                <1>     ja .exitBad
    40                              <1> ;Now we read date (updating internal count if necessary)
    41 000025F3 E817010000          <1>     call readDateTimeRecord
    42 000025F8 488D1D(0AC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    43 000025FF 0FB705(85C40300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    44 00002606 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    45 00002609 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    46 0000260D 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    47 00002611 B906000000          <1>     mov ecx, 6
    48 00002616 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    49 00002619 E82A3D0000          <1>     call primReqWriteSetup   ;rbx now points to request header
    50 0000261E 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    51 00002625 E85E3A0000          <1>     call goDriver
    52 0000262A 30C0                <1>     xor al, al
    53                              <1>     return
    13                              <2> %%_ret:
    14 0000262C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> .exitBad:
    55 0000262D B0FF                <1>     mov al, -1
    56                              <1>     return
    13                              <2> %%_ret:
    14 0000262F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    57                              <1> ;------------------------
    58                              <1> ;   Utility functions   :
    59                              <1> ;------------------------
    60                              <1> writeDate:
    61 00002630 6681F97800          <1>     cmp cx, 120
    62 00002635 0F83D1000000        <1>     jae .exitBad
    63 0000263B 80FE0C              <1>     cmp dh, 12
    64 0000263E 0F87C8000000        <1>     ja .exitBad
    65 00002644 80FA1F              <1>     cmp dl, 31
    66 00002647 0F87BF000000        <1>     ja .exitBad
    67 0000264D 668915(82C40300)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    68                              <1>     ;mov byte [monthOfYear], dh
    69 00002654 880D(84C40300)      <1>     mov byte [years], cl    ;Save the years count
    70 0000265A E878010000          <1>     call setDaysInFeb   ;Set days in february this year
    71 0000265F 88CD                <1>     mov ch, cl ;Get years count in ch
    72 00002661 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
    73 00002664 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
    74 00002667 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
    75 0000266A BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
    76 0000266F F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
    77                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
    78 00002671 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
    79 00002674 67E316              <1>     jecxz .addDay    ;Skip adding years
    80 00002677 056E010000          <1>     add eax, 366    ;First add for a leap year
    81                              <1> .addYears:
    82 0000267C FFC9                <1>     dec ecx
    83 0000267E 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
    84 00002681 056D010000          <1>     add eax, 365    ;Add the days in the normal years
    85 00002686 EBF4                <1>     jmp short .addYears
    86                              <1> .addLeap:
    87 00002688 056E010000          <1>     add eax, 366    ;Add the days in the leap year
    88                              <1> .addDay:
    89 0000268D 89C2                <1>     mov edx, eax    ;Save this number in edx
    90                              <1>     ;Now to add day offset
    91 0000268F 0FB60D(83C40300)    <1>     movzx ecx, byte [monthOfYear]
    92 00002696 488D35E8D9FFFF      <1>     lea rsi, monthsTbl
    93                              <1> .addDaysInMonth:
    94 0000269D FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
    95 0000269F 67E308              <1>     jecxz .addMonthOffset
    96 000026A2 AC                  <1>     lodsb   ;Get the number of days in the month in al
    97 000026A3 0FB6C0              <1>     movzx eax, al
    98 000026A6 01C2                <1>     add edx, eax
    99 000026A8 EBF3                <1>     jmp short .addDaysInMonth
   100                              <1> .addMonthOffset:
   101 000026AA 0FB60D(82C40300)    <1>     movzx ecx, byte [dayOfMonth]
   102 000026B1 FFC9                <1>     dec ecx
   103 000026B3 01CA                <1>     add edx, ecx    ;Add month offset
   104                              <1>     ;edx has the number of days since 01/01/1980
   105 000026B5 668915(85C40300)    <1>     mov word [daysOffset], dx   ;Store!
   106                              <1> ;Now read and then write CLOCKrecrd
   107 000026BC 488D1D(0AC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   108 000026C3 B906000000          <1>     mov ecx, 6
   109 000026C8 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   110 000026CB E8833C0000          <1>     call primReqReadSetup   ;rbx now points to request header
   111 000026D0 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   112 000026D7 E8AC390000          <1>     call goDriver
   113                              <1> ;Now we change daycount and write it back
   114 000026DC 0FB705(85C40300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   115 000026E3 488D1D(0AC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   116 000026EA 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   117 000026ED B906000000          <1>     mov ecx, 6
   118 000026F2 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   119 000026F5 E84E3C0000          <1>     call primReqWriteSetup   ;rbx now points to request header
   120 000026FA 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   121 00002701 E882390000          <1>     call goDriver
   122 00002706 E8AE000000          <1>     call setDayofWeek
   123                              <1>     return
    13                              <2> %%_ret:
    14 0000270B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   124                              <1> .exitBad:
   125 0000270C B0FF                <1>     mov al, -1
   126                              <1>     return
    13                              <2> %%_ret:
    14 0000270E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> readDateTimeRecord:
   129                              <1> ;Will read the clock using the primary request header
   130                              <1> ;Preserves all regs except eax and flags
   131 0000270F 53                  <1>     push rbx
   132 00002710 51                  <1>     push rcx
   133 00002711 52                  <1>     push rdx
   134 00002712 56                  <1>     push rsi
   135 00002713 55                  <1>     push rbp
   136                              <1> 
   137 00002714 66C705(BADA0300)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   137 0000271C 00                  <1>
   138 0000271D 488D1D(0AC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   139 00002724 B906000000          <1>     mov ecx, 6
   140 00002729 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   141                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   142                              <1> ; rbx = Data storage buffer ptr
   143                              <1> ; ecx = Number of sectors to transfer
   144                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   145 0000272C E8223C0000          <1>     call primReqReadSetup   ;rbx now points to request header
   146 00002731 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   147 00002738 E84B390000          <1>     call goDriver
   148 0000273D 0FB705(0AC50300)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   149                              <1> ;Here we have:  ax = Days since 1/1/1980
   150                              <1> ;Updates the internal date fields
   151                              <1> ;Internal time fields are in the clock record
   152                              <1> ;So now we check if the number of days since 1980 are the same.
   153                              <1> ;If so, we can skip updating.
   154 00002744 663B05(85C40300)    <1>     cmp ax, word [daysOffset]
   155 0000274B 7466                <1>     je .exit    ;Return if equal
   156 0000274D 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   157 00002752 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   158 00002754 668905(85C40300)    <1>     mov word [daysOffset], ax   ;Save this new offset
   159                              <1>     ;Now want to update years, month and day fields
   160                              <1>     ;ax has the number of days since 01/01/1980
   161                              <1>     ;Get days in a 4 year period
   162 0000275B BBB5050000          <1>     mov ebx, 365*4 + 1
   163 00002760 31D2                <1>     xor edx, edx
   164 00002762 89D1                <1>     mov ecx, edx  ;Zero ecx
   165 00002764 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   166                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   167                              <1>     ;edx has offset into current 4 year bunch
   168 00002766 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   169 0000276B 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   170 0000276D 7210                <1>     jb .foundBunch
   171 0000276F 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   172 00002771 FFC1                <1>     inc ecx
   173 00002773 FFCB                <1>     dec ebx ;Number of days in a normal year
   174                              <1> .findBunch:
   175 00002775 39DA                <1>     cmp edx, ebx
   176 00002777 7206                <1>     jb .foundBunch
   177 00002779 29DA                <1>     sub edx, ebx
   178 0000277B FFC1                <1>     inc ecx
   179 0000277D EBF6                <1>     jmp short .findBunch
   180                              <1> .foundBunch:
   181                              <1>     ;If ecx = 0, february has 29 days!
   182                              <1>     ;eax has number of four year bunches elapsed since 1980
   183 0000277F C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   184 00002782 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   185                              <1>     ;ecx now has the number of years since 1980
   186 00002784 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   187                              <1> ;edx has number of days into the year we are in
   188                              <1> ;eax has number of days in Feb for this year
   189 00002789 488D35F5D8FFFF      <1>     lea rsi, monthsTbl
   190 00002790 31C9                <1>     xor ecx, ecx    ;Use as month counter
   191                              <1> .monthSearch:
   192 00002792 FFC1                <1>     inc ecx ;Start from 1
   193 00002794 AC                  <1>     lodsb   ;Get value in al and inc rsi
   194 00002795 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   195 00002798 39C2                <1>     cmp edx, eax
   196 0000279A 7204                <1>     jb .monthFound
   197 0000279C 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   198 0000279E EBF2                <1>     jmp short .monthSearch
   199                              <1> .monthFound:
   200                              <1>     ;cl has the month (01h-0Ch)
   201                              <1>     ;dl has the day of the month - 1
   202 000027A0 FFC2                <1>     inc edx
   203 000027A2 880D(83C40300)      <1>     mov byte [monthOfYear], cl
   204 000027A8 8815(82C40300)      <1>     mov byte [dayOfMonth], dl
   205 000027AE E806000000          <1>     call setDayofWeek
   206                              <1> .exit:
   207 000027B3 5D                  <1>     pop rbp
   208 000027B4 5E                  <1>     pop rsi
   209 000027B5 5A                  <1>     pop rdx
   210 000027B6 59                  <1>     pop rcx
   211 000027B7 5B                  <1>     pop rbx
   212                              <1>     return  ;Return with ZF is date set, or same day
    13                              <2> %%_ret:
    14 000027B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   213                              <1> 
   214                              <1> setDayofWeek:
   215                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   216 000027B9 0FB705(85C40300)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   217 000027C0 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   218                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   219 000027C5 31D2                <1>     xor edx, edx
   220 000027C7 B907000000          <1>     mov ecx, 7   
   221 000027CC F7F1                <1>     div ecx  ;Get remainder in dl
   222 000027CE 8815(87C40300)      <1>     mov byte [dayOfWeek], dl
   223                              <1> ;Set ZF to indicate all ok
   224 000027D4 31C0                <1>     xor eax, eax
   225                              <1>     return
    13                              <2> %%_ret:
    14 000027D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> 
   227                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   228                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   229                              <1> ;Input: cl = Year - 1980
   230                              <1> ;Output: al = Number of days in February
   231 000027D7 880D(84C40300)      <1>     mov byte [years], cl    ;Save this figure
   232 000027DD F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   233 000027E0 51                  <1>     push rcx
   234 000027E1 57                  <1>     push rdi
   235 000027E2 B81C000000          <1>     mov eax, 28  ;Usual days in february
   236 000027E7 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   237 000027EC 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   238 000027EF 488D3D90D8FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   239 000027F6 AA                  <1>     stosb   ;Store the word in rdi
   240 000027F7 5F                  <1>     pop rdi
   241 000027F8 59                  <1>     pop rcx
   242                              <1>     return
    13                              <2> %%_ret:
    14 000027F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> getDirDTwords:
   245                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   246                              <1> ; High word of eax = Date
   247                              <1> ; Low word of eax = Time
   248                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   249                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   250                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   251                              <1> 
   252                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   253                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   254                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   255                              <1> ;Preserves all registers except eax
   256 000027FA 53                  <1>     push rbx
   257 000027FB 0FB61D(0FC50300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   258 00002802 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   259 00002804 89D8                <1>     mov eax, ebx
   260 00002806 0FB61D(0CC50300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   261 0000280D C1E305              <1>     shl ebx, 5
   262 00002810 09D8                <1>     or eax, ebx
   263 00002812 0FB61D(0DC50300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   264 00002819 C1E30B              <1>     shl ebx, 11
   265 0000281C 09D8                <1>     or eax, ebx
   266 0000281E 0FB61D(82C40300)    <1>     movzx ebx, byte [dayOfMonth]
   267 00002825 C1E310              <1>     shl ebx, 16
   268 00002828 09D8                <1>     or eax, ebx
   269 0000282A 0FB61D(83C40300)    <1>     movzx ebx, byte [monthOfYear]
   270 00002831 C1E315              <1>     shl ebx, 21
   271 00002834 09D8                <1>     or eax, ebx
   272 00002836 0FB61D(84C40300)    <1>     movzx ebx, byte [years]
   273 0000283D C1E319              <1>     shl ebx, 25
   274 00002840 09D8                <1>     or eax, ebx
   275 00002842 5B                  <1>     pop rbx
   276                              <1>     return
    13                              <2> %%_ret:
    14 00002843 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   277                              <1> getDateAndTimeOld:  ;INT 4Fh AX=12
   278                              <1> ;Returns edx = time
   279                              <1> ;        eax = date
   280                              <1> ; Formally ax and dx but we clear the upper words
   281 00002844 E8C6FEFFFF          <1>     call readDateTimeRecord
   282 00002849 E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   283 0000284E 31D2                <1>     xor edx, edx
   284 00002850 6689C2              <1>     mov dx, ax  ;Save time
   285 00002853 C1E810              <1>     shr eax, 10h    ;Get date into rax
   286                              <1>     return
    13                              <2> %%_ret:
    14 00002856 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
     1                              <1> ;FCB functions.
     2                              <1> ;FCBs may only be generally used for file access FAT 12/16 volumes. 
     3                              <1> ;On FAT 32 volumes things are a bit more restricted.
     4                              <1> 
     5                              <1> ;The following functions ARE currently supported for general FAT 32 files:
     6                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
     7                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
     8                              <1> ;   parseFilename       (I mean, this function is useful anyway)
     9                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    10                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    11                              <1> ;   findNextFileFCB     (ditto the above)
    12                              <1> 
    13                              <1> ;The following functions are NOT currently supported for general FAT 32 files:
    14                              <1> ;   openFCB
    15                              <1> ;   closeFCB
    16                              <1> ;   createFCB
    17                              <1> ;   randomReadFCB
    18                              <1> ;   randomWriteFCB
    19                              <1> ;   randBlockReadFCB
    20                              <1> ;   randBlockWriteFCB
    21                              <1> ;   sequentialReadFCB
    22                              <1> ;   sequentialWriteFCB
    23                              <1> ;An attempt to run these functions on a FAT 32 volume will result in returning 
    24                              <1> ; al = -1 and an extended error code of 05 - Access Denied unless a device
    25                              <1> 
    26                              <1> ;FAT 32 volumes will support all functions for Volume Labels using xFCBs.
    27                              <1> ;Reading and Writing to the Volume label will silently return ok.
    28                              <1> ;Volume labels will be editable by being created/opened/closed.
    29                              <1> ;If the current directory is not the root, Volume Label work will assume the 
    30                              <1> ; root directory always.
    31                              <1> 
    32                              <1> findFirstFileFCB:  ;ah = 11h
    33                              <1> ;Input: rdx -> FCB
    34 00002857 488915(0AC70300)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    35 0000285E 4889D6              <1>     mov rsi, rdx
    36 00002861 803EFF              <1>     cmp byte [rsi], -1
    37 00002864 7407                <1>     je .notExt1
    38 00002866 4881C607000000      <1>     add rsi, exFcb.driveNum
    39                              <1> .notExt1:
    40 0000286D 0FB606              <1>     movzx eax, byte [rsi]
    41 00002870 50                  <1>     push rax    ;Push on stack the drive number
    42 00002871 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    43 00002878 E8BF020000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    44 0000287D 7306                <1>     jnc .fcbOk
    45 0000287F 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    46 00002880 E9AB400000          <1>     jmp fcbErrExit
    47                              <1> .fcbOk:
    48 00002885 488D3D(12C50300)    <1>     lea rdi, buffer1
    49 0000288C E856E7FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    50 00002891 7306                <1>     jnc .fileFound
    51 00002893 5B                  <1>     pop rbx
    52 00002894 E997400000          <1>     jmp fcbErrExit
    53                              <1> .fileFound:
    54                              <1> ;Now we build an FFBlock internally
    55 00002899 488D3D(23C60300)    <1>     lea rdi, dosffblock
    56 000028A0 57                  <1>     push rdi
    57 000028A1 E86BE6FFFF          <1>     call setupFFBlock
    58 000028A6 5E                  <1>     pop rsi
    59                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    60 000028A7 488B3D(0AC70300)    <1>     mov rdi, qword [workingFCB]
    61 000028AE F605(EBC60300)FF    <1>     test byte [extFCBFlag], -1
    62 000028B5 7407                <1>     jz .notExt2
    63 000028B7 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    64                              <1> .notExt2:
    65 000028BE 5B                  <1>     pop rbx ;Get back the drive number in bl
    66 000028BF 85DB                <1>     test ebx, ebx
    67 000028C1 7509                <1>     jnz .notCurrentDrive
    68 000028C3 0FB61D(26C40300)    <1>     movzx ebx, byte [currentDrv]
    69 000028CA FFC3                <1>     inc ebx ;Turn into a 1 based drive number
    70                              <1> .notCurrentDrive:
    71 000028CC AC                  <1>     lodsb   ;Get search drive from FFBlock in al
    72 000028CD 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
    73 000028D0 B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
    74 000028D5 A5                  <1>     movsd
    75 000028D6 AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
    76 000028D7 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
    77 000028DE 488D35(4EC60300)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
    78 000028E5 F605(EBC60300)FF    <1>     test byte [extFCBFlag], -1
    79 000028EC 7412                <1>     jz .notExt3
    80 000028EE B8FFFFFFFF          <1>     mov eax, -1
    81 000028F3 AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
    82 000028F4 FFC0                <1>     inc eax ;Make it zero
    83 000028F6 AB                  <1>     stosd
    84 000028F7 AA                  <1>     stosb   ;Store 5 bytes of zero
    85 000028F8 0FB605(ECC60300)    <1>     movzx eax, byte [searchAttr]
    86 000028FF AA                  <1>     stosb   ;Store the search attributes
    87                              <1> .notExt3:
    88 00002900 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
    89 00002902 AA                  <1>     stosb
    90 00002903 B904000000          <1>     mov ecx, fatDirEntry_size/8
    91 00002908 F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
    92 0000290B E91D400000          <1>     jmp fcbGoodExit
    93                              <1>     
    94                              <1> findNextFileFCB:   ;ah = 12h
    95 00002910 488915(0AC70300)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    96 00002917 C605(EBC60300)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
    97 0000291E C605(ECC60300)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
    98 00002925 4889D6              <1>     mov rsi, rdx
    99                              <1> 
   100 00002928 803EFF              <1>     cmp byte [rsi], -1
   101 0000292B 7514                <1>     jne .notExt
   102 0000292D FE0D(EBC60300)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
   103 00002933 4881C606000000      <1>     add rsi, exFcb.attribute
   104 0000293A AC                  <1>     lodsb   ;Get search attr in al
   105 0000293B 8805(ECC60300)      <1>     mov byte [searchAttr], al
   106                              <1> .notExt:
   107                              <1>     ;rsi points to drive letter
   108 00002941 488D3D(23C60300)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   109 00002948 31C0                <1>     xor eax, eax
   110 0000294A AC                  <1>     lodsb   ;Get the FCB drive letter
   111 0000294B 50                  <1>     push rax    ;Push drive letter on the stack
   112 0000294C 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   113 0000294F AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   114 00002950 B905000000          <1>     mov ecx, 5
   115 00002955 F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   116 00002957 FF35(0CC40300)      <1>     push qword [currentDTA] ;Save original currentDTA
   117 0000295D 488D3D(23C60300)    <1>     lea rdi, dosffblock
   118 00002964 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   119 00002965 8F05(0CC40300)      <1>     pop qword [currentDTA]
   120 0000296B E81FE2FFFF          <1>     call findNextMain
   121 00002970 8F05(0CC40300)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   122 00002976 0F831DFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   123 0000297C 488B3D(0AC70300)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   124 00002983 F607FF              <1>     test byte [rdi], -1
   125 00002986 7407                <1>     jz .notExt2
   126 00002988 4881C707000000      <1>     add rdi, exFcb.driveNum
   127                              <1> .notExt2:
   128 0000298F 5B                  <1>     pop rbx ;Get the drive letter back into bl
   129 00002990 881F                <1>     mov byte [rdi], bl
   130 00002992 E9993F0000          <1>     jmp fcbErrExit  ;And exit bad
   131                              <1> 
   132                              <1> deleteFileFCB:     ;ah = 13h
   133 00002997 488D3D(12C50300)    <1>     lea rdi, buffer1
   134 0000299E 57                  <1>     push rdi
   135 0000299F E898010000          <1>     call fcbInitRoutine ;Build path and find file to delete
   136 000029A4 5F                  <1>     pop rdi ;Point rdi to the canonised path
   137 000029A5 0F82853F0000        <1>     jc fcbErrExit
   138 000029AB E837E6FFFF          <1>     call getFilePathNoCanon ;Get the file
   139 000029B0 0F827A3F0000        <1>     jc fcbErrExit
   140 000029B6 E8230E0000          <1>     call outerDeleteMain
   141 000029BB 0F826F3F0000        <1>     jc fcbErrExit
   142 000029C1 E9673F0000          <1>     jmp fcbGoodExit
   143                              <1> 
   144                              <1> renameFileFCB:     ;ah = 17h
   145                              <1> ;Input: rdx -> User FCB
   146 000029C6 488915(0AC70300)    <1>     mov qword [workingFCB], rdx
   147                              <1>     ;First we get the drive letter 
   148 000029CD 4889D6              <1>     mov rsi, rdx
   149 000029D0 803EFF              <1>     cmp byte [rsi], -1
   150 000029D3 7507                <1>     jne .notExt
   151 000029D5 4881C607000000      <1>     add rsi, exFcb.driveNum
   152                              <1> .notExt:
   153 000029DC 31C0                <1>     xor eax, eax
   154 000029DE AC                  <1>     lodsb
   155 000029DF 50                  <1>     push rax    ;Push the drive letter on the stack for now
   156 000029E0 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   157 000029E7 E850010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   158 000029EC 723D                <1>     jc .badPop
   159 000029EE FF35(12C60300)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   160 000029F4 8F05(1AC60300)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   161 000029FA 58                  <1>     pop rax ;Get drive letter back
   162 000029FB 488D3D(92C50300)    <1>     lea rdi, buffer2
   163 00002A02 E809010000          <1>     call fcbInitName2
   164 00002A07 7223                <1>     jc short .bad
   165 00002A09 488B05(1AC60300)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   166 00002A10 488705(12C60300)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   167 00002A17 488905(1AC60300)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   168 00002A1E E8BE090000          <1>     call renameMain
   169 00002A23 0F83043F0000        <1>     jnc fcbGoodExit
   170 00002A29 EB01                <1>     jmp short .bad
   171                              <1> .badPop:
   172 00002A2B 5B                  <1>     pop rbx ;Pop drive number off stack
   173                              <1> .bad:
   174 00002A2C E9FF3E0000          <1>     jmp fcbErrExit
   175                              <1> 
   176                              <1> getFileSizeFCB:    ;ah = 23h
   177                              <1> ;This function which can be used to test existance of file without opening it 
   178                              <1> ;Input: rdx -> FCB
   179 00002A31 488915(0AC70300)    <1>     mov qword [workingFCB], rdx
   180 00002A38 488D3D(12C50300)    <1>     lea rdi, buffer1
   181 00002A3F 57                  <1>     push rdi
   182 00002A40 E8F7000000          <1>     call fcbInitRoutine
   183 00002A45 5F                  <1>     pop rdi
   184 00002A46 0F82E43E0000        <1>     jc fcbErrExit
   185 00002A4C E896E5FFFF          <1>     call getFilePathNoCanon
   186 00002A51 0F82D93E0000        <1>     jc fcbErrExit
   187 00002A57 8B05(6AC60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   188                              <1>     ;Now we gotta set up FCB randRecrd Field
   189 00002A5D 488B35(0AC70300)    <1>     mov rsi, qword [workingFCB]
   190 00002A64 803EFF              <1>     cmp byte [rsi], -1
   191 00002A67 7507                <1>     jne .notExtended
   192 00002A69 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   193                              <1> .notExtended:
   194                              <1> ;rsi points to the drive number now
   195 00002A70 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   196 00002A74 F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   197 00002A76 85D2                <1>     test edx, edx
   198 00002A78 7402                <1>     jz .noRemainder
   199 00002A7A FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   200                              <1> .noRemainder:
   201 00002A7C 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   202 00002A7F E9A93E0000          <1>     jmp fcbGoodExit
   203                              <1> 
   204                              <1> setDTA:            ;ah = 1Ah, Always can be used
   205                              <1> ;Called with:
   206                              <1> ;   rdx = Pointer to the new default DTA
   207 00002A84 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   208 00002A8B 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   209 00002A8F 488915(0CC40300)    <1>     mov qword [currentDTA], rdx
   210 00002A96 C3                  <1>     ret
   211                              <1> 
   212                              <1> getDTA:            ;ah = 2Fh, Always can be used
   213 00002A97 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   214 00002A9E 488B1D(0CC40300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   215 00002AA5 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   216                              <1>     return
    13                              <2> %%_ret:
    14 00002AA9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1>     
   218                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   219                              <1> ;Input:
   220                              <1> ;rsi points to a command line to parse
   221                              <1> ;rdi points to a future unopened FCB
   222                              <1> ;al = parsing control bits. 
   223                              <1> ; al[0] = If set, leading filename separators are scanned off
   224                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   225                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   226                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   227                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   228                              <1> ;        al = 1 => Wildcards found
   229                              <1> ;        al = -1 => Drive specifier invalid
   230                              <1> ;rsi -> to the first char past the parsed filename
   231                              <1> ;rdi -> First byte of the FCB 
   232                              <1> 
   233 00002AAA E82D010000          <1>     call parseNameToFCB
   234 00002AAF 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   235 00002AB0 E8F5390000          <1>     call getUserRegs
   236 00002AB5 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   237                              <1>     return  ;al now contains dl, the signature, special unique return type
    13                              <2> %%_ret:
    14 00002AB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   238                              <1> 
   239                              <1> createFileFCB:     ;ah = 16h
   240                              <1> ;rdx -> Extended FCB
   241                              <1> ;       MUST BE EXTENDED. 
   242                              <1> ;       MUST HAVE ATTRIBUTE OF 08h, VOLID, else will fail
   243 00002AB9 803AFF              <1>     cmp byte [rdx + exFcb.extSig], -1
   244 00002ABC 7506                <1>     jne .exit
   245 00002ABE 807A0608            <1>     cmp byte [rdx + exFcb.attribute], dirVolumeID
   246 00002AC2 7500                <1>     jne .exit
   247                              <1>     ;Here we search for a volume ID in the root directory.
   248                              <1>     ; If one exists, we replace the dir entry name field,
   249                              <1>     ; sync the BPB field and invalidate the DPB (to rebuid the BPB).
   250                              <1>     ; Else, we build a dir entry for it, sync the BPB and invalidate the DPB.
   251                              <1>     ;If ANY bits other than ValidCDS are set in the CDS, fail the operation.
   252                              <1> .exit:
   253 00002AC4 B805000000          <1>     mov eax, errAccDen
   254 00002AC9 E9623E0000          <1>     jmp fcbErrExit
   255                              <1> 
   256                              <1> ;=================================================================
   257                              <1> ;=================================================================
   258                              <1> ;These functions will be marked as reserved for future expansion.
   259                              <1> ; One idea will be to create a handle based record IO interface.
   260                              <1> ; We will be able to do IO on records of predefined length 
   261                              <1> ; on a file handle, thus removing the need for an FCB but still
   262                              <1> ; maintaining the usefulness of record based IO.
   263                              <1> ;=================================================================
   264                              <1> ;=================================================================
   265                              <1> openFileFCB:       ;ah = 0Fh
   266                              <1> closeFileFCB:      ;ah = 10h
   267                              <1> sequentialReadFCB: ;ah = 14h
   268                              <1> sequentialWriteFCB:;ah = 15h
   269                              <1> randomReadFCB:     ;ah = 21h
   270                              <1> randomWriteFCB:    ;ah = 22h
   271                              <1> setRelRecordFCB:   ;ah = 24h
   272                              <1> randBlockReadFCB:  ;ah = 27h
   273                              <1> randBlockWriteFCB: ;ah = 28h
   274 00002ACE B805000000          <1>     mov eax, errAccDen
   275 00002AD3 E9583E0000          <1>     jmp fcbErrExit
   276                              <1> 
   277                              <1> 
   278                              <1> ;--------------------------------
   279                              <1> ;  Common FCB related Routines  :
   280                              <1> ;--------------------------------
   281                              <1> fcbCheckDriveType:
   282                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   283                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   284                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   285                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   286                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   287                              <1> ;If a net CDS, automatic fail (for now).
   288 00002AD8 C605(E9C60300)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   289 00002ADF 51                  <1>     push rcx
   290 00002AE0 57                  <1>     push rdi
   291 00002AE1 55                  <1>     push rbp
   292 00002AE2 9C                  <1>     pushfq
   293 00002AE3 F605(59C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   294 00002AEA 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   295 00002AEC E84C390000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   296 00002AF1 7218                <1>     jc .exit
   297                              <1>     ;rdi has cds ptr now
   298 00002AF3 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   299 00002AF7 E8C0DCFFFF          <1>     call getFATtype
   300 00002AFC 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   301 00002B02 7707                <1>     ja .exit
   302                              <1> .okToGo:
   303 00002B04 C605(E9C60300)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   304                              <1> .exit:
   305 00002B0B 9D                  <1>     popfq
   306 00002B0C 5D                  <1>     pop rbp
   307 00002B0D 5F                  <1>     pop rdi
   308 00002B0E 59                  <1>     pop rcx
   309                              <1>     return
    13                              <2> %%_ret:
    14 00002B0F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   310                              <1> fcbInitName2:
   311                              <1> ;Must be called after fcbInitRoutine has been run once
   312                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   313                              <1> ;       rdx -> UserFCB
   314                              <1> ;       eax[0] = Drive number (0 based)
   315 00002B10 55                  <1>     push rbp
   316 00002B11 4889E5              <1>     mov rbp, rsp
   317 00002B14 4881EC0F000000      <1>     sub rsp, 15
   318 00002B1B 57                  <1>     push rdi
   319 00002B1C 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   320 00002B20 4889D6              <1>     mov rsi, rdx
   321 00002B23 F605(EBC60300)FF    <1>     test byte [extFCBFlag], -1
   322 00002B2A 7407                <1>     jz .notExtended
   323 00002B2C 4881C607000000      <1>     add rsi, exFcb.driveNum
   324                              <1> .notExtended:
   325                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   326 00002B33 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   327 00002B3A EB36                <1>     jmp short fcbInitRoutine.rename2EP
   328                              <1> fcbInitRoutine:
   329                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   330                              <1> ;Input: rdx -> User FCB
   331                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   332 00002B3C 55                  <1>     push rbp
   333 00002B3D 4889E5              <1>     mov rbp, rsp
   334 00002B40 4881EC0F000000      <1>     sub rsp, 15    ;Make 15 char space on stack
   335                              <1>     ;This space is used to store X:FILENAME.EXT,0
   336 00002B47 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   337 00002B48 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   338 00002B4C C605(EBC60300)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   339 00002B53 C605(ECC60300)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   340 00002B5A E86A000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   341 00002B5F 7410                <1>     jz .notExtended
   342 00002B61 C605(EBC60300)FF    <1>     mov byte [extFCBFlag], -1
   343 00002B68 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   344 00002B6B 8805(ECC60300)      <1>     mov byte [searchAttr], al
   345                              <1> .notExtended:
   346 00002B71 AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   347                              <1> .rename2EP:
   348 00002B72 E8C0390000          <1>     call getCDS ;Get the CDS (preserves rdi)
   349 00002B77 723F                <1>     jc .badDisk
   350 00002B79 E842000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   351 00002B7E 488D1DCCD6FFFF      <1>     lea rbx, asciiCharProperties
   352 00002B85 B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   353 00002B8A 56                  <1>     push rsi    ;rsi -> fcb.filename
   354                              <1> .nameCharCheck:
   355 00002B8B AC                  <1>     lodsb   ;Get the char in al
   356 00002B8C D7                  <1>     xlatb   ;Get the char signature in al
   357 00002B8D A808                <1>     test al, 8
   358 00002B8F 7427                <1>     jz .badDisk
   359 00002B91 FFC9                <1>     dec ecx
   360 00002B93 75F6                <1>     jnz .nameCharCheck
   361 00002B95 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   362 00002B96 4889FB              <1>     mov rbx, rdi    ;Save ptr to stackbuffer + 2 (past X:)
   363 00002B99 E833E3FFFF          <1>     call FCBToAsciiz
   364 00002B9E 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   365 00002B9F 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0?
   366 00002BA2 7414                <1>     je .badDisk
   367 00002BA4 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   368 00002BA8 55                  <1>     push rbp
   369 00002BA9 E8F9E3FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename
   370 00002BAE 5D                  <1>     pop rbp
   371 00002BAF 7207                <1>     jc .badDisk
   372 00002BB1 E822FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   373 00002BB6 EB03                <1>     jmp short .jiggleStack  ;Skip the error
   374                              <1> .badDisk:
   375 00002BB8 B003                <1>     mov al, errPnf  ;DOS does this... so will I
   376 00002BBA F9                  <1>     stc
   377                              <1> .jiggleStack:
   378 00002BBB 4889EC              <1>     mov rsp, rbp
   379 00002BBE 5D                  <1>     pop rbp
   380                              <1> .exit:
   381                              <1>     return
    13                              <2> %%_ret:
    14 00002BBF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   382                              <1> 
   383                              <1> storeZeroBasedDriveNumber:
   384                              <1> ;Input: al => 0 based drive letter
   385                              <1> ;       rdi -> Points to buffer to store the X: in
   386 00002BC0 FEC0                <1>     inc al
   387                              <1> storeOneBasedDriveNumber:
   388                              <1> ;Input: al => 1 based drive letter
   389                              <1> ;       rdi -> Points to buffer to store the X: in
   390 00002BC2 0440                <1>     add al, "@"
   391 00002BC4 B43A                <1>     mov ah, ":"
   392 00002BC6 66AB                <1>     stosw
   393                              <1>     return
    13                              <2> %%_ret:
    14 00002BC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   394                              <1> 
   395                              <1> isFCBExtended:
   396                              <1> ;Input: rdx = FCB ptr
   397                              <1> ;Output: rsi -> Drive letter of FCB
   398                              <1> ;        rdx -> FCB first byte
   399                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   400 00002BC9 4889D6              <1>     mov rsi, rdx
   401 00002BCC 803EFF              <1>     cmp byte [rsi], -1
   402 00002BCF 7507                <1>     jne .notExtended
   403 00002BD1 4881C607000000      <1>     add rsi, exFcb.driveNum
   404                              <1> .notExtended:
   405 00002BD8 4839F2              <1>     cmp rdx, rsi
   406                              <1>     return
    13                              <2> %%_ret:
    14 00002BDB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   407                              <1> 
   408                              <1> parseNameToFCB:
   409                              <1> ;rsi points to a command line to parse
   410                              <1> ;rdi points to a future unopened FCB
   411                              <1> ;al = parsing control bits. 
   412                              <1> ; al[0] = If set, leading filename separators are scanned off
   413                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   414                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   415                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   416                              <1> ;
   417                              <1> ;Separators include : . ; , = + TAB SPACE
   418                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   419                              <1> 
   420 00002BDC C605(81C40300)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   421 00002BE3 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   422 00002BE5 A802                <1>     test al, 2  ;Set drive letter>
   423 00002BE7 7402                <1>     jz .skipDriveLetter
   424 00002BE9 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   425                              <1> .skipDriveLetter:
   426 00002BEB 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   427 00002BEE B908000000          <1>     mov ecx, 8  ;Copy Filename
   428 00002BF3 A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   429 00002BF5 93                  <1>     xchg eax, ebx
   430 00002BF6 B020                <1>     mov al, " " ;Clear the field
   431 00002BF8 7405                <1>     jz .clearFilenameField
   432 00002BFA 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   433 00002BFD 31C9                <1>     xor ecx, ecx
   434                              <1> .clearFilenameField:
   435 00002BFF F3AA                <1>     rep stosb
   436 00002C01 B903000000          <1>     mov ecx, 3
   437 00002C06 F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   438 00002C09 7405                <1>     jz .clearExtensionField
   439 00002C0B 4801CF              <1>     add rdi, rcx
   440 00002C0E 31C9                <1>     xor ecx, ecx
   441                              <1> .clearExtensionField:
   442 00002C10 F3AA                <1>     rep stosb
   443 00002C12 91                  <1>     xchg eax, ecx
   444 00002C13 AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   445 00002C14 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   446 00002C1B F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   447 00002C1E 740F                <1>     jz .dontScanOff
   448 00002C20 E8FF3A0000          <1>     call skipSpacesAndTabs
   449 00002C25 E8063B0000          <1>     call isCharDelimType
   450 00002C2A 7508                <1>     jnz .skipIfDelim
   451 00002C2C 48FFC6              <1>     inc rsi
   452                              <1> .dontScanOff:
   453 00002C2F E8F03A0000          <1>     call skipSpacesAndTabs  ;Skip a char
   454                              <1> .skipIfDelim:
   455 00002C34 E896390000          <1>     call uppercaseCharAtPtr 
   456 00002C39 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   457 00002C3B 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   458 00002C3E 7519                <1>     jne .skipSettingDriveLetter
   459 00002C40 48FFC6              <1>     inc rsi ;Goto next char
   460 00002C43 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   461 00002C45 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   462 00002C47 50                  <1>     push rax    ;Save the 1 based drive letter
   463 00002C48 E881380000          <1>     call setDrive   ;Verifies if this drive letter is valid
   464 00002C4D 58                  <1>     pop rax
   465 00002C4E 7302                <1>     jnc .validDriveLetter
   466                              <1> .invalidDriveLetter:
   467 00002C50 B2FF                <1>     mov dl, -1
   468                              <1> .validDriveLetter:
   469 00002C52 AA                  <1>     stosb
   470 00002C53 48FFC6              <1>     inc rsi ;Align pointers...
   471 00002C56 48FFCF              <1>     dec rdi 
   472                              <1> .skipSettingDriveLetter:
   473 00002C59 48FFCE              <1>     dec rsi
   474 00002C5C 48FFC7              <1>     inc rdi
   475                              <1>     
   476                              <1> getFCBFilename:
   477                              <1> ;Input: rsi points to first char of filename
   478                              <1> ;       rdi points to storage buffer for filename
   479                              <1> ;       dl contains the signature if drive invalid
   480                              <1> ;Output:
   481                              <1> ;       Fields filled
   482                              <1> ;       al = Return signature
   483 00002C5F B908000000          <1>     mov ecx, 8
   484 00002C64 E815000000          <1>     call getFCBNameField
   485 00002C69 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   486 00002C6C 750D                <1>     jne .noExt
   487 00002C6E B903000000          <1>     mov ecx, 3
   488 00002C73 48FFC6              <1>     inc rsi ;Skip this char
   489 00002C76 E814000000          <1>     call forceFCBNameField
   490                              <1> .noExt:
   491 00002C7B 88D0                <1>     mov al, dl  ;Store the return signature
   492                              <1>     return
    13                              <2> %%_ret:
    14 00002C7D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   493                              <1> 
   494                              <1> getFCBNameField:
   495                              <1> ;Checks if the field is appropriate before copying it
   496 00002C7E E84C390000          <1>     call uppercaseCharAtPtr
   497 00002C83 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   498 00002C85 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   499 00002C88 48FFCE              <1>     dec rsi ;Point to previous char
   500                              <1>     return
    13                              <2> %%_ret:
    14 00002C8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   501                              <1> .okName:
   502 00002C8C 48FFCE              <1>     dec rsi ;Go back now a char
   503                              <1> forceFCBNameField:
   504                              <1> ;Forcefully copies the name from rsi to rdi
   505 00002C8F E83B390000          <1>     call uppercaseCharAtPtr
   506 00002C94 7226                <1>     jc .terminatingSpace
   507 00002C96 750D                <1>     jnz .notSep
   508 00002C98 F605(81C40300)FF    <1>     test byte [fcbSpaceOk], -1
   509 00002C9F 741B                <1>     jz .terminatingSpace
   510 00002CA1 3C20                <1>     cmp al, " "
   511 00002CA3 7517                <1>     jne .terminatingSpace
   512                              <1> .notSep:
   513 00002CA5 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   514 00002CA8 FFC9                <1>     dec ecx
   515 00002CAA 3C2A                <1>     cmp al, "*" ;Big wildcard?
   516 00002CAC 7504                <1>     jne .notBigWildcard
   517 00002CAE B03F                <1>     mov al, "?"
   518 00002CB0 F3AA                <1>     rep stosb
   519                              <1> .notBigWildcard:
   520 00002CB2 AA                  <1>     stosb   ;Stores the uppercased char
   521 00002CB3 3C3F                <1>     cmp al, "?"
   522 00002CB5 75D8                <1>     jne forceFCBNameField
   523 00002CB7 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   524 00002CBA EBD3                <1>     jmp short forceFCBNameField
   525                              <1> .terminatingSpace:
   526 00002CBC B020                <1>     mov al, " "
   527 00002CBE AA                  <1>     stosb
   528 00002CBF 48FFCE              <1>     dec rsi ;Point to this trailing space
   529                              <1>     return
    13                              <2> %%_ret:
    14 00002CC2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    33                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;    File Handle Kernel routines    :
     3                              <1> ;-----------------------------------:
     4                              <1> 
     5                              <1> createFileHdl:     ;ah = 3Ch, handle function
     6                              <1> ;Input: cx = File attributes (same as search attributes for find first)
     7                              <1> ;       rdx = Ptr to ASCIZ filename to create
     8                              <1> ;Output: CF=CY => ax = File handle
     9                              <1> ;        CF=NC => al = Error code
    10 00002CC3 51                  <1>     push rcx    ;Save file attributes on stack
    11 00002CC4 488D0DD40C0000      <1>     lea rcx, createMain
    12 00002CCB C605(ECC60300)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive w/ directory
    13 00002CD2 EB1D                <1>     jmp short openFileHdl.openCommon
    14                              <1> openFileHdl:       ;ah = 3Dh, handle function
    15                              <1> ;Input: al = Open mode, to open file with
    16                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    17                              <1> ;If called from 5D00h, cl = File attributes too
    18                              <1> ;Output: CF=CY => ax = File handle
    19                              <1> ;        CF=NC => al = Error code
    20 00002CD4 BB16000000          <1>     mov ebx, dirInclusive
    21 00002CD9 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
    22 00002CE0 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    23 00002CE3 880D(ECC60300)      <1>     mov byte [searchAttr], cl
    24 00002CE9 488D0DB30B0000      <1>     lea rcx, openMain  
    25 00002CF0 50                  <1>     push rax    ;Save open mode on stack
    26                              <1> .openCommon:
    27 00002CF1 4889D6              <1>     mov rsi, rdx
    28 00002CF4 E873390000          <1>     call checkPathspecOK
    29 00002CF9 730B                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    30                              <1> .badPath: ;We cant have wildcards when creating or opening a file!
    31 00002CFB 58                  <1>     pop rax
    32 00002CFC B803000000          <1>     mov eax, errPnf
    33 00002D01 E94A3C0000          <1>     jmp extErrExit
    34                              <1> .pathOk:
    35 00002D06 E8FA3B0000          <1>     call dosCrit1Enter
    36 00002D0B E8CD170000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    37 00002D10 E8FA3B0000          <1>     call dosCrit1Exit
    38 00002D15 0F82AF000000        <1>     jc .exitBad
    39                              <1>     ;Now save variables
    40 00002D1B E8F5160000          <1>     call setCurrentSFT
    41 00002D20 66891D(2AC70300)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    42 00002D27 E863180000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    43 00002D2C 0F8298000000        <1>     jc .exitBad
    44 00002D32 66891D(2CC70300)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    45 00002D39 48893D(1AC70300)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    46 00002D40 0FB71D(2AC70300)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    47 00002D47 881F                <1>     mov byte [rdi], bl  ;And open the file
    48                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    49 00002D49 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    50 00002D4C 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
    51 00002D53 51                  <1>     push rcx    ;Save the procedure to call on stack
    52 00002D54 E899E2FFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    53 00002D59 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    54 00002D5A 488D05420B0000      <1>     lea rax, openMain   ;Get EA for open procedure
    55 00002D61 488B35(22C70300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    56 00002D68 7319                <1>     jnc .proceedCall
    57                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    58                              <1> ;                              For Create New, Bad but handled later.
    59                              <1> ;If CF=CY => Path doesnt all exist:
    60                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    61                              <1> ;Now we check if we are creating or opening.
    62 00002D6A 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    63 00002D6D 7409                <1>     je .badPathspec ;Jmp to error if opening file that doesnt exist
    64 00002D6F F605(F5C60300)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    65 00002D76 750B                <1>     jnz .proceedCall    ;If so, proceed.
    66                              <1> .badPathspec:
    67 00002D78 58                  <1>     pop rax
    68 00002D79 B802000000          <1>     mov eax, errFnf
    69 00002D7E E957000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    70                              <1> .proceedCall:
    71                              <1> ;If the pathspec exists, recall that for create, we truncate.
    72 00002D83 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
    73 00002D85 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    74 00002D88 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    75 00002D89 750B                <1>     jne .callProc   ;Jump if we are creating
    76                              <1>     ;al means openmode here
    77 00002D8B A880                <1>     test al, 80h    ;No Inherit bit set?
    78 00002D8D 7407                <1>     jz .callProc
    79 00002D8F 247F                <1>     and al, 7Fh     ;Clear this bit
    80 00002D91 B900100000          <1>     mov ecx, devNoInherit
    81                              <1> .callProc:
    82 00002D96 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
    83 00002D9C 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
    84 00002DA2 51                  <1>     push rcx    ;Save the device word 
    85 00002DA3 FFD3                <1>     call rbx    ;Enter with open mode in 
    86 00002DA5 59                  <1>     pop rcx
    87 00002DA6 488B35(22C70300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    88 00002DAD 722B                <1>     jc .exitBad2
    89 00002DAF 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
    90 00002DB4 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
    91 00002DB8 0FB705(2CC70300)    <1>     movzx eax, word [currentHdl]
    92 00002DBF FF15(14C10300)      <1>     call qword [closeDupFileShare]  ;Close Duplicate Handles if opened file! 
    93 00002DC5 E9783B0000          <1>     jmp extGoodExit ;Save ax and return OK
    94                              <1> .exitBad:
    95 00002DCA FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
    96 00002DCB 5B                  <1>     pop rbx ;Pop the word from the stack
    97 00002DCC 66C705(2AC70300)FF- <1>     mov word [currentNdx], -1
    97 00002DD4 FF                  <1>
    98 00002DD5 E9763B0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
    99                              <1> .exitBad2:
   100                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   101 00002DDA 488B35(1AC70300)    <1>     mov rsi, qword [curHdlPtr]
   102 00002DE1 C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   103 00002DE4 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
   104 00002DEB 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   105 00002DF0 66C705(2AC70300)FF- <1>     mov word [currentNdx], -1
   105 00002DF8 FF                  <1>
   106 00002DF9 E9523B0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   107                              <1> 
   108                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   109                              <1> ;Input: bx = file handle to close
   110 00002DFE E8A2170000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   111 00002E03 0F82473B0000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   112 00002E09 E807160000          <1>     call setCurrentSFT  ;Set this as the current SFT
   113                              <1>     ;Check count to see if we need to check share mode
   114 00002E0E 31C0                <1>     xor eax, eax    ;Preset ax to 0
   115 00002E10 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared, no need for share check
   116 00002E15 7406                <1>     je .skipShareCheck
   117                              <1>     ;Now check sharing mode
   118 00002E17 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   119 00002E1B 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   120                              <1> .skipShareCheck:
   121 00002E1D 50                  <1>     push rax    ;Save the share mode on stack
   122 00002E1E E8470E0000          <1>     call closeMain  ;Call close main!
   123 00002E23 58                  <1>     pop rax 
   124 00002E24 0F82263B0000        <1>     jc extErrExit   ;If an error, exit through error exit
   125 00002E2A 3C70                <1>     cmp al, netFCBShare ;Do NetFCB check (only if file opened more than once)
   126 00002E2C 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
   127 00002E2E E83E170000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
   128 00002E33 C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
   129                              <1> .exitOk:
   130 00002E36 31C0                <1>     xor eax, eax    ;Return value
   131 00002E38 E9053B0000          <1>     jmp extGoodExit
   132                              <1> 
   133                              <1> readFileHdl:       ;ah = 3Fh, handle function
   134 00002E3D 488D35A30E0000      <1>     lea rsi, readBytes
   135                              <1> .common:
   136 00002E44 E85C170000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   137 00002E49 0F82013B0000        <1>     jc extErrExit   ;Error code in al and exit
   138 00002E4F E8C1150000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   139 00002E54 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   140 00002E56 FF35(0CC40300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   141 00002E5C 488915(0CC40300)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   142 00002E63 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   143 00002E65 8F05(0CC40300)      <1>     pop qword [currentDTA]
   144 00002E6B 0F82DF3A0000        <1>     jc extErrExit   ;Error code in al and exit
   145 00002E71 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   146 00002E73 E9C13A0000          <1>     jmp extGoodExit2    ;and exit!
   147                              <1> 
   148                              <1> writeFileHdl:      ;ah = 40h, handle function
   149 00002E78 488D35A0110000      <1>     lea rsi, writeBytes
   150 00002E7F E9C0FFFFFF          <1>     jmp readFileHdl.common
   151                              <1> 
   152                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   153                              <1> ;Here don't allow malformed chars unless it is a network CDS
   154 00002E84 BB06000000          <1>     mov ebx, dirIncFiles    ;Inclusive w/o dirs
   155 00002E89 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   156 00002E90 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   157 00002E93 880D(ECC60300)      <1>     mov byte [searchAttr], cl
   158 00002E99 4889D6              <1>     mov rsi, rdx
   159 00002E9C E8CB370000          <1>     call checkPathspecOK
   160 00002EA1 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   161 00002EA3 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   162                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   163 00002EA5 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   164 00002EAC 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   165                              <1> .badPath:
   166 00002EAE B803000000          <1>     mov eax, errPnf
   167 00002EB3 E9983A0000          <1>     jmp extErrExit
   168                              <1> .pathOk:
   169 00002EB8 488D3D(12C50300)    <1>     lea rdi, buffer1
   170 00002EBF 52                  <1>     push rdx
   171 00002EC0 E82DE1FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   172 00002EC5 5A                  <1>     pop rdx
   173 00002EC6 0F82843A0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   174                              <1>     ;In the case of a wildcard, recall this will return the first file
   175 00002ECC 803D(F4C60300)FF    <1>     cmp byte [fileExist], -1
   176 00002ED3 0F85773A0000        <1>     jnz extErrExit
   177 00002ED9 E800090000          <1>     call outerDeleteMain
   178 00002EDE 0F826C3A0000        <1>     jc extErrExit
   179 00002EE4 E9593A0000          <1>     jmp extGoodExit
   180                              <1> 
   181                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   182                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   183 00002EE9 E8B7160000          <1>     call getSFTPtr
   184 00002EEE 0F825C3A0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   185 00002EF4 3C03                <1>     cmp al, 3
   186 00002EF6 720A                <1>     jb .validFunction
   187 00002EF8 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   188 00002EFD E94E3A0000          <1>     jmp extErrExit
   189                              <1> .validFunction:
   190 00002F02 3C01                <1>     cmp al, 1
   191 00002F04 7718                <1>     ja .seekend
   192 00002F06 7203                <1>     jb .seekset
   193                              <1> ;Here we are at seekcur, seek from current (signed)
   194 00002F08 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   195                              <1> .seekset:
   196                              <1> ;Seek from the start (unsigned)
   197 00002F0B 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   198 00002F0E E897350000          <1>     call getUserRegs    ;Get user regs in rsi
   199 00002F13 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   200                              <1> .seekExit:
   201 00002F16 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   202 00002F19 E91B3A0000          <1>     jmp extGoodExit2    ;Return OK in eax 
   203                              <1> .seekend:
   204                              <1> ;Here we are at seekend, seek from end (signed)
   205 00002F1E 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   206 00002F24 7505                <1>     jnz .netCheck
   207                              <1> .proceedDisk:
   208 00002F26 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   209 00002F29 EBE0                <1>     jmp short .seekset
   210                              <1> .netCheck:
   211 00002F2B 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   212 00002F31 75F3                <1>     jnz .proceedDisk
   213 00002F33 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   214                              <1>     ;Check it's share mode
   215 00002F37 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   216 00002F3C 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   217 00002F41 7407                <1>     je .netSeek
   218 00002F43 3D30000000          <1>     cmp eax, denyReadShare
   219 00002F48 75DC                <1>     jne .proceedDisk
   220                              <1> .netSeek:
   221 00002F4A B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   222 00002F4F CD4F                <1>     int 4Fh
   223 00002F51 73C3                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   224 00002F53 E9F8390000          <1>     jmp extErrExit
   225                              <1> 
   226                              <1> 
   227                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   228 00002F58 3C01                <1>     cmp al, 1
   229 00002F5A 761F                <1>     jbe .subFuncOk
   230 00002F5C B801000000          <1>     mov eax, errInvFnc
   231                              <1> .chmodError:
   232                              <1> ;Call with ax = errorcode
   233 00002F61 C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   234 00002F68 C605(03C40300)07    <1>     mov byte [errorClass], eClsAppFlt
   235 00002F6F C605(02C40300)07    <1>     mov byte [errorAction], eActRetUsr
   236 00002F76 E9D5390000          <1>     jmp extErrExit
   237                              <1> .subFuncOk:
   238 00002F7B 4889D6              <1>     mov rsi, rdx
   239 00002F7E 89C3                <1>     mov ebx, eax    ;Store function code in bl
   240 00002F80 53                  <1>     push rbx
   241 00002F81 51                  <1>     push rcx
   242 00002F82 E8E5360000          <1>     call checkPathspecOK
   243 00002F87 7309                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   244                              <1> .badPath:
   245 00002F89 59                  <1>     pop rcx
   246 00002F8A 5B                  <1>     pop rbx
   247 00002F8B B803000000          <1>     mov eax, errPnf
   248 00002F90 EBCF                <1>     jmp short .chmodError
   249                              <1> .pathOk:
   250 00002F92 E8BB370000          <1>     call checkPathNet 
   251 00002F97 74F0                <1>     jz .badPath ;Or Net paths
   252 00002F99 E860370000          <1>     call scanPathWC
   253 00002F9E 72E9                <1>     jc .badPath ;Dont allow wildcards
   254 00002FA0 488D3D(12C50300)    <1>     lea rdi, buffer1
   255 00002FA7 52                  <1>     push rdx
   256 00002FA8 C605(ECC60300)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   257 00002FAF E83EE0FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   258 00002FB4 5A                  <1>     pop rdx
   259 00002FB5 59                  <1>     pop rcx
   260 00002FB6 5B                  <1>     pop rbx
   261 00002FB7 0F8293390000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   262                              <1>     ;In the case of a wildcard, recall this will return the first file
   263 00002FBD 803D(F4C60300)FF    <1>     cmp byte [fileExist], -1
   264 00002FC4 759B                <1>     jnz .chmodError
   265                              <1> 
   266 00002FC6 E872340000          <1>     call testCDSNet
   267 00002FCB 730C                <1>     jnc .notNet
   268 00002FCD 750A                <1>     jnz .notNet ;This type of net ok
   269 00002FCF B805000000          <1>     mov eax, errAccDen
   270 00002FD4 E977390000          <1>     jmp extErrExit
   271                              <1> .notNet:
   272 00002FD9 84DB                <1>     test bl, bl
   273 00002FDB 7526                <1>     jnz .setAttribs
   274                              <1>     ;Get attribs here
   275 00002FDD 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   276 00002FE3 7412                <1>     jz .getDiskAttribs
   277 00002FE5 B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   278 00002FEA CD4F                <1>     int 4Fh
   279 00002FEC 0F825E390000        <1>     jc extErrExit
   280 00002FF2 E94B390000          <1>     jmp extGoodExit
   281                              <1> .getDiskAttribs:
   282 00002FF7 0FB605(59C60300)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   283 00002FFE E93F390000          <1>     jmp extGoodExit
   284                              <1> 
   285                              <1> .setAttribs:
   286                              <1>     ;Set attribs here
   287 00003003 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   288 00003009 7417                <1>     jz .setDiskAttribs
   289 0000300B 0FB7C9              <1>     movzx ecx, cx
   290 0000300E 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   291 0000300F B80E110000          <1>     mov eax, 110Eh
   292 00003014 CD4F                <1>     int 4Fh
   293 00003016 59                  <1>     pop rcx
   294 00003017 0F8233390000        <1>     jc extErrExit
   295 0000301D E920390000          <1>     jmp extGoodExit
   296                              <1> .setDiskAttribs:
   297 00003022 E843070000          <1>     call checkNoOpenHandlesForShareAction
   298 00003027 730A                <1>     jnc .okToSet
   299 00003029 B820000000          <1>     mov eax, errShrVio
   300 0000302E E91D390000          <1>     jmp extErrExit
   301                              <1> .okToSet:
   302 00003033 E8C7EAFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   303 00003038 0F8212390000        <1>     jc extErrExit
   304 0000303E F6C118              <1>     test cl, dirVolumeID | dirDirectory
   305 00003041 740A                <1>     jz .set
   306 00003043 B805000000          <1>     mov eax, errAccDen
   307 00003048 E903390000          <1>     jmp extErrExit
   308                              <1> .set:
   309 0000304D 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   310 00003050 80E518              <1>     and ch, (dirVolumeID | dirDirectory)    ;Keep these two bits
   311 00003053 08E9                <1>     or cl, ch
   312 00003055 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   313 00003058 E8F2D4FFFF          <1>     call writeThroughBuffers
   314 0000305D 7207                <1>     jc .setError
   315 0000305F 31C0                <1>     xor eax, eax
   316 00003061 E9DC380000          <1>     jmp extGoodExit
   317                              <1> .setError:
   318 00003066 E8C2D4FFFF          <1>     call cancelWriteThroughBuffers
   319 0000306B E9E0380000          <1>     jmp extErrExit
   320                              <1> 
   321                              <1> duplicateHandle:   ;ah = 45h, handle function
   322                              <1> ;Input: bx = Handle to duplicate
   323                              <1> ;Output: If ok then ax = New handle
   324 00003070 0FB7C3              <1>     movzx eax, bx    ;Move handle to ax
   325 00003073 E817150000          <1>     call findFreeJFTEntry    ;First find a free space in the JFT in rdi
   326                              <1> .duplicateCommon:
   327 00003078 0F82D2380000        <1>     jc extErrExit   ;Exit if no space
   328 0000307E 4889FE              <1>     mov rsi, rdi    ;Save the free space in rsi
   329 00003081 93                  <1>     xchg eax, ebx
   330 00003082 E81E150000          <1>     call getSFTPtr    ;Get the pointer to the SFT in rdi
   331 00003087 0F82C3380000        <1>     jc extErrExit
   332 0000308D 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   333 00003090 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   334 00003096 7505                <1>     jnz .netFile
   335 00003098 E898080000          <1>     call openDriverMux
   336                              <1> .netFile:
   337 0000309D E8CF140000          <1>     call getJFTPtr
   338 000030A2 8A1F                <1>     mov bl, byte [rdi]
   339 000030A4 881E                <1>     mov byte [rsi], bl
   340 000030A6 E997380000          <1>     jmp extGoodExit     ;Return handle in ax the entry in the JFT 
   341                              <1> 
   342                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   343                              <1> ;Input: bx = Handle to duplicate
   344                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   345                              <1>     ;First we close cx if it exists
   346 000030AB 0FB7C9              <1>     movzx ecx, cx
   347 000030AE 53                  <1>     push rbx
   348 000030AF 51                  <1>     push rcx
   349 000030B0 89CB                <1>     mov ebx, ecx
   350 000030B2 E847FDFFFF          <1>     call closeFileHdl   ;Close handle 
   351 000030B7 5B                  <1>     pop rbx
   352 000030B8 58                  <1>     pop rax
   353 000030B9 E8B3140000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   354 000030BE EBB8                <1>     jmp short duplicateHandle.duplicateCommon
   355                              <1> 
   356                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   357                              <1> ;Input: cx = Search Attributes, cl only used
   358                              <1> ;       rdx = Ptr to path to file to look for
   359                              <1> ;       al = Document as needing to be 0 for now
   360                              <1> ;Return:
   361                              <1> ;Data in the DTA or error through AX with CF=CY
   362                              <1> ;CAVEATS!
   363                              <1> ;DTA:attribFnd = 40h => Char dev
   364                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   365 000030C0 880D(ECC60300)      <1>     mov byte [searchAttr], cl
   366 000030C6 4889D6              <1>     mov rsi, rdx
   367 000030C9 E89E350000          <1>     call checkPathspecOK
   368 000030CE 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   369 000030D0 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   370                              <1> .badPath:
   371 000030D2 B803000000          <1>     mov eax, errPnf
   372 000030D7 E974380000          <1>     jmp extErrExit
   373                              <1> .pathspecOk:
   374 000030DC FF35(0CC40300)      <1>     push qword [currentDTA]
   375 000030E2 488D3D(23C60300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   376 000030E9 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi
   377 000030F0 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   378 000030F7 E8F6DEFFFF          <1>     call getFilePath
   379                              <1> .findfileExit:
   380 000030FC 8F05(0CC40300)      <1>     pop qword [currentDTA]
   381 00003102 0F8248380000        <1>     jc extErrExit
   382 00003108 488D3D(23C60300)    <1>     lea rdi, dosffblock
   383 0000310F 57                  <1>     push rdi
   384 00003110 E8FCDDFFFF          <1>     call setupFFBlock
   385 00003115 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   386 00003116 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA]
   387 0000311D B92B000000          <1>     mov ecx, ffBlock_size
   388 00003122 F3A4                <1>     rep movsb   ;Copy the whole block. 
   389                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   390 00003124 31C0                <1>     xor eax, eax    ;Return value
   391 00003126 E917380000          <1>     jmp extGoodExit ;Exit well
   392                              <1> 
   393                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   394                              <1> ;Input: DTA has the find first block from the previous search
   395 0000312B 488B35(0CC40300)    <1>     mov rsi, qword [currentDTA]
   396 00003132 488D3D(23C60300)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   397 00003139 B92B000000          <1>     mov ecx, ffBlock_size
   398 0000313E F3A4                <1>     rep movsb
   399 00003140 FF35(0CC40300)      <1>     push qword [currentDTA] ;Save the current DTA address
   400 00003146 488D3D(23C60300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   401 0000314D 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi
   402 00003154 E836DAFFFF          <1>     call findNextMain
   403 00003159 EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   404                              <1> 
   405                              <1> renameFile:        ;ah = 56h
   406                              <1> ;Input: rdx -> Filespec to rename
   407                              <1> ;       rdi -> New filespec
   408                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   409 0000315B 4889D6              <1>     mov rsi, rdx
   410 0000315E BB16000000          <1>     mov ebx, dirInclusive
   411 00003163 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   412 0000316A 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   413 0000316D 880D(ECC60300)      <1>     mov byte [searchAttr], cl
   414                              <1>     ;Step 0, verify both paths provided are valid
   415 00003173 E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   416 00003178 7249                <1>     jc .pnfError
   417 0000317A 56                  <1>     push rsi
   418 0000317B 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   419 0000317E E84A000000          <1>     call .renamePathCheck
   420 00003183 5E                  <1>     pop rsi
   421 00003184 723D                <1>     jc .pnfError
   422                              <1>     ;Now we canonicalise the filenames to make life easy
   423 00003186 56                  <1>     push rsi
   424 00003187 4889FE              <1>     mov rsi, rdi
   425 0000318A 488D3D(92C50300)    <1>     lea rdi, buffer2
   426 00003191 E811DEFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   427 00003196 5E                  <1>     pop rsi
   428 00003197 722A                <1>     jc .pnfError
   429                              <1>     ;Now test if first file exists.
   430 00003199 FF35(12C60300)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   431 0000319F 8F05(1AC60300)      <1>     pop qword [fname2Ptr]
   432 000031A5 488D3D(12C50300)    <1>     lea rdi, buffer1
   433 000031AC E8F6DDFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   434 000031B1 7210                <1>     jc .pnfError  
   435 000031B3 E829020000          <1>     call renameMain ;Both pathnames made good and copied internally, lets go!!
   436 000031B8 0F8292370000        <1>     jc extErrExit
   437 000031BE E97F370000          <1>     jmp extGoodExit
   438                              <1> .pnfError:
   439 000031C3 B803000000          <1>     mov eax, errPnf
   440 000031C8 E983370000          <1>     jmp extErrExit
   441                              <1> .renamePathCheck:
   442                              <1> ;Checks if the pathspec in rsi is OK
   443 000031CD 56                  <1>     push rsi
   444 000031CE 57                  <1>     push rdi
   445 000031CF E898340000          <1>     call checkPathspecOK
   446 000031D4 5F                  <1>     pop rdi
   447 000031D5 5E                  <1>     pop rsi
   448 000031D6 730D                <1>     jnc .pathOk     ;Path ok 
   449 000031D8 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   450                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   451 000031DA F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   452 000031E1 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   453                              <1> .badPath:
   454 000031E3 F9                  <1>     stc
   455                              <1>     return
    13                              <2> %%_ret:
    14 000031E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   456                              <1> .pathOk:
   457 000031E5 F8                  <1>     clc
   458                              <1>     return
    13                              <2> %%_ret:
    14 000031E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   459                              <1> 
   460                              <1> getSetFileDateTime:;ah = 57h
   461 000031E7 3C01                <1>     cmp al, 1
   462 000031E9 760A                <1>     jbe .oksubfun
   463 000031EB B801000000          <1>     mov eax, errInvFnc
   464 000031F0 E95B370000          <1>     jmp extErrExit
   465                              <1> .oksubfun:
   466 000031F5 E8AB130000          <1>     call getSFTPtr  ;Preserves al unless error returned
   467 000031FA 0F8250370000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   468 00003200 3C01                <1>     cmp al, 1
   469 00003202 741C                <1>     je .setTimeDate
   470                              <1>     ;Here we get the Time/Date
   471 00003204 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   472 00003208 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   473 0000320C E899320000          <1>     call getUserRegs
   474 00003211 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   475 00003215 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   476 00003219 31C0                <1>     xor eax, eax
   477 0000321B E922370000          <1>     jmp extGoodExit
   478                              <1> .setTimeDate:
   479                              <1>     ;Here we set the Time/Date
   480 00003220 66894F13            <1>     mov word [rdi + sft.wTime], cx
   481 00003224 66895715            <1>     mov word [rdi + sft.wDate], dx
   482 00003228 31C0                <1>     xor eax, eax
   483 0000322A E913370000          <1>     jmp extGoodExit
   484                              <1> 
   485                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   486                              <1> ;Uses the clock to do it's bidding
   487                              <1> ;cx = file attribute 
   488                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   489                              <1> ;       filename
   490 0000322F 66F7C1D8FF          <1>     test cx, ~(archiveFile | systemFile | hiddenFile | readOnlyFile)
   491 00003234 740A                <1>     jz .validAttribs
   492 00003236 B805000000          <1>     mov eax, errAccDen
   493 0000323B E910370000          <1>     jmp extErrExit
   494                              <1> .validAttribs:
   495 00003240 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   496 00003244 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   497 00003247 B933000000          <1>     mov ecx, 64-13  ;First null must be at furthest, this many chars from rdx
   498 0000324C 31C0                <1>     xor eax, eax
   499 0000324E 4889D7              <1>     mov rdi, rdx
   500 00003251 F3AE                <1>     rep scasb
   501 00003253 85C9                <1>     test ecx, ecx
   502 00003255 750A                <1>     jnz .nullFnd
   503                              <1>     ;Bad path
   504 00003257 B803000000          <1>     mov eax, errPnf
   505 0000325C E9EF360000          <1>     jmp extErrExit
   506                              <1> .nullFnd:
   507 00003261 48FFCF              <1>     dec rdi
   508 00003264 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   509 00003268 E857330000          <1>     call swapPathSeparator
   510 0000326D 7403                <1>     jz .pathsepFnd
   511                              <1>     ;If no pathsep found, force one at rdi
   512 0000326F B05C                <1>     mov al, "\"
   513 00003271 AA                  <1>     stosb
   514                              <1> .pathsepFnd:
   515 00003272 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   516                              <1> .fileCreateLoop:
   517 00003275 55                  <1>     push rbp
   518 00003276 E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   519 0000327B 5D                  <1>     pop rbp
   520 0000327C 0FB7C1              <1>     movzx eax, cx
   521 0000327F 0FB7D2              <1>     movzx edx, dx
   522 00003282 C1E010              <1>     shl eax, 10h
   523 00003285 09D0                <1>     or eax, edx  ;Add the bits of dx too
   524 00003287 E831000000          <1>     call .writeNybbles
   525 0000328C 31C0                <1>     xor eax, eax
   526 0000328E AA                  <1>     stosb   ;Store terminating null
   527 0000328F 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   528 00003292 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   529 00003295 55                  <1>     push rbp
   530 00003296 E85C000000          <1>     call createNewFile
   531 0000329B 5D                  <1>     pop rbp
   532 0000329C 0F83A0360000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   533 000032A2 0FB705(00C40300)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   534 000032A9 3D05000000          <1>     cmp eax, errAccDen
   535 000032AE 74C5                <1>     je .fileCreateLoop
   536 000032B0 3D50000000          <1>     cmp eax, errFilExist
   537 000032B5 74BE                <1>     je .fileCreateLoop
   538 000032B7 F9                  <1>     stc
   539 000032B8 E993360000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   540                              <1> .writeNybbles:
   541                              <1> ;Write the nybbles of eax at rdi
   542 000032BD B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   543                              <1> .wnLp:
   544 000032C2 C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   545 000032C5 50                  <1>     push rax
   546 000032C6 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   547 000032CB 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   548 000032D0 3D39000000          <1>     cmp eax, '9'
   549 000032D5 7605                <1>     jbe .notExtDigit
   550 000032D7 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   551                              <1> .notExtDigit:
   552 000032DC AA                  <1>     stosb   ;Store the digit
   553 000032DD 58                  <1>     pop rax
   554 000032DE FFC9                <1>     dec ecx
   555 000032E0 75E0                <1>     jnz .wnLp
   556                              <1>     return
    13                              <2> %%_ret:
    14 000032E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   557                              <1> 
   558                              <1> .uniqueTimeGet:
   559 000032E3 E827F4FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   560 000032E8 668B0D(0CC50300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   561 000032EF 668B15(0EC50300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   562                              <1>     return
    13                              <2> %%_ret:
    14 000032F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> createNewFile:     ;ah = 5Bh
   565 000032F7 51                  <1>     push rcx    ;Save file attributes on stack
   566 000032F8 488D0D8B060000      <1>     lea rcx, createNewMain
   567 000032FF C605(ECC60300)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
   568 00003306 E9E6F9FFFF          <1>     jmp openFileHdl.openCommon
   569                              <1> 
   570                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   571                              <1>     ;Input: bx = File to flush
   572 0000330B E895120000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   573 00003310 0F823A360000        <1>     jc extErrExit
   574 00003316 E8FA100000          <1>     call setCurrentSFT  ;Set as current SFT to ensure it is committed
   575                              <1>     ;Now we check if the device is a char, disk or net file and commit
   576 0000331B E882000000          <1>     call commitMain
   577 00003320 0F822A360000        <1>     jc extErrExit   ;If an error occured, exit with error code in al
   578                              <1> .exitOk:
   579 00003326 30C0                <1>     xor al, al
   580 00003328 E87D310000          <1>     call getUserRegs
   581 0000332D 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   582                              <1>     return
    13                              <2> %%_ret:
    14 00003330 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   583                              <1> 
   584                              <1> lockUnlockFile:    ;ah = 5Ch
   585                              <1> ;ah = 5Ch
   586                              <1> ;al = subfunction
   587                              <1> ;       00h lock region of file
   588                              <1> ;       01h unlock region of file
   589                              <1> ;ebx = file handle
   590                              <1> ;ecx = start offset of region within file
   591                              <1> ;edi = length of region in bytes
   592 00003331 3C01                <1>     cmp al, 1
   593 00003333 7757                <1>     ja .badFunction
   594 00003335 57                  <1>     push rdi
   595 00003336 E884120000          <1>     call derefSFTPtr
   596 0000333B 730B                <1>     jnc .validHdl
   597 0000333D 58                  <1>     pop rax ;Discard the qword on the stack
   598 0000333E B806000000          <1>     mov eax, errBadHdl
   599 00003343 E908360000          <1>     jmp extErrExit
   600                              <1> .validHdl:
   601 00003348 84C0                <1>     test al, al ;Check if al = 0
   602 0000334A 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   603 0000334B 7424                <1>     jz .lockFileRegion
   604 0000334D 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   605 00003353 740B                <1>     jz .unlockShare ;Jump if a local file only
   606 00003355 50                  <1>     push rax
   607 00003356 B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   608 0000335B CD4F                <1>     int 4Fh
   609 0000335D 5B                  <1>     pop rbx
   610 0000335E EB06                <1>     jmp short .exitSelect
   611                              <1> .unlockShare:
   612 00003360 FF15(ECC00300)      <1>     call qword [unlockFileShare]    ;Call share hook
   613                              <1> .exitSelect:
   614 00003366 0F82E4350000        <1>     jc extErrExit
   615 0000336C E9D1350000          <1>     jmp extGoodExit
   616                              <1> .lockFileRegion:
   617 00003371 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   618 00003377 740B                <1>     jz .lockShare   ;Jump if a local file only
   619 00003379 50                  <1>     push rax
   620 0000337A B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   621 0000337F CD4F                <1>     int 4Fh
   622 00003381 5B                  <1>     pop rbx
   623 00003382 EBE2                <1>     jmp short .exitSelect
   624                              <1> .lockShare:
   625 00003384 FF15(E4C00300)      <1>     call qword [lockFileShare]  ;Call share hook
   626 0000338A EBDA                <1>     jmp short .exitSelect
   627                              <1> .badFunction:
   628 0000338C B801000000          <1>     mov eax, errInvFnc
   629 00003391 668905(00C40300)    <1>     mov word [errorExCde], ax
   630 00003398 E9B3350000          <1>     jmp extErrExit
   631                              <1> ;STUB FUNCTIONS
   632                              <1> setHandleCount:    ;ah = 67h
   633 0000339D E9AE350000          <1>     jmp extErrExit
   634                              <1> 
   635                              <1> ;-----------------------------------:
   636                              <1> ;       Main File IO Routines       :
   637                              <1> ;-----------------------------------:
   638                              <1> commitMain:
   639                              <1> ;Commits the current SFT 
   640 000033A2 E876100000          <1>     call getCurrentSFT  ;Gets currentSFT into rdi
   641 000033A7 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   642 000033AB A9C0000000          <1>     test eax, devCharDev | blokFileNoFlush
   643                              <1>     retnz   ;Return if nothing has been written or a char dev
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000033B0 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000033B2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   644 000033B3 66A90080            <1>     test ax, devRedirDev
   645 000033B7 7508                <1>     jnz .notNet
   646                              <1>     ;Commit file net redir call and exit
   647 000033B9 B807110000          <1>     mov eax, 1107h
   648 000033BE CD4F                <1>     int 4Fh
   649                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 000033C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   650                              <1> .notNet:
   651 000033C1 E83F350000          <1>     call dosCrit1Enter
   652 000033C6 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   653 000033CA E866300000          <1>     call setWorkingDPB
   654 000033CF E8A5E7FFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   655 000033D4 7205                <1>     jc short .exit    ;Return in error if this fails, exit critical
   656 000033D6 E88AD3FFFF          <1>     call flushFile  ;Now the file gets flushed
   657                              <1> .exit:
   658                              <1> ;Propagate CF and AL if needed due to error
   659 000033DB E82F350000          <1>     call dosCrit1Exit
   660                              <1>     return
    13                              <2> %%_ret:
    14 000033E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   661                              <1> renameMain:
   662                              <1> ;Now, creates a special find first block for the source file
   663                              <1> ; that is in curDirCopy. Then we build a search pattern for the new name, 
   664                              <1> ; following wildcard rules sourcing from the filespec in the special find first 
   665                              <1> ; block. 
   666                              <1> ;Then we search for that file name specifically (again), replacing 
   667                              <1> ; the filename portion of the destination buffer. If it exists or the 
   668                              <1> ; filename is a char device, we crap out. If it doesnt exist, we create
   669                              <1> ; the new directory entry and delete the original file. 
   670                              <1> ;Input:
   671                              <1> ; filenamePtr1 -> Source path + filename pattern
   672                              <1> ; filenamePtr2 -> New path + filename pattern
   673                              <1> ; workingCDS -> CDS for drive we are considering (set by )
   674 000033E1 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   675 000033E8 E850300000          <1>     call testCDSNet ;CF=NC => Not net
   676 000033ED 7308                <1>     jnc .notNet
   677 000033EF B811110000          <1>     mov eax, 1111h
   678 000033F4 CD4F                <1>     int 4Fh
   679                              <1>     return
    13                              <2> %%_ret:
    14 000033F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   680                              <1> .notNet:
   681                              <1> ;First check if both drives are on the same disk
   682 000033F7 8A05(12C50300)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
   683 000033FD 8A25(92C50300)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
   684 00003403 38E0                <1>     cmp al, ah
   685 00003405 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
   686 00003407 B811000000          <1>     mov eax, errDevUnk
   687 0000340C F9                  <1>     stc
   688                              <1>     return
    13                              <2> %%_ret:
    14 0000340D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   689                              <1> .sameDrive:
   690                              <1> ;Now we check if either pathsepc is simply X:\,0
   691                              <1> ; If they are, return fail as we cannot rename the root dir
   692 0000340E E8F2340000          <1>     call dosCrit1Enter
   693 00003413 8B05(12C50300)      <1>     mov eax, dword [buffer1]
   694 00003419 30C0                <1>     xor al, al
   695 0000341B 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
   696 00003420 750B                <1>     jne .checkpath2
   697                              <1> .accDen:
   698 00003422 B805000000          <1>     mov eax, errAccDen
   699                              <1> .errorExit:
   700 00003427 F9                  <1>     stc
   701 00003428 E9ED020000          <1>     jmp .exit2
   702                              <1> .checkpath2:
   703 0000342D 8B05(92C50300)      <1>     mov eax, dword [buffer2]
   704 00003433 30C0                <1>     xor al, al
   705 00003435 3D003A5C00          <1>     cmp eax, 005C3A00h
   706 0000343A 74E6                <1>     je .accDen  ;If this is the root, exit access denied
   707                              <1> ;Now we find first the source file
   708 0000343C 488B35(12C60300)    <1>     mov rsi, qword [fname1Ptr]
   709 00003443 4889F7              <1>     mov rdi, rsi
   710 00003446 C605(ECC60300)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   711 0000344D E895DBFFFF          <1>     call getFilePathNoCanon    ;Get the path for the file to delete
   712 00003452 0F82C2020000        <1>     jc .exit2    ;Return with CF=CY if file doesn't exist
   713 00003458 488D35(4EC60300)    <1>     lea rsi, curDirCopy
   714 0000345F 488D3D(B2C70300)    <1>     lea rdi, renameDir
   715 00003466 B904000000          <1>     mov ecx, fatDirEntry_size/8
   716 0000346B F348A5              <1>     rep movsq   ;Copy directory over
   717 0000346E 488D3D(87C70300)    <1>     lea rdi, renameFFBlk
   718 00003475 E897DAFFFF          <1>     call setupFFBlock   ;Need this to save the dir entry cluster/sector/offset 
   719                              <1>     ;Now we check this path, if it is a DIR, ensure it is not the current
   720                              <1>     ; dir for any CDS.
   721 0000347A F605(59C60300)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
   722 00003481 7543                <1>     jnz .notDirCheck
   723 00003483 488B3D(12C60300)    <1>     mov rdi, qword [fname1Ptr]
   724 0000348A 57                  <1>     push rdi
   725 0000348B E872310000          <1>     call strlen ;Get asciiz length in ecx
   726 00003490 5B                  <1>     pop rbx
   727 00003491 FFC9                <1>     dec ecx ;Get one less char to check, we check the last one manually
   728 00003493 488B35(6BC00300)    <1>     mov rsi, qword [cdsHeadPtr]
   729 0000349A 0FB615(7EC00300)    <1>     movzx edx, byte [lastdrvNum]
   730                              <1> .dirCheck:
   731 000034A1 4889DF              <1>     mov rdi, rbx
   732 000034A4 56                  <1>     push rsi    ;Save rsi pointing to the start of the CDS
   733 000034A5 F3A6                <1>     repe cmpsb  ;Compare while they are equal
   734 000034A7 AC                  <1>     lodsb   ;Get the last char to check in al
   735 000034A8 5E                  <1>     pop rsi ;Put rsi back to the start of the string
   736 000034A9 7510                <1>     jne .neqDir
   737 000034AB 3C5C                <1>     cmp al, "\" ;Check the last char manually for pathend
   738 000034AD 0F846FFFFFFF        <1>     je .accDen
   739 000034B3 84C0                <1>     test al, al
   740 000034B5 0F8467FFFFFF        <1>     je .accDen
   741                              <1> .neqDir:
   742 000034BB 4881C65B000000      <1>     add rsi, cds_size   ;Goto next CDS
   743 000034C2 FFCA                <1>     dec edx
   744 000034C4 75DB                <1>     jnz .dirCheck
   745                              <1> .notDirCheck:
   746                              <1>     ;Now use FFBlock to temp swap out the filename with the source pattern
   747 000034C6 B9FFFFFFFF          <1>     mov ecx, -1    ;Just a large number to search
   748 000034CB 31C0                <1>     xor eax, eax
   749 000034CD 488B3D(12C60300)    <1>     mov rdi, qword [fname1Ptr]
   750 000034D4 F2AE                <1>     repne scasb   ;Search for terminating null
   751 000034D6 FD                  <1>     std ;Go backwards now, to find the path sep
   752 000034D7 B05C                <1>     mov al, "\"
   753 000034D9 F2AE                <1>     repne scasb   ;Now rsi points one before
   754 000034DB FC                  <1>     cld ;Go normal ways now
   755 000034DC 4881C702000000      <1>     add rdi, 2  ;Goto first char of pathname
   756 000034E3 57                  <1>     push rdi
   757 000034E4 4889FE              <1>     mov rsi, rdi
   758 000034E7 488D3D(D5C60300)    <1>     lea rdi, wcdFcbName
   759 000034EE E896D9FFFF          <1>     call asciiToFCB ;Copy the search pattern to wcdFcbName
   760 000034F3 5F                  <1>     pop rdi
   761 000034F4 57                  <1>     push rdi    ;Save rdi on stack again
   762 000034F5 488D35(A5C70300)    <1>     lea rsi, qword [renameFFBlk + ffBlock.asciizName]
   763                              <1>     ;Copy the asciiz name (including terminating null) to pathspec
   764 000034FC 48A5                <1>     movsq
   765 000034FE A5                  <1>     movsd
   766 000034FF A4                  <1>     movsb   ;This is a terminating null if a full 8.3 filename
   767 00003500 5F                  <1>     pop rdi ;rdi points to first char position
   768 00003501 E864020000          <1>     call checkNoOpenHandlesForShareAction   ;Now do this, all regs saved!
   769 00003506 0F821BFFFFFF        <1>     jc .errorExit   ;Propagate the share error code
   770                              <1>     ;Else return the pattern back to its original position
   771 0000350C 488D35(D5C60300)    <1>     lea rsi, wcdFcbName ;rsi -> FCBified pattern, rdi -> First char for name
   772 00003513 E8B9D9FFFF          <1>     call FCBToAsciiz
   773                              <1>     ;Delete the original directory entry
   774 00003518 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift] 
   775 0000351C FFC1                <1>     inc ecx ;Get sectors/cluster in ecx
   776 0000351E 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   777 00003522 F7E1                <1>     mul ecx ;Get bytes per cluster in eax
   778 00003524 8B0D(94C70300)      <1>     mov ecx, dword [renameFFBlk + ffBlock.dirOffset] ;32 byte offset in cluster
   779 0000352A C1E105              <1>     shl ecx, 5  ;Get byte offset in cluster
   780 0000352D 91                  <1>     xchg ecx, eax
   781 0000352E F7F1                <1>     div ecx ;Get Sector in cluster in eax and sector offset in edx
   782 00003530 89C3                <1>     mov ebx, eax
   783 00003532 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get the current dir cluster, not start cluster
   784 00003538 E8EAD2FFFF          <1>     call getStartSectorOfCluster    ;Cluster number in eax, sector in rax
   785 0000353D 4801D8              <1>     add rax, rbx    ;Goto the sector for the cluster
   786 00003540 E8C7D1FFFF          <1>     call getBufForDirNoFile ;Get buffer pointer in rbx
   787 00003545 0F82DA010000        <1>     jc .badExit
   788 0000354B 488D741330          <1>     lea rsi, qword [rbx + bufferHdr.dataarea + rdx] ;Goto byte offset in sector
   789                              <1>     ;rsi points to the file entry
   790 00003550 8A05(F8C60300)      <1>     mov al, byte [delChar]
   791 00003556 8806                <1>     mov byte [rsi], al
   792 00003558 E824D0FFFF          <1>     call markBufferDirty    ;Set this buffer as having been written to now
   793                              <1> 
   794                              <1>     ;Now we use the destination filename pattern to build the new filename
   795 0000355D 488B3D(1AC60300)    <1>     mov rdi, qword [fname2Ptr]  ;Get the destination path ptr in rdi
   796 00003564 31C0                <1>     xor eax, eax
   797 00003566 B943000000          <1>     mov ecx, 67
   798 0000356B F2AE                <1>     repne scasb   ;Find the null terminator of the destination path
   799                              <1> .findPattern:
   800 0000356D 48FFCF              <1>     dec rdi
   801 00003570 803F5C              <1>     cmp byte [rdi], "\" ;Is this a pathsep?
   802 00003573 75F8                <1>     jne .findPattern
   803                              <1> ;rdi points to the pathseparator, unless it is the root pathsep
   804 00003575 C605(EEC60300)00    <1>     mov byte [fileFDflg], 0 ;Clear this byte
   805 0000357C 807FFF3A            <1>     cmp byte [rdi - 1], ":"
   806 00003580 750D                <1>     jne .notRoot
   807                              <1>     ;The root dir always exists on a volume so can skip the check.
   808 00003582 48FFC7              <1>     inc rdi ;Goto the first char of the filename
   809 00003585 57                  <1>     push rdi
   810 00003586 800D(EEC60300)02    <1>     or byte [fileFDflg], 2  ;Bit 2 means ROOT DIR FILE
   811 0000358D EB29                <1>     jmp short .skipCheck
   812                              <1> .notRoot:
   813 0000358F AA                  <1>     stosb   ;Store a null over the "\" and inc rdi to char one of pattern
   814 00003590 57                  <1>     push rdi    ;Push the new name pattern portion ptr in var
   815                              <1>     ;Now check if the parent directory exists for the destination
   816 00003591 57                  <1>     push rdi    ;Save the ptr to the first char of the pathsep
   817 00003592 FF35(12C60300)      <1>     push qword [fname1Ptr]  ;Preserve original source buffer
   818 00003598 488D35(92C50300)    <1>     lea rsi, buffer2
   819 0000359F 4889F7              <1>     mov rdi, rsi
   820 000035A2 E839DAFFFF          <1>     call getDirPathNoCanon ;We are searching for a directory ONLY
   821 000035A7 8F05(12C60300)      <1>     pop qword [fname1Ptr]
   822 000035AD 5F                  <1>     pop rdi
   823 000035AE 0F8271010000        <1>     jc .badExit    ;Error if the parent dir doesnt exist
   824 000035B4 C647FF5C            <1>     mov byte [rdi - 1], "\" ;Replace the pathseparator
   825                              <1> .skipCheck:
   826                              <1>     ;rdi now points to the first char of the pattern
   827 000035B8 4889FE              <1>     mov rsi, rdi
   828 000035BB 488D3D(D5C60300)    <1>     lea rdi, wcdFcbName
   829 000035C2 E8C2D8FFFF          <1>     call asciiToFCB ;Convert the asciiz name to FCB format
   830                              <1>     ;Ensure the destination pattern is not all question marks
   831 000035C7 813D(D5C60300)3F3F- <1>     cmp dword [wcdFcbName], "????"
   831 000035CF 3F3F                <1>
   832 000035D1 7524                <1>     jne .validRenPattern
   833 000035D3 813D(D9C60300)3F3F- <1>     cmp dword [wcdFcbName + 4], "????"
   833 000035DB 3F3F                <1>
   834 000035DD 7518                <1>     jne .validRenPattern
   835 000035DF 66813D(DDC60300)3F- <1>     cmp word [wcdFcbName + 8], "??"
   835 000035E7 3F                  <1>
   836 000035E8 750D                <1>     jne .validRenPattern
   837 000035EA 803D(DFC60300)3F    <1>     cmp byte [wcdFcbName + 10], "?"
   838 000035F1 0F8429010000        <1>     je .bad ;Access denied buddy ol' pal
   839                              <1> .validRenPattern:
   840                              <1>     ;curDirCopy has information for the destination directory file we will 
   841                              <1>     ; write to. The cluster points to the directory file itself to search in
   842                              <1>     ;Each filename we create must be searched for to ensure it doesnt exist
   843                              <1>     ;Make new fname in fcbName from asciizname in renameDir
   844 000035F7 488D35(B2C70300)    <1>     lea rsi, renameDir  ;Copy the source filename over
   845 000035FE 488D3D(C9C60300)    <1>     lea rdi, fcbName
   846 00003605 57                  <1>     push rdi    ;Preserve this as the destination for copy
   847 00003606 B90B000000          <1>     mov ecx, 11
   848 0000360B F3A4                <1>     rep movsb
   849 0000360D 5F                  <1>     pop rdi
   850 0000360E 488D35(D5C60300)    <1>     lea rsi, wcdFcbName ;Now source the chars from here
   851                              <1> .mnnLp:
   852 00003615 AC                  <1>     lodsb
   853 00003616 3C3F                <1>     cmp al, "?" ;Is it a wc?
   854 00003618 7404                <1>     je .mnnWC   ;Skip overriding this char
   855 0000361A AA                  <1>     stosb   ;Store new char and go forwards by one
   856 0000361B 48FFCF              <1>     dec rdi ;Now go back by one
   857                              <1> .mnnWC:
   858 0000361E 48FFC7              <1>     inc rdi ;Goto next letter
   859 00003621 FFC1                <1>     inc ecx
   860 00003623 81F90B000000        <1>     cmp ecx, 11
   861 00003629 75EA                <1>     jne .mnnLp
   862 0000362B 488D35(C9C60300)    <1>     lea rsi, fcbName
   863 00003632 488D3D(B2C70300)    <1>     lea rdi, renameDir
   864 00003639 B90B000000          <1>     mov ecx, 11
   865 0000363E F3A4                <1>     rep movsb   ;Move the name over from fcbName to new dir entry name field
   866 00003640 5F                  <1>     pop rdi ;Get the first char of the filename place in destination pathspec
   867 00003641 57                  <1>     push rdi    ;Push it on stack again to be reused later if a WC spec
   868 00003642 488D35(C9C60300)    <1>     lea rsi, fcbName
   869 00003649 E883D8FFFF          <1>     call FCBToAsciiz    ;Copy the name over to asciiz 
   870 0000364E 488B35(1AC60300)    <1>     mov rsi, qword [fname2Ptr]
   871 00003655 4889F7              <1>     mov rdi, rsi
   872 00003658 E88AD9FFFF          <1>     call getFilePathNoCanon    ;This must be a non-existant file
   873 0000365D 0F83C2000000        <1>     jnc .badExit   ;If the file exists, then error
   874 00003663 3D02000000          <1>     cmp eax, errFnf ;If Fnf error then we may proceed
   875 00003668 0F85B7000000        <1>     jne .badExit
   876                              <1>     ;Now we search the parent dir (the curDirCopy dir) for free space
   877                              <1>     ;If the parent is root, deal with special case
   878 0000366E 488D1D(4EC60300)    <1>     lea rbx, curDirCopy
   879 00003675 F605(EEC60300)02    <1>     test byte [fileFDflg], 2
   880 0000367C C605(EEC60300)00    <1>     mov byte [fileFDflg], 0 ;Clear the flag again
   881 00003683 7416                <1>     jz .notRoot2
   882 00003685 488D35(C9C60300)    <1>     lea rsi, fcbName
   883 0000368C 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
   884 00003693 48A5                <1>     movsq
   885 00003695 A5                  <1>     movsd
   886 00003696 A4                  <1>     movsb
   887 00003697 31C0                <1>     xor eax, eax    ;Dir to search
   888 00003699 EB13                <1>     jmp short .getSpace
   889                              <1> .notRoot2:
   890 0000369B 0FB715(62C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   891 000036A2 0FB705(68C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   892 000036A9 C1E210              <1>     shl edx, 10h
   893 000036AC 09D0                <1>     or eax, edx ;Get first cluster of dir file in eax
   894                              <1> .getSpace:
   895 000036AE E87B000000          <1>     call .searchForDirSpace
   896 000036B3 726B                <1>     jc .bad
   897                              <1> ;dir Entry found, rsi points to space in buffer
   898 000036B5 4889F7              <1>     mov rdi, rsi
   899 000036B8 488D35(B2C70300)    <1>     lea rsi, renameDir
   900 000036BF B904000000          <1>     mov ecx, fatDirEntry_size/8
   901 000036C4 F348A5              <1>     rep movsq   ;Copy dir over
   902 000036C7 E8B5CEFFFF          <1>     call markBufferDirty ;Mark buffer as written to now
   903                              <1>     ;Now we check if source filename or wcdFcbname has a wildcard
   904                              <1>     ;If it does, we find next. If not, we exit
   905 000036CC B03F                <1>     mov al, "?"
   906 000036CE 488B3D(12C60300)    <1>     mov rdi, qword [fname1Ptr]  ;Check filename
   907 000036D5 E8282F0000          <1>     call strlen ;Get in rcx to get the length of the string
   908 000036DA F2AE                <1>     repne scasb
   909 000036DC 7534                <1>     jne .exit  ;If source name has no wildcards, exit
   910 000036DE B90B000000          <1>     mov ecx, 11
   911 000036E3 8D3D(D5C60300)      <1>     lea edi, wcdFcbName
   912 000036E9 F2AE                <1>     repne scasb
   913 000036EB 7525                <1>     jne .exit
   914                              <1>     ;Here we gotta do a find next now!
   915 000036ED FF35(0CC40300)      <1>     push qword [currentDTA]
   916 000036F3 488D3D(87C70300)    <1>     lea rdi, renameFFBlk
   917 000036FA 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi ;Set renameFFBlk as currentDTA for operation
   918 00003701 E889D4FFFF          <1>     call findNextMain
   919 00003706 8F05(0CC40300)      <1>     pop qword [currentDTA]
   920 0000370C 0F83E5FEFFFF        <1>     jnc .validRenPattern    ;If this is ok, now find next file
   921                              <1>     ;Else propagate the CF if this ends with an error (inc no more files)
   922                              <1> .exit:
   923 00003712 5F                  <1>     pop rdi ;Pop the ptr to the dest pathspec ptr off stack
   924 00003713 E837CEFFFF          <1>     call writeThroughBuffers
   925 00003718 720B                <1>     jc .badExit
   926                              <1> .exit2: ;Bad exit before we push qword on stack 
   927 0000371A E8F0310000          <1>     call dosCrit1Exit
   928                              <1>     return
    13                              <2> %%_ret:
    14 0000371F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   929                              <1> .bad:
   930 00003720 B805000000          <1>     mov eax, errAccDen  ;Temp return code
   931                              <1> .badExit:
   932 00003725 E803CEFFFF          <1>     call cancelWriteThroughBuffers
   933 0000372A F9                  <1>     stc
   934 0000372B 5F                  <1>     pop rdi
   935 0000372C EBEC                <1>     jmp short .exit2
   936                              <1> 
   937                              <1> .searchForDirSpace:
   938                              <1> ;Input: eax = First directory to search 
   939 0000372E 8905(74C70300)      <1>     mov dword [dirClustA], eax
   940 00003734 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
   941 00003736 668905(78C70300)    <1>     mov word [dirSect], ax
   942 0000373D 8905(7AC70300)      <1>     mov dword [dirEntry], eax
   943 00003743 E8A4E3FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
   944 00003748 731C                <1>     jnc .dirEntryFnd
   945 0000374A 813D(70C70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
   945 00003752 0000                <1>
   946 00003754 7412                <1>     je .searchBad ;Set CF and exit
   947 00003756 E8DBE4FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
   948 0000375B 720B                <1>     jc .searchBad
   949 0000375D 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
   950 00003762 7404                <1>     je .searchBad
   951                              <1>     ;Else eax = Newly allocated cluster
   952 00003764 EBC8                <1>     jmp short .searchForDirSpace
   953                              <1> .dirEntryFnd:
   954 00003766 F8                  <1>     clc
   955                              <1>     return
    13                              <2> %%_ret:
    14 00003767 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   956                              <1> .searchBad:
   957 00003768 F9                  <1>     stc
   958                              <1>     return
    13                              <2> %%_ret:
    14 00003769 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   959                              <1> 
   960                              <1> 
   961                              <1> checkNoOpenHandlesForShareAction:
   962                              <1> ;We check that we can proceed. This function will fail IF there are handles
   963                              <1> ; open, and thus makes it an ideal candidate for checking in RENAME, for 
   964                              <1> ; both filenames, DELETE and SETFILEATTRIBS if we have any open files. If we
   965                              <1> ; do, then we should get a Share error and thus it would prevent us from 
   966                              <1> ; proceeding.
   967                              <1> ;
   968                              <1> ;If SHARE not loaded, ALL handles must be closed before Rename or Delete.
   969                              <1> ;Input: SDA fname1Ptr -> Filename we want to consider
   970                              <1> ;       currDirCopy = Directory entry for the file
   971 0000376A E87F310000          <1>     call dosPushRegs    ;Save the context completely
   972 0000376F 803D(B4C00300)00    <1>     cmp byte [openFileCheck], 0 ;Some 16-bit SHAREs set the marker to 0.
   973 00003776 740C                <1>     jz .noOpenFileCheckHandler
   974 00003778 FF15(B4C00300)      <1>     call qword [openFileCheck]
   975 0000377E 7204                <1>     jc .noOpenFileCheckHandler  ;If CF=CY, this function not defined
   976 00003780 7449                <1>     jz .exit    ;If CF=NC && ZF=ZE, Function defined and No open files, proceed.
   977 00003782 EB4E                <1>     jmp short .errorMain    ;If ZF=NZ -> Have some open files, error out!
   978                              <1> .noOpenFileCheckHandler:
   979                              <1>     ;The following closes most recent shared handles referencing it
   980                              <1>     ;Only if sharePSP, shareMachineNumber are equal and openMode not Compat
   981                              <1>     ; mode and if there is precisely 1  
   982 00003784 FF15(1CC10300)      <1>     call qword [closeNewHdlShare]    
   983                              <1>     ;The close of the handle will only happen if there is 1 file referring to it
   984 0000378A 488D3D(08CD0300)    <1>     lea rdi, scratchSFT
   985 00003791 48893D(22C70300)    <1>     mov qword [currentSFT], rdi
   986 00003798 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
   987 0000379D C605(F7C60300)00    <1>     mov byte [openCreate], 0    ;Make sure we are just opening the file
   988                              <1>     ;This is to avoid needing to put the file attributes on the stack
   989 000037A4 57                  <1>     push rdi
   990 000037A5 E884020000          <1>     call buildSFTEntry
   991 000037AA 5F                  <1>     pop rdi
   992 000037AB 7225                <1>     jc .errorMain
   993 000037AD 66C7070100          <1>     mov word [rdi + sft.wNumHandles], 1   ;One "reference"
   994 000037B2 66C747021000        <1>     mov word [rdi + sft.wOpenMode], denyRWShare ;Prevent everything temporarily
   995 000037B8 57                  <1>     push rdi
   996 000037B9 E8A8380000          <1>     call shareFile
   997 000037BE 5F                  <1>     pop rdi
   998 000037BF 7211                <1>     jc .errorMain
   999 000037C1 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0
  1000 000037C6 E832380000          <1>     call closeShareCallWrapper
  1001                              <1> .exit:
  1002 000037CB E807310000          <1>     call dosPopRegs
  1003 000037D0 F8                  <1>     clc
  1004                              <1>     return
    13                              <2> %%_ret:
    14 000037D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1005                              <1> .errorMain:
  1006 000037D2 E800310000          <1>     call dosPopRegs
  1007 000037D7 B820000000          <1>     mov eax, errShrVio  ;Share issue so return failed with share
  1008 000037DC F9                  <1>     stc
  1009                              <1>     return
    13                              <2> %%_ret:
    14 000037DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1010                              <1> 
  1011                              <1> outerDeleteMain:
  1012                              <1> ;Internal current dir must be populated with dir entry
  1013                              <1> ; and internal DOS directory variables now point to this entry.
  1014                              <1> ;Checks if the file is a char device or read only.
  1015                              <1> ;Input: curDirCopy must has dir for the file to be deleted
  1016                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
  1017                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
  1018                              <1> ;         CF=NC => File deleted
  1019 000037DE 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
  1020 000037E5 E8532C0000          <1>     call testCDSNet ;CF=NC => Not net
  1021 000037EA 7308                <1>     jnc .notNet
  1022 000037EC B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
  1023 000037F1 CD4F                <1>     int 4Fh
  1024                              <1>     return
    13                              <2> %%_ret:
    14 000037F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1025                              <1> .notNet:
  1026 000037F4 B805000000          <1>     mov eax, errAccDen  
  1027 000037F9 F605(59C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
  1028 00003800 754F                <1>     jnz .exitBad  ;Can't delete a char dev
  1029 00003802 F605(59C60300)01    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirReadOnly
  1030 00003809 7546                <1>     jnz .exitBad  ;Can't delete a read only file
  1031 0000380B E843000000          <1>     call deleteMain
  1032 00003810 723F                <1>     jc .exitBad
  1033                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
  1034 00003812 B03F                <1>     mov al, "?"
  1035 00003814 488D3D(C9C60300)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
  1036 0000381B B90B000000          <1>     mov ecx, 11
  1037 00003820 F2AE                <1>     repne scasb   ;Scan for the wildcard char
  1038 00003822 7402                <1>     je .serverWCloop   ;This is not possible if entered via 21/41h
  1039 00003824 F8                  <1>     clc
  1040                              <1>     return  ;Return ok!
    13                              <2> %%_ret:
    14 00003825 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1041                              <1> .serverWCloop:
  1042 00003826 FF35(0CC40300)      <1>     push qword [currentDTA] ;Save the current DTA address
  1043 0000382C 488D3D(23C60300)    <1>     lea rdi, dosffblock
  1044 00003833 57                  <1>     push rdi    ;Push this address onto the stack
  1045 00003834 E8D8D6FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
  1046 00003839 8F05(0CC40300)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
  1047 0000383F E84BD3FFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
  1048 00003844 8F05(0CC40300)      <1>     pop qword [currentDTA]
  1049 0000384A E804000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
  1050 0000384F 73D5                <1>     jnc .serverWCloop     
  1051                              <1> ;Stop as soon as an error occurs
  1052                              <1> .exitBad:
  1053 00003851 F9                  <1>     stc
  1054                              <1>     return
    13                              <2> %%_ret:
    14 00003852 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1055                              <1> 
  1056                              <1> deleteMain:
  1057                              <1> ;Now unlink FAT chain and then clear directory entry
  1058                              <1> ;Get the start cluster of this file
  1059                              <1> ;Input:
  1060                              <1> ; The file must have NOT be read-only.
  1061                              <1> ; If the CDS is NOT a net cds then the following must hold:
  1062                              <1> ;     - curDirCopy must be filled with the file directory information
  1063                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
  1064                              <1> ;Output: CF=NC => Success, 
  1065                              <1> ; If not net CDS:
  1066                              <1> ;   rsi keeps pointing to directory entry.
  1067                              <1> ;   al = First char of the file that was deleted.
  1068                              <1> ;        CF=CY => Error
  1069                              <1> ;The dir buffer must be marked as referenced once we are done with it
  1070 00003853 E812FFFFFF          <1>     call checkNoOpenHandlesForShareAction   ;Also cannot delete if open handle
  1071                              <1>     retc    ;Return immediately if CF=CY and propagate error code
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003858 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1072 0000385A 52                  <1>     push rdx
  1073 0000385B 0FB715(68C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
  1074 00003862 0FB705(62C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
  1075 00003869 C1E010              <1>     shl eax, 10h
  1076 0000386C 09D0                <1>     or eax, edx ;Add low bits to eax
  1077 0000386E 5A                  <1>     pop rdx
  1078 0000386F 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
  1079 00003871 740E                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
  1080 00003873 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
  1081 0000387A E861D1FFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
  1082 0000387F 721B                <1>     jc .exitBad
  1083                              <1> .skipUnlink:
  1084                              <1>     ;Now replace the first char of the directory to 0E5h
  1085                              <1>     ;Get the disk directory in a buffer to manipulate the entry
  1086 00003881 E879E2FFFF          <1>     call getDiskDirectoryEntry
  1087 00003886 7214                <1>     jc .exitBad
  1088 00003888 8A05(F8C60300)      <1>     mov al, byte [delChar]
  1089 0000388E 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
  1090 00003890 E8ECCCFFFF          <1>     call markBufferDirty
  1091                              <1>     ;CF must be clear
  1092 00003895 E8B5CCFFFF          <1>     call writeThroughBuffers
  1093                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000389A 73B6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1094                              <1> .exitBad:
  1095 0000389C E88CCCFFFF          <1>     call cancelWriteThroughBuffers
  1096 000038A1 F9                  <1>     stc
  1097                              <1>     return
    13                              <2> %%_ret:
    14 000038A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1098                              <1> 
  1099                              <1> openMain:
  1100                              <1> ;Input: ax (formally al) = Open mode
  1101                              <1> ;       [currentSFT] = SFT we are building
  1102                              <1> ;       [workingCDS] = CDS of drive to access
  1103                              <1> ;       [workingDPB] = DPB of drive to access
  1104                              <1> ;Ouput: CF=CY => Error, eax has error code
  1105 000038A3 E8AE000000          <1>     call setOpenMode
  1106                              <1>     retc    ;Error Exit 
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000038A8 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1107 000038AA 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1108 000038B1 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
  1109 000038B8 30E4                <1>     xor ah, ah  ;al has the access mode
  1110 000038BA 66894702            <1>     mov word [rdi + sft.wOpenMode], ax  ;Set the SFT access mode
  1111 000038BE 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1112 000038C5 750A                <1>     jne .notNet
  1113                              <1> .redirOpen:
  1114 000038C7 50                  <1>     push rax    ;Push open mode onto stack
  1115 000038C8 B816110000          <1>     mov eax, 1116h  ;Open remote file on \\ pathspec drives
  1116 000038CD CD4F                <1>     int 4Fh
  1117 000038CF 58                  <1>     pop rax
  1118                              <1>     return
    13                              <2> %%_ret:
    14 000038D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1119                              <1> .notNet:
  1120 000038D1 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1121 000038D7 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1122 000038D9 E827300000          <1>     call dosCrit1Enter
  1123 000038DE C605(F7C60300)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1124 000038E5 C605(F8C60300)E5    <1>     mov byte [delChar], 0E5h
  1125 000038EC E83D010000          <1>     call buildSFTEntry  ;ax must have the open mode
  1126 000038F1 7227                <1>     jc .errorExit
  1127                              <1> .openShareLoop:
  1128                              <1> ;Now we attempt to register the file with SHARE
  1129 000038F3 0FB70D(25C00300)    <1>     movzx ecx, word [shareCount]    
  1130                              <1> .openShareTryAgain: 
  1131 000038FA 51                  <1>     push rcx
  1132 000038FB E8F6360000          <1>     call openShareCallWrapper
  1133 00003900 59                  <1>     pop rcx
  1134 00003901 731D                <1>     jnc .fileSharedOk
  1135 00003903 E818370000          <1>     call shareRetryCountdown
  1136 00003908 FFC9                <1>     dec ecx
  1137 0000390A 75EE                <1>     jnz .openShareTryAgain
  1138 0000390C 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1139 00003913 E82B370000          <1>     call shareCheckOpenViolation
  1140 00003918 73D9                <1>     jnc .openShareLoop  ;If user selects retry, we retry!
  1141                              <1> .errorExit:
  1142 0000391A E8F02F0000          <1>     call dosCrit1Exit   ;Else we error out
  1143                              <1>     return
    13                              <2> %%_ret:
    14 0000391F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1144                              <1> .fileSharedOk:
  1145 00003920 B803000000          <1>     mov eax, 3  ;Update date/time and everything in the share dir sync call
  1146 00003925 E8F30A0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1147 0000392A FF15(24C10300)      <1>     call qword [updateDirShare] ;Now call the dir sync, this default sets CF 
  1148 00003930 E8DA2F0000          <1>     call dosCrit1Exit
  1149                              <1> openDriverMux:  ;Int 4Fh, AX=120Ch, jumped to by Create
  1150 00003935 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1151 0000393C E8BCE4FFFF          <1>     call openSFT
  1152 00003941 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1153 00003947 7501                <1>     jnz .netOpen
  1154                              <1>     return
    13                              <2> %%_ret:
    14 00003949 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1155                              <1> .netOpen:
  1156 0000394A 488B05(14C40300)    <1>     mov rax, qword [currentPSP]
  1157 00003951 48894745            <1>     mov qword [rdi + sft.qPSPOwner], rax
  1158                              <1>     return
    13                              <2> %%_ret:
    14 00003955 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1159                              <1> 
  1160                              <1> setOpenMode:
  1161                              <1> ;Input: al = Open mode for the file open
  1162 00003956 8805(EDC60300)      <1>     mov byte [fileOpenMd], al
  1163 0000395C 53                  <1>     push rbx
  1164 0000395D 88C3                <1>     mov bl, al
  1165 0000395F 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1166 00003962 803D(F2C60300)FF    <1>     cmp byte [dosInvoke], -1    
  1167 00003969 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1168 0000396B 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
  1169 0000396E 7405                <1>     je .s2
  1170                              <1> .s1:
  1171 00003970 80FB40              <1>     cmp bl, denyNoneShare
  1172 00003973 770D                <1>     ja .somBad
  1173                              <1> .s2:
  1174 00003975 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1175 00003977 80E30F              <1>     and bl, 0Fh
  1176 0000397A 80FB02              <1>     cmp bl, RWAccess
  1177 0000397D 7703                <1>     ja .somBad
  1178 0000397F 5B                  <1>     pop rbx
  1179 00003980 F8                  <1>     clc
  1180                              <1>     return
    13                              <2> %%_ret:
    14 00003981 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1181                              <1> .somBad:
  1182 00003982 5B                  <1>     pop rbx
  1183 00003983 B80C000000          <1>     mov eax, errAccCde
  1184 00003988 F9                  <1>     stc
  1185                              <1>     return
    13                              <2> %%_ret:
    14 00003989 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1186                              <1> 
  1187                              <1> createNewMain:
  1188                              <1> ;Input: ax (formally al) = File attributes
  1189                              <1> ;       [currentSFT] = SFT we are building
  1190                              <1> ;       [workingCDS] = CDS of drive to access
  1191                              <1> ;       [workingDPB] = DPB of drive to access
  1192 0000398A 0FB6C0              <1>     movzx eax, al
  1193 0000398D B401                <1>     mov ah, 1    ;Tell redir to create new file
  1194 0000398F F605(F4C60300)FF    <1>     test byte [fileExist], -1
  1195 00003996 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1196 00003998 B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1197 0000399D F9                  <1>     stc
  1198                              <1>     return
    13                              <2> %%_ret:
    14 0000399E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1199                              <1> createMain:
  1200                              <1> ;Input: ax (formally al) = File attributes
  1201                              <1> ;       [currentSFT] = SFT we are building
  1202                              <1> ;       [workingCDS] = CDS of drive to access
  1203                              <1> ;       [workingDPB] = DPB of drive to access
  1204 0000399F 0FB6C0              <1>     movzx eax, al
  1205                              <1> .createNewEP:
  1206 000039A2 A8C0                <1>     test al, 80h | 40h   ;Invalid bits?
  1207 000039A4 750A                <1>     jnz .invalidAttrib
  1208 000039A6 A808                <1>     test al, dirVolumeID
  1209 000039A8 7506                <1>     jnz .invalidAttrib  ;Creating volume label with this function is forbidden
  1210 000039AA 0C20                <1>     or al, dirArchive   ;Set archive bit
  1211 000039AC A810                <1>     test al, dirDirectory   
  1212 000039AE 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1213                              <1> .invalidAttrib:
  1214 000039B0 B805000000          <1>     mov eax, errAccDen
  1215 000039B5 F9                  <1>     stc
  1216                              <1>     return
    13                              <2> %%_ret:
    14 000039B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1217                              <1> .validAttr:
  1218 000039B7 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1219 000039BE 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
  1220 000039C5 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1221 000039CC 750A                <1>     jne .diskFile
  1222 000039CE 50                  <1>     push rax    ;Save the new attributes
  1223 000039CF B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1224 000039D4 CD4F                <1>     int 4Fh
  1225 000039D6 5B                  <1>     pop rbx
  1226                              <1>     return
    13                              <2> %%_ret:
    14 000039D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1227                              <1> .diskFile:
  1228 000039D8 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1229 000039DE 740A                <1>     jz .hardFile
  1230 000039E0 50                  <1>     push rax    ;Save the new attributes
  1231 000039E1 B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1232 000039E6 CD4F                <1>     int 4Fh
  1233 000039E8 5B                  <1>     pop rbx
  1234                              <1>     return
    13                              <2> %%_ret:
    14 000039E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1235                              <1> .hardFile:
  1236 000039EA 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
  1237 000039F0 C605(F7C60300)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1238 000039F7 C605(F8C60300)E5    <1>     mov byte [delChar], 0E5h
  1239 000039FE E8022F0000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1240 00003A03 57                  <1>     push rdi
  1241 00003A04 50                  <1>     push rax    ;Save the file attributes on stack
  1242 00003A05 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1243 00003A0A E81F000000          <1>     call buildSFTEntry
  1244 00003A0F 5B                  <1>     pop rbx ;Pop the word off (though it has been used already!)
  1245 00003A10 5F                  <1>     pop rdi
  1246 00003A11 7215                <1>     jc .errorExit
  1247 00003A13 B802000000          <1>     mov eax, 2
  1248 00003A18 FF15(24C10300)      <1>     call qword [updateDirShare]
  1249 00003A1E E8EC2E0000          <1>     call dosCrit1Exit
  1250 00003A23 E90DFFFFFF          <1>     jmp openDriverMux
  1251                              <1> .errorExit:
  1252 00003A28 E8E22E0000          <1>     call dosCrit1Exit
  1253                              <1>     return
    13                              <2> %%_ret:
    14 00003A2D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1254                              <1> buildSFTEntry:
  1255                              <1> ;Called in a critical section.
  1256                              <1> ;Input: al = Open mode
  1257                              <1> ;       STACK: File attributes if creating a file
  1258                              <1> ;       [currentSFT] = SFT we are building
  1259                              <1> ;       [workingCDS] = CDS of drive to access
  1260                              <1> ;       [workingDPB] = DPB of drive to access
  1261                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1262                              <1> ;
  1263                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1264                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1265                              <1> ;        If CF=CY: - Return fail
  1266                              <1> ;
  1267                              <1> ;
  1268                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1269                              <1> ;   If not, create disk entry.
  1270                              <1> ;Check if the device was a char device by checking curDirCopy.
  1271                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1272                              <1> 
  1273                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1274                              <1> ; to start of file fields of the SFT
  1275 00003A2E 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1276 00003A2F 4889E5              <1>     mov rbp, rsp
  1277 00003A32 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
  1278                              <1> ;Set the open mode
  1279 00003A39 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
  1280                              <1> ;Get current time
  1281 00003A3D E8CDECFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1282 00003A42 E8B3EDFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1283 00003A47 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1284                              <1> ;Set current Owner
  1285 00003A4A 488B05(14C40300)    <1>     mov rax, qword [currentPSP]
  1286 00003A51 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
  1287                              <1> ;Set file pointer to first byte
  1288 00003A55 C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1289                              <1> ;Common fields set
  1290 00003A5C F605(F7C60300)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1291 00003A63 0F849D010000        <1>     jz .openProc
  1292                              <1>     ;Here if Creating a file.
  1293 00003A69 F605(F4C60300)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1294 00003A70 0F84D9000000        <1>     jz .createFile
  1295 00003A76 F605(59C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev ;Char dev?
  1296 00003A7D 0F858C010000        <1>     jnz .charDev
  1297                              <1>     ;Here disk file exists, so recreating the file.
  1298                              <1>     ;If recreating, check we are not overwriting a Dir
  1299 00003A83 F605(59C60300)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
  1300 00003A8A 0F85CD010000        <1>     jnz .bad    ;Directories are not allowed to be created
  1301 00003A90 55                  <1>     push rbp
  1302 00003A91 FF35(22C70300)      <1>     push qword [currentSFT]
  1303 00003A97 E8B7FDFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1304 00003A9C 8F05(22C70300)      <1>     pop qword [currentSFT]
  1305 00003AA2 5D                  <1>     pop rbp
  1306 00003AA3 0F82B4010000        <1>     jc .bad
  1307                              <1>     ;al has the char for the filename
  1308                              <1>     ;Sets vars for the sector/offset into the sector
  1309 00003AA9 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1310 00003AB0 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1311 00003AB2 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1312                              <1>     ;al has file attributes.
  1313 00003AB6 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1314 00003AB8 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1315 00003ABB 31C0                <1>     xor eax, eax
  1316                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1317 00003ABD 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1318 00003AC1 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1319 00003AC5 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1320 00003AC8 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1321 00003ACB 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1322 00003ACE 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1323 00003AD1 57                  <1>     push rdi    ;Save SFT pointer
  1324 00003AD2 488D3D(4EC60300)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1325 00003AD9 B920000000          <1>     mov ecx, fatDirEntry_size
  1326 00003ADE F3A4                <1>     rep movsb
  1327 00003AE0 E89CCAFFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1328 00003AE5 5F                  <1>     pop rdi
  1329                              <1> .createCommon:  ;rdi must point to the current SFT 
  1330                              <1>     ;Now populate the remaining SFT fields 
  1331 00003AE6 488D35(4EC60300)    <1>     lea rsi, curDirCopy
  1332 00003AED 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1333 00003AF0 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1334 00003AF3 488B05(36C70300)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1335 00003AFA 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1336 00003AFE 0FB705(3EC70300)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1337 00003B05 C1E805              <1>     shr eax, 5   ;Divide by 32 to get directory entry number
  1338 00003B08 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1339 00003B0B 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1340 00003B0E 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1341 00003B11 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1342 00003B15 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1343 00003B19 C1E210              <1>     shl edx, 10h
  1344 00003B1C 09D0                <1>     or eax, edx
  1345 00003B1E 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1346                              <1> 
  1347 00003B21 31C0                <1>     xor eax, eax
  1348                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1349 00003B23 8A05(F9C60300)      <1>     mov al, byte [workingDrv]
  1350 00003B29 0C40                <1>     or al, blokFileNoFlush  ;Dont flush until it is accessed
  1351 00003B2B 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1352 00003B2F 488B05(FAC60300)    <1>     mov rax, qword [workingDPB]
  1353 00003B36 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1354                              <1>     ;Last thing, copy the filename over
  1355                              <1>     ;Now save the name
  1356                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1357 00003B3A 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1358 00003B3E 488D35(4EC60300)    <1>     lea rsi, curDirCopy
  1359 00003B45 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1360 00003B47 66A5                <1>     movsw
  1361 00003B49 A4                  <1>     movsb
  1362                              <1>     ;SFT filled
  1363 00003B4A E905010000          <1>     jmp .exit
  1364                              <1> .createFile:
  1365                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1366                              <1>     ;rsi points to current sda entry
  1367 00003B4F 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
  1368                              <1>     ;Clear out the dir entry
  1369 00003B56 57                  <1>     push rdi
  1370 00003B57 B904000000          <1>     mov ecx, 4
  1371 00003B5C 31C0                <1>     xor eax, eax
  1372 00003B5E F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1373 00003B61 5F                  <1>     pop rdi
  1374                              <1>     ;Copy the FCB name over    
  1375 00003B62 56                  <1>     push rsi
  1376 00003B63 57                  <1>     push rdi
  1377 00003B64 B90B000000          <1>     mov ecx, 11
  1378 00003B69 488D35(C9C60300)    <1>     lea rsi, fcbName
  1379 00003B70 F3A4                <1>     rep movsb   ;Move over the FCB name
  1380 00003B72 5F                  <1>     pop rdi
  1381 00003B73 5E                  <1>     pop rsi
  1382                              <1> 
  1383 00003B74 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1384                              <1>     ;al has file attributes.
  1385 00003B78 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1386 00003B7A 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1387 00003B7D 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1388 00003B80 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1389 00003B83 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1390 00003B86 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1391                              <1> .searchForDirSpace:
  1392 00003B8C 8905(74C70300)      <1>     mov dword [dirClustA], eax
  1393 00003B92 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1394 00003B94 668905(78C70300)    <1>     mov word [dirSect], ax
  1395 00003B9B 8905(7AC70300)      <1>     mov dword [dirEntry], eax
  1396 00003BA1 57                  <1>     push rdi
  1397 00003BA2 E845DFFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1398 00003BA7 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1399 00003BA8 7328                <1>     jnc .dirEntryFnd
  1400 00003BAA 813D(70C70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1400 00003BB2 0000                <1>
  1401 00003BB4 0F84A3000000        <1>     je .bad ;Set CF and exit
  1402 00003BBA E877E0FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1403 00003BBF 0F828F000000        <1>     jc .exit
  1404 00003BC5 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1405 00003BCA 0F848D000000        <1>     je .bad
  1406                              <1>     ;Else eax = Newly allocated cluster
  1407 00003BD0 EBBA                <1>     jmp short .searchForDirSpace
  1408                              <1> .dirEntryFnd:
  1409 00003BD2 4887FE              <1>     xchg rdi, rsi
  1410 00003BD5 B904000000          <1>     mov ecx, 4
  1411 00003BDA F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1412 00003BDD E89FC9FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1413 00003BE2 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1414 00003BE9 E9F8FEFFFF          <1>     jmp .createCommon
  1415                              <1> .open:
  1416                              <1> ;curdircopy has a copy of the disk file directory
  1417                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1418 00003BEE 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1419 00003BF5 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1420                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  1421 00003BFC E8FEDEFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  1422 00003C01 E9E0FEFFFF          <1>     jmp .createCommon
  1423                              <1> .openProc:
  1424                              <1>     ;Here if Opening a file.
  1425 00003C06 F605(59C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
  1426 00003C0D 74DF                <1>     jz .open
  1427                              <1> .charDev:
  1428 00003C0F 488B05(4EC60300)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  1429 00003C16 E8492B0000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  1430 00003C1B 7307                <1>     jnc .notBadCharDevName
  1431 00003C1D B805000000          <1>     mov eax, errAccDen
  1432 00003C22 EB30                <1>     jmp short .exit ;CF already set
  1433                              <1> .notBadCharDevName:
  1434 00003C24 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
  1435 00003C2B 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  1436 00003C2F 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  1437 00003C33 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1438 00003C36 80CBC0              <1>     or bl, devCharDev | charDevNoEOF ;Set charDev & noEOF on read
  1439 00003C39 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1440 00003C3D C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1441 00003C44 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1442 00003C48 B820202020          <1>     mov eax, "    "
  1443 00003C4D 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1444 00003C51 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1445                              <1> .exit:
  1446 00003C54 E8C3090000          <1>     call writeThroughBuffersForHandle
  1447 00003C59 7207                <1>     jc .bad2
  1448 00003C5B 5D                  <1>     pop rbp
  1449                              <1>     return
    13                              <2> %%_ret:
    14 00003C5C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1450                              <1> .bad:   ;Set Access Denied
  1451 00003C5D B805000000          <1>     mov eax, errAccDen
  1452                              <1> .bad2:  ;Error propagating error code
  1453 00003C62 E8E5090000          <1>     call cancelWriteThroughBuffersForHandle
  1454 00003C67 F9                  <1>     stc
  1455 00003C68 5D                  <1>     pop rbp
  1456                              <1>     return
    13                              <2> %%_ret:
    14 00003C69 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1457                              <1> 
  1458                              <1> closeMain: ;Int 4Fh AX=1201h
  1459                              <1> ;Gets the directory entry for a file
  1460                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1461                              <1> ;If CF=CY on return: Error, return error with al = error code
  1462                              <1> ;Preserve all regs except eax and rdi
  1463                              <1> ; If CF=NC on return: eax = Unknown
  1464                              <1> ;                     rdi = current SFT ptr
  1465 00003C6A 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
  1466 00003C71 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
  1467 00003C77 7408                <1>     jz .physical
  1468                              <1>     ;Here we beep out the request to the network redirector (Int 4Fh AX=1106h)
  1469 00003C79 B806110000          <1>     mov eax, 1106h  ;Make request
  1470 00003C7E CD4F                <1>     int 4Fh ;Beep!
  1471                              <1>     return  ;Returns with CF set or clear as appropriate
    13                              <2> %%_ret:
    14 00003C80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1472                              <1> .physical:  
  1473                              <1> ; We make a request to the dev dir to close the device
  1474                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1475 00003C81 E87F2C0000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1476 00003C86 53                  <1>     push rbx
  1477 00003C87 56                  <1>     push rsi
  1478 00003C88 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
  1479 00003C8C 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1480 00003C92 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
  1481                              <1>     ;rsi has DPB pointer here
  1482                              <1>     ;rdi has the SFT pointer
  1483 00003C94 55                  <1>     push rbp
  1484 00003C95 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
  1485 00003C98 E898270000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
  1486 00003C9D E8D7DEFFFF          <1>     call updateDirectoryEntryForFile
  1487 00003CA2 5D                  <1>     pop rbp
  1488                              <1>     ;If CF is set, Fail was requested and ax has an error code
  1489 00003CA3 7234                <1>     jc .exit
  1490 00003CA5 E8BBCAFFFF          <1>     call flushFile
  1491 00003CAA 722D                <1>     jc .exit    ;If something went wrong, exit
  1492 00003CAC 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
  1493 00003CB0 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
  1494                              <1> .charClose:
  1495                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
  1496                              <1>     ;We now decrement handle count in SFT structure
  1497 00003CB4 E854090000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
  1498 00003CB9 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
  1499 00003CBC 7503                <1>     jnz .driverClose
  1500 00003CBE 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
  1501                              <1> .driverClose:
  1502 00003CC1 50                  <1>     push rax
  1503 00003CC2 51                  <1>     push rcx
  1504 00003CC3 E835330000          <1>     call closeShareCallWrapper  ;The SFT count has been decremented
  1505 00003CC8 59                  <1>     pop rcx
  1506 00003CC9 58                  <1>     pop rax
  1507 00003CCA 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
  1508                              <1>     ;and if the device is a disk device, cl will have the unit number
  1509 00003CCB 9C                  <1>     pushfq
  1510 00003CCC E835E1FFFF          <1>     call closeSFT   ;Called with rdi -> Current SFT
  1511 00003CD1 9D                  <1>     popfq
  1512 00003CD2 E845090000          <1>     call writeThroughBuffersForHandle
  1513 00003CD7 7306                <1>     jnc short .exitOk
  1514                              <1> .exit:
  1515 00003CD9 E86E090000          <1>     call cancelWriteThroughBuffersForHandle
  1516 00003CDE F9                  <1>     stc
  1517                              <1> .exitOk:
  1518 00003CDF 5E                  <1>     pop rsi
  1519 00003CE0 5B                  <1>     pop rbx
  1520 00003CE1 E8292C0000          <1>     call dosCrit1Exit
  1521                              <1>     return
    13                              <2> %%_ret:
    14 00003CE6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1522                              <1> 
  1523                              <1> readBytes:
  1524                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1525                              <1> ;Input: ecx = Number of bytes to read
  1526                              <1> ;Output: ecx = Number of bytes read
  1527                              <1> ;Number of bytes read 
  1528                              <1> ;If CF=CY, return with error code in ax
  1529 00003CE7 E831070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1530 00003CEC 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1531 00003CF0 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1532 00003CF2 3C01                <1>     cmp al, WriteAccess
  1533 00003CF4 7509                <1>     jne .readable
  1534 00003CF6 B805000000          <1>     mov eax, errAccDen
  1535 00003CFB 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1536 00003CFD F9                  <1>     stc
  1537                              <1>     return
    13                              <2> %%_ret:
    14 00003CFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1538                              <1> .readable:
  1539 00003CFF E85B070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1540 00003D04 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1541 00003D07 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1542 00003D0D 740A                <1>     jz .notRedir
  1543 00003D0F B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1544 00003D14 CD4F                <1>     int 4Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1545                              <1>     return 
    13                              <2> %%_ret:
    14 00003D16 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1546                              <1> .exitOk:
  1547 00003D17 F8                  <1>     clc
  1548                              <1>     return 
    13                              <2> %%_ret:
    14 00003D18 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1549                              <1> .notRedir:
  1550 00003D19 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1551 00003D1F 7510                <1>     jnz readCharDev
  1552 00003D21 E8DF2B0000          <1>     call dosCrit1Enter
  1553 00003D26 E898010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1554 00003D2B E8DF2B0000          <1>     call dosCrit1Exit
  1555                              <1>     return 
    13                              <2> %%_ret:
    14 00003D30 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1556                              <1> readCharDev:
  1557                              <1> ;rdi points to sft for char dev to read
  1558                              <1> ;ecx has the number of bytes to transfer
  1559                              <1> ;Vars have been set up and DTA has the transfer address
  1560                              <1> ;Returns in ecx, the actual bytes transferred
  1561                              <1> ;If CF=CY, return with error code in ax
  1562 00003D31 C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1563 00003D38 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1564 00003D3C 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1565 00003D43 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
  1566 00003D46 0F84C7020000        <1>     jz readExitOk    ;If it does, jump to exit as if EOF has been hit
  1567 00003D4C F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
  1568 00003D4F 7407                <1>     jz .notNul
  1569                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
  1570                              <1>     ;NUL never transfers bytes 
  1571 00003D51 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1572 00003D53 E9BB020000          <1>     jmp readExitOk    ;Goto exit
  1573                              <1> .notNul:
  1574 00003D58 F6C320              <1>     test bl, charDevBinary
  1575 00003D5B 757F                <1>     jnz .binary
  1576                              <1>     ;Here if the device is in ASCII mode
  1577 00003D5D F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
  1578 00003D60 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1579                              <1> .consoleInput:
  1580                              <1>     ;Console input here
  1581 00003D66 E88DE5FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1582                              <1>     ;Get current offset into buffer (if one exists)
  1583 00003D6B 488B35(31C00300)    <1>     mov rsi, qword [vConHdlOff]
  1584 00003D72 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1585 00003D75 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1586 00003D77 803D(43C30300)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1587 00003D7E 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1588                              <1>     ;Else, reset the buffer
  1589 00003D80 66C705(43C30300)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1589 00003D88 FF                  <1>
  1590                              <1> .oldBuf:
  1591                              <1> ;Preserve the dta and number of chars to tfr
  1592 00003D89 51                  <1>     push rcx
  1593 00003D8A 57                  <1>     push rdi
  1594 00003D8B 488D15(43C30300)    <1>     lea rdx, vConInBuf
  1595 00003D92 E881E5FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1596 00003D97 5F                  <1>     pop rdi
  1597 00003D98 59                  <1>     pop rcx
  1598 00003D99 488D35(45C30300)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1599 00003DA0 803E1A              <1>     cmp byte [rsi], EOF
  1600 00003DA3 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1601 00003DA5 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1602 00003DA8 B00A                <1>     mov al, LF
  1603 00003DAA E8E4E0FFFF          <1>     call charOut_B.in   ;Echo CRLF
  1604 00003DAF 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1605 00003DB1 EB18                <1>     jmp short .exit
  1606                              <1> .tfrBuf:
  1607 00003DB3 AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1608 00003DB4 AA                  <1>     stosb
  1609 00003DB5 3C0D                <1>     cmp al, CR 
  1610 00003DB7 7503                <1>     jne .noCRLF
  1611 00003DB9 C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1612                              <1> .noCRLF:
  1613 00003DBC 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1614 00003DBE E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1615 00003DC0 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1616                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1617 00003DC2 E8CCE0FFFF          <1>     call charOut_B.in   ;Echo CRLF
  1618 00003DC7 31F6                <1>     xor esi, esi
  1619 00003DC9 0C01                <1>     or al, 1    ;Set ZF = NZ
  1620                              <1> .exit:
  1621 00003DCB E840E5FFFF          <1>     call vConRetDriver
  1622 00003DD0 488935(31C00300)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1623 00003DD7 E937020000          <1>     jmp readExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
  1624                              <1> 
  1625                              <1> .binary:
  1626                              <1>     ;Setup registers for transfer
  1627 00003DDC 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1628 00003DDF 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1629                              <1>     ;ecx has the number of bytes to transfer directly
  1630 00003DE2 E86C250000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1631 00003DE7 488B35(FAC60300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1632 00003DEE E895220000          <1>     call goDriver   ;Make the request
  1633 00003DF3 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1634 00003DF6 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1635 00003DFD F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1636 00003E03 7422                <1>     jz .binNoError
  1637                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
  1638 00003E05 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1639 00003E07 E8801D0000          <1>     call charDevErr   ;ah = has part of the error 
  1640                              <1>     ;al now has the response
  1641 00003E0C 3C00                <1>     cmp al, critIgnore
  1642 00003E0E 7417                <1>     je .binNoError ;Simply proceed as normal
  1643 00003E10 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1644 00003E13 3C03                <1>     cmp al, critFail
  1645 00003E15 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1646                              <1>     ;Fallthrough here for fail!
  1647                              <1> .failExit:
  1648 00003E17 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1649 00003E1E 31C9                <1>     xor ecx, ecx
  1650 00003E20 B805000000          <1>     mov eax, errAccDen
  1651 00003E25 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1652                              <1>     return
    13                              <2> %%_ret:
    14 00003E26 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1653                              <1> .binNoError:
  1654                              <1>     ;Get number of bytes transferred into 
  1655 00003E27 8B05(CBC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1656 00003E2D F7D8                <1>     neg eax ;make it into -eax
  1657 00003E2F 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1658                              <1>     ;ecx now has bytes left to transfer
  1659 00003E33 50                  <1>     push rax    ;Save value on stack
  1660 00003E34 31C0                <1>     xor eax, eax ;Set ZF
  1661 00003E36 FFC0                <1>     inc eax ;Clear ZF
  1662 00003E38 58                  <1>     pop rax ;Get back the original value
  1663 00003E39 E9D5010000          <1>     jmp readExitOk    ;GoExit with ecx=Bytes left to read
  1664                              <1> .generalASCII:
  1665                              <1>     ;ecx has bytes to transfer here
  1666                              <1>     ;Setup registers for transfer
  1667 00003E3E 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1668 00003E41 51                  <1>     push rcx
  1669 00003E42 B901000000          <1>     mov ecx, 1  ;Get one char
  1670 00003E47 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1671 00003E4A E804250000          <1>     call primReqReadSetup   ;Setup request
  1672 00003E4F 59                  <1>     pop rcx
  1673                              <1>     ;rbx now has request header ptr
  1674 00003E50 488B35(FAC60300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1675                              <1> .asciiReadChar:
  1676 00003E57 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1677 00003E5A E81DE4FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1678 00003E5F E824220000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1679 00003E64 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1680 00003E6B F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1681 00003E71 741E                <1>     jz .asciiNoError
  1682 00003E73 E8141D0000          <1>     call charDevErr    ;Call Int 44h
  1683                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1684 00003E78 C705(CBC40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1684 00003E80 0000                <1>
  1685 00003E82 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1686 00003E85 3C03                <1>     cmp al, critFail
  1687 00003E87 748E                <1>     je .failExit
  1688 00003E89 3C01                <1>     cmp al, critRetry
  1689 00003E8B 74CA                <1>     je .asciiReadChar
  1690                              <1>     ;Ignore here, pretend NULL CHAR was read
  1691 00003E8D 30C0                <1>     xor al, al
  1692 00003E8F EB15                <1>     jmp short .asciiIgnoreEP
  1693                              <1> .asciiNoError:
  1694                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1695                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1696                              <1> ;Preserve RBX, RSI
  1697                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1698 00003E91 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1699 00003E94 813D(CBC40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1699 00003E9C 0000                <1>
  1700 00003E9E 0F856F010000        <1>     jne readExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1701 00003EA4 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1702                              <1> .asciiIgnoreEP:
  1703 00003EA6 48FF05(C3C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1704 00003EAD 48FFC7              <1>     inc rdi ;Also advance register pointer
  1705 00003EB0 3C1A                <1>     cmp al, EOF ;Was this char EOF?
  1706 00003EB2 0F845B010000        <1>     je readExitOk
  1707 00003EB8 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1708 00003EBA E09B                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1709                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1710 00003EBC FEC0                <1>     inc al  ;make ZF=NZ
  1711 00003EBE E950010000          <1>     jmp readExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1712                              <1> 
  1713                              <1> readDiskFile:
  1714                              <1> ;rdi = Current SFT
  1715                              <1> ;rbp = WorkingDPB
  1716                              <1> ;ecx = Bytes to transfer
  1717 00003EC3 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  1718 00003ECA C605(F0C60300)00    <1>     mov byte [rwFlag], 0    ;Read operation
  1719                              <1>     ;We have the following vars setup:
  1720                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  1721                              <1>     ;currClustF
  1722                              <1>     ;Now convert currSectC to disk sector by using currClustF
  1723                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  1724 00003ED1 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1725 00003ED4 85D2                <1>     test edx, edx
  1726 00003ED6 0F8437010000        <1>     jz readExitOk  ;Return with zero bytes transferred
  1727 00003EDC 8B15(40C70300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  1728 00003EE2 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  1729 00003EE5 8905(44C70300)      <1>     mov dword [currClustD], eax
  1730 00003EEB 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  1731 00003EED 0F8420010000        <1>     jz readExitOk
  1732 00003EF3 3DFFFFFFFF          <1>     cmp eax, -1 ;If left in an indeterminate state somehow, exit no bytes
  1733 00003EF8 0F8415010000        <1>     jz readExitOk   
  1734 00003EFE 8B0D(68C70300)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  1735                              <1>     ;Check if we have opened a volume label (should never happen)
  1736 00003F04 66F747020800        <1>     test word [rdi + sft.wOpenMode], volumeLabel    ;If we try read from vollbl
  1737 00003F0A 7407                <1>     jz .shareCheck
  1738 00003F0C B805000000          <1>     mov eax, errAccDen
  1739 00003F11 F9                  <1>     stc
  1740                              <1>     return
    13                              <2> %%_ret:
    14 00003F12 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1741                              <1> .shareCheck:
  1742                              <1> ;Entered with rdi -> SFT and ecx=number of bytes to read (to check if possible)
  1743 00003F13 E8EC300000          <1>     call retryShareIODelay
  1744 00003F18 7308                <1>     jnc .shareOk
  1745 00003F1A E8E6310000          <1>     call shareCheckReadLockViolation
  1746 00003F1F 73F2                <1>     jnc .shareCheck ;IF the user selected retry, lets try again
  1747                              <1>     return  ;Otherwise, return with the share error code in eax and CF=CY
    13                              <2> %%_ret:
    14 00003F21 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1748                              <1> .shareOk:
  1749 00003F22 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  1750 00003F24 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  1751 00003F26 7426                <1>     jz .skipWalk
  1752                              <1> .goToCurrentCluster:
  1753 00003F28 E8FCCAFFFF          <1>     call readFAT    ;Get in eax the next cluster
  1754 00003F2D 0F82D1000000        <1>     jc .badExit   ;This can only return Fail
  1755 00003F33 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  1756 00003F38 0F84D5000000        <1>     je readExitOk ;Exit with no bytes transferred
  1757 00003F3E 8905(44C70300)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  1758 00003F44 FFCA                <1>     dec edx ;Decrement counter
  1759 00003F46 75E0                <1>     jnz .goToCurrentCluster
  1760                              <1> ;Now we fall out with ebx = Current cluster
  1761 00003F48 8B05(44C70300)      <1>     mov eax, dword [currClustD]    ;Get the current cluster in eax
  1762                              <1>     ;mov eax, ebx
  1763                              <1> .skipWalk:
  1764 00003F4E E8D4C8FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  1765                              <1>     ;Now we add the offset to this
  1766 00003F53 0FB61D(4CC70300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  1767 00003F5A 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  1768 00003F5D 488905(4DC70300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  1769                              <1> ;Main
  1770                              <1> .mainRead:
  1771 00003F64 F605(27C40300)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  1772 00003F6B 7407                <1>     jz .mainReadNoBreak
  1773 00003F6D 50                  <1>     push rax
  1774 00003F6E E809E3FFFF          <1>     call checkBreak
  1775 00003F73 58                  <1>     pop rax
  1776                              <1> .mainReadNoBreak:
  1777 00003F74 E8C8C7FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuf var for sector in rax
  1778 00003F79 0F8285000000        <1>     jc .badExit
  1779 00003F7F 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  1780 00003F83 0FB71D(55C70300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  1781 00003F8A 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  1782                              <1>     ;Now we read the smallest of the following from the sector buffer:
  1783                              <1>     ; 1) Sector size, 2) Bytes left in File, 3) Bytes left to read from Request
  1784 00003F8D 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  1785 00003F90 2B4F1B              <1>     sub ecx, dword [rdi + sft.dCurntOff] ;Get bytes left to read in file in ecx
  1786 00003F93 8B1D(6CC70300)      <1>     mov ebx, dword [tfrCntr]
  1787 00003F99 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  1788 00003F9B 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  1789 00003F9E 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  1790 00003FA2 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  1791 00003FA4 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  1792 00003FA7 57                  <1>     push rdi
  1793 00003FA8 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA]
  1794 00003FAF 51                  <1>     push rcx
  1795 00003FB0 F3A4                <1>     rep movsb
  1796 00003FB2 59                  <1>     pop rcx
  1797 00003FB3 010D(57C70300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  1798 00003FB9 290D(6CC70300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  1799 00003FBF 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  1800 00003FC6 8B05(57C70300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  1801 00003FCC 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  1802 00003FD0 31D2                <1>     xor edx, edx    ;Zero rdx
  1803 00003FD2 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  1804 00003FD4 668915(55C70300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  1805 00003FDB 5F                  <1>     pop rdi
  1806 00003FDC 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  1807 00003FE2 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  1808 00003FE4 742D                <1>     jz readExitOk ;Exit if so!
  1809 00003FE6 E89FC9FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  1810 00003FEB 7217                <1>     jc .badExit
  1811                              <1>     ;If ZF=ZE then currClustF has last cluster
  1812 00003FED 7424                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  1813                              <1>     ;Else repeat
  1814                              <1>     ;currSectD has been updated, we now set currByteS = 0
  1815 00003FEF 66C705(55C70300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  1815 00003FF7 00                  <1>
  1816 00003FF8 488B05(4DC70300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  1817 00003FFF E960FFFFFF          <1>     jmp .mainRead
  1818                              <1> .badExit:
  1819                              <1>     ;When a disk error occurs within the bit where vars have changed,
  1820                              <1>     ; we need to update the SFT before returning
  1821 00004004 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  1822 0000400A 30C0                <1>     xor al, al  ;Set ZF flag
  1823 0000400C E802000000          <1>     call readExitOk   ;We call this
  1824 00004011 F9                  <1>     stc ;All calls which end up here return Fail!
  1825 00004012 C3                  <1>     ret
  1826                              <1> 
  1827                              <1> readExitOk:
  1828                              <1> ;Input: ecx = Number of bytes left to transfer!
  1829                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
  1830 00004013 890D(6CC70300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  1831                              <1>     ;I argue as this is a simply read-only exit vector, this is unnecessary
  1832                              <1>     ;jnz .skipbitClear
  1833                              <1>     ;call getCurrentSFT  ;Get currentSFT in rdi
  1834                              <1>     ;The disk transfer must've flushed by now. 
  1835                              <1>     ;and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  1836                              <1> .skipbitClear:  ;Or skip that entirely
  1837 00004019 E807040000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  1838                              <1>     return 
    13                              <2> %%_ret:
    14 0000401E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1839                              <1> 
  1840                              <1> writeBytes:
  1841                              <1> ;Writes the bytes from the user buffer
  1842                              <1> ;Input: ecx = Bytes to xfr
  1843                              <1> ;Returns number of bytes written in ecx
  1844 0000401F E8F9030000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1845 00004024 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1846 00004028 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1847 0000402A 3C00                <1>     cmp al, ReadAccess
  1848 0000402C 7509                <1>     jne .writeable
  1849                              <1> .noWrite:
  1850 0000402E B805000000          <1>     mov eax, errAccDen
  1851 00004033 31C9                <1>     xor ecx, ecx
  1852 00004035 F9                  <1>     stc
  1853 00004036 C3                  <1>     ret
  1854                              <1> .writeable:
  1855 00004037 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1856 0000403D 7406                <1>     jz .skipAttribCheck ;FCB files don't check file attributes
  1857 0000403F 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  1858 00004043 74E9                <1>     je .noWrite ;If the file is read only, RIP
  1859                              <1> .skipAttribCheck:
  1860 00004045 E815040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  1861 0000404A 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1862 00004050 7408                <1>     jz .notRedir
  1863 00004052 B809110000          <1>     mov eax, 1109h  ;Write to redir
  1864 00004057 CD4F                <1>     int 4Fh
  1865                              <1>     return
    13                              <2> %%_ret:
    14 00004059 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1866                              <1> .notRedir:
  1867 0000405A 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1868 00004060 7510                <1>     jnz writeCharDev
  1869 00004062 E89E280000          <1>     call dosCrit1Enter
  1870 00004067 E84C010000          <1>     call writeDiskFile
  1871 0000406C E89E280000          <1>     call dosCrit1Exit
  1872                              <1>     return
    13                              <2> %%_ret:
    14 00004071 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1873                              <1> writeCharDev:
  1874 00004072 C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr
  1875                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  1876 00004079 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  1877 0000407F 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  1878                              <1>     ;If ecx = 0, we exit
  1879 00004083 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  1880 00004085 85C9                <1>     test ecx, ecx
  1881 00004087 0F8478030000        <1>     jz writeExitChar
  1882 0000408D 488B1D(0CC40300)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  1883 00004094 4889DF              <1>     mov rdi, rbx
  1884 00004097 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  1885 00004099 A820                <1>     test al, charDevBinary
  1886 0000409B 744A                <1>     jz .asciiDev
  1887                              <1> ;Write binary transfer here
  1888                              <1> .binaryLp:
  1889 0000409D 31C0                <1>     xor eax, eax
  1890 0000409F 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1891 000040A2 E8A1220000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1892 000040A7 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
  1893 000040AE E8D11F0000          <1>     call goDriverChar
  1894 000040B3 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  1895 000040B6 B487                <1>     mov ah, critCharDev | critData | critWrite
  1896 000040B8 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1897 000040BF F7C700800000        <1>     test edi, drvErrStatus
  1898 000040C5 7415                <1>     jz .binXfrOk
  1899 000040C7 E8C01A0000          <1>     call charDevErr ;Invoke Int 44h
  1900 000040CC 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  1901 000040CF 3C00                <1>     cmp al, critIgnore
  1902 000040D1 7409                <1>     je .binXfrOk
  1903 000040D3 3C01                <1>     cmp al, critRetry
  1904 000040D5 74C6                <1>     je .binaryLp
  1905 000040D7 E9D5000000          <1>     jmp .exitFail
  1906                              <1> .binXfrOk:
  1907 000040DC 8B05(CBC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  1908 000040E2 E91E030000          <1>     jmp writeExitChar   ;Exit oki with # bytes xfrd in eax
  1909                              <1> .asciiDev:
  1910 000040E7 A802                <1>     test al, charDevConOut
  1911 000040E9 0F859E000000        <1>     jnz .conDev
  1912 000040EF A804                <1>     test al, charDevNulDev
  1913 000040F1 0F858F000000        <1>     jnz .nulDev
  1914                              <1>     ;Here we transfer for a generic character device in ascii mode
  1915 000040F7 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  1916 000040F9 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  1917 000040FC 0F8403030000        <1>     je writeExitChar
  1918 00004102 51                  <1>     push rcx
  1919 00004103 B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  1920 00004108 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1921 0000410B E838220000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1922 00004110 59                  <1>     pop rcx
  1923 00004111 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
  1924 00004118 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  1925                              <1> .asciiLp:
  1926 0000411C E85BE1FFFF          <1>     call checkBreak
  1927 00004121 E8621F0000          <1>     call goDriver
  1928 00004126 57                  <1>     push rdi
  1929 00004127 B487                <1>     mov ah, critCharDev | critData | critWrite
  1930 00004129 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1931 00004130 F7C700800000        <1>     test edi, drvErrStatus
  1932 00004136 741D                <1>     jz .asciiNoError
  1933 00004138 E84F1A0000          <1>     call charDevErr ;Invoke Int 44h
  1934 0000413D 5F                  <1>     pop rdi
  1935 0000413E C705(CBC40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  1935 00004146 0000                <1>
  1936 00004148 3C01                <1>     cmp al, critRetry
  1937 0000414A 74D0                <1>     je .asciiLp
  1938 0000414C 3C00                <1>     cmp al, critIgnore
  1939 0000414E 7412                <1>     je .ignoreEp
  1940 00004150 E95C000000          <1>     jmp .exitFail
  1941                              <1> .asciiNoError:
  1942 00004155 5F                  <1>     pop rdi
  1943 00004156 813D(CBC40300)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  1943 0000415E 0000                <1>
  1944 00004160 741D                <1>     je .bytesXfrdOk
  1945                              <1> .ignoreEp:
  1946 00004162 FFC2                <1>     inc edx ;One more char has been xfrd
  1947 00004164 FF05(C3C40300)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  1948 0000416A 48FFC7              <1>     inc rdi ;And our copy... 
  1949 0000416D 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  1950 00004170 740D                <1>     je .bytesXfrdOk
  1951 00004172 66C705(B8C40300)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  1951 0000417A 00                  <1>
  1952 0000417B FFC9                <1>     dec ecx
  1953 0000417D 759D                <1>     jnz .asciiLp
  1954                              <1> .bytesXfrdOk:
  1955 0000417F 89D0                <1>     mov eax, edx
  1956 00004181 E97F020000          <1>     jmp writeExitChar
  1957                              <1> .nulDev:
  1958 00004186 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  1959 00004188 E978020000          <1>     jmp writeExitChar
  1960                              <1> .conDev:
  1961 0000418D E866E1FFFF          <1>     call vConSwapDriver
  1962 00004192 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  1963 00004195 51                  <1>     push rcx
  1964                              <1> .conDevLp:
  1965 00004196 AC                  <1>     lodsb
  1966 00004197 3C1A                <1>     cmp al, EOF
  1967 00004199 7409                <1>     je .conDevExit
  1968 0000419B E8F3DCFFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  1969 000041A0 FFC9                <1>     dec ecx
  1970 000041A2 75F2                <1>     jnz .conDevLp
  1971                              <1> .conDevExit:
  1972 000041A4 58                  <1>     pop rax ;Get initial ecx back into eax
  1973 000041A5 29C8                <1>     sub eax, ecx
  1974 000041A7 E864E1FFFF          <1>     call vConRetDriver
  1975 000041AC E954020000          <1>     jmp writeExitChar   ;Input: eax = bytes xfrd
  1976                              <1> .exitFail:
  1977 000041B1 B805000000          <1>     mov eax, errAccDen
  1978 000041B6 F9                  <1>     stc
  1979                              <1>     return
    13                              <2> %%_ret:
    14 000041B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1980                              <1> writeDiskFile:
  1981                              <1>     ;rdi has SFT ptr
  1982 000041B8 8B0D(68C70300)      <1>     mov ecx, dword [tfrLen] ;Get the transfer length 
  1983 000041BE C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk 
  1984 000041C5 C605(F0C60300)FF    <1>     mov byte [rwFlag], -1    ;Write operation
  1985 000041CC 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  1986 000041D2 0F85E4010000        <1>     jnz .badExit
  1987 000041D8 85C9                <1>     test ecx, ecx
  1988 000041DA 7505                <1>     jnz .nonZeroWrite
  1989 000041DC B9FFFFFFFF          <1>     mov ecx, -1 ;If write cnt is 0 (i.e. truncating file), check for NO locks
  1990                              <1> .nonZeroWrite:
  1991                              <1>     ;Now do share check here
  1992 000041E1 E81E2E0000          <1>     call retryShareIODelay
  1993 000041E6 7308                <1>     jnc .proceedWithWrite   ;No lock for rdi and ecx, all good!
  1994 000041E8 E80F2F0000          <1>     call shareCheckWriteLockViolation
  1995 000041ED 73F2                <1>     jnc .nonZeroWrite   ;If returned retry, retry the request
  1996                              <1>     return  ;Else return with CF=CY
    13                              <2> %%_ret:
    14 000041EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1997                              <1> .proceedWithWrite:
  1998 000041F0 31DB                <1>     xor ebx, ebx
  1999 000041F2 891D(64C70300)      <1>     mov dword [bytesAppend], ebx    ;Used for file extends (not writes!)
  2000 000041F8 881D(63C70300)      <1>     mov byte [fileGrowing], bl   ;Reset the file growth flag!
  2001 000041FE 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  2002                              <1>     ;If the start cluster is 0, we create a new cluster chain
  2003 00004201 85C0                <1>     test eax, eax
  2004 00004203 7520                <1>     jnz .notStart
  2005 00004205 E897C6FFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  2006 0000420A 0F8293010000        <1>     jc .exitPrepHardErr
  2007 00004210 3DFFFFFFFF          <1>     cmp eax, -1
  2008 00004215 0F84B3010000        <1>     je writeExit
  2009                              <1>     ;Now eax has the first cluster of chain
  2010 0000421B 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  2011 0000421E C605(63C70300)FF    <1>     mov byte [fileGrowing], -1  ;Set to true as this only occurs for new files!
  2012                              <1> .notStart:
  2013                              <1> ;eax has the start cluster of the file
  2014                              <1> ;Now we go to CurntOff
  2015 00004225 8905(44C70300)      <1>     mov dword [currClustD], eax ;Store in var
  2016 0000422B 31DB                <1>     xor ebx, ebx
  2017 0000422D 8B15(40C70300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2018 00004233 85D2                <1>     test edx, edx
  2019 00004235 7458                <1>     jz .skipWalk
  2020                              <1> .goToCurrentCluster:
  2021 00004237 E8EDC7FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2022 0000423C 0F8261010000        <1>     jc .exitPrepHardErr   ;This can only return Fail
  2023 00004242 3DFFFFFFFF          <1>     cmp eax, -1 ;Is this cluster the last cluster?
  2024 00004247 7536                <1>     jne .stillInFile
  2025                              <1> .addCluster:
  2026                              <1>     ;Here we extend by one cluster
  2027 00004249 8B05(44C70300)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2028 0000424F 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2029 00004251 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2030 00004256 E86CC6FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2031 0000425B 0F8242010000        <1>     jc .exitPrepHardErr
  2032 00004261 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2033 00004263 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
  2034 00004267 010D(64C70300)      <1>     add dword [bytesAppend], ecx    ;Add a bytes per sector to filesize
  2035 0000426D C605(63C70300)FF    <1>     mov byte [fileGrowing], -1
  2036 00004274 E8B0C7FFFF          <1>     call readFAT    ;Get in eax the new cluster
  2037 00004279 0F8224010000        <1>     jc .exitPrepHardErr
  2038                              <1> .stillInFile:
  2039 0000427F 8905(44C70300)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2040 00004285 FFCA                <1>     dec edx ;Decrement counter
  2041 00004287 75AE                <1>     jnz .goToCurrentCluster
  2042                              <1> ;Now we fall out
  2043 00004289 8B05(44C70300)      <1>     mov eax, dword [currClustD]
  2044                              <1> .skipWalk:
  2045 0000428F E893C5FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2046                              <1>     ;Now we add the offset to this
  2047 00004294 0FB61D(4CC70300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2048 0000429B 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2049 0000429E 488905(4DC70300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2050 000042A5 8B0D(68C70300)      <1>     mov ecx, dword [tfrLen]
  2051 000042AB 85C9                <1>     test ecx, ecx   ;If this is not zero, goto write
  2052 000042AD 751F                <1>     jnz .mainWrite  
  2053                              <1> ;Here we have a zero byte write, so either truncate or have an extend
  2054 000042AF F605(63C70300)FF    <1>     test byte [fileGrowing], -1
  2055 000042B6 750B                <1>     jnz .extend
  2056                              <1> ;Here we truncate where needed
  2057 000042B8 8B05(44C70300)      <1>     mov eax, dword [currClustD] ;We must free the chain from currClustD
  2058 000042BE E837C7FFFF          <1>     call truncateFAT    ;Truncate from the current cluster 
  2059                              <1> .extend:
  2060 000042C3 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2061 000042C6 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  2062 000042C9 E9F5000000          <1>     jmp .noByteExit ;Exit ok!
  2063                              <1> .mainWrite:
  2064 000042CE F605(27C40300)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  2065 000042D5 7407                <1>     jz .mainWriteNoBreak
  2066 000042D7 50                  <1>     push rax
  2067 000042D8 E89FDFFFFF          <1>     call checkBreak
  2068 000042DD 58                  <1>     pop rax
  2069                              <1> .mainWriteNoBreak:
  2070 000042DE E85EC4FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuf var for sector in rax
  2071 000042E3 0F82D3000000        <1>     jc .badExit
  2072 000042E9 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rdi
  2073 000042ED 0FB71D(55C70300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2074 000042F4 4801DF              <1>     add rdi, rbx    ;Shift rdi by that amount into the sector
  2075                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2076                              <1>     ; 1) Sector size, 2) Bytes left to read from Request
  2077 000042F7 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2078 000042FB 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]
  2079 00004301 39D9                <1>     cmp ecx, ebx    ;If tfrCntr - wBytesPerSector < 0
  2080 00004303 0F47CB              <1>     cmova ecx, ebx
  2081 00004306 56                  <1>     push rsi
  2082 00004307 488B35(0CC40300)    <1>     mov rsi, qword [currentDTA]
  2083 0000430E 51                  <1>     push rcx
  2084 0000430F F3A4                <1>     rep movsb
  2085 00004311 59                  <1>     pop rcx
  2086 00004312 010D(57C70300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2087 00004318 290D(6CC70300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2088 0000431E 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  2089 00004325 5E                  <1>     pop rsi
  2090 00004326 E856C2FFFF          <1>     call markBufferDirty
  2091 0000432B E81FC2FFFF          <1>     call writeThroughBuffers ;Write thru the disk buffers for this sector
  2092 00004330 7271                <1>     jc .exitPrepHardErr
  2093 00004332 8B05(68C70300)      <1>     mov eax, dword [tfrLen] ;Get total length
  2094 00004338 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2095 0000433E 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2096 00004340 0F8488000000        <1>     jz writeExit
  2097 00004346 E83FC6FFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
  2098 0000434B 7256                <1>     jc .exitPrepHardErr
  2099 0000434D 3DFFFFFFFF          <1>     cmp eax, -1
  2100 00004352 753A                <1>     jne .noExtend
  2101                              <1>     ;Here we need to extend by a cluster
  2102 00004354 8B05(44C70300)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2103 0000435A 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2104 0000435C B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2105 00004361 E861C5FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2106 00004366 723B                <1>     jc .exitPrepHardErr
  2107 00004368 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2108 0000436A 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2109 0000436E 011D(64C70300)      <1>     add dword [bytesAppend], ebx    ;Add a bytes per sector to filesize
  2110 00004374 C605(63C70300)FF    <1>     mov byte [fileGrowing], -1
  2111 0000437B E80AC6FFFF          <1>     call getNextSectorOfFile    ;Now we walk to chain to the new cluster
  2112 00004380 7221                <1>     jc .exitPrepHardErr
  2113 00004382 3DFFFFFFFF          <1>     cmp eax, -1
  2114 00004387 B805000000          <1>     mov eax, errAccDen
  2115 0000438C 7415                <1>     je .exitPrepHardErr
  2116                              <1> .noExtend:
  2117 0000438E 66C705(55C70300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2117 00004396 00                  <1>
  2118 00004397 488B05(4DC70300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2119 0000439E E92BFFFFFF          <1>     jmp .mainWrite
  2120                              <1> .exitPrepHardErr:
  2121 000043A3 50                  <1>     push rax    ;Save error code
  2122 000043A4 E825000000          <1>     call writeExit
  2123 000043A9 58                  <1>     pop rax
  2124                              <1> .badExitHard:    ;AL has error code already
  2125 000043AA E87EC1FFFF          <1>     call cancelWriteThroughBuffers
  2126 000043AF B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2127 000043B4 FF15(24C10300)      <1>     call qword [updateDirShare]
  2128 000043BA F9                  <1>     stc
  2129                              <1>     return
    13                              <2> %%_ret:
    14 000043BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2130                              <1> .badExit:
  2131                              <1> ;Might need to do some weird stuff later. Leave for now
  2132 000043BC B805000000          <1>     mov eax, errAccDen
  2133 000043C1 EBE7                <1>     jmp short .badExitHard
  2134                              <1> 
  2135                              <1> .noByteExit:
  2136 000043C3 B802000000          <1>     mov eax, 2  ;Update last accessed fields of SFT
  2137 000043C8 FF15(24C10300)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default so keep xor after
  2138                              <1> writeExit:
  2139                              <1> ;Advances the bytes on the file pointer
  2140                              <1> ;Return: ecx = Number of bytes transferred
  2141 000043CE 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  2142 000043D5 E84B000000          <1>     call updateCurrentSFT
  2143 000043DA 85C9                <1>     test ecx, ecx   ;If no bytes transferred, dont flush
  2144 000043DC 7404                <1>     jz .noFlush
  2145 000043DE 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2146                              <1> .noFlush:
  2147 000043E2 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2148 000043E8 750E                <1>     jnz .exit
  2149 000043EA 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]
  2150 000043ED 39471B              <1>     cmp dword [rdi + sft.dCurntOff], eax
  2151 000043F0 7606                <1>     jbe .exit   ;Don't change filesize unless offset is past the Filesize
  2152 000043F2 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2153 000043F5 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  2154                              <1> .exit:
  2155 000043F8 B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2156 000043FD FF15(24C10300)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2157 00004403 F8                  <1>     clc
  2158                              <1>     return
    13                              <2> %%_ret:
    14 00004404 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2159                              <1> writeExitChar:
  2160                              <1> ;Input: eax = Number of chars transferred
  2161 00004405 8B0D(68C70300)      <1>     mov ecx, dword [tfrLen]
  2162 0000440B 29C1                <1>     sub ecx, eax    ;Get chars left to xfr
  2163 0000440D 890D(6CC70300)      <1>     mov dword [tfrCntr], ecx
  2164 00004413 EBB9                <1>     jmp short writeExit
  2165                              <1> ;-----------------------------------:
  2166                              <1> ;        File Handle routines       :
  2167                              <1> ;-----------------------------------:
  2168                              <1> 
  2169                              <1> setCurrentSFT:
  2170                              <1> ;Set the pointer in rdi as current SFT 
  2171 00004415 48893D(22C70300)    <1>     mov qword [currentSFT], rdi
  2172                              <1>     return 
    13                              <2> %%_ret:
    14 0000441C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2173                              <1> getCurrentSFT:
  2174                              <1> ;Get the current SFT pointer in rdi
  2175 0000441D 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  2176                              <1>     return 
    13                              <2> %%_ret:
    14 00004424 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2177                              <1> updateCurrentSFT:
  2178                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2179                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2180 00004425 57                  <1>     push rdi
  2181 00004426 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  2182 0000442D E8A8010000          <1>     call getBytesTransferred
  2183 00004432 67E327              <1>     jecxz .exit ;Skip this if ecx = 0
  2184                              <1>     ;ecx has bytes transferred
  2185 00004435 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2186 0000443B 751F                <1>     jnz .exit
  2187 0000443D 50                  <1>     push rax
  2188 0000443E 8B05(44C70300)      <1>     mov eax, dword [currClustD]
  2189 00004444 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2190 00004447 8B05(40C70300)      <1>     mov eax, dword [currClustF]
  2191 0000444D 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2192 00004450 58                  <1>     pop rax
  2193 00004451 51                  <1>     push rcx
  2194 00004452 8B0D(57C70300)      <1>     mov ecx, dword [currByteF]
  2195 00004458 894F1B              <1>     mov dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  2196 0000445B 59                  <1>     pop rcx
  2197                              <1> .exit:
  2198 0000445C 5F                  <1>     pop rdi
  2199 0000445D F8                  <1>     clc
  2200                              <1>     return 
    13                              <2> %%_ret:
    14 0000445E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2201                              <1> 
  2202                              <1> setupVarsForTransfer:
  2203                              <1> ;Computes the actual bytes to be transferred and 
  2204                              <1> ; sets up internal variables for the transfer. 
  2205                              <1> ;Works for both reading and writing
  2206                              <1> ;Input: ecx = User desired Bytes to transfer
  2207                              <1> ;       rdi = SFT pointer for the file
  2208                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2209                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2210                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2211                              <1> ;
  2212                              <1> ;Note: Does not account for a FULL disk. When writing,
  2213                              <1> ; if the disk will get full as a result of the write,
  2214                              <1> ; stop at the last byte before the transfer. If the 
  2215                              <1> ; file pointer is past the last free byte, write 0
  2216 0000445F 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2217 00004463 488935(FAC60300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2218 0000446A 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2219 0000446D 8905(57C70300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2220 00004473 890D(68C70300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2221 00004479 890D(6CC70300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2222 0000447F 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2223 00004485 7402                <1>     jz setupVarsForDiskTransfer
  2224 00004487 F8                  <1>     clc
  2225                              <1>     return
    13                              <2> %%_ret:
    14 00004488 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2226                              <1> setupVarsForDiskTransfer:
  2227                              <1> ;Extension of the above, but for Disk files only
  2228                              <1> ;Input: ecx = User desired Bytes to transfer
  2229                              <1> ;       rdi = SFT pointer for the file
  2230                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred, if it is possible
  2231                              <1> ;        CF=CY: Error exit
  2232 00004489 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2233 0000448C 8905(57C70300)      <1>     mov dword [currByteF], eax
  2234 00004492 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2235                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2236 00004496 48892D(FAC60300)    <1>     mov qword [workingDPB], rbp
  2237 0000449D 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2238 000044A0 881D(F9C60300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2239 000044A6 8B05(57C70300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2240 000044AC 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2241 000044B0 31D2                <1>     xor edx, edx    ;Zero rdx
  2242 000044B2 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2243                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2244                              <1>     ;edx has the offset into that sector
  2245 000044B4 8905(48C70300)      <1>     mov dword [currSectF], eax
  2246 000044BA 668915(55C70300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2247 000044C1 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2248 000044C3 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2249 000044C6 8805(4CC70300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2250 000044CC 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2251 000044CE 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  2252 000044D1 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2253 000044D3 8915(40C70300)      <1>     mov dword [currClustF], edx ;Save in var
  2254 000044D9 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2255                              <1> .exit:
  2256 000044DB F8                  <1>     clc
  2257                              <1>     return 
    13                              <2> %%_ret:
    14 000044DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2258                              <1> findFreeSFT:
  2259                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2260                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2261                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2262                              <1> ;        CF=CY => eax = errNhl, error exit
  2263 000044DD 31DB                <1>     xor ebx, ebx
  2264                              <1> .mainLp:
  2265 000044DF 53                  <1>     push rbx    ;Save the sft ndx
  2266 000044E0 E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2267 000044E5 5B                  <1>     pop rbx
  2268 000044E6 7307                <1>     jnc .sftExists
  2269 000044E8 B804000000          <1>     mov eax, errNhl
  2270 000044ED F9                  <1>     stc
  2271                              <1>     return
    13                              <2> %%_ret:
    14 000044EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2272                              <1> .sftExists:
  2273 000044EF 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2274 000044F4 7427                <1>     je .sftFound
  2275 000044F6 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2276 000044FB 751C                <1>     jne .gotoNextNdx
  2277                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2278 000044FD 53                  <1>     push rbx
  2279 000044FE 488B1D(30C40300)    <1>     mov rbx, qword [serverPSP]
  2280 00004505 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  2281 00004509 750B                <1>     jne .netGoToNextNdx
  2282 0000450B 0FB71D(38C40300)    <1>     movzx ebx, word [machineNum]
  2283 00004512 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  2284                              <1> .netGoToNextNdx:
  2285 00004516 5B                  <1>     pop rbx
  2286 00004517 7404                <1>     je .sftFound
  2287                              <1> .gotoNextNdx:
  2288 00004519 FFC3                <1>     inc ebx
  2289 0000451B EBC2                <1>     jmp short .mainLp
  2290                              <1> .sftFound:
  2291 0000451D 53                  <1>     push rbx
  2292 0000451E 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2293 00004523 488B1D(30C40300)    <1>     mov rbx, qword [serverPSP]
  2294 0000452A 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  2295 0000452E 0FB71D(38C40300)    <1>     movzx ebx, word [machineNum]
  2296 00004535 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  2297 00004539 5B                  <1>     pop rbx
  2298 0000453A F8                  <1>     clc
  2299                              <1>     return
    13                              <2> %%_ret:
    14 0000453B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2300                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216h
  2301                              <1> ;Return a pointer to the SFT entry in rdi
  2302                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2303                              <1> ;Output: rdi = SFT pointer
  2304 0000453C 488B3D(49C00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2305                              <1> .walk:
  2306 00004543 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2307 00004547 7212                <1>     jb .thisTable
  2308 00004549 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2309 0000454D 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2310 00004550 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2311 00004557 75EA                <1>     jne .walk
  2312 00004559 F9                  <1>     stc
  2313                              <1>     return
    13                              <2> %%_ret:
    14 0000455A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2314                              <1> .thisTable:
  2315 0000455B 50                  <1>     push rax
  2316 0000455C 52                  <1>     push rdx
  2317 0000455D B84F000000          <1>     mov eax, sft_size
  2318 00004562 F7E3                <1>     mul ebx
  2319 00004564 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2320 00004567 5A                  <1>     pop rdx
  2321 00004568 58                  <1>     pop rax
  2322 00004569 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2323                              <1>     return
    13                              <2> %%_ret:
    14 00004570 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2324                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
  2325                              <1> ;Return a zero extended value in rdi for the SFT entry
  2326                              <1> ;Input: bx = JFT handle (we zero extend)
  2327                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
  2328                              <1> ;        CF=CY => al = Error code, Fail
  2329 00004571 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  2330 00004574 663B1D9FBAFFFF      <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
  2331 0000457B 7204                <1>     jb .ok
  2332 0000457D B006                <1>     mov al, errBadHdl
  2333 0000457F F9                  <1>     stc
  2334                              <1>     return
    13                              <2> %%_ret:
    14 00004580 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2335                              <1> .ok:
  2336 00004581 488B3D(14C40300)    <1>     mov rdi, qword [currentPSP]
  2337 00004588 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  2338 0000458D F8                  <1>     clc
  2339                              <1>     return
    13                              <2> %%_ret:
    14 0000458E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2340                              <1> findFreeJFTEntry:
  2341                              <1> ;Finds a free JFT entry in the currentPSP.
  2342                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  2343                              <1> ;        CF=CY => al=errNhl
  2344 0000458F 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  2345                              <1> .searchLp:
  2346 00004591 E8DBFFFFFF          <1>     call getJFTPtr
  2347 00004596 7209                <1>     jc .badExit
  2348 00004598 803FFF              <1>     cmp byte [rdi], -1
  2349                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000459B 74F1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2350 0000459D FFC3                <1>     inc ebx
  2351 0000459F EBF0                <1>     jmp short .searchLp
  2352                              <1> .badExit:
  2353 000045A1 B004                <1>     mov al, errNhl
  2354 000045A3 F9                  <1>     stc
  2355                              <1>     return
    13                              <2> %%_ret:
    14 000045A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2356                              <1> getSFTPtr:
  2357                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  2358                              <1> ;Input: bx = JFT handle
  2359                              <1> ;Output: CF=NC: rdi = SFT pointer
  2360                              <1> ;        CF=CY: Error, ax=Error code
  2361 000045A5 E815000000          <1>     call derefSFTPtr
  2362                              <1>     retc    ;Return if carry
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000045AA 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2363 000045AC 50                  <1>     push rax
  2364 000045AD 0FB705(38C40300)    <1>     movzx eax, word [machineNum]
  2365 000045B4 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  2366 000045B8 58                  <1>     pop rax
  2367                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000045B9 74E9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2368 000045BB B006                <1>     mov al, errBadHdl   ;Error code
  2369 000045BD F9                  <1>     stc         ;Reset CF
  2370                              <1>     return
    13                              <2> %%_ret:
    14 000045BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2371                              <1> 
  2372                              <1> derefSFTPtr:
  2373                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  2374                              <1> ;Input: bx = File handle (gets zero extended)
  2375                              <1> ;Output: CF=NC: rdi = SFT pointer
  2376                              <1> ;        CF=CY: Error, ax=Error code
  2377 000045BF E8ADFFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  2378 000045C4 7205                <1>     jb .fail
  2379 000045C6 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  2380 000045C9 7504                <1>     jne .ok
  2381                              <1> .fail:
  2382 000045CB B006                <1>     mov al, errBadHdl
  2383 000045CD F9                  <1>     stc
  2384                              <1>     return
    13                              <2> %%_ret:
    14 000045CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2385                              <1> .ok:
  2386 000045CF 53                  <1>     push rbx    ;Preserve the JFT handle
  2387 000045D0 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  2388 000045D3 E864FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  2389 000045D8 5B                  <1>     pop rbx 
  2390                              <1>     return
    13                              <2> %%_ret:
    14 000045D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2391                              <1> 
  2392                              <1> getBytesTransferred:
  2393 000045DA 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2394 000045E0 F7D9                <1>     neg ecx ;Multiply by -1
  2395 000045E2 030D(68C70300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2396                              <1>     return ;Return bytes transferred in ecx
    13                              <2> %%_ret:
    14 000045E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2397                              <1> 
  2398                              <1> getSFTndxInheritable:
  2399                              <1> ;Given a SFTndx this function will verify if it is inheritable
  2400                              <1> ;Input: ebx = SFTndx (word)
  2401                              <1> ;Output: 
  2402                              <1> ;   ZF=ZE => Inheritable
  2403                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  2404 000045E9 57                  <1>     push rdi
  2405 000045EA E84DFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  2406 000045EF 7208                <1>     jc .badNdx
  2407 000045F1 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  2408 000045F7 5F                  <1>     pop rdi
  2409                              <1>     return
    13                              <2> %%_ret:
    14 000045F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2410                              <1> .badNdx:
  2411 000045F9 31FF                <1>     xor edi, edi
  2412 000045FB FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  2413 000045FD F8                  <1>     clc
  2414 000045FE 5F                  <1>     pop rdi
  2415                              <1>     return
    13                              <2> %%_ret:
    14 000045FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2416                              <1> 
  2417                              <1> incrementOpenCount:
  2418                              <1> ;Given a SFTndx, this function will increment it's open count
  2419                              <1> ;Output:
  2420                              <1> ;   CF=NC => sftndx ok, count incremented
  2421                              <1> ;   CF=CY => Bad ndx
  2422 00004600 57                  <1>     push rdi
  2423 00004601 E836FFFFFF          <1>     call getSFTPtrfromSFTNdx
  2424 00004606 7203                <1>     jc .exit
  2425 00004608 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  2426                              <1> .exit:
  2427 0000460B 5F                  <1>     pop rdi
  2428                              <1>     return
    13                              <2> %%_ret:
    14 0000460C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2429                              <1> 
  2430                              <1> decrementOpenCount: ;Int 4Fh AX = 1208h
  2431                              <1> ;Input: rdi = SFT pointer
  2432                              <1> ;Output: ax = Original wNumHandles count
  2433 0000460D 9C                  <1>     pushfq
  2434 0000460E 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2435 00004611 FFC8                <1>     dec eax     ;Decrement count
  2436 00004613 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2437 00004615 FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2438                              <1> .exit:
  2439 00004617 9D                  <1>     popfq
  2440 00004618 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2441                              <1>     return
    13                              <2> %%_ret:
    14 0000461B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2442                              <1> 
  2443                              <1> ;Buffer Wrappers
  2444                              <1> writeThroughBuffersForHandle:
  2445                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2446 0000461C 57                  <1>     push rdi
  2447 0000461D 55                  <1>     push rbp
  2448 0000461E 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  2449 00004625 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2450 0000462B 751C                <1>     jnz .exit
  2451 0000462D FF35(FAC60300)      <1>     push qword [workingDPB]
  2452 00004633 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2453 00004637 48892D(FAC60300)    <1>     mov qword [workingDPB], rbp
  2454 0000463E E80CBFFFFF          <1>     call writeThroughBuffers
  2455 00004643 8F05(FAC60300)      <1>     pop qword [workingDPB]
  2456                              <1> .exit:
  2457 00004649 5D                  <1>     pop rbp
  2458 0000464A 5F                  <1>     pop rdi
  2459                              <1>     return
    13                              <2> %%_ret:
    14 0000464B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2460                              <1> 
  2461                              <1> cancelWriteThroughBuffersForHandle:
  2462                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2463 0000464C 57                  <1>     push rdi
  2464 0000464D 55                  <1>     push rbp
  2465 0000464E 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  2466 00004655 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2467 0000465B 751C                <1>     jnz .exit
  2468 0000465D FF35(FAC60300)      <1>     push qword [workingDPB]
  2469 00004663 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2470 00004667 48892D(FAC60300)    <1>     mov qword [workingDPB], rbp
  2471 0000466E E8BABEFFFF          <1>     call cancelWriteThroughBuffers
  2472 00004673 8F05(FAC60300)      <1>     pop qword [workingDPB]
  2473                              <1> .exit:
  2474 00004679 5D                  <1>     pop rbp
  2475 0000467A 5F                  <1>     pop rdi
  2476                              <1>     return
    13                              <2> %%_ret:
    14 0000467B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    34                                  %include "./Source/Kernel/FileIO/ioctl.asm"
     1                              <1> ioctrl:            ;ah = 44h, handle function
     2                              <1> ;Possible subfunctions
     3                              <1> ;======================================================
     4                              <1> ;Handle Information Functions                         |
     5                              <1> ;al = 00h => Get Handle Information word in dx        x
     6                              <1> ;al = 01h => Set Handle Information word              x
     7                              <1> ;======================================================
     8                              <1> ;IO Control String Functions (optionally implemented) |
     9                              <1> ;al = 02h => Read from Char device                    x
    10                              <1> ;al = 03h => Write to Char device                     x
    11                              <1> ;al = 04h => Read from Block device                   x
    12                              <1> ;al = 05h => Write to Block device                    x
    13                              <1> ;======================================================
    14                              <1> ;IO Status Functions (optionally implemented)         |
    15                              <1> ;al = 06h => Get input status                         x
    16                              <1> ;al = 07h => Get output status                        x
    17                              <1> ;======================================================
    18                              <1> ;Device information (optionally implemented)          |  
    19                              <1> ;al = 08h => Is a block device removable?       
    20                              <1> ;al = 09h => Is a logical device local or remote?   
    21                              <1> ;al = 0Ah => Is a handle to a local or remote file?
    22                              <1> ;======================================================
    23                              <1> ;SHARE.EXE control                                    |
    24                              <1> ;al = 0Bh => Change sharing retry count               x  
    25                              <1> ;======================================================
    26                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    27                              <1> ;======================================================
    28                              <1> ;Generic IOCTL string (optionally implemented)
    29                              <1> ;al = 0Dh => Block device Generic IOCTL request    
    30                              <1> ;======================================================
    31                              <1> ;Disk Drive change drive (optionally implemented)
    32                              <1> ;al = 0Eh => Get logical device                 
    33                              <1> ;al = 0Fh => Set logical device  
    34                              <1> ;======================================================
    35 0000467C 3C0F                <1>     cmp al, 15
    36 0000467E 7747                <1>     ja .invalidFunction
    37 00004680 84C0                <1>     test al, al
    38 00004682 745B                <1>     jz .getDevWord
    39 00004684 3C01                <1>     cmp al, 1
    40 00004686 746E                <1>     je .setDevWord
    41 00004688 2C02                <1>     sub al, 2
    42 0000468A 3C03                <1>     cmp al, 3
    43 0000468C 7673                <1>     jbe .ioctlStringFunctions
    44 0000468E 2C04                <1>     sub al, 4
    45 00004690 3C01                <1>     cmp al, 1
    46 00004692 0F8681010000        <1>     jbe .ioStatusFunctions
    47 00004698 2C02                <1>     sub al, 2
    48 0000469A 3C02                <1>     cmp al, 2
    49 0000469C 0F8644020000        <1>     jbe .devControl
    50 000046A2 2C03                <1>     sub al, 3
    51 000046A4 0F840F030000        <1>     jz .setSharingCount
    52 000046AA FEC8                <1>     dec al
    53 000046AC 0F8425030000        <1>     jz .genericCharDevIOCTL
    54 000046B2 FEC8                <1>     dec al
    55 000046B4 0F844B030000        <1>     jz .genericBlokDevIOCTL
    56 000046BA FEC8                <1>     dec al
    57 000046BC 0F840A040000        <1>     jz .getDrvLogicalDevice
    58 000046C2 E981040000          <1>     jmp .setDrvLogicalDevice
    59                              <1> .invalidFunction:
    60 000046C7 B801000000          <1>     mov eax, errInvFnc
    61                              <1> .ifExit:
    62 000046CC E97F220000          <1>     jmp extErrExit
    63                              <1> .accessDeniedError:
    64 000046D1 B805000000          <1>     mov eax, errAccDen
    65 000046D6 EBF4                <1>     jmp short .ifExit
    66                              <1> .badHandle:
    67 000046D8 B806000000          <1>     mov eax, errBadHdl
    68 000046DD EBED                <1>     jmp short .ifExit
    69                              <1> 
    70                              <1> ;...Functions...
    71                              <1> .getDevWord:
    72                              <1> ;Input: bx = File Handle
    73 000046DF E8DBFEFFFF          <1>     call derefSFTPtr
    74 000046E4 72F2                <1>     jc .badHandle
    75 000046E6 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    76 000046EA 30C0                <1>     xor al, al
    77 000046EC E8B91D0000          <1>     call getUserRegs
    78 000046F1 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    79                              <1>     return
    13                              <2> %%_ret:
    14 000046F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .setDevWord:
    81                              <1> ;Input: bx = File Handle
    82                              <1> ;       dl = Low byte of Device information word
    83 000046F6 E8C4FEFFFF          <1>     call derefSFTPtr
    84 000046FB 72DB                <1>     jc .badHandle 
    85 000046FD 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    86                              <1>     return
    13                              <2> %%_ret:
    14 00004700 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    87                              <1> .ioctlStringFunctions:
    88                              <1> ;al = 0 -> ReadCharDev
    89                              <1> ;al = 1 -> WriteCharDev
    90                              <1> ;al = 2 -> ReadDiskDev
    91                              <1> ;al = 3 -> WriteDiskDev
    92                              <1> ;Input: bx = File handle/drive number
    93                              <1> ;       ecx = Bytes to transfer
    94                              <1> ;       rdx = Ptr to string to transfer
    95 00004701 0FB6F3              <1>     movzx esi, bl
    96 00004704 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
    97 0000470B C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
    98 00004712 C605(5CC40300)00    <1>     mov byte [Int44bitfld], 0
    99                              <1> ;Get in rdi the ptr to the SFT for the handle we are looking at
   100                              <1> ;Setup the common ioReqPkt fields and the read/write 
   101 00004719 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   102 0000471C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   103 0000471F 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   104 00004723 51                  <1>     push rcx
   105 00004724 52                  <1>     push rdx
   106 00004725 B903000000          <1>     mov ecx, drvIOCTLREAD
   107 0000472A BA0C000000          <1>     mov edx, drvIOCTLWRITE
   108 0000472F A801                <1>     test al, 1  ;If set, this is a write operation
   109 00004731 0F45CA              <1>     cmovnz ecx, edx ;Move write command into ecx
   110 00004734 7507                <1>     jnz .notWrite
   111 00004736 800D(5CC40300)01    <1>     or byte [Int44bitfld], critWrite
   112                              <1> .notWrite:
   113 0000473D 5A                  <1>     pop rdx
   114 0000473E 59                  <1>     pop rcx
   115 0000473F 884B02              <1>     mov byte [rbx + ioReqPkt.cmdcde], cl
   116 00004742 3C01                <1>     cmp al, 1
   117 00004744 772F                <1>     ja .ioctlStringBlockDevice
   118                              <1>     ;Here we are for char devices only
   119 00004746 4887DE              <1>     xchg rbx, rsi    ;Save the driver ptr to rsi and the handle to ebx 
   120 00004749 E871FEFFFF          <1>     call derefSFTPtr    ;Get the sft ptr in rdi
   121 0000474E 7288                <1>     jc .badHandle 
   122 00004750 C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr
   123 00004757 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Bit must be set
   124 0000475D 0F8464FFFFFF        <1>     jz .invalidFunction
   125                              <1> 
   126 00004763 488B5F07            <1>     mov rbx, qword [rdi + sft.qPtr] ;Get ptr to device driver
   127 00004767 800D(5CC40300)80    <1>     or byte [Int44bitfld], critCharDev
   128 0000476E 4887DE              <1>     xchg rbx, rsi   ;Swap back
   129 00004771 31C0                <1>     xor eax, eax
   130 00004773 EB38                <1>     jmp short .ioctlStringCommon
   131                              <1> .ioctlStringBlockDevice:
   132                              <1>     ;Here we are for block devices only
   133                              <1>     ;esi has the drive number
   134 00004775 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
   135 0000477C 89F0                <1>     mov eax, esi
   136 0000477E 53                  <1>     push rbx
   137 0000477F E8B31D0000          <1>     call getCDS ;Returns in al the unit number of the drive
   138 00004784 5B                  <1>     pop rbx
   139 00004785 730A                <1>     jnc .okDrive
   140 00004787 B80F000000          <1>     mov eax, errBadDrv
   141 0000478C E9BF210000          <1>     jmp extErrExit
   142                              <1> .okDrive:
   143 00004791 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
   144 00004798 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]
   145 0000479C 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   146 0000479F 884301              <1>     mov byte [rbx + ioReqPkt.unitnm], al
   147 000047A2 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   148 000047A6 8A4623              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   149 000047A9 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] 
   150                              <1> .ioctlStringCommon:
   151                              <1>     ;rsi -> Device Driver header
   152                              <1>     ;rbx -> Request Header
   153                              <1>     ;al = Media descriptor
   154 000047AD 88430D              <1>     mov byte [rbx + ioReqPkt.medesc], al
   155 000047B0 66F746080040        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLRW
   156 000047B6 0F840BFFFFFF        <1>     jz .invalidFunction ;If not supported, invalid function error 
   157                              <1>     ;Make request now
   158                              <1> .ioctlStringCommonRetry:
   159 000047BC 51                  <1>     push rcx    ;Push xfrctr
   160 000047BD 52                  <1>     push rdx    ;Buffer Ptr
   161 000047BE 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   162 000047C4 E8BF180000          <1>     call goDriver
   163 000047C9 5A                  <1>     pop rdx
   164 000047CA 59                  <1>     pop rcx
   165                              <1> ;Check status, if bad, reuse ecx and rdx for tfrlen and bufptr and go again
   166 000047CB 66F743030080        <1>     test word [rbx + ioReqPkt.status], drvErrStatus
   167 000047D1 0F846B210000        <1>     jz extGoodExit
   168 000047D7 800D(5CC40300)18    <1>     or byte [Int44bitfld], critFailOK | critRetryOK | critFailOK
   169 000047DE 8A4301              <1>     mov al, byte [rbx + ioReqPkt.unitnm]
   170 000047E1 8A25(5CC40300)      <1>     mov ah, byte [Int44bitfld]
   171 000047E7 48893D(04C40300)    <1>     mov qword [xInt44RDI], rdi
   172 000047EE 480FB67B03          <1>     movzx rdi, byte [rbx + ioReqPkt.status] ;Get low word of status (errorcde)
   173 000047F3 E8AA130000          <1>     call criticalDOSError
   174 000047F8 488B3D(04C40300)    <1>     mov rdi, qword [xInt44RDI]
   175 000047FF 3C00                <1>     cmp al, critIgnore
   176 00004801 0F843B210000        <1>     je extGoodExit 
   177 00004807 3C01                <1>     cmp al, critRetry
   178 00004809 74B1                <1>     je .ioctlStringCommonRetry
   179 0000480B 0FB64303            <1>     movzx eax, byte [rbx + ioReqPkt.status]    ;Get the error code into al
   180 0000480F 0513000000          <1>     add eax, drvErrShft ;Convert to general error code
   181 00004814 E937210000          <1>     jmp extErrExit
   182                              <1> 
   183                              <1> 
   184                              <1> .ioStatusFunctions:
   185                              <1> ;al = 0 -> Get input status 
   186                              <1> ;al = 1 -> Get output status
   187 00004819 E8A1FDFFFF          <1>     call derefSFTPtr
   188 0000481E 0F82B4FEFFFF        <1>     jc .badHandle 
   189 00004824 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   190 0000482B C6030D              <1>     mov byte [rbx + statusReqPkt.hdrlen], statusReqPkt_size
   191 0000482E C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   192 00004835 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;File cannot be redir!
   193 0000483B 0F8586FEFFFF        <1>     jnz .invalidFunction
   194 00004841 C605(5CC40300)00    <1>     mov byte [Int44bitfld], 0
   195 00004848 B906000000          <1>     mov ecx, drvINSTATUS
   196 0000484D BA0A000000          <1>     mov edx, drvOUTSTATUS
   197 00004852 84C0                <1>     test al, al
   198 00004854 0F45CA              <1>     cmovnz ecx, edx
   199 00004857 884B02              <1>     mov byte [rbx + statusReqPkt.cmdcde], cl
   200 0000485A 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   201 00004860 7416                <1>     jz .ioStatDisk
   202 00004862 C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr
   203 00004869 800D(5CC40300)80    <1>     or byte [Int44bitfld], critCharDev
   204 00004870 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr]
   205 00004874 30C0                <1>     xor al, al
   206 00004876 EB15                <1>     jmp short .ioStatCommon
   207                              <1> .ioStatDisk:
   208 00004878 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
   209 0000487F 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB ptr
   210 00004883 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   211 00004886 884301              <1>     mov byte [rbx + statusReqPkt.unitnm], al
   212 00004889 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   213                              <1> .ioStatCommon:
   214 0000488D E8F6170000          <1>     call goDriver
   215 00004892 66F743030080        <1>     test word [rbx + statusReqPkt.status], drvErrStatus
   216 00004898 743E                <1>     jz .ioStatOk
   217                              <1>     ;Error handling here
   218                              <1> 
   219 0000489A 800D(5CC40300)18    <1>     or byte [Int44bitfld], critFailOK | critRetryOK | critFailOK
   220 000048A1 8A4301              <1>     mov al, byte [rbx + statusReqPkt.unitnm]
   221 000048A4 8A25(5CC40300)      <1>     mov ah, byte [Int44bitfld]
   222 000048AA 48893D(04C40300)    <1>     mov qword [xInt44RDI], rdi
   223 000048B1 480FB67B03          <1>     movzx rdi, byte [rbx + statusReqPkt.status]
   224 000048B6 E8E7120000          <1>     call criticalDOSError
   225 000048BB 488B3D(04C40300)    <1>     mov rdi, qword [xInt44RDI]
   226 000048C2 3C00                <1>     cmp al, critIgnore
   227 000048C4 7412                <1>     je .ioStatOk 
   228 000048C6 3C01                <1>     cmp al, critRetry
   229 000048C8 74C3                <1>     je .ioStatCommon
   230 000048CA 0FB64303            <1>     movzx eax, byte [rbx + statusReqPkt.status]    ;Get the error code into al
   231 000048CE 0513000000          <1>     add eax, drvErrShft ;Convert to general error code
   232 000048D3 E978200000          <1>     jmp extErrExit
   233                              <1> 
   234                              <1> .ioStatOk:
   235 000048D8 66F743030002        <1>     test word [rbx + statusReqPkt.status], drvBsyStatus
   236 000048DE 7403                <1>     jz .notBusyExit
   237 000048E0 B0FF                <1>     mov al, -1  ;Device Busy/EOF
   238                              <1>     return 
    13                              <2> %%_ret:
    14 000048E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> .notBusyExit:
   240                              <1> ;Device ready/NotEOF
   241 000048E3 31C0                <1>     xor eax, eax
   242                              <1>     return
    13                              <2> %%_ret:
    14 000048E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> .devControl:
   245                              <1> ;al = 0 -> Is media removable?
   246                              <1> ;al = 1 -> Is device local or remote?
   247                              <1> ;al = 2 -> Is handle local or remote?
   248 000048E6 84C0                <1>     test al, al
   249 000048E8 746D                <1>     jz .remTest
   250 000048EA A801                <1>     test al, 1
   251 000048EC 751B                <1>     jnz .deviceTest
   252                              <1> ;Handle Local or Remote
   253 000048EE E8CCFCFFFF          <1>     call derefSFTPtr    ;Get ptr in rdi
   254 000048F3 0F82DFFDFFFF        <1>     jc .badHandle 
   255 000048F9 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo]
   256                              <1> .devControlExit:
   257 000048FD E8A81B0000          <1>     call getUserRegs
   258 00004902 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   259 00004906 31C0                <1>     xor eax, eax
   260                              <1>     return 
    13                              <2> %%_ret:
    14 00004908 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   261                              <1> .deviceTest:
   262                              <1> ;Drive Local or Remote
   263                              <1> ;For more compat, get the driver attrib word if local with bit 12 clear
   264                              <1> ;Else, just get the CDS word and swap subst and net
   265 00004909 88D8                <1>     mov al, bl
   266 0000490B E8271C0000          <1>     call getCDS
   267 00004910 730A                <1>     jnc .devTestOkDrive
   268 00004912 B80F000000          <1>     mov eax, errBadDrv
   269 00004917 E934200000          <1>     jmp extErrExit
   270                              <1> .devTestOkDrive:
   271 0000491C 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   272 00004923 668B5743            <1>     mov dx, word [rdi + cds.wFlags]
   273 00004927 66F7C20080          <1>     test dx, cdsRedirDrive   ;Check the remote bit
   274 0000492C 7513                <1>     jnz .remoteDrive
   275 0000492E 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   276 00004932 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   277 00004936 668B5708            <1>     mov dx, word [rdi + drvHdr.attrib]
   278 0000493A 6681E2FFCF          <1>     and dx, ~3000h  ;Clear bits 12 and 13
   279 0000493F EBBC                <1>     jmp short .devControlExit
   280                              <1> .remoteDrive:
   281 00004941 6689D3              <1>     mov bx, dx
   282 00004944 6681CA0010          <1>     or dx, 1000h    ;Set bit 12 for remote (its at subst)
   283 00004949 6681E30010          <1>     and bx, cdsSubstDrive   ;Isolate the subst bit
   284 0000494E 74AD                <1>     jz short .devControlExit    ;Jump to exit if no subst bit
   285 00004950 6681CA0080          <1>     or dx, 8000h    ;Else, set bit 15 for subst in returning word!
   286 00004955 EBA6                <1>     jmp short .devControlExit   ;Store it
   287                              <1> 
   288                              <1> .remTest:
   289                              <1> ;Drive letter in bl
   290 00004957 88D8                <1>     mov al, bl
   291 00004959 E8D91B0000          <1>     call getCDS
   292 0000495E 730A                <1>     jnc .remTestOkDrive
   293                              <1> .remTestBadDrv:
   294 00004960 B80F000000          <1>     mov eax, errBadDrv
   295 00004965 E9E61F0000          <1>     jmp extErrExit
   296                              <1> .remTestOkDrive:
   297 0000496A 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] ;Get the CDS
   298 00004971 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   299 00004977 75E7                <1>     jnz .remTestBadDrv
   300 00004979 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   301 00004980 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]
   302 00004984 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]    ;Get the unit number
   303 00004987 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr in rsi
   304 0000498B 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL
   305 00004991 0F8430FDFFFF        <1>     jz .invalidFunction
   306 00004997 C6030D              <1>     mov byte [rbx + remMediaReqPkt.hdrlen], remMediaReqPkt_size
   307 0000499A C643020F            <1>     mov byte [rbx + remMediaReqPkt.cmdcde], drvREMMEDCHECK
   308 0000499E 66C743030000        <1>     mov word [rbx + remMediaReqPkt.status], 0
   309 000049A4 884301              <1>     mov byte [rbx + remMediaReqPkt.unitnm], al
   310 000049A7 E8DC160000          <1>     call goDriver
   311 000049AC 0FB74303            <1>     movzx eax, word [rbx + remMediaReqPkt.status]   ;Get the status
   312 000049B0 2500020000          <1>     and eax, drvBsyStatus   ;Clear all but bit 9
   313 000049B5 C1E809              <1>     shr eax, 9  ;Move the busy bit to al[0]
   314                              <1>     return
    13                              <2> %%_ret:
    14 000049B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   315                              <1> 
   316                              <1> .setSharingCount:
   317                              <1> ;Input: cx = Share Count
   318                              <1> ;       dx = Share Retry
   319 000049B9 66890D(25C00300)    <1>     mov word [shareCount], cx
   320 000049C0 6685D2              <1>     test dx, dx
   321 000049C3 0F84FEFCFFFF        <1>     jz .invalidFunction
   322 000049C9 668915(27C00300)    <1>     mov word [shareDelay], dx
   323 000049D0 31C0                <1>     xor eax, eax
   324 000049D2 E96B1F0000          <1>     jmp extGoodExit
   325                              <1> 
   326                              <1> .genericCharDevIOCTL:
   327 000049D7 E8C9FBFFFF          <1>     call getSFTPtr  ;Get in rdi the SFT ptr
   328 000049DC 7311                <1>     jnc .okHandle
   329                              <1> .ioctrlBadHandle:
   330 000049DE C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr
   331 000049E5 B806000000          <1>     mov eax, errBadHdl
   332 000049EA E9611F0000          <1>     jmp extErrExit
   333                              <1> .okHandle:
   334 000049EF 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   335 000049F5 75E7                <1>     jnz .ioctrlBadHandle
   336 000049F7 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   337 000049FD 74DF                <1>     jz .ioctrlBadHandle
   338 000049FF 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the driver ptr in rsi
   339 00004A03 EB49                <1>     jmp short .ioctlReqMake
   340                              <1> .genericBlokDevIOCTL:
   341 00004A05 88D8                <1>     mov al, bl  ;Move the drive number from bl to al
   342 00004A07 51                  <1>     push rcx
   343 00004A08 52                  <1>     push rdx
   344 00004A09 E8291B0000          <1>     call getCDS ;Sets the current CDS
   345 00004A0E 5A                  <1>     pop rdx
   346 00004A0F 59                  <1>     pop rcx
   347 00004A10 7217                <1>     jc .badDrv
   348                              <1>     ;Check the CDS not net, subst or join
   349 00004A12 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
   350 00004A19 0FB74643            <1>     movzx eax, word [rsi + cds.wFlags]
   351 00004A1D 66A90040            <1>     test ax, cdsValidDrive  ;If not valid, fail
   352 00004A21 7406                <1>     jz .badDrv
   353 00004A23 66A980B0            <1>     test ax, cdsRedirDrive|cdsJoinDrive|cdsSubstDrive|cdsRdirLocDrive
   354 00004A27 7411                <1>     jz .goodDrive
   355                              <1> .badDrv:
   356 00004A29 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
   357 00004A30 B80F000000          <1>     mov eax, errBadDrv  ;Error code if error
   358 00004A35 E9161F0000          <1>     jmp extErrExit
   359                              <1> .goodDrive:
   360                              <1>     ;CDS is good,now get the DPB
   361 00004A3A 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]  ;DPB ptr in rsi
   362 00004A3E 488B7E1B            <1>     mov rdi, qword [rsi + dpb.qDriverHeaderPtr] ;Driver ptr in rdi
   363 00004A42 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   364 00004A45 8805(B6C40300)      <1>     mov byte [primReqHdr + ioctlReqPkt.unitnm], al
   365 00004A4B 4889FE              <1>     mov rsi, rdi   ;Get the driver ptr in rsi 
   366                              <1> .ioctlReqMake:
   367                              <1> ;rsi must point to the driver header here
   368 00004A4E 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   369 00004A54 7511                <1>     jnz .supportsIOCTL
   370                              <1> .badFunction:
   371 00004A56 C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   372 00004A5D B801000000          <1>     mov eax, errInvFnc
   373 00004A62 E9E91E0000          <1>     jmp extErrExit
   374                              <1> .supportsIOCTL:
   375                              <1>     ;Setup the request header
   376 00004A67 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   377 00004A6E C60327              <1>     mov byte [rbx + ioctlReqPkt.hdrlen], ioctlReqPkt_size
   378 00004A71 C6430213            <1>     mov byte [rbx + ioctlReqPkt.cmdcde], drvIOCTL
   379 00004A75 66C743030000        <1>     mov word [rbx + ioctlReqPkt.status], 0
   380 00004A7B 66894B0D            <1>     mov word [rbx + ioctlReqPkt.majfun], cx ;Store maj and min together
   381 00004A7F 4889531F            <1>     mov qword [rbx + ioctlReqPkt.ctlptr], rdx
   382 00004A83 4889F7              <1>     mov rdi, rsi    ;Save the driver header ptr in rdi
   383 00004A86 E81F1A0000          <1>     call getUserRegs
   384 00004A8B 488B4620            <1>     mov rax, qword [rsi + callerFrame.rsi]
   385 00004A8F 4889430F            <1>     mov qword [rbx + ioctlReqPkt.rsival], rax
   386 00004A93 488B4628            <1>     mov rax, qword [rsi + callerFrame.rdi]
   387 00004A97 48894317            <1>     mov qword [rbx + ioctlReqPkt.rdival], rax
   388 00004A9B 4889FE              <1>     mov rsi, rdi
   389 00004A9E E8E5150000          <1>     call goDriver
   390 00004AA3 66F743030080        <1>     test word [rbx + ioctlReqPkt.status], drvErrStatus
   391 00004AA9 0F84931E0000        <1>     jz extGoodExit
   392 00004AAF 0FB77B03            <1>     movzx edi, word [rbx + ioctlReqPkt.status]
   393 00004AB3 81E7FF000000        <1>     and edi, 0FFh   ;Save the low byte only
   394 00004AB9 89F8                <1>     mov eax, edi
   395 00004ABB E856100000          <1>     call xlatHardError
   396 00004AC0 0FB705(00C40300)    <1>     movzx eax, word [errorExCde] 
   397 00004AC7 E9841E0000          <1>     jmp extErrExit
   398                              <1> 
   399                              <1> .getDrvLogicalDevice:
   400 00004ACC 88D8                <1>     mov al, bl
   401 00004ACE 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   402 00004AD5 C6430217            <1>     mov byte [rbx + getDevReqPkt.cmdcde], drvGETDRVMAP
   403 00004AD9 C6030D              <1>     mov byte [rbx + getDevReqPkt.hdrlen], getDevReqPkt_size
   404 00004ADC 66C743030000        <1>     mov word [rbx + getDevReqPkt.status], 0
   405 00004AE2 53                  <1>     push rbx
   406 00004AE3 E84F1A0000          <1>     call getCDS
   407 00004AE8 8805(F9C60300)      <1>     mov byte [workingDrv], al
   408 00004AEE 5B                  <1>     pop rbx
   409 00004AEF 0F826BFEFFFF        <1>     jc .remTestBadDrv
   410 00004AF5 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   411 00004AFC 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   412 00004B00 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   413 00004B04 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   414 00004B07 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   415                              <1> 
   416 00004B0A 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   417 00004B10 0F84B1FBFFFF        <1>     jz .invalidFunction
   418 00004B16 E86D150000          <1>     call goDriver
   419 00004B1B 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   420 00004B21 7421                <1>     jz .getDrvOk
   421                              <1>     ;Can only Fail, Ignore and Abort.
   422 00004B23 0FB605(F9C60300)    <1>     movzx eax, byte [workingDrv]  
   423 00004B2A 80CC28              <1>     or ah, critRead | critIgnorOK | critFailOK
   424 00004B2D 0FB77B03            <1>     movzx edi, word [rbx + getDevReqPkt.status]
   425 00004B31 E86C100000          <1>     call criticalDOSError
   426 00004B36 3C00                <1>     cmp al, critIgnore
   427 00004B38 740A                <1>     je .getDrvOk
   428 00004B3A B801000000          <1>     mov eax, errInvFnc
   429 00004B3F E90C1E0000          <1>     jmp extErrExit
   430                              <1> .getDrvOk:
   431 00004B44 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]    ;Get the byte
   432                              <1>     return
    13                              <2> %%_ret:
    14 00004B47 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   433                              <1> .setDrvLogicalDevice:
   434 00004B48 88D8                <1>     mov al, bl
   435 00004B4A 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   436 00004B51 C6430218            <1>     mov byte [rbx + setDevReqPkt.cmdcde], drvSETDRVMAP
   437 00004B55 C6030D              <1>     mov byte [rbx + setDevReqPkt.hdrlen], setDevReqPkt_size
   438 00004B58 66C743030000        <1>     mov word [rbx + setDevReqPkt.status], 0
   439 00004B5E 53                  <1>     push rbx
   440 00004B5F E8D3190000          <1>     call getCDS
   441 00004B64 8805(F9C60300)      <1>     mov byte [workingDrv], al
   442 00004B6A 5B                  <1>     pop rbx
   443 00004B6B 0F82EFFDFFFF        <1>     jc .remTestBadDrv
   444 00004B71 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   445 00004B78 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   446 00004B7C 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   447 00004B80 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   448 00004B83 884301              <1>     mov byte [rbx + setDevReqPkt.unitnm], al
   449 00004B86 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   450 00004B8C 0F8435FBFFFF        <1>     jz .invalidFunction
   451 00004B92 E8F1140000          <1>     call goDriver
   452 00004B97 30C0                <1>     xor al, al
   453 00004B99 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   454                              <1>     retz    ;Return if OK
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004B9F 74A6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   455                              <1>     ;Can only Fail, Ignore and Abort.
   456 00004BA1 0FB605(F9C60300)    <1>     movzx eax, byte [workingDrv]  
   457 00004BA8 80CC28              <1>     or ah, critRead | critIgnorOK | critFailOK
   458 00004BAB 0FB77B03            <1>     movzx edi, word [rbx + getDevReqPkt.status]
   459 00004BAF E8EE0F0000          <1>     call criticalDOSError
   460 00004BB4 3C00                <1>     cmp al, critIgnore
   461                              <1>     rete    ;Return if Ignore
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004BB6 748F                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   462 00004BB8 B801000000          <1>     mov eax, errInvFnc
   463 00004BBD E98E1D0000          <1>     jmp extErrExit
   464                              <1> 
    35                                  %include "./Source/Kernel/MemExec/memFunc.asm"
     1                              <1> ;Memory related functions
     2                              <1> 
     3                              <1> ;-----------------------------------:
     4                              <1> ;  Memory related Kernel routines   :
     5                              <1> ;-----------------------------------:
     6                              <1> allocateMemory:    ;ah = 48h
     7                              <1> ;Input: ebx = Number of paragraphs requested
     8                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
     9                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    10 00004BC2 E83E1D0000          <1>     call dosCrit1Enter
    11 00004BC7 31D2                <1>     xor edx, edx
    12                              <1>     ;Clear the pointers
    13 00004BC9 488915(3AC40300)    <1>     mov qword [firstMCB], rdx
    14 00004BD0 488915(42C40300)    <1>     mov qword [bestMCB], rdx
    15 00004BD7 488915(4AC40300)    <1>     mov qword [lastMCB], rdx
    16 00004BDE 31ED                <1>     xor ebp, ebp    
    17 00004BE0 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    18 00004BE2 488B35(39C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    19                              <1> .walk:
    20 00004BE9 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    21 00004BEC 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    22 00004BEF 7409                <1>     je .walk1
    23 00004BF1 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    24 00004BF4 0F850B050000        <1>     jne badMCBChain
    25                              <1> .walk1:
    26                              <1>     ;Here if valid but not the last block
    27 00004BFA 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    28 00004C02 0F8582000000        <1>     jne .walk2
    29                              <1>     ;Here we consolidate adjacent free blocks if there are any
    30                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    31                              <1>     ;End consolidation at first non free block or at last block in chain
    32 00004C08 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    33 00004C0B 744A                <1>     je .det0    ;Determine if this block is useful
    34 00004C0D 31C9                <1>     xor ecx, ecx
    35 00004C0F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    36 00004C12 4881C610000000      <1>     add rsi, mcb.program
    37                              <1> .cons0:
    38 00004C19 48C1E104            <1>     shl rcx, 4
    39 00004C1D 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    40 00004C20 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    41 00004C23 7409                <1>     je .cons1
    42 00004C25 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    43 00004C28 0F85D7040000        <1>     jne badMCBChain 
    44                              <1> .cons1:
    45 00004C2E 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    46 00004C36 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    47                              <1>     ;Here rsi, points to a free block, add it to rdi
    48 00004C38 31C9                <1>     xor ecx, ecx
    49 00004C3A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    50 00004C3D 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    51 00004C43 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    52 00004C46 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    53 00004C48 31D2                <1>     xor edx, edx
    54 00004C4A 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    55 00004C4D 48895608            <1>     mov qword [rsi + 8], rdx
    56 00004C51 3C5A                <1>     cmp al, mcbMarkEnd
    57 00004C53 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    58                              <1>     ;Here we deal with if the block was the last one 
    59 00004C55 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    60                              <1> .det0:  ;Now determine if pointer in rdi is useful
    61 00004C57 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    62                              <1> ;ebx must be less than the arena size for the arena to be useful!
    63 00004C5A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    64 00004C5D 39D9                <1>     cmp ecx, ebx
    65 00004C5F 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    66 00004C61 488935(4AC40300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    67 00004C68 488B05(3AC40300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    68 00004C6F 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    69 00004C72 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    70 00004C74 488935(3AC40300)    <1>     mov qword [firstMCB], rsi
    71                              <1> .det1:
    72                              <1>     ;Now test for best fit.
    73 00004C7B 29D9                <1>     sub ecx, ebx    ;Block - ebx
    74 00004C7D 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    75 00004C7F 7209                <1>     jb .walk2
    76 00004C81 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
    77 00004C83 488935(42C40300)    <1>     mov qword [bestMCB], rsi
    78                              <1> .walk2:
    79 00004C8A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    80 00004C8D 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
    81 00004C8F 31C9                <1>     xor ecx, ecx
    82 00004C91 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    83 00004C94 48C1E104            <1>     shl rcx, 4
    84 00004C98 4881C610000000      <1>     add rsi, mcb.program
    85 00004C9F 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    86 00004CA2 E942FFFFFF          <1>     jmp .walk
    87                              <1> .allocate:
    88                              <1>     ;Allocation fails IF the pointer is the null pointer
    89 00004CA7 803D(C8C30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
    90 00004CAE 7266                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
    91                              <1>     ;Fall thru if last fit
    92 00004CB0 488B35(4AC40300)    <1>     mov rsi, qword [lastMCB]
    93 00004CB7 4885F6              <1>     test rsi, rsi   ;Check if null pointer
    94 00004CBA 0F84D8000000        <1>     jz .allocFail
    95 00004CC0 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
    96 00004CC2 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
    97 00004CC5 31C9                <1>     xor ecx, ecx
    98 00004CC7 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    99 00004CCA 29D9                <1>     sub ecx, ebx
   100 00004CCC 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   101 00004CD2 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   102 00004CD5 48C1E104            <1>     shl rcx, 4
   103 00004CD9 4881C610000000      <1>     add rsi, mcb.program
   104 00004CE0 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   105 00004CE3 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   106 00004CE5 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   107 00004CE8 488B15(14C40300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   108 00004CEF 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   109 00004CF3 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   110 00004CFA 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   111 00004D01 4889F0              <1>     mov rax, rsi
   112 00004D04 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   113 00004D07 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   114 00004D0B E8C8030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   115 00004D10 E8FA1B0000          <1>     call dosCrit1Exit
   116                              <1>     return
    13                              <2> %%_ret:
    14 00004D15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   117                              <1> .bfCommon:
   118 00004D16 488B35(3AC40300)    <1>     mov rsi, qword [firstMCB]
   119 00004D1D 803D(C8C30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   120 00004D24 480F4435(42C40300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   121 00004D2C 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   122 00004D2F 7467                <1>     jz .allocFail
   123 00004D31 8A06                <1>     mov al, byte [rsi + mcb.marker]
   124 00004D33 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   125 00004D36 31C9                <1>     xor ecx, ecx
   126 00004D38 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   127 00004D3B 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   128 00004D3D 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   129 00004D43 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   130 00004D46 488B15(14C40300)    <1>     mov rdx, qword [currentPSP]
   131 00004D4D 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   132 00004D51 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   133 00004D54 4881C610000000      <1>     add rsi, mcb.program
   134 00004D5B 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   135 00004D61 48C1E304            <1>     shl rbx, 4
   136 00004D65 4801DE              <1>     add rsi, rbx
   137 00004D68 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   138 00004D6A 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   139 00004D72 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   140 00004D75 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   141 00004D7C 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   142 00004D83 4889F8              <1>     mov rax, rdi
   143 00004D86 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   144 00004D89 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   145 00004D8D E846030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   146 00004D92 E8781B0000          <1>     call dosCrit1Exit
   147                              <1>     return
    13                              <2> %%_ret:
    14 00004D97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   148                              <1> .allocFail:
   149                              <1>     ;Walk the MCB chain to determine the biggest block size
   150 00004D98 488B35(39C00300)    <1>     mov rsi, [mcbChainPtr]
   151 00004D9F 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   152                              <1> .af0:
   153 00004DA1 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   154 00004DA4 7409                <1>     je .af1
   155 00004DA6 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   156 00004DA9 0F8556030000        <1>     jne badMCBChain
   157                              <1> .af1:
   158 00004DAF 31C9                <1>     xor ecx, ecx
   159 00004DB1 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   160 00004DB4 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   161 00004DBC 7505                <1>     jne .af2
   162 00004DBE 39D9                <1>     cmp ecx, ebx
   163 00004DC0 0F47D9              <1>     cmova ebx, ecx
   164                              <1> .af2:
   165 00004DC3 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   166 00004DC6 7410                <1>     je .afExit
   167 00004DC8 48C1E104            <1>     shl rcx, 4
   168 00004DCC 4881C610000000      <1>     add rsi, mcb.program
   169 00004DD3 4801CE              <1>     add rsi, rcx
   170 00004DD6 EBD7                <1>     jmp short .af1
   171                              <1> .afExit:
   172 00004DD8 B808000000          <1>     mov eax, errNoMem
   173 00004DDD 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   174 00004DE4 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   175 00004DE7 E91B030000          <1>     jmp mcbErrHdlr
   176                              <1> freeMemory:        ;ah = 49h
   177                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   178                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   179                              <1> ;Always skip the first block as this is the anchor for DOS
   180 00004DEC E8141B0000          <1>     call dosCrit1Enter
   181 00004DF1 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   182 00004DF8 31C9                <1>     xor ecx, ecx
   183 00004DFA 488B35(39C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   184 00004E01 4889F7              <1>     mov rdi, rsi
   185 00004E04 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   186 00004E07 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   187 00004E0B 4881C610000000      <1>     add rsi, mcb.program
   188 00004E12 4801CE              <1>     add rsi, rcx    ;Go to next block
   189                              <1> .mainLoop:
   190 00004E15 31C9                <1>     xor ecx, ecx
   191 00004E17 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   192 00004E1A 7409                <1>     je .valid
   193 00004E1C 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   194 00004E1F 0F85E0020000        <1>     jne badMCBChain
   195                              <1> .valid:
   196 00004E25 4939F0              <1>     cmp r8, rsi
   197 00004E28 741C                <1>     je .blockFound
   198                              <1>     ;Not valid, check if last block in chain
   199 00004E2A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   200 00004E2D 0F84A5000000        <1>     je .blockError
   201 00004E33 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   202 00004E36 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   203 00004E3A 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   204 00004E41 4801CE              <1>     add rsi, rcx    ;Go to next block
   205 00004E44 EBCF                <1>     jmp short .mainLoop
   206                              <1> .blockFound:
   207                              <1>     ;If hole, error.
   208                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   209 00004E46 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   210 00004E4E 0F8484000000        <1>     je .blockError
   211 00004E54 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   212 00004E5C 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   213 00004E64 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   214                              <1>     ;It is, let it absorb this space
   215 00004E66 31C9                <1>     xor ecx, ecx
   216 00004E68 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   217 00004E6B 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   218 00004E71 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   219                              <1>     ;Replace block marker
   220 00004E74 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   221 00004E76 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   222 00004E78 31C9                <1>     xor ecx, ecx
   223 00004E7A 48890E              <1>     mov qword [rsi], rcx
   224 00004E7D 48894E08            <1>     mov qword [rsi + 8], rcx
   225 00004E81 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   226                              <1> .blockFoundCheckFollowing:
   227                              <1>     ;First check if we are the last block in chain
   228 00004E84 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   229 00004E87 7439                <1>     je .blockFoundExit  ;If yes, exit!
   230 00004E89 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   231 00004E8C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   232 00004E8F 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   233 00004E93 4881C110000000      <1>     add rcx, mcb.program
   234 00004E9A 4801CE              <1>     add rsi, rcx    ;Go to next block
   235 00004E9D 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   236 00004EA5 751B                <1>     jne .blockFoundExit ;If not free, exit
   237                              <1>     ;If free, absorb into block pointed to by rdi
   238 00004EA7 31C9                <1>     xor ecx, ecx
   239 00004EA9 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   240 00004EAC 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   241 00004EB2 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   242                              <1>     ;Replace block marker
   243 00004EB5 8A06                <1>     mov al, byte [rsi + mcb.marker]
   244 00004EB7 8807                <1>     mov byte [rdi + mcb.marker], al
   245 00004EB9 31C9                <1>     xor ecx, ecx
   246 00004EBB 48890E              <1>     mov qword [rsi], rcx
   247 00004EBE 48894E08            <1>     mov qword [rsi + 8], rcx
   248                              <1> .blockFoundExit:
   249 00004EC2 E811020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   250 00004EC7 E8431A0000          <1>     call dosCrit1Exit
   251 00004ECC 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   252 00004ED3 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   253                              <1>     return
    13                              <2> %%_ret:
    14 00004ED7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   254                              <1> .blockError:
   255 00004ED8 C605(FEC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   256 00004EDF B809000000          <1>     mov eax, errMemAddr
   257 00004EE4 E8671A0000          <1>     call extErrExit ;Error thru the unified error handler
   258 00004EE9 E8EA010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   259 00004EEE E81C1A0000          <1>     call dosCrit1Exit
   260                              <1>     return
    13                              <2> %%_ret:
    14 00004EF3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   261                              <1> reallocMemory:     ;ah = 4Ah
   262                              <1> ;Input: r8 = address of the block to be realloc'ed
   263                              <1> ;       ebx = How many paras this block should contain after realloc. 
   264                              <1> ;               If ebx = 0, jump to free memory
   265 00004EF4 E80C1A0000          <1>     call dosCrit1Enter
   266 00004EF9 85DB                <1>     test ebx, ebx
   267 00004EFB 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   268 00004F01 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   269 00004F08 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   270 00004F0B 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   271 00004F0E 7409                <1>     je .ctn
   272 00004F10 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   273 00004F13 0F856F010000        <1>     jne .badAddrGiven
   274                              <1> .ctn:
   275                              <1>     ;Provided block is valid and not a hole
   276                              <1>     ;Check if Growth or Shrink
   277 00004F19 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   278 00004F21 74B5                <1>     je freeMemory.blockError
   279 00004F23 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   280 00004F26 31C9                <1>     xor ecx, ecx
   281 00004F28 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   282 00004F2B 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   283 00004F2D 0F8791000000        <1>     ja .growth
   284 00004F33 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   285                              <1> ;We can always shrink
   286 00004F39 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   287 00004F3B 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   288 00004F41 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   289 00004F44 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   290 00004F4A 48C1E304            <1>     shl rbx, 4
   291 00004F4E 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   292 00004F55 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   293 00004F58 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   294 00004F5A C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   295 00004F5D 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   296 00004F5F 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   297 00004F67 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   298 00004F6A 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   299 00004F6C 0F84E6000000        <1>     je .exit
   300                              <1> ;Else, now see if the block following is also free and absorb it
   301 00004F72 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   302 00004F75 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   303 00004F79 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   304 00004F80 4801CE              <1>     add rsi, rcx    ;Goto next arena
   305 00004F83 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   306 00004F86 7409                <1>     je .shrinkAbsorb
   307 00004F88 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   308 00004F8B 0F8574010000        <1>     jne badMCBChain
   309                              <1> .shrinkAbsorb:
   310 00004F91 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   311 00004F99 0F85B9000000        <1>     jne .exit
   312                              <1>     ;It is free, absorb it
   313 00004F9F 8A06                <1>     mov al, byte [rsi + mcb.marker]
   314 00004FA1 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   315 00004FA3 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   316 00004FA6 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   317 00004FA9 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   318 00004FAC 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   319 00004FAF 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   320 00004FB3 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   321 00004FB6 31C9                <1>     xor ecx, ecx
   322                              <1>     ;Clear absorbed MCB
   323 00004FB8 48890E              <1>     mov qword [rsi], rcx
   324 00004FBB 48894E08            <1>     mov qword [rsi + 8], rcx
   325 00004FBF E994000000          <1>     jmp .exit
   326                              <1> .growth:
   327                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   328 00004FC4 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   329 00004FC7 0F84A5000000        <1>     je .notEnuffMem
   330                              <1> ;Now check the following space is free. If not, not enuff mem err
   331 00004FCD 31C9                <1>     xor ecx, ecx
   332 00004FCF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   333 00004FD2 48C1E104            <1>     shl rcx, 4
   334 00004FD6 4889F7              <1>     mov rdi, rsi    
   335 00004FD9 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   336 00004FE0 4801CE              <1>     add rsi, rcx
   337 00004FE3 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   338 00004FE6 7409                <1>     je .growthOK
   339 00004FE8 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   340 00004FEB 0F8514010000        <1>     jne badMCBChain
   341                              <1> .growthOK:
   342                              <1>     ;rdi points to block we are growing
   343 00004FF1 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   344 00004FF9 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   345                              <1>     ;rsi must own all memory up to the next owned arena
   346 00004FFB 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   347 00004FFD 31C9                <1>     xor ecx, ecx
   348 00004FFF 31D2                <1>     xor edx, edx
   349 00005001 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   350 00005004 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   351 0000500A 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   352 0000500D 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   353 0000500F 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   354 00005011 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   355 00005014 775E                <1>     ja .notEnuffMem1
   356 00005016 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   357 00005018 81FA01000000        <1>     cmp edx, 1
   358 0000501E 744E                <1>     je .notEnuffMem2
   359 00005020 31C9                <1>     xor ecx, ecx
   360 00005022 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   361 00005025 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   362 00005029 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   363 0000502C 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   364 0000502F 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   365 00005036 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   366 0000503A 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   367 0000503D 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   368 00005041 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   369                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   370                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   371 00005043 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   372 00005045 7411                <1>     jz .exit
   373 00005047 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   374 0000504D 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   375 00005050 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   376                              <1> .exit:
   377 00005058 E87B000000          <1>     call verifyIntegrityOfMCBChain
   378 0000505D E8AD180000          <1>     call dosCrit1Exit
   379 00005062 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   380 00005069 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   381                              <1>     return
    13                              <2> %%_ret:
    14 0000506D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   382                              <1> .notEnuffMem2:
   383 0000506E FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   384 00005070 EB02                <1>     jmp short .notEnuffMem1
   385                              <1> .notEnuffMem:
   386 00005072 31DB                <1>     xor ebx, ebx    ;No space to grow
   387                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   388 00005074 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   389 00005079 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   390 00005080 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   391 00005083 E97F000000          <1>     jmp mcbErrHdlr
   392                              <1> .badAddrGiven:
   393 00005088 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   394 0000508D E975000000          <1>     jmp mcbErrHdlr
   395                              <1> getsetMallocStrat: ;ah = 58h
   396 00005092 84C0                <1>     test al, al
   397 00005094 741F                <1>     jz .get
   398 00005096 3C02                <1>     cmp al, 2
   399 00005098 7337                <1>     jae .bad
   400                              <1> ;Set here
   401 0000509A 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   402 000050A1 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   403 000050A5 8805(C8C30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   404 000050AB 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   405 000050AF E824000000          <1>     call verifyIntegrityOfMCBChain
   406                              <1>     return
    13                              <2> %%_ret:
    14 000050B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   407                              <1> .get:
   408 000050B5 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   409 000050BC 31C0                <1>     xor eax, eax
   410 000050BE 8A05(C8C30300)      <1>     mov al, byte [allocStrat]
   411 000050C4 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   412 000050C7 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   413 000050CB E808000000          <1>     call verifyIntegrityOfMCBChain
   414                              <1>     return
    13                              <2> %%_ret:
    14 000050D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   415                              <1> .bad:
   416 000050D1 B801000000          <1>     mov eax, errInvFnc
   417 000050D6 EB2F                <1>     jmp short mcbErrHdlr
   418                              <1> ;-----------------------------------:
   419                              <1> ;      Memory related routines      :
   420                              <1> ;-----------------------------------:
   421                              <1> verifyIntegrityOfMCBChain:
   422 000050D8 50                  <1>     push rax
   423 000050D9 53                  <1>     push rbx
   424 000050DA 488B1D(39C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   425                              <1> .ok:
   426 000050E1 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   427 000050E4 7408                <1>     je .ok1
   428 000050E6 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   429 000050E9 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   430                              <1> .exit:
   431 000050EB 5B                  <1>     pop rbx
   432 000050EC 58                  <1>     pop rax
   433                              <1>     return ;We have reached the end of the chain, return all good!
    13                              <2> %%_ret:
    14 000050ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   434                              <1> .ok1:
   435 000050EE 31C0                <1>     xor eax, eax
   436 000050F0 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   437 000050F3 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   438 000050F7 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   439 000050FE 4801C3              <1>     add rbx, rax
   440 00005101 EBDE                <1>     jmp short .ok
   441                              <1> .bmcbPrep:
   442 00005103 5B                  <1>     pop rbx ;Pop off the stack first!
   443 00005104 58                  <1>     pop rax
   444                              <1> badMCBChain:
   445 00005105 B007                <1>     mov al, errMCBbad   ;Yikes!
   446                              <1> mcbErrHdlr:
   447                              <1>     ;Jumped to with eax = error code
   448 00005107 C605(FEC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   449 0000510E E83D180000          <1>     call extErrExit ;Error thru the unified error handler
   450 00005113 3C07                <1>     cmp al, errMCBbad
   451                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00005115 74D6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   452 00005117 EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    36                                  %include "./Source/Kernel/MemExec/progMgmt.asm"
     1                              <1> ;EXEC and all default terminates are here
     2                              <1> 
     3                              <1> ;========================
     4                              <1> ;   Interrupt handlers
     5                              <1> ;========================
     6                              <1> terminateProcess:   ;Int 40h
     7 00005119 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
     8 0000511B E95F160000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
     9                              <1> terminateRes:       ;Int 47h
    10                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    11 00005120 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    12 00005126 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    13 00005129 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    14 0000512E E94C160000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    15                              <1> ;========================
    16                              <1> ;    Int 21h functions
    17                              <1> ;========================
    18                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    19                              <1> ;Input:
    20                              <1> ;rdx = Pointer to new PSP in memory.
    21                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    22                              <1> ;   Officially document that this MUST be paragraph aligned.
    23                              <1> ;rsi = alloc size for new psp block
    24 00005133 C605(09C50300)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    25 0000513A 4C8B05(14C40300)    <1>     mov r8, qword [currentPSP]
    26 00005141 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    27 00005143 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    28 00005144 EB0C                <1>     jmp short copyPSP.pspCommon
    29                              <1> copyPSP:      ;ah = 26h
    30                              <1> ;Input:
    31                              <1> ;rdx = Pointer to new PSP in memory.
    32                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    33                              <1> ;   Officially document that this MUST be paragraph aligned.
    34 00005146 4C8B05(14C40300)    <1>     mov r8, qword [currentPSP]
    35 0000514D 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    36 00005151 53                  <1>     push rbx    ;Save this value for PSP allocsize
    37                              <1> .pspCommon:
    38 00005152 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    39 00005159 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    40 0000515D 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    41                              <1> ;r8 is current PSP, now copy psp to rdx
    42                              <1> ;Preserve rdx and r8 until the end
    43 00005161 4C89C6              <1>     mov rsi, r8
    44 00005164 4889D7              <1>     mov rdi, rdx
    45 00005167 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    46 0000516C F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    47 0000516F 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    48 00005177 F605(09C50300)FF    <1>     test byte [pspCopyFlg], -1
    49 0000517E 7449                <1>     jz .copy
    50                              <1>     ;Now reset the parent psp data
    51 00005180 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    52 00005188 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    53                              <1>     ;Now reset the copied jobFileTable
    54 0000518C 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    55 00005190 0FB70D83AEFFFF      <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    56 00005197 B0FF                <1>     mov al, -1
    57 00005199 F3AA                <1>     rep stosb   ;Store maxHndls many -1's 
    58                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    59 0000519B 498D702A            <1>     lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    60 0000519F 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    61 000051A3 0FB70D70AEFFFF      <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    62                              <1> .xfrJFT:
    63 000051AA 67E31C              <1>     jecxz .copy
    64 000051AD FFC9                <1>     dec ecx
    65 000051AF AC                  <1>     lodsb   ;Get the SFTndx in al
    66 000051B0 0FB6D8              <1>     movzx ebx, al
    67 000051B3 53                  <1>     push rbx
    68 000051B4 E830F4FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
    69 000051B9 58                  <1>     pop rax
    70 000051BA 7508                <1>     jnz .badJFT
    71 000051BC AA                  <1>     stosb   ;Else store the SFTndx at that position... 
    72 000051BD E83EF4FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
    73 000051C2 EBE6                <1>     jmp short .xfrJFT
    74                              <1> .badJFT:
    75 000051C4 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
    76 000051C7 EBE1                <1>     jmp short .xfrJFT 
    77                              <1> .copy:
    78 000051C9 C605(09C50300)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
    79 000051D0 58                  <1>     pop rax ;Pop the allocsize back into rax
    80 000051D1 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
    81                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
    82 000051D4 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
    83 000051D8 B042                <1>     mov al, 42h
    84 000051DA E8BD120000          <1>     call muxGetIntVector    ;Get vector in rbx
    85 000051DF 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    86 000051E2 48AB                <1>     stosq   ;Move rdi to next entry and store
    87 000051E4 B043                <1>     mov al, 43h
    88 000051E6 E8B1120000          <1>     call muxGetIntVector    ;Get vector in rbx
    89 000051EB 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    90 000051EE 48AB                <1>     stosq   ;Move rdi to next entry and store
    91 000051F0 B044                <1>     mov al, 44h
    92 000051F2 E8A5120000          <1>     call muxGetIntVector    ;Get vector in rbx
    93 000051F7 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    94 000051FA 48AB                <1>     stosq   ;Move rdi to next entry and store
    95                              <1>     ;Now we add the additional useful bits... just in case they are damaged
    96 000051FC 66C702CD40          <1>     mov word [rdx + psp.return], 040CDh  ;Int 40h
    97 00005201 66C74250CD41        <1>     mov word [rdx + psp.unixEntry], 041CDh  
    98 00005207 C64252CB            <1>     mov byte [rdx + psp.unixEntry + 2], 0CBh ;Return
    99                              <1>     return
    13                              <2> %%_ret:
    14 0000520B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   100                              <1> 
   101                              <1> terminateStayRes:  ;ah = 31h
   102                              <1> ;Input: al  = Error code
   103                              <1> ;       edx = Number of paragraphs to keep resident
   104 0000520C C605(F6C60300)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   105                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   106 00005213 81FA06000000        <1>     cmp edx, 6
   107 00005219 7305                <1>     jae .aboveMinimum
   108 0000521B BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   109                              <1> .aboveMinimum:
   110                              <1> ;Now we setup a call to Realloc 
   111                              <1> ;Setup regs with: 
   112                              <1> ;   r8 = address of the block to be realloc'ed
   113                              <1> ;   ebx = How many paras this block should contain after realloc.
   114 00005220 4C8B05(14C40300)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   115 00005227 89D3                <1>     mov ebx, edx
   116 00005229 50                  <1>     push rax    ;Preserve errorlevel across call
   117 0000522A 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   118 0000522B E8C4FCFFFF          <1>     call reallocMemory
   119 00005230 5B                  <1>     pop rbx
   120 00005231 58                  <1>     pop rax
   121 00005232 7220                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   122 00005234 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   123                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   124 00005238 EB1A                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   125                              <1> 
   126                              <1> simpleTerminate:   ;ah = 00h
   127 0000523A 31C0                <1>     xor eax, eax    ;Just fall through as normal
   128                              <1> terminateClean:    ;ah = 4Ch, EXIT
   129                              <1> ;Here we must:
   130                              <1> ;0) Build errorlevel and adjust variables accordingly
   131                              <1> ;1) Call Network Termination hook.
   132                              <1> ;2) Check if the program is it's own parent. If so, return.
   133                              <1> ;3) Swap the console back to the original driver if it is swapped.
   134                              <1> ;3.5) If we are exiting due to TSR, jump to 5
   135                              <1> ;4) Free all file handles associated to the current process.
   136                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   137                              <1> ;5) Free all memory blocks that have the signature of current PSP
   138                              <1> ;6) Set current PSP to parent PSP
   139                              <1> ;7) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   140                              <1> ;8) Set rsp of parent proc upon entry to DOS to our rsp
   141                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   142                              <1> ;10) Exit all critical sections.
   143                              <1> ;
   144                              <1> ; Step 0
   145                              <1> ;For now, just adjust error level in var
   146 0000523C 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   147 0000523E 8625(F6C60300)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   148 00005244 F605(80C40300)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   149 0000524B 740D                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   150 0000524D C605(F6C60300)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   151                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   152 00005254 8A25(F6C60300)      <1>     mov ah, byte [exitType] ;Get the exitType
   153                              <1> .storeELvl:
   154 0000525A 668905(24C40300)    <1>     mov word [errorLevel], ax   ;Store word
   155                              <1>     
   156                              <1> ; Step 1 Tell network a process is terminating
   157 00005261 B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   158 00005266 4C8B05(14C40300)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   159 0000526D CD4F                <1>     int 4Fh
   160                              <1> 
   161                              <1> ; Step 2
   162                              <1> .step1:
   163 0000526F 488B3D(14C40300)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   164 00005276 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   165 00005279 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   166 0000527D 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   167                              <1>     ;rete            ;If it is, simply return (al has errorLevel)
   168 00005280 0F84DD000000        <1>     je .exit
   169                              <1> ; Step 3
   170 00005286 E885D0FFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   171                              <1> ; Step 3.5
   172 0000528B 803D(F6C60300)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   173 00005292 0F849D000000        <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   174                              <1> ; Step 4
   175 00005298 803D(F6C60300)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   176 0000529F 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   177 000052A1 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   178 000052A6 CD4F                <1>     int 4Fh
   179                              <1> .skipAbortNetClose:
   180 000052A8 FF15(D4C00300)      <1>     call qword [closeTaskShare] ;Close all shared files for this task
   181 000052AE FF15(ACC00300)      <1>     call qword [unloadDLLHook]  ;Now free exported function for this task
   182 000052B4 4881C72A000000      <1>     add rdi, psp.jobFileTbl ;Move rdi to point to the start of the JFT
   183 000052BB 4889FE              <1>     mov rsi, rdi    ;Point rsi to jft too
   184 000052BE 0FB70D55ADFFFF      <1>     movzx ecx, word [maxHndls] ;Number of entries in JFT
   185                              <1> .s4lp:
   186 000052C5 AC                  <1>     lodsb   ;Inc rsi, get the SFT number in al
   187 000052C6 3CFF                <1>     cmp al, -1  ;End of open JFT entries?
   188 000052C8 7429                <1>     je .step5
   189 000052CA 0FB6D8              <1>     movzx ebx, al   ;Move the file handle number into ebx
   190                              <1>     ;Replace with a call to close the handle eventually
   191 000052CD 57                  <1>     push rdi
   192 000052CE E8ECF2FFFF          <1>     call derefSFTPtr    ;Ret in rdi the SFT pointer
   193 000052D3 7216                <1>     jc .badHdl  ;If a bad handle, skip the decrementing of the handle count
   194 000052D5 FF35(22C70300)      <1>     push qword [currentSFT]
   195 000052DB E835F1FFFF          <1>     call setCurrentSFT  ;Set rdi to currentSFT
   196 000052E0 E885E9FFFF          <1>     call closeMain  ;Close all files opened by this program. Decrement ref ONLY
   197                              <1>     ;closeMain also flushes all sectors associated to the file
   198                              <1>     ;Ignore errors, simply keep closing files
   199 000052E5 8F05(22C70300)      <1>     pop qword [currentSFT]
   200                              <1> .badHdl:
   201 000052EB 5F                  <1>     pop rdi
   202 000052EC B0FF                <1>     mov al, -1
   203 000052EE AA                  <1>     stosb   ;Store a -1 in it's place (not strictly necessary)
   204 000052EF FFC9                <1>     dec ecx ;Zoom Zoom \mu-op!
   205 000052F1 75D2                <1>     jnz .s4lp   ;Keep looping for all entries in the JFT 
   206                              <1> ;Step 5
   207                              <1> .step5:
   208 000052F3 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   209                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   210                              <1>     ; with the currentPSP signature and free them.
   211 000052FA 488B35(39C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   212                              <1> .s5lp:  ;And walk the chain
   213                              <1> ;First verify the address in rsi is a valid mcb
   214 00005301 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   215 00005303 80F94D              <1>     cmp cl, mcbMarkCtn
   216 00005306 7405                <1>     je .checkToFree
   217 00005308 80F95A              <1>     cmp cl, mcbMarkEnd
   218 0000530B 7528                <1>     jne .step6  ;Something wrong so stop freeing
   219                              <1> .checkToFree:
   220 0000530D 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   221 00005311 750F                <1>     jne .noFree
   222 00005313 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   223 00005317 53                  <1>     push rbx
   224 00005318 51                  <1>     push rcx
   225 00005319 56                  <1>     push rsi
   226 0000531A E8CDFAFFFF          <1>     call freeMemory ;Free this memory block
   227 0000531F 5E                  <1>     pop rsi
   228 00005320 59                  <1>     pop rcx
   229 00005321 5B                  <1>     pop rbx
   230                              <1>     ;If an error occured, the internal vars will be set.
   231                              <1> .noFree:
   232 00005322 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   233 00005325 740E                <1>     je .step6   ;Skip if we are
   234 00005327 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   235 0000532A 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   236 0000532E 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   237 00005333 EBCC                <1>     jmp short .s5lp
   238                              <1> ;Step 6
   239                              <1> .step6:
   240                              <1> 
   241 00005335 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   242 00005339 488905(14C40300)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   243                              <1> ;Step 7
   244                              <1>     ;rbx points to current PSP, the old parent task
   245                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   246 00005340 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   247 00005344 B044                <1>     mov al, 44h
   248 00005346 E8B2170000          <1>     call setIntVector
   249 0000534B 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   250 0000534F B043                <1>     mov al, 43h
   251 00005351 E8A7170000          <1>     call setIntVector
   252 00005356 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   253 0000535A B042                <1>     mov al, 42h
   254 0000535C 52                  <1>     push rdx
   255 0000535D E89B170000          <1>     call setIntVector
   256 00005362 5A                  <1>     pop rdx
   257                              <1> ;Step 8
   258                              <1> .exit:
   259 00005363 B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   260 00005365 CD4A                <1>     int 4ah
   261                              <1> 
   262 00005367 FA                  <1>     cli
   263 00005368 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP]
   264 0000536F 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   265                              <1>     ;Make the parent register frame the current one
   266                              <1>     ;Make RSP point to user stack from parent entry to exec
   267 00005373 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   268                              <1> 
   269 00005377 4889542448          <1>     mov qword [rsp + callerFrame.rip], rdx  ;Store return address vector here
   270 0000537C 48C744245802F20000  <1>     mov qword [rsp + callerFrame.flags], 0F202h ;Mimic DOS's return flags
   271                              <1> 
   272 00005385 C605(8AC40300)00    <1>     mov byte [Int44Trans], 0    ;Clear this flag
   273 0000538C C605(FDC30300)00    <1>     mov byte [inDOS], 0 ;Exiting DOS now
   274 00005393 C605(FEC30300)FF    <1>     mov byte [errorDrv], -1 ;Reset
   275 0000539A E838150000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   276 0000539F 48CF                <1>     iretq   ;and return to address that was in rdx
    37                                  %include "./Source/Kernel/MemExec/exec.asm"
     1                              <1> 
     2                              <1> 
     3                              <1> loadExecChild:     ;ah = 4Bh, EXEC
     4                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
     5                              <1> ;       rbx = Ptr to the parameter block used for loading
     6                              <1> ;       al = Subfunction:
     7                              <1> ;            00h = Load Program and transfer control to it
     8                              <1> ;            01h = Load Program but do not transfer ctrl to it
     9                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    10                              <1> ;      Reserved for future expansion:
    11                              <1> ;            04h = Load in background execution mode (PE only)
    12                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    13                              <1> ;               function but in 16-bit mode. 
    14                              <1> ;
    15                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    16                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    17                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    18                              <1> 
    19                              <1> ;If AL = 0 :
    20                              <1> ;            Load Child Program and Xfr control to it
    21                              <1> ; rbx ------>   |-------------------------------|
    22                              <1> ;               |   Ptr to Environment Block    |
    23                              <1> ;               |                               |
    24                              <1> ;               | Can be 0 => Get pointer to    |
    25                              <1> ;               | parent Environment Block      |
    26                              <1> ;               |-------------------------------|
    27                              <1> ;               |   Ptr to Command Line to be   |
    28                              <1> ;               |   placed at PSP + 80h         |
    29                              <1> ;               |-------------------------------|
    30                              <1> ;               |   Ptr to first default FCB    |
    31                              <1> ;               |      to copy to PSP.fcb1      |
    32                              <1> ;               |                               |
    33                              <1> ;               | Should be used to parse the   |
    34                              <1> ;               |  first two command line args  |
    35                              <1> ;               |-------------------------------|
    36                              <1> ;               |   Ptr to second default FCB   |
    37                              <1> ;               |      to copy to PSP.fcb2      |
    38                              <1> ;               |-------------------------------|
    39                              <1> ;
    40                              <1> ;If AL = 1 :
    41                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    42                              <1> ; rbx ------>   |-------------------------------|
    43                              <1> ;               |         AS IN AL=00H          |
    44                              <1> ;               |-------------------------------|
    45                              <1> ;               |     Initial Value of RSP      |
    46                              <1> ;               |       on program launch       |
    47                              <1> ;               |                               |
    48                              <1> ;               |     This is returned to the   |
    49                              <1> ;               |         caller by DOS         |
    50                              <1> ;               |-------------------------------|
    51                              <1> ;               |     Initial Value of RIP      |
    52                              <1> ;               |       on program launch       |
    53                              <1> ;               |                               |
    54                              <1> ;               |     This is returned to the   |
    55                              <1> ;               |         caller by DOS         |
    56                              <1> ;               |-------------------------------|
    57                              <1> ;
    58                              <1> ;                      !!Important Note!!
    59                              <1> ;   The block pointed to by rbx must reserve the space for 
    60                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    61                              <1> ;
    62                              <1> ;If AL = 3 :
    63                              <1> ;                      Load program overlay
    64                              <1> ; rbx ------>   |-------------------------------|
    65                              <1> ;               |  Pointer to the byte in the   |
    66                              <1> ;               |  prog space to start writing  |
    67                              <1> ;               |        the overlay at         |
    68                              <1> ;               |-------------------------------|
    69                              <1> ;               | DWORD offset from the base of |
    70                              <1> ;               |  the program to the location  |
    71                              <1> ;               |  the overlay is being loaded  |
    72                              <1> ;               |              in               |
    73                              <1> ;               |  (Called a Relocation Factor) |
    74                              <1> ;               |     Only FOR EXE Overlays     |
    75                              <1> ;               |        for CODE fixups        |
    76                              <1> ;               |  For COM, Current PSP + 100h  |
    77                              <1> ;               |      assumed to suffice       |
    78                              <1> ;               |-------------------------------|
    79                              <1> ;
    80                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
    81                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
    82                              <1> ;
    83                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
    84 000053A1 55                  <1>     push rbp
    85 000053A2 4889E5              <1>     mov rbp, rsp
    86 000053A5 4881EC78000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
    87                              <1>     ;Clear up the pointers on the stack frame
    88 000053AC 31C0                <1>     xor eax, eax
    89 000053AE 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
    90 000053B2 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax
    91 000053B6 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
    92 000053BA 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
    93 000053BE 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
    94                              <1> 
    95                              <1> 
    96 000053C2 3C03                <1>     cmp al, execOverlay
    97 000053C4 7615                <1>     jbe .validSubfunction
    98                              <1> .badSubFunction:
    99 000053C6 B801000000          <1>     mov eax, errInvFnc
   100 000053CB C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   101                              <1> .badExit:
   102 000053D2 4889EC              <1>     mov rsp, rbp
   103 000053D5 5D                  <1>     pop rbp
   104 000053D6 E975150000          <1>     jmp extErrExit
   105                              <1> 
   106                              <1> .validSubfunction:
   107 000053DB 3C02                <1>     cmp al, execInvld
   108 000053DD 74E7                <1>     je .badSubFunction
   109                              <1>     ;Save registers for each function call
   110 000053DF 48895DD8            <1>     mov qword [rbp - execFrame.pParam], rbx
   111 000053E3 488955D0            <1>     mov qword [rbp - execFrame.pProgname], rdx
   112 000053E7 0FB6C0              <1>     movzx eax, al
   113 000053EA 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   114 000053EE 4889D7              <1>     mov rdi, rdx
   115 000053F1 E80C120000          <1>     call strlen ;Get string length in cx
   116 000053F6 66894DE0            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   117                              <1>     ;Now open the file we wanna yeet to
   118 000053FA 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   119 000053FC 55                  <1>     push rbp    ;Preserve local frame ptr
   120 000053FD E8D2D8FFFF          <1>     call openFileHdl
   121 00005402 5D                  <1>     pop rbp
   122 00005403 72CD                <1>     jc .badExit ;Exit preserving error code in al
   123                              <1>     ;Now ax has the file handle
   124 00005405 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   125 00005409 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   126 0000540C E8AEF1FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   127 00005411 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   128 00005415 F7C280000000        <1>     test edx, devCharDev
   129 0000541B 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   130 0000541D B002                <1>     mov al, errFnf
   131 0000541F E914060000          <1>     jmp .cleanAndFail
   132                              <1> .validDiskFile:
   133 00005424 31C0                <1>     xor eax, eax
   134 00005426 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Clear pEnv and pProg Bases
   135 0000542A 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   136 0000542E 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   137 00005432 0F848D000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   138 00005438 488B7DD8            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   139 0000543C 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   140 0000543F 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   141 00005442 7514                <1>     jnz .copyEnvironmentBlock
   142 00005444 488B35(14C40300)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   143 0000544B 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   144 0000544F 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   145 00005453 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, skip
   146 00005456 746D                <1>     jz .loadProgram
   147                              <1> .copyEnvironmentBlock:
   148 00005458 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   149                              <1>     ;Get the length of the environment
   150 0000545B B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   151 00005460 31C0                <1>     xor eax, eax
   152 00005462 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   153                              <1> .envVerifyLp:
   154 00005465 F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   155 00005467 7531                <1>     jnz .invalidEnvironmentError
   156 00005469 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   157 0000546C FFC9                <1>     dec ecx
   158 0000546E AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   159 0000546F 75F4                <1>     jnz .envVerifyLp
   160                              <1> 
   161 00005471 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   162 00005474 57                  <1>     push rdi     ;Save the length of the environment block
   163 00005475 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   164 0000547B 0FB75DE0            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   165 0000547F 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   166 00005481 89FB                <1>     mov ebx, edi
   167 00005483 C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   168 00005486 55                  <1>     push rbp
   169 00005487 E836F7FFFF          <1>     call allocateMemory
   170 0000548C 5D                  <1>     pop rbp
   171 0000548D 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   172 0000548E 7314                <1>     jnc .copyEnvironment
   173                              <1>     ;Fall thru if not enuff memory
   174                              <1> .insufficientMemory:
   175 00005490 B808000000          <1>     mov eax, errNoMem
   176 00005495 E99E050000          <1>     jmp .cleanAndFail
   177                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   178 0000549A B80A000000          <1>     mov eax, errBadEnv
   179 0000549F E994050000          <1>     jmp .cleanAndFail
   180                              <1> 
   181                              <1> .copyEnvironment:
   182                              <1>     ;rax has the ptr to allocated memory block
   183                              <1>     ;rcx has the number of chars to copy from the source env block
   184 000054A4 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   185 000054A7 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   186 000054AB 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pParam]
   187 000054AF 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   188 000054B2 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   189 000054B4 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   190 000054B9 66AB                <1>     stosw       ;Away you go!
   191 000054BB 488B75D0            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   192 000054BF 0FB74DE0            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   193 000054C3 F3A4                <1>     rep movsb   ;Move the bytes to rdi
   194                              <1> ;Done with the environment... more or less
   195                              <1> .loadProgram:
   196 000054C5 B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   197 000054CA 488D15(DAD90300)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   198 000054D1 E87E050000          <1>     call .readDataFromHdl
   199 000054D6 0F8257050000        <1>     jc .badFmtErr
   200 000054DC 85C0                <1>     test eax, eax   ;Were zero bytes read?
   201 000054DE 0F844F050000        <1>     jz .badFmtErr
   202 000054E4 3D40000000          <1>     cmp eax, imageDosHdr_size
   203 000054E9 0F8294030000        <1>     jb .loadCom
   204                              <1> 
   205 000054EF 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   206 000054F4 740B                <1>     je .proceedEXE
   207 000054F6 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   208 000054FB 0F8582030000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   209                              <1> .proceedEXE:
   210                              <1>     ;Now we need to read e_lfanew
   211 00005501 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   212 00005502 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   213 00005505 8955A8              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   214 00005508 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   215 0000550A 30C0                <1>     xor al, al  ;Set file pointer from start of file
   216 0000550C 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   217 00005510 E8D4D9FFFF          <1>     call lseekHdl   ;Move to that position in the file
   218 00005515 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   219 00005516 B918000000          <1>     mov ecx, imageFileHeader_size
   220 0000551B E834050000          <1>     call .readDataFromHdl       ;Now read the COFF header
   221 00005520 85C0                <1>     test eax, eax   ;Were zero bytes read?
   222 00005522 0F840B050000        <1>     jz .badFmtErr
   223 00005528 3D18000000          <1>     cmp eax, imageFileHeader_size
   224 0000552D 0F8200050000        <1>     jb .badFmtErr
   225                              <1>     ;So now rdx points to the imageFileHeader
   226 00005533 813A50450000        <1>     cmp dword [rdx + imageFileHeader.dPESignature], imagePESignature
   227 00005539 0F85F4040000        <1>     jne .badFmtErr
   228 0000553F 66817A046486        <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   229 00005545 0F85E8040000        <1>     jne .badFmtErr
   230                              <1>     ;Check the binary is executable
   231 0000554B 0FB74216            <1>     movzx eax, word [rdx + imageFileHeader.wCharacteristics]
   232 0000554F 66A90200            <1>     test ax, imageFileExecutable
   233 00005553 0F84DA040000        <1>     jz .badFmtErr
   234 00005559 668945A0            <1>     mov word [rbp - execFrame.wCOFFChars], ax   ;Save this for later!
   235                              <1> 
   236 0000555D 66817A147000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   237 00005563 0F82CA040000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   238                              <1>     ;Now save the number of sections in the the file
   239 00005569 0FB74206            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   240 0000556D 85C0                <1>     test eax, eax   ;If this is 0, what?
   241 0000556F 0F84BE040000        <1>     jz .badFmtErr
   242 00005575 66894598            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   243                              <1>     ;Now load Optional header, file ptr points to it so all good!
   244 00005579 B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   245                              <1>     ;rdx points to exeHdrSpace
   246 0000557E E8D1040000          <1>     call .readDataFromHdl
   247 00005583 85C0                <1>     test eax, eax   ;Were zero bytes read?
   248 00005585 0F84A8040000        <1>     jz .badFmtErr
   249 0000558B 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   250 00005590 0F829D040000        <1>     jb .badFmtErr
   251                              <1>     ;Now File Ptr points to data dirs, not an issue
   252 00005596 81459070000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   253                              <1>     ;We load the program in, one section at a time, reading section headers in
   254                              <1>     ; one at a time to the section header internal buffer.
   255 0000559D 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   256 000055A1 7463                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   257 000055A3 8B1D(12DA0300)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   258 000055A9 488B05(22DA0300)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   259 000055B0 4885C0              <1>     test rax, rax
   260 000055B3 750A                <1>     jnz .notDefaultStackAlloc
   261 000055B5 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   261 000055BE 00                  <1>
   262                              <1> .notDefaultStackAlloc:
   263 000055BF 01C3                <1>     add ebx, eax    ;Add stack allocation
   264 000055C1 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   265                              <1>     ;Add also one section alignment as it is likely that our arena won't be 
   266                              <1>     ; section aligned and so we will need to align before reading, to 
   267                              <1>     ; guaranee that we will have space for the EXE header to be read in later.
   268 000055C7 031D(FAD90300)      <1>     add ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   269 000055CD 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   270 000055D0 81C311000000        <1>     add ebx, 11h
   271 000055D6 C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   272 000055D9 55                  <1>     push rbp
   273 000055DA E8E3F5FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   274 000055DF 5D                  <1>     pop rbp
   275 000055E0 0F82AAFEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   276 000055E6 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   277 000055EA 480500010000        <1>     add rax, psp_size
   278 000055F0 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of code goes here
   279                              <1>     ;Finally, just check that we have some code to execute. 
   280                              <1>     ;Empty code sections are NOT allowed if executing. Only for overlays
   281 000055F4 813D(DED90300)0000- <1>     cmp dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfCode], 0
   281 000055FC 0000                <1>
   282 000055FE 0F842F040000        <1>     je .badFmtErr   ;If no bytes, exit error
   283 00005604 EB0F                <1>     jmp short .exeProceed1
   284                              <1> .exeOvlySkipAlloc:
   285 00005606 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   286 0000560A 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   287 0000560D 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   288 00005611 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax   ;Pretend this is the case
   289                              <1> .exeProceed1:
   290                              <1>     ;Now we align the progBase to full header size aligned to the next page
   291 00005615 8B1D(16DA0300)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   292 0000561B 4801D8              <1>     add rax, rbx    ;Add this offset where the header should go in future
   293                              <1>     ;Now we section pad
   294 0000561E 50                  <1>     push rax
   295 0000561F 8B0D(FAD90300)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   296 00005625 FFC9                <1>     dec ecx ;Turn into a mask
   297 00005627 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   298 0000562A FFC1                <1>     inc ecx
   299 0000562C 4829C1              <1>     sub rcx, rax
   300 0000562F 5F                  <1>     pop rdi
   301 00005630 31C0                <1>     xor eax, eax
   302 00005632 F3AA                <1>     rep stosb
   303 00005634 48897DB8            <1>     mov qword [rbp - execFrame.pProgBase], rdi
   304                              <1>     ;So now copy one section at a time, read section header in
   305                              <1>     ;File pointer points to the directory table, so skip that
   306 00005638 8B15(46DA0300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   307                              <1>     ;Load however many directories we have into place
   308                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   309 0000563E C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   310 00005641 31C9                <1>     xor ecx, ecx
   311 00005643 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   312 00005647 B001                <1>     mov al, 1   ;Move handle forwards from current position
   313 00005649 E89BD8FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   314                              <1>     ;eax has pointer location after adjustment
   315 0000564E 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   316                              <1>     ;File now points to start of Section headers. Read first header in.
   317                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   318 00005651 488B7DB8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   319 00005655 0FB74D98            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   320                              <1> .loadLp:
   321 00005659 51                  <1>     push rcx    ;Save # of segments left on stack
   322 0000565A 57                  <1>     push rdi    ;Save the current buffer ptr here
   323 0000565B B928000000          <1>     mov ecx, imageSectionHdr_size
   324 00005660 488D15(4ADA0300)    <1>     lea rdx, sectHdr    ;Read section headers here
   325 00005667 E8E8030000          <1>     call .readDataFromHdl
   326 0000566C 5F                  <1>     pop rdi
   327 0000566D 59                  <1>     pop rcx
   328 0000566E 85C0                <1>     test eax, eax
   329 00005670 0F84BD030000        <1>     jz .badFmtErr
   330 00005676 3D28000000          <1>     cmp eax, imageSectionHdr_size
   331 0000567B 0F85B2030000        <1>     jne .badFmtErr
   332                              <1>     ;File ptr moved forwards to next section header
   333 00005681 81459028000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   334                              <1>     ;Section header read, now we load section into memory
   335                              <1>     ;Move file ptr to data location
   336 00005688 8B15(5EDA0300)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   337 0000568E 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   338 00005692 31C0                <1>     xor eax, eax    ;Seek from start of file
   339 00005694 51                  <1>     push rcx
   340 00005695 57                  <1>     push rdi
   341 00005696 E84ED8FFFF          <1>     call lseekHdl
   342 0000569B 5F                  <1>     pop rdi
   343 0000569C 59                  <1>     pop rcx
   344                              <1> 
   345 0000569D 51                  <1>     push rcx
   346 0000569E 57                  <1>     push rdi    ;Save current buffer offset
   347 0000569F 31FF                <1>     xor edi, edi
   348 000056A1 8B3D(56DA0300)      <1>     mov edi, dword [sectHdr + imageSectionHdr.dVirtualAddress]  ;Get where it should go in memory, offset from image base
   349 000056A7 48037DB8            <1>     add rdi, qword [rbp - execFrame.pProgBase]  ;Turn into offset from progbase
   350                              <1>     ;If a section has a virtual address outside of the allocation arena
   351                              <1>     ; refuse to load it IF it contains no BSS, Data or Code and skip to the 
   352                              <1>     ; next section.
   353 000056AB 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   354 000056AF 4881EA10000000      <1>     sub rdx, mcb_size   ;Go back a unit of mcb
   355 000056B6 31C9                <1>     xor ecx, ecx
   356 000056B8 8B4A09              <1>     mov ecx, dword [rdx + mcb.blockSize]
   357 000056BB 48C1E104            <1>     shl rcx, 4  ;Convert to bytes (multiply by 16)
   358 000056BF 4881C210000000      <1>     add rdx, mcb_size   ;Go to the first byte of the mcb
   359 000056C6 4801CA              <1>     add rdx, rcx    ;Now rdx points to the first byte outside the arena
   360 000056C9 4839FA              <1>     cmp rdx, rdi    ;If rdx > rdi, we are ok
   361 000056CC 7714                <1>     ja .okToLoad
   362                              <1>     ;Now check if this is a useless section. If so, we don't load it at all
   363 000056CE F705(6EDA0300)E000- <1>     test dword [sectHdr + imageSectionHdr.dCharacteristics], imgScnCntBSS | imgScnCntCode | imgScnCntData
   363 000056D6 0000                <1>
   364 000056D8 0F8555030000        <1>     jnz .badFmtErr  ;If any of these bits set, error out
   365                              <1>     ;Else, just skip this section, goto next section
   366 000056DE 5F                  <1>     pop rdi
   367 000056DF 59                  <1>     pop rcx
   368 000056E0 EB62                <1>     jmp short .gotoNextSection
   369                              <1> .okToLoad:
   370 000056E2 8B0D(5ADA0300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dSizeOfRawData]   ;Get # of bytes
   371 000056E8 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   372 000056EB E864030000          <1>     call .readDataFromHdl
   373 000056F0 5F                  <1>     pop rdi
   374 000056F1 59                  <1>     pop rcx
   375 000056F2 0F823B030000        <1>     jc .badFmtErr
   376 000056F8 85C0                <1>     test eax, eax
   377 000056FA 0F8433030000        <1>     jz .badFmtErr
   378 00005700 3B05(5ADA0300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   379 00005706 0F8527030000        <1>     jne .badFmtErr
   380                              <1>     ;Data read ok, now fill in any zeros needed
   381 0000570C 8B05(5ADA0300)      <1>     mov eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   382 00005712 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   383 00005715 3B05(52DA0300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   384 0000571B 730E                <1>     jae .skipInnerPadding
   385 0000571D 51                  <1>     push rcx
   386 0000571E 8B0D(52DA0300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]
   387 00005724 29C1                <1>     sub ecx, eax    ;Get number of bytes to pad with in ecx
   388                              <1>     ;rdi points to pad space
   389 00005726 31C0                <1>     xor eax, eax
   390 00005728 F3AA                <1>     rep stosb   ;Pad that many zeros
   391 0000572A 59                  <1>     pop rcx
   392                              <1> .skipInnerPadding:
   393 0000572B 51                  <1>     push rcx
   394                              <1>     ;Here do section padding
   395 0000572C 4889F8              <1>     mov rax, rdi    ;Get the current address
   396 0000572F 8B0D(FAD90300)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   397 00005735 FFC9                <1>     dec ecx ;Turn into a mask
   398 00005737 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   399 0000573A FFC1                <1>     inc ecx
   400 0000573C 4829C1              <1>     sub rcx, rax
   401                              <1>     ;mov rcx, rax    ;Thats the number of bytes to pad by
   402 0000573F 31C0                <1>     xor eax, eax
   403 00005741 F3AA                <1>     rep stosb
   404 00005743 59                  <1>     pop rcx
   405                              <1> .gotoNextSection:
   406 00005744 FFC9                <1>     dec ecx ;Decrement our section counter
   407 00005746 7419                <1>     jz .doExeFixups
   408                              <1>     ;Read next section header in here
   409 00005748 51                  <1>     push rcx
   410 00005749 57                  <1>     push rdi
   411 0000574A 30C0                <1>     xor al, al  ;Move rel start of file
   412 0000574C 8B5590              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   413 0000574F 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   414 00005753 31C9                <1>     xor ecx, ecx
   415 00005755 E88FD7FFFF          <1>     call lseekHdl
   416 0000575A 5F                  <1>     pop rdi
   417 0000575B 59                  <1>     pop rcx
   418 0000575C E9F8FEFFFF          <1>     jmp .loadLp
   419                              <1> .doExeFixups:
   420                              <1> ;Here we fixup addresses if needed
   421                              <1> ;If the program is loaded at its desired location never need to relocate.
   422                              <1> ;Else we need to have a .reloc section to see if we need to do relocations. 
   423                              <1> ;   If the program has had it's .reloc section stripped by the linker
   424                              <1> ;       or has no .reloc directory, we fail
   425                              <1> ;   Else, we read the .reloc directory in. It most likely will have no 
   426                              <1> ;       relocations anyway.
   427                              <1> 
   428                              <1> ;If program base = desired load, skip relocs
   429 00005761 488B55B8            <1>     mov rdx, qword [rbp - execFrame.pProgBase]
   430 00005765 483B15(F2D90300)    <1>     cmp rdx, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   431 0000576C 0F84B7000000        <1>     je .exeComplete
   432                              <1> ;If program has had relocs stripped, fail
   433 00005772 0FB745A0            <1>     movzx eax, word [rbp - execFrame.wCOFFChars]
   434 00005776 66A90100            <1>     test ax, imageFileRelocsStripped
   435 0000577A 0F85B3020000        <1>     jnz .badFmtErr
   436                              <1> ;If program has no .reloc section, fail
   437 00005780 8B15(46DA0300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   438 00005786 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   439 0000578C 0F82A1020000        <1>     jb .badFmtErr ;Need relocs but no .reloc directory exists
   440                              <1> ;Now we get the reloc section
   441 00005792 8B55A8              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   442 00005795 81C2B0000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   443                              <1>     ;eax now points to position in file of directory entry for reloc
   444 0000579B 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   445 0000579F 31C0                <1>     xor eax, eax
   446 000057A1 E843D7FFFF          <1>     call lseekHdl   ;Move handle there in file
   447 000057A6 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   448 000057A9 B908000000          <1>     mov ecx, imageDataDirectory_size
   449                              <1>     ;Read 8 bytes into sectHdr space
   450 000057AE 488D15(4ADA0300)    <1>     lea rdx, sectHdr
   451 000057B5 E89A020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   452 000057BA 85C0                <1>     test eax, eax
   453 000057BC 0F8471020000        <1>     jz .badFmtErr
   454 000057C2 39C8                <1>     cmp eax, ecx
   455 000057C4 0F8569020000        <1>     jne .badFmtErr
   456                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   457                              <1>     ;cmp byte [rbp - execFrame.bSubFunc], execOverlay    ;If overlay, skip this
   458                              <1>     ;jz .exeComplete
   459 000057CA 8B35(4ADA0300)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   460 000057D0 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   461 000057D2 7455                <1>     jz .exeComplete   ;... including if overlay
   462 000057D4 480375B8            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   463                              <1>     ;Now rsi points to where in memory the relocation data table is
   464                              <1>     ;Now compute the relocation factor 
   465 000057D8 488B45B8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   466 000057DC 482B05(F2D90300)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   467                              <1>     ;The value in rax gives how much to subtract by
   468 000057E3 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   469 000057E7 7507                <1>     jne .notOverlayReloc
   470 000057E9 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   471 000057ED 034308              <1>     add eax, dword [rbx + loadOvly.dRelocFct]   ;Add the overlay reloc factor
   472                              <1> .notOverlayReloc:
   473 000057F0 48894588            <1>     mov qword [rbp - execFrame.qRelocVal], rax  ;Save relocation value
   474 000057F4 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   475                              <1>     ;rsi points to relocation data table in memory
   476 000057F7 8B0D(4EDA0300)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   477 000057FD 85C9                <1>     test ecx, ecx    ;If no relocations, skip
   478 000057FF 7428                <1>     jz .exeComplete
   479                              <1>     ;rsi points to the first base relocation block. The relocations begin
   480                              <1>     ; after the first block
   481                              <1>     ;ecx has the number of base relocation blocks to process.
   482                              <1> .nextBlock:
   483 00005801 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   484 00005802 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   485 00005804 488B7DB8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   486 00005808 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   487 0000580B 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes
   488 0000580E D1E9                <1>     shr ecx, 1  ;Divide by 2 to get number of words = # of relocs to do
   489 00005810 67E311              <1>     jecxz .blockDone
   490                              <1> .blockNotDone:
   491 00005813 66AD                <1>     lodsw   ;Get the next page offset word
   492 00005815 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   493 0000581A 4801C7              <1>     add rdi, rax    ;Add this offset to rdi, the pointer to program image
   494                              <1>     ;rdi points to qword to rebase
   495 0000581D 48011F              <1>     add qword [rdi], rbx    ;Relocation factor was saved in rbx
   496 00005820 FFC9                <1>     dec ecx
   497 00005822 75EF                <1>     jnz .blockNotDone
   498                              <1> .blockDone:
   499 00005824 59                  <1>     pop rcx
   500 00005825 FFC9                <1>     dec ecx
   501 00005827 75D8                <1>     jnz .nextBlock
   502                              <1> .exeComplete:
   503 00005829 8B05(EAD90300)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   504 0000582F 480345B8            <1>     add rax, qword [rbp - execFrame.pProgBase]
   505 00005833 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   506                              <1>     ;Now we copy the header into the memory space to pspPtr+psp_size
   507 00005837 31C9                <1>     xor ecx, ecx
   508 00005839 31D2                <1>     xor edx, edx
   509 0000583B 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]    ;Get the handle
   510 0000583F 31C0                <1>     xor eax, eax
   511 00005841 E8A3D6FFFF          <1>     call lseekHdl
   512 00005846 8B0D(16DA0300)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   513 0000584C 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pPSPBase] 
   514 00005850 4881C200010000      <1>     add rdx, psp_size
   515 00005857 E8F8010000          <1>     call .readDataFromHdl
   516 0000585C 0F82D1010000        <1>     jc .badFmtErr
   517 00005862 85C0                <1>     test eax, eax
   518 00005864 0F84C9010000        <1>     jz .badFmtErr
   519 0000586A 39C1                <1>     cmp ecx, eax
   520 0000586C 0F85C1010000        <1>     jnz .badFmtErr
   521 00005872 FF15(A4C00300)      <1>     call qword [registerDLL]    ;Now we register the DLL and any import/exports
   522 00005878 0F82B5010000        <1>     jc .badFmtErr   ;If this errors out for some reason, quit loading EXE
   523 0000587E E9A1000000          <1>     jmp .buildChildPSP
   524                              <1> .loadCom:
   525                              <1>     ;File is open here, so just read the file into memory. 
   526                              <1>     ;The file cannot exceed 64Kb in size. COM ONLY for small files!!!!
   527                              <1>     ;Allocate 64Kb of memory, or as much as we can
   528 00005883 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   529 00005887 7450                <1>     je .comOverlay
   530 00005889 BBFFFF0000          <1>     mov ebx, 0FFFFh ;64Kb pls
   531 0000588E 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   532 00005891 55                  <1>     push rbp
   533 00005892 E82BF3FFFF          <1>     call allocateMemory
   534 00005897 5D                  <1>     pop rbp
   535 00005898 734C                <1>     jnc .comallocOk
   536 0000589A 3C08                <1>     cmp al, errNoMem
   537 0000589C 0F8596010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   538                              <1>     ;rbx should have the amount available
   539                              <1>     ;We check if this value is psp_size more than filesize
   540 000058A2 53                  <1>     push rbx    ;Save new minimum size
   541 000058A3 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   542 000058A8 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   543 000058AC 31D2                <1>     xor edx, edx    ;Go to end of file
   544 000058AE E836D6FFFF          <1>     call lseekHdl
   545                              <1>     ;eax has file size
   546 000058B3 5B                  <1>     pop rbx ;Get back max alloc size
   547 000058B4 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   548 000058B6 29C2                <1>     sub edx, eax
   549 000058B8 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   550 000058BE 0F82CCFBFFFF        <1>     jb .insufficientMemory   ;Fail
   551 000058C4 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   552 000058C7 55                  <1>     push rbp
   553 000058C8 E8F5F2FFFF          <1>     call allocateMemory
   554 000058CD 5D                  <1>     pop rbp
   555 000058CE 0F8264010000        <1>     jc .cleanAndFail
   556 000058D4 E90D000000          <1>     jmp .comallocOk
   557                              <1> .comOverlay:
   558                              <1>     ;Here we simply read the file into the buffer provided
   559 000058D9 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   560 000058DD 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   561 000058E0 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   562 000058E4 EB0A                <1>     jmp short .comRead
   563                              <1> .comallocOk:
   564                              <1>     ;rax should point to the first byte
   565 000058E6 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   566 000058EA 480500010000        <1>     add rax, psp_size
   567                              <1> .comRead:
   568 000058F0 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   569                              <1> 
   570 000058F4 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   571 000058F9 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   572 000058FD 31D2                <1>     xor edx, edx    ;Go to end of file
   573 000058FF E8E5D5FFFF          <1>     call lseekHdl
   574                              <1>     ;eax has filesize now
   575 00005904 50                  <1>     push rax    ;Save filesize
   576 00005905 31C0                <1>     xor eax, eax    ;Reposition to start of file
   577 00005907 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   578 0000590B 31D2                <1>     xor edx, edx    ;Go to start of file
   579 0000590D E8D7D5FFFF          <1>     call lseekHdl
   580 00005912 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   581 00005913 488B55B8            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   582 00005917 E838010000          <1>     call .readDataFromHdl   ;Read from the file handle
   583 0000591C 488B45B8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   584 00005920 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   585                              <1> .buildChildPSP:
   586                              <1>     ;We can close handle now
   587 00005924 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   588 00005928 55                  <1>     push rbp
   589 00005929 E8D0D4FFFF          <1>     call closeFileHdl   ;Close the file
   590 0000592E 5D                  <1>     pop rbp
   591                              <1> 
   592                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   593 0000592F 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   594 00005933 0F84D8000000        <1>     je .overlayExit
   595                              <1>     ;Now build the PSP
   596 00005939 8B75B0              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   597 0000593C 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   598 00005940 52                  <1>     push rdx
   599 00005941 55                  <1>     push rbp
   600 00005942 E8ECF7FFFF          <1>     call createPSP
   601 00005947 5D                  <1>     pop rbp
   602 00005948 5A                  <1>     pop rdx
   603                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   604 00005949 488915(14C40300)    <1>     mov qword [currentPSP], rdx
   605 00005950 E8B00F0000          <1>     call dosCrit1Enter
   606 00005955 E821010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   607                              <1> 
   608 0000595A 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   609 00005961 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi ;and set it!
   610                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   611                              <1>     ; and set FS to point to the PSP
   612 00005968 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   613                              <1> 
   614 0000596C 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   615 00005970 B925000000          <1>     mov ecx, fcb_size
   616 00005975 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   617 00005979 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   618 0000597B F3A4                <1>     rep movsb   ;Copy fcb 1 over
   619 0000597D 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   620 00005981 B925000000          <1>     mov ecx, fcb_size
   621 00005986 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   622 0000598A 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   623 0000598C F3A4                <1>     rep movsb   ;Copy fcb 2 over
   624 0000598E 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   625 00005992 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   626 00005999 B980000000          <1>     mov ecx, 80h
   627 0000599E F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   628                              <1> 
   629 000059A0 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   630 000059A2 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   631                              <1> 
   632                              <1>     ;Put PSP base value in edx:eax to place in FS, dont rely on this in future!
   633 000059A5 B9000100C0          <1>     mov ecx, 0C0000100h ;R/W FS MSR
   634 000059AA 89D0                <1>     mov eax, edx    ;Move low dword address into rax
   635 000059AC 48C1EA20            <1>     shr rdx, 20h    ;Shift high dword in low dword
   636 000059B0 0F30                <1>     wrmsr   ;Write the new value to FS MSR
   637                              <1> 
   638 000059B2 E8F30A0000          <1>     call getUserRegs    ;Need to get Int 42h address from stack
   639 000059B7 488B4648            <1>     mov rax, qword [rsi + callerFrame.rip]  ;Get parent return address
   640 000059BB 4889470A            <1>     mov qword [rdi + psp.oldInt42h], rax    ;and save it in PSP
   641 000059BF 4889C2              <1>     mov rdx, rax    ;Move return address to rdx to set up the Interrupt Vector
   642 000059C2 B042                <1>     mov al, 42h
   643 000059C4 E834110000          <1>     call setIntVector   ;bx preserved by this call
   644                              <1> 
   645                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   646 000059C9 88D8                <1>     mov al, bl
   647 000059CB 30DB                <1>     xor bl, bl
   648 000059CD E8FC0A0000          <1>     call setDrive
   649 000059D2 7302                <1>     jnc .drive1Ok
   650 000059D4 B3FF                <1>     mov bl, -1
   651                              <1> .drive1Ok:
   652 000059D6 88F8                <1>     mov al, bh
   653 000059D8 30FF                <1>     xor bh, bh
   654 000059DA E8EF0A0000          <1>     call setDrive
   655 000059DF 7302                <1>     jnc .drive2Ok
   656 000059E1 B7FF                <1>     mov bh, -1
   657                              <1> .drive2Ok:
   658                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   659                              <1>     ;rdi has pointer to psp
   660 000059E3 8B75B0              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   661                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   662 000059E6 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   663 000059EB 48B8F8FFFFFFFFFFFF- <1>     mov rax, ~7     ;Clear the bottom 3 bits
   663 000059F4 FF                  <1>
   664 000059F5 4821C6              <1>     and rsi, rax    ;To align downwards
   665                              <1>     ;We align stack to qword. x64 ABI requires paragraph alignment.
   666                              <1>     ;That is the job of the runtime to handle.
   667 000059F8 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   668 000059FC 741C                <1>     je .xfrProgram
   669 000059FE 488B4598            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   670 00005A02 488B55D8            <1>     mov rdx, qword [rbp - execFrame.pParam]
   671 00005A06 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   672 00005A0A 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   673 00005A0E 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   674                              <1> .overlayExit:
   675 00005A11 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   676 00005A14 5D                  <1>     pop rbp ;Point rsp to the return address
   677 00005A15 E9280F0000          <1>     jmp extGoodExit ;And return!
   678                              <1> .xfrProgram:
   679 00005A1A FA                  <1>     cli
   680 00005A1B 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   681 00005A1E C605(FDC30300)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   682 00005A25 FB                  <1>     sti
   683 00005A26 FF7598              <1>     push qword [rbp - execFrame.pProgEP]
   684 00005A29 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   685 00005A2C 4989F9              <1>     mov r9, rdi
   686 00005A2F 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   687                              <1>     return  ;Return to child task
    13                              <2> %%_ret:
    14 00005A32 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   688                              <1> ;r8 is guaranteed to have a copy of the PSP.
   689                              <1> ;ax is guaranteed to have the validity signatures in AH and AL.
   690                              <1> ;Everything else is optional and potentially changable at a later stage
   691                              <1> 
   692                              <1> .badFmtErr:
   693 00005A33 B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   694                              <1> .cleanAndFail:
   695                              <1> ;Close the open file and any open resources and fail
   696 00005A38 E82F000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   697 00005A3D E8CD0E0000          <1>     call dosCrit1Exit
   698 00005A42 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   699 00005A46 50                  <1>     push rax    ;Save error code
   700 00005A47 55                  <1>     push rbp
   701 00005A48 E8B1D3FFFF          <1>     call closeFileHdl
   702 00005A4D 5D                  <1>     pop rbp
   703 00005A4E 58                  <1>     pop rax
   704 00005A4F E97EF9FFFF          <1>     jmp .badExit
   705                              <1> 
   706                              <1> .readDataFromHdl:
   707                              <1> ;Input: ecx = Number of bytes to transfer
   708                              <1> ;       rdx = Ptr to the buffer to use
   709 00005A54 52                  <1>     push rdx
   710 00005A55 E812000000          <1>     call .clearArenaOwner   ;Entering critical section!
   711 00005A5A 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   712 00005A5E 55                  <1>     push rbp
   713 00005A5F E8D9D3FFFF          <1>     call readFileHdl
   714 00005A64 5D                  <1>     pop rbp
   715 00005A65 E811000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   716 00005A6A 5A                  <1>     pop rdx
   717                              <1>     return
    13                              <2> %%_ret:
    14 00005A6B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   718                              <1> .clearArenaOwner:
   719 00005A6C 53                  <1>     push rbx
   720 00005A6D 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   721 00005A6F E8910E0000          <1>     call dosCrit1Enter
   722 00005A74 E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   723 00005A79 5B                  <1>     pop rbx
   724                              <1>     return
    13                              <2> %%_ret:
    14 00005A7A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   725                              <1> .setPSPArenaOwner:
   726                              <1> ;Sets the current PSP as the arena owner
   727 00005A7B 53                  <1>     push rbx
   728 00005A7C 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP]
   729 00005A83 E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   730 00005A88 E8820E0000          <1>     call dosCrit1Exit
   731 00005A8D 5B                  <1>     pop rbx
   732                              <1>     return
    13                              <2> %%_ret:
    14 00005A8E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   733                              <1> .setProgOrEnvArenaOwnerToRBX:
   734                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   735 00005A8F 9C                  <1>     pushfq
   736 00005A90 50                  <1>     push rax
   737                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   738                              <1>     ;This is because they are set up at separate points in the routine!
   739 00005A91 488B45C0            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   740 00005A95 E80C000000          <1>     call .writeArenaHeaderOwner
   741 00005A9A 488B45C8            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   742 00005A9E E803000000          <1>     call .writeArenaHeaderOwner
   743 00005AA3 58                  <1>     pop rax
   744 00005AA4 9D                  <1>     popfq
   745                              <1>     return
    13                              <2> %%_ret:
    14 00005AA5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   746                              <1> .writeArenaHeaderOwner:
   747                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   748                              <1> ;       rbx = Owner ID
   749 00005AA6 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   750                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00005AA9 74FA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   751 00005AAB 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   752 00005AB1 48895801            <1>     mov qword [rax + 1], rbx
   753                              <1>     return
    13                              <2> %%_ret:
    14 00005AB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    38                                  %include "./Source/Kernel/Local/local.asm"
     1                              <1> ;Localisation based functions live here
     2                              <1> 
     3                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
     4                              <1> ;al = 0 => Get the switch char
     5                              <1> ;al = 1 => Set the switch char to whats in DL
     6                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
     7                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
     8                              <1> ;       Always returns -1 => /DEV/ optional
     9                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    10                              <1> ;       Input value is ignored
    11 00005AB6 3C01                <1>     cmp al, 01
    12 00005AB8 740B                <1>     je .setSC
    13 00005ABA 7210                <1>     jb .getSC
    14 00005ABC 3C03                <1>     cmp al, 03
    15 00005ABE 7214                <1>     jb .getDev
    16 00005AC0 741C                <1>     je .setDev
    17 00005AC2 B0FF                <1>     mov al, -1
    18                              <1>     return
    13                              <2> %%_ret:
    14 00005AC4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> .setSC:
    20 00005AC5 8815(C6C30300)      <1>     mov byte [switchChar], dl
    21                              <1>     return
    13                              <2> %%_ret:
    14 00005ACB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> .getSC:
    23 00005ACC 8A15(C6C30300)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    24 00005AD2 EB02                <1>     jmp short .getRet
    25                              <1> .getDev:
    26 00005AD4 B2FF                <1>     mov dl, -1
    27                              <1> .getRet:
    28 00005AD6 E8CF090000          <1>     call getUserRegs
    29 00005ADB 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    30                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    31                              <1>     return
    13                              <2> %%_ret:
    14 00005ADE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> 
    34                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    35                              <1> ;Currently only accept subfunction al = 0, current country
    36                              <1> ;AL > 0 => errInvFnc, Subfunction error
    37                              <1> ;rdx = Ptr to buffer. If -1 => Set Country information. Also error for now.
    38 00005ADF 84C0                <1>     test al, al
    39 00005AE1 740A                <1>     jz .currentCountry
    40                              <1> .invalidFunction:
    41 00005AE3 B801000000          <1>     mov eax, errInvFnc
    42 00005AE8 E9630E0000          <1>     jmp extErrExit
    43                              <1> .currentCountry:
    44 00005AED 4881FAFFFFFFFF      <1>     cmp rdx, -1
    45 00005AF4 74ED                <1>     je .invalidFunction
    46 00005AF6 488D351FA5FFFF      <1>     lea rsi, ctryTbl
    47 00005AFD 4889D7              <1>     mov rdi, rdx
    48 00005B00 B926000000          <1>     mov ecx, countryStruc_size
    49 00005B05 F3A4                <1>     rep movsb
    50 00005B07 31C0                <1>     xor eax, eax
    51 00005B09 E9340E0000          <1>     jmp extGoodExit
    52                              <1> 
    53                              <1> 
    54                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    55                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    56 00005B0E C3                  <1>     ret
    39                                  %include "./Source/Kernel/ctrlc.asm"
     1                              <1> 
     2                              <1> fullcriticalErrorInvoke:
     3 00005B0F B803000000          <1>     mov eax, 03 ;Always fail for now
     4 00005B14 F9                  <1>     stc
     5                              <1>     return
    13                              <2> %%_ret:
    14 00005B15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     6                              <1> xlatHardError:
     7                              <1> ;Translates a hard error code to a generic DOS error
     8                              <1> ;Input: edi = eax = Hard Error Code
     9 00005B16 50                  <1>     push rax
    10 00005B17 3D13000000          <1>     cmp eax, drvErrShft
    11 00005B1C 7205                <1>     jb .skipXlat
    12 00005B1E 0513000000          <1>     add eax, drvErrShft
    13                              <1> .skipXlat:
    14 00005B23 8805A8A7FFFF        <1>     mov byte [hardErrorStack], al   ;Store this error code here
    15 00005B29 58                  <1>     pop rax
    16 00005B2A 56                  <1>     push rsi
    17 00005B2B 488D35FBA5FFFF      <1>     lea rsi, extErrTbl
    18 00005B32 E8720E0000          <1>     call setErrorVars
    19 00005B37 5E                  <1>     pop rsi
    20                              <1>     return
    13                              <2> %%_ret:
    14 00005B38 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> diskDevErr:
    23                              <1> ;Called, NOT Jumped to. 
    24                              <1> ;Input: rdi = Disk Buffer pointer
    25                              <1> ;       eax = Status word (Zero Extended)
    26                              <1> ;       rbp = Disk DPB pointer
    27                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    28                              <1> ;Output: al = Int 44h response (0-3)
    29                              <1> ; All other registers preserved
    30 00005B39 48893D(04C40300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    31 00005B40 89C7                <1>     mov edi, eax    ;Store status word in rdi
    32 00005B42 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    33 00005B45 8A25(5CC40300)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    34 00005B4B 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    35                              <1>     ;Test for correct buffer data type
    36 00005B4E 53                  <1>     push rbx    ;Save rbx temporarily
    37 00005B4F 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    38 00005B52 F6C301              <1>     test bl, dosBuffer
    39 00005B55 7505                <1>     jnz .df0
    40 00005B57 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    41 00005B5A EB17                <1>     jmp short .df3
    42                              <1> .df0:
    43 00005B5C F6C302              <1>     test bl, fatBuffer
    44 00005B5F 7505                <1>     jnz .df1
    45 00005B61 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    46 00005B64 EB0D                <1>     jmp short .df3
    47                              <1> .df1:
    48 00005B66 F6C304              <1>     test bl, dirBuffer
    49 00005B69 7505                <1>     jnz .df2
    50 00005B6B 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    51 00005B6E EB03                <1>     jmp short .df3
    52                              <1> .df2:
    53 00005B70 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    54                              <1> .df3:
    55 00005B73 5B                  <1>     pop rbx
    56 00005B74 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    57 00005B78 E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    58 00005B7D 488B2D(7EC70300)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    59 00005B84 488B3D(04C40300)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    60                              <1>     return
    13                              <2> %%_ret:
    14 00005B8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> 
    62                              <1> charDevErr:
    63                              <1> ;Called with ah with additional bits
    64 00005B8C 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
    65                              <1> criticalErrorSetup:
    66 00005B8F 8825(5CC40300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    67 00005B95 48892D(7EC70300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
    68 00005B9C 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    69                              <1>     ;For now, fall through, but need much work to change it later! 
    70                              <1> 
    71                              <1> 
    72                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    73                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    74                              <1> ; to the critical error handler.
    75                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    76                              <1> ; and with Int44Bitfield set
    77                              <1> ;               AH = Critical Error Bitfield
    78                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    79                              <1> ;               Bit 6 - Reserved
    80                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    81                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    82                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    83                              <1> ;               Bits [2-1] = Affected Disk Error
    84                              <1> ;                     0 0   DOS area
    85                              <1> ;                     0 1   FAT area
    86                              <1> ;                     1 0   Directory area
    87                              <1> ;                     1 1   Data area
    88                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    89                              <1> ;               AL  = Failing drive number if AH[7] = 0
    90                              <1> ;               DIL = Error code for errorMsg
    91                              <1> ;               RSI = EA of Device Header for which device the error occured
    92                              <1> ;Return:
    93                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    94                              <1> ;                  = 1 - Retry the Operation    (Retry)
    95                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
    96                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    97                              <1> ; Return response from int 44h in al
    98                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
    99                              <1> ; This function will terminate the program if an abort was requested!
   100                              <1> ; This function also destroys RBP
   101 00005BA2 803D(FCC30300)01    <1>     cmp byte [critErrFlag], 1
   102 00005BA9 7204                <1>     jb .noIntError  ;If not 0, enter
   103 00005BAB B003                <1>     mov al, critFail    ;Else, return Fail always
   104 00005BAD EB51                <1>     jmp short .exit     ;Don't translate fail to abort
   105                              <1> .noIntError:
   106 00005BAF FA                  <1>     cli ;Disable Interrupts
   107 00005BB0 FE05(FCC30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   108 00005BB6 FE0D(FDC30300)      <1>     dec byte [inDOS]    ;Exiting DOS
   109 00005BBC 488925(54C40300)    <1>     mov qword [xInt44hRSP], rsp
   110 00005BC3 488B25(6FC40300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   111 00005BCA 31ED                <1>     xor ebp, ebp    ;Always zeroed
   112 00005BCC CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   113 00005BCE 488B25(54C40300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   114 00005BD5 C605(FCC30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   115 00005BDC FE05(FDC30300)      <1>     inc byte [inDOS]    ;Reenter DOS
   116 00005BE2 FB                  <1>     sti ;Reenable Interrupts
   117                              <1>     ;Now we check that the response given was allowed, and translate if needed
   118                              <1> .checkResponse:
   119 00005BE3 3C00                <1>     cmp al, critIgnore
   120 00005BE5 7421                <1>     je .checkIgnore
   121 00005BE7 3C01                <1>     cmp al, critRetry
   122 00005BE9 7428                <1>     je .checkRetry
   123 00005BEB 3C03                <1>     cmp al, critFail
   124 00005BED 752F                <1>     jne .abort   ;Must be abort
   125                              <1> .setFail:   ;Here is for fail
   126 00005BEF B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   127 00005BF1 FE05(5EC40300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   128 00005BF7 F605(5CC40300)08    <1>     test byte [Int44bitfld], critFailOK
   129 00005BFE 741E                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   130                              <1> .exit:
   131 00005C00 C605(FEC30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   132                              <1>     return
    13                              <2> %%_ret:
    14 00005C07 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   133                              <1> .checkIgnore:
   134 00005C08 F605(5CC40300)20    <1>     test byte [Int44bitfld], critIgnorOK
   135 00005C0F 75EF                <1>     jnz .exit
   136 00005C11 EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   137                              <1> .checkRetry:
   138 00005C13 F605(5CC40300)10    <1>     test byte [Int44bitfld], critRetryOK
   139 00005C1A 75E4                <1>     jnz .exit   
   140 00005C1C EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   141                              <1> .abort:
   142                              <1> ;Prepare to abort. We abort from within!
   143                              <1> ;If a network request requests abort, translate to fail
   144 00005C1E 803D(F2C60300)FF    <1>     cmp byte [dosInvoke], -1
   145 00005C25 7509                <1>     jne .kill   ;If this is zero, local invokation
   146 00005C27 C605(8AC40300)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   147 00005C2E EBD0                <1>     jmp short .exit
   148                              <1> .kill:
   149 00005C30 66893D(00C40300)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   150 00005C37 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   151 00005C39 C605(F6C60300)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   152 00005C40 E90FF6FFFF          <1>     jmp terminateClean.altEP
   153                              <1> 
   154                              <1> ctrlBreakHdlr:
   155 00005C45 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   156 00005C47 E8F2C5FFFF          <1>     call printCaretASCII
   157 00005C4C E81DC6FFFF          <1>     call printCRLF
   158                              <1>     ;Reset the console back to 0
   159 00005C51 C605(88C40300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   160                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   161                              <1> .exceptEP:
   162                              <1> ;If return via RET/RET 8 with CF set, DOS will abort program with errorlevel 0
   163                              <1> ;Else (RET/RET 8 with CF clear or IRET with CF ignored)
   164                              <1> ;   interrupted DOS call is restarted
   165 00005C58 FA                  <1> 	cli
   166 00005C59 488B25(6FC40300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   167 00005C60 E8720C0000          <1> 	call dosPopRegs ;Get user state back
   168 00005C65 C605(FDC30300)00    <1>     mov byte [inDOS], 0 ;Make sure we "exit" DOS 
   169 00005C6C C605(FCC30300)00    <1>     mov byte [critErrFlag], 0
   170 00005C73 488925(1CC40300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   171 00005C7A F8                  <1>     clc
   172 00005C7B CD43                <1>     int 43h ;Call critical error handler
   173 00005C7D FA                  <1>     cli ;Clear interrupts again
   174 00005C7E 488905(28C40300)    <1>     mov qword [oldRAX], rax ;Save rax
   175 00005C85 9C                  <1>     pushfq  ;Get flags in rax
   176 00005C86 58                  <1>     pop rax 
   177 00005C87 483B25(1CC40300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   178 00005C8E 750C                <1>     jne .checkCF
   179                              <1> .returnToDOS:
   180 00005C90 488B05(28C40300)    <1>     mov rax, qword [oldRAX]
   181 00005C97 E9E30A0000          <1>     jmp functionDispatch    ;Goto int 41h
   182                              <1> .checkCF:
   183 00005C9C 488B25(1CC40300)    <1>     mov rsp, qword [xInt43hRSP]  ;Account for the flags and SS:RSP left on stack
   184 00005CA3 A801                <1>     test al, 1  ;CF set?
   185 00005CA5 74E9                <1>     jz .returnToDOS ;If yes, subfunction number must be in al
   186 00005CA7 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   187 00005CAC C605(80C40300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   188 00005CB3 E9C70A0000          <1>     jmp functionDispatch
   189                              <1> 
   190                              <1> ;CPU Exception handlers
   191                              <1> ;If a CPU exception occurs, and inDOS = 0, the default behaviour will be to 
   192                              <1> ; CTRL+C exit.
   193                              <1> ; If inDOS > 0, then we assume the error is within DOS and thus we halt the
   194                              <1> ; system.
   195                              <1> ; Also halt if the application is it's own parent.
   196                              <1> ;An application should hook these interupts if they wish to not 
   197                              <1> ; CTRL+C exit, and instead return to DOS.
   198                              <1> i0:
   199 00005CB8 31C0                <1>     xor eax, eax
   200 00005CBA E9AB000000          <1>     jmp cpu_2args
   201                              <1> i1:
   202 00005CBF B801000000          <1>     mov eax, 1
   203 00005CC4 E9A1000000          <1>     jmp cpu_2args
   204                              <1> i2:
   205 00005CC9 B802000000          <1>     mov eax, 2
   206 00005CCE E997000000          <1>     jmp cpu_2args
   207                              <1> i3:
   208 00005CD3 B803000000          <1>     mov eax, 3
   209 00005CD8 E98D000000          <1>     jmp cpu_2args
   210                              <1> i4:
   211 00005CDD B804000000          <1>     mov eax, 4
   212 00005CE2 E983000000          <1>     jmp cpu_2args
   213                              <1> i5:
   214 00005CE7 B805000000          <1>     mov eax, 5
   215 00005CEC EB7C                <1>     jmp short cpu_2args
   216                              <1> i6:
   217 00005CEE B806000000          <1>     mov eax, 6
   218 00005CF3 EB75                <1>     jmp short cpu_2args
   219                              <1> i7:
   220 00005CF5 B807000000          <1>     mov eax, 7
   221 00005CFA EB6E                <1>     jmp short cpu_2args
   222                              <1> i8:
   223 00005CFC B808000000          <1>     mov eax, 8
   224 00005D01 EB60                <1>     jmp short cpu_3args
   225                              <1> i9:
   226 00005D03 B809000000          <1>     mov eax, 9
   227 00005D08 EB60                <1>     jmp short cpu_2args
   228                              <1> i10:
   229 00005D0A B80A000000          <1>     mov eax, 0Ah
   230 00005D0F EB52                <1>     jmp short cpu_3args
   231                              <1> i11:
   232 00005D11 B80B000000          <1>     mov eax, 0Bh
   233 00005D16 EB4B                <1>     jmp short cpu_3args
   234                              <1> i12:
   235 00005D18 B80C000000          <1>     mov eax, 0Ch
   236 00005D1D EB44                <1>     jmp short cpu_3args
   237                              <1> i13:
   238 00005D1F B80D000000          <1>     mov eax, 0Dh
   239 00005D24 EB3D                <1>     jmp short cpu_3args
   240                              <1> i14:
   241 00005D26 B80E000000          <1>     mov eax, 0Eh
   242 00005D2B EB2F                <1>     jmp short cpu_4args
   243                              <1> i15:
   244 00005D2D B80F000000          <1>     mov eax, 0Fh
   245 00005D32 EB36                <1>     jmp short cpu_2args
   246                              <1> i16:
   247 00005D34 B810000000          <1>     mov eax, 10h
   248 00005D39 EB2F                <1>     jmp short cpu_2args
   249                              <1> i17:
   250 00005D3B B811000000          <1>     mov eax, 11h
   251 00005D40 EB21                <1>     jmp short cpu_3args
   252                              <1> i18:
   253 00005D42 B812000000          <1>     mov eax, 12h
   254 00005D47 EB21                <1>     jmp short cpu_2args
   255                              <1> i19:
   256 00005D49 B813000000          <1>     mov eax, 13h
   257 00005D4E EB1A                <1>     jmp short cpu_2args
   258                              <1> i20:
   259 00005D50 B814000000          <1>     mov eax, 14h
   260 00005D55 EB13                <1>     jmp short cpu_2args
   261                              <1> i21:
   262 00005D57 B815000000          <1>     mov eax, 15h
   263                              <1> cpu_4args:
   264 00005D5C B903000000          <1>     mov ecx, 3
   265 00005D61 EB0C                <1>     jmp short cpu_exception
   266                              <1> cpu_3args:
   267 00005D63 B902000000          <1>     mov ecx, 2
   268 00005D68 EB05                <1>     jmp short cpu_exception
   269                              <1> cpu_2args:
   270 00005D6A B901000000          <1>     mov ecx, 1
   271                              <1> cpu_exception:
   272                              <1> ;Enter with:
   273                              <1> ; eax = Exception number in binary
   274                              <1> ; ecx = Number of arguments to print and pop from stack - 1 
   275 00005D6F 488D3501020000      <1>     lea rsi, .fatalt0   ;Get the ptr
   276 00005D76 BB29000000          <1>     mov ebx, fatalt0L  ;Get the length
   277 00005D7B E8AF010000          <1>     call .writeExceptionMessage
   278                              <1> 
   279 00005D80 803D(FDC30300)01    <1>     cmp byte [inDOS], 1
   280 00005D87 7327                <1>     jae .introStop
   281 00005D89 3D02000000          <1>     cmp eax, 2
   282 00005D8E 7420                <1>     je .introStop
   283                              <1> 
   284 00005D90 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP] ;If a command shell craps out, Halt
   285 00005D97 483B5B22            <1>     cmp rbx, qword [rbx + psp.parentPtr]
   286 00005D9B 7413                <1>     je .introStop
   287                              <1> 
   288 00005D9D 488D35FC010000      <1>     lea rsi, .fatal1
   289 00005DA4 BBC1000000          <1>     mov ebx, fatal1L
   290 00005DA9 E881010000          <1>     call .writeExceptionMessage
   291 00005DAE EB18                <1>     jmp short .introEnd
   292                              <1> .introStop:
   293 00005DB0 C605(82DA0300)FF    <1>     mov byte [haltDOS], -1
   294 00005DB7 488D35A6020000      <1>     lea rsi, .fatalHalt   ;Get the ptr
   295 00005DBE BB19000000          <1>     mov ebx, fatalHaltL  ;Get the length
   296 00005DC3 E867010000          <1>     call .writeExceptionMessage
   297                              <1> .introEnd:
   298 00005DC8 488D3D(72DA0300)    <1>     lea rdi, byteBuffer
   299 00005DCF E829010000          <1>     call .printbyte ;Store the error code in the byte buffer
   300 00005DD4 488D35(72DA0300)    <1>     lea rsi, byteBuffer
   301 00005DDB BB02000000          <1>     mov ebx, 2  ;Print the two nybbles
   302 00005DE0 E84A010000          <1>     call .writeExceptionMessage
   303                              <1> 
   304 00005DE5 488D3575020000      <1>     lea rsi, .fatal2
   305 00005DEC BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   306 00005DF1 E839010000          <1>     call .writeExceptionMessage
   307                              <1> 
   308 00005DF6 80F901              <1>     cmp cl, 1
   309 00005DF9 7768                <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   310                              <1> .cpurollprint:
   311 00005DFB 488D3D(72DA0300)    <1>     lea rdi, byteBuffer
   312 00005E02 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   313                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   314 00005E06 B108                <1>     mov cl, 8    ;8 bytes
   315                              <1> .cpurollprint1:
   316 00005E08 48C1C208            <1>     rol rdx, 8
   317 00005E0C 88D0                <1>     mov al, dl
   318 00005E0E 52                  <1>     push rdx
   319 00005E0F E8E9000000          <1>     call .printbyte
   320 00005E14 5A                  <1>     pop rdx
   321 00005E15 FEC9                <1>     dec cl
   322 00005E17 75EF                <1>     jnz .cpurollprint1
   323                              <1> 
   324 00005E19 BB10000000          <1>     mov ebx, 16 ;Print the 16 nybbles
   325 00005E1E 488D35(72DA0300)    <1>     lea rsi, byteBuffer
   326 00005E25 E805010000          <1>     call .writeExceptionMessage
   327                              <1> 
   328 00005E2A BB03000000          <1>     mov ebx, crlfL
   329 00005E2F 488D3547020000      <1>     lea rsi, .crlf
   330 00005E36 E8F4000000          <1>     call .writeExceptionMessage    
   331                              <1> 
   332 00005E3B F605(82DA0300)FF    <1>     test byte [haltDOS], -1
   333 00005E42 7516                <1>     jnz .fatalStop
   334 00005E44 E8D1000000          <1>     call .readInputChar
   335 00005E49 B8004C0000          <1>     mov eax, 4c00h
   336 00005E4E C605(80C40300)FF    <1>     mov byte [ctrlCExit], -1
   337 00005E55 E925090000          <1>     jmp functionDispatch    ;Call Int 41h politely
   338                              <1> .fatalStop:
   339                              <1> ;This is called if inDOS > 1 or NMI occured
   340                              <1> ;Permanently locks up the system by turning off interrupts and infinite looping.
   341 00005E5A E8BA0A0000          <1>     call dosCrit2Enter  ;Suspend multitasking now
   342                              <1> .fatalLp:
   343 00005E5F FA                  <1>     cli
   344 00005E60 F4                  <1>     hlt
   345 00005E61 EBFC                <1>     jmp short .fatalLp
   346                              <1> 
   347                              <1> .cpuextendederror:
   348 00005E63 5A                  <1>     pop rdx
   349 00005E64 48FFC9              <1>     dec rcx
   350 00005E67 51                  <1>     push rcx
   351 00005E68 488D3D(72DA0300)    <1>     lea rdi, byteBuffer
   352 00005E6F B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   353 00005E71 86D6                <1>     xchg dl, dh   
   354                              <1> .pr1:
   355 00005E73 88D0                <1>     mov al, dl
   356 00005E75 52                  <1>     push rdx
   357 00005E76 E882000000          <1>     call .printbyte
   358 00005E7B 5A                  <1>     pop rdx
   359 00005E7C C1CA08              <1>     ror edx, 8    ;Print just dx for now
   360 00005E7F FEC9                <1>     dec cl
   361 00005E81 75F0                <1>     jnz .pr1
   362                              <1> 
   363 00005E83 488D35(72DA0300)    <1>     lea rsi, byteBuffer
   364 00005E8A BB04000000          <1>     mov ebx, 4  ;Print four nybbles
   365 00005E8F E89B000000          <1>     call .writeExceptionMessage
   366                              <1> 
   367 00005E94 488D35C6010000      <1>     lea rsi, .fatal2
   368 00005E9B BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   369 00005EA0 E88A000000          <1>     call .writeExceptionMessage
   370                              <1> 
   371 00005EA5 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   372 00005EA6 48FFC9              <1>     dec rcx
   373 00005EA9 0F844CFFFFFF        <1>     jz .cpurollprint
   374                              <1> 
   375 00005EAF B108                <1>     mov cl, 8   ;16 nybbles
   376 00005EB1 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   377 00005EB4 488D3D(72DA0300)    <1>     lea rdi, byteBuffer
   378                              <1> .pr2:
   379 00005EBB 48C1C208            <1>     rol rdx, 8    ;Print rdx
   380 00005EBF 88D0                <1>     mov al, dl
   381 00005EC1 52                  <1>     push rdx
   382 00005EC2 E836000000          <1>     call .printbyte
   383 00005EC7 5A                  <1>     pop rdx
   384 00005EC8 FEC9                <1>     dec cl
   385 00005ECA 75EF                <1>     jnz .pr2
   386                              <1> 
   387 00005ECC 488D35(72DA0300)    <1>     lea rsi, byteBuffer
   388 00005ED3 BB10000000          <1>     mov ebx, 16
   389 00005ED8 E852000000          <1>     call .writeExceptionMessage
   390                              <1> 
   391 00005EDD 488D357D010000      <1>     lea rsi, .fatal2
   392 00005EE4 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   393 00005EE9 E841000000          <1>     call .writeExceptionMessage
   394                              <1> 
   395 00005EEE E908FFFFFF          <1>     jmp .cpurollprint
   396                              <1> 
   397                              <1> 
   398                              <1> .char:    ;Print a single character
   399 00005EF3 488D1D6D000000      <1>     lea rbx, .ascii
   400 00005EFA D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   401 00005EFB AA                  <1>     stosb   ;Store the byte in the buffer and inc rdi
   402 00005EFC C3                  <1>     ret
   403                              <1> .printbyte:
   404 00005EFD 88C2                <1>     mov dl, al            ;save byte in dl
   405 00005EFF 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   406 00005F03 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   407 00005F08 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   408 00005F0C E8E2FFFFFF          <1>     call .char
   409 00005F11 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   410 00005F14 E8DAFFFFFF          <1>     call .char
   411 00005F19 C3                  <1>     ret        
   412                              <1> 
   413                              <1> 
   414                              <1> .readInputChar:
   415 00005F1A C605(E1C40300)04    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvREAD    ;Wait for a char!
   416 00005F21 488D35(10C50300)    <1>     lea rsi, singleIObyt
   417 00005F28 BB01000000          <1>     mov ebx, 1  ;Read one char
   418 00005F2D EB07                <1>     jmp short .ioException
   419                              <1> .writeExceptionMessage:
   420                              <1> ;Called with ebx=Number of chars to print, rsi -> String to print
   421 00005F2F C605(E1C40300)08    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvWRITE
   422                              <1> .ioException:
   423 00005F36 C605(DFC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   424 00005F3D 66C705(E2C40300)00- <1>     mov word [critReqHdr + ioReqPkt.status], 0
   424 00005F45 00                  <1>
   425 00005F46 891D(F5C40300)      <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], ebx
   426 00005F4C 488D1D(DFC40300)    <1>     lea rbx, critReqHdr
   427 00005F53 488935(EDC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rsi
   428 00005F5A 488B35(59C00300)    <1>     mov rsi, qword [vConPtr]
   429 00005F61 E822010000          <1>     call goDriver
   430                              <1>     return
    13                              <2> %%_ret:
    14 00005F66 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> 
   433                              <1> ;Error messages
   434 00005F67 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   434 00005F70 39414243444546      <1>
   435 00005F77 0D0A0A202020202020- <1> .fatalt0:  db CR,LF,LF,"        SCP/DOS EXCEPTION DETECTED!",CR,LF,LF
   435 00005F80 20205343502F444F53- <1>
   435 00005F89 20455843455054494F- <1>
   435 00005F92 4E2044455445435445- <1>
   435 00005F9B 44210D0A0A          <1>
   436                              <1> fatalt0L   equ $ - .fatalt0
   437                              <1> 
   438                              <1> .fatal1:   
   439 00005FA0 202020204120706F74- <1>     db "    A potentially fatal error has been detected",CR,LF
   439 00005FA9 656E7469616C6C7920- <1>
   439 00005FB2 666174616C20657272- <1>
   439 00005FBB 6F7220686173206265- <1>
   439 00005FC4 656E20646574656374- <1>
   439 00005FCD 65640D0A            <1>
   440 00005FD1 20202020616E642074- <1>     db "    and the current application must be terminated.",CR,LF,LF
   440 00005FDA 68652063757272656E- <1>
   440 00005FE3 74206170706C696361- <1>
   440 00005FEC 74696F6E206D757374- <1>
   440 00005FF5 206265207465726D69- <1>
   440 00005FFE 6E617465642E0D0A0A  <1>
   441 00006007 202020205072657373- <1>     db "    Press any key to continue or CTRL+ALT+DEL to restart the machine."
   441 00006010 20616E79206B657920- <1>
   441 00006019 746F20636F6E74696E- <1>
   441 00006022 7565206F7220435452- <1>
   441 0000602B 4C2B414C542B44454C- <1>
   441 00006034 20746F207265737461- <1>
   441 0000603D 727420746865206D61- <1>
   441 00006046 6368696E652E        <1>
   442 0000604C 0D0A0A202020205359- <1>     db CR,LF, LF,"    SYSTEM ERROR: "   ;Print standard Error message here
   442 00006055 5354454D204552524F- <1>
   442 0000605E 523A20              <1>
   443                              <1> fatal1L equ $ - .fatal1
   444                              <1> 
   445 00006061 203A20              <1> .fatal2:   db " : "
   446                              <1> fatal2L    equ $ - .fatal2
   447                              <1> 
   448                              <1> ;The below error is displayed is inDOS > 1 or NMI occured
   449 00006064 202020205343502F44- <1> .fatalHalt: db "    SCP/DOS SYSTEM STOP: "
   449 0000606D 4F532053595354454D- <1>
   449 00006076 2053544F503A20      <1>
   450                              <1> fatalHaltL equ $ - .fatalHalt
   451 0000607D 0D0A0A              <1> .crlf:  db CR,LF,LF
   452                              <1> crlfL  equ $ - .crlf
    40                                  %include "./Source/Kernel/dosPrim.asm"
     1                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
     2                              <1> ; are placed here (Int 45h Int 46h and goDriver)
     3                              <1> 
     4                              <1> dosDefCritErrHdlr:
     5                              <1> ;The DOS default critical error handler always returns FAIL
     6 00006080 B003                <1>     mov al, critFail
     7 00006082 48CF                <1>     iretq
     8                              <1> goDriverChar:
     9                              <1> ;Shortcut for Char requests, make a driver request
    10                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    11 00006084 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    12                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    13                              <1> ;Input: rsi = Ptr to the driver to handle the call!
    14                              <1> ;       rbx = Ptr to the request header for the driver call!
    15 00006088 E88C080000          <1>     call dosCrit2Enter
    16 0000608D FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    17 00006090 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    18 00006093 E88B080000          <1>     call dosCrit2Exit
    19                              <1>     return
    13                              <2> %%_ret:
    14 00006098 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> setupPhysicalDiskRequest:
    22                              <1> ;Ensure that al has valid disk number
    23                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    24                              <1> ;If CF=NC, rbp = DPB ptr.
    25                              <1> ;If CF=CY, exit error
    26 00006099 84C0                <1>     test al, al
    27 0000609B 723F                <1>     jc .diskError
    28 0000609D 3A05(7EC00300)      <1>     cmp al, byte [lastdrvNum]
    29 000060A3 7337                <1>     jae .diskError
    30 000060A5 50                  <1>     push rax
    31 000060A6 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    32 000060A8 E88A040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    33 000060AD 58                  <1>     pop rax
    34 000060AE 7235                <1>     jc .error
    35 000060B0 8805(F9C60300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    36 000060B6 488B2D(02C70300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    37 000060BD 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    38 000060C5 750A                <1>     jnz .netError
    39 000060C7 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    40 000060CB E865030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    41                              <1>     return
    13                              <2> %%_ret:
    14 000060D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                              <1> .netError:
    43 000060D1 66C705(00C40300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    43 000060D9 00                  <1>
    44 000060DA EB09                <1>     jmp short .error
    45                              <1> .diskError:
    46 000060DC 66C705(00C40300)0F- <1>     mov word [errorExCde], errBadDrv
    46 000060E4 00                  <1>
    47                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    48 000060E5 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
    49 000060EC C605(02C40300)07    <1>     mov byte [errorAction], eActRetUsr
    50 000060F3 C605(03C40300)09    <1>     mov byte [errorClass], eClsBadFmt
    51 000060FA F9                  <1>     stc
    52                              <1>     return
    13                              <2> %%_ret:
    14 000060FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    53                              <1> 
    54                              <1> setupAbsDiskEntry:
    55                              <1> ;Prepares to sets up the CDS and DPB for the request
    56 000060FC FE05(FDC30300)      <1>     inc byte [inDOS]
    57 00006102 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    58 00006103 FC                  <1>     cld ;Set string ops in the right direction
    59 00006104 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    60 00006109 7223                <1>     jc .exit    ;Error exit
    61 0000610B C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    62 00006112 56                  <1>     push rsi
    63 00006113 50                  <1>     push rax
    64 00006114 488D35(12C50300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    65 0000611B 8806                <1>     mov byte [rsi], al  ;Construct a path
    66 0000611D 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    67 00006120 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
    68 00006124 F8                  <1>     clc
    69                              <1> ;++++++++++++++++++++++++++++
    70                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    71                              <1> ;Entered with path in rsi (ah=03h)
    72 00006125 B800030000          <1>     mov eax, 0300h  
    73 0000612A CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
    74                              <1> ;++++++++++++++++++++++++++++
    75 0000612C 58                  <1>     pop rax
    76 0000612D 5E                  <1>     pop rsi
    77                              <1> .exit:
    78 0000612E 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
    79                              <1>     return
    13                              <2> %%_ret:
    14 00006130 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> absDiskWrite:       ;Int 46h
    82                              <1> ;al = Drive number
    83                              <1> ;rbx = Memory Buffer address to read from
    84                              <1> ;ecx = Number of sectors to write
    85                              <1> ;rdx = Start LBA to write to
    86 00006131 FA                  <1>     cli
    87 00006132 488925(6FC40300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
    88 00006139 488D25(D0D90300)    <1>     lea rsp, DiskStakTop
    89 00006140 55                  <1>     push rbp
    90 00006141 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
    91 00006142 E8B5FFFFFF          <1>     call setupAbsDiskEntry
    92 00006147 7252                <1>     jc absDiskExit
    93 00006149 E8FA010000          <1>     call primReqWriteSetup
    94 0000614E EB1D                <1>     jmp short absDiskReadWriteCommon
    95                              <1> absDiskRead:        ;Int 45h
    96                              <1> ;al = Drive number
    97                              <1> ;rbx = Memory Buffer address to write to
    98                              <1> ;ecx = Number of sectors to read
    99                              <1> ;rdx = Start LBA to read from
   100 00006150 FA                  <1>     cli 
   101 00006151 488925(6FC40300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   102 00006158 488D25(D0D90300)    <1>     lea rsp, DiskStakTop
   103 0000615F 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   104 00006160 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   105 00006161 E896FFFFFF          <1>     call setupAbsDiskEntry
   106 00006166 7233                <1>     jc absDiskExit
   107 00006168 E8E6010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   108                              <1> absDiskReadWriteCommon:
   109                              <1> ;Entered with the appropriate function number in ah
   110                              <1> ; and primary request header in rbx
   111 0000616D E859000000          <1>     call absDiskDriverCall
   112 00006172 7427                <1>     jz absDiskExit  ;Skip error code checking
   113 00006174 8A05(B8C40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   114                              <1>     ;DOS uses the following pairs in a table
   115                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   116 0000617A B480                <1>     mov ah, 80h ;Attachment failure
   117 0000617C 3C0C                <1>     cmp al, 0Ch ;Gen error
   118 0000617E 741A                <1>     je .absExit
   119 00006180 B440                <1>     mov ah, 40h ;Seek error
   120 00006182 3C06                <1>     cmp al, 06h
   121 00006184 7414                <1>     je .absExit
   122 00006186 B408                <1>     mov ah, 08h ;Bad CRC
   123 00006188 3C04                <1>     cmp al, 04h
   124 0000618A 740E                <1>     je .absExit
   125 0000618C B404                <1>     mov ah, 04h ;Sector not found
   126 0000618E 3C08                <1>     cmp al, 08h
   127 00006190 7408                <1>     je .absExit
   128 00006192 30E4                <1>     xor ah, ah  ;Write Protect Violation
   129 00006194 84C0                <1>     test al, al
   130 00006196 7402                <1>     je .absExit
   131 00006198 B402                <1>     mov ah, 02h ;Other Error
   132                              <1> .absExit:
   133 0000619A F9                  <1>     stc
   134                              <1> absDiskExit:
   135 0000619B 5B                  <1>     pop rbx
   136 0000619C 5D                  <1>     pop rbp
   137 0000619D FA                  <1>     cli
   138 0000619E 488B25(6FC40300)    <1>     mov rsp, qword [oldRSP]
   139 000061A5 FB                  <1>     sti ;Reenable interrupts
   140 000061A6 488D0D0D000000      <1>     lea rcx, absStackJuggle
   141 000061AD 9C                  <1>     pushfq
   142 000061AE 5A                  <1>     pop rdx ;Get the current flags
   143 000061AF 48870C24            <1>     xchg qword [rsp], rcx   ;Get the old return address in rcx
   144 000061B3 4887542410          <1>     xchg rdx, qword [rsp + 2*8]  ;Swap old flags with current flags
   145 000061B8 48CF                <1>     iretq ;Return from interrupt (to align the stack as needed)
   146                              <1> absStackJuggle:
   147 000061BA FA                  <1>     cli
   148 000061BB 52                  <1>     push rdx    ;Push the flags on the stack
   149 000061BC 51                  <1>     push rcx    ;Push the return address on the stack
   150 000061BD 9C                  <1>     pushfq
   151 000061BE 31C9                <1>     xor ecx, ecx  ;Zero the registers without affecting the flags
   152 000061C0 89CA                <1>     mov edx, ecx
   153 000061C2 FE0D(FDC30300)      <1>     dec byte [inDOS]    ;Only now do we leave DOS
   154 000061C8 9D                  <1>     popfq
   155 000061C9 FB                  <1>     sti
   156                              <1>     return
    13                              <2> %%_ret:
    14 000061CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   157                              <1> 
   158                              <1> absDiskDriverCall:
   159                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   160                              <1> ;       rbx = Request header address
   161                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   162                              <1> ;       eax = Status word from request
   163                              <1> ;       ecx = Number of sectors transferred
   164 000061CB 56                  <1>     push rsi
   165                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   166 000061CC 8B0D(CBC40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   167                              <1>     ;Prepare for goDriver now
   168 000061D2 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   169 000061D6 E8ADFEFFFF          <1>     call goDriver   ;Make request
   170 000061DB 5E                  <1>     pop rsi
   171 000061DC 8B05(CBC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   172 000061E2 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   173 000061E4 0FB705(B8C40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   174 000061EB 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   175                              <1>     return
    13                              <2> %%_ret:
    14 000061EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   176                              <1> 
   177                              <1> getDiskDPB:
   178                              <1> ;Gets the disk DPB if the Disk is valid
   179                              <1> ;Otherwise will return a pointer to the drive DPB
   180                              <1> ;Called with rdi pointing to the CDS
   181                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   182 000061F0 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   183 000061F4 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   184 000061F7 8805(F9C60300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   185 000061FD E833020000          <1>     call setWorkingDPB
   186 00006202 57                  <1>     push rdi    ;Save the CDS ptr
   187 00006203 E84E000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   188 00006208 5F                  <1>     pop rdi
   189 00006209 724A                <1>     jc .exitBad ;Preserve CF
   190 0000620B 7547                <1>     jnz .exit
   191                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   192 0000620D 0FB60D(7EC00300)    <1>     movzx ecx, byte [lastdrvNum]
   193 00006214 31C0                <1>     xor eax, eax
   194 00006216 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   195 00006219 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   196 0000621D 488B3D(6BC00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   197                              <1> .checkCDS:
   198 00006224 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   199 0000622A 751D                <1>     jnz .next
   200 0000622C 48397745            <1>     cmp qword [rdi + cds.qDPBPtr], rsi
   201 00006230 7517                <1>     jne .next
   202 00006232 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   203 00006236 7411                <1>     jz .next    ;IF yes, skip it
   204 00006238 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax  ;Reset start cluster!
   205                              <1>     ;Subst drives should just fail if the subdir doesnt exist.
   206                              <1>     ;TEMP TEMP: subst will become deactivated and their StartingClust=-1
   207 0000623B 66F747430010        <1>     test word [rdi + cds.wFlags], cdsSubstDrive
   208 00006241 7406                <1>     jz .next    ;If bit not set, skip this next bit
   209 00006243 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Clear the flags rendering this drv dead
   210                              <1> .next:
   211 00006249 4881C75B000000      <1>     add rdi, cds_size
   212 00006250 FFC9                <1>     dec ecx
   213 00006252 75D0                <1>     jnz .checkCDS
   214                              <1> .exit:
   215 00006254 F8                  <1>     clc
   216                              <1> .exitBad:
   217                              <1>     return
    13                              <2> %%_ret:
    14 00006255 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> 
   219                              <1> ensureDiskValid:
   220                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   221                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   222                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   223                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   224                              <1> .medChk:
   225 00006256 E841010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   226                              <1> ;Return in rbx the req hdr address
   227 0000625B 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   228 0000625F E824FEFFFF          <1>     call goDriver   ;Request!
   229 00006264 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   230 00006268 F7C700800000        <1>     test edi, drvErrStatus
   231 0000626E 7575                <1>     jnz .diskDrvCritErrMedChk
   232                              <1> .medChkIgnore:
   233 00006270 8A05(F9C60300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   234 00006276 30E4                <1>     xor ah, ah
   235 00006278 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old flag
   236 0000627B 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   237 0000627E 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   238 00006280 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   239 00006282 E882A2FFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   240 00006287 F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   241 00006288 7206                <1>     jc .resetDPB   ;Exit ONLY if a dirty buffer found!
   242                              <1>     ;ZF=NZ from test for dirty buffers
   243                              <1> .exit:
   244                              <1>     return
    13                              <2> %%_ret:
    14 0000628A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   245                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   246 0000628B E89DA2FFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   247                              <1> .resetDPB:    ;If no buffers found, skip freeing them as theres nothing to free!
   248 00006290 C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1 ;Mark DPB as inaccurate now
   249 00006294 C605(D8D90300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   250                              <1>     ;Get a buffer to read BPB into in rdi
   251 0000629B 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   252 0000629D E88CA4FFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   253 000062A2 7239                <1>     jc .exitBad    ;Immediately exit with the carry flag set
   254 000062A4 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   255                              <1> .repeatEP:
   256 000062A8 E81B010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   257 000062AD 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   258 000062B1 E8D2FDFFFF          <1>     call goDriver   ;Request!
   259 000062B6 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   260 000062BA A900800000          <1>     test eax, drvErrStatus
   261 000062BF 7562                <1>     jnz .diskDrvCritErrBPB
   262                              <1>     ;Now rebuild the dpb fields for this drive
   263 000062C1 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   264 000062C5 53                  <1>     push rbx
   265 000062C6 E846090000          <1>     call createDPB  ;Modifies rbx and clears the free cluster count
   266 000062CB 5B                  <1>     pop rbx
   267                              <1>     ;Adjust the buffer header information
   268 000062CC 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   269 000062CF 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   270 000062D2 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   271 000062D5 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   272 000062D8 30E4                <1>     xor ah, ah    ;Set ZF and clear CF
   273 000062DA 886524              <1>     mov byte [rbp + dpb.bAccessFlag], ah ;DPB now ready to be used
   274                              <1> .exitBad:
   275 000062DD C605(D8D90300)00    <1>     mov byte [diskChange], 0   ;Clear Disk Change flag
   276                              <1>     return
    13                              <2> %%_ret:
    14 000062E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   277                              <1> .diskDrvCritErrMedChk:
   278                              <1> ;Critical Errors fall through here
   279                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   280 000062E5 48893D(04C40300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   281 000062EC 48892D(7EC70300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   282 000062F3 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   283 000062F6 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   284 000062F8 8825(5CC40300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   285 000062FE E89FF8FFFF          <1>     call criticalDOSError
   286 00006303 488B3D(04C40300)    <1>     mov rdi, qword [xInt44RDI]
   287 0000630A 488B2D(7EC70300)    <1>     mov rbp, qword [tmpDPBPtr]
   288 00006311 3C01                <1>     cmp al, critRetry
   289 00006313 0F843DFFFFFF        <1>     je .medChk
   290 00006319 3C00                <1>     cmp al, critIgnore
   291 0000631B 0F844FFFFFFF        <1>     je .medChkIgnore
   292 00006321 F9                  <1>     stc ;Set error flag to indicate fail
   293                              <1>     return ;And exit from function with CF set
    13                              <2> %%_ret:
    14 00006322 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> .diskDrvCritErrBPB:
   296                              <1>     ;eax has status word, rbp has dpb ptr
   297                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   298 00006323 C605(D8D90300)00    <1>     mov byte [diskChange], 0   ;Clear Disk Change flag (to prevent abort issues)
   299 0000632A C605(5CC40300)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   300 00006331 C605(D8D90300)FF    <1>     mov byte [diskChange], -1  ;Set Disk Change flag again as we are back in
   301 00006338 E8FCF7FFFF          <1>     call diskDevErr
   302 0000633D 3C01                <1>     cmp al, critRetry
   303 0000633F 0F8463FFFFFF        <1>     je .repeatEP
   304                              <1>     ;Else we fail (Ignore=Fail here)
   305 00006345 F9                  <1>     stc ;Set error flag to indicate fail
   306 00006346 EB95                <1>     jmp short .exitBad ;And exit from function with CF set
   307                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   308                              <1> ;           Primitive Driver Requests
   309                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   310                              <1> ;First are Disk requests, then Char device requests
   311                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   312                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   313                              <1> 
   314                              <1> primReqWriteSetup:
   315 00006348 50                  <1>     push rax
   316 00006349 B408                <1>     mov ah, drvWRITE    ;Command code
   317 0000634B 0225(C5C30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   318 00006351 EB03                <1>     jmp short primReqRWCommon
   319                              <1> primReqReadSetup:
   320 00006353 50                  <1>     push rax
   321 00006354 B404                <1>     mov ah, drvREAD
   322                              <1> primReqRWCommon:
   323                              <1> ;Sets up the IO request packet with:
   324                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   325                              <1> ; rbx = Data storage buffer ptr
   326                              <1> ; ecx = Number of sectors to transfer
   327                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   328                              <1> ; ~~~~ Set by entry function ~~~~ 
   329                              <1> ; ah = Command code
   330                              <1> ; All regs preserved EXCEPT rbx.
   331                              <1> ; Return: rbx = Transfer Address
   332 00006356 48891D(C3C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   333 0000635D 890D(CBC40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   334 00006363 C605(B5C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   335 0000636A 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   336 0000636F 8905(B6C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   337 00006375 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   338 00006378 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   339                              <1>     ;Disk operations only here!
   340 0000637A 488915(CFC40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   341 00006381 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   342 00006384 8805(C2C40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   343 0000638A 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   344 0000638D 8805(B6C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   345                              <1> primReqCommonExit:
   346                              <1> ;Returns in rbx the primary request header as these functions
   347                              <1> ; setup the request in the primary request header space
   348 00006393 58                  <1>     pop rax
   349 00006394 488D1D(B5C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   350                              <1>     return
    13                              <2> %%_ret:
    14 0000639B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   351                              <1> 
   352                              <1> primReqMedCheckSetup:
   353                              <1> ;Prepare the diskIO packet for mediacheck
   354                              <1> ;rbp has DPB pointer for device to check media on
   355 0000639C 50                  <1>     push rax
   356 0000639D C605(B5C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   357 000063A4 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   358 000063A7 8805(C2C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   359 000063AD 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   360 000063B0 8805(B6C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   361 000063B6 C605(B7C40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   362 000063BD 66C705(B8C40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   362 000063C5 00                  <1>
   363 000063C6 EBCB                <1>     jmp short primReqCommonExit
   364                              <1> 
   365                              <1> primReqGetBPBSetup:
   366                              <1> ;rbp has DPB pointer for device
   367                              <1> ;rdi has sector buffer header pointer for transfer
   368 000063C8 50                  <1>     push rax
   369 000063C9 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   370 000063CD 48893D(C3C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   371 000063D4 C605(B5C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   372 000063DB 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   373 000063DE 8805(C2C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   374 000063E4 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   375 000063E7 8805(B6C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   376 000063ED C605(B7C40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   377 000063F4 66C705(B8C40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   377 000063FC 00                  <1>
   378 000063FD EB94                <1>     jmp short primReqCommonExit
   379                              <1> 
   380                              <1> primReqOpenSetup:
   381                              <1> ;al = unit number if a disk device. Undefined otherwise
   382 000063FF 50                  <1>     push rax
   383 00006400 B40D                <1>     mov ah, drvOPEN
   384 00006402 EB03                <1>     jmp short primReqOCcommon
   385                              <1> primReqCloseSetup:
   386                              <1> ;al = unit number if a disk device. Undefined otherwise
   387 00006404 50                  <1>     push rax
   388 00006405 B40E                <1>     mov ah, drvCLOSE
   389                              <1> primReqOCcommon:
   390 00006407 C605(B5C40300)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   391 0000640E 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   392 0000640F 8905(B6C40300)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   393                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   394 00006415 E979FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   395                              <1> 
   396                              <1> secdReqCharIOReq:
   397                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   398                              <1> ;Input:
   399                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   400                              <1> ; ecx = Length of buffer
   401                              <1> ; rdi = Buffer pointer
   402                              <1> ;Output: 
   403                              <1> ; rbx = Transfer Address 
   404 0000641A 488D1D(8BC40300)    <1>     lea rbx, secdReqHdr
   405 00006421 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   406 00006424 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   407 00006427 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   408 0000642D 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   409 00006431 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   410                              <1>     return
    13                              <2> %%_ret:
    14 00006434 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> ;If the device which will process this request is a disk device
   412                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   413                              <1> ;Then we will read the appropriate byte from that buffer to the 
   414                              <1> ; singleIOByt buffer.
   415                              <1> ;Such a request will require additional setup with the following fields:
   416                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    41                                  %include "./Source/Kernel/dosUtils.asm"
     1                              <1> ;DOS utility functions 
     2                              <1> 
     3                              <1> ;Basic Drive related Utilities
     4                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
     5                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
     6                              <1> ; that gets set up)
     7                              <1> 
     8                              <1> setWorkingDPB:
     9                              <1> ;Gets dpb in rbp and saves to workingDPB
    10 00006435 48892D(FAC60300)    <1>     mov qword [workingDPB], rbp
    11                              <1>     return
    13                              <2> %%_ret:
    14 0000643C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    12                              <1> 
    13                              <1> testCDSNet:
    14                              <1> ;Checks if the workingCDS is a redirector drive
    15                              <1> ;Returns: CF=NC => Not net
    16                              <1> ;         CF=CY => Network redirector
    17                              <1> ;         ZF=ZE => Net without CDS (\\ paths only)
    18                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    19                              <1> ;         rdi = workingCDS ptr
    20 0000643D 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
    21 00006444 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    22 0000644B 7409                <1>     je .net
    23 0000644D 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    24 00006453 7501                <1>     jnz .net ;Net with CDS
    25                              <1>     return  ;CF=NC => Not net
    13                              <2> %%_ret:
    14 00006455 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> .net:
    27 00006456 F9                  <1>     stc ;Set Net bit
    28                              <1>     return
    13                              <2> %%_ret:
    14 00006457 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                              <1> 
    30                              <1> getDiskData:
    31                              <1> ;This function returns:
    32                              <1> ;al = sectors per cluster
    33                              <1> ;ah = media ID byte
    34                              <1> ;ebx = total clusters
    35                              <1> ;cx = bytes per sector
    36                              <1> ;edx = number of available clusters
    37                              <1> ;
    38                              <1> ;If CF=CY on exit, al contains the error code
    39 00006458 E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    40 0000645D 7308                <1>     jnc .physical
    41                              <1>     ;Beep a redir request out
    42 0000645F B80C110000          <1>     mov eax, 110Ch 
    43 00006464 CD4F                <1>     int 4Fh
    44                              <1>     return
    13                              <2> %%_ret:
    14 00006466 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                              <1> .physical:
    46                              <1> ;Now we must lock the structures
    47 00006467 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
    48 0000646E E892040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    49 00006473 E878FDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    50 00006478 721C                <1>     jc .exit
    51 0000647A E8B7A4FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    52 0000647F 7215                <1>     jc .exit
    53 00006481 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    54 00006484 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    55 00006486 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    56 00006489 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    57 0000648C FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
    58 0000648E 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    59 00006492 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
    60 00006495 F8                  <1>     clc
    61                              <1> .exit:
    62 00006496 E874040000          <1>     call dosCrit1Exit
    63                              <1>     return
    13                              <2> %%_ret:
    14 0000649B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    64                              <1> 
    65                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
    66                              <1> ;Input: al = Interrupt number
    67                              <1> ;Output: rbx = Interrupt Vector
    68 0000649C 50                  <1>     push rax    ;Preserve rax, segment selector returned by call
    69 0000649D 52                  <1>     push rdx    ;Preserve rdx, Attribute Word returned by call
    70 0000649E 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
    71 000064A0 B807F00000          <1>     mov eax, 0F007h
    72 000064A5 CD35                <1>     int 35h
    73 000064A7 5A                  <1>     pop rdx
    74 000064A8 58                  <1>     pop rax
    75                              <1>     return
    13                              <2> %%_ret:
    14 000064A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    76                              <1> 
    77                              <1> getUserRegs:   ;Int 4Fh AX=1218h
    78                              <1> ;Returns ptr to user regs in rsi
    79 000064AA 488B35(6FC40300)    <1>     mov rsi, qword [oldRSP]
    80                              <1>     return
    13                              <2> %%_ret:
    14 000064B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    81                              <1> 
    82                              <1> walkDPBchain:
    83                              <1> ;Called with al = 0 based drive number
    84                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    85 000064B2 488B35(49C00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
    86                              <1> .walk:
    87 000064B9 4881FEFFFFFFFF      <1>     cmp rsi, -1
    88 000064C0 740A                <1>     je .exitBad
    89 000064C2 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    90 000064C4 7407                <1>     je .exit    ;Drive found
    91 000064C6 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    92 000064CA EBED                <1>     jmp short .walk
    93                              <1> .exitBad:
    94 000064CC F9                  <1>     stc
    95                              <1> .exit:
    96                              <1>     return
    13                              <2> %%_ret:
    14 000064CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    97                              <1> setDrive:   
    98                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
    99                              <1> ;Input: al = 1-based drive number
   100                              <1> ;Output: al = 0-based drive number
   101                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
   102                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
   103                              <1> ;            set.
   104 000064CE E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   105 000064D3 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   106 000064D5 56                  <1>     push rsi
   107 000064D6 488B35(02C70300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   108 000064DD 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   109 000064E3 5E                  <1>     pop rsi
   110 000064E4 7401                <1>     jz .exit
   111 000064E6 F9                  <1>     stc
   112                              <1> .exit:
   113                              <1>     return
    13                              <2> %%_ret:
    14 000064E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   114                              <1> 
   115                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   116                              <1> ;Allows a redirector or subst/join to build a CDS
   117                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   118                              <1> ; volumes, that are made at system boot.
   119                              <1> ;Input: al = Drive Letter for drive
   120                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   121                              <1> ;Output: rdi = newly filled in workingCDS
   122                              <1> ;CF=NC => CDS valid and has a DPB
   123                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   124 000064E8 50                  <1>     push rax
   125 000064E9 2C40                <1>     sub al, "A"-1
   126 000064EB 3A05(7DC00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   127 000064F1 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   128 000064F8 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   129 000064FE 58                  <1>     pop rax
   130 000064FF 7235                <1>     jb .exit    ;Exit with CF=CY
   131 00006501 50                  <1>     push rax
   132 00006502 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   133 00006507 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   134 00006509 58                  <1>     pop rax
   135 0000650A 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   136 00006510 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   137 00006517 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   138 0000651F 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   139                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   140 00006525 50                  <1>     push rax
   141 00006526 56                  <1>     push rsi
   142 00006527 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   143 00006529 E884FFFFFF          <1>     call walkDPBchain
   144 0000652E 7204                <1>     jb .skipSettingDPB
   145 00006530 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   146                              <1> .skipSettingDPB:
   147 00006534 5E                  <1>     pop rsi
   148 00006535 58                  <1>     pop rax
   149                              <1> .exit:
   150                              <1>     return
    13                              <2> %%_ret:
    14 00006536 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> getCDS:     ;Int 4Fh AX=1219h
   153                              <1> ;Gets the device DPB and saves it in the DOS variable
   154                              <1> ;This can be called to get CDS for network drives too!
   155                              <1> ;Input: al = 1 based drive number
   156                              <1> ;Sets workingCDS var with the CDS for the device. 
   157                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   158 00006537 84C0                <1>     test al, al
   159 00006539 7508                <1>     jnz .skip
   160 0000653B 8A05(26C40300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   161 00006541 FEC0                <1>     inc al
   162                              <1> .skip:
   163 00006543 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   164 00006545 56                  <1>     push rsi
   165 00006546 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   166 0000654D F605(F2C60300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   167 00006554 7423                <1>     jz .physDrive
   168                              <1>     ;Invokation via 21/5D00
   169 00006556 50                  <1>     push rax
   170 00006557 57                  <1>     push rdi
   171 00006558 488D3D(6EC60300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   172 0000655F 48893D(02C70300)    <1>     mov qword [workingCDS], rdi ;Make it current
   173 00006566 0441                <1>     add al, "A" ;Convert to a drive letter
   174 00006568 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   175 0000656D 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   176 00006573 5F                  <1>     pop rdi
   177 00006574 58                  <1>     pop rax
   178 00006575 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   179 00006577 EB17                <1>     jmp short .exitOk   ;All oki
   180                              <1> .physDrive:
   181 00006579 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   182 0000657E 7208                <1>     jc .exitBad
   183 00006580 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   184 00006586 7508                <1>     jnz .exitOk ;Exit with flag cleared
   185                              <1>     ;Else Return to unknown error locus
   186                              <1> .exitBad:
   187 00006588 C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   188                              <1> .exitBad1:
   189 0000658F F9                  <1>     stc
   190                              <1> .exitOk:
   191 00006590 5E                  <1>     pop rsi
   192                              <1>     return
    13                              <2> %%_ret:
    14 00006591 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   193                              <1> 
   194                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   195                              <1>     ;Gets the CDS for the current drive in al
   196                              <1>     ;Input: al = Drive number, 0 = A ...
   197                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   198                              <1>     ;        CF=CY => al not valid
   199 00006592 3A05(7EC00300)      <1>     cmp al, byte [lastdrvNum]
   200 00006598 7202                <1>     jb .ctn
   201 0000659A F9                  <1>     stc 
   202                              <1>     return
    13                              <2> %%_ret:
    14 0000659B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   203                              <1> .ctn:
   204 0000659C 50                  <1>     push rax
   205 0000659D 52                  <1>     push rdx
   206 0000659E 0FB6C0              <1>     movzx eax, al
   207 000065A1 48BE5B000000000000- <1>     mov rsi, cds_size
   207 000065AA 00                  <1>
   208 000065AB 31D2                <1>     xor edx, edx
   209 000065AD F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   210 000065AF 488B35(6BC00300)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   211 000065B6 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   212 000065B9 488935(02C70300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   213 000065C0 5A                  <1>     pop rdx
   214 000065C1 58                  <1>     pop rax
   215 000065C2 F8                  <1>     clc
   216                              <1>     return
    13                              <2> %%_ret:
    14 000065C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> 
   218                              <1> 
   219                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   220                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   221                              <1> ;Input: AL = Char to normalise.
   222                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   223                              <1> ;If path separator, set ZF=ZE
   224 000065C4 3C5C                <1>     cmp al, "\"
   225 000065C6 7406                <1>     je .exit
   226 000065C8 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   227 000065CA 7502                <1>     jne .exit
   228 000065CC B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   229                              <1> .exit:
   230                              <1>     return
    13                              <2> %%_ret:
    14 000065CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> uppercaseCharAtPtr:
   233                              <1> ;Get the char pointed to by rsi and then fall
   234 000065CF AC                  <1>     lodsb
   235                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   236                              <1> ;Convert a lowercase char to uppercase
   237                              <1> ; Leave alone uppercase chars and invalid chars
   238                              <1> ;Input: al = Char to convert to uppercase
   239                              <1> ;Output: al = Processed char
   240 000065D0 53                  <1>     push rbx
   241 000065D1 3C61                <1>     cmp al, "a"
   242 000065D3 7214                <1>     jb .exit
   243 000065D5 3C7A                <1>     cmp al, "z"
   244 000065D7 7702                <1>     ja .checkExt
   245 000065D9 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   246                              <1> .checkExt:
   247 000065DB 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   248 000065DD 720A                <1>     jb .exit
   249 000065DF 2C80                <1>     sub al, 80h ;Turn into table offset
   250 000065E1 488B1D469AFFFF      <1>     mov rbx, qword [ctryTbl + countryStruc.mapaddr]    ;Get ptr to extAsciiTable
   251 000065E8 D7                  <1>     xlatb   ;Get converted extended byte into al
   252                              <1> .exit:
   253 000065E9 50                  <1>     push rax    ;Save al temporarily
   254 000065EA 488D1D609CFFFF      <1>     lea rbx, asciiCharProperties
   255 000065F1 D7                  <1>     xlatb   ;Get the signature in al
   256 000065F2 A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   257 000065F4 58                  <1>     pop rax
   258 000065F5 5B                  <1>     pop rbx
   259                              <1>     return
    13                              <2> %%_ret:
    14 000065F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   260                              <1> 
   261                              <1> strlen2:    ;Int 4Fh, AX=1212h
   262                              <1> ;Entry point for Multiplex
   263 000065F7 57                  <1>     push rdi
   264 000065F8 4889F7              <1>     mov rdi, rsi
   265 000065FB E802000000          <1>     call strlen
   266 00006600 5F                  <1>     pop rdi
   267                              <1>     return
    13                              <2> %%_ret:
    14 00006601 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   268                              <1> strlen: 
   269                              <1> ;Gets the length of a ASCIIZ string
   270                              <1> ;Input: rdi = Source buffer
   271                              <1> ;Output: ecx = Length of string
   272 00006602 50                  <1>     push rax
   273 00006603 57                  <1>     push rdi
   274 00006604 30C0                <1>     xor al, al
   275 00006606 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   276 00006608 FFC9                <1>     dec ecx ;rcx = -1
   277 0000660A F2AE                <1>     repne scasb
   278 0000660C F7D1                <1>     not ecx
   279 0000660E 5F                  <1>     pop rdi
   280 0000660F 58                  <1>     pop rax
   281                              <1>     return
    13                              <2> %%_ret:
    14 00006610 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> 
   283                              <1> strcpy:
   284                              <1> ;Copies a null terminated string from rsi to rdi
   285 00006611 AC                  <1>     lodsb
   286 00006612 AA                  <1>     stosb
   287 00006613 84C0                <1>     test al, al
   288                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006615 74F9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   289 00006617 EBF8                <1>     jmp short strcpy
   290                              <1> 
   291                              <1> strcmp:
   292                              <1> ;Compares two ASCIIZ strings for equality.
   293                              <1> ;Input: rsi = First string
   294                              <1> ;       rdi = Second string
   295                              <1> ;       ecx = Number of bytes to compare
   296                              <1> ;Output: ZF=ZE => Equal
   297                              <1> ;        ZF=NZ => Not equal
   298 00006619 56                  <1>     push rsi
   299 0000661A 57                  <1>     push rdi
   300 0000661B F3A6                <1>     repe cmpsb
   301 0000661D 5F                  <1>     pop rdi
   302 0000661E 5E                  <1>     pop rsi
   303                              <1>     return
    13                              <2> %%_ret:
    14 0000661F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   304                              <1> 
   305                              <1> 
   306                              <1> normaliseFileName:  ;Int 4Fh, AX=1211h
   307                              <1> ;Converts lowercase to uppercase and / to "\"
   308                              <1> ;Input: rsi = Source buffer
   309                              <1> ;       rdi = Buffer to place normalised path
   310 00006620 50                  <1>     push rax
   311 00006621 56                  <1>     push rsi
   312 00006622 57                  <1>     push rdi
   313                              <1> .scan:
   314 00006623 AC                  <1>     lodsb
   315 00006624 84C0                <1>     test al, al
   316 00006626 740D                <1>     jz .exit
   317 00006628 E897FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   318 0000662D E89EFFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   319 00006632 AA                  <1>     stosb
   320 00006633 EBEE                <1>     jmp short .scan
   321                              <1> .exit:
   322 00006635 5F                  <1>     pop rdi
   323 00006636 5E                  <1>     pop rsi
   324 00006637 58                  <1>     pop rax
   325                              <1>     return
    13                              <2> %%_ret:
    14 00006638 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   326                              <1> 
   327                              <1> compareFileNames:   ;Int 4Fh, AX=121Eh
   328                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   329                              <1> ;Input: rsi = One ASCIIZ pathname
   330                              <1> ;       rdi = Second ASCIIZ pathname
   331                              <1> ;Return:
   332                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   333 00006639 50                  <1>     push rax
   334 0000663A 56                  <1>     push rsi
   335 0000663B 57                  <1>     push rdi
   336                              <1> .scan:
   337 0000663C 8A06                <1>     mov al, byte [rsi]
   338 0000663E 84C0                <1>     test al, al
   339 00006640 7424                <1>     jz .endOfString
   340 00006642 8A27                <1>     mov ah, byte [rdi]
   341 00006644 E87BFFFFFF          <1>     call swapPathSeparator  ;Convert al to \ if pathsep
   342 00006649 7410                <1>     jz .pathseps
   343 0000664B 660D2020            <1>     or ax, 2020h    ;Convert both chars to lower case
   344 0000664F 38E0                <1>     cmp al, ah
   345 00006651 7515                <1>     jnz .exit
   346                              <1> .nextChar:
   347 00006653 48FFC6              <1>     inc rsi
   348 00006656 48FFC7              <1>     inc rdi
   349 00006659 EBE1                <1>     jmp short .scan
   350                              <1> .pathseps:
   351 0000665B 86E0                <1>     xchg ah, al
   352 0000665D E862FFFFFF          <1>     call swapPathSeparator  ;If ah is not a pathsep, then exit ZF=NZ
   353 00006662 7504                <1>     jnz .exit
   354 00006664 EBED                <1>     jmp short .nextChar ;Else get the next chars
   355                              <1> .endOfString:
   356 00006666 84E4                <1>     test ah, ah ;If ah is also the end of the path, then ZF=ZE else ZF=NZ
   357                              <1> .exit:
   358 00006668 5F                  <1>     pop rdi
   359 00006669 5E                  <1>     pop rsi
   360 0000666A 58                  <1>     pop rax
   361                              <1>     return
    13                              <2> %%_ret:
    14 0000666B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   362                              <1> checkPathspecOK:
   363                              <1> ;Input:
   364                              <1> ;rsi -> points to a path to verify if it is ok.
   365                              <1> ;Output:
   366                              <1> ;CF=NC => The path is totally clean and ok to use.
   367                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   368                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   369                              <1> ; and depending on method of invokation and caller, may be permissable.
   370                              <1> ;We accept lc and uc characters in this check function.
   371 0000666C 50                  <1>     push rax
   372 0000666D 53                  <1>     push rbx    ;Use rbx as the return flag status
   373 0000666E 56                  <1>     push rsi
   374 0000666F 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   375                              <1> 
   376                              <1>     ;Start by getting the length of the ASCIIZ string.
   377 00006671 51                  <1>     push rcx
   378 00006672 57                  <1>     push rdi
   379 00006673 4889F7              <1>     mov rdi, rsi
   380 00006676 E887FFFFFF          <1>     call strlen
   381 0000667B 81F940000000        <1>     cmp ecx, 64    ;Check
   382 00006681 5F                  <1>     pop rdi
   383 00006682 59                  <1>     pop rcx
   384 00006683 776E                <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   385                              <1>     ;First we verify if our path is relative or canonical (absolute)
   386 00006685 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   387 00006688 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   388 0000668C 7416                <1>     je .netName
   389 0000668E 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   390 00006692 7410                <1>     je .netName
   391 00006694 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   392 00006697 7412                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   393                              <1>     ;Here if relative
   394 00006699 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   395 000066A0 7551                <1>     jnz .badExit    ;If this is -1, server invoke.
   396 000066A2 EB1F                <1>     jmp short .okToScan
   397                              <1> .netName:
   398 000066A4 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the \    jmp short .okToScan
   400                              <1> .diskPath:
   401 000066AB 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   402 000066B2 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   403 000066B9 7408                <1>     jz .okToScan
   404 000066BB AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   405 000066BC E803FFFFFF          <1>     call swapPathSeparator
   406 000066C1 7530                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   407                              <1> .okToScan:
   408 000066C3 AC                  <1>     lodsb   
   409 000066C4 84C0                <1>     test al, al ;End of path char?
   410 000066C6 7430                <1>     jz .exit
   411 000066C8 E8F7FEFFFF          <1>     call swapPathSeparator
   412 000066CD 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   413 000066CF 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   414 000066D1 7411                <1>     je .wcFound
   415 000066D3 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   416 000066D5 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   417                              <1>     ;Else we check that the char in al is an acceptable char
   418 000066D7 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   419 000066D9 74E8                <1>     je .okToScan
   420 000066DB E831000000          <1>     call checkCharValid
   421 000066E0 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   422 000066E2 EBDF                <1>     jmp short .okToScan
   423                              <1> .wcFound:
   424 000066E4 BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   425 000066E9 EBD8                <1>     jmp short .okToScan
   426                              <1> .wcCheck:
   427                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   428 000066EB F7C340000000        <1>     test ebx, 40h
   429 000066F1 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   430                              <1>     ;Else fall through in error
   431                              <1> .badExit:
   432 000066F3 BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   433                              <1> .exit:
   434 000066F8 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   435 000066F9 9D                  <1>     popfq
   436 000066FA 5E                  <1>     pop rsi
   437 000066FB 5B                  <1>     pop rbx
   438 000066FC 58                  <1>     pop rax
   439                              <1>     return
    13                              <2> %%_ret:
    14 000066FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   440                              <1> 
   441                              <1> scanPathWC:
   442                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   443                              <1> ; even in the final path componant.
   444                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   445                              <1> ;Output: CF=NC => No wildcards present
   446                              <1> ;        CF=CY => Wildcards found
   447 000066FE 50                  <1>     push rax
   448 000066FF 56                  <1>     push rsi
   449                              <1> .scan:
   450 00006700 AC                  <1>     lodsb
   451 00006701 84C0                <1>     test al, al
   452 00006703 7409                <1>     jz .exit
   453 00006705 3C3F                <1>     cmp al, "?"
   454 00006707 7404                <1>     je .wcFnd
   455 00006709 3C2A                <1>     cmp al, "*"
   456 0000670B 75F3                <1>     jne .scan
   457                              <1> .wcFnd:
   458 0000670D F9                  <1>     stc
   459                              <1> .exit:
   460 0000670E 5E                  <1>     pop rsi
   461 0000670F 58                  <1>     pop rax
   462                              <1>     return
    13                              <2> %%_ret:
    14 00006710 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   463                              <1> 
   464                              <1> checkCharValid:
   465                              <1> ;If ZF=ZE => Invalid Char
   466                              <1> ;If ZF=NZ => Valid Char
   467 00006711 51                  <1>     push rcx
   468 00006712 57                  <1>     push rdi
   469 00006713 B930000000          <1>     mov ecx, badDirNameCharL    ;Get table length
   470 00006718 488D3D829AFFFF      <1>     lea rdi, badDirNameChar ;Point to bad char table
   471 0000671F F2AE                <1>     repne scasb ;Scan. Stop when equal
   472 00006721 5F                  <1>     pop rdi
   473 00006722 59                  <1>     pop rcx
   474                              <1>     return
    13                              <2> %%_ret:
    14 00006723 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   475                              <1> 
   476                              <1> 
   477                              <1> skipSpacesAndTabs:
   478                              <1> ;Input: rsi -> String 
   479                              <1> ;Output: rsi -> First non Space or Tab type char
   480 00006724 AC                  <1>     lodsb
   481 00006725 E815000000          <1>     call isCharSpaceType
   482 0000672A 74F8                <1>     jz skipSpacesAndTabs
   483 0000672C 48FFCE              <1>     dec rsi
   484                              <1>     return
    13                              <2> %%_ret:
    14 0000672F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   485                              <1> 
   486                              <1> isCharDelimType:
   487                              <1> ;Input: al = Char to check properties of
   488                              <1> ;Output:    ZF=NZ => Char not name delimiter
   489                              <1> ;           ZF=ZE => Char delimiter
   490 00006730 50                  <1>     push rax
   491 00006731 53                  <1>     push rbx
   492 00006732 488D1D189BFFFF      <1>     lea rbx, asciiCharProperties
   493 00006739 D7                  <1>     xlatb
   494 0000673A A802                <1>     test al, 2
   495 0000673C 5B                  <1>     pop rbx
   496 0000673D 58                  <1>     pop rax
   497                              <1>     return
    13                              <2> %%_ret:
    14 0000673E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   498                              <1> 
   499                              <1> isCharSpaceType:
   500                              <1> ;Input: al = Char to check properties of
   501                              <1> ;Output:    ZF=NZ => Char not Space or Tab
   502                              <1> ;           ZF=ZE => Char Space or Tab
   503 0000673F 50                  <1>     push rax
   504 00006740 53                  <1>     push rbx
   505 00006741 488D1D099BFFFF      <1>     lea rbx, asciiCharProperties
   506 00006748 D7                  <1>     xlatb
   507 00006749 A804                <1>     test al, 4
   508 0000674B 5B                  <1>     pop rbx
   509 0000674C 58                  <1>     pop rax
   510                              <1>     return
    13                              <2> %%_ret:
    14 0000674D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   511                              <1> 
   512                              <1> compareFarPointers: ;Int 4Fh, AX = 1214h
   513                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   514                              <1> ;Input: rsi = One pointer
   515                              <1> ;       rdi = Second pointer
   516                              <1> ;Output: ZF=ZE if equal
   517                              <1> ;        ZF=NZ if not
   518 0000674E 4839FE              <1>     cmp rsi, rdi
   519                              <1>     return
    13                              <2> %%_ret:
    14 00006751 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   520                              <1> 
   521                              <1> checkPathNet:
   522                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   523                              <1> ;Output: ZF=ZE => Path is a net path
   524                              <1> ;        ZF=NZ => Path is not a net path
   525 00006752 50                  <1>     push rax
   526 00006753 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   527 00006756 E869FEFFFF          <1>     call swapPathSeparator
   528 0000675B 7505                <1>     jnz .exit
   529 0000675D E862FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   530                              <1> .exit:
   531 00006762 58                  <1>     pop rax
   532                              <1>     return
    13                              <2> %%_ret:
    14 00006763 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   533                              <1> 
   534                              <1> getCharDevDriverPtr:
   535                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   536                              <1> ;Input: rax = Device Driver name (space padded)
   537                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   538 00006764 488D3D(80C00300)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   539                              <1> .lp:
   540 0000676B 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   541                              <1>     rete    ;Exit if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000676F 74F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   542 00006771 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   543 00006774 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   544 0000677B 75EE                <1>     jne .lp ;If not loop
   545 0000677D F9                  <1>     stc ;Else bad exit
   546                              <1>     return
    13                              <2> %%_ret:
    14 0000677E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   547                              <1> 
    42                                  %include "./Source/Kernel/dosMain.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;        Main Kernel dispatch       :
     3                              <1> ;            and routines           :
     4                              <1> ;-----------------------------------:
     5                              <1> functionDispatch:   ;Int 41h Main function dispatcher
     6                              <1> ;ah = Function number, all other registers have various meanings
     7                              <1>  %if DEBUG
     8                              <1>     ;Entry function
     9                              <1>     debugEnterM
    10                              <1>     lea rbp, .l0000
    11                              <1>     call debPrintNullString
    12                              <1>     call debPrintFunctionName
    13                              <1>     jmp short .l0001
    14                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    15                              <1> .l0001:    
    16                              <1>     debugExitM
    17                              <1>     %endif
    18 0000677F FA                  <1>     cli ;Halt external interrupts
    19 00006780 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    20 00006781 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    21 00006784 0F8349010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    22                              <1>     ;Cherry pick functions
    23 0000678A 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    24 0000678D 722C                <1>     jb .fsbegin   ;If below skip these checks
    25 0000678F 0F847A020000        <1>     je ctrlBreakCheck
    26 00006795 80FC64              <1>     cmp ah, 64h
    27 00006798 0F84BA020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    28 0000679E 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    29 000067A0 80FC51              <1>     cmp ah, 51h
    30 000067A3 0F849D020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    31 000067A9 80FC62              <1>     cmp ah, 62h
    32 000067AC 0F849D020000        <1>     je getPSPaddr          ;Calls the above function
    33 000067B2 80FC50              <1>     cmp ah, 50h
    34 000067B5 0F8482020000        <1>     je setCurrProcessID
    35                              <1> .fsbegin:
    36 000067BB E82E010000          <1>     call dosPushRegs ;Push the usual prologue registers
    37 000067C0 48891D(77C40300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    38 000067C7 66C705(38C40300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    38 000067CF 00                  <1>
    39 000067D0 488B05(6FC40300)    <1>     mov rax, qword [oldRSP]
    40 000067D7 488905(5FC40300)    <1>     mov qword [oldoldRSP], rax
    41 000067DE FE05(FDC30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    42 000067E4 488925(6FC40300)    <1>     mov qword [oldRSP], rsp
    43                              <1> ;Network related variable resetting
    44 000067EB C605(F2C60300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    45                              <1> ;Here, we want to save oldRSP in the callers PSP
    46 000067F2 488B05(14C40300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    47 000067F9 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    48 000067FD 58                  <1>     pop rax     ;Get old rax back
    49 000067FE 50                  <1>     push rax    ;and push it back onto the stack
    50                              <1> .abortEP:
    51                              <1> .charFun0CEP:
    52                              <1> .serverEP:
    53 000067FF 488D25(00CD0300)    <1>     lea rsp, critStakTop
    54 00006806 FB                  <1>     sti         ;Reenable interrupts
    55                              <1> 
    56 00006807 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    57 00006809 881D(88C40300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    58 0000680F C605(89C40300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    59 00006816 881D(5EC40300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
    60 0000681C 881D(7FC40300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    61                              <1> 
    62 00006822 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    63 00006823 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
    64 00006825 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    65 00006827 488D05A79AFFFF      <1>     lea rax, kDispTbl
    66 0000682E 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    67 00006831 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    68 00006835 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
    69 00006838 58                  <1>     pop rax
    70                              <1> 
    71 00006839 84E4                <1>     test ah, ah     ;Simple Terminate function?
    72 0000683B 741C                <1>     jz .fddiskOp
    73 0000683D 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
    74 00006840 745E                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
    75 00006842 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
    76 00006845 7712                <1>     ja .fddiskOp
    77                              <1> ;Char operations here
    78 00006847 F605(FCC30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
    79 0000684E 7550                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
    80 00006850 488D25(90D30300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
    81 00006857 EB47                <1>     jmp short .fdGoToFunction
    82                              <1> .fddiskOp:
    83                              <1>     ;Disk operations go here
    84                              <1>     ;Save rax on entry to a disk funciton
    85 00006859 488905(28C40300)    <1>     mov qword [oldRAX], rax
    86                              <1>     ;Clear up error info
    87 00006860 C605(FFC30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
    88 00006867 C605(FCC30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
    89 0000686E C605(80C40300)00    <1>     mov byte [ctrlCExit], 0     ;Also reset the ctrlC exit flag
    90 00006875 C605(FEC30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
    91                              <1> 
    92 0000687C 50                  <1>     push rax
    93 0000687D B482                <1>     mov ah, 82h ;Cancel all critical section!
    94 0000687F CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
    95 00006881 58                  <1>     pop rax
    96                              <1> 
    97 00006882 C605(89C40300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
    98 00006889 488D25(D0D90300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
    99 00006890 F605(27C40300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   100 00006897 7407                <1>     jz .fdGoToFunction
   101                              <1> ; HANDLE CTRL+BREAK HERE!
   102 00006899 50                  <1>     push rax
   103 0000689A E8DDB9FFFF          <1>     call checkBreak   ; Check for a ^C
   104 0000689F 58                  <1>     pop rax
   105                              <1> .fdGoToFunction:
   106 000068A0 48871D(77C40300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   107                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   108                              <1>     ;
   109                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   110                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   111                              <1>     ;
   112                              <1>     %if DEBUG && REGS
   113                              <1>     ;Print stack if necessary function
   114                              <1>     debugEnterM
   115                              <1>     call debPrintDOSStack
   116                              <1>     debugExitM
   117                              <1>     %endif
   118 000068A7 FF15(77C40300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   119                              <1>     %if DEBUG
   120                              <1>     ;Entry function
   121                              <1>     debugEnterM
   122                              <1>     lea rbp, .l0002
   123                              <1>     call debPrintNullString
   124                              <1>     jmp short .l0003
   125                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   126                              <1> .l0003:    
   127                              <1>     debugExitM
   128                              <1>     %endif
   129                              <1>     %if DEBUG && REGS
   130                              <1>     ;Exit function
   131                              <1>     debugEnterM
   132                              <1>     call debPrintDOSStack
   133                              <1>     debugExitM
   134                              <1>     %endif
   135                              <1> .fdExit:
   136 000068AD FA                  <1>     cli     ;Redisable interrupts
   137 000068AE FE0D(FDC30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   138 000068B4 488B25(6FC40300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   139 000068BB 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   140 000068BE 488B05(5FC40300)    <1>     mov rax, qword [oldoldRSP]
   141 000068C5 488905(6FC40300)    <1>     mov qword [oldRSP], rax
   142 000068CC E806000000          <1>     call dosPopRegs  ;Pop the frame
   143 000068D1 48CF                <1>     iretq
   144                              <1> .fdExitBad:
   145 000068D3 30C0                <1>     xor al, al
   146                              <1> defaultIretq:
   147 000068D5 48CF                <1>     iretq
   148                              <1> dosPopRegs:
   149 000068D7 8F05(67C40300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   150 000068DD 58                  <1>     pop rax
   151 000068DE 5B                  <1>     pop rbx
   152 000068DF 59                  <1>     pop rcx
   153 000068E0 5A                  <1>     pop rdx
   154 000068E1 5E                  <1>     pop rsi
   155 000068E2 5F                  <1>     pop rdi
   156 000068E3 5D                  <1>     pop rbp
   157 000068E4 4158                <1>     pop r8
   158 000068E6 4159                <1>     pop r9
   159 000068E8 FF25(67C40300)      <1>     jmp qword [dosReturn]
   160                              <1> dosPushRegs:
   161 000068EE 8F05(67C40300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   162 000068F4 4151                <1>     push r9
   163 000068F6 4150                <1>     push r8
   164 000068F8 55                  <1>     push rbp
   165 000068F9 57                  <1>     push rdi
   166 000068FA 56                  <1>     push rsi
   167 000068FB 52                  <1>     push rdx
   168 000068FC 51                  <1>     push rcx
   169 000068FD 53                  <1>     push rbx
   170 000068FE 50                  <1>     push rax
   171 000068FF FF25(67C40300)      <1>     jmp qword [dosReturn]
   172                              <1> dosCrit1Enter:
   173                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    13                              <2> %%_ret:
    14 00006905 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   174 00006906 B801800000          <1>     mov eax, 8001h
   175 0000690B CD4A                <1>     int 4ah
   176 0000690D 58                  <1>     pop rax
   177                              <1>     return
    13                              <2> %%_ret:
    14 0000690E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   178                              <1> dosCrit1Exit:
   179                              <1>     return
    13                              <2> %%_ret:
    14 0000690F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   180 00006910 B801810000          <1>     mov eax, 8101h
   181 00006915 CD4A                <1>     int 4ah
   182 00006917 58                  <1>     pop rax
   183                              <1>     return
    13                              <2> %%_ret:
    14 00006918 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   184                              <1> dosCrit2Enter:
   185                              <1>     return
    13                              <2> %%_ret:
    14 00006919 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   186 0000691A B802800000          <1>     mov eax, 8002h
   187 0000691F CD4A                <1>     int 4ah
   188 00006921 58                  <1>     pop rax
   189                              <1>     return
    13                              <2> %%_ret:
    14 00006922 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   190                              <1> dosCrit2Exit:
   191                              <1>     return
    13                              <2> %%_ret:
    14 00006923 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   192 00006924 B802810000          <1>     mov eax, 8102h
   193 00006929 CD4A                <1>     int 4ah
   194 0000692B 58                  <1>     pop rax
   195                              <1>     return
    13                              <2> %%_ret:
    14 0000692C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   196                              <1> 
   197                              <1> ;FCB specific returns
   198                              <1> fcbGoodExit:
   199                              <1> ;Preserve the carry flag on entry to DOS
   200 0000692D 30C0                <1>     xor al, al ;Set return code al = 0
   201                              <1>     return
    13                              <2> %%_ret:
    14 0000692F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   202                              <1> fcbErrExit:
   203                              <1> ;Preserve the carry flag on entry to DOS
   204                              <1> ;Input: eax = Extended error code to store in SDA 
   205 00006930 E836000000          <1>     call xLatError
   206 00006935 B0FF                <1>     mov al, -1  ;Set return code al = -1
   207 00006937 F9                  <1>     stc
   208                              <1>     return
    13                              <2> %%_ret:
    14 00006938 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   209                              <1> 
   210                              <1> ;Handle and General DOS Returns
   211                              <1> ;All good exits destroy AT LEAST ax 
   212                              <1> extGoodExit2:
   213                              <1> ;Good exit with an extended return code in eax
   214 00006939 E86CFBFFFF          <1>     call getUserRegs
   215 0000693E 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   216 00006940 EB08                <1>     jmp short extGoodExit.extGoodCommon
   217                              <1> extGoodExit:
   218                              <1> ;Good exit
   219                              <1> ;Return code in ax
   220 00006942 E863FBFFFF          <1>     call getUserRegs
   221 00006947 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   222                              <1> .extGoodCommon:
   223 0000694A 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   224 0000694E F8                  <1>     clc
   225                              <1>     return
    13                              <2> %%_ret:
    14 0000694F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> extErrExit:
   227                              <1> ;The extended error exit from DOS
   228                              <1> ;Jumped to with AL=Extended error code
   229                              <1> ;Can be called too.
   230                              <1> ;Input: al = Extended error code
   231                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   232                              <1> ;   Returns with: eax = xLat Error
   233                              <1> ;                 rsi = callerFrame
   234 00006950 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   235 00006953 E813000000          <1>     call xLatError
   236 00006958 E891000000          <1>     call checkFail
   237 0000695D E848FBFFFF          <1>     call getUserRegs
   238 00006962 668906              <1>     mov word [rsi + callerFrame.rax], ax
   239 00006965 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   240 00006969 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   241                              <1>     return
    13                              <2> %%_ret:
    14 0000696A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   242                              <1> xLatError:
   243                              <1> ;Translates the error code given in ax and sets error code in the var
   244                              <1> ; Input: ax = Extended Error Code
   245                              <1> ; Output: ax = Potentially translated Error Code
   246                              <1> ;         [errorExCde] = Original Error Code
   247                              <1> ;Preserves all registers except ax
   248                              <1> ;AH is always returned as 0
   249 0000696B 53                  <1>     push rbx
   250 0000696C 51                  <1>     push rcx
   251 0000696D 56                  <1>     push rsi
   252 0000696E 668905(00C40300)    <1>     mov word [errorExCde], ax
   253 00006975 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   254 00006977 488D351397FFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   255                              <1> .readEntry:
   256 0000697E 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   257 00006980 3CFF                <1>     cmp al, -1
   258 00006982 741F                <1>     je .skipXlat
   259 00006984 3A05(29C40300)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   260 0000698A 7408                <1>     je .found
   261                              <1>     ;Here, entry not found, goto next entry
   262 0000698C 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   263 0000698F 4801C6              <1>     add rsi, rax    ;Goto next entry
   264 00006992 EBEA                <1>     jmp short .readEntry
   265                              <1> .found:
   266                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   267 00006994 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   268                              <1> .mainSearch:
   269 00006997 AC                  <1>     lodsb   ;Get one byte into al
   270 00006998 38C3                <1>     cmp bl, al  ;Check against the error code
   271 0000699A 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   272 0000699C FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   273 0000699E 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   274                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   275 000069A0 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   276                              <1> .skipXlat:
   277 000069A3 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   278 000069A5 5E                  <1>     pop rsi
   279 000069A6 59                  <1>     pop rcx
   280 000069A7 5B                  <1>     pop rbx
   281                              <1>     return
    13                              <2> %%_ret:
    14 000069A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> setErrorVars:   ;Int 4Fh, AX=1222h
   283                              <1> ;Looks up the error code in the variable and sets the other error vars
   284                              <1> ;Called with the lookup table in rsi
   285                              <1> ;All regs preserved
   286 000069A9 50                  <1>     push rax
   287 000069AA 53                  <1>     push rbx
   288 000069AB 51                  <1>     push rcx
   289 000069AC 56                  <1>     push rsi
   290 000069AD 0FB71D(00C40300)    <1>     movzx ebx, word [errorExCde]
   291 000069B4 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   292                              <1> .readEntry:
   293 000069B9 AD                  <1>     lodsd   ;Read the dword table entry into eax
   294 000069BA 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   295 000069BF 7428                <1>     je .exit    
   296 000069C1 38D8                <1>     cmp al, bl  ;Compare the error codes
   297 000069C3 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   298 000069C5 D3E8                <1>     shr eax, cl
   299 000069C7 3CFF                <1>     cmp al, -1
   300 000069C9 7406                <1>     je .skipClass
   301 000069CB 8805(03C40300)      <1>     mov byte [errorClass], al
   302                              <1> .skipClass:
   303 000069D1 D3E8                <1>     shr eax, cl
   304 000069D3 3CFF                <1>     cmp al, -1
   305 000069D5 7406                <1>     je .skipAct
   306 000069D7 8805(02C40300)      <1>     mov byte [errorAction], al
   307                              <1> .skipAct:
   308 000069DD D3E8                <1>     shr eax, cl
   309 000069DF 3CFF                <1>     cmp al, -1
   310 000069E1 7406                <1>     je .exit
   311 000069E3 8805(FFC30300)      <1>     mov byte [errorLocus], al
   312                              <1> .exit:
   313 000069E9 5E                  <1>     pop rsi
   314 000069EA 59                  <1>     pop rcx
   315 000069EB 5B                  <1>     pop rbx
   316 000069EC 58                  <1>     pop rax
   317                              <1>     return
    13                              <2> %%_ret:
    14 000069ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   318                              <1> checkFail:
   319                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   320                              <1> ; and swaps the var error code if so
   321 000069EE 803D(5EC40300)00    <1>     cmp byte [Int44Fail], 0
   322 000069F5 7509                <1>     jnz .skipFail
   323 000069F7 66C705(00C40300)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   323 000069FF 00                  <1>
   324                              <1> .skipFail:
   325 00006A00 56                  <1>     push rsi
   326 00006A01 488D352597FFFF      <1>     lea rsi, extErrTbl
   327 00006A08 E89CFFFFFF          <1>     call setErrorVars
   328 00006A0D 5E                  <1>     pop rsi
   329                              <1>     return
    13                              <2> %%_ret:
    14 00006A0E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   330                              <1> ;========================================:
   331                              <1> ;      Reentrant Kernel Functions        :
   332                              <1> ;========================================:
   333                              <1> ctrlBreakCheck:    ;ah = 33h
   334 00006A0F 84C0                <1>     test al, al
   335 00006A11 7508                <1>     jnz .cbcget  ;Get the state or other functions
   336 00006A13 8A15(27C40300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   337 00006A19 48CF                <1>     iretq
   338                              <1> .cbcget:
   339 00006A1B 3C02                <1>     cmp al, 02h
   340 00006A1D 771A                <1>     ja .cbcBad
   341 00006A1F 740D                <1>     jz .cbcxchg ;Function 2
   342 00006A21 52                  <1>     push rdx
   343 00006A22 80E201              <1>     and dl, 1   ;Get only the bottom bit
   344 00006A25 8815(27C40300)      <1>     mov byte [breakFlag], dl    ;Set the state
   345 00006A2B 5A                  <1>     pop rdx
   346 00006A2C 48CF                <1>     iretq
   347                              <1> .cbcxchg:
   348 00006A2E 80E201              <1>     and dl, 1
   349 00006A31 8615(27C40300)      <1>     xchg byte [breakFlag], dl
   350 00006A37 48CF                <1>     iretq
   351                              <1> .cbcBad:
   352 00006A39 B0FF                <1>     mov al, -1
   353 00006A3B 48CF                <1>     iretq
   354                              <1> 
   355                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   356 00006A3D 48891D(14C40300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   357 00006A44 48CF                <1>     iretq
   358                              <1> 
   359                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   360 00006A46 488B15(14C40300)    <1>     mov rdx, qword [currentPSP]
   361 00006A4D 48CF                <1>     iretq
   362                              <1> 
   363                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   364 00006A4F 488B15(14C40300)    <1>     mov rdx, qword [currentPSP]
   365 00006A56 48CF                <1>     iretq
   366                              <1> 
   367                              <1> setDriverLookahead:;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   368 00006A58 8805(D9D90300)      <1>     mov byte [lookahead], al    
   369 00006A5E 48CF                <1>     iretq
   370                              <1> 
   371                              <1> ;========================================:
   372                              <1> ;            Kernel Functions            :
   373                              <1> ;========================================:
   374                              <1> diskReset:         ;ah = 0Dh
   375                              <1> ;Flush all dirty buffers to disk
   376 00006A60 E8A0FEFFFF          <1>     call dosCrit1Enter
   377 00006A65 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   378                              <1> .drCheckBuffer:
   379 00006A6C F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   380 00006A70 7407                <1>     jz .drGotoNextBuffer
   381                              <1> .drFlushBuffer:
   382 00006A72 E8C799FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   383 00006A77 720C                <1>     jc .drExit
   384                              <1> .drGotoNextBuffer:
   385 00006A79 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   386 00006A7C 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   387 00006A83 75E7                <1>     jne .drCheckBuffer
   388                              <1> .drExit:
   389 00006A85 E885FEFFFF          <1>     call dosCrit1Exit
   390 00006A8A B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   391 00006A8F CD4F                <1>     int 4fh
   392                              <1>     return
    13                              <2> %%_ret:
    14 00006A91 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   393                              <1> 
   394                              <1> selectDisk:        ;ah = 0Eh
   395                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   396 00006A92 88D0                <1>     mov al, dl
   397 00006A94 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   398 00006A96 E833FAFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   399 00006A9B 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   400 00006A9D 8805(26C40300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   401                              <1> .skipSettingCurrent:
   402 00006AA3 0FB605(7EC00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   403                              <1>     return
    13                              <2> %%_ret:
    14 00006AAA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   404                              <1> 
   405                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   406 00006AAB 8A05(26C40300)      <1>     mov al, byte [currentDrv]
   407                              <1>     return
    13                              <2> %%_ret:
    14 00006AB1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   408                              <1> 
   409                              <1> FATinfoDefault:    ;ah = 1Bh
   410 00006AB2 30D2                <1>     xor dl, dl
   411                              <1> FATinfoDevice:     ;ah = 1Ch
   412                              <1> ;Input: dl = 1 based drive number
   413                              <1> ;Output:
   414                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   415                              <1> ;cx = bytes per sector
   416                              <1> ;edx = total number of clusters
   417                              <1> ;rbx = Ptr to media ID byte
   418 00006AB4 88D0                <1>     mov al, dl  ;Move drive number into al
   419 00006AB6 E87CFAFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   420 00006ABB 7307                <1>     jnc .fidCDSFound
   421 00006ABD B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   422 00006AC2 EB2E                <1>     jmp short .error 
   423                              <1> .fidCDSFound:
   424 00006AC4 E88FF9FFFF          <1>     call getDiskData
   425 00006AC9 7227                <1>     jc .error
   426                              <1> ;Now we have that:
   427                              <1> ;al = sectors per cluster
   428                              <1> ;ah = media ID byte
   429                              <1> ;ebx = total clusters
   430                              <1> ;cx = bytes per sector
   431                              <1> ;edx = number of available clusters
   432 00006ACB E8DAF9FFFF          <1>     call getUserRegs
   433 00006AD0 8825(86C70300)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   434 00006AD6 30E4                <1>     xor ah, ah
   435 00006AD8 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   436 00006ADB 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   437 00006ADF 488D1D(86C70300)    <1>     lea rbx, mediaByte
   438 00006AE6 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   439 00006AEA 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   440                              <1> .badExit:
   441 00006AEE 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   442                              <1>     return
    13                              <2> %%_ret:
    14 00006AF1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   443                              <1> .error:
   444 00006AF2 E859FEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   445 00006AF7 66B8FFFF            <1>     mov ax, -1
   446 00006AFB EBF1                <1>     jmp short .badExit
   447                              <1> 
   448                              <1> setIntVector:      ;ah = 25h
   449                              <1> ;Called with:
   450                              <1> ;   rdx = Pointer to interrupt handler
   451                              <1> ;   al = Interrupt number
   452 00006AFD 50                  <1>     push rax    ;Preserve all registers in call
   453 00006AFE 53                  <1>     push rbx
   454 00006AFF 51                  <1>     push rcx
   455 00006B00 52                  <1>     push rdx
   456 00006B01 56                  <1>     push rsi
   457 00006B02 55                  <1>     push rbp
   458 00006B03 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   459 00006B05 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   460                              <1> ;First call to get default BIOS segement selector and attribute word
   461 00006B0B 88C3                <1>     mov bl, al  ;Set interrupt number 
   462 00006B0D B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   463 00006B12 CD35                <1>     int 35h
   464 00006B14 E891F9FFFF          <1>     call getUserRegs
   465 00006B19 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   466 00006B1D 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   467 00006B1F 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   468                              <1> ;dx preserves the attribute word
   469 00006B21 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   470 00006B26 CD35                <1>     int 35h
   471 00006B28 5D                  <1>     pop rbp
   472 00006B29 5E                  <1>     pop rsi
   473 00006B2A 5A                  <1>     pop rdx
   474 00006B2B 59                  <1>     pop rcx
   475 00006B2C 5B                  <1>     pop rbx
   476 00006B2D 58                  <1>     pop rax
   477                              <1>     return
    13                              <2> %%_ret:
    14 00006B2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   478                              <1> 
   479                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   480 00006B2F 8805(C5C30300)      <1>     mov byte [verifyFlag], al
   481 00006B35 8025(C5C30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   482                              <1>     return
    13                              <2> %%_ret:
    14 00006B3C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   483                              <1> getDOSversion:     ;ah = 30h
   484 00006B3D E868F9FFFF          <1>     call getUserRegs
   485 00006B42 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   486 00006B44 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   487 00006B47 668B05B294FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   488 00006B4E 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   489                              <1>     return
    13                              <2> %%_ret:
    14 00006B51 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   490                              <1> 
   491                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   492                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   493 00006B52 30D2                <1>     xor dl, dl
   494                              <1> getDeviceDPBptr:   ;ah = 32h
   495                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   496                              <1> ;On exit: rbx = DPB pointer
   497 00006B54 88D0                <1>     mov al, dl
   498 00006B56 E8DCF9FFFF          <1>     call getCDS
   499 00006B5B 722C                <1>     jc .bad
   500 00006B5D 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   501 00006B64 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   502 00006B6A 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   503                              <1>     ;Here ONLY if accessing critical Disk data structures
   504 00006B6C E894FDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   505 00006B71 E87AF6FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   506 00006B76 E894FDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   507 00006B7B 720C                <1>     jc .bad
   508 00006B7D E828F9FFFF          <1>     call getUserRegs
   509 00006B82 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   510 00006B86 30C0                <1>     xor al, al
   511                              <1>     return
    13                              <2> %%_ret:
    14 00006B88 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   512                              <1> .bad:
   513 00006B89 B0FF                <1>     mov al, -1
   514                              <1>     return
    13                              <2> %%_ret:
    14 00006B8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   515                              <1> 
   516                              <1> getInDOSflagPtr:   ;ah = 34h
   517 00006B8C 488D15(FDC30300)    <1>     lea rdx, inDOS
   518 00006B93 E812F9FFFF          <1>     call getUserRegs
   519 00006B98 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   520                              <1>     return
    13                              <2> %%_ret:
    14 00006B9C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> 
   522                              <1> getIntVector:      ;ah = 35h
   523                              <1> ;Called with:
   524                              <1> ;   al = Interrupt Number
   525                              <1> ;Returns:
   526                              <1> ;   rbx = Pointer to interrupt handler
   527 00006B9D E8FAF8FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   528 00006BA2 E803F9FFFF          <1>     call getUserRegs
   529 00006BA7 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   530 00006BAB 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   531                              <1>     return
    13                              <2> %%_ret:
    14 00006BAD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   532                              <1> 
   533                              <1> getDiskFreeSpace:  ;ah = 36h
   534                              <1> ;Input: Drive number in dl (0 = Current)
   535                              <1> ;Output:    ax = sectors per cluster
   536                              <1> ;           ebx = number of free clusters
   537                              <1> ;           cx = bytes per sector
   538                              <1> ;           edx = total clusters on drive
   539 00006BAE 88D0                <1>     mov al, dl
   540 00006BB0 E882F9FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   541 00006BB5 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   542                              <1> ;Else, we at an error.
   543                              <1> ;Simply return with CY set and error code in al with extended error info
   544 00006BB7 B80F000000          <1>     mov eax, errBadDrv
   545 00006BBC E88FFDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   546                              <1>     ;extErrExit sets rsi to caller regs
   547 00006BC1 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   548                              <1>     return
    13                              <2> %%_ret:
    14 00006BC6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> .gdfsCDSFound:
   550 00006BC7 E88CF8FFFF          <1>     call getDiskData
   551 00006BCC 7219                <1>     jc .error
   552                              <1> ;Now we have that:
   553                              <1> ;al = sectors per cluster
   554                              <1> ;ah = media ID byte
   555                              <1> ;ebx = total clusters
   556                              <1> ;cx = bytes per sector
   557                              <1> ;edx = number of available clusters
   558 00006BCE E8D7F8FFFF          <1>     call getUserRegs
   559 00006BD3 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   560 00006BD5 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   561 00006BD8 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   562 00006BDC 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   563 00006BDF 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   564                              <1> .badExit:
   565 00006BE3 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   566                              <1>     return
    13                              <2> %%_ret:
    14 00006BE6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   567                              <1> .error:
   568 00006BE7 E864FDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   569 00006BEC 66B8FFFF            <1>     mov ax, -1
   570 00006BF0 EBF1                <1>     jmp short .badExit
   571                              <1> 
   572                              <1> 
   573                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   574 00006BF2 31C0                <1>     xor eax, eax
   575 00006BF4 668705(24C40300)    <1>     xchg ax, word [errorLevel]
   576 00006BFB E942FDFFFF          <1>     jmp extGoodExit
   577                              <1> 
   578                              <1> getSysVarsPtr:     ;ah = 52h
   579 00006C00 488D15(41C00300)    <1>     lea rdx, sysVarsPtr
   580 00006C07 E89EF8FFFF          <1>     call getUserRegs
   581 00006C0C 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   582                              <1>     return
    13                              <2> %%_ret:
    14 00006C10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   583                              <1> 
   584                              <1> 
   585                              <1> ;AH = 53h - CREATE DPB
   586                              <1> createDPB:         ;generates a DPB from a given BPB
   587                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   588                              <1> ;This is done so that the other fields of the DPB can be recycled
   589                              <1> ;Input: rsi = ptr to the BPB
   590                              <1> ;       rbp = ptr to the DPB
   591                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   592                              <1> ;bMediaDescriptor
   593 00006C11 8A4615              <1>     mov al, byte [rsi + bpb.media]
   594 00006C14 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   595                              <1> ;dFirstFreeCluster
   596 00006C17 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   597                              <1> ;dNumberOfFreeClusters
   598 00006C1E C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   599                              <1> ;wBytesPerSector
   600 00006C25 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   601 00006C29 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   602                              <1> ;bMaxSectorInCluster
   603 00006C2D 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   604 00006C30 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   605 00006C32 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   606                              <1> ;bSectorsPerClusterShift
   607 00006C35 FEC0                <1>     inc al
   608 00006C37 30C9                <1>     xor cl, cl
   609                              <1> .cd2:
   610 00006C39 D0E8                <1>     shr al, 1
   611 00006C3B 7404                <1>     jz .cd3
   612 00006C3D FEC1                <1>     inc cl
   613 00006C3F EBF8                <1>     jmp short .cd2
   614                              <1> .cd3:
   615 00006C41 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   616                              <1> ;wFAToffset, number of reserved sectors in partition
   617 00006C44 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   618 00006C48 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   619                              <1> ;bNumberOfFATs
   620 00006C4C 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   621 00006C4F 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   622                              <1> ;wNumberRootDirEntries
   623                              <1> ;Gets the number of 32 byte entries in the root directory
   624                              <1> ;Only valid for FAT 12/16
   625 00006C52 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   626 00006C56 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   627                              <1> ;dFATlength, get the FAT length
   628 00006C5A 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   629 00006C5E 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   630 00006C61 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   631 00006C63 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   632 00006C66 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   633                              <1> ;Complex cases below...
   634                              <1> ;dClusterHeapOffset, start sector of the data area
   635 00006C69 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   636 00006C6D 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   637 00006C70 85C0                <1>     test eax, eax
   638 00006C72 0F44C3              <1>     cmovz eax, ebx
   639                              <1> ;eax = FATsz
   640 00006C75 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   641 00006C79 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   642 00006C7C 85DB                <1>     test ebx, ebx
   643 00006C7E 0F44D9              <1>     cmovz ebx, ecx 
   644                              <1> ;ebx = TotSec
   645 00006C81 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   646 00006C84 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   647                              <1> .cd4:
   648 00006C86 01C2                <1>     add edx, eax
   649 00006C88 FEC9                <1>     dec cl
   650 00006C8A 75FA                <1>     jnz .cd4
   651 00006C8C 89D0                <1>     mov eax, edx    ;Store product in eax
   652 00006C8E 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   653 00006C92 01D0                <1>     add eax, edx
   654                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   655 00006C94 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   656 00006C98 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   657 00006C9B 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   658 00006C9F 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   659 00006CA0 89D0                <1>     mov eax, edx
   660 00006CA2 31D2                <1>     xor edx, edx
   661 00006CA4 F7F1                <1>     div ecx
   662 00006CA6 89C2                <1>     mov edx, eax
   663 00006CA8 58                  <1>     pop rax
   664 00006CA9 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   665                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   666                              <1>     ;aka eax = Start sector of the data area in volume
   667 00006CAB 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   668                              <1> ;dClusterCount
   669 00006CAE 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   670 00006CB0 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   671 00006CB2 31D2                <1>     xor edx, edx
   672 00006CB4 BB01000000          <1>     mov ebx, 1
   673 00006CB9 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   674 00006CBC D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   675 00006CBE F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   676 00006CC0 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   677 00006CC2 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   678                              <1> ;dFirstUnitOfRootDir
   679 00006CC5 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   680 00006CCA 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   681 00006CCD 770F                <1>     ja .cd5
   682                              <1>     ;Else, we need to find the first sector of the root directory
   683                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   684 00006CCF 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   685 00006CD3 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   686                              <1> .cd51:
   687 00006CD7 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   688 00006CDA FFC9                <1>     dec ecx
   689 00006CDC 75F9                <1>     jnz .cd51
   690                              <1> .cd5:
   691 00006CDE 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   692 00006CE1 C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Denote not yet accessed
   693                              <1> ;Exit epilogue
   694 00006CE5 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   695 00006CEC 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   696                              <1>     %if DEBUG && DPBINFO
   697                              <1>     ;Print DPB 
   698                              <1>     debugEnterM
   699                              <1>     push rbp
   700                              <1>     lea rbp, .l0000
   701                              <1>     call debPrintNullString
   702                              <1>     pop rbp
   703                              <1>     call debDPBBPBptr
   704                              <1>     call debMakeDebuggerRespond
   705                              <1>     jmp short .l0001
   706                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   707                              <1> .l0001:
   708                              <1>     debugExitM
   709                              <1>     %endif
   710                              <1>     return
    13                              <2> %%_ret:
    14 00006CEE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   711                              <1> 
   712                              <1> getVerifySetting:  ;ah = 54h
   713 00006CEF 8A05(C5C30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   714                              <1>     return
    13                              <2> %%_ret:
    14 00006CF5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   715                              <1> 
   716                              <1> getExtendedError:  ;ah = 59h
   717 00006CF6 E8AFF7FFFF          <1>     call getUserRegs
   718 00006CFB 668B05(00C40300)    <1>     mov ax, word [errorExCde]
   719 00006D02 8A2D(FFC30300)      <1>     mov ch, byte [errorLocus]
   720 00006D08 8A3D(03C40300)      <1>     mov bh, byte [errorClass]
   721 00006D0E 8A1D(02C40300)      <1>     mov bl, byte [errorAction]
   722 00006D14 668906              <1>     mov word [rsi + callerFrame.rax], ax
   723 00006D17 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   724 00006D1B 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   725                              <1>     return
    13                              <2> %%_ret:
    14 00006D1E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   726                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   727                              <1> noOp:
   728                              <1>     return
    13                              <2> %%_ret:
    14 00006D1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    43                                  %include "./Source/Kernel/Net/server.asm"
     1                              <1> ;Network functions here
     2                              <1> 
     3                              <1> dosServer:  ;ah = 5Dh
     4                              <1> ;Dispatches the server function in al. Many of these are share hooks.
     5                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
     6                              <1> ;   rdx = Pointer to DPL
     7 00006D20 3C07                <1>     cmp al, 07h
     8 00006D22 7204                <1>     jb .skip
     9 00006D24 3C09                <1>     cmp al, 09h
    10 00006D26 7619                <1>     jbe .skip2
    11                              <1> .skip:
    12 00006D28 4889D6              <1>     mov rsi, rdx
    13 00006D2B 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    14 00006D2F 66891D(38C40300)    <1>     mov word [machineNum], bx
    15 00006D36 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    16 00006D3A 48891D(30C40300)    <1>     mov qword [serverPSP], rbx
    17                              <1> .skip2:
    18 00006D41 488D1DD7FFFFFF      <1>     lea rbx, noOp   ;Push the ok function return address
    19 00006D48 53                  <1>     push rbx
    20 00006D49 488B1D(83DA0300)    <1>     mov rbx, qword [serverDispTblPtr]   ;Get the qword
    21 00006D50 53                  <1>     push rbx    ;Push the table ptr on the stack
    22 00006D51 50                  <1>     push rax    ;Push al onto stack as a qword
    23 00006D52 E856010000          <1>     call serverFunctionSelect
    24 00006D57 B801000000          <1>     mov eax, eLocUnk
    25 00006D5C 8805(FFC30300)      <1>     mov byte [errorLocus], al
    26 00006D62 E9E9FBFFFF          <1>     jmp extErrExit
    27                              <1> 
    28                              <1> serverDispatch: ;AX=5D00h
    29                              <1> ;Input: rsi points to the DOS parameter list
    30 00006D67 58                  <1>     pop rax ;Pop additional return ptr off the stack
    31 00006D68 56                  <1>     push rsi    ;Put dpl ptr in rdi
    32 00006D69 5F                  <1>     pop rdi
    33 00006D6A E83BF7FFFF          <1>     call getUserRegs
    34 00006D6F 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    35 00006D72 56                  <1>     push rsi
    36 00006D73 B906000000          <1>     mov ecx, 6
    37 00006D78 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    38 00006D7B 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    39 00006D82 48A5                <1>     movsq   ;Transfer r8...
    40 00006D84 48A5                <1>     movsq   ;... and r9
    41 00006D86 5E                  <1>     pop rsi
    42 00006D87 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    43 00006D8A 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    44 00006D8E 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    45 00006D92 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    46 00006D96 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    47 00006D9A 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    48 00006D9E 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    49 00006DA2 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    50 00006DA6 48891D(77C40300)    <1>     mov qword [oldRBX], rbx
    51 00006DAD C605(F2C60300)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    52 00006DB4 E946FAFFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    53                              <1> 
    54                              <1> commitAllFilesForProcess:   ;AX=5D01h
    55                              <1> ;Will commit all the files for the current Process as indicated by the DPL
    56                              <1> ;A bad procID (otherwise known as a PSP) may otherwise crash the call.
    57                              <1> ;Thus we check the first two bytes of the current PSP to be CD 40h
    58                              <1> ;If so, we proceed, otherwise, fail with AccDen
    59 00006DB9 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP] ;Get the current PSP (setup from DPL)
    60 00006DC0 66813BCD40          <1>     cmp word [rbx], 40CDh
    61 00006DC5 740A                <1>     je .validTask
    62 00006DC7 B805000000          <1>     mov eax, errAccDen
    63 00006DCC E97FFBFFFF          <1>     jmp extErrExit
    64                              <1> .validTask:
    65 00006DD1 31DB                <1>     xor ebx, ebx    ;Start from file 0
    66 00006DD3 E82DFBFFFF          <1>     call dosCrit1Enter
    67                              <1> .mainLoop:
    68                              <1>     ;Now loop through the JFT of the current task committing the files
    69 00006DD8 53                  <1>     push rbx
    70 00006DD9 E8E1D7FFFF          <1>     call derefSFTPtr    ;Get in rdi the pointer for this SFT entry
    71 00006DDE 7227                <1>     jc .exit
    72 00006DE0 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0   ;Is this an unopened file?
    73 00006DE5 741B                <1>     je .gotoNextFile
    74 00006DE7 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1  ;Is this in the process of something?
    75 00006DEC 7414                <1>     je .gotoNextFile
    76 00006DEE 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;Dont commit redirs
    77 00006DF4 750C                <1>     jnz .gotoNextFile
    78 00006DF6 48893D(22C70300)    <1>     mov qword [currentSFT], rdi ;Set this as the current SFT
    79 00006DFD E8A0C5FFFF          <1>     call commitMain ;Will reenter critical section but thats ok
    80                              <1>     ;If it succeeded, great, cool also if not, keep going!
    81                              <1> .gotoNextFile:
    82 00006E02 5B                  <1>     pop rbx
    83 00006E03 FFC3                <1>     inc ebx
    84 00006E05 EBD1                <1>     jmp short .mainLoop
    85                              <1> .exit:
    86 00006E07 E803FBFFFF          <1>     call dosCrit1Exit
    87 00006E0C 5B                  <1>     pop rbx ;Align stack
    88 00006E0D E930FBFFFF          <1>     jmp extGoodExit
    89                              <1> 
    90                              <1> closeFilesByName:           ;AX=5D02h
    91 00006E12 FF15(DCC00300)      <1>     call qword [closeNameShare]
    92                              <1> .shareExit: ;Use this symbol if we need a decision to be made
    93                              <1> .shareExitBad:  ;Use this symbol if we want to exit Error
    94 00006E18 0F8232FBFFFF        <1>     jc extErrExit
    95                              <1> .shareExitGood:
    96 00006E1E E91FFBFFFF          <1>     jmp extGoodExit
    97                              <1> 
    98                              <1> closeFilesByComputer:       ;AX=5D03h
    99 00006E23 FF15(CCC00300)      <1>     call qword [closeCompShare]
   100 00006E29 EBED                <1>     jmp short closeFilesByName.shareExit
   101                              <1> 
   102                              <1> closeFilesByProcess:        ;AX=5D04h
   103 00006E2B FF15(D4C00300)      <1>     call qword [closeTaskShare]
   104 00006E31 EBE5                <1>     jmp short closeFilesByName.shareExit
   105                              <1> 
   106                              <1> getOpenFileListEntry:       ;AX=5D05h
   107 00006E33 FF15(FCC00300)      <1>     call qword [openFileListShare]  ;Must zero extend all results to 8 bytes
   108 00006E39 72DD                <1>     jc closeFilesByName.shareExitBad
   109 00006E3B E86AF6FFFF          <1>     call getUserRegs
   110 00006E40 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Network machine number (0-ext)
   111 00006E44 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi  ;Ptr to file name
   112                              <1> .shareExit:    ;rcx must be zero extended however to use this
   113 00006E48 48894E10            <1>     mov qword [rsi + callerFrame.rcx], rcx  ;Lock count
   114                              <1> .shareExit2:
   115 00006E4C EBD0                <1>     jmp short closeFilesByName.shareExitGood
   116                              <1> 
   117                              <1> getSDAData:                 ;AX=5D06h
   118                              <1> ;Returns:
   119                              <1> ;   rsi -> nonreentrant data area (includes all three DOS stacks)
   120                              <1> ;   (critical error flag is first byte) (see #01687)
   121                              <1> ;   rcx = size in bytes of area which must be swapped while in DOS
   122                              <1> ;   rdx = size in bytes of area which must always be swapped
   123 00006E4E 488D3D(FCC30300)    <1>     lea rdi, sda
   124 00006E55 48B987160000000000- <1>     mov rcx, sdaLen
   124 00006E5E 00                  <1>
   125 00006E5F 48BA5B160000000000- <1>     mov rdx, sdaMSLen
   125 00006E68 00                  <1>
   126 00006E69 E83CF6FFFF          <1>     call getUserRegs
   127 00006E6E 48897E20            <1>     mov qword [rsi + callerFrame.rsi], rdi
   128 00006E72 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   129 00006E76 EBD0                <1>     jmp short getOpenFileListEntry.shareExit   ;Stores rcx and returns ok
   130                              <1> 
   131                              <1> printerRedir:               ;AX=5D07/8/9h
   132 00006E78 50                  <1>     push rax
   133 00006E79 B825110000          <1>     mov eax, 1125h  ;Redir Printer Mode setup
   134 00006E7E CD4F                <1>     int 4Fh
   135 00006E80 5B                  <1>     pop rbx
   136 00006E81 7295                <1>     jc short closeFilesByName.shareExitBad
   137 00006E83 EB99                <1>     jmp short  closeFilesByName.shareExitGood
   138                              <1> 
   139                              <1> setExtendedErrorInfo:       ;AX=5D0Ah
   140                              <1> ;Input:
   141                              <1> ;   rsi -> DPL
   142 00006E85 8B06                <1>     mov eax, dword [rsi + dpl.rax]  ;Get ax (extended error code)
   143 00006E87 668905(00C40300)    <1>     mov word [errorExCde], ax
   144 00006E8E 488B4628            <1>     mov rax, qword [rsi + dpl.rdi]  ;Get rdi as a full ptr
   145 00006E92 488905(04C40300)    <1>     mov qword [xInt44RDI], rax
   146 00006E99 8B4608              <1>     mov eax, dword [rsi + dpl.rbx]  ;Get bx (error action and class)
   147 00006E9C 668905(02C40300)    <1>     mov word [errorAction], ax  ;Store action and class together
   148 00006EA3 8B4610              <1>     mov eax, dword [rsi + dpl.rcx]  ;Get ch (error locus)
   149 00006EA6 8825(FFC30300)      <1>     mov byte [errorLocus], ah
   150                              <1>     return  ;Return to the function ptr on the stack (the return function)
    13                              <2> %%_ret:
    14 00006EAC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> serverFunctionSelect:
   153                              <1> ;First parameter is al ONLY, subfunction number (BP + 2*8)
   154                              <1> ;Second parameter is table address, (BP + 3*8)
   155 00006EAD 55                  <1>     push rbp
   156 00006EAE 4889E5              <1>     mov rbp, rsp
   157 00006EB1 53                  <1>     push rbx
   158 00006EB2 488B5D18            <1>     mov rbx, qword [rbp + 3*8]  ;Get table ptr
   159 00006EB6 0FB61B              <1>     movzx ebx, byte [rbx]   ;Get the table length
   160 00006EB9 3A5D10              <1>     cmp bl, byte [rbp + 2*8]    ;Is subfunction number less than bl?
   161 00006EBC 731E                <1>     jnb .argumentTooBig
   162 00006EBE 0FB65D10            <1>     movzx ebx, byte [rbp + 2*8] ;Get subfunction into ebx zeroextended
   163 00006EC2 C1E302              <1>     shl ebx, 2  ;Convert to word offset
   164 00006EC5 FFC3                <1>     inc ebx ;Go past the initial byte of the table
   165 00006EC7 0FB71B              <1>     movzx ebx, word [rbx]   ;Get the offset of the function from the tbl head
   166 00006ECA 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   167 00006ECE 48895D10            <1>     mov qword [rbp + 2*8], rbx  ;Store this address as the return address
   168 00006ED2 5B                  <1>     pop rbx
   169 00006ED3 5D                  <1>     pop rbp
   170 00006ED4 4881C418000000      <1>     add rsp, 3*8    ;Go past old return and old subfunction value
   171                              <1>     return
    13                              <2> %%_ret:
    14 00006EDB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   172                              <1> .argumentTooBig:
   173 00006EDC 5B                  <1>     pop rbx
   174 00006EDD 5D                  <1>     pop rbp
   175 00006EDE C21800              <1>     ret 3*8 ;Clear stack of all argument bytes
   176                              <1> 
   177                              <1> netServices:   ;ah = 5Eh, do nothing
   178                              <1> ;Only two native functions, AL=0 and AL=1 (get/set machine name)
   179 00006EE1 3C01                <1>     cmp al, 01
   180 00006EE3 7214                <1>     jb .getName
   181 00006EE5 7437                <1>     jz .setName
   182 00006EE7 3C06                <1>     cmp al, 6
   183 00006EE9 724C                <1>     jb .netRedir
   184 00006EEB C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   185 00006EF2 B001                <1>     mov al, errInvFnc
   186                              <1> .badExit:
   187 00006EF4 E957FAFFFF          <1>     jmp extErrExit
   188                              <1> .getName:
   189                              <1> ;Input: rdx -> 16 byte buffer to fill with machine name
   190                              <1> ;Output: CF=NC => Success.
   191                              <1> ;        CH = Name Validity (if 0, the name is invalid)
   192                              <1> ;        CL = NetBIOS number for the machine
   193                              <1> ;        rdx -> Blank padded Filled buffer with machine name
   194                              <1> ;        CF=CY => Failure
   195                              <1> ;        AX = Errorcode
   196 00006EF9 4889D7              <1>     mov rdi, rdx
   197 00006EFC 0FB70D(23C00300)    <1>     movzx ecx, word [validNetNam]
   198 00006F03 E8A2F5FFFF          <1>     call getUserRegs
   199 00006F08 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   200 00006F0C 488D35(CBC30300)    <1>     lea rsi, machineName
   201                              <1> .nameCmn:
   202 00006F13 31C0                <1>     xor eax, eax
   203 00006F15 48A5                <1>     movsq
   204 00006F17 A5                  <1>     movsd
   205 00006F18 66A5                <1>     movsw
   206 00006F1A A4                  <1>     movsb
   207 00006F1B AA                  <1>     stosb   ;Store terminating null
   208 00006F1C EB24                <1>     jmp short .exitGood
   209                              <1> .setName:
   210                              <1> ;Input: rdx -> 16 byte buffer with new machine name
   211                              <1> ;       CH = 0 => Mark name as invalid
   212                              <1> ;         != 0 => Mark name as valid
   213                              <1> ;       CL = NetBIOS number for the name
   214 00006F1E 66890D(23C00300)    <1>     mov word [validNetNam], cx
   215 00006F25 4889D6              <1>     mov rsi, rdx
   216 00006F28 FE05(CAC30300)      <1>     inc byte [serverCnt]    ;Increment the name change flag
   217 00006F2E 488D3D(CBC30300)    <1>     lea rdi, machineName
   218 00006F35 EBDC                <1>     jmp short .nameCmn
   219                              <1> 
   220                              <1> .netRedir:
   221 00006F37 50                  <1>     push rax
   222 00006F38 B81F110000          <1>     mov eax, 111Fh  ;Net Services over the Redirector
   223 00006F3D CD4F                <1>     int 4Fh
   224 00006F3F 5A                  <1>     pop rdx
   225 00006F40 72B2                <1>     jc .badExit
   226                              <1> .exitGood:
   227 00006F42 E9FBF9FFFF          <1>     jmp extGoodExit
   228                              <1> 
   229                              <1> netRedir:;ah = 5Fh, redirector needs to be installed
   230                              <1> ;Exception: We pick off ah=07 (ENABLE DRIVE) and ah=08 (DISABLE DRIVE)
   231 00006F47 80FC07              <1>     cmp ah, 07h
   232 00006F4A 7419                <1>     je .driveAction
   233 00006F4C 80FC08              <1>     cmp ah, 08h
   234 00006F4F 7414                <1>     je .driveAction
   235                              <1>     ;Else, use redirector to process request
   236 00006F51 50                  <1>     push rax
   237 00006F52 B81E110000          <1>     mov eax, 111eh  ;Do redirection redirector function
   238 00006F57 CD4F                <1>     int 4Fh
   239 00006F59 5B                  <1>     pop rbx
   240                              <1> .badExit:
   241 00006F5A 0F82F0F9FFFF        <1>     jc extErrExit
   242                              <1> .goodExit:
   243 00006F60 E9DDF9FFFF          <1>     jmp extGoodExit
   244                              <1> .driveAction:
   245                              <1> ;dl must have valid 0-based drive number
   246 00006F65 86C2                <1>     xchg al, dl ;Get function number in dl and drive number in al
   247 00006F67 E826F6FFFF          <1>     call getCDSforDrive
   248 00006F6C 72EC                <1>     jc short .badExit
   249                              <1>     ;rsi points to CDS
   250 00006F6E 80EA07              <1>     sub dl, 7
   251 00006F71 7408                <1>     jz .enable
   252 00006F73 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear bit
   253 00006F79 EBE5                <1>     jmp short .goodExit
   254                              <1> .enable:
   255 00006F7B 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive   ;Set bit
   256 00006F81 EBDD                <1>     jmp short .goodExit
    44                                  %include "./Source/Kernel/Net/multiplx.asm"
     1                              <1> ;Default multiplexer. Current only installed function is ah=12h
     2                              <1> ;If a ah=11h request is made, we return CF=CY (as intended)
     3                              <1> ;If an argument needs to be in al for any function, it must be pushed on
     4                              <1> ; stack before the interrupt is called. This word is always read from the
     5                              <1> ; stack, but the stack is not rejiggled to remove it
     6                              <1> 
     7                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
     8 00006F83 80FC12              <1>     cmp ah, 12h
     9 00006F86 7546                <1>     jne .exitBad       ;Exit if not for us
    10 00006F88 3C26                <1>     cmp al, mDispTblL / 2
    11 00006F8A 7342                <1>     jae .exitBad   ;If above or equal, exit
    12 00006F8C 53                  <1>     push rbx
    13 00006F8D 51                  <1>     push rcx
    14 00006F8E 488D1D1494FFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    15 00006F95 53                  <1>     push rbx
    16 00006F96 0FB6C8              <1>     movzx ecx, al   ;Get the subfunction number into ecx
    17 00006F99 488B442428          <1>     mov rax, qword [rsp + 5*8]  ;Pick the word pushed on the stack before call 
    18 00006F9E D1E1                <1>     shl ecx, 1   ;multiply by 2
    19 00006FA0 0FB71C0B            <1>     movzx ebx, word [rbx + rcx] ;Get the word at this address
    20 00006FA4 59                  <1>     pop rcx ;Get the EA of the displacement table in rcx
    21 00006FA5 4801CB              <1>     add rbx, rcx
    22 00006FA8 48891D(77C40300)    <1>     mov qword [oldRBX], rbx
    23 00006FAF 59                  <1>     pop rcx
    24 00006FB0 5B                  <1>     pop rbx
    25 00006FB1 FF15(77C40300)      <1>     call qword [oldRBX]
    26 00006FB7 48891D(77C40300)    <1>     mov qword [oldRBX], rbx
    27 00006FBE 9C                  <1>     pushfq  ;Move flags on the stack
    28 00006FBF 5B                  <1>     pop rbx
    29 00006FC0 48895C2410          <1>     mov qword [rsp + 8*2], rbx  ;Replace entry flags with our own flags
    30 00006FC5 488B1D(77C40300)    <1>     mov rbx, qword [oldRBX]
    31 00006FCC 48CF                <1>     iretq
    32                              <1> .exitBad:
    33 00006FCE 804C241001          <1>     or byte [rsp + 8h*2], 1
    34 00006FD3 48CF                <1>     iretq
    35                              <1> multiplexTest:
    36 00006FD5 B0FF                <1>     mov al, -1
    37 00006FD7 C3                  <1>     ret
    38                              <1> getDosDataSeg:  ;Int 4Fh, AX=1203h
    39                              <1> ;Return: r8 = Dos Data Segment Pointer
    40 00006FD8 4C8D05(00C00300)    <1>     lea r8, dosDataArea
    41                              <1>     return
    13                              <2> %%_ret:
    14 00006FDF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    45                                  %include "./Source/Kernel/Net/share.asm"
     1                              <1> ;Kernel functions to be used by SHARE on SHARE'd files.
     2                              <1> 
     3                              <1> ;Generic Share Hooks and Wrappers
     4                              <1> shareBadFunction:
     5 00006FE0 B801000000          <1>     mov eax, errInvFnc
     6 00006FE5 668905(00C40300)    <1>     mov word [errorExCde], ax
     7 00006FEC F9                  <1>     stc
     8                              <1>     return
    13                              <2> %%_ret:
    14 00006FED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> badDfltShareHook:
    10                              <1> ;Return CF=CY
    11 00006FEE E8EDFFFFFF          <1>     call shareBadFunction
    12                              <1>     return
    13                              <2> %%_ret:
    14 00006FF3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> goodDfltShareHook:
    14                              <1> ;Return CF=NC
    15 00006FF4 F8                  <1>     clc
    16                              <1>     return
    13                              <2> %%_ret:
    14 00006FF5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                              <1> openShareCallWrapper:
    18 00006FF6 FF15(BCC00300)      <1>     call qword [openShare]
    19                              <1>     return
    13                              <2> %%_ret:
    14 00006FFC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> closeShareCallWrapper:
    21 00006FFD FF15(C4C00300)      <1>     call qword [closeShare]
    22                              <1>     return
    13                              <2> %%_ret:
    14 00007003 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> 
    24                              <1> retryShareIODelay:
    25                              <1> ;Checks to see if the region of the file we are IOing with is locked.
    26                              <1> ;Called only in readDiskFile and writeDiskFile
    27                              <1> ;Input: rdi -> SFT for current file
    28                              <1> ;       ecx = Length of region from current position in file
    29                              <1> ;Output: If CF=NC, not locked
    30                              <1> ;        If CF=CY if ANY portion of the region is locked and EAX=errLokVio
    31 00007004 0FB71D(25C00300)    <1>     movzx ebx, word [shareCount]
    32                              <1> .mainLoop:      
    33 0000700B 53                  <1>     push rbx
    34 0000700C FF15(F4C00300)      <1>     call qword [checkFileLockShare]
    35 00007012 5B                  <1>     pop rbx
    36                              <1>     retnc   ;Return if CF=NC (i.e. region not locked [anymore])
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007013 73EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    37 00007015 E806000000          <1>     call shareRetryCountdown
    38 0000701A FFCB                <1>     dec ebx
    39 0000701C 75ED                <1>     jnz .mainLoop
    40 0000701E F9                  <1>     stc
    41                              <1>     return
    13                              <2> %%_ret:
    14 0000701F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    43                              <1> shareRetryCountdown:
    44                              <1> ;Used in: OpenMain, retryShareIODelay, sharingLoop
    45                              <1> ;Does the retry wait IFF the request was not a server request.
    46 00007020 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1   ;Server call?
    47                              <1>     retnz   ;Exit by default if it is a server call
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007027 75F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    48 00007029 51                  <1>     push rcx
    49 0000702A 0FB70D(27C00300)    <1>     movzx ecx, word [shareDelay]    ;This many multiples of counts to 65536 
    50 00007031 67E30D              <1>     jecxz .exit
    51                              <1> .loopBody:
    52 00007034 51                  <1>     push rcx
    53 00007035 31C9                <1>     xor ecx, ecx
    54                              <1> .mainLoop:
    55 00007037 66FFC9              <1>     dec cx
    56 0000703A 75FB                <1>     jnz .mainLoop
    57 0000703C 59                  <1>     pop rcx
    58 0000703D FFC9                <1>     dec ecx
    59 0000703F 75F3                <1>     jnz .loopBody
    60                              <1> .exit:
    61 00007041 59                  <1>     pop rcx
    62                              <1>     return
    13                              <2> %%_ret:
    14 00007042 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> shareCheckOpenViolation:
    65                              <1> ;Input: rdi -> Locally complete SFT we are opening
    66 00007043 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
    67 00007049 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
    68 0000704B 50                  <1>     push rax
    69 0000704C 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
    70 00007050 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
    71 00007055 58                  <1>     pop rax
    72 00007056 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
    73                              <1> .fcbQuirk:
    74 00007058 E83B000000          <1>     call shareLockViolationCriticalError
    75                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000705D 73E3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    76                              <1> .notInCompatMode:
    77 0000705F B820000000          <1>     mov eax, errShrVio
    78 00007064 F9                  <1>     stc ;Set the flag for error
    79                              <1>     return
    13                              <2> %%_ret:
    14 00007065 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> 
    82                              <1> 
    83                              <1> shareFile:
    84                              <1> ;Once the SFT has been made, here we allocate resoureces within share to
    85                              <1> ; share the file, if it is possible to do so!
    86                              <1> ; This is done by calling the open wrapper
    87 00007066 51                  <1>     push rcx
    88                              <1> .reloadCounter:
    89 00007067 0FB70D(25C00300)    <1>     movzx ecx, word [shareCount] ;Try to allocate resources, this many times
    90                              <1> .keepLooping:
    91 0000706E 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
    92 00007075 31C0                <1>     xor eax, eax
    93 00007077 66C7474D0000        <1>     mov word [rdi + sft.wShareRec], 0   ;Init to no record
    94 0000707D 51                  <1>     push rcx
    95 0000707E E873FFFFFF          <1>     call openShareCallWrapper
    96 00007083 59                  <1>     pop rcx
    97 00007084 7310                <1>     jnc .exit   ;If all good, exit! (a record has now been made by SHARE.EXE)
    98 00007086 E895FFFFFF          <1>     call shareRetryCountdown
    99 0000708B FFC9                <1>     dec ecx
   100 0000708D 75DF                <1>     jnz .keepLooping
   101 0000708F E827000000          <1>     call shareCriticalError
   102 00007094 73D1                <1>     jnc .reloadCounter  ;If user selected retry, we retry
   103                              <1> .exit:
   104 00007096 59                  <1>     pop rcx
   105                              <1>     return
    13                              <2> %%_ret:
    14 00007097 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   106                              <1> 
   107                              <1> shareLockViolationCriticalError:
   108                              <1> ;This does NOT force rwFlag to 0.
   109 00007098 57                  <1>     push rdi
   110 00007099 C605(5CC40300)18    <1>     mov byte [Int44bitfld], critRetryOK | critFailOK
   111 000070A0 B821000000          <1>     mov eax, errLokVio
   112 000070A5 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   113                              <1>     ;Figure out what goes here once we figure out the full crit error invoke
   114 000070AC E85EEAFFFF          <1>     call fullcriticalErrorInvoke
   115 000070B1 5F                  <1>     pop rdi
   116 000070B2 3D01000000          <1>     cmp eax, critRetry
   117                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000070B7 74DE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   118 000070B9 F9                  <1>     stc
   119                              <1>     return
    13                              <2> %%_ret:
    14 000070BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   120                              <1> 
   121                              <1> shareCriticalError: ;Int 4Fh AX=120Ah
   122                              <1> ;Used for share Read/Write requests
   123 000070BB 57                  <1>     push rdi
   124 000070BC C605(F0C60300)00    <1>     mov byte [rwFlag], 0    ;Default to read
   125 000070C3 C605(5CC40300)18    <1>     mov byte [Int44bitfld], critRetryOK | critFailOK
   126 000070CA 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   127 000070D1 BF01000000          <1>     mov edi, 1
   128                              <1>     ;Figure out what goes here once we figure out the full crit error invoke
   129 000070D6 E834EAFFFF          <1>     call fullcriticalErrorInvoke
   130 000070DB 5F                  <1>     pop rdi
   131 000070DC 3C01                <1>     cmp al, critRetry   ;If we returned retry, return plainly, else set CF
   132                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000070DE 74DA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   133 000070E0 F9                  <1>     stc
   134                              <1>     return
    13                              <2> %%_ret:
    14 000070E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> shareReadWriteViolationError:
   137                              <1> ;Called in Binary Disk Read/Write if getting access to shared resource fails
   138 000070E2 3C0F                <1>     cmp al, drvBadDskChnge
   139 000070E4 7510                <1>     jne .doReq
   140 000070E6 50                  <1>     push rax    ;IF a bad disk change, drop the volume descriptor ptr here
   141 000070E7 488B05(D7C40300)    <1>     mov rax, qword [primReqHdr + ioReqPkt.desptr]   ;Get volume descriptor ptr
   142 000070EE 488905(04C40300)    <1>     mov qword [xInt44RDI], rax
   143 000070F5 58                  <1>     pop rax
   144                              <1> .doReq:
   145 000070F6 E814EAFFFF          <1>     call fullcriticalErrorInvoke
   146                              <1>     return
    13                              <2> %%_ret:
    14 000070FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   147                              <1> 
   148                              <1> shareCheckWriteLockViolation:
   149 000070FC C605(F0C60300)01    <1>     mov byte [rwFlag], 1    ;Called in write, might not be set so set it
   150 00007103 EB07                <1>     jmp short shareCheckReadLockViolation.common
   151                              <1> shareCheckReadLockViolation:
   152 00007105 C605(F0C60300)00    <1>     mov byte [rwFlag], 0    ;Called in read, might not be set so set it
   153                              <1> .common:
   154                              <1> ;Input:
   155                              <1> ;rdi -> SFT for the file we are reading
   156 0000710C 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   157 00007112 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   158 00007114 50                  <1>     push rax
   159 00007115 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   160 00007119 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   161 0000711E 58                  <1>     pop rax
   162 0000711F 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   163                              <1> .fcbQuirk:
   164 00007121 E872FFFFFF          <1>     call shareLockViolationCriticalError
   165                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007126 73D3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   166                              <1> .notInCompatMode:
   167 00007128 31C9                <1>     xor ecx, ecx    ;Number of bytes xferred
   168 0000712A B821000000          <1>     mov eax, errLokVio
   169 0000712F F9                  <1>     stc ;Set the flag for error
   170                              <1>     return
    13                              <2> %%_ret:
    14 00007130 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    46                                  %include "./Source/Drivers/drvData.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;          Driver routines          :
     3                              <1> ;-----------------------------------:
     4                              <1> drivers:
     5                              <1> conHdr:
     6 00007131 [5371000000000000]  <1>     dq auxHdr
     7 00007139 1380                <1>     dw 08013h
     8 0000713B [D172000000000000]  <1>     dq commonStrat
     9 00007143 [E072000000000000]  <1>     dq conDriver
    10 0000714B 434F4E2020202020    <1>     db "CON     "
    11                              <1> auxHdr:
    12 00007153 [7571000000000000]  <1>     dq prnHdr
    13 0000715B 0080                <1>     dw 08000h
    14 0000715D [D172000000000000]  <1>     dq commonStrat
    15 00007165 [9575000000000000]  <1>     dq com1Intr
    16 0000716D 4155582020202020    <1>     db "AUX     "
    17                              <1> prnHdr:
    18 00007175 [9771000000000000]  <1>     dq clkHdr
    19 0000717D 40A0                <1>     dw 0A040h
    20 0000717F [D972000000000000]  <1>     dq nulStrat
    21 00007187 [DF72000000000000]  <1>     dq nulIntr
    22 0000718F 50524E2020202020    <1>     db "PRN     "
    23                              <1> clkHdr:
    24 00007197 [B971000000000000]  <1>     dq msdHdr
    25 0000719F 0880                <1>     dw 08008h
    26 000071A1 [D172000000000000]  <1>     dq commonStrat
    27 000071A9 [2D74000000000000]  <1>     dq clkDriver
    28 000071B1 434C4F434B242020    <1>     db "CLOCK$  "
    29                              <1> msdHdr:
    30 000071B9 [DB71000000000000]  <1>     dq com1Hdr
    31 000071C1 4008                <1>     dw 00840h   
    32 000071C3 [D172000000000000]  <1>     dq commonStrat
    33 000071CB [1977000000000000]  <1>     dq msdDriver
    34 000071D3 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    35                              <1> com1Hdr:
    36 000071DB [FD71000000000000]  <1>     dq com2Hdr
    37 000071E3 0080                <1>     dw 08000h
    38 000071E5 [D172000000000000]  <1>     dq commonStrat
    39 000071ED [9575000000000000]  <1>     dq com1Intr
    40 000071F5 434F4D3120202020    <1>     db "COM1    "
    41                              <1> com2Hdr:
    42 000071FD [1F72000000000000]  <1>     dq com3Hdr
    43 00007205 0080                <1>     dw 08000h
    44 00007207 [D172000000000000]  <1>     dq commonStrat
    45 0000720F [9E75000000000000]  <1>     dq com2Intr
    46 00007217 434F4D3220202020    <1>     db "COM2    "
    47                              <1> com3Hdr:
    48 0000721F [4172000000000000]  <1>     dq com4Hdr
    49 00007227 0080                <1>     dw 08000h
    50 00007229 [D172000000000000]  <1>     dq commonStrat
    51 00007231 [A775000000000000]  <1>     dq com3Intr
    52 00007239 434F4D3320202020    <1>     db "COM3    "
    53                              <1> com4Hdr:
    54 00007241 [6372000000000000]  <1>     dq lpt1Hdr
    55 00007249 0080                <1>     dw 08000h
    56 0000724B [D172000000000000]  <1>     dq commonStrat
    57 00007253 [B075000000000000]  <1>     dq com4Intr
    58 0000725B 434F4D3420202020    <1>     db "COM4    "
    59                              <1> lpt1Hdr:
    60 00007263 [8572000000000000]  <1>     dq lpt2Hdr
    61 0000726B 40A0                <1>     dw 0A040h
    62 0000726D [D972000000000000]  <1>     dq nulStrat
    63 00007275 [DF72000000000000]  <1>     dq nulIntr
    64 0000727D 4C50543120202020    <1>     db "LPT1    "
    65                              <1> lpt2Hdr:
    66 00007285 [A772000000000000]  <1>     dq lpt3Hdr
    67 0000728D 40A0                <1>     dw 0A040h
    68 0000728F [D972000000000000]  <1>     dq nulStrat
    69 00007297 [DF72000000000000]  <1>     dq nulIntr
    70 0000729F 4C50543220202020    <1>     db "LPT2    "
    71                              <1> lpt3Hdr:
    72 000072A7 FFFFFFFFFFFFFFFF    <1>     dq -1
    73 000072AF 40A0                <1>     dw 0A040h
    74 000072B1 [D972000000000000]  <1>     dq nulStrat
    75 000072B9 [DF72000000000000]  <1>     dq nulIntr
    76 000072C1 4C50543320202020    <1>     dq "LPT3    "
    77 000072C9 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    47                                  %include "./Source/Drivers/charDrv.asm"
     1                              <1> commonStrat:
     2                              <1> ;DOS calls this function with rbx=Ptr to request header
     3 000072D1 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
     4 000072D8 C3                  <1>     ret
     5                              <1> nulStrat:
     6 000072D9 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
     7                              <1> nulIntr:
     8 000072DF C3                  <1>     ret
     9                              <1> conDriver:
    10 000072E0 50                  <1>     push rax
    11 000072E1 53                  <1>     push rbx
    12 000072E2 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    13 000072E9 B003                <1>     mov al, 03h ;Unknown Command
    14 000072EB 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    15 000072EF 7739                <1>     ja .conWriteErrorCode ;If yes, error!
    16                              <1> 
    17 000072F1 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    18 000072F4 3C04                <1>     cmp al, 4
    19 000072F6 7441                <1>     jz .conRead
    20 000072F8 3C05                <1>     cmp al, 5
    21 000072FA 0F847F000000        <1>     jz .conNondestructiveRead
    22 00007300 3C06                <1>     cmp al, 6
    23 00007302 0F84A8000000        <1>     jz .conInputStatus
    24 00007308 3C07                <1>     cmp al, 7
    25 0000730A 0F84B0000000        <1>     jz .conFlushInputBuffers
    26 00007310 3C08                <1>     cmp al, 8
    27 00007312 0F84CA000000        <1>     jz .conWrite
    28 00007318 3C09                <1>     cmp al, 9
    29 0000731A 0F84C2000000        <1>     jz .conWrite
    30 00007320 3C0A                <1>     cmp al, 0Ah
    31 00007322 0F84E3000000        <1>     jz .conOutputStatus
    32 00007328 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    33                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    34 0000732A B480                <1>     mov ah, 80h ;Set error bit
    35 0000732C 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    36                              <1> .conExit:
    37 00007330 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    38 00007336 5B                  <1>     pop rbx
    39 00007337 58                  <1>     pop rax
    40 00007338 C3                  <1>     ret
    41                              <1> .conRead:    ;Function 4
    42 00007339 B005                <1>     mov al, 05h ;Bad request structure length?
    43 0000733B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    44 0000733E 75EA                <1>     jne .conWriteErrorCode
    45                              <1> 
    46 00007340 57                  <1>     push rdi
    47 00007341 51                  <1>     push rcx
    48 00007342 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    49 00007346 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    50                              <1> .cre1:
    51 00007348 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    52 0000734B 741C                <1>     je .cre2
    53 0000734D 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    54 00007354 751A                <1>     jnz .cre3   ;No, get the buffer value
    55 00007356 31C0                <1>     xor eax, eax
    56 00007358 CD36                <1>     int 36h
    57                              <1> .cre11:
    58 0000735A AA                  <1>     stosb
    59 0000735B 84C0                <1>     test al, al ;Was the ascii code stored 0?
    60 0000735D 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    61 0000735F 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    62                              <1> .cre12:
    63 00007365 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    64 00007367 EBDF                <1>     jmp short .cre1
    65                              <1> .cre2:
    66 00007369 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    67 0000736C 59                  <1>     pop rcx
    68 0000736D 5F                  <1>     pop rdi
    69 0000736E EBC0                <1>     jmp short .conExit
    70                              <1> .cre3:
    71 00007370 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    72 00007376 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    73 0000737D EBDB                <1>     jmp short .cre11
    74                              <1> 
    75                              <1> .conNondestructiveRead:  ;Function 5
    76 0000737F B005                <1>     mov al, 05h ;Bad request structure length?
    77 00007381 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
    78 00007384 75A4                <1>     jne .conWriteErrorCode
    79 00007386 803D8E00000000      <1>     cmp byte [.conBuf], 0
    80 0000738D 7519                <1>     jnz .cnr2
    81 0000738F B401                <1>     mov ah, 01h     ;Get key if exists
    82 00007391 CD36                <1>     int 36h
    83 00007393 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    84                              <1>     ;Keystroke available
    85                              <1> .cnr0:
    86 00007395 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
    87 00007398 E993FFFFFF          <1>     jmp .conExit
    88                              <1> .cnr1: ;No keystroke available
    89 0000739D 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
    90 000073A3 E988FFFFFF          <1>     jmp .conExit
    91                              <1> .cnr2:
    92 000073A8 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
    93 000073AE EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
    94                              <1> 
    95                              <1> .conInputStatus:         ;Function 6
    96 000073B0 B005                <1>     mov al, 05h ;Bad request structure length?
    97 000073B2 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
    98 000073B5 0F856FFFFFFF        <1>     jne .conWriteErrorCode
    99 000073BB E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   100                              <1> 
   101                              <1> .conFlushInputBuffers:   ;Function 7
   102 000073C0 B005                <1>     mov al, 05h ;Bad request structure length?
   103 000073C2 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   104 000073C5 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   105 000073CB C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   106                              <1> .cfib0:
   107 000073D2 B401                <1>     mov ah, 01      ;Get buffer status
   108 000073D4 CD36                <1>     int 36h
   109 000073D6 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   110 000073DC 30E4                <1>     xor ah, ah
   111 000073DE CD36                <1>     int 36h ;Read key to flush from buffer
   112 000073E0 EBF0                <1>     jmp short .cfib0
   113                              <1> 
   114                              <1> .conWrite:   ;Function 8 and 9
   115 000073E2 B005                <1>     mov al, 05h ;Bad request structure length?
   116 000073E4 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   117 000073E7 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   118                              <1> 
   119 000073ED 56                  <1>     push rsi
   120 000073EE 51                  <1>     push rcx
   121 000073EF 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   122 000073F3 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   123                              <1> .cw1: 
   124 000073F5 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   125 000073F8 7407                <1>     je .cw2
   126 000073FA AC                  <1>     lodsb   ;Get char into al, and inc rsi
   127 000073FB CD49                <1>     int 49h ;Fast print char
   128 000073FD FFC1                <1>     inc ecx
   129 000073FF EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   130                              <1> .cw2:
   131 00007401 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   132 00007404 59                  <1>     pop rcx
   133 00007405 5E                  <1>     pop rsi
   134 00007406 E925FFFFFF          <1>     jmp .conExit
   135                              <1> .conOutputStatus:   ;Function 0Ah
   136 0000740B B005                <1>     mov al, 05h ;Bad request structure length?
   137 0000740D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   138 00007410 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   139 00007416 E915FFFFFF          <1>     jmp .conExit
   140                              <1> 
   141 0000741B 00                  <1> .conBuf db 0    ;Single byte buffer
   142                              <1> fastOutput:         ;This CON driver supports Int 49h
   143                              <1> ;Called with char to transfer in al
   144 0000741C 50                  <1>     push rax
   145 0000741D B40E                <1>     mov ah, 0Eh
   146 0000741F CD30                <1>     int 30h
   147 00007421 58                  <1>     pop rax
   148 00007422 48CF                <1>     iretq
   149                              <1> ctrlBreak:
   150                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   151 00007424 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   152 0000742B 48CF                <1>     iretq
   153                              <1> 
   154                              <1> clkDriver:
   155 0000742D 50                  <1>     push rax
   156 0000742E 53                  <1>     push rbx
   157 0000742F 51                  <1>     push rcx
   158 00007430 52                  <1>     push rdx
   159 00007431 56                  <1>     push rsi
   160 00007432 55                  <1>     push rbp
   161 00007433 488B1D8FFEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   162 0000743A B003                <1>     mov al, 03h ;Unknown Command
   163 0000743C 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   164 00007440 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   165                              <1> 
   166 00007442 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   167 00007445 3C04                <1>     cmp al, 04h
   168 00007447 7437                <1>     jz .clkRead
   169 00007449 3C06                <1>     cmp al, 06h
   170 0000744B 0F8494000000        <1>     jz .clkInputStatus
   171 00007451 3C07                <1>     cmp al, 07h
   172 00007453 0F8498000000        <1>     jz .clkFlushInputBuffers
   173 00007459 3C08                <1>     cmp al, 08h
   174 0000745B 0F84A0000000        <1>     jz .clkWrite
   175 00007461 3C09                <1>     cmp al, 09h
   176 00007463 0F8498000000        <1>     jz .clkWrite
   177 00007469 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   178                              <1> .clkNotFunctioning:
   179 0000746B B002                <1>     mov al, 02h ;Device not ready error
   180                              <1> .clkWriteErrorCode:
   181 0000746D B480                <1>     mov ah, 80h ;Set error bit
   182 0000746F 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   183                              <1> .clkExit:
   184 00007473 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   185 00007479 5D                  <1>     pop rbp
   186 0000747A 5E                  <1>     pop rsi
   187 0000747B 5A                  <1>     pop rdx
   188 0000747C 59                  <1>     pop rcx
   189 0000747D 5B                  <1>     pop rbx
   190 0000747E 58                  <1>     pop rax
   191 0000747F C3                  <1>     ret
   192                              <1> 
   193                              <1> .clkRead:           ;Function 4
   194 00007480 B005                <1>     mov al, 05h ;Bad request structure length?
   195 00007482 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   196 00007485 75E6                <1>     jne .clkWriteErrorCode
   197                              <1> 
   198 00007487 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   199 0000748A 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   200 0000748E 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   201 00007495 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   202 00007499 30E4                <1>     xor ah, ah
   203 0000749B CD3A                <1>     int 3Ah         ;Read the system timer
   204 0000749D 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   205 0000749F 740D                <1>     jz .clkr1       ;Nope, now just time 
   206 000074A1 30E4                <1>     xor ah, ah
   207                              <1>     ;This works as al should keep count of the # of days passed since last read
   208 000074A3 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   209 000074A7 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   210                              <1> .clkr1:
   211 000074AE 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   212 000074B1 0FB7D2              <1>     movzx edx, dx
   213 000074B4 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   214 000074B6 89D0                <1>     mov eax, edx
   215 000074B8 31D2                <1>     xor edx, edx
   216 000074BA 89D8                <1>     mov eax, ebx
   217 000074BC B944040000          <1>     mov ecx, 1092   
   218 000074C1 F7F1                <1>     div ecx
   219 000074C3 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   220 000074C6 89D0                <1>     mov eax, edx    ;Get remainder in eax
   221 000074C8 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   222 000074CC 31D2                <1>     xor edx, edx
   223 000074CE B95B000000          <1>     mov ecx, 91 ;5*18.2
   224 000074D3 F7F1                <1>     div ecx
   225 000074D5 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   226 000074D8 89D0                <1>     mov eax, edx    ;Get remainder in eax
   227                              <1>     ;lea eax, dword [eax + 4*eax]
   228                              <1>     ;add eax, edx    ;Essentially multiply by 6
   229 000074DA 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   230 000074DD 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   231 000074E0 E98EFFFFFF          <1>     jmp .clkExit
   232                              <1> 
   233                              <1> .clkInputStatus:    ;Function 6
   234                              <1> ;Always return ready
   235 000074E5 B005                <1>     mov al, 05h ;Bad request structure length?
   236 000074E7 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   237 000074EA 7581                <1>     jne .clkWriteErrorCode
   238 000074EC E982FFFFFF          <1>     jmp .clkExit
   239                              <1> .clkFlushInputBuffers:  ;Function 7
   240                              <1> ;Always return done immediately
   241 000074F1 B005                <1>     mov al, 05h ;Bad request structure length?
   242 000074F3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   243 000074F6 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   244 000074FC E972FFFFFF          <1>     jmp .clkExit
   245                              <1> 
   246                              <1> .clkWrite:          ;Functions 8 and 9
   247 00007501 B005                <1>     mov al, 05h ;Bad request structure length?
   248 00007503 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   249 00007506 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   250                              <1> 
   251 0000750C 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   252 0000750F 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   253 00007513 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   254 00007517 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   255                              <1> 
   256 0000751E 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   257 00007520 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   258 00007524 B105                <1>     mov cl, 5
   259 00007526 F6F1                <1>     div cl          ;Divide al by 5
   260 00007528 30E4                <1>     xor ah, ah      ;Remove the remainder
   261 0000752A 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   262                              <1> ;Using the decimal part of this formula for the low count
   263                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   264 0000752C 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   265 0000752F B912000000          <1>     mov ecx, 18
   266 00007534 F7E1                <1>     mul ecx  
   267 00007536 01C3                <1>     add ebx, eax
   268                              <1> 
   269 00007538 31D2                <1>     xor edx, edx
   270 0000753A 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   271 0000753E B944040000          <1>     mov ecx, 1092
   272 00007543 F7E1                <1>     mul ecx
   273 00007545 01C3                <1>     add ebx, eax
   274 00007547 89DA                <1>     mov edx, ebx    ;edx now has low count
   275 00007549 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   276 0000754D B401                <1>     mov ah, 01h     ;Set the system time
   277 0000754F CD3A                <1>     int 3Ah
   278                              <1> 
   279 00007551 4889F3              <1>     mov rbx, rsi
   280 00007554 E91AFFFFFF          <1>     jmp .clkExit
   281                              <1> 
   282                              <1> .clkBCDtoHex:
   283                              <1> ;Converts a BCD value to a Hex byte
   284                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   285 00007559 51                  <1>     push rcx
   286 0000755A 0FB6C0              <1>     movzx eax, al   ;Zero extend
   287 0000755D 89C1                <1>     mov ecx, eax    ;Save al in ecx
   288 0000755F 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   289 00007564 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   290 0000756A C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   291                              <1> .cbth0:
   292 0000756D 050A000000          <1>     add eax, 10
   293 00007572 E2F9                <1>     loop .cbth0
   294 00007574 59                  <1>     pop rcx
   295 00007575 C3                  <1>     ret
   296                              <1> 
   297                              <1> .clkHexToBCD:
   298                              <1> ;Converts a Hex byte into two BCD digits
   299                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   300 00007576 51                  <1>     push rcx
   301 00007577 0FB6C0              <1>     movzx eax, al   ;Zero extend
   302 0000757A 31C9                <1>     xor ecx, ecx
   303                              <1> .chtb0:
   304 0000757C 3D0A000000          <1>     cmp eax, 10
   305 00007581 7209                <1>     jb .chtb1
   306 00007583 2D0A000000          <1>     sub eax, 10
   307 00007588 FFC1                <1>     inc ecx
   308 0000758A EBF0                <1>     jmp short .chtb0
   309                              <1> .chtb1:
   310 0000758C C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   311 0000758F 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   312 00007591 59                  <1>     pop rcx
   313 00007592 C3                  <1>     ret
   314 00007593 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   315                              <1> 
   316                              <1> ;COM Driver headers and main interrupt strat
   317                              <1> com1Intr:
   318 00007595 C6057C01000000      <1>     mov byte [comIntr.comDevice], 0
   319 0000759C EB19                <1>     jmp short comIntr
   320                              <1> com2Intr:
   321 0000759E C6057301000001      <1>     mov byte [comIntr.comDevice], 1
   322 000075A5 EB10                <1>     jmp short comIntr
   323                              <1> com3Intr:
   324 000075A7 C6056A01000002      <1>     mov byte [comIntr.comDevice], 2
   325 000075AE EB07                <1>     jmp short comIntr
   326                              <1> com4Intr:
   327 000075B0 C6056101000003      <1>     mov byte [comIntr.comDevice], 3
   328                              <1> comIntr:
   329 000075B7 50                  <1>     push rax
   330 000075B8 53                  <1>     push rbx
   331 000075B9 51                  <1>     push rcx
   332 000075BA 52                  <1>     push rdx
   333 000075BB 56                  <1>     push rsi
   334 000075BC 57                  <1>     push rdi
   335 000075BD 488B1D05FDFFFF      <1>     mov rbx, qword [reqHdrPtr]
   336 000075C4 B003                <1>     mov al, 03h ;Unknown Command
   337 000075C6 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   338 000075CA 7758                <1>     ja .comWriteErrorCode ;If yes, error!
   339                              <1> 
   340 000075CC 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   341 000075CF 3C04                <1>     cmp al, 4   ;Read Character(s)
   342 000075D1 7464                <1>     jz .comRead
   343 000075D3 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   344 000075D5 0F849D000000        <1>     jz .comNondestructiveRead   
   345 000075DB 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   346 000075DD 0F8486000000        <1>     jz .comReadInputStatus
   347 000075E3 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   348 000075E5 0F849C000000        <1>     jz .comFlushInputBuffers
   349 000075EB 3C08                <1>     cmp al, 8
   350 000075ED 0F84BA000000        <1>     jz .comWrite
   351 000075F3 3C09                <1>     cmp al, 9
   352 000075F5 0F84B2000000        <1>     jz .comWrite
   353 000075FB 3C0A                <1>     cmp al, 0Ah
   354 000075FD 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   355 00007603 EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   356                              <1> .comErrorNoCount:
   357 00007605 B002                <1>     mov al, 02h ;Unknown device
   358 00007607 EB1B                <1>     jmp short .comWriteErrorCode
   359                              <1> .comReadError:
   360 00007609 BA0B000000          <1>     mov edx, 0Bh
   361 0000760E EB05                <1>     jmp short .comError
   362                              <1> .comWriteError:
   363 00007610 BA0A000000          <1>     mov edx, 0Ah
   364                              <1> .comError:
   365 00007615 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   366 00007618 B902000000          <1>     mov ecx, 02h    ;Unknown device
   367 0000761D 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   368 0000761F 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   369 00007622 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   370                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   371 00007624 B480                <1>     mov ah, 80h ;Set error bit
   372 00007626 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   373                              <1> .comExit:
   374 0000762A 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   375 00007630 5F                  <1>     pop rdi
   376 00007631 5E                  <1>     pop rsi
   377 00007632 5A                  <1>     pop rdx
   378 00007633 59                  <1>     pop rcx
   379 00007634 5B                  <1>     pop rbx
   380 00007635 58                  <1>     pop rax
   381 00007636 C3                  <1>     ret
   382                              <1> 
   383                              <1> .comRead:
   384 00007637 B005                <1>     mov al, 05h ;Bad request structure length?
   385 00007639 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   386 0000763C 75E6                <1>     jne .comWriteErrorCode
   387 0000763E 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   388 00007642 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   389                              <1> .cr1:
   390 00007644 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   391 00007647 741B                <1>     je .cre2
   392                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   393 00007649 B800020000          <1>     mov eax, 0200h    ;Recieve 
   394 0000764E 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   395 00007655 F8                  <1>     clc
   396 00007656 CD34                <1>     int 34h ;Recieve Char
   397 00007658 72BB                <1>     jc .comError
   398 0000765A 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   399 0000765D 74EA                <1>     je .cr11
   400 0000765F AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   401 00007660 FFC1                <1>     inc ecx
   402 00007662 EBE0                <1>     jmp short .cr1
   403                              <1> .cre2:
   404 00007664 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   405 00007667 EBC1                <1>     jmp short .comExit
   406                              <1> 
   407                              <1> .comReadInputStatus:
   408 00007669 B005                <1>     mov al, 05h ;Bad request structure length?
   409 0000766B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   410 0000766E 75B4                <1>     jne .comWriteErrorCode
   411 00007670 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   412 00007676 EBB2                <1>     jmp short .comExit
   413                              <1> 
   414                              <1> .comNondestructiveRead:
   415                              <1> ;The buffer is always empty for now (no keystroke available)
   416 00007678 B005                <1>     mov al, 05h ;Bad request structure length?
   417 0000767A 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   418 0000767D 75A5                <1>     jne .comWriteErrorCode
   419 0000767F 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   420 00007685 EBA3                <1>     jmp short .comExit
   421                              <1> 
   422                              <1> .comFlushInputBuffers:
   423 00007687 B005                <1>     mov al, 05h ;Bad request structure length?
   424 00007689 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   425 0000768C 7596                <1>     jne .comWriteErrorCode
   426                              <1> .cfib0:
   427 0000768E 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   428 00007695 B800020000          <1>     mov eax, 0200h    ;Recieve
   429 0000769A F8                  <1>     clc
   430 0000769B CD34                <1>     int 34h
   431 0000769D 0F8262FFFFFF        <1>     jc .comErrorNoCount
   432 000076A3 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   433 000076A6 75E6                <1>     jne .cfib0
   434 000076A8 E97DFFFFFF          <1>     jmp .comExit
   435                              <1> 
   436                              <1> .comWrite:
   437 000076AD B005                <1>     mov al, 05h ;Bad request structure length?
   438 000076AF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   439 000076B2 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   440                              <1> 
   441 000076B8 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   442 000076BC 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   443                              <1> .cw1: 
   444 000076BE 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   445 000076C1 7417                <1>     je .cw2
   446 000076C3 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   447 000076C4 B401                <1>     mov ah, 01h ;Move function number into ah
   448 000076C6 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   449 000076CD F8                  <1>     clc
   450 000076CE CD34                <1>     int 34h ;Transmit char
   451 000076D0 0F823FFFFFFF        <1>     jc .comError
   452 000076D6 FFC1                <1>     inc ecx
   453 000076D8 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   454                              <1> .cw2:
   455 000076DA 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   456 000076DD E948FFFFFF          <1>     jmp .comExit
   457                              <1> 
   458                              <1> .comOutputStatus:
   459                              <1> ;Read MODEM status
   460 000076E2 B005                <1>     mov al, 05h ;Bad request structure length?
   461 000076E4 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   462 000076E7 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   463                              <1> 
   464 000076ED 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   465 000076F4 B403                <1>     mov ah, 03h     ;Get status
   466 000076F6 F8                  <1>     clc
   467 000076F7 CD34                <1>     int 34h
   468 000076F9 0F8206FFFFFF        <1>     jc .comErrorNoCount
   469 000076FF 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   470 00007704 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   471 00007707 F7D0                <1>     not eax      ;Bitwise inversion
   472 00007709 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   473 0000770E 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   474 00007713 E912FFFFFF          <1>     jmp .comExit
   475 00007718 00                  <1> .comDevice   db 0
    48                                  %include "./Source/Drivers/diskDrv.asm"
     1                              <1> msdDriver:
     2 00007719 50                  <1>     push rax
     3 0000771A 53                  <1>     push rbx
     4 0000771B 51                  <1>     push rcx
     5 0000771C 52                  <1>     push rdx
     6 0000771D 56                  <1>     push rsi
     7 0000771E 57                  <1>     push rdi
     8 0000771F 55                  <1>     push rbp
     9 00007720 4150                <1>     push r8
    10 00007722 488B1DA0FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    11 00007729 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    12 0000772D B003                <1>     mov al, drvBadCmd
    13 0000772F 0F87C5000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    14 00007735 B001                <1>     mov al, drvBadUnit 
    15 00007737 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    16 0000773B 0F87B9000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    17 00007741 488D3573040000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    18 00007748 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    19 0000774C C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    20 0000774F 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    21 00007753 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    22 00007757 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    23 00007759 488D0DA1000000      <1>     lea rcx, .msdTable
    24 00007760 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    25 00007764 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    26 00007766 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    27 00007768 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    28 0000776B FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    29                              <1> .msdDriverExit:
    30 0000776D 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    31 00007773 4158                <1>     pop r8
    32 00007775 5D                  <1>     pop rbp
    33 00007776 5F                  <1>     pop rdi
    34 00007777 5E                  <1>     pop rsi
    35 00007778 5A                  <1>     pop rdx
    36 00007779 59                  <1>     pop rcx
    37 0000777A 5B                  <1>     pop rbx
    38 0000777B 58                  <1>     pop rax
    39 0000777C C3                  <1>     ret
    40                              <1> 
    41                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    42 0000777D 4889FB              <1>     mov rbx, rdi
    43 00007780 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    44 00007783 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    45 00007785 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    46                              <1> ;Now fall through to general error
    47                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    48 00007788 488B1D3AFBFFFF      <1>     mov rbx, qword [reqHdrPtr]
    49 0000778F B401                <1>     mov ah, 01h
    50 00007791 CD33                <1>     int 33h ;Read status of last operation
    51 00007793 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    52 00007796 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    53 00007798 7460                <1>     je .msdWriteErrorCode 
    54 0000779A B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    55 0000779C 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    56 0000779F 7459                <1>     je .msdWriteErrorCode 
    57 000077A1 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    58 000077A4 7454                <1>     je .msdWriteErrorCode
    59                              <1> ;Device Not Ready
    60 000077A6 B002                <1>     mov al, 02h  ;Device not ready code
    61 000077A8 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    62 000077AB 744D                <1>     je .msdWriteErrorCode
    63 000077AD 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    64 000077B1 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    65                              <1> ;Write Protected
    66 000077B5 30C0                <1>     xor al, al
    67 000077B7 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
    68 000077BC 743C                <1>     je .msdWriteErrorCode
    69                              <1> ;CRC Error
    70 000077BE B004                <1>     mov al, 04h     ;CRC error code
    71 000077C0 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
    72 000077C5 7433                <1>     je .msdWriteErrorCode
    73 000077C7 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
    74 000077CC 742C                <1>     je .msdWriteErrorCode
    75 000077CE 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
    76 000077D3 7425                <1>     je .msdWriteErrorCode
    77                              <1> ;Seek Error
    78 000077D5 B006                <1>     mov al, 06h     ;Seek error code
    79 000077D7 80F902              <1>     cmp cl, 02h     ;No Seek Complete
    80 000077DA 741E                <1>     je .msdWriteErrorCode
    81                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
    82                              <1> ;This error should only be called if BPB not recognised for Flash Drives
    83 000077DC B007                <1>     mov al, 07h
    84 000077DE 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
    85 000077E1 7417                <1>     je .msdWriteErrorCode
    86                              <1> ;Sector Not Found
    87 000077E3 B008                <1>     mov al, 08h     ;Sector not found code
    88 000077E5 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
    89 000077E8 7410                <1>     je .msdWriteErrorCode
    90                              <1> ;Write faults
    91 000077EA B00A                <1>     mov al, 0Ah     ;Write fault
    92 000077EC 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
    93 000077EF 7409                <1>     je .msdWriteErrorCode
    94                              <1> ;Read faults
    95 000077F1 B00B                <1>     mov al, 0Bh     ;Read fault
    96 000077F3 80F911              <1>     cmp cl, 11h     ;Read error
    97 000077F6 7402                <1>     je .msdWriteErrorCode
    98                              <1> ;General Errors
    99 000077F8 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   100                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   101 000077FA B480                <1>     mov ah, 80h ;Set error bit
   102 000077FC 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   103 00007800 C3                  <1>     ret ;Return to set done bit
   104                              <1> .msdTable:
   105 00007801 0000                <1>     dw 0                            ;Function 0
   106 00007803 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   107 00007805 9800                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   108 00007807 F800                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   109 00007809 0401                <1>     dw .msdRead - .msdTable         ;Function 4
   110 0000780B 0000                <1>     dw 0                            ;Function 5
   111 0000780D 0000                <1>     dw 0                            ;Function 6
   112 0000780F 0000                <1>     dw 0                            ;Function 7
   113 00007811 3D01                <1>     dw .msdWrite - .msdTable        ;Function 8
   114 00007813 7601                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   115 00007815 0000                <1>     dw 0                            ;Function 10
   116 00007817 0000                <1>     dw 0                            ;Function 11
   117 00007819 BC01                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   118 0000781B C801                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   119 0000781D E301                <1>     dw .msdDevClose - .msdTable     ;Function 14
   120 0000781F FE01                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   121 00007821 0000                <1>     dw 0                            ;Function 16
   122 00007823 0000                <1>     dw 0                            ;Function 17
   123 00007825 0000                <1>     dw 0                            ;Function 18
   124 00007827 2602                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   125 00007829 0000                <1>     dw 0                            ;Function 20
   126 0000782B 0000                <1>     dw 0                            ;Function 21
   127 0000782D 0000                <1>     dw 0                            ;Function 22
   128 0000782F CD02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   129 00007831 E202                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   130                              <1> 
   131                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   132                              <1> .msdMedChk:          ;Function 1
   133 00007833 B005                <1>     mov al, 05h ;Bad request structure length
   134 00007835 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   135 00007838 75C0                <1>     jne .msdWriteErrorCode
   136                              <1> 
   137 0000783A E8DC020000          <1>     call .msdCheckDeviceType    ;Check and ensure that media type is "swapped"
   138 0000783F 753E                <1>     jnz .mmcChange  ;Always change if swapping between same phys volume!
   139 00007841 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   140 00007846 488D0D64030000      <1>     lea rcx, .msdBIOSmap
   141 0000784D 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   142 00007850 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   143 00007853 753F                <1>     jnz .mmcNoChange
   144                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   145 00007855 B416                <1>     mov ah, 16h 
   146 00007857 CD33                <1>     int 33h
   147 00007859 0F8229FFFFFF        <1>     jc .msdGenDiskError
   148 0000785F 80FC80              <1>     cmp ah, 80h
   149 00007862 740E                <1>     je .mmcNoChangeLine
   150 00007864 80FC86              <1>     cmp ah, 86h
   151 00007867 7409                <1>     je .mmcNoChangeLine
   152 00007869 84E4                <1>     test ah, ah ;No change?
   153 0000786B 7427                <1>     jz .mmcNoChange
   154 0000786D F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   155 00007870 750D                <1>     jnz .mmcChange
   156                              <1> ;If nothing, fall through and test manually, should never happen though
   157                              <1> .mmcNoChangeLine:
   158                              <1> ;Now we test Media Descriptor
   159 00007872 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   160 00007877 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   161 0000787A 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   162 0000787D 7410                <1>     je .mmcUnsure
   163                              <1> .mmcChange:
   164 0000787F C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   165 00007883 488D051D030000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   166 0000788A 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   167                              <1>     ;Check here if there were any open handles on the device when it was changed
   168 0000788E C3                  <1>     ret
   169                              <1> .mmcUnsure:
   170 0000788F C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   171 00007893 C3                  <1>     ret
   172                              <1> .mmcNoChange:
   173 00007894 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   174 00007898 C3                  <1>     ret
   175                              <1> 
   176                              <1> 
   177                              <1> .msdBuildBPB:        ;Function 2
   178 00007899 B005                <1>     mov al, 05h ;Bad request structure length
   179 0000789B 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   180 0000789E 0F8556FFFFFF        <1>     jne .msdWriteErrorCode
   181                              <1> 
   182 000078A4 4889DE              <1>     mov rsi, rbx
   183 000078A7 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   184 000078AC 488D0DFE020000      <1>     lea rcx, .msdBIOSmap
   185 000078B3 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   186 000078B6 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   187 000078BA 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   188 000078BC 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   189 000078BF B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   190 000078C4 CD33                <1>     int 33h
   191 000078C6 0F82BCFEFFFF        <1>     jc .msdGenDiskError
   192                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   193 000078CC 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   194 000078D0 7418                <1>     je .mbbpb0
   195 000078D2 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   196 000078D6 7412                <1>     je .mbbpb0
   197 000078D8 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   198 000078DC 740C                <1>     je .mbbpb0
   199 000078DE 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   200 000078E2 B007                <1>     mov al, 07h ;Unknown media error code
   201 000078E4 0F8210FFFFFF        <1>     jb .msdWriteErrorCode
   202                              <1> .mbbpb0:
   203 000078EA 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   204 000078ED 4889EF              <1>     mov rdi, rbp     ;Get pointer to buffer to overwrite
   205 000078F0 B90F000000          <1>     mov ecx, bpbEx_size/8
   206 000078F5 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   207 000078F8 C3                  <1>     ret
   208                              <1> .msdIOCTLRead:       ;Function 3, returns done
   209 000078F9 B005                <1>     mov al, drvBadDrvReq
   210 000078FB 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   211 000078FE 0F85F6FEFFFF        <1>     jne .msdWriteErrorCode
   212 00007904 C3                  <1>     ret
   213                              <1> .msdRead:            ;Function 4
   214                              <1> ;Will read one sector at a time.
   215 00007905 B005                <1>     mov al, 05h ;Bad request structure length
   216 00007907 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   217 0000790A 0F85EAFEFFFF        <1>     jne .msdWriteErrorCode
   218                              <1> 
   219 00007910 E806020000          <1>     call .msdCheckDeviceType
   220                              <1> 
   221 00007915 4889DF              <1>     mov rdi, rbx
   222 00007918 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   223                              <1> .msdr0:
   224 0000791A B682                <1>     mov dh, 82h ;LBA Read Sectors
   225 0000791C E8D7010000          <1>     call .msdBlkIOCommon
   226 00007921 0F8256FEFFFF        <1>     jc .msdIOError
   227 00007927 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   228 0000792B 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   229 0000792F 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   230 00007933 FFC6                <1>     inc esi
   231 00007935 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   232 00007938 75E0                <1>     jne .msdr0
   233 0000793A 4889FB              <1>     mov rbx, rdi
   234 0000793D C3                  <1>     ret
   235                              <1> .msdWrite:           ;Function 8
   236                              <1> ;Will write one sector at a time.
   237 0000793E B005                <1>     mov al, 05h ;Bad request structure length
   238 00007940 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   239 00007943 0F85B1FEFFFF        <1>     jne .msdWriteErrorCode
   240                              <1> 
   241 00007949 E8CD010000          <1>     call .msdCheckDeviceType
   242                              <1> 
   243 0000794E 4889DF              <1>     mov rdi, rbx
   244 00007951 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   245                              <1> .msdw0:
   246 00007953 B683                <1>     mov dh, 83h ;LBA Write Sectors
   247 00007955 E89E010000          <1>     call .msdBlkIOCommon
   248 0000795A 0F821DFEFFFF        <1>     jc .msdIOError
   249 00007960 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   250 00007964 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   251 00007968 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   252 0000796C FFC6                <1>     inc esi
   253 0000796E 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   254 00007971 75E0                <1>     jne .msdw0
   255 00007973 4889FB              <1>     mov rbx, rdi
   256 00007976 C3                  <1>     ret
   257                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   258                              <1> ;Will write one sector at a time and then verify it.
   259 00007977 B005                <1>     mov al, 05h ;Bad request structure length
   260 00007979 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   261 0000797C 0F8578FEFFFF        <1>     jne .msdWriteErrorCode
   262                              <1> 
   263 00007982 E894010000          <1>     call .msdCheckDeviceType
   264                              <1> 
   265 00007987 4889DF              <1>     mov rdi, rbx
   266 0000798A 31F6                <1>     xor esi, esi  ;Set counter to zero
   267                              <1> .msdwv0:
   268 0000798C B683                <1>     mov dh, 83h ;LBA Write Sectors
   269 0000798E E865010000          <1>     call .msdBlkIOCommon
   270 00007993 0F82E4FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   271 00007999 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   272 0000799B E858010000          <1>     call .msdBlkIOCommon
   273 000079A0 0F82D7FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   274 000079A6 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   275 000079AA 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   276 000079AE 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   277 000079B2 FFC6                <1>     inc esi
   278 000079B4 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   279 000079B7 75D3                <1>     jne .msdwv0
   280 000079B9 4889FB              <1>     mov rbx, rdi
   281 000079BC C3                  <1>     ret
   282                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   283 000079BD B005                <1>     mov al, drvBadDrvReq
   284 000079BF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   285 000079C2 0F8532FEFFFF        <1>     jne .msdWriteErrorCode
   286                              <1> 
   287 000079C8 C3                  <1>     ret
   288                              <1> .msdDevOpen:         ;Function 13
   289 000079C9 B005                <1>     mov al, drvBadDrvReq
   290 000079CB 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   291 000079CE 0F8526FEFFFF        <1>     jne .msdWriteErrorCode
   292                              <1> 
   293 000079D4 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   294 000079D9 488D0DD6010000      <1>     lea rcx, .msdHdlCnt
   295 000079E0 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   296 000079E3 C3                  <1>     ret
   297                              <1> .msdDevClose:        ;Function 14
   298 000079E4 B005                <1>     mov al, drvBadDrvReq
   299 000079E6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   300 000079E9 0F850BFEFFFF        <1>     jne .msdWriteErrorCode
   301                              <1> 
   302 000079EF 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   303 000079F4 488D0DBB010000      <1>     lea rcx, .msdHdlCnt
   304 000079FB FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   305 000079FE C3                  <1>     ret
   306                              <1> .msdRemovableMedia:  ;Function 15
   307 000079FF B005                <1>     mov al, drvBadDrvReq
   308 00007A01 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   309 00007A04 0F85F0FDFFFF        <1>     jne .msdWriteErrorCode
   310                              <1>     
   311 00007A0A 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   312 00007A0F 488D0D9B010000      <1>     lea rcx, .msdBIOSmap
   313 00007A16 0FB60401            <1>     movzx eax, byte [rcx + rax]    ;Get BIOS number
   314 00007A1A 2580000000          <1>     and eax, 80h ;Isolate bit 7 (the fixed drive bit)
   315 00007A1F C1E002              <1>     shl eax, 2  ;Shift the removable bit (bit 7) to the busy bit (bit 9)
   316 00007A22 66894303            <1>     mov word [rbx + remMediaReqPkt.status], ax  ;Busy set if fixed!
   317 00007A26 C3                  <1>     ret
   318                              <1> .msdGenericIOCTL:    ;Function 19
   319 00007A27 B005                <1>     mov al, drvBadDrvReq
   320 00007A29 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   321 00007A2C 0F85C8FDFFFF        <1>     jne .msdWriteErrorCode
   322                              <1> ;Need to spend some time to implement proper IOCTL with LBA instead of CHS.
   323                              <1> ;Implement two undoc functions 80h|42h (format) and 80h|60h (get LBA params)
   324 00007A32 B003                <1>     mov al, drvBadCmd
   325 00007A34 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]
   326 00007A38 80FD08              <1>     cmp ch, 08h    ;Disk Drive Major Code?
   327 00007A3B 0F85B9FDFFFF        <1>     jne .msdWriteErrorCode  ;If not, exit bad
   328 00007A41 F6C180              <1>     test cl, 80h    ;Extended function bit set?
   329 00007A44 0F84B0FDFFFF        <1>     jz .msdWriteErrorCode
   330 00007A4A 80E17F              <1>     and cl, 7Fh     ;Clear the upper bit
   331 00007A4D 80F941              <1>     cmp cl, 41h     
   332 00007A50 743F                <1>     je .msdGIOCTLWrite
   333 00007A52 80F942              <1>     cmp cl, 42h
   334 00007A55 7451                <1>     je .msdGIOCTLFormat
   335 00007A57 80F960              <1>     cmp cl, 60h
   336 00007A5A 0F859AFDFFFF        <1>     jne .msdWriteErrorCode  ;Error if not this function with bad command
   337                              <1>     ;Get params here
   338 00007A60 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   339 00007A64 488D1546010000      <1>     lea rdx, .msdBIOSmap
   340 00007A6B 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   341 00007A6E B488                <1>     mov ah, 88h ;Read LBA Device Parameters
   342 00007A70 53                  <1>     push rbx
   343 00007A71 CD33                <1>     int 33h
   344                              <1>     ;Returns:
   345                              <1>     ;rbx = Sector size in bytes
   346                              <1>     ;rcx = Last LBA block
   347 00007A73 4889D8              <1>     mov rax, rbx    ;Move sector size into rax
   348 00007A76 5B                  <1>     pop rbx ;Get back the ioctlReqPktPtr
   349 00007A77 0F820BFDFFFF        <1>     jc .msdGenDiskError
   350                              <1> ;Get LBA Table:
   351                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   352                              <1> ;Offset 1:  Reserved, 7 bytes
   353                              <1> ;Offset 8:  Sector size in bytes (DWORD)
   354                              <1> ;Offset 16: Number Of Sectors on Medium + 1 (QWORD)
   355 00007A7D 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   356 00007A81 48C70218000000      <1>     mov qword [rdx + genioctlGetParamsTable.size], 24
   357 00007A88 48894208            <1>     mov qword [rdx + genioctlGetParamsTable.sectorSize], rax
   358 00007A8C 48894A10            <1>     mov qword [rdx + genioctlGetParamsTable.numSectors], rcx
   359                              <1>     return
    13                              <2> %%_ret:
    14 00007A90 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> 
   361                              <1> .msdGIOCTLWrite:
   362                              <1> ;Write Table:
   363                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   364                              <1> ;Offset 1:  Number of sectors to write (BYTE)
   365                              <1> ;Offset 2:  Reserved, 6 bytes
   366                              <1> ;Offset 8:  Sector to start format at (QWORD)
   367                              <1> ;Offset 16: Pointer to transfer buffer (QWORD)
   368 00007A91 E81B000000          <1>     call .msdGIOCTLFormatWriteSetup
   369 00007A96 488B5F10            <1>     mov rbx, qword [rdi + genioctlLBAwrite.xferBuffer]
   370 00007A9A B483                <1>     mov ah, 83h
   371                              <1> .msdGIOCTLwfCommon:
   372 00007A9C CD33                <1>     int 33h
   373 00007A9E 0F82E4FCFFFF        <1>     jc .msdGenDiskError
   374 00007AA4 4889F3              <1>     mov rbx, rsi    ;Geturns rbx to point to the request pointer
   375                              <1>     return 
    13                              <2> %%_ret:
    14 00007AA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   376                              <1> 
   377                              <1> .msdGIOCTLFormat:
   378                              <1> ;Format Table:
   379                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   380                              <1> ;Offset 1:  Number of sectors to format (BYTE)
   381                              <1> ;Offset 2:  Reserved, 6 bytes
   382                              <1> ;Offset 8:  Sector to start format at (QWORD)
   383 00007AA8 E804000000          <1>     call .msdGIOCTLFormatWriteSetup
   384 00007AAD B485                <1>     mov ah, 85h
   385 00007AAF EBEB                <1>     jmp short .msdGIOCTLwfCommon
   386                              <1> 
   387                              <1> .msdGIOCTLFormatWriteSetup:
   388                              <1> ;Sets the following:
   389                              <1> ;al = Number of sectors to write/format
   390                              <1> ;rcx = Sector to begin transfer at
   391                              <1> ;dl = BIOS Drive to do transfer on
   392                              <1> ;rsi = Driver Packet (usually set to rbx)
   393                              <1> ;rdi = Write/Format packet
   394 00007AB1 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   395 00007AB5 488D15F5000000      <1>     lea rdx, .msdBIOSmap
   396 00007ABC 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   397 00007ABF 4889DE              <1>     mov rsi, rbx
   398 00007AC2 488B7E1F            <1>     mov rdi, qword [rsi + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   399 00007AC6 8A4701              <1>     mov al, byte [rdi + genioctlLBAformat.numSectors]
   400 00007AC9 488B4F08            <1>     mov rcx, qword [rdi + genioctlLBAformat.startSector]
   401                              <1>     return
    13                              <2> %%_ret:
    14 00007ACD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   402                              <1> 
   403                              <1> .msdGetLogicalDev:   ;Function 23
   404 00007ACE B005                <1>     mov al, drvBadDrvReq
   405 00007AD0 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   406 00007AD3 0F8521FDFFFF        <1>     jne .msdWriteErrorCode
   407                              <1> 
   408 00007AD9 8A05D1000000        <1>     mov al, byte [.msdCurDev]
   409 00007ADF 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   410 00007AE2 C3                  <1>     ret
   411                              <1> .msdSetLogicalDev:   ;Function 24
   412 00007AE3 B005                <1>     mov al, drvBadDrvReq
   413 00007AE5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   414 00007AE8 0F850CFDFFFF        <1>     jne .msdWriteErrorCode
   415                              <1> .msdInternalSetUnitNumber:  ;Called to set the unit number from reqpkt
   416 00007AEE 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   417 00007AF1 8805B9000000        <1>     mov byte [.msdCurDev], al
   418 00007AF7 C3                  <1>     ret
   419                              <1> 
   420                              <1> .msdBlkIOCommon:  ;Does block IO
   421                              <1> ;Called with rdi containing old rbx value and ah with function number
   422                              <1> ;rbp points to bpb
   423                              <1> ;Error handled by caller
   424                              <1> ;Sector count handled by caller
   425                              <1> ;Called with dh = BIOS function number
   426 00007AF8 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   427 00007AFD 488D0DAD000000      <1>     lea rcx, .msdBIOSmap
   428 00007B04 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req in dl
   429 00007B07 31C9                <1>     xor ecx, ecx
   430 00007B09 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   431 00007B0C 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   432 00007B10 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   433 00007B14 88F4                <1>     mov ah, dh
   434 00007B16 B001                <1>     mov al, 01h ;Do one sector at a time 
   435 00007B18 CD33                <1>     int 33h
   436                              <1>     return
    13                              <2> %%_ret:
    14 00007B1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   437                              <1> 
   438                              <1> .msdCheckDeviceType:
   439                              <1> ;If the device numbers dont match but the bpb numbers do, print the message
   440                              <1> ;!!!WARNING!!! THIS USES THE CONSOLE BIOS!!! VIOLATES HARDWARE ABSTRACTION!!!!
   441                              <1> ;Returns ZF=NZ if media number changed!
   442 00007B1B 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]    ;Get the now unit number
   443 00007B1F 3A058B000000        <1>     cmp al, byte [.msdCurDev]    ;Compare against the last transacted device
   444                              <1>     rete    ;Exit if equal (ZF=ZE)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007B25 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   445                              <1> ;If not equal, check they use different BPB's before continuing
   446 00007B27 50                  <1>     push rax
   447 00007B28 0FB60581000000      <1>     movzx eax, byte [.msdCurDev]  ;Compare current BPB ptr to previous
   448 00007B2F 488D3585000000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
   449 00007B36 C1E003              <1>     shl eax, 3
   450 00007B39 488B1406            <1>     mov rdx, qword [rsi + rax]  ;Get the bpbptr of this device too
   451 00007B3D 58                  <1>     pop rax
   452 00007B3E 4839D5              <1>     cmp rbp, rdx    ;Is the bpb of the transacting device the same as before?
   453 00007B41 751F                <1>     jne .msdCDTexit ;Exit by setting the new unit number
   454                              <1>     ;Here, device numbers are neq but bpb's are eq. Thus print message
   455 00007B43 0441                <1>     add al, "A" ;Convert to a letter
   456 00007B45 880538000000        <1>     mov byte [.msdStrikeLetter], al
   457 00007B4B 488D351E000000      <1>     lea rsi, .msdStrike
   458 00007B52 B937000000          <1>     mov ecx, .msdStrikeL
   459                              <1> .msdCDTprintMessage:
   460 00007B57 AC                  <1>     lodsb   ;Get the char in al, inc rsi
   461 00007B58 CD49                <1>     int 49h ;Print char in al
   462 00007B5A FFC9                <1>     dec ecx
   463 00007B5C 75F9                <1>     jnz .msdCDTprintMessage
   464 00007B5E 31C0                <1>     xor eax, eax
   465 00007B60 CD36                <1>     int 36h ;Blocking wait at the keyboard for a keystroke
   466                              <1> .msdCDTexit:
   467 00007B62 E801000000          <1>     call .msdCDTexitOk  ;Set unit number and clear ZF
   468 00007B67 C3                  <1>     ret
   469                              <1> .msdCDTexitOk:
   470 00007B68 E881FFFFFF          <1>     call .msdInternalSetUnitNumber  ;Set unit number internally
   471 00007B6D 31C0                <1>     xor eax, eax
   472 00007B6F C3                  <1>     ret
   473                              <1> 
   474 00007B70 0D0A496E7365727420- <1> .msdStrike db 0Dh,0Ah,"Insert for drive "
   474 00007B79 666F72206472697665- <1>
   474 00007B82 20                  <1>
   475 00007B83 413A20616E64207374- <1> .msdStrikeLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
   475 00007B8C 72696B650D0A616E79- <1>
   475 00007B95 206B6579207768656E- <1>
   475 00007B9E 2072656164790D0A0A  <1>
   476                              <1> .msdStrikeL equ $ - .msdStrike
   477                              <1> 
   478 00007BA7 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   479                              <1> ;LASTDRIVE default is 5
   480                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   481                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   482 00007BB0 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   483                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   484 00007BB1 0001FFFFFF          <1> .msdBIOSmap  db 0, 1, -1, -1, -1 ;Translates DOS drive number to BIOS number
   485 00007BB6 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   486 00007BBB 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   486 00007BC4 000000000000000000- <1>
   486 00007BCD 000000000000000000- <1>
   486 00007BD6 000000000000000000- <1>
   486 00007BDF 00000000            <1>
   487 00007BE3 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   487 00007BEC 000000000000000000- <1>
   487 00007BF5 000000000000000000- <1>
   487 00007BFE 000000000000000000- <1>
   487 00007C07 000000000000000000- <1>
   487 00007C10 000000000000000000- <1>
   487 00007C19 000000000000000000- <1>
   487 00007C22 000000000000000000- <1>
   487 00007C2B 000000000000000000- <1>
   487 00007C34 000000000000000000- <1>
   487 00007C3D 000000000000000000- <1>
   487 00007C46 000000000000000000- <1>
   487 00007C4F 000000000000000000- <1>
   487 00007C58 000000000000000000- <1>
   487 00007C61 000000000000000000- <1>
   487 00007C6A 000000000000000000- <1>
   487 00007C73 000000000000000000- <1>
   487 00007C7C 000000000000000000- <1>
   487 00007C85 000000000000000000- <1>
   487 00007C8E 000000000000000000- <1>
   487 00007C97 000000000000000000- <1>
   487 00007CA0 000000000000000000- <1>
   487 00007CA9 000000000000000000- <1>
   487 00007CB2 000000000000000000- <1>
   487 00007CBB 000000000000000000- <1>
   487 00007CC4 000000000000000000- <1>
   487 00007CCD 000000000000000000- <1>
   487 00007CD6 000000000000000000- <1>
   487 00007CDF 000000000000000000- <1>
   487 00007CE8 000000000000000000- <1>
   487 00007CF1 000000000000000000- <1>
   487 00007CFA 000000000000000000- <1>
   487 00007D03 000000000000000000- <1>
   487 00007D0C 000000000000000000- <1>
   487 00007D15 000000000000000000- <1>
   487 00007D1E 000000000000000000- <1>
   487 00007D27 000000000000000000- <1>
   487 00007D30 000000000000000000- <1>
   487 00007D39 000000000000000000- <1>
   487 00007D42 000000000000000000- <1>
   487 00007D4B 000000000000000000- <1>
   487 00007D54 000000000000000000- <1>
   487 00007D5D 000000000000000000- <1>
   487 00007D66 000000000000000000- <1>
   487 00007D6F 000000000000000000- <1>
   487 00007D78 000000000000000000- <1>
   487 00007D81 000000000000000000- <1>
   487 00007D8A 000000000000000000- <1>
   487 00007D93 000000000000000000- <1>
   487 00007D9C 000000000000000000- <1>
   487 00007DA5 000000000000000000- <1>
   487 00007DAE 000000000000000000- <1>
   487 00007DB7 000000000000000000- <1>
   487 00007DC0 000000000000000000- <1>
   487 00007DC9 000000000000000000- <1>
   487 00007DD2 000000000000000000- <1>
   487 00007DDB 000000000000000000- <1>
   487 00007DE4 000000000000000000- <1>
   487 00007DED 000000000000000000- <1>
   487 00007DF6 000000000000000000- <1>
   487 00007DFF 000000000000000000- <1>
   487 00007E08 000000000000000000- <1>
   487 00007E11 000000000000000000- <1>
   487 00007E1A 000000000000000000- <1>
   487 00007E23 000000000000000000- <1>
   487 00007E2C 000000000000000000- <1>
   487 00007E35 000000000000        <1>
   488                              <1> .dfltBPB     defaultBPB ;If no removable devices, A and B point here
   488                              <2> .dfltBPB :
   174 00007E3B E9                  <2>  db 0E9h
   175 00007E3C 00                  <2>  db 00h
   176 00007E3D 90                  <2>  db 90h
   177 00007E3E 534350444F537631    <2>  db 'SCPDOSv1'
   178 00007E46 0002                <2>  dw 0200h
   179 00007E48 01                  <2>  db 01h
   180 00007E49 0100                <2>  dw 0001h
   181 00007E4B 02                  <2>  db 02h
   182 00007E4C E000                <2>  dw 00E0h
   183 00007E4E 400B                <2>  dw 0B40h
   184 00007E50 F0                  <2>  db 0F0h
   185 00007E51 0900                <2>  dw 0009h
   186 00007E53 1200                <2>  dw 0012h
   187 00007E55 0200                <2>  dw 0002h
   188 00007E57 00000000            <2>  dd 0
   189 00007E5B 00000000            <2>  dd 0
   190 00007E5F 00                  <2>  db 00h
   191 00007E60 00                  <2>  db 00h
   192 00007E61 29                  <2>  db 29h
   193 00007E62 00000000            <2>  dd 0
   194 00007E66 4E4F204E414D452020- <2>  db 'NO NAME    '
   194 00007E6F 2020                <2>
   195 00007E71 4641543132202020    <2>  db 'FAT12   '
   196 00007E79 000000000000000000- <2>  db 58 dup 0
   196 00007E82 000000000000000000- <2>
   196 00007E8B 000000000000000000- <2>
   196 00007E94 000000000000000000- <2>
   196 00007E9D 000000000000000000- <2>
   196 00007EA6 000000000000000000- <2>
   196 00007EAF 00000000            <2>
   489                              <1> endptr equ $
    49                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    50                                  ;Paragraph alignment
    51                                  %include "./Source/BSS/dosDynaDataArea.asm"
     1                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
     2                              <1> ; the MCB chain!
     3                              <1> ddaStart:
     4 00000000 <res 10h>           <1> dosMCB          resb mcb_size
     5                              <1> 
     6                              <1> dosDynamicArea: ;Difference of this symbol with cfgFrame endPtr gives alloc size
     7                              <1> ;Create DPB chain of first 5 available DPB slots
     8 00000010 <res 35h>           <1> firstDPB        resb dpb_size   ;First two are always present
     9 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    10 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    11 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    12 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    13                              <1> 
    14                              <1> ;fcbsArray       resb sfth_size + 4*sft_size ;One header plus 4 SFT entries
    15                              <1> 
    16 00000119 <res 1C7h>          <1> cdsArray        resb 5*cds_size ;5 CDS's unless more are specified
    17                              <1> 
    18 000002E0 <res 30h>           <1> tmpBufHdr       resb bufferHdr_size
    19 00000310 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    20                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    21                              <1> cfgLoad:    ;This symbol is used to read config.sys here
    22                              <1> dynamicDataAreaLength equ $ - ddaStart
    22          ------------------  <1>  info: assembly required 1+16+2 passes

