     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs and strucs
     5                                  %include "./Source/Include/driverStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     9                              <1> ; device driver related structures.                     ;
    10                              <1> ;-------------------------------------------------------;
    11                              <1> 
    12                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    13                              <1> 
    14 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    15 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    16 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    17 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    18 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    19                              <1> 
    20                              <1> endstruc
    21                              <1> 
    22                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    23                              <1> 
    24                              <1>     .hdrlen resb 1  ;Length of the request header
    25                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    26                              <1>     .cmdcde resb 1  ;Command code
    27                              <1>     .status resw 1  ;Status word
    28                              <1>     .devptr resq 1  ;Device queue pointer field
    29                              <1> 
    30                              <1> %endmacro
    31                              <1> ;Command Code equates
    32                              <1>     drvINIT         equ 0
    33                              <1>     drvMEDCHK       equ 1
    34                              <1>     drvBUILDBPB     equ 2
    35                              <1>     drvIOCTLREAD    equ 3
    36                              <1>     drvREAD         equ 4
    37                              <1>     drvNONDESTREAD  equ 5
    38                              <1>     drvINSTATUS     equ 6
    39                              <1>     drvFLUSHINBUF   equ 7
    40                              <1>     drvWRITE        equ 8
    41                              <1>     drvWRITEVERIFY  equ 9
    42                              <1>     drvOUTSTATUS    equ 10
    43                              <1>     drvFLUSHOUTBUF  equ 11
    44                              <1>     drvIOCTLWRITE   equ 12
    45                              <1>     drvOPEN         equ 13
    46                              <1>     drvCLOSE        equ 14
    47                              <1>     drvREMMEDCHECK  equ 15
    48                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    49                              <1>     drvIOCTL        equ 19
    50                              <1>     drvGETDRVMAP    equ 23
    51                              <1>     drvSETDRVMAP    equ 24
    52                              <1>     
    53                              <1> ;Driver Error equates 
    54                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    55                              <1>     drvBadUnit      equ 1   ;Unknown unit
    56                              <1>     drvNotReady     equ 2   ;Device not ready
    57                              <1>     drvBadCmd       equ 3   ;Unknown command
    58                              <1>     drvCRCErr       equ 4   ;CRC Error
    59                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    60                              <1>     drvBadSeek      equ 6   ;Seek error
    61                              <1>     drvBadMed       equ 7   ;Unknown media
    62                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    63                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    64                              <1>     drvWriteFault   equ 10  ;Write Fault
    65                              <1>     drvReadFault    equ 11  ;Read Fault
    66                              <1>     drvGenFault     equ 12  ;General Fault
    67                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    68                              <1> 
    69                              <1> ;Drive structures
    70                              <1> struc drvReqHdr
    71                              <1>     drvReqHdrM
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc initReqPkt  ;Init Request Packet
    75                              <1> 
    76                              <1>     drvReqHdrM   ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    77 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    78 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    79 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    80 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    85                              <1> 
    86                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    87 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    88 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    89 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    90                              <1> 
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    94                              <1> 
    95                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    96 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    97 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    98 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    99                              <1> 
   100                              <1> endstruc
   101                              <1> 
   102                              <1> struc ioReqPkt   ;IO Request Packet
   103                              <1> 
   104                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   105 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   106 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   107 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   108 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   109 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   110                              <1> 
   111                              <1> endstruc
   112                              <1> 
   113                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
   114                              <1>     
   115                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   116 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc statusReqPkt   ;Status Request Packet
   121                              <1> 
   122                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   129                              <1>      
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc openReqPkt ;Open Device Request Packet
   133                              <1> 
   134                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   135                              <1>      
   136                              <1> endstruc
   137                              <1> 
   138                              <1> struc closeReqPkt ;Close Device Request Packet
   139                              <1> 
   140                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   141                              <1>      
   142                              <1> endstruc
   143                              <1> 
   144                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   145                              <1> 
   146                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   147                              <1>      
   148                              <1> endstruc
   149                              <1> 
   150                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   151                              <1> 
   152                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   153 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   154 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   155 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   156 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   157 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   162                              <1>     
   163                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   164                              <1> 
   165                              <1> endstruc
   166                              <1> 
   167                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   168                              <1>     
   169                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   170                              <1> 
   171                              <1> endstruc
     6                                  %include "./Source/Include/fatStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous FAT driver   ;
    10                              <1> ; structures. exFAT will have it's own files at a later ;
    11                              <1> ; stage.                                                ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    17                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    18                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    19                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    20                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    21                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    22                              <1> ;-------------------------------------------------------;
    23                              <1> 
    24                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    25                              <1> 
    26 00000000 ??????              <1>     .jmpBoot    resb 3 
    27 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    28 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    29 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    30 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    31 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    32 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    33 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    34 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    35 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    36 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    37 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    38 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    39 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    40                              <1> 
    41 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    42 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    43 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    44 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    45 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    46 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    47                              <1> 
    48                              <1> endstruc
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    51                              <1> 
    52 00000000 ??????              <1>     .jmpBoot    resb 3
    53 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    54 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    55 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    56 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    57 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    58 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    59 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    60 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    61 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    62 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    63 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    64 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    65 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    66                              <1> 
    67 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    68 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    69 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    70 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    71 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    72 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    73 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    74                              <1> 
    75 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    76 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    77 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    78 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    79 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    80 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mbr
    85 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    86 000001B8 ????????            <1>     .diskID     resb 4
    87 000001BC ????                <1>     .reserved   resb 2
    88 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    89 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    90 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    91 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    92 000001FE ????                <1>     .mbrSig     resb 2
    93                              <1> endstruc
    94                              <1> 
    95                              <1> struc mbrEntry
    96 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    97 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    98 00000004 ??                  <1>     .ptnType    resb 1
    99 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   100 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   101 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc ebr
   105 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   106 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   107 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   108 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   109 000001FE ????                <1>     .mbrSig     resb 2
   110                              <1> endstruc
   111                              <1> 
   112                              <1> 
   113                              <1> struc fatDirEntry
   114                              <1> 
   115 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   116 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   121 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   122 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   127                              <1> 
   128                              <1> endstruc
   129                              <1> ;Directory attribute equates
   130                              <1>     dirReadOnly     equ 01h
   131                              <1>     dirHidden       equ 02h
   132                              <1>     dirSystem       equ 04h
   133                              <1>     dirVolumeID     equ 08h
   134                              <1>     dirDirectory    equ 10h
   135                              <1>     dirArchive      equ 20h
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1> 
   138                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   139                              <1> 
   140 00000000 ??????              <1>     .jmpBoot                resb 3 
   141 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   142 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   143 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   144 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   145 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   146 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   147 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   148 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   149 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   150 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   151 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   152 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   153 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   154 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   155 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   156 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   157 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   158 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   159                              <1> 
   160                              <1> endstruc
   161                              <1> 
   162                              <1> struc FSInfo
   163                              <1> 
   164 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   165 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   166 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   167 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   168 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   169 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   170 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   171                              <1> 
   172                              <1> endstruc
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)x
    27 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000005 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000007 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000008 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    32 0000000A ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000E ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000012 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000016 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001A ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000022 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000023 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000024 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002C ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000030 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Flags: Bit 15 set = Network drive
    69                              <1> ;        Bit 14 set = Physical drive
    70                              <1> ;        Bit 13 set = JOIN'ed drive
    71                              <1> ;        Bit 12 set = SUBST'ed drive
    72                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    73                              <1> endstruc
    74                              <1> ;CDS equates
    75                              <1>     cdsNetDrive     equ 8000h
    76                              <1>     cdsPhysDrive    equ 4000h
    77                              <1>     cdsJoinDrive    equ 2000h
    78                              <1>     cdsSubstDrive   equ 1000h
    79                              <1>     cdsRedirDrive   equ 0080h
    80                              <1> ;------------------------------------------------------------------------;
    81                              <1> ; The SFT is a way to allow applications to open file handles to files 
    82                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    83                              <1> ; under the first header, and then a second header will be linked to the 
    84                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    85                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    86                              <1> ; using the FCBS= command. Default FCBS=5.
    87                              <1> ;
    88                              <1> ; A file handle describes the file, and the location within the file that
    89                              <1> ; we are reading. The file handle can be manipulated without the file
    90                              <1> ; being in memory, thus allowing the user to access data without needing 
    91                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    92                              <1> ; accessing devices, by treating them as files with their drivers 
    93                              <1> ; responding and translating the manipulations of the file handle itself.
    94                              <1> ; Neither the driver nor the application should see or use the SFT for
    95                              <1> ; the handle, as it is subject to change (and will change when file 
    96                              <1> ; sharing provisions are included). The DOS will make requests to the 
    97                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    98                              <1> ; track of the information in the SFT entry for that handle. 
    99                              <1> ;
   100                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   101                              <1> ; can point to the same file. It all depends on what the applications 
   102                              <1> ; want to do with the File.
   103                              <1> ;
   104                              <1> ; !!!!IMPORTANT!!!!
   105                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   106                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   107                              <1> ;
   108                              <1> ;Each SFT may look like this:
   109                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   110                              <1> ;            |                |
   111                              <1> ;       wNumFiles*sft    wNumFiles*sft
   112                              <1> ;
   113                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   114                              <1> ; System FCBs.
   115                              <1> ;
   116                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   117                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   118                              <1> ;
   119                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   120                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   121                              <1> ;------------------------------------------------------------------------;
   122                              <1> struc sfth   ;System file table header
   123                              <1> ; This is the SFT header.
   124                              <1> ; This structure comes before the start of the first file in the array/table.
   125 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   126 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc sft
   130                              <1> ;This is the file struc itself
   131 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   132 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   133 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   134 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   135 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   136 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   137 00000013 ????                <1>     .wTime       resw 1    ;File Time
   138 00000015 ????                <1>     .wDate       resw 1    ;File Date
   139 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   140 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   141 0000001F ????                <1>     .wRelSect    resw 1    ;Rel sector in the last cluster accessed
   142 00000021 ????????            <1>     .dDirSect    resd 1    ;Rel number of sector containing directory entry 
   143 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   144 00000026 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   145 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   146 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   147                              <1> endstruc
   148                              <1> ;Open Mode equates
   149                              <1> ;Access modes   Bits[2:0]
   150                              <1>     ReadAccess      equ 0h
   151                              <1>     WriteAccess     equ 1h
   152                              <1>     RWAccess        equ 2h
   153                              <1> ;Bit 3 reserved 0
   154                              <1> ;Sharing modes  Bits[6:4]
   155                              <1>     CompatShare     equ 0h
   156                              <1>     denyRWShare     equ 10h
   157                              <1>     denyWriteShare  equ 20h
   158                              <1>     denyReadShare   equ 30h
   159                              <1>     denyNoneShare   equ 40h
   160                              <1> ;Bit 7 reserved 0
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> ;Critical Error handling
   163                              <1>     critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   164                              <1> ;Buffering on writes
   165                              <1>     noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file?
   167                              <1>     FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1>     readOnlyFile    equ 1h
   170                              <1>     hiddenFile      equ 2h
   171                              <1>     systemFile      equ 4h
   172                              <1>     volumeLabel     equ 8h
   173                              <1>     directoryFile   equ 10h ;Directory entry
   174                              <1>     archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1>     charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1>     charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1>     charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1>     charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1>     charDevFastOut  equ 10h ;If set, device supports INT 49h
   182                              <1>     devBinary       equ 20h ;If set, r/w device in Binary mode!!!
   183                              <1>     charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1>     blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   185                              <1>     devCharDev      equ 80h ;If set, it is a char device!
   186                              <1>     charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1>     devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1>     charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1>     blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   190                              <1>     devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   214                              <1>     .dataarea:             ;Points to the start of the data area
   215                              <1> endstruc
   216                              <1> ;Buffer Flag equates
   217                              <1>     dosBuffer   equ 1h  ;DOS data sector in buffer
   218                              <1>     fatBuffer   equ 2h  ;FAT sector in buffer
   219                              <1>     dirBuffer   equ 4h  ;Directory sector in buffer
   220                              <1>     dataBuffer  equ 8h  ;File Data sector in buffer
   221                              <1>     refBuffer   equ 20h ;Data in buffer referenced by an application
   222                              <1>     dirtyBuffer equ 40h ;Data in buffer modified by an application
   223                              <1> ;------------------------------------------------------------------------;
   224                              <1> ; Memory control block for each memory arena
   225                              <1> ;------------------------------------------------------------------------;
   226                              <1> struc mcb
   227 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   228 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   229 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   230 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   231                              <1>     .program:
   232                              <1> endstruc
   233                              <1> ;MCB equates
   234                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   235                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   236                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   237                              <1> mcbMarkCtn      equ "M"
   238                              <1> mcbMarkEnd      equ "Z"
   239                              <1> 
   240                              <1> memFirstFit     equ 0   ;First free block goes to application
   241                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   242                              <1> memLastFit      equ 2   ;Last free block goes to application
   243                              <1> 
   244                              <1> ;Owner = Para aligned address => Owning application PSP
   245                              <1> ;...To consider...
   246                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   247                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   248                              <1> ;------------------------------------------------------------------------;
   249                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   250                              <1> ; following order, thus allowing for return values to be placed in the 
   251                              <1> ; registers by accessing the caller register stack frame.
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> struc callerFrame
   254 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   255 00000008 ????????????????    <1>     .rbx    resq 1    
   256 00000010 ????????????????    <1>     .rcx    resq 1
   257 00000018 ????????????????    <1>     .rdx    resq 1
   258 00000020 ????????????????    <1>     .rsi    resq 1
   259 00000028 ????????????????    <1>     .rdi    resq 1
   260 00000030 ????????????????    <1>     .rbp    resq 1
   261 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   262 00000040 ????????????????    <1>     .r9     resq 1
   263                              <1> ;Pushed by Processor when invoked via Interrupt
   264 00000048 ????????????????    <1>     .rip    resq 1
   265 00000050 ????????????????    <1>     .cs     resq 1
   266 00000058 ????????????????    <1>     .flags  resq 1
   267                              <1> endstruc
   268                              <1> 
   269                              <1> %macro pushDOS 0
   270                              <1>     push r9
   271                              <1>     push r8
   272                              <1>     push rbp
   273                              <1>     push rdi
   274                              <1>     push rsi
   275                              <1>     push rdx
   276                              <1>     push rcx
   277                              <1>     push rbx
   278                              <1>     push rax
   279                              <1> %endmacro
   280                              <1> 
   281                              <1> %macro popDOS 0
   282                              <1>     pop rax
   283                              <1>     pop rbx
   284                              <1>     pop rcx
   285                              <1>     pop rdx
   286                              <1>     pop rsi
   287                              <1>     pop rdi
   288                              <1>     pop rbp
   289                              <1>     pop r8
   290                              <1>     pop r9
   291                              <1> %endmacro
   292                              <1> struc fcb
   293                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   294 00000000 ??                  <1>     .driveNum   resb 1
   295 00000001 ????????????????    <1>     .filename   resb 8
   296 00000009 ??????              <1>     .fileext    resb 3
   297 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   298                              <1> ;One block consists of 128 records, of size denoted in the below
   299 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   300 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   301 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   302 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   303 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   304 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   305 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   306 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   307 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   308                              <1>     ;If record size > 64, high byte is ignored.
   309                              <1>     ;Used for random read and write operations to find the right record
   310                              <1> endstruc
   311                              <1> 
   312                              <1> struc psp
   313 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   314 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   315 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   316 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   317 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   318 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   319 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   320 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   321 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   322 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   323 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   324 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   325 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   326                              <1> ;Extra handle arrays are grouped into a linked list
   327                              <1> ;The below are in the same place as in DOS
   328 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   329 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   330                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   331 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   332 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   333                              <1> endstruc
   334                              <1> 
   335                              <1> struc clkStruc
   336 00000000 ????                <1>     .dateWord   resw 1
   337 00000002 ??                  <1>     .minutes    resb 1
   338 00000003 ??                  <1>     .hours      resb 1
   339 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   340 00000005 ??                  <1>     .seconds    resb 1
   341                              <1> endstruc
   342                              <1> 
   343                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   344                              <1> ;for a space of 64Gb
   345                              <1> dosAPTsize  equ 60*4096
     8                                  %include "./Source/Debug/debSym.inc"
     9                              <1> ;This file will include the debuging symbols
    10                              <1> 
    11                              <1> %define true 1
    12                              <1> %define false 0
    13                              <1> 
    14                              <1> ;Switch the DEBUG to false in production!
    15                              <1> %define DEBUG false
    16                              <1> %define DPBINFO false
    17                              <1> %define REGS true
    18                              <1> %define ENDSTATUS true
    19                              <1> %define ALLOCTEST true
    20                              <1> 
    21                              <1> 
    22                              <1> ;Use this space as the debug stack
    23                              <1> %define debStackTop 80000h
     9                                  %include "./Source/Include/dosError.inc"
    10                              <1> ;DOS Error codes
    11                              <1> 
    12                              <1> ;Extended Error Codes
    13                              <1> errInvFnc   equ 1   ;Invalid function number
    14                              <1> errFnf      equ 2   ;File not found
    15                              <1> errPnf      equ 3   ;Path not found
    16                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    17                              <1> errAccDen   equ 5   ;Access denied (to resource)
    18                              <1> errBadHdl   equ 6   ;Invalid handle
    19                              <1> errMCBbad   equ 7   ;MCB's destroyed
    20                              <1> errNoMem    equ 8   ;Insufficient memory
    21                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    22                              <1> errBadEnv   equ 10  ;Invalid environment
    23                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    24                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    25                              <1> errInvDat   equ 13  ;Invalid data
    26                              <1> ;           equ 14  ;Reserved
    27                              <1> errBadDrv   equ 15  ;Invalid drive specified
    28                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    29                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    30                              <1> errNoFil    equ 18  ;No more files
    31                              <1> ;The following are Driver error codes + 19
    32                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    33                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    34                              <1> errUnkUnt   equ 20  ;Unknown Unit
    35                              <1> errDrvNR    equ 21  ;Drive not ready
    36                              <1> errUnkCmd   equ 22  ;Unknown Command
    37                              <1> errCRCerr   equ 23  ;Data (CRC) error
    38                              <1> errBadRLn   equ 24  ;Bad request structure length
    39                              <1> errSekErr   equ 25  ;Seek error
    40                              <1> errUnkMed   equ 26  ;Unknown media type
    41                              <1> errSecNF    equ 27  ;Sector not Found
    42                              <1> errNoPap    equ 28  ;Printer out of paper
    43                              <1> errWF       equ 29  ;Write fault
    44                              <1> errRF       equ 30  ;Read fault
    45                              <1> errGF       equ 31  ;General fault
    46                              <1> ;Number 32-33 reserved
    47                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    48                              <1> errNoFCB    equ 35  ;FCB unavailable
    49                              <1> ;Numbers 36-82 reserved
    50                              <1> errFI24     equ 83  ;Fail on INT 24h
    51                              <1> ;Numbers 84-88 reserved
    52                              <1> ;-----------------------------------------------------------------------------
    53                              <1> ;Error Loci
    54                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    55                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    56                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    57                              <1> eLocSer     equ 4   ;Serial Device error
    58                              <1> eLocMem     equ 5   ;Related to RAM
    59                              <1> ;-----------------------------------------------------------------------------
    60                              <1> ;Error Actions
    61                              <1> eActRet     equ 1   ;Retry
    62                              <1> eActDRet    equ 2   ;Delay then retry
    63                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    64                              <1> eActAbt     equ 4   ;Abort with cleanup
    65                              <1> eActKil     equ 5   ;Abort without cleanup
    66                              <1> eActIgn     equ 6   ;Ignore error
    67                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    68                              <1> ;-----------------------------------------------------------------------------
    69                              <1> ;Error classes
    70                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    71                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    72                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    73                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    74                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    75                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    76                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requestss etc...
    77                              <1> eClsNotFnd  equ 8   ;Resource not found
    78                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    79                              <1> eClsLocked  equ 10  ;Resource Locked
    80                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    81                              <1> eClsClash   equ 12  ;Resource already exists!
    82                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  Segment .text align=1   ;Init code
    11                                  %include "./Source/Sysinit/sysInit.asm"
    12                              <1> ; We arrive here with the following values in the registers.
    13                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    14                              <1> ; dx  = Int 33h boot device number
    15                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    16                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    17 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    18 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    18 0000000B 909090909090909090- <1>
    18 00000014 909090909090909090- <1>
    18 0000001D 909090909090909090- <1>
    18 00000026 909090909090909090- <1>
    18 0000002F 909090909090909090- <1>
    18 00000038 909090909090909090- <1>
    18 00000041 909090909090909090- <1>
    18 0000004A 909090909090909090- <1>
    18 00000053 909090909090909090- <1>
    18 0000005C 909090909090909090- <1>
    18 00000065 909090909090909090- <1>
    18 0000006E 909090909090909090- <1>
    18 00000077 909090909090909090- <1>
    18 00000080 909090909090909090- <1>
    18 00000089 909090909090909090- <1>
    18 00000092 909090909090909090- <1>
    18 0000009B 909090909090909090- <1>
    18 000000A4 909090909090909090- <1>
    18 000000AD 909090909090909090- <1>
    18 000000B6 909090909090909090- <1>
    18 000000BF 909090909090909090- <1>
    18 000000C8 909090909090909090- <1>
    18 000000D1 909090909090909090- <1>
    18 000000DA 909090909090909090- <1>
    18 000000E3 909090909090909090- <1>
    18 000000EC 909090909090909090- <1>
    18 000000F5 909090909090909090- <1>
    18 000000FE 9090                <1>
    19                              <1> ;First move the alignment of the DOSSEG to 4Kb
    20 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    21 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    22 00000106 0F32                <1>     rdmsr
    23 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    24 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    25 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    26 00000110 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    27 00000113 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    28 0000011A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    29 00000121 89F8                <1>     mov eax, edi
    30 00000123 4889FA              <1>     mov rdx, rdi
    31 00000126 48C1EA20            <1>     shr rdx, 20h
    32 0000012A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    33 0000012C 5A                  <1>     pop rdx
    34                              <1> ;------------------------------------------------;
    35                              <1> ;              Connect Debugger                  ;
    36                              <1> ;------------------------------------------------;
    37                              <1> %if DEBUG
    38                              <1> ;Only connect if in debug mode
    39                              <1>     mov eax, 0C501h ;Connect debugger
    40                              <1>     int 35h
    41                              <1> %endif
    42                              <1> ;------------------------------------------------;
    43                              <1> ;           Sanitise the data area               ;
    44                              <1> ;------------------------------------------------;
    45 0000012D B9[C7D40300]        <1>     mov ecx, dSegLen
    46 00000132 30C0                <1>     xor al, al
    47 00000134 57                  <1>     push rdi    ;Temp save rdi on the stack
    48 00000135 F3AA                <1>     rep stosb
    49 00000137 5F                  <1>     pop rdi
    50                              <1> ;------------------------------------------------;
    51                              <1> ;          Start saving Basic DOS data           ;
    52                              <1> ;------------------------------------------------;
    53 00000138 64881425[10C00300]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    54                              <1> ;Copy DOS to its final resting place
    55 00000140 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    55 00000145 [00C00300]          <1>
    56 00000149 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    56 0000014E [08C00300]          <1>
    57 00000152 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    58 00000155 4881C7[C7D40300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    59 0000015C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    60 00000163 B900100000          <1>     mov ecx, 1000h
    61 00000168 F348A5              <1>     rep movsq
    62                              <1> 
    63 0000016B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    64 0000016D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    65 00000171 664489C0            <1>     mov ax, r8w
    66 00000175 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
    67 0000017D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    68 00000185 64C60425[B2C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    68 0000018D 05                  <1>
    69 0000018E 64C60425[13C00300]- <1>     mov byte fs:[numLogDrv], 0     ;Number of logical drives
    69 00000196 00                  <1>
    70 00000197 64C60425[B4C00300]- <1>     mov byte fs:[numFiles], 5      ;Default 8 files, at start 5
    70 0000019F 05                  <1>
    71 000001A0 64C60425[B3C00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
    71 000001A8 01                  <1>
    72                              <1>     ;If no detected Int 33h devices, halt 
    73 000001A9 49C1E810            <1>     shr r8, 2*8
    74 000001AD 4584C0              <1>     test r8b, r8b
    75 000001B0 0F84FC0A0000        <1>     jz errorInit
    76                              <1> ;------------------------------------------------;
    77                              <1> ;          Add additional page tables            ;
    78                              <1> ;------------------------------------------------;
    79                              <1> ;This will allow for up to 64Gb of addressible space
    80 000001B6 4889EF              <1>     mov rdi, rbp
    81                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    82 000001B9 B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
    83 000001BE 57                  <1>     push rdi
    84 000001BF 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    84 000001C8 00                  <1>
    85                              <1> pdtLoop:
    86 000001C9 48AB                <1>     stosq
    87 000001CB 480500002000        <1>     add rax, 200000h
    88 000001D1 FFC9                <1>     dec ecx
    89 000001D3 75F4                <1>     jnz pdtLoop
    90 000001D5 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
    91                              <1> ;Now we add every 4kb page to the page directory pointer table
    92                              <1> ;15 4kb pages to consider
    93 000001D6 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
    94 000001D9 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
    95 000001DC 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
    96 000001E3 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
    97 000001EA B93C000000          <1>     mov ecx, 60
    98 000001EF 480D03000000        <1>     or rax, 3h      ;present and r/w
    99                              <1> pdptLoop:
   100 000001F5 48AB                <1>     stosq
   101 000001F7 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   102 000001FD FFC9                <1>     dec ecx
   103 000001FF 75F4                <1>     jnz pdptLoop
   104 00000201 0F20DF              <1>     mov rdi, cr3
   105 00000204 0F22DF              <1>     mov cr3, rdi
   106                              <1> 
   107                              <1> ;------------------------------------------------;
   108                              <1> ;                   MCB inits                    ;
   109                              <1> ;------------------------------------------------;
   110                              <1> mcbInit:
   111 00000207 B820E80000          <1>     mov eax, 0E820h
   112 0000020C CD35                <1>     int 35h
   113                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   114 0000020E E808010000          <1>     call .mcbFindAddress
   115 00000213 7349                <1>     jnc .mcbi1  ;If found, proceed
   116                              <1>     ;Here, we try use E801h
   117 00000215 B801E80000          <1>     mov eax, 0E801h
   118 0000021A CD35                <1>     int 35h
   119 0000021C 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   120 0000021F 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   121 00000222 85C0                <1>     test eax, eax
   122 00000224 741B                <1>     jz .worst
   123 00000226 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   124 00000229 C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   125 0000022C 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax
   126 00000234 64891C25[18C00300]  <1>     mov dword fs:[hiProtMem], ebx
   127 0000023C E927010000          <1>     jmp mcbBuild
   128                              <1> .worst:
   129                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   130 00000241 B800002000          <1>     mov eax, 200000h
   131 00000246 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   131 0000024B [08C00300]          <1>
   132 0000024F 29D8                <1>     sub eax, ebx
   133 00000251 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   134 00000259 E90A010000          <1>     jmp mcbBuild 
   135                              <1> .mcbi1:
   136 0000025E 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   137 00000261 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   137 0000026A 00                  <1>
   138 0000026B 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   139 0000026F 0F85C6000000        <1>     jne .mcbFail
   140 00000275 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   141                              <1>     ;PCI hole always exists so this value will always be a dword
   142 00000279 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax
   143 00000281 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   144 00000284 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   145 00000287 4881FB00000001      <1>     cmp rbx, 1000000h  
   146 0000028E 773C                <1>     ja .skipISA
   147                              <1> ;Here we deal with ISA hole issues
   148 00000290 B820E80000          <1>     mov eax, 0E820h
   149 00000295 CD35                <1>     int 35h
   150 00000297 48B800000001000000- <1>     mov rax, 1000000h
   150 000002A0 00                  <1>
   151 000002A1 E875000000          <1>     call .mcbFindAddress
   152 000002A6 0F82BC000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   153 000002AC 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   153 000002B5 00                  <1>
   154 000002B6 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   155 000002BA 0F85A8000000        <1>     jne mcbBuild  
   156 000002C0 488B5808            <1>     mov rbx, qword [rax + 8]
   157 000002C4 64891C25[18C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   158                              <1> .skipISA:
   159 000002CC B820E80000          <1>     mov eax, 0E820h
   160 000002D1 CD35                <1>     int 35h
   161 000002D3 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   161 000002DC 00                  <1>
   162 000002DD E839000000          <1>     call .mcbFindAddress
   163 000002E2 0F8280000000        <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   164 000002E8 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   164 000002F1 00                  <1>
   165 000002F2 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   166 000002F6 7570                <1>     jne mcbBuild   
   167 000002F8 488B5808            <1>     mov rbx, qword [rax + 8]
   168                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   169 000002FC 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   169 00000305 00                  <1>
   170 00000306 4839CB              <1>     cmp rbx, rcx
   171 00000309 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   172 0000030D 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   172 00000312 [1CC00300]          <1>
   173 00000316 E94D000000          <1>     jmp mcbBuild
   174                              <1> .mcbFindAddress:
   175                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   176                              <1> ;Entry: rax = Address of arena to search for
   177                              <1> ;       rsi = Pointer to memory map
   178                              <1> ;       ecx = Number of 24 byte entries
   179                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   180                              <1> ;       CF=CY : value in rax not found
   181 0000031B 56                  <1>     push rsi
   182 0000031C 51                  <1>     push rcx
   183 0000031D 50                  <1>     push rax
   184                              <1> .mfa0:
   185 0000031E 483B06              <1>     cmp rax, qword [rsi]
   186 00000321 7410                <1>     je .mcbAddressFound
   187 00000323 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   188 0000032A FFC9                <1>     dec ecx
   189 0000032C 79F0                <1>     jns .mfa0
   190                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   191 0000032E 58                  <1>     pop rax
   192 0000032F 59                  <1>     pop rcx
   193 00000330 5E                  <1>     pop rsi
   194 00000331 F9                  <1>     stc
   195 00000332 C3                  <1>     ret
   196                              <1> .mcbAddressFound:
   197 00000333 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   198 00000336 59                  <1>     pop rcx ;Pop old rax value off
   199 00000337 59                  <1>     pop rcx
   200 00000338 5E                  <1>     pop rsi
   201 00000339 F8                  <1>     clc
   202 0000033A C3                  <1>     ret
   203                              <1> .mcbFail:
   204 0000033B 488D2D0C000000      <1>     lea rbp, .mcbFailmsg
   205 00000342 B804130000          <1>     mov eax, 1304h
   206 00000347 CD30                <1>     int 30h
   207 00000349 E964090000          <1>     jmp errorInit
   208 0000034E 4D656D6F727920416C- <1> .mcbFailmsg: db "Memory Allocation Error",0Ah,0Dh,0
   208 00000357 6C6F636174696F6E20- <1>
   208 00000360 4572726F720A0D00    <1>
   209                              <1> mcbBuild:
   210                              <1> ;Actually build the MCB chain here
   211                              <1> ;Start by computing the difference between userbase and DOS area
   212                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   213 00000368 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   213 0000036D [08C00300]          <1>
   214 00000371 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   215 00000378 56                  <1>     push rsi    ;Save ptr
   216 00000379 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   217 00000380 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   218 00000383 64293425[14C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   219 0000038B 5B                  <1>     pop rbx
   220 0000038C C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   221 0000038F 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   222 00000397 648B3425[14C00300]  <1>     mov esi, dword fs:[loProtMem]
   223 0000039F C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   224 000003A2 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   225 000003A5 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   225 000003AA [78C00300]          <1>
   226                              <1> 
   227                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   228 000003AE 64813C25[18C00300]- <1>     cmp dword fs:[hiProtMem], 0
   228 000003B6 00000000            <1>
   229 000003BA 746E                <1>     jz .skipISA
   230                              <1>     ;Here if an ISA hole exists, place a MCB around it
   231 000003BC 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   232                              <1>     ;Remove one MCB worth of space from alloc
   233 000003C3 31C9                <1>     xor ecx, ecx
   234 000003C5 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   235 000003C8 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   236 000003CE C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   237 000003D1 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   238 000003D4 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   239 000003D7 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   240 000003DA 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   241 000003E2 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   241 000003EB 00                  <1>
   242 000003EC 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   243 000003EF 480510000000        <1>     add rax, mcb_size
   244 000003F5 4829C1              <1>     sub rcx, rax    ;Take their difference
   245 000003F8 C1E904              <1>     shr ecx, 4
   246 000003FB 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   247 000003FE C1E104              <1>     shl ecx, 4  ;Get bytes again
   248 00000401 4881C310000000      <1>     add rbx, mcb_size
   249 00000408 4801CB              <1>     add rbx, rcx
   250                              <1>     ;RBX should now be at 16Mb
   251 0000040B C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   252 0000040E 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   253 00000416 648B0C25[18C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   254 0000041E C1E904              <1>     shr ecx, 4  ;Get paragraphs
   255 00000421 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   256 00000427 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   257                              <1> .skipISA:
   258                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   259                              <1>     ;rbx points to a block with "Z" marker
   260 0000042A 64813C25[1CC00300]- <1>     cmp dword fs:[longMem], 0
   260 00000432 00000000            <1>
   261 00000436 7470                <1>     jz .exit
   262                              <1>     ;Add PCI hole MCB
   263 00000438 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   264                              <1>     ;Remove one MCB worth of space from alloc
   265 0000043F 31C9                <1>     xor ecx, ecx
   266 00000441 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   267 00000444 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   268 0000044A C1E104              <1>     shl ecx, 4  ;Get bytes
   269 0000044D C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   270 00000450 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   271 00000453 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   272 00000456 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   273 0000045E 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   273 00000467 00                  <1>
   274 00000468 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   275 0000046B 480510000000        <1>     add rax, mcb_size
   276 00000471 4829C1              <1>     sub rcx, rax    ;Take their difference
   277 00000474 C1E904              <1>     shr ecx, 4
   278 00000477 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   279 0000047A C1E104              <1>     shl ecx, 4  ;Get bytes again
   280 0000047D 4881C310000000      <1>     add rbx, mcb_size
   281 00000484 4801CB              <1>     add rbx, rcx
   282                              <1>     ;RBX should now be at 4Gb
   283 00000487 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   284 0000048A 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   285 00000492 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   285 00000497 [1CC00300]          <1>
   286 0000049B 48C1E904            <1>     shr rcx, 4
   287 0000049F 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   288 000004A5 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   289                              <1> .exit:
   290                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   291 000004A8 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   292                              <1> ;------------------------------------------------;
   293                              <1> ;          Kernel inits and adjustments          ;
   294                              <1> ;------------------------------------------------;
   295                              <1> ;Adjust Int 41h address table
   296                              <1> adjInt41h:
   297 000004AF B96A000000          <1>     mov ecx, kernelDispatchTableL/8 ;Number of elements in table
   298 000004B4 48BB-               <1>     mov rbx, kernelDispatchTable ;Get EA of table
   298 000004B6 [DA18000000000000]  <1>
   299 000004BE 488D5C1D00          <1>     lea rbx, qword [rbp + rbx]    ;Point to the start of the relocated table 
   300                              <1> .ai41h:
   301 000004C3 48012B              <1>     add qword [rbx], rbp    ;Add base address value to entry in reloc table
   302 000004C6 4881C308000000      <1>     add rbx, 8              ;Each entry is size 8
   303 000004CD FFC9                <1>     dec ecx
   304 000004CF 75F2                <1>     jnz .ai41h  ;Keep looping until all entries have been adjusted
   305                              <1> 
   306                              <1> ;Adjust Interrupt Entries Int 40h-49h
   307                              <1> adjInts:
   308 000004D1 B340                <1>     mov bl, 40h
   309 000004D3 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   310 000004D8 CD35                <1>     int 35h
   311 000004DA B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   312 000004DF 488D3D30080000      <1>     lea rdi, intData
   313 000004E6 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   314                              <1> .ai0:
   315 000004E8 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   316 000004ED 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   317 000004F0 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   318                              <1> .ai1:
   319 000004F3 CD35                <1>     int 35h
   320 000004F5 4881C708000000      <1>     add rdi, 8
   321 000004FC FFC1                <1>     inc ecx
   322 000004FE 81F94A000000        <1>     cmp ecx, 4Ah
   323 00000504 75E2                <1>     jne .ai0
   324                              <1> 
   325                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   326                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   327                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   328                              <1>     %if DEBUG
   329                              <1> debugPopUpMsg:
   330                              <1>     push rbx
   331                              <1>     push rbp
   332                              <1>     push rcx
   333                              <1>     push rdx
   334                              <1>     mov ecx, 53 ;A large number of lines
   335                              <1>     xor edx, edx    ;COM 1
   336                              <1> .cls:
   337                              <1>     mov eax, 010Ah ;Transmit Line feed
   338                              <1>     int 34h
   339                              <1>     dec ecx
   340                              <1>     jnz .cls
   341                              <1>     lea rbx, qword [debPrintNullString + rbp]
   342                              <1>     lea rbp, .msg
   343                              <1>     call rbx
   344                              <1>     jmp short .exit
   345                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   346                              <1> .exit:
   347                              <1>     pop rdx
   348                              <1>     pop rcx
   349                              <1>     pop rbp
   350                              <1>     pop rbx
   351                              <1>     %endif
   352                              <1> 
   353                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   354 00000506 488D15A5070000      <1>     lea rdx, errorInit ;Get segment start address
   355 0000050D B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   356 00000512 CD41                <1>     int 41h
   357 00000514 488D1597070000      <1>     lea rdx, errorInit ;Get segment start address
   358 0000051B B844250000          <1>     mov eax, 2544h
   359 00000520 CD41                <1>     int 41h
   360                              <1> ;------------------------------------------------;
   361                              <1> ;          Driver Adjustments and inits          ;
   362                              <1> ;------------------------------------------------;
   363                              <1> ;Modify the pointers in nData before putting them in the data area
   364 00000522 48012D3D080000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   365 00000529 48012D40080000      <1>     add qword [nData + drvHdr.strPtr], rbp
   366 00000530 48012D41080000      <1>     add qword [nData + drvHdr.intPtr], rbp
   367                              <1> ;Copy the Null driver to its location in Sysvars
   368 00000537 B922000000          <1>     mov ecx, drvHdr_size
   369 0000053C 488D3523080000      <1>     lea rsi, qword [nData]
   370 00000543 488DBD[C0C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   371 0000054A F3A4                <1>     rep movsb   
   372                              <1> 
   373                              <1> ;Adjust the addresses in the other driver headers 
   374 0000054C 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   374 0000054E [BD1E000000000000]  <1>
   375 00000556 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   376 0000055B 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   377                              <1> adjDrivers:
   378 0000055F E83B070000          <1>     call adjustDrvHdr
   379 00000564 E2F9                <1>     loop adjDrivers
   380                              <1> 
   381                              <1> ;Open NUL
   382 00000566 488D9D[24C00300]    <1>     lea rbx, qword [rbp + charReqHdr]
   383 0000056D C6030D              <1>     mov byte [rbx + openReqPkt.hdrlen], openReqPkt_size
   384 00000570 C6430300            <1>     mov byte [rbx + openReqPkt.status], 0
   385 00000574 FF95[CAC00300]      <1>     call qword [rbp + nulDevHdr + drvHdr.strPtr]
   386 0000057A FF95[D2C00300]      <1>     call qword [rbp + nulDevHdr + drvHdr.intPtr]
   387                              <1> ;Open CON
   388                              <1> conInit:    ;Rather than keeping this resident... do it here
   389                              <1> .ci0:
   390 00000580 B401                <1>     mov ah, 01      ;Get buffer status
   391 00000582 CD36                <1>     int 36h
   392 00000584 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   393 00000586 30E4                <1>     xor ah, ah
   394 00000588 CD36                <1>     int 36h ;Read key to flush from buffer
   395 0000058A EBF4                <1>     jmp short .ci0
   396                              <1> .ci1:
   397 0000058C B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   398 00000591 CD30                <1>     int 30h
   399 00000593 B402                <1>     mov ah, 02h
   400 00000595 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   401 00000597 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   402 00000599 CD30                <1>     int 30h
   403 0000059B B707                <1>     mov bh, 07h     ;Grey/Black attribs
   404 0000059D B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   405 000005A2 CD30                <1>     int 30h
   406                              <1> 
   407                              <1>     ;Save ptr to ConHdr in Sysvars
   408 000005A4 488D85[BD1E0000]    <1>     lea rax, qword [rbp + conHdr]
   409 000005AB 6448890425-         <1>     mov qword fs:[conPtr], rax
   409 000005B0 [98C00300]          <1>
   410                              <1> 
   411                              <1>     ;Save ptr to ClkHdr in Sysvars
   412 000005B4 488D85[231F0000]    <1>     lea rax, qword [rbp + clkHdr]
   413 000005BB 6448890425-         <1>     mov qword fs:[clockPtr], rax
   413 000005C0 [90C00300]          <1>
   414                              <1> 
   415                              <1> ;------------------------------------------------;
   416                              <1> ;         Link DOS to temporary Buffer           ;
   417                              <1> ;------------------------------------------------;
   418                              <1> tempBufferInit:
   419 000005C4 488DBD[AA020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   420 000005CB 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   420 000005D0 [A2C00300]          <1>
   421 000005D4 31C0                <1>     xor eax, eax
   422 000005D6 48FFC8              <1>     dec rax
   423 000005D9 48AB                <1>     stosq   ;.nextBufPTr, end of list
   424 000005DB AA                  <1>     stosb   ;.driveNumber, Free entry
   425 000005DC 48FFC0              <1>     inc rax
   426 000005DF AA                  <1>     stosb   ;.bufferFlags, No flags
   427                              <1> ;------------------------------------------------;
   428                              <1> ;         Init msd driver, create DPB            ;
   429                              <1> ;------------------------------------------------;
   430                              <1> storageInits:
   431                              <1> ;First save dpb pointer in sysvars
   432 000005E0 488D9D[4B010000]    <1>     lea rbx, qword [rbp + firstDPB]
   433 000005E7 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   433 000005EC [80C00300]          <1>
   434                              <1> ;Open Mass Storage
   435                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   436                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   437                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   438                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   439                              <1>     ;mov al, byte fs:[numLogDrv]
   440                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   441                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   442                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   443                              <1>     ;Check if it returned OK first!
   444                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   445                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   446                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   447                              <1>     ;mov byte fs:[numLogDrv], al
   448                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   449                              <1> 
   450                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   451 000005F0 E893070000          <1>     call diskInit
   452 000005F5 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   453 000005F8 648A0425[13C00300]  <1>     mov al, byte fs:[numLogDrv]
   454 00000600 488D95[53280000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   455 00000607 30C9                <1>     xor cl, cl  ;Clear counter
   456 00000609 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   456 0000060E [80C00300]          <1>
   457                              <1> .si0:   
   458 00000612 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   459 00000615 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   460 00000617 CD41                <1>     int 41h
   461                              <1> ;Add other data to DPB
   462 00000619 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   463 0000061C 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   464 0000061F 50                  <1>     push rax
   465 00000620 488D87[451F0000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   466 00000627 4889451A            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   467 0000062B 58                  <1>     pop rax
   468 0000062C FEC1                <1>     inc cl
   469 0000062E 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   470 00000630 7416                <1>     je .si1
   471 00000632 50                  <1>     push rax
   472 00000633 488D4534            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   473 00000637 48894524            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   474 0000063B 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   475 0000063E 58                  <1>     pop rax
   476 0000063F 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   477 00000646 EBCA                <1>     jmp short .si0
   478                              <1> .si1:
   479                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   480 00000648 48C74524FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   481 00000650 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   482                              <1> ;------------------------------------------------;
   483                              <1> ;          Find largest sector size              ;
   484                              <1> ;------------------------------------------------;
   485                              <1> sectorSizeSearch:
   486                              <1> ;Done by reading BPB's for each drive
   487 00000653 488D9D[53280000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   488                              <1>     
   489                              <1>     ;Go thru each block individually
   490 0000065A 31C0                <1>     xor eax, eax
   491 0000065C 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   492                              <1> .findLargest:
   493 0000065F 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   494 00000663 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   495 00000668 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   496 0000066F 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   497 00000672 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   498 00000675 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   499 00000677 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   499 0000067C [A0C00300]          <1>
   500                              <1>     
   501                              <1> ;------------------------------------------------;
   502                              <1> ;                 Temp CDS inits                 ;
   503                              <1> ;------------------------------------------------;
   504                              <1> tempCDS:
   505                              <1> ;Build a temporary CDS for Drive A to use it for booting
   506 00000680 488DBD[4F020000]    <1>     lea rdi, qword [rbp + initCDS]
   507 00000687 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   507 0000068C [AAC00300]          <1>
   508 00000690 B943000000          <1>     mov ecx, 67 ;Buffer length
   509 00000695 31C0                <1>     xor eax, eax
   510 00000697 4889FB              <1>     mov rbx, rdi    ;Save CDS pointer in rbx
   511 0000069A F3AA                <1>     rep stosb   ;Zero out the path string
   512 0000069C 4889DF              <1>     mov rdi, rbx
   513 0000069F B041                <1>     mov al, "A"
   514 000006A1 AA                  <1>     stosb
   515 000006A2 B03A                <1>     mov al, ":"
   516 000006A4 AA                  <1>     stosb
   517 000006A5 B05C                <1>     mov al, "\"
   518 000006A7 AA                  <1>     stosb
   519 000006A8 4889DF              <1>     mov rdi, rbx
   520 000006AB 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   521 000006B1 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   521 000006B6 [80C00300]          <1>
   522 000006BA 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   523 000006BE 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   524                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   525                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   526                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   527 000006C4 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax    ;eax was zeroed before
   528                              <1> ;------------------------------------------------;
   529                              <1> ;     Set up general PSP areas and DOS vars      ;
   530                              <1> ;------------------------------------------------;
   531                              <1>     ;Additional DOS Vars init
   532 000006C7 31C0                <1>     xor eax, eax
   533 000006C9 64880425[0DC10300]  <1>     mov byte fs:[currentDrv], al ;Current Drive = Drive A
   534 000006D1 64880425[0FC10300]  <1>     mov byte fs:[breakFlag], al  ;Break off
   535 000006D9 64880425[10C10300]  <1>     mov byte fs:[verifyFlag], al ;Write only
   536 000006E1 64880425[0EC10300]  <1>     mov byte fs:[singleDrv], al  ;Only used on single drive systems
   537 000006E9 64880425[E2C00300]  <1>     mov byte fs:[critErrFlag], al   ;Not in critical error
   538 000006F1 64880425[E3C00300]  <1>     mov byte fs:[inDOS], al      ;Not in DOS
   539 000006F9 64C60425[E4C00300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   539 00000701 FF                  <1>
   540 00000702 6466890425-         <1>     mov word fs:[lastRetCode], ax   ;Last return code is 0, no error
   540 00000707 [0AC10300]          <1>
   541 0000070B 64880425[0CC10300]  <1>     mov byte fs:[allocStrat], al    ;First Fit
   542                              <1> 
   543                              <1>     ;SYSVARS PSP Init
   544 00000713 488D1DE6F8FFFF      <1>     lea rbx, qword [tempPSP]
   545 0000071A 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   545 0000071F [F2C00300]          <1>
   546 00000723 53                  <1>     push rbx
   547 00000724 4881C380000000      <1>     add rbx, psp.dta
   548 0000072B 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   548 00000730 [EAC00300]          <1>
   549 00000734 5B                  <1>     pop rbx
   550 00000735 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   551 0000073A C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   552 00000741 48895B02            <1>     mov qword [rbx + psp.startSeg], rbx ;Save start segment of app
   553 00000745 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   554 00000749 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   555 0000074D 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   556 00000751 48B800000001020000- <1>     mov rax, 0000000201000000h  ;Store default handles in JFT
   556 0000075A 00                  <1>
   557 0000075B 48AB                <1>     stosq   ;8 bytes
   558 0000075D 31C0                <1>     xor eax, eax
   559 0000075F 48AB                <1>     stosq   ;16 bytes
   560 00000761 AB                  <1>     stosd   ;20 bytes
   561 00000762 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   562 0000076A 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   563 0000076E C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   564 00000772 4889DA              <1>     mov rdx, rbx
   565 00000775 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   566 0000077A CD41                <1>     int 41h
   567 0000077C 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   568 00000780 B843350000          <1>     mov eax, 3543h
   569 00000785 CD41                <1>     int 41h
   570 00000787 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   571 0000078B B844350000          <1>     mov eax, 3544h
   572 00000790 CD41                <1>     int 41h
   573 00000792 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   574                              <1> 
   575 00000796 B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   576 0000079B 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   577 0000079F F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   578                              <1> ;------------------------------------------------;
   579                              <1> ;          Default File Handle Creation          ;
   580                              <1> ;------------------------------------------------;
   581                              <1> defaultFileHandles:
   582                              <1> ;Fill in the default file table entries
   583 000007A1 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstSftHeader]
   584 000007A8 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   585 000007AF 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   586 000007B5 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   586 000007BA [88C00300]          <1>
   587                              <1> ;GOTO FIRST FILE 
   588 000007BE 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   589                              <1> ;Write CON
   590 000007C5 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   591 000007CA 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   592 000007D0 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   593 000007D4 C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   594                              <1>     ;No EOF when reading from the device
   595 000007D8 64488B0425-         <1>     mov rax, qword fs:[conPtr]  ;Get pointer to CON device
   595 000007DD [98C00300]          <1>
   596 000007E1 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   597                              <1>     ;Ignore disk related fields and Date/Time of open
   598 000007E5 488D7B26            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   599 000007E9 488D3598000000      <1>     lea rsi, qword [.dfhCon]
   600                              <1>     ;11 chars in 8.3 name
   601 000007F0 48A5                <1>     movsq   ;8 chars
   602 000007F2 66A5                <1>     movsw   ;10 chars
   603 000007F4 A4                  <1>     movsb   ;11 chars
   604 000007F5 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   604 000007FA [F2C00300]          <1>
   605 000007FE 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   606                              <1> ;GOTO NEXT ENTRY
   607 00000802 4881C33D000000      <1>     add rbx, sft_size   ;Goto next SFT
   608                              <1> ;Write AUX
   609 00000809 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   610 0000080E 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   611 00000814 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   612 00000818 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   613                              <1>     ;No EOF when reading from the device
   614 0000081C 488B85[DF1E0000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   615 00000823 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   616                              <1>     ;Ignore disk related fields and Date/Time of open
   617 00000827 488D7B26            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   618 0000082B 488D3561000000      <1>     lea rsi, qword [.dfhAux]
   619                              <1>     ;11 chars in 8.3 name
   620 00000832 48A5                <1>     movsq   ;8 chars
   621 00000834 66A5                <1>     movsw   ;10 chars
   622 00000836 A4                  <1>     movsb   ;11 chars
   623 00000837 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   623 0000083C [F2C00300]          <1>
   624 00000840 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   625                              <1> ;GOTO NEXT ENTRY
   626 00000844 4881C33D000000      <1>     add rbx, sft_size   ;Goto next SFT
   627                              <1> ;Write PRN
   628 0000084B 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   629 00000850 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   630 00000856 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   631 0000085A C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   632                              <1>     ;Want EOF when reading from to the device
   633 0000085E 488B85[011F0000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   634 00000865 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   635                              <1>     ;Ignore disk related fields and Date/Time of open
   636 00000869 488D7B26            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   637 0000086D 488D352A000000      <1>     lea rsi, qword [.dfhPrn]
   638                              <1>     ;11 chars in 8.3 name
   639 00000874 48A5                <1>     movsq   ;8 chars
   640 00000876 66A5                <1>     movsw   ;10 chars
   641 00000878 A4                  <1>     movsb   ;11 chars
   642 00000879 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   642 0000087E [F2C00300]          <1>
   643 00000882 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   644 00000886 EB21                <1>     jmp short .dfhExit
   645 00000888 434F4E202020202020- <1> .dfhCon db "CON        "
   645 00000891 2020                <1>
   646 00000893 415558202020202020- <1> .dfhAux db "AUX        "
   646 0000089C 2020                <1>
   647 0000089E 50524E202020202020- <1> .dfhPrn db "PRN        "
   647 000008A7 2020                <1>
   648                              <1> .dfhExit:
   649                              <1> ;------------------------------------------------;
   650                              <1> ;               Load CONFIG.SYS                  ;
   651                              <1> ;------------------------------------------------;
   652                              <1> ;------------------------------------------------;
   653                              <1> ;              Process CONFIG.SYS                ;
   654                              <1> ;------------------------------------------------;
   655                              <1> ;------------------------------------------------;
   656                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   657                              <1> ;------------------------------------------------;
   658                              <1> ;------------------------------------------------;
   659                              <1> ;   Setup Final Data Areas With Overrides from   ;
   660                              <1> ;                  CONFIG.SYS                    ;
   661                              <1> ;------------------------------------------------;
   662                              <1> ;------------------------------------------------;
   663                              <1> ;           Load Command interpreter             ;
   664                              <1> ;------------------------------------------------;
   665 000008A9 488D1513040000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   666 000008B0 B409                <1>     mov ah, 09h
   667 000008B2 CD41                <1>     int 41h
   668                              <1> 
   669                              <1> ;Resize DOS allocation
   670 000008B4 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   670 000008B9 [78C00300]          <1>
   671 000008BD 4981C010000000      <1>     add r8, mcb.program
   672 000008C4 BBCA120000          <1>     mov ebx, dynamicDataAreaLength
   673 000008C9 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   674 000008CC FFC3                <1>     inc ebx
   675 000008CE B44A                <1>     mov ah, 4Ah
   676 000008D0 CD41                <1>     int 41h
   677                              <1>     
   678                              <1>     %if DEBUG && ALLOCTEST
   679                              <1> ;Test Allocation, Growth and Deallocation
   680                              <1>     mov r15, qword fs:[currentPSP]
   681                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   682                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   683                              <1>     mov ah, 48h ;Allocate
   684                              <1>     int 41h
   685                              <1> 
   686                              <1>     mov r8, rax ;Move the pointer to r8
   687                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   688                              <1>     mov ah, 4Ah
   689                              <1>     int 41h
   690                              <1> 
   691                              <1>     mov ah, 49h ;Free r8
   692                              <1>     int 41h
   693                              <1>     mov qword fs:[currentPSP], r15
   694                              <1>     %endif
   695                              <1> 
   696                              <1>     %if ENDSTATUS
   697                              <1> debugFinal:
   698                              <1>     ;Print system state
   699 000008D2 55                  <1>     push rbp    ;Only rbp really matters here
   700 000008D3 4989E8              <1>     mov r8, rbp
   701                              <1> 
   702 000008D6 488D2DD0020000      <1>     lea rbp, .msg2
   703 000008DD 4D8D88[EE000000]    <1>     lea r9, qword [r8 + debPrintNullString]
   704 000008E4 41FFD1              <1>     call r9
   705                              <1> 
   706 000008E7 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   707 000008EE 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   707 000008F3 [08C00300]          <1>
   708                              <1> 
   709 000008F7 4D8D88[29040000]    <1>     lea r9, qword [r8 + overlayQword]
   710 000008FE 41FFD1              <1>     call r9
   711                              <1> 
   712 00000901 4881C31B000000      <1>     add rbx, 19+8
   713 00000908 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   713 0000090D [00C00300]          <1>
   714 00000911 41FFD1              <1>     call r9
   715                              <1> 
   716 00000914 4881C31B000000      <1>     add rbx, 19+8
   717 0000091B 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   717 00000920 [78C00300]          <1>
   718 00000924 41FFD1              <1>     call r9
   719                              <1> 
   720 00000927 4881C31C000000      <1>     add rbx, 20+8
   721 0000092E 4D8D88[E6030000]    <1>     lea r9, qword [r8 + overlayDword]
   722 00000935 648B0425[14C00300]  <1>     mov eax, dword fs:[loProtMem]
   723 0000093D 41FFD1              <1>     call r9
   724                              <1> 
   725 00000940 4881C312000000      <1>     add rbx, 10+8
   726 00000947 648B0425[18C00300]  <1>     mov eax, dword fs:[hiProtMem]
   727 0000094F 41FFD1              <1>     call r9
   728                              <1> 
   729 00000952 4881C312000000      <1>     add rbx, 10+8
   730 00000959 64488B0425-         <1>     mov rax, qword fs:[longMem]
   730 0000095E [1CC00300]          <1>
   731 00000962 4D8D88[29040000]    <1>     lea r9, qword [r8 + overlayQword]
   732 00000969 41FFD1              <1>     call r9
   733                              <1> 
   734 0000096C 4881C31B000000      <1>     add rbx, 19+8
   735 00000973 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   735 00000978 [80C00300]          <1>
   736 0000097C 41FFD1              <1>     call r9
   737                              <1> 
   738 0000097F 4881C31B000000      <1>     add rbx, 19+8
   739 00000986 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   739 0000098B [88C00300]          <1>
   740 0000098F 41FFD1              <1>     call r9
   741                              <1> 
   742 00000992 4881C31B000000      <1>     add rbx, 19+8
   743 00000999 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   743 0000099E [A2C00300]          <1>
   744 000009A2 41FFD1              <1>     call r9
   745                              <1> 
   746 000009A5 4881C31B000000      <1>     add rbx, 19+8
   747 000009AC 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   747 000009B1 [AAC00300]          <1>
   748 000009B5 41FFD1              <1>     call r9
   749                              <1> 
   750 000009B8 4D8D88[74030000]    <1>     lea r9, qword [r8 + overlayByte]
   751                              <1> 
   752 000009BF 4881C32C000000      <1>     add rbx, 25+19
   753 000009C6 64480FB60425-       <1>     movzx rax, byte fs:[numLogDrv]
   753 000009CC [13C00300]          <1>
   754 000009D0 41FFD1              <1>     call r9
   755                              <1> 
   756 000009D3 4881C31E000000      <1>     add rbx, 30
   757 000009DA 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   757 000009E0 [12C00300]          <1>
   758 000009E4 41FFD1              <1>     call r9
   759                              <1> 
   760 000009E7 4881C31E000000      <1>     add rbx, 30
   761 000009EE 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   761 000009F4 [11C00300]          <1>
   762 000009F8 41FFD1              <1>     call r9
   763                              <1> 
   764 000009FB 4881C310000000      <1>     add rbx, 16
   765 00000A02 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   765 00000A08 [10C00300]          <1>
   766 00000A0C 0441                <1>     add al, "A"
   767 00000A0E 8803                <1>     mov byte [rbx], al
   768                              <1> 
   769 00000A10 488D2D10000000      <1>     lea rbp, .msg
   770 00000A17 4D8D88[EE000000]    <1>     lea r9, qword [r8 + debPrintNullString]
   771 00000A1E 41FFD1              <1>     call r9
   772 00000A21 5D                  <1>     pop rbp
   773 00000A22 E99E010000          <1>     jmp l1
   774 00000A27 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   774 00000A30 206261736520464646- <1>
   774 00000A39 464646464646464646- <1>
   774 00000A42 46464646680A0D      <1>
   775 00000A49 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   775 00000A52 464646464646464646- <1>
   775 00000A5B 464646464646680A0D  <1>
   776 00000A64 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   776 00000A6D 464646464646464646- <1>
   776 00000A76 46464646464668200A- <1>
   776 00000A7F 0D                  <1>
   777 00000A80 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   777 00000A89 464646464646466820  <1>
   778 00000A92 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   778 00000A9B 464646464646466820  <1>
   779 00000AA4 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   779 00000AAD 464646464646464646- <1>
   779 00000AB6 464646464646680A0D  <1>
   780 00000ABF 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   780 00000AC8 464646464646464646- <1>
   780 00000AD1 464646464646680A0D  <1>
   781 00000ADA 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   781 00000AE3 464646464646464646- <1>
   781 00000AEC 464646464646680A0D  <1>
   782 00000AF5 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   782 00000AFE 464646464646464646- <1>
   782 00000B07 464646464646680A0D  <1>
   783 00000B10 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   783 00000B19 464646464646464646- <1>
   783 00000B22 464646464646680A0D  <1>
   784 00000B2B 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   784 00000B34 204C6F676963616C20- <1>
   784 00000B3D 447269766573204646- <1>
   784 00000B46 680A0D              <1>
   785 00000B49 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   785 00000B52 204669786564204472- <1>
   785 00000B5B 697665732020204646- <1>
   785 00000B64 680A0D              <1>
   786 00000B67 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   786 00000B70 2052656D6F7661626C- <1>
   786 00000B79 652044727673204646- <1>
   786 00000B82 680A0D              <1>
   787 00000B85 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   787 00000B8E 65205A3A0A0D        <1>
   788 00000B94 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   788 00000B9D 4F4D4D414E442E434F- <1>
   788 00000BA6 4D2E2E2E0A0D00      <1>
   789 00000BAD 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   789 00000BB6 626F6F742073756D6D- <1>
   789 00000BBF 6172790A0D00        <1>
   790                              <1>     %endif
   791                              <1> l1:
   792 00000BC5 B401                <1>     mov ah, 01h  ;Write with echo
   793 00000BC7 CD41                <1>     int 41h
   794 00000BC9 3C00                <1>     cmp al, 0
   795 00000BCB 7402                <1>     je l2
   796 00000BCD EBF6                <1>     jmp short l1
   797                              <1> l2:
   798 00000BCF B407                <1>     mov ah, 07h
   799 00000BD1 CD41                <1>     int 41h
   800 00000BD3 3C42                <1>     cmp al, 42h
   801 00000BD5 75EE                <1>     jne l1
   802                              <1> l3:
   803 00000BD7 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   803 00000BDC [5AC20300]0000      <1>
   804 00000BE2 488D9D[24C00300]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   805 00000BE9 488D85[5AC20300]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   806 00000BF0 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   807 00000BF3 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   808 00000BF7 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   809 00000BFD 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   810 00000C01 C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   811 00000C08 FF95[2D1F0000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   812 00000C0E FF95[351F0000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr] 
   813                              <1> 
   814 00000C14 B403                <1>     mov ah, 03h
   815 00000C16 30FF                <1>     xor bh, bh
   816 00000C18 CD30                <1>     int 30h
   817 00000C1A 30D2                <1>     xor dl, dl  ;0 column
   818 00000C1C B402                <1>     mov ah, 02h
   819 00000C1E CD30                <1>     int 30h
   820                              <1> 
   821 00000C20 488D9D[5AC20300]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   822 00000C27 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   823 00000C2B E832000000          <1>     call .clkHexToBCD
   824 00000C30 B40E                <1>     mov ah, 0Eh
   825 00000C32 B03A                <1>     mov al, ":"
   826 00000C34 CD30                <1>     int 30h
   827 00000C36 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   828 00000C3A E823000000          <1>     call .clkHexToBCD
   829 00000C3F B40E                <1>     mov ah, 0Eh
   830 00000C41 B03A                <1>     mov al, ":"
   831 00000C43 CD30                <1>     int 30h
   832 00000C45 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   833 00000C49 E814000000          <1>     call .clkHexToBCD
   834 00000C4E B40E                <1>     mov ah, 0Eh
   835 00000C50 B02E                <1>     mov al, "."
   836 00000C52 CD30                <1>     int 30h
   837 00000C54 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   838 00000C58 E805000000          <1>     call .clkHexToBCD
   839 00000C5D E963FFFFFF          <1>     jmp l1
   840                              <1> .clkHexToBCD:
   841                              <1> ;Converts a Hex byte into two BCD digits
   842                              <1> ;Takes input in each nybble of al
   843 00000C62 53                  <1>     push rbx
   844 00000C63 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   844 00000C6C 00                  <1>
   845 00000C6D 31D2                <1>     xor edx, edx
   846 00000C6F 48F7F3              <1>     div rbx
   847 00000C72 80C230              <1>     add dl, '0'
   848 00000C75 80FA39              <1>     cmp dl, '9'
   849 00000C78 7603                <1>     jbe .chtb0
   850 00000C7A 80C207              <1>     add dl, 'A'-'0'-10
   851                              <1> .chtb0:
   852 00000C7D 88D1                <1>     mov cl, dl    ;Save remainder byte
   853 00000C7F 31D2                <1>     xor edx, edx
   854 00000C81 48F7F3              <1>     div rbx
   855 00000C84 80C230              <1>     add dl, '0'
   856 00000C87 80FA39              <1>     cmp dl, '9'
   857 00000C8A 7603                <1>     jbe .chtb1
   858 00000C8C 80C207              <1>     add dl, 'A'-'0'-10
   859                              <1> .chtb1:
   860 00000C8F 88D5                <1>     mov ch, dl    ;Save remainder byte
   861                              <1> 
   862 00000C91 88E8                <1>     mov al, ch    ;Get most sig digit into al
   863 00000C93 B40E                <1>     mov ah, 0Eh
   864 00000C95 CD30                <1>     int 30h
   865 00000C97 88C8                <1>     mov al, cl    ;Get least sig digit into al
   866 00000C99 B40E                <1>     mov ah, 0Eh
   867 00000C9B CD30                <1>     int 30h
   868 00000C9D 5B                  <1>     pop rbx
   869 00000C9E C3                  <1>     ret
   870                              <1> ;--------------------------------
   871                              <1> ;       PROCS FOR SYSINIT       :
   872                              <1> ;--------------------------------
   873                              <1> adjustDrvHdr:
   874                              <1> ;Input: rsi = Effective address of driver in DOS segment
   875                              <1> ;       rbp = Ptr to the start of the DOS segment
   876                              <1> ;Output: rsi = EA of next header in DOS segment
   877 00000C9F 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   878 00000CA2 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   879 00000CA6 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   880 00000CAA 4881C622000000      <1>     add rsi, drvHdr_size
   881 00000CB1 C3                  <1>     ret
   882                              <1> errorInit:
   883                              <1> ;If a critical error occurs during sysinit, fail through here
   884                              <1> ;Int 42h, 43h and 44h point here during sysinit
   885 00000CB2 488D2D20000000      <1>     lea rbp, hltmsg
   886 00000CB9 B804130000          <1>     mov eax, 1304h
   887 00000CBE CD30                <1>     int 30h
   888                              <1>     ;cli ;Clear interrupts
   889                              <1>     ;mov al, -1
   890                              <1>     ;mov dx, 0A1h    ;PIC2 data
   891                              <1>     ;out dx, al      ;Mask all lines
   892                              <1>     ;mov dx, 21h     ;PIC1 data
   893                              <1>     ;out dx, al      ;Mask all lines
   894                              <1> .ei0:
   895 00000CC0 F4                  <1>     hlt
   896 00000CC1 EBFD                <1>     jmp short .ei0
   897                              <1> ;--------------------------------
   898                              <1> ;       DATA FOR SYSINIT        :
   899                              <1> ;--------------------------------
   900 00000CC3 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   900 00000CCC 5343502F444F532E2E- <1>
   900 00000CD5 2E0A0D24            <1>
   901 00000CD9 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   901 00000CE2 7469616C6973696E67- <1>
   901 00000CEB 20534350444F532E53- <1>
   901 00000CF4 59532E205379737465- <1>
   901 00000CFD 6D2068616C74696E67- <1>
   901 00000D06 2E2E2E00            <1>
   902 00000D0A 434F4E00            <1> conName db "CON",0
   903 00000D0E 41555800            <1> auxName db "AUX",0
   904 00000D12 50524E00            <1> prnName db "PRN",0
   905                              <1> intData:
   906 00000D16 [7411000000000000]  <1>     dq terminateProcess ;Int 40h
   907 00000D1E [8611000000000000]  <1>     dq functionDispatch ;Int 41h
   908 00000D26 [B20C000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   909 00000D2E [7611000000000000]  <1>     dq ctrlCHandler     ;Int 43h, ignore any CTRL+C during init
   910 00000D36 [B20C000000000000]  <1>     dq errorInit        ;Int 44h, If critical error in sysinit, halt system
   911 00000D3E [7E10000000000000]  <1>     dq absDiskRead      ;Int 45h
   912 00000D46 [7010000000000000]  <1>     dq absDiskWrite     ;Int 46h
   913 00000D4E [7811000000000000]  <1>     dq terminateResident    ;Int 47h
   914 00000D56 [7811000000000000]  <1>     dq inDosHandler     ;Int 48h
   915 00000D5E [7A11000000000000]  <1>     dq fastOutput       ;Int 49h
   916                              <1> nData:
   917 00000D66 [BD1E000000000000]  <1>     dq conHdr
   918 00000D6E 0480                <1>     dw 08004h
   919 00000D70 [6520000000000000]  <1>     dq nulStrat
   920 00000D78 [6B20000000000000]  <1>     dq nulIntr
   921 00000D80 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   922                              <1> 
   923                              <1> diskInit:
   924                              <1>     ;We create a function to deal with BPB parsing etc
   925                              <1>     ;Start with the first primary partition on each hard disk (until max)
   926                              <1>     ;   They dont have to be bootable
   927                              <1>     ;Then go back and look for other partitions partitions. 
   928                              <1>     ;   Add each other primary or logical ptn (until max)
   929                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   930                              <1>     ;Use r8 as device counter
   931 00000D88 488DBD[7B280000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
   932 00000D8F 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
   932 00000D97 00                  <1>
   933 00000D98 0F84C6000000        <1>     jz .remInit ;No? Go to removables
   934 00000D9E 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   934 00000DA7 00                  <1>
   935 00000DA8 B280                <1>     mov dl, 80h ;Start with HDD 0
   936                              <1> .primary:
   937 00000DAA 64803C25[13C00300]- <1>     cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
   937 00000DB2 03                  <1>
   938 00000DB3 0F84AB000000        <1>     je .remInit
   939 00000DB9 31C9                <1>     xor ecx, ecx    ;Sector 0
   940 00000DBB E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   941 00000DC0 0F8289000000        <1>     jc .primaryEpilog
   942                              <1>     ;Here, check MBR or BPB
   943 00000DC6 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   944 00000DCF 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   945                              <1>     ;Now check if BPB or MBR
   946 00000DD1 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   947 00000DD3 8A6302              <1>     mov ah, byte [rbx + 2]
   948 00000DD6 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   949 00000DDA 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   950                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   951                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   952 00000DDC 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   953 00000DE3 B104                <1>     mov cl, 4
   954                              <1> .checkPrimary:
   955 00000DE5 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   956 00000DE8 3C01                <1>     cmp al, 01
   957 00000DEA 7421                <1>     je .primaryFound
   958 00000DEC 3C04                <1>     cmp al, 04
   959 00000DEE 741D                <1>     je .primaryFound
   960 00000DF0 3C06                <1>     cmp al, 06
   961 00000DF2 7419                <1>     je .primaryFound
   962 00000DF4 3C0B                <1>     cmp al, 0Bh
   963 00000DF6 7415                <1>     je .primaryFound
   964 00000DF8 3C0C                <1>     cmp al, 0Ch
   965 00000DFA 7411                <1>     je .primaryFound
   966 00000DFC 3C0E                <1>     cmp al, 0Eh
   967 00000DFE 740D                <1>     je .primaryFound
   968 00000E00 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   969 00000E07 FEC9                <1>     dec cl
   970 00000E09 7444                <1>     jz .primaryEpilog
   971 00000E0B EBD8                <1>     jmp short .checkPrimary
   972                              <1> .primaryFound:
   973                              <1>     ;Copy the first sector of this partition into memory
   974 00000E0D 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   975 00000E10 E8E9000000          <1>     call .initReadSector
   976 00000E15 7238                <1>     jc .primaryEpilog
   977                              <1>     ;Now verify this is a BPB
   978 00000E17 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   979 00000E19 8A6302              <1>     mov ah, byte [rbx + 2]
   980 00000E1C 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   981 00000E20 752D                <1>     jne .primaryEpilog   ;If not, skip
   982                              <1>     ;Now copy data to internal tables
   983 00000E22 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   984 00000E25 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   985 00000E2A 57                  <1>     push rdi
   986 00000E2B F348A5              <1>     rep movsq   ;Copy the BPB
   987 00000E2E 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
   988                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   989 00000E2F 4A8D9C05[49280000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
   990                              <1>     ;Add device count to rbx to point to correct entry
   991 00000E37 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   992 00000E39 4A8D9CC5[53280000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
   993 00000E41 488933              <1>     mov qword [rbx], rsi
   994 00000E44 49FFC0              <1>     inc r8  ;Goto next logical drive
   995 00000E47 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have
   996                              <1> .primaryEpilog:
   997 00000E4F FEC2                <1>     inc dl  ;Goto next BIOS drive
   998 00000E51 88D6                <1>     mov dh, dl
   999 00000E53 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1000 00000E56 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1001 00000E5E 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1002                              <1> .extended:
  1003                              <1> ;We have gone through all the devices once
  1004                              <1>     ;cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
  1005                              <1>     ;je .remInit ;If yes, get removable devices
  1006                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1007                              <1>     ;xor ecx, ecx    ;Get MBR back
  1008                              <1>     ;call .initReadSector
  1009                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1010                              <1> .remInit:
  1011                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1012 00000E64 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1013 00000E67 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1014 00000E69 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1015                              <1>     ;rdi points to the space for the subsequent bpb's
  1016                              <1> .removables:
  1017 00000E6C 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1018 00000E6E E88B000000          <1>     call .initReadSector
  1019 00000E73 7238                <1>     jc .removableEpilogue   ;Goto next device
  1020                              <1>     ;Now verify this is a BPB
  1021 00000E75 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1022 00000E77 8A6302              <1>     mov ah, byte [rbx + 2]
  1023 00000E7A 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1024 00000E7E 752D                <1>     jne .removableEpilogue   ;If not, skip
  1025                              <1>     ;Now copy data to internal tables
  1026 00000E80 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1027 00000E83 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1028 00000E88 57                  <1>     push rdi
  1029 00000E89 F348A5              <1>     rep movsq   ;Copy the BPB
  1030 00000E8C 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1031                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1032 00000E8D 4A8D9C05[49280000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1033                              <1>     ;Add device count to rbx to point to correct entry
  1034 00000E95 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1035 00000E97 4A8D9CC5[53280000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1036 00000E9F 488933              <1>     mov qword [rbx], rsi
  1037 00000EA2 49FFC0              <1>     inc r8  ;Goto next logical drive
  1038 00000EA5 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have    
  1039                              <1> .removableEpilogue:
  1040 00000EAD FEC2                <1>     inc dl  ;Goto next BIOS device now
  1041 00000EAF 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1042 00000EB7 7412                <1>     je .end
  1043 00000EB9 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1044 00000EC0 7403                <1>     je .re0
  1045 00000EC2 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1046                              <1> .re0:
  1047 00000EC5 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1048 00000EC9 72A1                <1>     jb .removables
  1049                              <1> .end:
  1050 00000ECB 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1050 00000ED3 01                  <1>
  1051 00000ED4 7401                <1>     je .singleRemDev
  1052 00000ED6 C3                  <1>     ret
  1053                              <1> .singleRemDev:
  1054                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1055 00000ED7 488D9D[49280000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1056 00000EDE 8A95[49280000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1057 00000EE4 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1058 00000EE7 488D9D[53280000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1059 00000EEE 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1060 00000EF1 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1061 00000EF5 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Gotta register the phantom drive!
  1062 00000EFD C3                  <1>     ret
  1063                              <1> .initReadSector:
  1064                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1065 00000EFE B482                <1>     mov ah, 82h ;Read
  1066 00000F00 B001                <1>     mov al, 1   ;One sector
  1067 00000F02 488D9D[CA020000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1068 00000F09 CD33                <1>     int 33h
  1069 00000F0B C3                  <1>     ret
    12                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    13                                  %include "./Source/BSS/dosSeg.asm"
    14                              <1> ;This file contains the main DOS data segment
    15                              <1> dosAPT: ;Additional Page tables
    16 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    17                              <1> dosDataArea:
    18 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    19 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    20 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    21 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    22 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    23 0003C013 ??                  <1>     numLogDrv   resb 1    ;Number of logical drives in system x
    24 0003C014 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    25 0003C018 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    26 0003C01C ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    27 0003C024 <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    28 0003C04E <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    29                              <1>     ;The device driver header with space for the largest possible packet
    30 0003C078 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    31                              <1> sysVarsPtr:
    32 0003C080 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    33 0003C088 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    34 0003C090 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    35                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    36 0003C098 ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    37                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    38 0003C0A0 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    39 0003C0A2 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    40 0003C0AA ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    41 0003C0B2 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    42 0003C0B3 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    43 0003C0B4 ??                  <1>     numFiles    resb 1    ;FILES=5 default
    44 0003C0B5 ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    45 0003C0BD ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    46 0003C0BF ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    47 0003C0C0 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    48                              <1> 
    49                              <1> ;Start of Swappable Data Area, this bit can remain static
    50                              <1> sda:
    51 0003C0E2 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    52 0003C0E3 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    53 0003C0E4 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    54 0003C0E5 ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    55 0003C0E6 ????                <1>     errorExCde  resw 1  ;Extended Error Code
    56 0003C0E8 ??                  <1>     errorAction resb 1  ;Suggested action for error  
    57 0003C0E9 ??                  <1>     errorClass  resb 1  ;Error Class
    58                              <1> 
    59 0003C0EA ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    60 0003C0F2 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
    61 0003C0FA ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error (could make this di)
    62 0003C102 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    63 0003C10A ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch x
    64 0003C10C ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    65 0003C10D ??                  <1>     currentDrv  resb 1  ;Default drive x
    66                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    67 0003C10E ??                  <1>     singleDrv   resb 1  ;Set if last drive accessed was drive B x
    68                              <1> ;This is done to allow for DOS to give the user a change to swap devices
    69 0003C10F ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
    70 0003C110 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    71                              <1> ;SDA, needs to be replaced between processes
    72 0003C111 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
    73 0003C119 ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
    74 0003C121 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
    75 0003C129 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    76 0003C131 ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    77 0003C132 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    78 0003C133 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    79 0003C134 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    80 0003C13C ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    81 0003C144 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    82                              <1> 
    83 0003C14C ????????????????    <1>     drvrPtr     resq 1  ;Addr of drv strat/inter rout. placed here and called
    84                              <1> ;Time stuff
    85 0003C154 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    86 0003C155 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    87 0003C156 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    88 0003C157 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    89 0003C159 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    90                              <1> 
    91                              <1> ;Buffers
    92 0003C15A <res 80h>           <1>     filename1   resb 128    ;Space for one path and file name
    93 0003C1DA <res 80h>           <1>     filename2   resb 128    ;Space for a second path and file name
    94 0003C25A ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    95 0003C260 ??                  <1>     singleIObyt resb 1  ;For single IO byte buffers
    96                              <1> ;Misc bookkeeping flags and vars
    97                              <1>     ;secClusConv resb 1  ;For networking, do we convert sector to cluster?
    98 0003C261 ??                  <1>     rwFlag      resb 1  ;00h=Read, 01h=Write
    99 0003C262 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   100 0003C263 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   101 0003C264 ??                  <1>     typePSPcopy resb 1  ;00=Simple copy, -1=Make Child process
   102 0003C265 ??                  <1>     spliceFlag  resb 1  ;01 = file name and directory name together
   103                              <1> ;File Access stuff
   104 0003C266 ????????????????    <1>     curDrvDPB   resq 1  ;Ptr to the DPB of the drive being accessed
   105 0003C26E ????????????????    <1>     curCDSPtr   resq 1  ;Ptr to the CDS of the drive being accessed
   106 0003C276 <res 5Bh>           <1>     curDrvCDS   resb cds_size   ;Working cp of CDS of drv being accessed
   107 0003C2D1 ????????????????    <1>     currentJFT  resq 1  ;Ptr to JFT num in caller PSP of file being accessed
   108 0003C2D9 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   109 0003C2E1 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   110 0003C2E9 ????????            <1>     currClust   resd 1  ;Relative cluster in file being r/w to/from
   111 0003C2ED ????????            <1>     currClustA  resd 1  ;Current Cluster (abs) on disk being read/written to/from
   112 0003C2F1 ??                  <1>     clustFact   resb 1  ;NUMBER of sectors per cluster
   113 0003C2F2 ??                  <1>     currSect    resb 1  ;Current Sector in Cluster being r/w to/from
   114 0003C2F3 ????????????????    <1>     currSectA   resq 1  ;Current absolute Sector number on Disk
   115 0003C2FB ????                <1>     currByte    resw 1  ;Current Byte in sector being r/w to/from
   116 0003C2FD ????????            <1>     currByteA   resd 1  ;Current Byte in file being r/w to/from
   117 0003C301 ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   118 0003C305 ????????            <1>     lastClustA  resd 1  ;Number of hte last (abs) cluster of file on disk
   119 0003C309 ????????            <1>     bytesAdded  resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   120                              <1> ;Directory stuff
   121 0003C30D ????????            <1>     dirClust    resd 1  ;Cluster number of current directory
   122 0003C311 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   123 0003C315 ??                  <1>     dirSect     resb 1  ;Sector of current directory
   124 0003C316 ??                  <1>     dirEntry    resb 1  ;32 byte offset in dir sect for file being searched for
   125                              <1> 
   126                              <1>     
   127                              <1> ;Stacks
   128 0003C317 <res 528h>          <1>     critStack   resq 165
   129 0003C83F ????????????????    <1>     critStakTop resq 1
   130 0003C847 <res 638h>          <1>     IOStack     resq 199
   131 0003CE7F ????????????????    <1>     IOStakTop   resq 1
   132 0003CE87 <res 638h>          <1>     DiskStack   resq 199
   133 0003D4BF ????????????????    <1>     DiskStakTop resq 1
   134                              <1>     dSegLen     equ     $
    14                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    15                                  %include "./Source/Data/staticData.asm"
    16                              <1> 
    17                              <1> ;-----------------------------------:
    18                              <1> ;           Static Data             :
    19                              <1> ;-----------------------------------:
    20 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    21 00000001 01                  <1> dosMinor    db 01h      ;.01
    22 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    22 0000000B 535953              <1>
    23 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    23 00000017 535953              <1>
    24 0000001A 2F                  <1> switchchar  db "/" ;Editable by the Int 41h/ah=37h
    16                                  %include "./Source/Debug/debug.asm"
    17                              <1> ;This file contains debugging macros, procs and strings
    18                              <1> ; that we can use to output to COM1 bypassing the operating system.
    19                              <1> ;A serial terminal must be connected for this to work.
    20                              <1> 
    21                              <1> ;Variables and equates
    22                              <1> 
    23 0000001B 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    24                              <1> 
    25 00000023 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    25 0000002C 39414243444546      <1>
    26                              <1> ;Common procedures
    27                              <1> debMakeDebuggerRespond:
    28 00000033 488D2D26000000      <1>     lea rbp, .msg
    29 0000003A E8AF000000          <1>     call debPrintNullString
    30 0000003F B900001000          <1>     mov ecx, 100000h
    31                              <1> .waiting:
    32 00000044 FFC9                <1>     dec ecx
    33 00000046 740C                <1>     jz .timeout
    34 00000048 B402                <1>     mov ah, 02h ;Blocking recieve!
    35 0000004A 31D2                <1>     xor edx, edx
    36 0000004C CD34                <1>     int 34h
    37 0000004E F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    38 00000051 75F1                <1>     jnz .waiting
    39 00000053 C3                  <1>     ret
    40                              <1> .timeout:
    41 00000054 488D2D47000000      <1>     lea rbp, .msg2
    42 0000005B E98E000000          <1>     jmp debPrintNullString
    43 00000060 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    43 00000069 6B6579206174207468- <1>
    43 00000072 65207465726D696E61- <1>
    43 0000007B 6C20746F20636F6E74- <1>
    43 00000084 696E7565206F722077- <1>
    43 0000008D 61697420666F722074- <1>
    43 00000096 696D656F75742E2E2E- <1>
    43 0000009F 0A0D00              <1>
    44 000000A2 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    44 000000AB 436F6E74696E75696E- <1>
    44 000000B4 672E2E2E0A0D00      <1>
    45                              <1> debPrintHexByte:
    46                              <1> ;Print the hex byte in al as a hex value
    47 000000BB 52                  <1>     push rdx
    48 000000BC 53                  <1>     push rbx
    49 000000BD 50                  <1>     push rax
    50                              <1> 
    51 000000BE 88C2                <1>     mov dl, al           ;save byte in dl
    52 000000C0 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    53 000000C4 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    54 000000C9 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    55 000000CD E80C000000          <1>     call .wrchar
    56 000000D2 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    57 000000D5 E804000000          <1>     call .wrchar
    58                              <1> 
    59 000000DA 58                  <1>     pop rax
    60 000000DB 5B                  <1>     pop rbx
    61 000000DC 5A                  <1>     pop rdx
    62 000000DD C3                  <1>     ret
    63                              <1> .wrchar:
    64 000000DE 6687DB              <1>     xchg bx, bx
    65 000000E1 488D1D3BFFFFFF      <1>     lea rbx, debascii
    66 000000E8 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    67 000000E9 B401                <1>     mov ah, 01h
    68 000000EB CD34                <1>     int 34h  ;print char
    69 000000ED C3                  <1>     ret
    70                              <1> 
    71                              <1> debPrintNullString:
    72                              <1> ;Print a null terminated string pointed to by rbp
    73 000000EE 56                  <1>     push rsi
    74 000000EF 50                  <1>     push rax
    75 000000F0 52                  <1>     push rdx
    76 000000F1 31D2                <1>     xor edx, edx    ;Select COM1
    77 000000F3 4889EE              <1>     mov rsi, rbp
    78                              <1> .getChar:
    79 000000F6 AC                  <1>     lodsb
    80 000000F7 84C0                <1>     test al, al
    81 000000F9 7406                <1>     jz .exit
    82 000000FB B401                <1>     mov ah, 01h
    83 000000FD CD34                <1>     int 34h
    84 000000FF EBF5                <1>     jmp short .getChar
    85                              <1> .exit:
    86 00000101 5A                  <1>     pop rdx
    87 00000102 58                  <1>     pop rax
    88 00000103 5E                  <1>     pop rsi
    89 00000104 C3                  <1>     ret
    90                              <1> 
    91                              <1> debPrintDOSStack:
    92                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    93                              <1> ;Shows me which function, and parameters passed and returned
    94 00000105 488D2DA5010000      <1>     lea rbp, .a1
    95 0000010C E8DDFFFFFF          <1>     call debPrintNullString
    96 00000111 488B15(3CC10300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
    97 00000118 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
    98 0000011F 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
    99 00000122 E802030000          <1>     call overlayQword
   100 00000127 4881C316000000      <1>     add rbx, 22
   101 0000012E 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   102 00000132 E8F2020000          <1>     call overlayQword
   103 00000137 4881C316000000      <1>     add rbx, 22
   104 0000013E 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   105 00000142 E8E2020000          <1>     call overlayQword
   106 00000147 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   107 0000014E 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   108 00000152 E8D2020000          <1>     call overlayQword
   109 00000157 4881C316000000      <1>     add rbx, 22 
   110 0000015E 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   111 00000162 E8C2020000          <1>     call overlayQword
   112 00000167 4881C316000000      <1>     add rbx, 22
   113 0000016E 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   114 00000172 E8B2020000          <1>     call overlayQword
   115 00000177 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   116 0000017E 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   117 00000182 E8A2020000          <1>     call overlayQword
   118 00000187 4881C316000000      <1>     add rbx, 22
   119 0000018E 488B05(3CC10300)    <1>     mov rax, qword [oldRSP]
   120 00000195 480560000000        <1>     add rax, callerFrame_size
   121 0000019B E889020000          <1>     call overlayQword
   122 000001A0 4881C316000000      <1>     add rbx, 22
   123 000001A7 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   124 000001AB E879020000          <1>     call overlayQword
   125 000001B0 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   126 000001B7 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   127 000001BB E869020000          <1>     call overlayQword
   128 000001C0 488D2D06000000      <1>     lea rbp, .a0
   129 000001C7 E822FFFFFF          <1>     call debPrintNullString
   130 000001CC C3                  <1>     ret
   131                              <1> 
   132 000001CD 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   132 000001D6 303030303030303030- <1>
   132 000001DF 30306820            <1>
   133 000001E3 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   133 000001EC 303030303030303030- <1>
   133 000001F5 30306820            <1>
   134 000001F9 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   134 00000202 303030303030303030- <1>
   134 0000020B 30306820            <1>
   135 0000020F 0A0D                <1>     db  0Ah,0Dh
   136 00000211 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   136 0000021A 303030303030303030- <1>
   136 00000223 30306820            <1>
   137 00000227 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   137 00000230 303030303030303030- <1>
   137 00000239 30306820            <1>
   138 0000023D 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   138 00000246 303030303030303030- <1>
   138 0000024F 30306820            <1>
   139 00000253 0A0D                <1>     db 0Ah, 0Dh
   140 00000255 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   140 0000025E 303030303030303030- <1>
   140 00000267 30306820            <1>
   141 0000026B 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   141 00000274 303030303030303030- <1>
   141 0000027D 30306820            <1>
   142 00000281 7269703D3030303030- <1>     db "rip=0000000000000000h"
   142 0000028A 303030303030303030- <1>
   142 00000293 303068              <1>
   143 00000296 0A0D                <1>     db 0Ah, 0Dh
   144 00000298 666C673D3030303030- <1>     db "flg=0000000000000000h "
   144 000002A1 303030303030303030- <1>
   144 000002AA 30306820            <1>
   145 000002AE 0A0D00              <1>     db 0Ah,0Dh,0
   146 000002B1 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   146 000002BA 206F6E20496E742034- <1>
   146 000002C3 316820737461636B0A- <1>
   146 000002CC 0D00                <1>
   147                              <1> 
   148                              <1> debDPBptr:
   149                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   150 000002CE 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   151 000002D5 4889E8              <1>     mov rax, rbp
   152 000002D8 E84C010000          <1>     call overlayQword
   153 000002DD 488D2D06000000      <1>     lea rbp, .dpb
   154 000002E4 E805FEFFFF          <1>     call debPrintNullString
   155 000002E9 C3                  <1>     ret
   156                              <1> .dpb: 
   157 000002EA 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   157 000002F3 203030303030303030- <1>
   157 000002FC 303030303030303068- <1>
   157 00000305 200A0D00            <1>
   158                              <1> 
   159                              <1> debDPBBPBptr:
   160                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   161                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   162 00000309 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   163 00000310 4889E8              <1>     mov rax, rbp
   164 00000313 E811010000          <1>     call overlayQword
   165 00000318 4881C321000000      <1>     add rbx, 33
   166 0000031F 4889F0              <1>     mov rax, rsi
   167 00000322 E802010000          <1>     call overlayQword
   168 00000327 488D2D06000000      <1>     lea rbp, .dpb
   169 0000032E E8BBFDFFFF          <1>     call debPrintNullString
   170 00000333 C3                  <1>     ret
   171                              <1> .dpb: 
   172 00000334 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   172 0000033D 203030303030303030- <1>
   172 00000346 303030303030303068- <1>
   172 0000034F 2066726F6D20        <1>
   173 00000355 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   173 0000035E 203030303030303030- <1>
   173 00000367 303030303030303068- <1>
   173 00000370 200A0D00            <1>
   174                              <1> overlayByte:
   175                              <1>     ;Called with number in rax
   176                              <1>     ;pointer to START of 16 byte space for number in rbx
   177 00000374 53                  <1>     push rbx
   178 00000375 51                  <1>     push rcx
   179 00000376 52                  <1>     push rdx
   180 00000377 55                  <1>     push rbp
   181 00000378 4889DD              <1>     mov rbp, rbx
   182 0000037B 4889C2              <1>     mov rdx, rax
   183 0000037E 48FFC5              <1>     inc rbp ;Go to end of number
   184                              <1> 
   185 00000381 488D1D9BFCFFFF      <1>     lea rbx, debascii
   186 00000388 88D0                <1>     mov al, dl  ;Go low nybble first
   187 0000038A 240F                <1>     and al, 0Fh
   188 0000038C D7                  <1>     xlatb
   189 0000038D 884500              <1>     mov byte [rbp], al
   190 00000390 48FFCD              <1>     dec rbp ;Go down one char pos
   191 00000393 88D0                <1>     mov al, dl
   192 00000395 24F0                <1>     and al, 0F0h    ;Hi nybble next
   193 00000397 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   194 0000039A D7                  <1>     xlatb
   195 0000039B 884500              <1>     mov byte [rbp], al  ;Store char
   196                              <1> 
   197 0000039E 5D                  <1>     pop rbp
   198 0000039F 5A                  <1>     pop rdx
   199 000003A0 59                  <1>     pop rcx
   200 000003A1 5B                  <1>     pop rbx
   201 000003A2 C3                  <1>     ret
   202                              <1> 
   203                              <1> overlayWord:
   204                              <1>     ;Called with number in rax
   205                              <1>     ;pointer to START of 16 byte space for number in rbx
   206 000003A3 53                  <1>     push rbx
   207 000003A4 51                  <1>     push rcx
   208 000003A5 52                  <1>     push rdx
   209 000003A6 55                  <1>     push rbp
   210 000003A7 4889DD              <1>     mov rbp, rbx
   211 000003AA 4889C2              <1>     mov rdx, rax
   212 000003AD 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   213 000003B4 B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   214 000003B9 488D1D63FCFFFF      <1>     lea rbx, debascii
   215                              <1> .ow0:
   216 000003C0 88D0                <1>     mov al, dl  ;Go low nybble first
   217 000003C2 240F                <1>     and al, 0Fh
   218 000003C4 D7                  <1>     xlatb
   219 000003C5 884500              <1>     mov byte [rbp], al
   220 000003C8 48FFCD              <1>     dec rbp ;Go down one char pos
   221 000003CB 88D0                <1>     mov al, dl
   222 000003CD 24F0                <1>     and al, 0F0h    ;Hi nybble next
   223 000003CF C0E804              <1>     shr al, 4   ;Shift hi nybble low
   224 000003D2 D7                  <1>     xlatb
   225 000003D3 884500              <1>     mov byte [rbp], al  ;Store char
   226 000003D6 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   227 000003DA 48FFCD              <1>     dec rbp
   228 000003DD FFC9                <1>     dec ecx
   229 000003DF 75DF                <1>     jnz .ow0
   230 000003E1 5D                  <1>     pop rbp
   231 000003E2 5A                  <1>     pop rdx
   232 000003E3 59                  <1>     pop rcx
   233 000003E4 5B                  <1>     pop rbx
   234 000003E5 C3                  <1>     ret
   235                              <1> 
   236                              <1> overlayDword:
   237                              <1>     ;Called with number in rax
   238                              <1>     ;pointer to START of 16 byte space for number in rbx
   239 000003E6 53                  <1>     push rbx
   240 000003E7 51                  <1>     push rcx
   241 000003E8 52                  <1>     push rdx
   242 000003E9 55                  <1>     push rbp
   243 000003EA 4889DD              <1>     mov rbp, rbx
   244 000003ED 4889C2              <1>     mov rdx, rax
   245 000003F0 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   246 000003F7 B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   247 000003FC 488D1D20FCFFFF      <1>     lea rbx, debascii
   248                              <1> .od0:
   249 00000403 88D0                <1>     mov al, dl  ;Go low nybble first
   250 00000405 240F                <1>     and al, 0Fh
   251 00000407 D7                  <1>     xlatb
   252 00000408 884500              <1>     mov byte [rbp], al
   253 0000040B 48FFCD              <1>     dec rbp ;Go down one char pos
   254 0000040E 88D0                <1>     mov al, dl
   255 00000410 24F0                <1>     and al, 0F0h    ;Hi nybble next
   256 00000412 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   257 00000415 D7                  <1>     xlatb
   258 00000416 884500              <1>     mov byte [rbp], al  ;Store char
   259 00000419 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   260 0000041D 48FFCD              <1>     dec rbp
   261 00000420 FFC9                <1>     dec ecx
   262 00000422 75DF                <1>     jnz .od0
   263 00000424 5D                  <1>     pop rbp
   264 00000425 5A                  <1>     pop rdx
   265 00000426 59                  <1>     pop rcx
   266 00000427 5B                  <1>     pop rbx
   267 00000428 C3                  <1>     ret
   268                              <1> 
   269                              <1> overlayQword:
   270                              <1>     ;Called with number in rax
   271                              <1>     ;pointer to START of 16 byte space for number in rbx
   272 00000429 53                  <1>     push rbx
   273 0000042A 51                  <1>     push rcx
   274 0000042B 52                  <1>     push rdx
   275 0000042C 55                  <1>     push rbp
   276 0000042D 4889DD              <1>     mov rbp, rbx
   277 00000430 4889C2              <1>     mov rdx, rax
   278 00000433 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   279 0000043A B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   280 0000043F 488D1DDDFBFFFF      <1>     lea rbx, debascii
   281                              <1> .oq0:
   282 00000446 88D0                <1>     mov al, dl  ;Go low nybble first
   283 00000448 240F                <1>     and al, 0Fh
   284 0000044A D7                  <1>     xlatb
   285 0000044B 884500              <1>     mov byte [rbp], al
   286 0000044E 48FFCD              <1>     dec rbp ;Go down one char pos
   287 00000451 88D0                <1>     mov al, dl
   288 00000453 24F0                <1>     and al, 0F0h    ;Hi nybble next
   289 00000455 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   290 00000458 D7                  <1>     xlatb
   291 00000459 884500              <1>     mov byte [rbp], al  ;Store char
   292 0000045C 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   293 00000460 48FFCD              <1>     dec rbp
   294 00000463 FFC9                <1>     dec ecx
   295 00000465 75DF                <1>     jnz .oq0
   296 00000467 5D                  <1>     pop rbp
   297 00000468 5A                  <1>     pop rdx
   298 00000469 59                  <1>     pop rcx
   299 0000046A 5B                  <1>     pop rbx
   300 0000046B C3                  <1>     ret
   301                              <1> 
   302                              <1> debPrintFunctionName:
   303                              <1> ;Prints the DOS function that has been entered
   304                              <1> ;Entered with ah = Function number
   305 0000046C 88E0                <1>     mov al, ah  ;Get dos function number
   306 0000046E 488D1DAEFBFFFF      <1>     lea rbx, debascii
   307 00000475 488D1535000000      <1>     lea rdx, .number
   308 0000047C 24F0                <1>     and al, 0F0h    ;Get high nybble first
   309 0000047E C0E804              <1>     shr al, 4
   310 00000481 D7                  <1>     xlatb
   311 00000482 8802                <1>     mov byte [rdx], al
   312 00000484 88E0                <1>     mov al, ah
   313 00000486 240F                <1>     and al, 0Fh
   314 00000488 D7                  <1>     xlatb
   315 00000489 884201              <1>     mov byte [rdx + 1], al
   316 0000048C 488D2D06000000      <1>     lea rbp, .dosString
   317 00000493 E856FCFFFF          <1>     call debPrintNullString
   318 00000498 C3                  <1>     ret
   319 00000499 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   319 000004A2 696F6E20496E742034- <1>
   319 000004AB 31682F41483D        <1>
   320 000004B1 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   321                              <1> 
   322                              <1> ;----------------:
   323                              <1> ;!!!! MACROS !!!!:
   324                              <1> ;----------------:
   325                              <1> ;Insert macro when entering a debug block
   326                              <1> %macro debugEnterM 0
   327                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   328                              <1>     mov rsp, debStackTop
   329                              <1> ;Push all registers except rsp on stack
   330                              <1>     push rax
   331                              <1>     push rbx
   332                              <1>     push rcx
   333                              <1>     push rdx
   334                              <1>     push rsi
   335                              <1>     push rdi
   336                              <1>     push rbp
   337                              <1>     push r8
   338                              <1>     push r9
   339                              <1>     push r10
   340                              <1>     push r11
   341                              <1>     push r12
   342                              <1>     push r13
   343                              <1>     push r14
   344                              <1>     push r15
   345                              <1>     pushfq
   346                              <1> %endmacro
   347                              <1> ;Insert macro when exiting a debug block
   348                              <1> %macro debugExitM 0
   349                              <1>     popfq
   350                              <1>     pop r15
   351                              <1>     pop r14
   352                              <1>     pop r13
   353                              <1>     pop r12
   354                              <1>     pop r11
   355                              <1>     pop r10
   356                              <1>     pop r9
   357                              <1>     pop r8
   358                              <1>     pop rbp
   359                              <1>     pop rdi
   360                              <1>     pop rsi
   361                              <1>     pop rdx
   362                              <1>     pop rcx
   363                              <1>     pop rbx
   364                              <1>     pop rax
   365                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   366                              <1> %endmacro
    17                                  %include "./Source/Kernel/FAT/bufferFunctions.asm"
    18                              <1> ;This file contains FAT disk buffer related functions that
    19                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    20                              <1> ;----------------------------------------------------
    21                              <1> ;           Externally referenced functions         :
    22                              <1> ;----------------------------------------------------
    23                              <1> testDirtyBufferForDrive:    ;External linkage
    24                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
    25                              <1> ;Input: dl = Drive number
    26                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
    27 000004B7 53                  <1>     push rbx
    28 000004B8 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
    29                              <1> .tdbfdCheckBuffer:
    30 000004BF 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
    31 000004C2 7509                <1>     jne .tdbfdGotoNextBuffer
    32 000004C4 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
    33 000004C8 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
    34 000004CA F9                  <1>     stc ;Else dirty buffer found, set carry flag
    35                              <1> .tdbfdExit:
    36 000004CB 5B                  <1>     pop rbx
    37 000004CC C3                  <1>     ret
    38                              <1> .tdbfdGotoNextBuffer:
    39 000004CD 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
    40 000004D0 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
    41 000004D7 74F2                <1>     je .tdbfdExit
    42 000004D9 EBE4                <1>     jmp short .tdbfdCheckBuffer
    43                              <1> 
    44                              <1> readBuffer: ;External Linkage (fat.asm)
    45                              <1> ;
    46                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
    47                              <1> ;TO CALL!
    48                              <1> ;
    49                              <1> ;This function will return a pointer to the desired data sector OR 
    50                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
    51                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
    52                              <1> ;Entry: rax = Sector to read
    53                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
    54                              <1> ;Exit:  CF = NC : All ok!
    55                              <1> ;       rbx = Pointer to buffer header with valid data in buffer.
    56                              <1> ;       All other registers as before
    57                              <1> ;       CF = CY: Something went wrong, return error code or INT 44h
    58                              <1> ;       ch = 0 -> Data Not Flushed To Disk
    59                              <1> ;       ch = 1 -> Data Not Read From Disk
    60                              <1> ;       rbx = Pointer to buffer containing sector without valid data in buffer ;            (either unflushed or unread)
    61 000004DB 52                  <1>     push rdx
    62 000004DC 56                  <1>     push rsi
    63 000004DD 55                  <1>     push rbp
    64 000004DE 488B35(66C20300)    <1>     mov rsi, qword [curDrvDPB]  ;Get DPB of transacting device
    65 000004E5 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
    66 000004E7 E829010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
    67 000004EC 4881FBFFFFFFFF      <1>     cmp rbx, -1
    68 000004F3 7405                <1>     je .rbReadNewSector
    69                              <1> .rbExit:
    70 000004F5 F8                  <1>     clc
    71                              <1> .rbExitNoFlag:
    72 000004F6 5D                  <1>     pop rbp
    73 000004F7 5E                  <1>     pop rsi
    74 000004F8 5A                  <1>     pop rdx
    75 000004F9 C3                  <1>     ret
    76                              <1> .rbReadNewSector:
    77 000004FA E8C6000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rbx
    78 000004FF 4889DD              <1>     mov rbp, rbx
    79 00000502 30ED                <1>     xor ch, ch
    80 00000504 E869000000          <1>     call flushBuffer
    81 00000509 72EB                <1>     jc .rbExitNoFlag    ;Exit in error
    82                              <1> ;rbp points to bufferHdr that has been appropriately linked to the head of chain
    83 0000050B 51                  <1>     push rcx
    84 0000050C 885508              <1>     mov byte [rbp + bufferHdr.driveNumber], dl
    85 0000050F 884D09              <1>     mov byte [rbp + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
    86 00000512 4889450A            <1>     mov qword [rbp + bufferHdr.bufferLBA], rax
    87 00000516 80F902              <1>     cmp cl, fatBuffer
    88 00000519 B201                <1>     mov dl, 1   ;Default values if not fat buffer
    89 0000051B B900000000          <1>     mov ecx, 0  ;Ditto!
    90 00000520 7506                <1>     jne .rbNonFATbuffer
    91 00000522 8A5607              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
    92 00000525 8B4E12              <1>     mov ecx, dword [rsi + dpb.dFATlength]
    93                              <1> .rbNonFATbuffer:
    94 00000528 885512              <1>     mov byte [rbp + bufferHdr.bufFATcopy], dl
    95 0000052B 894D13              <1>     mov dword [rbp + bufferHdr.bufFATsize], ecx
    96 0000052E 48897517            <1>     mov qword [rbp + bufferHdr.driveDPBPtr], rsi
    97 00000532 C6451F00            <1>     mov byte [rbp + bufferHdr.reserved], 0
    98 00000536 59                  <1>     pop rcx
    99 00000537 FEC5                <1>     inc ch  ;If an error occurs, have the signature in ch
   100 00000539 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   101 0000053E EBB6                <1>     jmp short .rbExitNoFlag
   102                              <1> 
   103                              <1> ;----------------------------------------------------
   104                              <1> ;           Internally referenced functions         :
   105                              <1> ;----------------------------------------------------
   106                              <1> 
   107                              <1> readSectorBuffer:   ;Internal Linkage
   108                              <1> ;Reads a sector into a built sector buffer
   109                              <1> ;Entry: rbp = Pointer to buffer header
   110                              <1> ;Exit:  CF=NC : Success
   111                              <1> ;       CF=CY : Fail, terminate the request
   112                              <1> ;       rbx pointing to buffer header
   113                              <1> ;First make request to device driver
   114 00000540 50                  <1>     push rax
   115 00000541 53                  <1>     push rbx
   116 00000542 51                  <1>     push rcx
   117 00000543 52                  <1>     push rdx
   118 00000544 56                  <1>     push rsi
   119                              <1> .rsRequest0:
   120 00000545 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   121                              <1> .rsRequest1:
   122 0000054A 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   123 0000054D B901000000          <1>     mov ecx, 1  ;One sector to copy
   124 00000552 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
   125 00000556 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
   126 0000055A E81F0B0000          <1>     call absDiskRead    ;Call INT 45h
   127 0000055F 7207                <1>     jc .rsFail
   128                              <1> .rsExit:
   129 00000561 F8                  <1>     clc
   130                              <1> .rsExitBad:
   131 00000562 5E                  <1>     pop rsi
   132 00000563 5A                  <1>     pop rdx
   133 00000564 59                  <1>     pop rcx
   134 00000565 5B                  <1>     pop rbx
   135 00000566 58                  <1>     pop rax
   136 00000567 C3                  <1>     ret
   137                              <1> .rsFail:
   138                              <1> ;Enter here only if the request failed
   139 00000568 FFCE                <1>     dec esi
   140 0000056A 75DE                <1>     jnz .rsRequest1 ;Try the request again!
   141                              <1> ;Request failed thrice, critical error call
   142 0000056C F9                  <1>     stc
   143 0000056D E9F0FFFFFF          <1>     jmp .rsExitBad  ;Abort
   144                              <1> 
   145                              <1> flushBuffer:    ;Internal Linkage
   146                              <1> ;Flushes the data in a sector buffer to disk!
   147                              <1> ;Entry: rbp = Pointer to buffer header for this buffer
   148                              <1> ;Exit:  CF=NC : Success
   149                              <1> ;       CF=CY : Fail, terminate the request
   150                              <1> ;First make request to device driver
   151 00000572 50                  <1>     push rax
   152 00000573 53                  <1>     push rbx
   153 00000574 51                  <1>     push rcx
   154 00000575 52                  <1>     push rdx
   155 00000576 56                  <1>     push rsi
   156 00000577 F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   157 0000057B 7433                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   158                              <1> .fbRequest0:
   159 0000057D BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   160                              <1> .fbRequest1:
   161 00000582 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   162 00000585 B901000000          <1>     mov ecx, 1  ;One sector to copy
   163 0000058A 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
   164 0000058E 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
   165 00000592 E8D90A0000          <1>     call absDiskWrite    ;Call INT 46h
   166 00000597 7222                <1>     jc .fbFail
   167                              <1> ;Now check if the buffer was a FAT, to write additional copies
   168 00000599 F6450902            <1>     test byte [rbp + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   169 0000059D 7411                <1>     jz .fbFreeExit  ;If not, exit
   170 0000059F FE4D12              <1>     dec byte [rbp + bufferHdr.bufFATcopy]
   171 000005A2 740C                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   172 000005A4 8B4513              <1>     mov eax, dword [rbp + bufferHdr.bufFATsize]
   173 000005A7 4801450A            <1>     add qword [rbp + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   174 000005AB E9CDFFFFFF          <1>     jmp .fbRequest0 ;Make another request
   175                              <1> .fbFreeExit:
   176                              <1> ;Free the buffer if it was flushed successfully
   177 000005B0 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1
   178 000005B4 F8                  <1>     clc
   179                              <1> .fbExitBad:
   180 000005B5 5E                  <1>     pop rsi
   181 000005B6 5A                  <1>     pop rdx
   182 000005B7 59                  <1>     pop rcx
   183 000005B8 5B                  <1>     pop rbx
   184 000005B9 58                  <1>     pop rax
   185 000005BA C3                  <1>     ret
   186                              <1> .fbFail:
   187                              <1> ;Enter here only if the request failed
   188 000005BB FFCE                <1>     dec esi
   189 000005BD 75C3                <1>     jnz .fbRequest1 ;Try the request again!
   190                              <1> ;Request failed thrice, critical error call
   191 000005BF F9                  <1>     stc
   192 000005C0 E9F0FFFFFF          <1>     jmp .fbExitBad  ;Abort
   193                              <1>     
   194                              <1> findLRUBuffer: ;Internal Linkage
   195                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   196                              <1> ; in rbx
   197                              <1> ;Input: Nothing
   198                              <1> ;Output: rbx = Pointer to the buffer hdr to use
   199 000005C5 52                  <1>     push rdx
   200 000005C6 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
   201 000005CD 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   202 000005D1 7436                <1>     je .flbExit 
   203 000005D3 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   204 000005DA 742D                <1>     je .flbExit
   205                              <1> .flbWalk:
   206 000005DC 4889DA              <1>     mov rdx, rbx    ;Save a ptr to the previous buffer header
   207 000005DF 488B1A              <1>     mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   208 000005E2 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1
   209 000005E6 7423                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   210 000005E8 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   211 000005EF 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   212 000005F1 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   213                              <1> .flbHeadLink:
   214 000005F8 488B15(A2C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   215 000005FF 48891D(A2C00300)    <1>     mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
   216 00000606 488913              <1>     mov qword [rbx + bufferHdr.nextBufPtr], rdx
   217                              <1> .flbExit:
   218 00000609 5A                  <1>     pop rdx
   219 0000060A C3                  <1>     ret
   220                              <1> .flbFreeLink:
   221 0000060B 51                  <1>     push rcx
   222 0000060C 488B0B              <1>     mov rcx, qword [rbx + bufferHdr.nextBufPtr]
   223 0000060F 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rbx
   224 00000612 59                  <1>     pop rcx
   225 00000613 EBE3                <1>     jmp short .flbHeadLink
   226                              <1> 
   227                              <1> findSectorInBuffer:     ;Internal linkage
   228                              <1> ;Finds the Buffer for a sector
   229                              <1> ;If the sector is not in a buffer, returns with a -1
   230                              <1> ;Input: rax = Sector number
   231                              <1> ;        dl = Drive number
   232                              <1> ;Output: rbx = Buffer hdr pointer or -1
   233 00000615 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
   234                              <1> .fsiCheckBuffer:
   235 0000061C 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   236 0000061F 7507                <1>     jne .fsiGotoNextBuffer
   237 00000621 4839430A            <1>     cmp qword [rbx + bufferHdr.bufferLBA], rax
   238 00000625 7501                <1>     jne .fsiGotoNextBuffer
   239                              <1> .fsiExit:
   240 00000627 C3                  <1>     ret
   241                              <1> .fsiGotoNextBuffer:
   242 00000628 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   243 0000062B 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   244 00000632 74F3                <1>     je .fsiExit
   245 00000634 EBE6                <1>     jmp short .fsiCheckBuffer
   246                              <1> 
   247                              <1> 
   248                              <1> findDirtyBufferForDrive:    ;No Use
   249                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   250                              <1> ;Input: dl = Drive number
   251                              <1> ;Output: rbx = Pointer to dirty buffer for drive letter if exists or -1 if not
   252 00000636 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
   253                              <1> .fdbfdCheckBuffer:
   254 0000063D 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   255 00000640 7507                <1>     jne .fdbfdGotoNextBuffer
   256 00000642 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   257 00000646 7401                <1>     jz .fdbfdGotoNextBuffer ;Bit not set, goto next buffer
   258                              <1> .fdbfdExit:
   259 00000648 C3                  <1>     ret
   260                              <1> .fdbfdGotoNextBuffer:
   261 00000649 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   262 0000064C 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   263 00000653 74F3                <1>     je .fdbfdExit
   264 00000655 EBE6                <1>     jmp short .fdbfdCheckBuffer
    18                                  %include "./Source/Kernel/FAT/fat.asm"
    19                              <1> ;---------------------------------------------------:
    20                              <1> ;                   KERNEL FUNCTIONS                :
    21                              <1> ;---------------------------------------------------:
    22                              <1> makeDIR:           ;ah = 39h
    23                              <1> removeDIR:         ;ah = 3Ah
    24                              <1> changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
    25                              <1> getCurrentDIR:     ;ah = 47h
    26                              <1> getSetFileDateTime:;ah = 57h
    27                              <1> trueName:          ;ah = 60h, get fully qualified name
    28 00000657 C3                  <1>     ret
    29                              <1> 
    30                              <1> 
    31                              <1> ;-----------------------------------:
    32                              <1> ;       File System routines        :
    33                              <1> ;-----------------------------------:
    34                              <1> name2Clust:
    35                              <1> ;Converts a file name to a first cluster number
    36                              <1> ;Entry : rbx = Points to ASCIIZ string to parse for a Cluster number
    37                              <1> ;Exit : rax = Cluster number or -1 if file not found
    38                              <1> ;Three cases:
    39                              <1> ;1) Start with a letter and a : => Full path and Drive specified
    40                              <1> ;2) Start with \ or / => Current Drive and relative path from root
    41                              <1> ;3) Else => File name in Current Dir or a subdir from current dir
    42 00000658 56                  <1>     push rsi
    43 00000659 57                  <1>     push rdi
    44 0000065A 51                  <1>     push rcx
    45 0000065B 52                  <1>     push rdx
    46 0000065C 4889DF              <1>     mov rdi, rbx    ;Save string ptr in rdi
    47 0000065F 807F013A            <1>     cmp byte [rdi + 1], ":" ;Check it is a colon for full path
    48 00000663 7427                <1>     je .fullPath
    49 00000665 803F5C              <1>     cmp byte [rdi], "\"
    50 00000668 7422                <1>     je .relPath
    51 0000066A 803F2F              <1>     cmp byte [rdi], "/"
    52 0000066D 741D                <1>     je .relPath ;Both CPM and UNIX are considered acceptible path separators
    53                              <1>     ;Else search the current dir for an entry
    54 0000066F 480FB605(0DC10300)  <1>     movzx rax, byte [currentDrv]   ;Get current drive
    55 00000677 E8D90A0000          <1>     call getCDS
    56 0000067C 8B434D              <1>     mov eax, dword [rbx + cds.dStartCluster]    ;Get start cluster
    57 0000067F 488B7345            <1>     mov rsi, qword [rbx + cds.qDPBPtr]  ;Get dpb ptr in rsi
    58 00000683 85C0                <1>     test eax, eax
    59 00000685 7505                <1>     jnz .localFileNoRoot
    60                              <1>     ;Here, we deal with Root Directories
    61 00000687 E872000000          <1>     call getFATtype ;rsi points to dpb
    62                              <1>     ;if ecx = 2, then FAT 32 and must treat differently
    63                              <1> 
    64                              <1> .localFileNoRoot:
    65                              <1> .relPath:
    66                              <1> .fullPath:
    67                              <1> .exit:
    68 0000068C 5A                  <1>     pop rdx
    69 0000068D 59                  <1>     pop rcx
    70 0000068E 5F                  <1>     pop rdi
    71 0000068F 5E                  <1>     pop rsi
    72 00000690 C3                  <1>     ret
    73                              <1> 
    74                              <1> searchDirectorySectorForEntry:
    75                              <1> ;Proc that searches the sector for the string 
    76                              <1> ; UP UNTIL the NULL char or the path separator
    77                              <1> ;If a . is found in file name, skip it
    78                              <1> ;If a sector entry is found to start with 0, return fail
    79                              <1> ;Entry: rdx = Path Section ptr (point to first A/N char)
    80                              <1> ;       rbx = Sector buffer pointer
    81                              <1> ;       rsi = DPB pointer
    82                              <1> ;Exit: CF=NC => Found, CF=CY => Not found
    83                              <1> ;       If CF=CY read char pointed to by rbx.
    84                              <1> ;       If this char is 0, then end of directory reached!
    85 00000691 50                  <1>     push rax
    86 00000692 51                  <1>     push rcx
    87                              <1>     ;cl has number of entries per sector
    88 00000693 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
    89 00000696 80E905              <1>     sub cl, 5   ;5 is the number of bytes per dir entry shift
    90 00000699 B801000000          <1>     mov eax, 1
    91 0000069E D3E0                <1>     shl eax, cl ;eax has number of directory entries in sector
    92                              <1>     ;Now search each entry for name
    93                              <1>     ;Use ecx as counter for each entry
    94 000006A0 89C1                <1>     mov ecx, eax
    95                              <1> .searchDir:
    96 000006A2 803B00              <1>     cmp byte [rbx], 0 ;Check if dir empty before proceeding
    97 000006A5 744E                <1>     jz .exitNotOK
    98                              <1>     ;Do string compare here, search for / or \ or 0 to exit
    99 000006A7 52                  <1>     push rdx    ;Push the name pointer 
   100 000006A8 53                  <1>     push rbx    ;Push sector pointer
   101                              <1> .searchLoop:
   102 000006A9 8A02                <1>     mov al, byte [rdx] ;Get char in ASCIIZ buffer
   103 000006AB 3C2E                <1>     cmp al, "." ;Verify if name separator or directory entry
   104 000006AD 742C                <1>     je .dotCase
   105 000006AF 3C05                <1>     cmp al, 05h ;Special Case
   106 000006B1 7424                <1>     je .specialCase
   107 000006B3 3C2F                <1>     cmp al, "/" ;Name Found
   108 000006B5 7442                <1>     je .nameFound
   109 000006B7 3C5C                <1>     cmp al, "\" ;Name Found
   110 000006B9 743E                <1>     je .nameFound
   111 000006BB 3C00                <1>     cmp al, 0   ;End of ASCIIZ string!
   112 000006BD 743A                <1>     je .nameFound
   113                              <1> .specRet:
   114 000006BF 3A03                <1>     cmp al, byte [rbx]  ;Compare to char in sector buffer
   115 000006C1 7520                <1>     jne .nameNotFound
   116 000006C3 48FFC3              <1>     inc rbx
   117                              <1> .skipChar:
   118 000006C6 48FFC2              <1>     inc rdx ;Go to Filename extension
   119 000006C9 5B                  <1>     pop rbx ;Get start of directory entry into rbx
   120 000006CA 53                  <1>     push rbx
   121 000006CB 4881C308000000      <1>     add rbx, 8  ;Go to the extension portion of the Filename
   122 000006D2 E9D2FFFFFF          <1>     jmp .searchLoop
   123                              <1> .specialCase:
   124 000006D7 B0E5                <1>     mov al, 0E5h
   125 000006D9 EBE4                <1>     jmp short .specRet
   126                              <1> .dotCase:
   127                              <1> ;Check if next char is geq than 'A'. If yes, path separator
   128 000006DB 807A0141            <1>     cmp byte [rdx + 1], 'A'
   129 000006DF 7CDE                <1>     jnge .specRet   ;Not Path Separator
   130 000006E1 EBE3                <1>     jmp short .skipChar
   131                              <1> .nameNotFound:
   132 000006E3 5B                  <1>     pop rbx
   133 000006E4 5A                  <1>     pop rdx
   134 000006E5 4881C320000000      <1>     add rbx, 20h    ;Goto next sector entry
   135 000006EC 803B00              <1>     cmp byte [rbx], 0   ;Are we at the end of the Directory?
   136 000006EF 7404                <1>     jz .exitNotOK   ;Exit early, end of directory
   137 000006F1 FFC9                <1>     dec ecx
   138 000006F3 75AD                <1>     jnz .searchDir
   139                              <1> .exitNotOK:
   140 000006F5 F9                  <1>     stc
   141                              <1> .exitOk:
   142 000006F6 59                  <1>     pop rcx
   143 000006F7 58                  <1>     pop rax
   144 000006F8 C3                  <1>     ret
   145                              <1> .nameFound:
   146 000006F9 5B                  <1>     pop rbx
   147 000006FA 5A                  <1>     pop rdx
   148 000006FB F8                  <1>     clc
   149 000006FC EBF8                <1>     jmp short .exitOk
   150                              <1> getFATtype:
   151                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
   152                              <1> ;Entry: rsi = DPB to ascertain FAT
   153                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
   154 000006FE 53                  <1>     push rbx
   155 000006FF 8B5E0E              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
   156 00000702 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
   157 00000707 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
   158 0000070D 730F                <1>     jae .exit
   159 0000070F FFC9                <1>     dec ecx     ;FAT 12 marker
   160 00000711 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
   161 00000717 7205                <1>     jb .exit
   162 00000719 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
   163                              <1> .exit:
   164 0000071E 5B                  <1>     pop rbx
   165 0000071F C3                  <1>     ret
   166                              <1> 
   167                              <1> clust2FATEntry:
   168                              <1> ;Converts a cluster number to a offset in the FAT
   169                              <1> ;Entry:  rsi points to the DPB for the transacting device
   170                              <1> ;        eax = Cluster number to look for
   171                              <1> ;Exit:   eax = Sector on disk of FAT 
   172                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
   173                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
   174 00000720 53                  <1>     push rbx
   175 00000721 8B5E0E              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
   176 00000724 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
   177 0000072A 731E                <1>     jae .fat32
   178 0000072C 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
   179 00000732 7209                <1>     jb .fat12
   180                              <1> ;FAT16
   181 00000734 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
   182 00000736 6801000000          <1>     push qword 1
   183 0000073B EB15                <1>     jmp short .common
   184                              <1> .fat12:
   185 0000073D 89C1                <1>     mov ecx, eax    ;ecx = eax
   186 0000073F D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
   187 00000741 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
   188 00000743 6800000000          <1>     push qword 0
   189 00000748 EB08                <1>     jmp short .common
   190                              <1> .fat32:
   191 0000074A 6802000000          <1>     push qword 2
   192 0000074F C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
   193                              <1> .common:
   194                              <1> ;eax has the FAToffset
   195 00000752 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
   196 00000755 BA01000000          <1>     mov edx, 1
   197 0000075A D3E2                <1>     shl edx, cl    ;Turn edx to number of bytes per sector
   198 0000075C 89D1                <1>     mov ecx, edx
   199 0000075E 31D2                <1>     xor edx, edx    ;edx = 0
   200 00000760 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
   201 00000762 0FB75E05            <1>     movzx ebx, word [rsi + dpb.wFAToffset]   ;Add the offset to the first FAT
   202 00000766 01D8                <1>     add eax, ebx
   203 00000768 59                  <1>     pop rcx ;Pop the FAT type back into rcx
   204 00000769 5B                  <1>     pop rbx
   205 0000076A C3                  <1>     ret
   206                              <1> getStartSectorOfCluster:
   207                              <1> ;Input: eax = Cluster Number
   208                              <1> ;       r9 = dpb pointer
   209                              <1> ;Output: eax = Starting Sector number for cluster
   210                              <1> ;Gives the data sector we are at in the current cluster
   211                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
   212 0000076B 51                  <1>     push rcx
   213 0000076C 2D02000000          <1>     sub eax, 2
   214 00000771 418A4904            <1>     mov cl, byte [r9 + dpb.bSectorsPerClusterShift]
   215 00000775 D3E0                <1>     shl eax, cl
   216 00000777 4103410A            <1>     add eax, [r9 + dpb.dClusterHeapOffset]
   217                              <1>     ;eax now has the first sector of the current cluster
   218 0000077B 59                  <1>     pop rcx
   219 0000077C C3                  <1>     ret
   220                              <1> getNextSectorOfFile:
   221                              <1> ;This function will read the next sector for a file into a buffer.
   222                              <1> ;If the next sector to be read lives in the next cluster, it will update
   223                              <1> ; the file handle of the file being read/written to the new cluster
   224                              <1> ;
   225                              <1> ;Input: r8 = sft pointer
   226                              <1> ;       r9 = dpb pointer
   227                              <1> ;Output:
   228                              <1> ;       rbx = Pointer to buffer data
   229                              <1> ;       CF = NC, buffer OK to read
   230                              <1> ;       CF = CY, buffer not ok, something went wrong
   231                              <1> ;           ZF = ZE(1), Data not flushed to disk
   232                              <1> ;           ZF = NZ(0), Data no read from disk
   233                              <1>     ;Read next sector. If at last sector in cluster, walk map, get
   234                              <1>     ; next cluster and read first sector 
   235 0000077D 50                  <1>     push rax
   236 0000077E 51                  <1>     push rcx
   237 0000077F 52                  <1>     push rdx
   238 00000780 56                  <1>     push rsi
   239 00000781 57                  <1>     push rdi
   240                              <1>     ;Check if we need to go to next cluster
   241 00000782 66418B401F          <1>     mov ax, word [r8 + sft.wRelSect]    ;Upper byte is ALWAYS 0
   242 00000787 413A4103            <1>     cmp al, byte [r9 + dpb.bMaxSectorInCluster]
   243 0000078B 745F                <1>     je .gotoNextCluster
   244                              <1>     ;Goto next sector
   245 0000078D 6641FF401F          <1>     inc word [r8 + sft.wRelSect]    ;Goto next sector in cluster
   246                              <1> .getSector:
   247 00000792 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr] ;Get cluster number
   248 00000796 E8D0FFFFFF          <1>     call getStartSectorOfCluster
   249 0000079B 410FB7581F          <1>     movzx ebx, word [r8 + sft.wRelSect] ;Get relative sector number
   250                              <1>     ;eax now has the correct sector in the cluster
   251 000007A0 01D8                <1>     add eax, ebx    
   252                              <1>     ;Read the sector into a buffer
   253                              <1>     ;The sector read here is either DATA or DOS
   254 000007A2 498D7026            <1>     lea rsi, qword [r8 + sft.sFileName]
   255 000007A6 488D3D55F8FFFF      <1>     lea rdi, dosBIOSName    ;Check if the file being read is the BIOS
   256 000007AD B90B000000          <1>     mov ecx, 11             ;File name length
   257 000007B2 F3A6                <1>     repe cmpsb
   258 000007B4 742D                <1>     je .OSFile
   259 000007B6 498D7026            <1>     lea rsi, qword [r8 + sft.sFileName]
   260 000007BA 488D3D4DF8FFFF      <1>     lea rdi, dosKernName
   261 000007C1 B90B000000          <1>     mov ecx, 11             ;File name length
   262 000007C6 F3A6                <1>     repe cmpsb
   263 000007C8 7419                <1>     je .OSFile
   264                              <1>     ;Not an OS file, dataBuffer
   265 000007CA B108                <1>     mov cl, dataBuffer
   266                              <1> .getSectorRead:
   267 000007CC 4C89CE              <1>     mov rsi, r9
   268 000007CF E807FDFFFF          <1>     call readBuffer
   269 000007D4 7211                <1>     jc .getSectorFailed
   270 000007D6 4881C320000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   271                              <1> .getSectorExit:
   272 000007DD 5F                  <1>     pop rdi
   273 000007DE 5E                  <1>     pop rsi
   274 000007DF 5A                  <1>     pop rdx
   275 000007E0 59                  <1>     pop rcx
   276 000007E1 58                  <1>     pop rax
   277 000007E2 C3                  <1>     ret
   278                              <1> .OSFile:
   279 000007E3 B101                <1>     mov cl, dosBuffer
   280 000007E5 EBE5                <1>     jmp short .getSectorRead
   281                              <1> .getSectorFailed:
   282                              <1>     ;CF = CY => Something went wrong!
   283                              <1>     ;   Set the Zero flag for data not flushed to disk
   284                              <1>     ;   Clear Zero flag for data not read from disk
   285 000007E7 84ED                <1>     test ch, ch ;This sets the zero flag correctly, but mangles CF
   286 000007E9 F9                  <1>     stc ;Set the carry flag!
   287 000007EA EBF1                <1>     jmp short .getSectorExit
   288                              <1> 
   289                              <1> .gotoNextCluster:
   290                              <1>     ;Read FAT, find next cluster in cluster map, update SFT entries
   291 000007EC 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr] ;Get the current cluster
   292 000007F0 4C89CE              <1>     mov rsi, r9 ;Move dpb pointer into rsi, eax has cluster number
   293 000007F3 E828FFFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   294 000007F8 410FB75905          <1>     movzx ebx, word [r9 + dpb.wFAToffset]
   295 000007FD 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   296 000007FF B102                <1>     mov cl, fatBuffer
   297 00000801 E8D5FCFFFF          <1>     call readBuffer ;Buffer Header in ebx
   298 00000806 72DF                <1>     jc .getSectorFailed
   299                              <1>     ;Check if FAT 12, 16, 32
   300 00000808 4885FF              <1>     test rdi, rdi
   301 0000080B 7429                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   302 0000080D 48F7C701000000      <1>     test rdi, 1
   303 00000814 7407                <1>     jz .goToNextClusterCommonFat32
   304                              <1>     ;Here we handle FAT16
   305 00000816 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   306 0000081B EB09                <1>     jmp short .goToNextClusterCommon
   307                              <1> .goToNextClusterCommonFat32:
   308 0000081D 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   309 00000821 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   310                              <1> .goToNextClusterCommon:
   311 00000826 41894039            <1>     mov dword [r8 + sft.dAbsClusr], eax ;Save new cluster number
   312 0000082A 6641C7401F0000      <1>     mov word [r8 + sft.wRelSect], 0 ;First sector in next cluster
   313 00000831 E95CFFFFFF          <1>     jmp .getSector
   314                              <1> .gotoNextClusterFat12:
   315                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   316                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   317 00000836 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   318 00000839 FFC0                <1>     inc eax ;Get next sector
   319 0000083B E89BFCFFFF          <1>     call readBuffer ;Buffer Header in ebx
   320 00000840 72A5                <1>     jc .getSectorFailed
   321                              <1>     ;rdi has first buffer header, rbx has second buffer header
   322                              <1>     ;rdx has offset into first header for entry
   323 00000842 41F7403901000000    <1>     test dword [r8 + sft.dAbsClusr], 1  ;Check if cluster is odd
   324 0000084A 7429                <1>     jz .gotoNextClusterFat12Even
   325                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   326 0000084C B801000000          <1>     mov eax, 1
   327 00000851 418A4802            <1>     mov cl, byte [r8 + dpb.bBytesPerSectorShift]
   328 00000855 D3E0                <1>     shl eax, cl
   329 00000857 29D0                <1>     sub eax, edx
   330 00000859 FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   331 0000085B 750E                <1>     jnz .gotoNextClusterFat12NoCross
   332                              <1>     ;Boundary cross, build entry properly
   333 0000085D 31C0                <1>     xor eax, eax
   334 0000085F 8A441720            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   335 00000863 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   336 00000866 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   337 00000869 EBBB                <1>     jmp short .goToNextClusterCommon
   338                              <1> .gotoNextClusterFat12NoCross:
   339 0000086B 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   340 00000870 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   341 00000873 EBB1                <1>     jmp short .goToNextClusterCommon
   342                              <1> .gotoNextClusterFat12Even:
   343                              <1>     ;Here the cluster is even and can't cross a sector boundary
   344 00000875 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   345 0000087A 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   346 0000087F EBA5                <1>     jmp short .goToNextClusterCommon
    19                                  %include "./Source/Kernel/CharDevs/charFunctions.asm"
    20                              <1> ;Dos default char functions live here
    21                              <1> 
    22                              <1> stdinReadEcho:     ;ah = 01h
    23                              <1> ;Return char that has been read and echoed in al
    24 00000881 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    25 00000888 488D05(60C20300)    <1>     lea rax, singleIObyt
    26 0000088F C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    27 00000892 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    28 00000896 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    29 0000089C 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    30 000008A0 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    31                              <1> 
    32 000008A7 488B05(98C00300)    <1>     mov rax, qword [conPtr]   ;Get ptr to current con device header
    33 000008AE 488905(4CC10300)    <1>     mov qword [drvrPtr], rax    ;Place it in the glob variable
    34 000008B5 E89A070000          <1>     call goDriver
    35                              <1> 
    36 000008BA 803D(60C20300)00    <1>     cmp byte [singleIObyt], 00h
    37 000008C1 742B                <1>     jz .stdireexit
    38 000008C3 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    39 000008CA 488D05(60C20300)    <1>     lea rax, singleIObyt
    40 000008D1 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    41 000008D4 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    42 000008D8 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    43 000008DE 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    44 000008E2 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    45 000008E9 E866070000          <1>     call goDriver   ;rbx has reqheader ptr
    46                              <1> .stdireexit:
    47 000008EE 8A05(60C20300)      <1>     mov al, byte [singleIObyt]
    48 000008F4 C3                  <1>     ret
    49                              <1> 
    50                              <1> stdoutWrite:       ;ah = 02h
    51                              <1> ;Bspace is regular cursor left, does not insert a blank
    52 000008F5 88153A000000        <1>     mov byte [.stdoutWriteBuffer], dl
    53 000008FB 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    54 00000902 488D152C000000      <1>     lea rdx, .stdoutWriteBuffer
    55 00000909 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    56 0000090C C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    57 00000910 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    58 00000916 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    59 0000091A C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    60                              <1> 
    61 00000921 488B05(98C00300)    <1>     mov rax, qword [conPtr]   ;Get ptr to current con device header
    62 00000928 488905(4CC10300)    <1>     mov qword [drvrPtr], rax    ;Place it in the glob variable
    63 0000092F E820070000          <1>     call goDriver
    64 00000934 C3                  <1>     ret
    65 00000935 00                  <1> .stdoutWriteBuffer db 0
    66                              <1> stdauxRead:        ;ah = 03h
    67                              <1> stdauxWrite:       ;ah = 04h
    68                              <1> stdprnWrite:       ;ah = 05h
    69                              <1> directCONIO:       ;ah = 06h
    70                              <1> waitDirectInNoEcho:;ah = 07h
    71                              <1> ;Return char in al
    72 00000936 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    73 0000093D 488D05(60C20300)    <1>     lea rax, singleIObyt
    74 00000944 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    75 00000947 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    76 0000094B 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    77 00000951 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    78 00000955 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    79                              <1> 
    80 0000095C 488B05(98C00300)    <1>     mov rax, qword [conPtr]   ;Get ptr to current con device header
    81 00000963 488905(4CC10300)    <1>     mov qword [drvrPtr], rax    ;Place it in the glob variable
    82 0000096A E8E5060000          <1>     call goDriver
    83 0000096F 8A05(60C20300)      <1>     mov al, byte [singleIObyt]
    84 00000975 C3                  <1>     ret
    85                              <1> waitStdinNoEcho:   ;ah = 08h
    86 00000976 C3                  <1>     ret
    87                              <1> printString:       ;ah = 09h
    88 00000977 31C9                <1>     xor ecx, ecx    ;Clear char counter
    89 00000979 B824000000          <1>     mov eax, "$"    ;Terminating char
    90 0000097E 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
    91                              <1> .ps0:   ;Search for $ to get count of chars
    92 00000981 AE                  <1>     scasb
    93 00000982 7404                <1>     je .ps1
    94 00000984 FFC1                <1>     inc ecx
    95 00000986 EBF9                <1>     jmp short .ps0
    96                              <1> .ps1:   ;Use handle 
    97 00000988 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    98 0000098F C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    99 00000992 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
   100 00000996 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   101 0000099C 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   102 000009A0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   103                              <1>     
   104 000009A3 488B05(98C00300)    <1>     mov rax, qword [conPtr]   ;Get ptr to current con device header
   105 000009AA 488905(4CC10300)    <1>     mov qword [drvrPtr], rax    ;Place it in the glob variable
   106 000009B1 E89E060000          <1>     call goDriver   ;Called with rbx pointing to the request header
   107                              <1> 
   108 000009B6 488B1D(3CC10300)    <1>     mov rbx, qword [oldRSP]
   109 000009BD 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
   110 000009BF C3                  <1>     ret
   111                              <1> buffStdinInput:    ;ah = 0Ah
   112                              <1> checkStdinStatus:  ;ah = 0Bh
   113                              <1> clearbuffDoFunc:   ;ah = 0Ch
    20                                  %include "./Source/Kernel/CharDevs/dateTimeFunctions.asm"
    21                              <1> ;Major kernel date time functions and subroutines
    22                              <1> 
    23                              <1> getDate:           ;ah = 2Ah
    24                              <1> setDate:           ;ah = 2Bh
    25                              <1> getTime:           ;ah = 2Ch
    26                              <1> setTime:           ;ah = 2Dh
    27 000009C0 C3                  <1>     ret
    21                                  %include "./Source/Kernel/FileIO/fcbFunctions.asm"
    22                              <1> openFileFCB:       ;ah = 0Fh
    23                              <1> closeFileFCB:      ;ah = 10h
    24                              <1> findFirstFileFCB:  ;ah = 11h
    25                              <1> findNextFileFCB:   ;ah = 12h
    26                              <1> deleteFileFCB:     ;ah = 13h
    27                              <1> sequentialReadFCB: ;ah = 14h
    28                              <1> sequentialWriteFCB:;ah = 15h
    29                              <1> createFileFCB:     ;ah = 16h
    30                              <1> renameFileFCB:     ;ah = 17h
    31 000009C1 C3                  <1>     ret
    32                              <1> setDTA:            ;ah = 1Ah
    33                              <1> ;Called with:
    34                              <1> ;   rdx = Pointer to the new default DTA
    35 000009C2 488B1D(3CC10300)    <1>     mov rbx, qword [oldRSP]
    36 000009C9 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    37 000009CD 488915(EAC00300)    <1>     mov qword [currentDTA], rdx
    38 000009D4 C3                  <1>     ret
    39                              <1> randomReadFCB:     ;ah = 21h
    40                              <1> randomWriteFCB:    ;ah = 22h
    41                              <1> getFileSizeFCB:    ;ah = 23h
    42                              <1> setRelRecordFCB:   ;ah = 24h
    43                              <1> randBlockReadFCB:  ;ah = 27h
    44                              <1> randBlockWriteFCB: ;ah = 28h
    45                              <1> parseFilenameFCB:  ;ah = 29h
    46 000009D5 C3                  <1>     ret
    47                              <1> getDTA:            ;ah = 2Fh
    48 000009D6 488B15(3CC10300)    <1>     mov rdx, qword [oldRSP]
    49 000009DD 488B1D(EAC00300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    50 000009E4 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    51 000009E8 C3                  <1>     ret
    22                                  %include "./Source/Kernel/FileIO/handleFunctions.asm"
    23                              <1> ;-----------------------------------:
    24                              <1> ;    File Handle Kernel routines    :
    25                              <1> ;-----------------------------------:
    26                              <1> 
    27                              <1> createFileHdl:     ;ah = 3Ch, handle function
    28 000009E9 C3                  <1>     ret
    29                              <1> openFileHdl:       ;ah = 3Dh, handle function
    30 000009EA C3                  <1>     ret
    31                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    32 000009EB C3                  <1>     ret
    33                              <1> readFileHdl:       ;ah = 3Fh, handle function
    34 000009EC C3                  <1>     ret
    35                              <1> writeFileHdl:      ;ah = 40h, handle function
    36 000009ED C3                  <1>     ret
    37                              <1> 
    38                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    39                              <1> movFileReadPtr:    ;ah = 42h, handle function, LSEEK
    40                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
    41                              <1> ioctrl:            ;ah = 44h, handle function
    42                              <1> duplicateHandle:   ;ah = 45h, handle function
    43                              <1> forceDuplicateHdl: ;ah = 46h, handle function
    44                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
    45                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
    46                              <1> renameFile:        ;ah = 56h
    47                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
    48                              <1> createNewFile:     ;ah = 5Bh
    49                              <1> lockUnlockFile:    ;ah = 5Ch
    50                              <1> setHandleCount:    ;ah = 67h
    51                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
    52 000009EE C3                  <1>     ret
    53                              <1> ;-----------------------------------:
    54                              <1> ;        File Handle routines       :
    55                              <1> ;-----------------------------------:
    56                              <1> getSFTPtr:
    57                              <1> ;Gets the SFT pointer for a given file handle from the calling application
    58                              <1> ;On entry:
    59                              <1> ;   bl = File handle from JFT for calling application
    60                              <1> ;On exit: CF=NC, SFT found and placed in var
    61                              <1> ;         CF=CY, SFT not found, abort!
    62 000009EF 50                  <1>     push rax
    63 000009F0 53                  <1>     push rbx
    64 000009F1 56                  <1>     push rsi
    65 000009F2 57                  <1>     push rdi
    66 000009F3 488B35(F2C00300)    <1>     mov rsi, qword [currentPSP]
    67 000009FA 480FB6DB            <1>     movzx rbx, bl
    68 000009FE 8A5C1E2A            <1>     mov bl, byte [rsi + psp.jobFileTbl + rbx]   ;Use jft entry to get sft num
    69 00000A02 31C0                <1>     xor eax, eax
    70 00000A04 488B3D(88C00300)    <1>     mov rdi, qword [sftHeadPtr]
    71                              <1> .gsp0:
    72 00000A0B 66034708            <1>     add ax, word [rdi + sfth.wNumFiles]
    73 00000A0F 38D8                <1>     cmp al, bl  ;Check if the file header block contains the entry
    74 00000A11 760E                <1>     jbe .gsp1   ;IF bl is below or equal to al then it does
    75 00000A13 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of list
    76 00000A1A 742D                <1>     je .gspFail   ;If we have a number greater than the last entry, fail
    77 00000A1C 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Walk the chain
    78 00000A1F EBEA                <1>     jmp short .gsp0 ;Search again
    79                              <1> .gsp1: 
    80                              <1>     ;Now point to the right entry
    81 00000A21 28D8                <1>     sub al, bl  ;Subtract the number from the total so far to get offset
    82 00000A23 0FB6C0              <1>     movzx eax, al
    83 00000A26 4881C70A000000      <1>     add rdi, sfth_size  ;Point to first file in table
    84 00000A2D 84C0                <1>     test al, al ;Check if rdi points to the first file in this block
    85 00000A2F 740B                <1>     jz .gsp12   ;Skip walking down the sft blocks
    86                              <1> .gsp11:
    87 00000A31 4881C73D000000      <1>     add rdi, sft_size
    88 00000A38 FEC8                <1>     dec al
    89 00000A3A 75F5                <1>     jnz .gsp11  ;Keep adding one until al is zero
    90                              <1> .gsp12:
    91 00000A3C 48893D(D9C20300)    <1>     mov qword [currentSFT], rdi ;Save pointer in variable
    92 00000A43 F8                  <1>     clc
    93                              <1> .gspExit:
    94 00000A44 5F                  <1>     pop rdi
    95 00000A45 5E                  <1>     pop rsi
    96 00000A46 5B                  <1>     pop rbx
    97 00000A47 58                  <1>     pop rax
    98 00000A48 C3                  <1>     ret
    99                              <1> .gspFail:
   100 00000A49 F9                  <1>     stc
   101 00000A4A EBF8                <1>     jmp short .gspExit
   102                              <1> 
    23                                  %include "./Source/Kernel/memFunc.asm"
    24                              <1> ;Memory related functions
    25                              <1> 
    26                              <1> ;-----------------------------------:
    27                              <1> ;  Memory related Kernel routines   :
    28                              <1> ;-----------------------------------:
    29                              <1> allocateMemory:    ;ah = 48h
    30                              <1> ;Input: ebx = Number of paragraphs requested
    31                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    32                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    33 00000A4C 31D2                <1>     xor edx, edx
    34                              <1>     ;Clear the pointers
    35 00000A4E 488915(11C10300)    <1>     mov qword [firstMCB], rdx
    36 00000A55 488915(19C10300)    <1>     mov qword [bestMCB], rdx
    37 00000A5C 488915(21C10300)    <1>     mov qword [lastMCB], rdx
    38 00000A63 31ED                <1>     xor ebp, ebp    
    39 00000A65 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    40 00000A67 488B35(78C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    41                              <1> .walk:
    42 00000A6E 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    43 00000A71 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    44 00000A74 7409                <1>     je .walk1
    45 00000A76 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    46 00000A79 0F8565050000        <1>     jne memSysHalt
    47                              <1> .walk1:
    48                              <1>     ;Here if valid but not the last block
    49 00000A7F 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    50 00000A87 0F8582000000        <1>     jne .walk2
    51                              <1>     ;Here we consolidate adjacent free blocks if there are any
    52                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    53                              <1>     ;End consolidation at first non free block or at last block in chain
    54 00000A8D 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    55 00000A90 744A                <1>     je .det0    ;Determine if this block is useful
    56 00000A92 31C9                <1>     xor ecx, ecx
    57 00000A94 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    58 00000A97 4881C610000000      <1>     add rsi, mcb.program
    59                              <1> .cons0:
    60 00000A9E 48C1E104            <1>     shl rcx, 4
    61 00000AA2 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    62 00000AA5 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    63 00000AA8 7409                <1>     je .cons1
    64 00000AAA 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    65 00000AAD 0F8531050000        <1>     jne memSysHalt 
    66                              <1> .cons1:
    67 00000AB3 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    68 00000ABB 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    69                              <1>     ;Here rsi, points to a free block, add it to rdi
    70 00000ABD 31C9                <1>     xor ecx, ecx
    71 00000ABF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    72 00000AC2 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    73 00000AC8 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    74 00000ACB 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    75 00000ACD 31D2                <1>     xor edx, edx
    76 00000ACF 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    77 00000AD2 48895608            <1>     mov qword [rsi + 8], rdx
    78 00000AD6 3C5A                <1>     cmp al, mcbMarkEnd
    79 00000AD8 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    80                              <1>     ;Here we deal with if the block was the last one 
    81 00000ADA 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    82                              <1> .det0:  ;Now determine if pointer in rdi is useful
    83 00000ADC 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    84                              <1> ;ebx must be less than the arena size for the arena to be useful!
    85 00000ADF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    86 00000AE2 39D9                <1>     cmp ecx, ebx
    87 00000AE4 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    88 00000AE6 488935(21C10300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    89 00000AED 488B05(11C10300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    90 00000AF4 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    91 00000AF7 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    92 00000AF9 488935(11C10300)    <1>     mov qword [firstMCB], rsi
    93                              <1> .det1:
    94                              <1>     ;Now test for best fit.
    95 00000B00 29D9                <1>     sub ecx, ebx    ;Block - ebx
    96 00000B02 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    97 00000B04 7209                <1>     jb .walk2
    98 00000B06 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
    99 00000B08 488935(19C10300)    <1>     mov qword [bestMCB], rsi
   100                              <1> .walk2:
   101 00000B0F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   102 00000B12 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   103 00000B14 31C9                <1>     xor ecx, ecx
   104 00000B16 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   105 00000B19 48C1E104            <1>     shl rcx, 4
   106 00000B1D 4881C610000000      <1>     add rsi, mcb.program
   107 00000B24 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   108 00000B27 E942FFFFFF          <1>     jmp .walk
   109                              <1> .allocate:
   110                              <1>     ;Allocation fails IF the pointer is the null pointer
   111 00000B2C 803D(0CC10300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   112 00000B33 7261                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   113                              <1>     ;Fall thru if last fit
   114 00000B35 488B35(21C10300)    <1>     mov rsi, qword [lastMCB]
   115 00000B3C 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   116 00000B3F 0F84CE000000        <1>     jz .allocFail
   117 00000B45 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   118 00000B47 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   119 00000B4A 31C9                <1>     xor ecx, ecx
   120 00000B4C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   121 00000B4F 29D9                <1>     sub ecx, ebx
   122 00000B51 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   123 00000B57 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   124 00000B5A 48C1E104            <1>     shl rcx, 4
   125 00000B5E 4881C610000000      <1>     add rsi, mcb.program
   126 00000B65 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   127 00000B68 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   128 00000B6A 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   129 00000B6D 488B15(F2C00300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   130 00000B74 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   131 00000B78 488B15(3CC10300)    <1>     mov rdx, qword [oldRSP]
   132 00000B7F 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   133 00000B86 4889F0              <1>     mov rax, rsi
   134 00000B89 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   135 00000B8C 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   136 00000B90 E824040000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   137 00000B95 C3                  <1>     ret
   138                              <1> .bfCommon:
   139 00000B96 488B35(11C10300)    <1>     mov rsi, qword [firstMCB]
   140 00000B9D 803D(0CC10300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   141 00000BA4 480F4435(19C10300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   142 00000BAC 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   143 00000BAF 7462                <1>     jz .allocFail
   144 00000BB1 8A06                <1>     mov al, byte [rsi + mcb.marker]
   145 00000BB3 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   146 00000BB6 31C9                <1>     xor ecx, ecx
   147 00000BB8 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   148 00000BBB 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   149 00000BBD 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   150 00000BC3 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   151 00000BC6 488B15(F2C00300)    <1>     mov rdx, qword [currentPSP]
   152 00000BCD 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   153 00000BD1 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   154 00000BD4 4881C610000000      <1>     add rsi, mcb.program
   155 00000BDB 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   156 00000BE1 48C1E304            <1>     shl rbx, 4
   157 00000BE5 4801DE              <1>     add rsi, rbx
   158 00000BE8 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   159 00000BEA 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   160 00000BF2 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   161 00000BF5 488B15(3CC10300)    <1>     mov rdx, qword [oldRSP]
   162 00000BFC 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   163 00000C03 4889F8              <1>     mov rax, rdi
   164 00000C06 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   165 00000C09 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   166 00000C0D E8A7030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   167 00000C12 C3                  <1>     ret
   168                              <1> .allocFail:
   169                              <1>     ;Walk the MCB chain to determine the biggest block size
   170 00000C13 488B35(78C00300)    <1>     mov rsi, [mcbChainPtr]
   171 00000C1A 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   172                              <1> .af0:
   173 00000C1C 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   174 00000C1F 7409                <1>     je .af1
   175 00000C21 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   176 00000C24 0F85BA030000        <1>     jne memSysHalt
   177                              <1> .af1:
   178 00000C2A 31C9                <1>     xor ecx, ecx
   179 00000C2C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   180 00000C2F 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   181 00000C37 7505                <1>     jne .af2
   182 00000C39 39D9                <1>     cmp ecx, ebx
   183 00000C3B 0F47D9              <1>     cmova ebx, ecx
   184                              <1> .af2:
   185 00000C3E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   186 00000C41 7410                <1>     je .afExit
   187 00000C43 48C1E104            <1>     shl rcx, 4
   188 00000C47 4881C610000000      <1>     add rsi, mcb.program
   189 00000C4E 4801CE              <1>     add rsi, rcx
   190 00000C51 EBD7                <1>     jmp short .af1
   191                              <1> .afExit:
   192 00000C53 B808000000          <1>     mov eax, errNoMem
   193 00000C58 488B15(3CC10300)    <1>     mov rdx, qword [oldRSP]
   194 00000C5F 8802                <1>     mov byte [rdx + callerFrame.rax], al
   195 00000C61 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx
   196 00000C64 804A5801            <1>     or byte [rdx + callerFrame.flags], 1
   197 00000C68 C3                  <1>     ret
   198                              <1> freeMemory:        ;ah = 49h
   199                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   200                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   201                              <1> ;Always skip the first block as this is the anchor for DOS
   202 00000C69 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   203 00000C70 31C9                <1>     xor ecx, ecx
   204 00000C72 488B35(78C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   205 00000C79 4889F7              <1>     mov rdi, rsi
   206 00000C7C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   207 00000C7F 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   208 00000C83 4881C610000000      <1>     add rsi, mcb.program
   209 00000C8A 4801CE              <1>     add rsi, rcx    ;Go to next block
   210                              <1> .mainLoop:
   211 00000C8D 31C9                <1>     xor ecx, ecx
   212 00000C8F 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   213 00000C92 7409                <1>     je .valid
   214 00000C94 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   215 00000C97 0F8547030000        <1>     jne memSysHalt
   216                              <1> .valid:
   217 00000C9D 4939F0              <1>     cmp r8, rsi
   218 00000CA0 741C                <1>     je .blockFound
   219                              <1>     ;Not valid, check if last block in chain
   220 00000CA2 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   221 00000CA5 0F84A0000000        <1>     je .blockNotFound
   222 00000CAB 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   223 00000CAE 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   224 00000CB2 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   225 00000CB9 4801CE              <1>     add rsi, rcx    ;Go to next block
   226 00000CBC EBCF                <1>     jmp short .mainLoop
   227                              <1> .blockFound:
   228                              <1>     ;If hole, error.
   229                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   230 00000CBE 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   231 00000CC6 0F8488000000        <1>     je .blockHole
   232 00000CCC 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   233 00000CD4 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   234 00000CDC 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   235                              <1>     ;It is, let it absorb this space
   236 00000CDE 31C9                <1>     xor ecx, ecx
   237 00000CE0 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   238 00000CE3 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   239 00000CE9 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   240                              <1>     ;Replace block marker
   241 00000CEC 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   242 00000CEE 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   243 00000CF0 31C9                <1>     xor ecx, ecx
   244 00000CF2 48890E              <1>     mov qword [rsi], rcx
   245 00000CF5 48894E08            <1>     mov qword [rsi + 8], rcx
   246 00000CF9 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   247                              <1> .blockFoundCheckFollowing:
   248                              <1>     ;First check if we are the last block in chain
   249 00000CFC 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   250 00000CFF 7439                <1>     je .blockFoundExit  ;If yes, exit!
   251 00000D01 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   252 00000D04 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   253 00000D07 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   254 00000D0B 4881C110000000      <1>     add rcx, mcb.program
   255 00000D12 4801CE              <1>     add rsi, rcx    ;Go to next block
   256 00000D15 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   257 00000D1D 751B                <1>     jne .blockFoundExit ;If not free, exit
   258                              <1>     ;If free, absorb into block pointed to by rdi
   259 00000D1F 31C9                <1>     xor ecx, ecx
   260 00000D21 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   261 00000D24 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   262 00000D2A 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   263                              <1>     ;Replace block marker
   264 00000D2D 8A06                <1>     mov al, byte [rsi + mcb.marker]
   265 00000D2F 8807                <1>     mov byte [rdi + mcb.marker], al
   266 00000D31 31C9                <1>     xor ecx, ecx
   267 00000D33 48890E              <1>     mov qword [rsi], rcx
   268 00000D36 48894E08            <1>     mov qword [rsi + 8], rcx
   269                              <1> .blockFoundExit:
   270 00000D3A E87A020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   271 00000D3F 488B1D(3CC10300)    <1>     mov rbx, qword [oldRSP]
   272 00000D46 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   273 00000D4A C3                  <1>     ret
   274                              <1> .blockNotFound:
   275                              <1>     ;Set CF and error code
   276 00000D4B C605(E9C00300)08    <1>     mov byte [errorClass], eClsNotFnd   ;Block not found 
   277 00000D52 EB07                <1>     jmp short .blockError
   278                              <1> .blockHole:
   279                              <1> ;Cannot free a hole! Fail!
   280 00000D54 C605(E9C00300)0A    <1>     mov byte [errorClass], eClsLocked   ;Cant free a hole
   281                              <1> .blockError:
   282 00000D5B C605(E4C00300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   283 00000D62 C605(E5C00300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   284 00000D69 66C705(E6C00300)09- <1>     mov word [errorExCde], errMemAddr   ;Invalid mem addr
   284 00000D71 00                  <1>
   285 00000D72 C605(E8C00300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   286 00000D79 B809000000          <1>     mov eax, errMemAddr
   287 00000D7E 488B1D(3CC10300)    <1>     mov rbx, qword [oldRSP]
   288 00000D85 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   289 00000D88 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   290 00000D8C E828020000          <1>     call verifyIntegrityOfMCBChain
   291 00000D91 C3                  <1>     ret
   292                              <1> reallocMemory:     ;ah = 4Ah
   293                              <1> ;Input: r8 = address of the block to be realloc'ed
   294                              <1> ;       ebx = How many paras this block should contain after realloc. 
   295                              <1> ;               If ebx = 0, jump to free memory
   296 00000D92 85DB                <1>     test ebx, ebx
   297 00000D94 0F84CFFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   298 00000D9A 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   299 00000DA1 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   300 00000DA4 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   301 00000DA7 7409                <1>     je .ctn
   302 00000DA9 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   303 00000DAC 0F855C010000        <1>     jne .badAddrGiven
   304                              <1> .ctn:
   305                              <1>     ;Provided block is valid and not a hole
   306                              <1>     ;Check if Growth or Shrink
   307 00000DB2 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   308 00000DBA 7498                <1>     je freeMemory.blockHole
   309 00000DBC 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   310 00000DBF 31C9                <1>     xor ecx, ecx
   311 00000DC1 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   312 00000DC4 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   313 00000DC6 0F8786000000        <1>     ja .growth
   314 00000DCC 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   315                              <1> ;We can always shrink
   316 00000DD2 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   317 00000DD4 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   318 00000DDA 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   319 00000DDD 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   320 00000DE3 48C1E304            <1>     shl rbx, 4
   321 00000DE7 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   322 00000DEE 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   323 00000DF1 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   324 00000DF3 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   325 00000DF6 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   326 00000DF8 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   327 00000E00 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   328 00000E03 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   329 00000E05 0F84DB000000        <1>     je .exit
   330                              <1> ;Else, now see if the block following is also free and absorb it
   331 00000E0B 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   332 00000E0E 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   333 00000E12 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   334 00000E19 4801CE              <1>     add rsi, rcx    ;Goto next arena
   335 00000E1C 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   336 00000E1F 7409                <1>     je .shrinkAbsorb
   337 00000E21 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   338 00000E24 0F85BA010000        <1>     jne memSysHalt
   339                              <1> .shrinkAbsorb:
   340 00000E2A 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   341 00000E32 0F85AE000000        <1>     jne .exit
   342                              <1>     ;It is free, absorb it
   343 00000E38 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   344 00000E3B 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   345 00000E41 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   346 00000E44 31C9                <1>     xor ecx, ecx
   347                              <1>     ;Clear absorbed MCB
   348 00000E46 48890E              <1>     mov qword [rsi], rcx
   349 00000E49 48894E08            <1>     mov qword [rsi + 8], rcx
   350 00000E4D E994000000          <1>     jmp .exit
   351                              <1> .growth:
   352                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   353 00000E52 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   354 00000E55 0F84A0000000        <1>     je .notEnuffMem
   355                              <1> ;Now check the following space is free. If not, not enuff mem err
   356 00000E5B 31C9                <1>     xor ecx, ecx
   357 00000E5D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   358 00000E60 48C1E104            <1>     shl rcx, 4
   359 00000E64 4889F7              <1>     mov rdi, rsi    
   360 00000E67 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   361 00000E6E 4801CE              <1>     add rsi, rcx
   362 00000E71 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   363 00000E74 7409                <1>     je .growthOK
   364 00000E76 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   365 00000E79 0F8565010000        <1>     jne memSysHalt
   366                              <1> .growthOK:
   367                              <1>     ;rdi points to block we are growing
   368 00000E7F 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   369 00000E87 7572                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   370                              <1>     ;rsi must own all memory up to the next owned arena
   371 00000E89 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   372 00000E8B 31C9                <1>     xor ecx, ecx
   373 00000E8D 31D2                <1>     xor edx, edx
   374 00000E8F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   375 00000E92 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   376 00000E98 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   377 00000E9B 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   378 00000E9D 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   379 00000E9F 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   380 00000EA2 7759                <1>     ja .notEnuffMem1
   381 00000EA4 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   382 00000EA6 81FA01000000        <1>     cmp edx, 1
   383 00000EAC 7449                <1>     je .notEnuffMem2
   384 00000EAE 31C9                <1>     xor ecx, ecx
   385 00000EB0 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   386 00000EB3 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   387 00000EB7 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   388 00000EBA 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   389 00000EBD 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   390 00000EC4 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   391 00000EC8 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   392 00000ECB 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   393 00000ECF 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   394                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   395                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   396 00000ED1 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   397 00000ED3 7411                <1>     jz .exit
   398 00000ED5 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   399 00000EDB 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   400 00000EDE 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   401                              <1> .exit:
   402 00000EE6 E8CE000000          <1>     call verifyIntegrityOfMCBChain
   403 00000EEB 488B1D(3CC10300)    <1>     mov rbx, qword [oldRSP]
   404 00000EF2 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   405 00000EF6 C3                  <1>     ret
   406                              <1> .notEnuffMem2:
   407 00000EF7 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   408 00000EF9 EB02                <1>     jmp short .notEnuffMem1
   409                              <1> .notEnuffMem:
   410 00000EFB 31DB                <1>     xor ebx, ebx    ;No space to grow
   411                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   412 00000EFD B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   413 00000F02 488B15(3CC10300)    <1>     mov rdx, qword [oldRSP]
   414 00000F09 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   415 00000F0C EB0C                <1>     jmp short .bad
   416                              <1> .badAddrGiven:
   417 00000F0E 488B15(3CC10300)    <1>     mov rdx, qword [oldRSP]
   418 00000F15 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   419                              <1> .bad:
   420 00000F1A C605(E4C00300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   421 00000F21 C605(E5C00300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   422 00000F28 668905(E6C00300)    <1>     mov word [errorExCde], ax   ;Error code
   423 00000F2F C605(E8C00300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   424 00000F36 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save this word on stack
   425 00000F39 804A5801            <1>     or byte [rdx + callerFrame.flags], 1    ;Set Carry flag on
   426 00000F3D E877000000          <1>     call verifyIntegrityOfMCBChain
   427 00000F42 C3                  <1>     ret
   428                              <1> getsetMallocStrat: ;ah = 58h
   429 00000F43 84C0                <1>     test al, al
   430 00000F45 741F                <1>     jz .get
   431 00000F47 3C02                <1>     cmp al, 2
   432 00000F49 7337                <1>     jae .bad
   433                              <1> ;Set here
   434 00000F4B 488B1D(3CC10300)    <1>     mov rbx, qword [oldRSP]
   435 00000F52 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   436 00000F56 8805(0CC10300)      <1>     mov byte [allocStrat], al   ;Only save low word
   437 00000F5C 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   438 00000F60 E854000000          <1>     call verifyIntegrityOfMCBChain
   439 00000F65 C3                  <1>     ret
   440                              <1> .get:
   441 00000F66 488B1D(3CC10300)    <1>     mov rbx, qword [oldRSP]
   442 00000F6D 31C0                <1>     xor eax, eax
   443 00000F6F 8A05(0CC10300)      <1>     mov al, byte [allocStrat]
   444 00000F75 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   445 00000F78 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   446 00000F7C E838000000          <1>     call verifyIntegrityOfMCBChain
   447 00000F81 C3                  <1>     ret
   448                              <1> .bad:
   449 00000F82 C605(E4C00300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   450 00000F89 C605(E5C00300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   451 00000F90 66C705(E6C00300)01- <1>     mov word [errorExCde], errInvFnc   ;Invalid function number addr
   451 00000F98 00                  <1>
   452 00000F99 C605(E8C00300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   453 00000FA0 B801000000          <1>     mov eax, errInvFnc
   454 00000FA5 488B1D(3CC10300)    <1>     mov rbx, qword [oldRSP]
   455 00000FAC 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   456 00000FAF 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   457 00000FB3 E801000000          <1>     call verifyIntegrityOfMCBChain
   458 00000FB8 C3                  <1>     ret
   459                              <1> ;-----------------------------------:
   460                              <1> ;      Memory related routines      :
   461                              <1> ;-----------------------------------:
   462                              <1> verifyIntegrityOfMCBChain:
   463 00000FB9 50                  <1>     push rax
   464 00000FBA 53                  <1>     push rbx
   465 00000FBB 488B1D(78C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   466                              <1> .ok:
   467 00000FC2 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   468 00000FC5 7408                <1>     je .ok1
   469 00000FC7 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   470 00000FCA 7518                <1>     jne memSysHalt    ;It was not M or Z, fail violently
   471                              <1> .exit:
   472 00000FCC 5B                  <1>     pop rbx
   473 00000FCD 58                  <1>     pop rax
   474 00000FCE C3                  <1>     ret ;We have reached the end of the chain, return all good!
   475                              <1> .ok1:
   476 00000FCF 31C0                <1>     xor eax, eax
   477 00000FD1 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   478 00000FD4 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   479 00000FD8 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   480 00000FDF 4801C3              <1>     add rbx, rax
   481 00000FE2 EBDE                <1>     jmp short .ok
   482                              <1> memSysHalt:
   483                              <1> ;Only arrive here if the integrity of the system is not verified
   484                              <1> ;Lock the system
   485 00000FE4 C605(E4C00300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   486 00000FEB C605(E5C00300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   487 00000FF2 66C705(E6C00300)07- <1>     mov word [errorExCde], errMCBbad   ;Destroyed MCB chain
   487 00000FFA 00                  <1>
   488 00000FFB C605(E8C00300)05    <1>     mov byte [errorAction], eActKil ;Abort the system
   489 00001002 488D150E000000      <1>     lea rdx, .sysHltString
   490 00001009 B409                <1>     mov ah, 09h
   491 0000100B CD41                <1>     int 41h
   492                              <1>     ;Only halt IRQ's in production!
   493                              <1>     %if !DEBUG
   494 0000100D FA                  <1>     cli ;Halt interrupts
   495 0000100E B0FF                <1>     mov al, 0FFh    ;Mask IRQ lines 
   496 00001010 E6A1                <1>     out 0A1h, al
   497 00001012 E621                <1>     out 021h, al
   498                              <1>     %endif
   499 00001014 F4                  <1>     hlt             ;Halt the system
   500 00001015 EBFD                <1>     jmp short $ - 1 ;Go back far enough to capture the hlt
   501 00001017 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
   501 00001020 6C6F636174696F6E20- <1>
   501 00001029 6572726F720D0A      <1>
   502 00001030 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
   502 00001039 616420434F4D4D414E- <1>
   502 00001042 442C2073797374656D- <1>
   502 0000104B 2068616C74656424    <1>
    24                                  %include "./Source/Kernel/localisation.asm"
    25                              <1> ;Localisation based functions live here
    26                              <1> 
    27                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    28                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    29                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    30                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    31 00001053 C3                  <1>     ret
    25                                  %include "./Source/Kernel/dosPrim.asm"
    26                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    27                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    28                              <1> 
    29                              <1> goDriver:
    30                              <1> ;Called with rbx = Ptr to the request header for the driver call!
    31 00001054 56                  <1>     push rsi
    32 00001055 488B35(4CC10300)    <1>     mov rsi, qword [drvrPtr]    ;Get the driver pointer
    33 0000105C FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    34 0000105F FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    35 00001062 66F705(51C00300)00- <1>     test word [diskReqHdr + ioReqPkt.status], 8000h ;Clear carry flag and test
    35 0000106A 80                  <1>
    36 0000106B 7401                <1>     jz .exit    ;Skip the setting in an error sitch
    37 0000106D F9                  <1>     stc 
    38                              <1> .exit:
    39 0000106E 5E                  <1>     pop rsi
    40 0000106F C3                  <1>     ret
    41                              <1> 
    42                              <1> absDiskWrite:       ;Int 46h
    43                              <1> ;al = Drive number
    44                              <1> ;rbx = Memory Buffer address to read from
    45                              <1> ;ecx = Number of sectors to write
    46                              <1> ;rdx = Start LBA to write to
    47                              <1>     %if DEBUG
    48                              <1>     ;Print DPB 
    49                              <1>     debugEnterM
    50                              <1>     lea rbp, .l0000
    51                              <1>     call debPrintNullString
    52                              <1>     jmp short .l0001
    53                              <1> .l0000 db "Entering Int 46h",0Ah,0Dh,0
    54                              <1> .l0001:
    55                              <1>     debugExitM
    56                              <1>     %endif
    57 00001070 50                  <1>     push rax
    58 00001071 53                  <1>     push rbx
    59 00001072 52                  <1>     push rdx
    60 00001073 55                  <1>     push rbp
    61 00001074 B408                <1>     mov ah, drvWRITE
    62 00001076 0225(10C10300)      <1>     add ah, byte [verifyFlag]   ;Change to Write/Verify if set
    63 0000107C EB06                <1>     jmp short absDiskReadWriteCommon
    64                              <1> absDiskRead:        ;Int 45h
    65                              <1> ;al = Drive number
    66                              <1> ;rbx = Memory Buffer address to write to
    67                              <1> ;ecx = Number of sectors to read
    68                              <1> ;rdx = Start LBA to read from
    69                              <1>     %if DEBUG
    70                              <1>     ;Print DPB 
    71                              <1>     debugEnterM
    72                              <1>     lea rbp, .l0000
    73                              <1>     call debPrintNullString
    74                              <1>     jmp short .l0001
    75                              <1> .l0000 db "Entering Int 45h",0Ah,0Dh,0
    76                              <1> .l0001:
    77                              <1>     debugExitM
    78                              <1>     %endif
    79 0000107E 50                  <1>     push rax
    80 0000107F 53                  <1>     push rbx
    81 00001080 52                  <1>     push rdx
    82 00001081 55                  <1>     push rbp
    83 00001082 B404                <1>     mov ah, drvREAD
    84                              <1> absDiskReadWriteCommon:
    85                              <1> ;Entered with the appropriate function number in ah
    86 00001084 52                  <1>     push rdx    ;Save start LBA
    87 00001085 50                  <1>     push rax
    88 00001086 88C2                <1>     mov dl, al
    89 00001088 E8AA000000          <1>     call findDPB   ;Get dpb ptr in rbp
    90 0000108D 58                  <1>     pop rax
    91 0000108E 5A                  <1>     pop rdx
    92                              <1> 
    93 0000108F C605(4EC00300)2A    <1>     mov byte [diskReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
    94 00001096 8805(4FC00300)      <1>     mov byte [diskReqHdr + ioReqPkt.unitnm], al
    95 0000109C 8825(50C00300)      <1>     mov byte [diskReqHdr + ioReqPkt.cmdcde], ah
    96 000010A2 66C705(51C00300)00- <1>     mov word [diskReqHdr + ioReqPkt.status], 0
    96 000010AA 00                  <1>
    97 000010AB 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
    98 000010AE 8805(5BC00300)      <1>     mov byte [diskReqHdr + ioReqPkt.medesc], al
    99 000010B4 48891D(5CC00300)    <1>     mov qword [diskReqHdr + ioReqPkt.bufptr], rbx
   100 000010BB 488915(68C00300)    <1>     mov qword [diskReqHdr + ioReqPkt.strtsc], rdx
   101 000010C2 890D(64C00300)      <1>     mov dword [diskReqHdr + ioReqPkt.tfrlen], ecx
   102                              <1>     
   103 000010C8 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver pointer
   104 000010CC 488915(4CC10300)    <1>     mov qword [drvrPtr], rdx    ;Store ptr in global variable
   105                              <1> 
   106 000010D3 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr ;Get ReqHeader pointer in rbx
   107 000010DA E875FFFFFF          <1>     call goDriver   ;If carry set, command failed
   108 000010DF 5D                  <1>     pop rbp
   109 000010E0 5A                  <1>     pop rdx
   110 000010E1 5B                  <1>     pop rbx
   111 000010E2 58                  <1>     pop rax
   112 000010E3 7202                <1>     jc .absDiskError
   113 000010E5 F8                  <1>     clc
   114 000010E6 C3                  <1>     ret
   115                              <1> .absDiskError:
   116 000010E7 8A05(51C00300)      <1>     mov al, byte [diskReqHdr + ioReqPkt.status] ;Get low byte into al
   117 000010ED B480                <1>     mov ah, 80h ;Attachment failure
   118 000010EF 3C0C                <1>     cmp al, 0Ch ;Gen error
   119 000010F1 741A                <1>     je .absExit
   120 000010F3 B440                <1>     mov ah, 40h ;Seek error
   121 000010F5 3C06                <1>     cmp al, 06h
   122 000010F7 7414                <1>     je .absExit
   123 000010F9 B408                <1>     mov ah, 08h ;Bad CRC
   124 000010FB 3C04                <1>     cmp al, 04h
   125 000010FD 740E                <1>     je .absExit
   126 000010FF B404                <1>     mov ah, 04h ;Sector not found
   127 00001101 3C08                <1>     cmp al, 08h
   128 00001103 7408                <1>     je .absExit
   129 00001105 30E4                <1>     xor ah, ah  ;Write Protect Violation
   130 00001107 84C0                <1>     test al, al
   131 00001109 7402                <1>     je .absExit
   132 0000110B B402                <1>     mov ah, 02h ;Other Error
   133                              <1> .absExit:
   134 0000110D F9                  <1>     stc
   135 0000110E C3                  <1>     ret
    26                                  %include "./Source/Kernel/dosKernel.asm"
    27                              <1> ;-----------------------------------:
    28                              <1> ;       Misc System routines        :
    29                              <1> ;-----------------------------------:
    30                              <1> criticalDOSError:
    31                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    32                              <1> ; to the critical error handler.
    33                              <1> ; Called with ax, di and rsi set as required by Int 44h (caller decides)
    34                              <1> ;               AH = Critical Error Bitfield
    35                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    36                              <1> ;               Bit 6 - Reserved
    37                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    38                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    39                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    40                              <1> ;               Bits [2-1] = Affected Disk Error
    41                              <1> ;                     0 0   DOS area
    42                              <1> ;                     0 1   FAT area
    43                              <1> ;                     1 0   Directory area
    44                              <1> ;                     1 1   Data area
    45                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    46                              <1> ;               AL  = Failing drive number if AH[7] = 0
    47                              <1> ;               DIL = Error code for errorMsg
    48                              <1> ;               RSI = EA of Device Header for which device the error occured
    49                              <1> ;Return:
    50                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    51                              <1> ;                  = 1 - Retry the Operation    (Retry)
    52                              <1> ;                  = 2 - Terminate the Program  (Abort)
    53                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    54                              <1> ; Return response from int 44h in al
    55 0000110F FA                  <1>     cli ;Disable Interrupts
    56 00001110 C605(E2C00300)01    <1>     mov byte [critErrFlag], 1   ;Set flag for critical error
    57 00001117 488925(29C10300)    <1>     mov qword [xInt44hRSP], rsp
    58 0000111E 488B25(3CC10300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    59 00001125 CD44                <1>     int 44h ;Call critical error handler
    60 00001127 488B25(29C10300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    61 0000112E C605(E2C00300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    62 00001135 FB                  <1>     sti ;Reenable Interrupts
    63 00001136 C3                  <1>     ret
    64                              <1> 
    65                              <1> findDPB:
    66                              <1> ;Finds the DPB for a given drive
    67                              <1> ;Input:  dl = Drive number (0=A, 1=B etc...)
    68                              <1> ;Output: al = 00, rbp = Pointer to the DPB
    69                              <1> ;        al = -1, Failed, no DPB for device, rbx destroyed
    70 00001137 488B1D(80C00300)    <1>     mov rbx, qword [dpbHeadPtr]
    71                              <1> .fd1:
    72 0000113E 30C0                <1>     xor al, al
    73 00001140 385500              <1>     cmp byte [rbp + dpb.bDriveNumber], dl
    74 00001143 740F                <1>     je .fd2
    75 00001145 488B6D24            <1>     mov rbp, qword [rbp + dpb.qNextDPBPtr]
    76 00001149 B0FF                <1>     mov al, -1
    77 0000114B 4881FDFFFFFFFF      <1>     cmp rbp, -1 ;If rbx followed last item in list, no DPB exists for dl
    78 00001152 75EA                <1>     jne .fd1
    79                              <1> .fd2:
    80                              <1>     %if DEBUG
    81                              <1>     ;Print DPB 
    82                              <1>     debugEnterM
    83                              <1>     mov r8, rbp ;Save dpb pointer
    84                              <1>     lea rbp, .l0000
    85                              <1>     call debPrintNullString
    86                              <1>     mov rbp, r8
    87                              <1>     call debDPBptr
    88                              <1>     jmp short .l0001
    89                              <1> .l0000 db "Internal call to find DPB",0Ah,0Dh,0
    90                              <1> .l0001:
    91                              <1>     debugExitM
    92                              <1>     %endif
    93 00001154 C3                  <1>     ret
    94                              <1> getCDS:
    95                              <1>     ;Gets the CDS for the current drive in rax
    96                              <1>     ;Input: rax = Drive number, 0 = A ...
    97                              <1>     ;Output: rbx = Pointer to CDS for drive in rax
    98 00001155 50                  <1>     push rax
    99 00001156 51                  <1>     push rcx
   100 00001157 52                  <1>     push rdx
   101 00001158 488D1D(AAC00300)    <1>     lea rbx, qword [cdsHeadPtr] ;Point to cds array
   102 0000115F 48B95B000000000000- <1>     mov rcx, cds_size   
   102 00001168 00                  <1>
   103 00001169 31D2                <1>     xor edx, edx
   104 0000116B F7E1                <1>     mul ecx 
   105 0000116D 4801C3              <1>     add rbx, rax    ;Move rbx to the right offset in the array
   106 00001170 5A                  <1>     pop rdx
   107 00001171 59                  <1>     pop rcx
   108 00001172 58                  <1>     pop rax
   109 00001173 C3                  <1>     ret
   110                              <1> ;-----------------------------------:
   111                              <1> ;        Interrupt routines         :
   112                              <1> ;-----------------------------------:
   113                              <1> terminateProcess:   ;Int 40h
   114 00001174 48CF                <1>     iretq
   115                              <1> terminateHandler:   ;Int 42h
   116                              <1> ctrlCHandler:       ;Int 43h
   117 00001176 48CF                <1>     iretq
   118                              <1> 
   119                              <1> terminateResident:  ;Int 47h
   120                              <1> inDosHandler:       ;Int 48h
   121                              <1> ;Called when DOS idle
   122 00001178 48CF                <1>     iretq
   123                              <1> fastOutput:         ;Int 49h
   124                              <1> ;Called with char to transfer in al
   125 0000117A 50                  <1>     push rax
   126 0000117B B40E                <1>     mov ah, 0Eh
   127 0000117D CD30                <1>     int 30h
   128 0000117F 58                  <1>     pop rax
   129 00001180 48CF                <1>     iretq
   130                              <1> passCommand:        ;Int 4Eh, hooked by COMMAND.COM
   131 00001182 48CF                <1>     iretq
   132                              <1> multiplex:          ;Int 4Fh, kept as iretq for now
   133 00001184 48CF                <1>     iretq
   134                              <1> ;-----------------------------------:
   135                              <1> ;        Main Kernel routines       :
   136                              <1> ;-----------------------------------:
   137                              <1> functionDispatch:   ;Int 41h Main function dispatcher
   138                              <1> ;ah = Function number, all other registers have various meanings
   139                              <1>  %if DEBUG
   140                              <1>     ;Entry function
   141                              <1>     debugEnterM
   142                              <1>     lea rbp, .l0000
   143                              <1>     call debPrintNullString
   144                              <1>     call debPrintFunctionName
   145                              <1>     jmp short .l0001
   146                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
   147                              <1> .l0001:    
   148                              <1>     debugExitM
   149                              <1>     %endif
   150 00001186 FA                  <1>     cli ;Halt external interrupts
   151 00001187 FC                  <1>     cld ;Ensure all string ops occur in the right direction
   152 00001188 80FC6A              <1>     cmp ah, kernelDispatchTableL/8    ;Number of functions
   153 0000118B 0F871D010000        <1>     ja .fdExitBad
   154                              <1>     ;Cherry pick functions
   155 00001191 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
   156 00001194 722C                <1>     jb .fsbegin   ;If below skip these checks
   157 00001196 0F8443050000        <1>     je ctrlBreakCheck
   158 0000119C 80FC64              <1>     cmp ah, 64h
   159 0000119F 0F8432070000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
   160 000011A5 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
   161 000011A7 80FC51              <1>     cmp ah, 51h
   162 000011AA 0F84EB050000        <1>     je getCurrProcessID    ;This and below are exactly the same
   163 000011B0 80FC62              <1>     cmp ah, 62h
   164 000011B3 0F8415070000        <1>     je getPSPaddr          ;Calls the above function
   165 000011B9 80FC50              <1>     cmp ah, 50h
   166 000011BC 0F84D0050000        <1>     je setCurrProcessID
   167                              <1> .fsbegin:
   168                              <1>     pushDOS ;Push the usual prologue registers
   270 000011C2 4151                <2>  push r9
   271 000011C4 4150                <2>  push r8
   272 000011C6 55                  <2>  push rbp
   273 000011C7 57                  <2>  push rdi
   274 000011C8 56                  <2>  push rsi
   275 000011C9 52                  <2>  push rdx
   276 000011CA 51                  <2>  push rcx
   277 000011CB 53                  <2>  push rbx
   278 000011CC 50                  <2>  push rax
   169 000011CD 488B05(3CC10300)    <1>     mov rax, qword [oldRSP]
   170 000011D4 488905(34C10300)    <1>     mov qword [oldoldRSP], rax
   171 000011DB FE05(E3C00300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
   172 000011E1 488925(3CC10300)    <1>     mov qword [oldRSP], rsp
   173                              <1> ;Here, we want to save oldRSP in the callers PSP
   174 000011E8 803D(E3C00300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
   175 000011EF 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
   176 000011F1 488B05(F2C00300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
   177 000011F8 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   178                              <1> .fsb1:
   179 000011FC 58                  <1>     pop rax     ;Get old rax back
   180 000011FD 50                  <1>     push rax    ;and push it back onto the stack
   181 000011FE 488D25(3FC80300)    <1>     lea rsp, critStakTop
   182 00001205 FB                  <1>     sti         ;Reenable interrupts
   183                              <1> 
   184 00001206 C605(33C10300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   185                              <1> 
   186 0000120D 48891D(44C10300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   187 00001214 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
   188 00001217 C1E303              <1>     shl ebx, 3      ;Multiply the function number by 8 for offset into table
   189 0000121A 50                  <1>     push rax        ;Push rax onto the stack
   190 0000121B 488D05B8060000      <1>     lea rax, qword [kernelDispatchTable]
   191 00001222 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   192 00001225 58                  <1>     pop rax
   193 00001226 488B1B              <1>     mov rbx, qword [rbx]    ;Get the address from the dispatch table
   194                              <1> 
   195 00001229 84E4                <1>     test ah, ah     ;Simple Terminate function?
   196 0000122B 741C                <1>     jz .fddiskOp
   197 0000122D 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   198 00001230 7443                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   199 00001232 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   200 00001235 7712                <1>     ja .fddiskOp
   201                              <1> ;Char operations here
   202 00001237 F605(E2C00300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   203 0000123E 7535                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   204 00001240 488D25(7FCE0300)    <1>     lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   205 00001247 EB2C                <1>     jmp short .fdGoToFunction
   206                              <1> .fddiskOp:
   207                              <1>     ;Disk operations go here
   208                              <1>     ;Clear up error info
   209 00001249 C605(E5C00300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   210 00001250 C605(E2C00300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   211 00001257 C605(E4C00300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   212                              <1> 
   213 0000125E C605(33C10300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   214 00001265 488D25(BFD40300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   215 0000126C F605(0FC10300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   216 00001273 7400                <1>     jz .fdGoToFunction
   217                              <1> ; HANDLE CTRL+BREAK HERE!
   218                              <1> .fdGoToFunction:
   219 00001275 48871D(44C10300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   220                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   221                              <1>     ;
   222                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   223                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   224                              <1>     ;
   225                              <1>     %if DEBUG && REGS
   226                              <1>     ;Print stack if necessary function
   227                              <1>     debugEnterM
   228                              <1>     call debPrintDOSStack
   229                              <1>     debugExitM
   230                              <1>     %endif
   231 0000127C FF15(44C10300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   232                              <1>     %if DEBUG
   233                              <1>     ;Entry function
   234                              <1>     debugEnterM
   235                              <1>     lea rbp, .l0002
   236                              <1>     call debPrintNullString
   237                              <1>     jmp short .l0003
   238                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   239                              <1> .l0003:    
   240                              <1>     debugExitM
   241                              <1>     %endif
   242                              <1>     %if DEBUG && REGS
   243                              <1>     ;Exit function
   244                              <1>     debugEnterM
   245                              <1>     call debPrintDOSStack
   246                              <1>     debugExitM
   247                              <1>     %endif
   248                              <1> .fdExit:
   249 00001282 FA                  <1>     cli     ;Redisable interrupts
   250                              <1>     ;???
   251 00001283 FE0D(E3C00300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   252 00001289 488B25(3CC10300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   253 00001290 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   254 00001293 488B05(34C10300)    <1>     mov rax, qword [oldoldRSP]
   255 0000129A 488905(3CC10300)    <1>     mov qword [oldRSP], rax
   256                              <1>     popDOS  ;Pop the frame
   282 000012A1 58                  <2>  pop rax
   283 000012A2 5B                  <2>  pop rbx
   284 000012A3 59                  <2>  pop rcx
   285 000012A4 5A                  <2>  pop rdx
   286 000012A5 5E                  <2>  pop rsi
   287 000012A6 5F                  <2>  pop rdi
   288 000012A7 5D                  <2>  pop rbp
   289 000012A8 4158                <2>  pop r8
   290 000012AA 4159                <2>  pop r9
   257 000012AC 48CF                <1>     iretq
   258                              <1> .fdExitBad:
   259 000012AE B400                <1>     mov ah, 0
   260 000012B0 48CF                <1>     iretq
   261                              <1> 
   262                              <1> ;========================================:
   263                              <1> ;            Kernel Functions            :
   264                              <1> ;========================================:
   265                              <1> simpleTerminate:   ;ah = 00h
   266 000012B2 C3                  <1>     ret
   267                              <1> diskReset:         ;ah = 0Dh
   268                              <1> ;Flush all dirty buffers to disk
   269 000012B3 488B2D(A2C00300)    <1>     mov rbp, qword [bufHeadPtr]
   270                              <1> .drCheckBuffer:
   271 000012BA F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   272 000012BE 7407                <1>     jz .drGotoNextBuffer
   273                              <1> .drFlushBuffer:
   274 000012C0 E8ADF2FFFF          <1>     call flushBuffer    ;Called with rbp = buffer header
   275 000012C5 720E                <1>     jc .drError
   276                              <1> .drGotoNextBuffer:
   277 000012C7 488B6D00            <1>     mov rbp, qword [rbp + bufferHdr.nextBufPtr]
   278 000012CB 4881FDFFFFFFFF      <1>     cmp rbp, -1     ;If rbp points to -1, exit
   279 000012D2 75E6                <1>     jne .drCheckBuffer
   280 000012D4 C3                  <1>     ret
   281                              <1> .drError:
   282                              <1> ;Abort/Retry/Ignore
   283                              <1> ;Abort returns to DOS, 
   284                              <1> ;Retry retries the write on the buffer, 
   285                              <1> ;Ignore marks the buffer as clean and proceeds as normal
   286 000012D5 8A4509              <1>     mov al, byte [rbp + bufferHdr.bufferFlags]
   287 000012D8 240F                <1>     and al, 0Fh ;Clear the upper nybble
   288 000012DA B431                <1>     mov ah, 31h ;Disk Error, Ignore,Retry and Write operation
   289 000012DC 3C01                <1>     cmp al, dosBuffer
   290 000012DE 740F                <1>     je .drErrorMain
   291 000012E0 80C402              <1>     add ah, 2
   292 000012E3 3C02                <1>     cmp al, fatBuffer
   293 000012E5 7408                <1>     je .drErrorMain
   294 000012E7 80C402              <1>     add ah, 2
   295 000012EA 3C04                <1>     cmp al, dirBuffer
   296 000012EC 80C402              <1>     add ah, 2
   297                              <1> .drErrorMain:
   298 000012EF 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   299 000012F2 488B7517            <1>     mov rsi, qword [rbp + bufferHdr.driveDPBPtr]
   300 000012F6 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   301 000012FA 668B3D(51C00300)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]    ;Disk error occured!
   302 00001301 6681E7FF00          <1>     and di, 0FFh    ;Only bottom byte
   303 00001306 66893D(E6C00300)    <1>     mov word [errorExCde], di     ;Save driver error code
   304 0000130D 668105(E6C00300)13- <1>     add word [errorExCde], drvErrShft    ;Add offset to driver error codes
   304 00001315 00                  <1>
   305 00001316 8805(E4C00300)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   306 0000131C C605(E5C00300)02    <1>     mov byte [errorLocus], eLocDsk   ;Error in Block Device Request code
   307 00001323 C605(E9C00300)0B    <1>     mov byte [errorClass], eClsMedia ;Media error (bad BPB or other) code
   308 0000132A C605(E8C00300)01    <1>     mov byte [errorAction], eActRet   ;Retry request code
   309 00001331 E8D9FDFFFF          <1>     call criticalDOSError       ;Critical error handler
   310 00001336 84C0                <1>     test al, al ;Ignore the troublesome buffer and mark it as free
   311 00001338 7406                <1>     jz .drIgnore
   312 0000133A 3C01                <1>     cmp al, 1   ;Retry flushing the buffer
   313 0000133C 7482                <1>     je .drFlushBuffer
   314 0000133E CD43                <1>     int 43h     ;Abort and fail both abort through int 43h
   315                              <1> .drIgnore:
   316 00001340 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1  ;Mark buffer as free
   317 00001344 E97EFFFFFF          <1>     jmp .drGotoNextBuffer
   318                              <1> 
   319                              <1> selectDisk:        ;ah = 0Eh
   320                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   321 00001349 8A05(13C00300)      <1>     mov al, byte [numLogDrv]        ;Value 1 based
   322 0000134F 8A1D(B2C00300)      <1>     mov bl, byte [lastdrvNum]       ;Value 1 based
   323 00001355 FEC8                <1>     dec al
   324 00001357 FECB                <1>     dec bl
   325 00001359 38C3                <1>     cmp bl, al
   326 0000135B 0F47C3              <1>     cmova eax, ebx    ;If bl > al, move bl to al
   327 0000135E 38C2                <1>     cmp dl, al  ;If dl is bigger than al
   328 00001360 7707                <1>     ja .error
   329 00001362 8815(0DC10300)      <1>     mov byte [currentDrv], dl   ;Only save dl if it is a valid number
   330 00001368 C3                  <1>     ret ;al = lastdrv as retcode
   331                              <1> .error:
   332 00001369 488B2D(3CC10300)    <1>     mov rbp, qword [oldRSP]
   333 00001370 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   334 00001378 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   335 0000137D 668905(E6C00300)    <1>     mov word [errorExCde], ax     
   336 00001384 C605(E5C00300)01    <1>     mov byte [errorLocus], eLocUnk    ;Not appropriate
   337 0000138B C605(E9C00300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   338 00001392 C605(E8C00300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   339 00001399 C3                  <1>     ret
   340                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   341 0000139A 8A05(0DC10300)      <1>     mov al, byte [currentDrv]
   342 000013A0 C3                  <1>     ret
   343                              <1> FATinfoDefault:    ;ah = 1Bh
   344 000013A1 30D2                <1>     xor dl, dl
   345                              <1> FATinfoDevice:     ;ah = 1Ch
   346                              <1> ;Return in:
   347                              <1> ;   al = Number of sectors per cluster
   348                              <1> ;   edx = Number of clusters
   349                              <1> ;   cx =  Size of a clsuter
   350 000013A3 84D2                <1>     test dl, dl
   351 000013A5 7408                <1>     jz .fidSkipdefault
   352 000013A7 8A15(0DC10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   353 000013AD EB02                <1>     jmp short .fidMain
   354                              <1> .fidSkipdefault:
   355 000013AF FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   356                              <1> .fidMain:
   357                              <1> ;Walk the dpb chain manually
   358 000013B1 E881FDFFFF          <1>     call findDPB    ;Get in rbp the dpb pointer for drive dl
   359 000013B6 84C0                <1>     test al, al
   360 000013B8 7433                <1>     jz .fidDPBFound
   361                              <1> ;Else, we at an error.
   362                              <1> ;Simply return with CY set and error code in al with extended error info
   363 000013BA 488B2D(3CC10300)    <1>     mov rbp, qword [oldRSP]
   364 000013C1 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   365 000013C9 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   366 000013CE 66C705(E6C00300)0F- <1>     mov word [errorExCde], errBadDrv     
   366 000013D6 00                  <1>
   367 000013D7 C605(E5C00300)01    <1>     mov byte [errorLocus], eLocUnk    ;Not appropriate
   368 000013DE C605(E9C00300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   369 000013E5 C605(E8C00300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   370 000013EC C3                  <1>     ret
   371                              <1> .fidDPBFound:
   372 000013ED 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   373 000013F0 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   374 000013F2 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   375 000013F5 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   376 000013F8 BB01000000          <1>     mov ebx, 1
   377 000013FD D3E3                <1>     shl ebx, cl
   378 000013FF 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   379 00001401 488D5D22            <1>     lea rbx, qword [rbp + dpb.bMediaDescriptor]
   380 00001405 488B2D(3CC10300)    <1>     mov rbp, qword [oldRSP]
   381 0000140C 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   382 00001410 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   383 00001414 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   384 00001418 C3                  <1>     ret
   385                              <1> ;===============================
   386                              <1> setIntVector:      ;ah = 25h
   387                              <1> ;Called with:
   388                              <1> ;   rdx = Pointer to interrupt handler
   389                              <1> ;   al = Interrupt number
   390 00001419 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   391 0000141B 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   392                              <1> ;First call to get default BIOS segement selector and attribute word
   393 00001421 88C3                <1>     mov bl, al  ;Set interrupt number 
   394 00001423 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   395 00001428 CD35                <1>     int 35h
   396 0000142A 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   397 0000142C 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   398                              <1> ;dx preserves the attribute word
   399 0000142E 488B2D(3CC10300)    <1>     mov rbp, qword [oldRSP]
   400 00001435 488B5D18            <1>     mov rbx, qword [rbp + callerFrame.rdx]  ;Pointer passed in rdx
   401 00001439 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   402 0000143E CD35                <1>     int 35h
   403                              <1> 
   404 00001440 8A4500              <1>     mov al, byte [rbp + callerFrame.rax]    ;Preserve low byte of rax
   405 00001443 C3                  <1>     ret
   406                              <1> createNewPSP:      ;ah = 26h
   407 00001444 C3                  <1>     ret
   408                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   409 00001445 8805(10C10300)      <1>     mov byte [verifyFlag], al
   410 0000144B 8025(10C10300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   411 00001452 C3                  <1>     ret
   412                              <1> getDOSversion:     ;ah = 30h
   413 00001453 488B15(3CC10300)    <1>     mov rdx, qword [oldRSP]
   414 0000145A 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   415 0000145C 886209              <1>     mov byte [rdx + callerFrame.rbx + 1], ah    ;Clear bh 
   416 0000145F 668B059AEBFFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   417 00001466 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save ax
   418 00001469 C3                  <1>     ret
   419                              <1> terminateStayRes:  ;ah = 31h
   420 0000146A C3                  <1>     ret
   421                              <1> ;-------------------------------------------
   422                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   423 0000146B 30D2                <1>     xor dl, dl
   424                              <1> getDeviceDPBptr:   ;ah = 32h
   425                              <1> ;On entry: dl = Drive number
   426                              <1> ;On exit: rbx = DPB pointer
   427 0000146D 84D2                <1>     test dl, dl
   428 0000146F 7508                <1>     jnz .gddpskipdefault
   429 00001471 8A15(0DC10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   430 00001477 EB02                <1>     jmp short .gddpcommon
   431                              <1> .gddpskipdefault:
   432                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   433 00001479 FECA                <1>     dec dl
   434                              <1> .gddpcommon:
   435 0000147B E8B7FCFFFF          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
   436 00001480 84C0                <1>     test al, al
   437 00001482 741F                <1>     jz .gddpMediaCheck
   438                              <1> ;Put in here error info
   439 00001484 66C705(E6C00300)0F- <1>     mov word [errorExCde], errBadDrv ;Invalid drive spec
   439 0000148C 00                  <1>
   440 0000148D C605(E5C00300)02    <1>     mov byte [errorLocus], eLocDsk    ;Block device driver
   441 00001494 C605(E9C00300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   442 0000149B C605(E8C00300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after intervention
   443 000014A2 C3                  <1>     ret ;Return. al = -1
   444                              <1> .gddpMediaCheck:
   445                              <1> ;Media Check Section
   446 000014A3 C605(4EC00300)17    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   447 000014AA 8815(4FC00300)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.unitnm], dl
   448 000014B0 C605(50C00300)01    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   449 000014B7 66C705(51C00300)00- <1>     mov word [diskReqHdr + mediaCheckReqPkt.status], 0
   449 000014BF 00                  <1>
   450 000014C0 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   451 000014C3 8805(5BC00300)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.medesc], al
   452 000014C9 88D0                <1>     mov al, dl  ;Save device number in al
   453 000014CB 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   454 000014CF 488915(4CC10300)    <1>     mov qword [drvrPtr], rdx
   455 000014D6 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   456 000014DD E872FBFFFF          <1>     call goDriver
   457 000014E2 0F82E0000000        <1>     jc .gddpError
   458 000014E8 88C2                <1>     mov dl, al
   459 000014EA 803D(5CC00300)01    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 1 ;Certified no change
   460 000014F1 0F84A6000000        <1>     je .gddpretdbp
   461 000014F7 803D(5CC00300)00    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 0
   462 000014FE 750B                <1>     jne .gddpBuildBPB   ;This means Media changed declared
   463 00001500 E8B2EFFFFF          <1>     call testDirtyBufferForDrive
   464 00001505 0F8292000000        <1>     jc .gddpretdbp    ;If there is a dirty buffer for the drive, skip build bpb
   465                              <1> .gddpBuildBPB:
   466                              <1> ;BPB Build Section, only here if need a new bpb, i.e. sure of a new device
   467 0000150B E8B5F0FFFF          <1>     call findLRUBuffer  ;Get lru buffer pointer in rbx
   468 00001510 3A5308              <1>     cmp dl, byte [rbx + bufferHdr.driveNumber]  ;Does buffer belong to old drv?
   469 00001513 7414                <1>     je .gddpBuildBPBInvalidateBuffer    ;Yes, immediately invalidate data
   470                              <1>     ;If no, flush the data to disk.
   471                              <1> .gddpBuildBPBFlush:
   472 00001515 4889EE              <1>     mov rsi, rbp    ;Save rbp as pointer to old dl drive dpb
   473 00001518 4889DD              <1>     mov rbp, rbx    ;Get buffer header pointer in rbp
   474 0000151B E852F0FFFF          <1>     call flushBuffer    ;Flush the buffer to disk, rbx preserved
   475 00001520 4889F5              <1>     mov rbp, rsi    ;Return old drive dpb pointer to rbp
   476 00001523 0F8213010000        <1>     jc .gddpErrorType2  ;rbx points to buffer header
   477                              <1> .gddpBuildBPBInvalidateBuffer:
   478                              <1>     ;Write new buffer header
   479 00001529 885308              <1>     mov byte [rbx + bufferHdr.driveNumber], dl
   480 0000152C C6430908            <1>     mov byte [rbx + bufferHdr.bufferFlags], dataBuffer
   481 00001530 48C7430A00000000    <1>     mov qword [rbx + bufferHdr.bufferLBA], 0
   482 00001538 C6431201            <1>     mov byte [rbx + bufferHdr.bufFATcopy], 1
   483 0000153C C7431300000000      <1>     mov dword [rbx + bufferHdr.bufFATsize], 0
   484 00001543 48896B17            <1>     mov qword [rbx + bufferHdr.driveDPBPtr], rbp
   485 00001547 488D5B20            <1>     lea rbx, qword [rbx + bufferHdr.dataarea]
   486                              <1>     ;Build BPB request
   487 0000154B C605(4EC00300)1E    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   488 00001552 8815(4FC00300)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.unitnm], dl
   489 00001558 C605(50C00300)02    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   490 0000155F 66C705(51C00300)00- <1>     mov word [diskReqHdr + bpbBuildReqPkt.status], 0 
   490 00001567 00                  <1>
   491 00001568 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   492 0000156B 8805(5BC00300)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.medesc], al
   493 00001571 48891D(5CC00300)    <1>     mov qword [diskReqHdr + bpbBuildReqPkt.bufptr], rbx ;Put lru pointer in rbx
   494                              <1> 
   495 00001578 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   496 0000157C 488915(4CC10300)    <1>     mov qword [drvrPtr], rdx
   497 00001583 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   498 0000158A E8C5FAFFFF          <1>     call goDriver
   499 0000158F 7237                <1>     jc .gddpError
   500 00001591 488B35(64C00300)    <1>     mov rsi, qword [diskReqHdr + bpbBuildReqPkt.bpbptr]
   501                              <1>     ;rbp points to dpb so we good to go
   502                              <1>     ;Call int 41h ah=53h Build DPB without reentering Int 41h
   503                              <1>     ;Since this function doesnt modify the caller stack, it is safe to do so
   504 00001598 E81A020000          <1>     call createDPB 
   505                              <1> .gddpretdbp: 
   506 0000159D C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Clear access flag
   507 000015A1 488B15(3CC10300)    <1>     mov rdx, qword [oldRSP]
   508 000015A8 48896A08            <1>     mov qword [rdx + callerFrame.rbx], rbp  ;Here, all paths have rbp as dpbptr
   509 000015AC 30C0                <1>     xor al, al  ;Set al = 0 to indicate rbx=dpb pointer
   510 000015AE C3                  <1>     ret
   511                              <1> .gddpretdpbFail:
   512 000015AF 488B15(3CC10300)    <1>     mov rdx, qword [oldRSP]
   513 000015B6 48814A5801000000    <1>     or qword [rdx + callerFrame.flags], 1   ;Set CF=CY
   514 000015BE 66C705(E6C00300)53- <1>     mov word [errorExCde], errFI24 ;Fail on INT 44h error code
   514 000015C6 00                  <1>
   515 000015C7 C3                  <1>     ret
   516                              <1> .gddpError:
   517                              <1> ;Abort, Retry, Ignore are the only acceptible responses
   518                              <1> ;Entered with rbp = dpb for failing drive
   519                              <1> ;             rdx = driver header that caused fault
   520 000015C8 4889D6              <1>     mov rsi, rdx    ;rdx points to driver header in both cases
   521 000015CB 488B1D(3CC10300)    <1>     mov rbx, qword [oldRSP]
   522 000015D2 8A4318              <1>     mov al, byte [rbx + callerFrame.rdx]    ;Get low byte = dl = Drive number
   523 000015D5 88C2                <1>     mov dl, al  ;Save in dl
   524 000015D7 84C0                <1>     test al, al
   525 000015D9 7508                <1>     jnz .gddpE0
   526 000015DB 8A05(0DC10300)      <1>     mov al, byte [currentDrv]
   527 000015E1 EB02                <1>     jmp short .gddpE1
   528                              <1> .gddpE0:
   529 000015E3 FEC8                <1>     dec al
   530                              <1> .gddpE1:
   531 000015E5 B436                <1>     mov ah, 36h ;Read operation, data area, abort/retry/ignore, disk error
   532 000015E7 668B3D(51C00300)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   533 000015EE 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   534 000015F3 48893D(FAC00300)    <1>     mov qword [rdiErrorPtr], rdi    ;Save this byte
   535 000015FA 66893D(E6C00300)    <1>     mov word [errorExCde], di     ;Save driver error code
   536 00001601 668105(E6C00300)13- <1>     add word [errorExCde], drvErrShft    ;Add offset to driver error codes
   536 00001609 00                  <1>
   537 0000160A 8805(E4C00300)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   538 00001610 C605(E5C00300)02    <1>     mov byte [errorLocus], eLocDsk    ;Error in Block Device Request code
   539 00001617 C605(E9C00300)0B    <1>     mov byte [errorClass], eClsMedia   ;Media error (bad BPB or other) code
   540 0000161E C605(E8C00300)01    <1>     mov byte [errorAction], eActRet   ;Retry request code
   541 00001625 E8E5FAFFFF          <1>     call criticalDOSError   ;Critical error handler
   542 0000162A 84C0                <1>     test al, al
   543 0000162C 0F846BFFFFFF        <1>     jz .gddpretdbp  ;Ignore error, return, rbp has old dpb pointer
   544 00001632 3C01                <1>     cmp al, 1
   545 00001634 0F8433FEFFFF        <1>     je getDeviceDPBptr ;Reenter the function, dl has drive code
   546 0000163A CD43                <1>     int 43h ;Else, restart DOS
   547                              <1> .gddpErrorType2:
   548                              <1> ;Error flushing the old buffer
   549                              <1> ;   rbx = Buffer header for data transfer
   550 0000163C B439                <1>     mov ah, 39h ;Write operation, abort/retry/ignore/fail, disk error
   551 0000163E 807B0901            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dosBuffer
   552 00001642 7414                <1>     je .gddpErrorType2main
   553 00001644 80CC02              <1>     or ah, 2h   ;Set bit 1
   554 00001647 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   555 0000164B 740B                <1>     je .gddpErrorType2main
   556 0000164D B43D                <1>     mov ah, 3Dh ;Set bit 2, clear bit 1
   557 0000164F 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   558 00001653 7403                <1>     je .gddpErrorType2main
   559 00001655 80CC02              <1>     or ah, 2h   ;Set bit 2 and 1
   560                              <1> .gddpErrorType2main:    
   561 00001658 668B3D(51C00300)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   562 0000165F 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   563 00001664 66893D(E6C00300)    <1>     mov word [errorExCde], di     ;Save driver error code
   564 0000166B 668105(E6C00300)13- <1>     add word [errorExCde], drvErrShft   ;Add offset to driver error codes
   564 00001673 00                  <1>
   565 00001674 8A4308              <1>     mov al, byte [rbx + bufferHdr.driveNumber]
   566 00001677 8805(E4C00300)      <1>     mov byte [errorDrv], al
   567 0000167D C605(E5C00300)02    <1>     mov byte [errorLocus], eLocDsk    ;Error in Block Device Request code
   568 00001684 C605(E9C00300)0B    <1>     mov byte [errorClass], eClsMedia  ;Media error (bad disk write) code
   569 0000168B C605(E8C00300)01    <1>     mov byte [errorAction], eActRet   ;Retry request code
   570 00001692 488B7317            <1>     mov rsi, qword [rbx + bufferHdr.driveDPBPtr]
   571 00001696 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get device driver header in rsi
   572 0000169A E870FAFFFF          <1>     call criticalDOSError   ;Critical error handler
   573 0000169F 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   574 000016A3 7420                <1>     je .gddpErrorType2FatDir
   575 000016A5 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   576 000016A9 741A                <1>     je .gddpErrorType2FatDir
   577 000016AB 84C0                <1>     test al, al
   578 000016AD 0F8476FEFFFF        <1>     jz .gddpBuildBPBInvalidateBuffer ;Ignore error, invalidate data
   579 000016B3 3C01                <1>     cmp al, 1
   580 000016B5 0F845AFEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   581 000016BB 3C03                <1>     cmp al, 3
   582 000016BD 0F84ECFEFFFF        <1>     je .gddpretdpbFail
   583 000016C3 CD43                <1>     int 43h ;al = 2, means just abort
   584                              <1> .gddpErrorType2FatDir:
   585 000016C5 84C0                <1>     test al, al ;Ignore converted to fail
   586 000016C7 0F84E2FEFFFF        <1>     jz .gddpretdpbFail
   587 000016CD 3C01                <1>     cmp al, 1
   588 000016CF 0F8440FEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   589 000016D5 3C03                <1>     cmp al, 3
   590 000016D7 0F84D2FEFFFF        <1>     je .gddpretdpbFail
   591 000016DD CD43                <1>     int 43h ;al = 2, means just abort
   592                              <1> ;-------------------------------------------
   593                              <1> 
   594                              <1> ctrlBreakCheck:    ;ah = 33h
   595 000016DF 84C0                <1>     test al, al
   596 000016E1 7406                <1>     jz .cbcget  ;Get the state
   597 000016E3 8815(0FC10300)      <1>     mov byte [breakFlag], dl    ;Set the state
   598                              <1> .cbcget:
   599 000016E9 8A15(0FC10300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   600 000016EF 48CF                <1>     iretq
   601                              <1> getInDOSflagPtr:   ;ah = 34h
   602 000016F1 488D15(E3C00300)    <1>     lea rdx, inDOS
   603 000016F8 488B1D(3CC10300)    <1>     mov rbx, qword [oldRSP]
   604 000016FF 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;save ptr in rbx
   605 00001703 C3                  <1>     ret
   606                              <1> getIntVector:      ;ah = 35h
   607                              <1> ;Called with:
   608                              <1> ;   al = Interrupt Number
   609                              <1> ;Returns:
   610                              <1> ;   rbx = Pointer to interrupt handler
   611 00001704 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   612 00001706 B807F00000          <1>     mov eax, 0F007h
   613 0000170B CD35                <1>     int 35h
   614 0000170D 488B15(3CC10300)    <1>     mov rdx, qword [oldRSP]
   615 00001714 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx  ;Save pointer in rbx
   616 00001718 8A02                <1>     mov al, byte [rdx + callerFrame.rax]    ;Get the low byte in al
   617 0000171A C3                  <1>     ret
   618                              <1> getDiskFreeSpace:  ;ah = 36h
   619 0000171B 84D2                <1>     test dl, dl
   620 0000171D 7408                <1>     jz .gdfsSkipdefault
   621 0000171F 8A15(0DC10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   622 00001725 EB02                <1>     jmp short .gdfsMain
   623                              <1> .gdfsSkipdefault:
   624 00001727 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   625                              <1> .gdfsMain:
   626 00001729 E809FAFFFF          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
   627 0000172E 84C0                <1>     test al, al
   628 00001730 7434                <1>     jz .gdfsDPBFound
   629                              <1> ;Else, we at an error.
   630                              <1> ;Simply return with CY set and error code in al with extended error info
   631 00001732 66C705(E6C00300)0F- <1>     mov word [errorExCde], errBadDrv     ;Invalid drive error
   631 0000173A 00                  <1>
   632 0000173B C605(E5C00300)02    <1>     mov byte [errorLocus], eLocDsk    ;Not appropriate
   633 00001742 C605(E9C00300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   634 00001749 C605(E8C00300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   635 00001750 488B2D(3CC10300)    <1>     mov rbp, qword [oldRSP]
   636 00001757 66C74500FFFF        <1>     mov word [rbp + callerFrame.rax], -1    ;Set ax=FFFFh
   637 0000175D 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set CF=CY
   638 00001765 C3                  <1>     ret
   639                              <1> .gdfsDPBFound:
   640 00001766 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   641 00001769 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   642 0000176B 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   643 0000176E 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   644 00001771 BB01000000          <1>     mov ebx, 1
   645 00001776 D3E3                <1>     shl ebx, cl
   646 00001778 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   647 0000177A 8B5D30              <1>     mov ebx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   648 0000177D 488B2D(3CC10300)    <1>     mov rbp, qword [oldRSP]
   649 00001784 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   650 00001788 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   651 0000178C 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   652 00001790 C3                  <1>     ret
   653                              <1> 
   654                              <1> loadExecChild:     ;ah = 4Bh, EXEC
   655                              <1> terminateClean:    ;ah = 4Ch, EXIT
   656                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   657 00001791 C3                  <1>     ret
   658                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   659 00001792 48891D(F2C00300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   660 00001799 48CF                <1>     iretq
   661                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   662 0000179B 488B15(F2C00300)    <1>     mov rdx, qword [currentPSP]
   663 000017A2 48CF                <1>     iretq
   664                              <1> getSysVarsPtr:     ;ah = 52h
   665 000017A4 488D15(80C00300)    <1>     lea rdx, sysVarsPtr
   666 000017AB 488B1D(3CC10300)    <1>     mov rbx, qword [oldRSP]
   667 000017B2 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx
   668 000017B6 C3                  <1>     ret
   669                              <1> createDPB:         ;ah = 53h, generates a DPB from a given BPB
   670                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   671                              <1> ;This is done so that the other fields of the DPB can be recycled
   672                              <1> ;Input: rsi = ptr to the BPB
   673                              <1> ;       rbp = ptr to the DPB
   674                              <1> ;bMediaDescriptor
   675 000017B7 8A4615              <1>     mov al, byte [rsi + bpb.media]
   676 000017BA 884522              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   677                              <1> ;bAccessFlag
   678 000017BD C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Not accessed
   679                              <1> ;dFirstFreeCluster
   680 000017C1 C7452C00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   681                              <1> ;dNumberOfFreeClusters
   682 000017C8 C74530FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   683                              <1> ;bBytesPerSectorShift
   684 000017CF 668B460B            <1>     mov ax, word [rsi + bpb.bytsPerSec]
   685 000017D3 B107                <1>     mov cl, 7   ;Start with 128 byte sectors (not supported, min 512)
   686 000017D5 66D3E8              <1>     shr ax, cl  ;Shift down
   687                              <1> .cd0:
   688 000017D8 66D1E8              <1>     shr ax, 1
   689 000017DB 7404                <1>     jz .cd1
   690 000017DD FEC1                <1>     inc cl
   691 000017DF EBF7                <1>     jmp short .cd0
   692                              <1> .cd1:
   693 000017E1 884D02              <1>     mov byte [rbp + dpb.bBytesPerSectorShift], cl
   694                              <1> ;bMaxSectorInCluster
   695 000017E4 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   696 000017E7 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   697 000017E9 884503              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   698                              <1> ;bSectorsPerClusterShift
   699 000017EC FEC0                <1>     inc al
   700 000017EE 30C9                <1>     xor cl, cl
   701                              <1> .cd2:
   702 000017F0 D0E8                <1>     shr al, 1
   703 000017F2 7404                <1>     jz .cd3
   704 000017F4 FEC1                <1>     inc cl
   705 000017F6 EBF8                <1>     jmp short .cd2
   706                              <1> .cd3:
   707 000017F8 884D04              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   708                              <1> ;wFAToffset, number of reserved sectors in partition
   709 000017FB 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   710 000017FF 66894505            <1>     mov word [rbp + dpb.wFAToffset], ax
   711                              <1> ;bNumberOfFATs
   712 00001803 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   713 00001806 884507              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   714                              <1> ;wNumberRootDirSectors
   715 00001809 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   716 0000180D C1E005              <1>     shl eax, 5  ;Multiply by 32
   717 00001810 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   718 00001814 FFC9                <1>     dec ecx
   719 00001816 01C8                <1>     add eax, ecx
   720 00001818 31D2                <1>     xor edx, edx    ;Clear for divide
   721 0000181A F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   722 0000181C 66894508            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   723                              <1> ;dFATlength, get the FAT length
   724 00001820 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   725 00001824 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   726 00001827 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   727 00001829 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   728 0000182C 894512              <1>     mov dword [rbp + dpb.dFATlength], eax
   729                              <1> ;Complex cases below...
   730                              <1> ;dClusterHeapOffset, start sector of the data area
   731 0000182F 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   732 00001833 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   733 00001836 85C0                <1>     test eax, eax
   734 00001838 0F44C3              <1>     cmovz eax, ebx
   735                              <1> ;eax = FATsz
   736 0000183B 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   737 0000183F 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   738 00001842 85DB                <1>     test ebx, ebx
   739 00001844 0F44D9              <1>     cmovz ebx, ecx 
   740                              <1> ;ebx = TotSec
   741 00001847 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   742 0000184A 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   743                              <1> .cd4:
   744 0000184C 01C2                <1>     add edx, eax
   745 0000184E FEC9                <1>     dec cl
   746 00001850 75FA                <1>     jnz .cd4
   747 00001852 89D0                <1>     mov eax, edx    ;Store product in eax
   748 00001854 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   749 00001858 01D0                <1>     add eax, edx
   750 0000185A 0FB75508            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   751 0000185E 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   752                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   753                              <1>     ;aka eax = Start sector of the data area in volume
   754 00001860 89450A              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   755                              <1> ;dClusterCount
   756 00001863 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   757 00001865 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   758 00001867 31D2                <1>     xor edx, edx
   759 00001869 BB01000000          <1>     mov ebx, 1
   760 0000186E 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   761 00001871 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   762 00001873 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   763 00001875 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   764 00001877 89450E              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   765                              <1> ;dFirstUnitOfRootDir
   766 0000187A 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   767 0000187F 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   768 00001882 7709                <1>     ja .cd5
   769                              <1>     ;Else, we need to find the first sector of the root directory
   770                              <1>     ;Get the start sector of data area in volume 
   771                              <1>     ; and sub the number of sectors in the root directory
   772 00001884 8B450A              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   773 00001887 0FB75D08            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   774 0000188B 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   775                              <1> .cd5:
   776 0000188D 894516              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   777                              <1> ;Exit epilogue
   778 00001890 488B1D(3CC10300)    <1>     mov rbx, qword [oldRSP]
   779 00001897 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   780                              <1>     %if DEBUG && DPBINFO
   781                              <1>     ;Print DPB 
   782                              <1>     debugEnterM
   783                              <1>     push rbp
   784                              <1>     lea rbp, .l0000
   785                              <1>     call debPrintNullString
   786                              <1>     pop rbp
   787                              <1>     call debDPBBPBptr
   788                              <1>     call debMakeDebuggerRespond
   789                              <1>     jmp short .l0001
   790                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   791                              <1> .l0001:
   792                              <1>     debugExitM
   793                              <1>     %endif
   794 00001899 C3                  <1>     ret
   795                              <1> getVerifySetting:  ;ah = 54h
   796 0000189A 8A05(10C10300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   797 000018A0 C3                  <1>     ret
   798                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   799 000018A1 C3                  <1>     ret
   800                              <1> getExtendedError:  ;ah = 59h
   801 000018A2 488B15(3CC10300)    <1>     mov rdx, qword [oldRSP]
   802 000018A9 668B05(E6C00300)    <1>     mov ax, word [errorExCde]
   803 000018B0 8A2D(E5C00300)      <1>     mov ch, byte [errorLocus]
   804 000018B6 8A3D(E9C00300)      <1>     mov bh, byte [errorClass]
   805 000018BC 8A1D(E8C00300)      <1>     mov bl, byte [errorAction]
   806 000018C2 668902              <1>     mov word [rdx + callerFrame.rax], ax
   807 000018C5 66895A08            <1>     mov word [rdx + callerFrame.rbx], bx
   808 000018C9 886A11              <1>     mov byte [rdx + callerFrame.rcx + 1], ch
   809 000018CC C3                  <1>     ret
   810                              <1> getCritErrorInfo:  ;ah = 5Dh
   811                              <1> networkServices:   ;ah = 5Eh, do nothing
   812                              <1> networkRedirection:;ah = 5Fh, do nothing
   813 000018CD C3                  <1>     ret
   814                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   815 000018CE 488B15(F2C00300)    <1>     mov rdx, qword [currentPSP]
   816 000018D5 48CF                <1>     iretq
   817                              <1>                     ;ah = 63h, reserved
   818                              <1> setDriverLookahead:;ah = 64h, reserved
   819 000018D7 48CF                <1>     iretq
   820                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   821                              <1> return:
   822 000018D9 C3                  <1>     ret
   823                              <1> 
   824                              <1> kernelDispatchTable:
   825 000018DA [B212000000000000]  <1>     dq simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   826 000018E2 [8108000000000000]  <1>     dq stdinReadEcho       ;AH = 01H, CHAR IO
   827 000018EA [F508000000000000]  <1>     dq stdoutWrite         ;AH = 02H, CHAR IO
   828 000018F2 [3609000000000000]  <1>     dq stdauxRead          ;AH = 03H, CHAR IO
   829 000018FA [3609000000000000]  <1>     dq stdauxWrite         ;AH = 04H, CHAR IO
   830 00001902 [3609000000000000]  <1>     dq stdprnWrite         ;AH = 05H, CHAR IO
   831 0000190A [3609000000000000]  <1>     dq directCONIO         ;AH = 06H, CHAR IO
   832 00001912 [3609000000000000]  <1>     dq waitDirectInNoEcho  ;AH = 07H, CHAR IO
   833 0000191A [7609000000000000]  <1>     dq waitStdinNoEcho     ;AH = 08H, CHAR IO
   834 00001922 [7709000000000000]  <1>     dq printString         ;AH = 09H, CHAR IO
   835 0000192A [C009000000000000]  <1>     dq buffStdinInput      ;AH = 0AH, CHAR IO
   836 00001932 [C009000000000000]  <1>     dq checkStdinStatus    ;AH = 0BH, CHAR IO
   837 0000193A [C009000000000000]  <1>     dq clearbuffDoFunc     ;AH = 0CH, CHAR IO
   838 00001942 [B312000000000000]  <1>     dq diskReset           ;AH = 0DH, DISK MANAGEMENT
   839 0000194A [4913000000000000]  <1>     dq selectDisk          ;AH = 0EH, DISK MANAGEMENT
   840 00001952 [C109000000000000]  <1>     dq openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   841 0000195A [C109000000000000]  <1>     dq closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   842 00001962 [C109000000000000]  <1>     dq findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   843 0000196A [C109000000000000]  <1>     dq findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   844 00001972 [C109000000000000]  <1>     dq deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   845 0000197A [C109000000000000]  <1>     dq sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   846 00001982 [C109000000000000]  <1>     dq sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   847 0000198A [C109000000000000]  <1>     dq createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   848 00001992 [C109000000000000]  <1>     dq renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   849 0000199A [D918000000000000]  <1>     dq return              ;AH = 18H, RESERVED
   850 000019A2 [9A13000000000000]  <1>     dq getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   851 000019AA [C209000000000000]  <1>     dq setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   852 000019B2 [A113000000000000]  <1>     dq FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   853 000019BA [A313000000000000]  <1>     dq FATinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   854 000019C2 [D918000000000000]  <1>     dq return              ;AH = 1DH, RESERVED
   855 000019CA [D918000000000000]  <1>     dq return              ;AH = 1EH, RESERVED
   856 000019D2 [6B14000000000000]  <1>     dq getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   857 000019DA [D918000000000000]  <1>     dq return              ;AH = 20H, RESERVED
   858 000019E2 [D509000000000000]  <1>     dq randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   859 000019EA [D509000000000000]  <1>     dq randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   860 000019F2 [D509000000000000]  <1>     dq getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   861 000019FA [D509000000000000]  <1>     dq setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   862 00001A02 [1914000000000000]  <1>     dq setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   863 00001A0A [4414000000000000]  <1>     dq createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   864 00001A12 [D509000000000000]  <1>     dq randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   865 00001A1A [D509000000000000]  <1>     dq randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   866 00001A22 [D509000000000000]  <1>     dq parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   867 00001A2A [C009000000000000]  <1>     dq getDate             ;AH = 2AH, TIME AND DATE
   868 00001A32 [C009000000000000]  <1>     dq setDate             ;AH = 2BH, TIME AND DATE
   869 00001A3A [C009000000000000]  <1>     dq getTime             ;AH = 2CH, TIME AND DATE
   870 00001A42 [C009000000000000]  <1>     dq setTime             ;AH = 2DH, TIME AND DATE
   871 00001A4A [4514000000000000]  <1>     dq setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   872 00001A52 [D609000000000000]  <1>     dq getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   873 00001A5A [5314000000000000]  <1>     dq getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   874 00001A62 [6A14000000000000]  <1>     dq terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   875 00001A6A [6D14000000000000]  <1>     dq getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   876 00001A72 [DF16000000000000]  <1>     dq ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   877 00001A7A [F116000000000000]  <1>     dq getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   878 00001A82 [0417000000000000]  <1>     dq getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   879 00001A8A [1B17000000000000]  <1>     dq getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   880 00001A92 [5310000000000000]  <1>     dq getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   881 00001A9A [5310000000000000]  <1>     dq getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   882 00001AA2 [5706000000000000]  <1>     dq makeDIR             ;AH = 39H, DIRECTORY OPERATION
   883 00001AAA [5706000000000000]  <1>     dq removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   884 00001AB2 [5706000000000000]  <1>     dq changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   885 00001ABA [E909000000000000]  <1>     dq createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   886 00001AC2 [EA09000000000000]  <1>     dq openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   887 00001ACA [EB09000000000000]  <1>     dq closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   888 00001AD2 [EC09000000000000]  <1>     dq readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   889 00001ADA [ED09000000000000]  <1>     dq writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   890 00001AE2 [EE09000000000000]  <1>     dq deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
   891 00001AEA [EE09000000000000]  <1>     dq movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
   892 00001AF2 [EE09000000000000]  <1>     dq changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
   893 00001AFA [EE09000000000000]  <1>     dq ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
   894 00001B02 [EE09000000000000]  <1>     dq duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
   895 00001B0A [EE09000000000000]  <1>     dq forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
   896 00001B12 [5706000000000000]  <1>     dq getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
   897 00001B1A [4C0A000000000000]  <1>     dq allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
   898 00001B22 [690C000000000000]  <1>     dq freeMemory          ;AH = 49H, MEMORY MANAGEMENT
   899 00001B2A [920D000000000000]  <1>     dq reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
   900 00001B32 [9117000000000000]  <1>     dq loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
   901 00001B3A [9117000000000000]  <1>     dq terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
   902 00001B42 [9117000000000000]  <1>     dq getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
   903 00001B4A [EE09000000000000]  <1>     dq findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
   904 00001B52 [EE09000000000000]  <1>     dq findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
   905 00001B5A [9217000000000000]  <1>     dq setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   906 00001B62 [9B17000000000000]  <1>     dq getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   907 00001B6A [A417000000000000]  <1>     dq getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   908 00001B72 [B717000000000000]  <1>     dq createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   909 00001B7A [9A18000000000000]  <1>     dq getVerifySetting    ;AH = 54H, DISK MANAGEMENT
   910 00001B82 [A118000000000000]  <1>     dq createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   911 00001B8A [EE09000000000000]  <1>     dq renameFile          ;AH = 56H, FILE OPERATION       HANDLE
   912 00001B92 [5706000000000000]  <1>     dq getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
   913 00001B9A [430F000000000000]  <1>     dq getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
   914 00001BA2 [A218000000000000]  <1>     dq getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
   915 00001BAA [EE09000000000000]  <1>     dq createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
   916 00001BB2 [EE09000000000000]  <1>     dq createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
   917 00001BBA [EE09000000000000]  <1>     dq lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
   918 00001BC2 [CD18000000000000]  <1>     dq getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   919 00001BCA [CD18000000000000]  <1>     dq networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
   920 00001BD2 [CD18000000000000]  <1>     dq networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
   921 00001BDA [5706000000000000]  <1>     dq trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   922 00001BE2 [D918000000000000]  <1>     dq return              ;AH = 61H, RESERVED
   923 00001BEA [CE18000000000000]  <1>     dq getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
   924 00001BF2 [D918000000000000]  <1>     dq return              ;AH = 63H, RESERVED
   925 00001BFA [D718000000000000]  <1>     dq setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   926 00001C02 [5310000000000000]  <1>     dq getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
   927 00001C0A [5310000000000000]  <1>     dq getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
   928 00001C12 [EE09000000000000]  <1>     dq setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
   929 00001C1A [EE09000000000000]  <1>     dq commitFile          ;AH = 68H, FILE OPERATION       HANDLE
   930 00001C22 [D918000000000000]  <1>     dq getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   931                              <1> kernelDispatchTableL  equ $ - kernelDispatchTable 
    27                                  %include "./Source/Misc/int44h.asm"
    28                              <1> critErrorHandler:   ;Int 44h
    29                              <1> ;User Stack in usage here, must be swapped to before this is called
    30                              <1> ;Entered with:  
    31                              <1> ;               AH = Critical Error Bitfield
    32                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    33                              <1> ;               Bit 6 - Reserved
    34                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    35                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    36                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    37                              <1> ;               Bits [2-1] = Affected Disk Error
    38                              <1> ;                     0 0   DOS area
    39                              <1> ;                     0 1   FAT area
    40                              <1> ;                     1 0   Directory area
    41                              <1> ;                     1 1   Data area
    42                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    43                              <1> ;               AL  = Failing drive number if AH[7] = 0
    44                              <1> ;               DIL = Error code for errorMsg
    45                              <1> ;               RSI = EA of Device Header for which device the error occured
    46                              <1> ;Return:
    47                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    48                              <1> ;                  = 1 - Retry the Operation    (Retry)
    49                              <1> ;                  = 2 - Terminate the Program  (Abort)
    50                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    51 00001C2A 53                  <1>     push rbx
    52 00001C2B 51                  <1>     push rcx
    53 00001C2C 52                  <1>     push rdx
    54 00001C2D 57                  <1>     push rdi
    55 00001C2E 56                  <1>     push rsi
    56 00001C2F FC                  <1>     cld         ;Make String ops go forward
    57                              <1> 
    58 00001C30 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    59 00001C33 488D155E020000      <1>     lea rdx, qword [.crlf]
    60 00001C3A B409                <1>     mov ah, 09h ;Print String
    61 00001C3C CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    62                              <1> 
    63 00001C3E 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    64 00001C44 B90C000000          <1>     mov ecx, 0Ch
    65 00001C49 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    66 00001C4B 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    67 00001C4E 480FB7FF            <1>     movzx rdi, di
    68 00001C52 4889FA              <1>     mov rdx, rdi    ;Copy error code
    69 00001C55 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    70 00001C59 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    71 00001C5C 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    72 00001C5F 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    73 00001C66 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    74 00001C6A B409                <1>     mov ah, 09h ;Print String
    75 00001C6C CD41                <1>     int 41h     ;Call DOS to print first part of message
    76                              <1> 
    77 00001C6E 488D1505020000      <1>     lea rdx, qword [.readmsg]
    78 00001C75 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    79 00001C7C F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    80 00001C7F 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    81 00001C83 B409                <1>     mov ah, 09h ;Print String
    82 00001C85 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    83                              <1> 
    84 00001C87 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    85 00001C8A 0F85DF000000        <1>     jnz .charError
    86                              <1> ;Disk error continues here
    87 00001C90 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    88 00001C97 B409                <1>     mov ah, 09h
    89 00001C99 CD41                <1>     int 41h
    90 00001C9B 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    91 00001C9D 80C241              <1>     add dl, "A" ;Add ASCII code
    92 00001CA0 B402                <1>     mov ah, 02h ;Print char in dl
    93 00001CA2 CD41                <1>     int 41h
    94                              <1> .userInput:
    95 00001CA4 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
    96 00001CAB B409                <1>     mov ah, 09h
    97 00001CAD CD41                <1>     int 41h
    98                              <1> ;Abort, Retry, Ignore, Fail is word order
    99                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   100                              <1> .userAbort:
   101                              <1> ;Abort is always an option
   102 00001CAF 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   103 00001CB6 B409                <1>     mov ah, 09h
   104 00001CB8 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   105                              <1> .userRetry:
   106 00001CBA F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   107 00001CBD 7416                <1>     jz .userIgnore    ;If clear, dont print message
   108 00001CBF 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   109 00001CC6 B409                <1>     mov ah, 09h
   110 00001CC8 CD41                <1>     int 41h
   111 00001CCA 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   112 00001CD1 B409                <1>     mov ah, 09h
   113 00001CD3 CD41                <1>     int 41h
   114                              <1> .userIgnore:
   115 00001CD5 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   116 00001CD8 7416                <1>     jz .userFail
   117 00001CDA 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   118 00001CE1 B409                <1>     mov ah, 09h
   119 00001CE3 CD41                <1>     int 41h
   120 00001CE5 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   121 00001CEC B409                <1>     mov ah, 09h
   122 00001CEE CD41                <1>     int 41h
   123                              <1> .userFail:
   124 00001CF0 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   125 00001CF3 7416                <1>     jz .userMsgEnd
   126 00001CF5 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   127 00001CFC B409                <1>     mov ah, 09h
   128 00001CFE CD41                <1>     int 41h
   129 00001D00 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   130 00001D07 B409                <1>     mov ah, 09h
   131 00001D09 CD41                <1>     int 41h
   132                              <1> .userMsgEnd:
   133 00001D0B 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   134 00001D12 B409                <1>     mov ah, 09h
   135 00001D14 CD41                <1>     int 41h
   136                              <1> ;Get user input now 
   137 00001D16 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   138 00001D18 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   139 00001D1F B401                <1>     mov ah, 01h ;STDIN without Console Echo
   140 00001D21 CD41                <1>     int 41h ;Get char in al
   141 00001D23 3C61                <1>     cmp al, "a" ;Chack if lowercase
   142 00001D25 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   143 00001D27 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   144                              <1> .uip1:
   145 00001D29 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   146 00001D2A 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   147 00001D2C FFC1                <1>     inc ecx
   148 00001D2E 81F904000000        <1>     cmp ecx, 4
   149 00001D34 75F3                <1>     jne .uip1
   150 00001D36 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   151                              <1> .validInput:
   152 00001D3B 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   153                              <1> ;Now check if the input is permitted
   154 00001D3D 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   155 00001D3F 7427                <1>     je .cehExit
   156 00001D41 84C0                <1>     test al, al ;Check if 0 => Ignore
   157 00001D43 740F                <1>     je .viIgnore
   158 00001D45 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   159 00001D47 7416                <1>     je .viRetry
   160                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   161 00001D49 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   162 00001D4C 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   163 00001D52 EB14                <1>     jmp short .cehExit
   164                              <1> .viIgnore:
   165 00001D54 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   166 00001D57 0F8447FFFFFF        <1>     jz .userInput
   167 00001D5D EB09                <1>     jmp short .cehExit
   168                              <1> .viRetry:
   169 00001D5F F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   170 00001D62 0F843CFFFFFF        <1>     jz .userInput
   171                              <1> .cehExit:
   172 00001D68 5E                  <1>     pop rsi
   173 00001D69 5F                  <1>     pop rdi
   174 00001D6A 5A                  <1>     pop rdx
   175 00001D6B 59                  <1>     pop rcx
   176 00001D6C 5B                  <1>     pop rbx
   177 00001D6D 48CF                <1>     iretq
   178                              <1> .charError:
   179 00001D6F B908000000          <1>     mov ecx, 8  ;8 chars in device name
   180 00001D74 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   181                              <1> .ce1:
   182 00001D7B AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   183 00001D7C 88C2                <1>     mov dl, al  ;Move char into dl
   184 00001D7E B402                <1>     mov ah, 02h
   185 00001D80 CD41                <1>     int 41h ;Print char
   186 00001D82 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   187 00001D84 E91BFFFFFF          <1>     jmp .userInput
   188                              <1> 
   189                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   190 00001D89 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   190 00001D92 746563742024202020  <1>
   191 00001D9B 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   191 00001DA4 6E6974202420202020  <1>
   192 00001DAD 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   192 00001DB6 202420202020202020  <1>
   193 00001DBF 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   193 00001DC8 6F6D6D616E64202420  <1>
   194 00001DD1 446174612024202020- <1>             db "Data $            "       ;Error 4
   194 00001DDA 202020202020202020  <1>
   195 00001DE3 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   195 00001DEC 737420242020202020  <1>
   196 00001DF5 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   196 00001DFE 202020202020202020  <1>
   197 00001E07 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   197 00001E10 656469612024202020  <1>
   198 00001E19 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   198 00001E22 7420466F756E642024  <1>
   199 00001E2B 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   199 00001E34 706572202420202020  <1>
   200 00001E3D 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   200 00001E46 6C7420242020202020  <1>
   201 00001E4F 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   201 00001E58 742024202020202020  <1>
   202 00001E61 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   202 00001E6A 61696C757265202420  <1>
   203                              <1> 
   204 00001E73 64726976652024      <1> .drive      db "drive $"
   205 00001E7A 6572726F7220726561- <1> .readmsg    db "error reading $"
   205 00001E83 64696E672024        <1>
   206 00001E89 6572726F7220777269- <1> .writemsg   db "error writing $"
   206 00001E92 74696E672024        <1>
   207 00001E98 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   208 00001E9B 41626F727424        <1> .abortmsg   db "Abort$" 
   209 00001EA1 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   210 00001EA8 526574727924        <1> .retrymsg   db "Retry$"
   211 00001EAE 4661696C24          <1> .failmsg    db "Fail$"
   212 00001EB3 2C2024              <1> .betweenMsg db ", $"
   213 00001EB6 3F2024              <1> .endMsg     db "? $"
   214 00001EB9 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    28                                  %include "./Source/Drivers/drvData.asm"
    29                              <1> ;-----------------------------------:
    30                              <1> ;          Driver routines          :
    31                              <1> ;-----------------------------------:
    32                              <1> drivers:
    33                              <1> conHdr:
    34 00001EBD [DF1E000000000000]  <1>     dq auxHdr
    35 00001EC5 1308                <1>     dw 0813h
    36 00001EC7 [5D20000000000000]  <1>     dq commonStrat
    37 00001ECF [6C20000000000000]  <1>     dq conDriver
    38 00001ED7 434F4E2020202020    <1>     db "CON     "
    39                              <1> auxHdr:
    40 00001EDF [011F000000000000]  <1>     dq prnHdr
    41 00001EE7 0080                <1>     dw 08000h
    42 00001EE9 [5D20000000000000]  <1>     dq commonStrat
    43 00001EF1 [3123000000000000]  <1>     dq com1Intr
    44 00001EF9 4155582020202020    <1>     db "AUX     "
    45                              <1> prnHdr:
    46 00001F01 [231F000000000000]  <1>     dq clkHdr
    47 00001F09 40A0                <1>     dw 0A040h
    48 00001F0B [6520000000000000]  <1>     dq nulStrat
    49 00001F13 [6B20000000000000]  <1>     dq nulIntr
    50 00001F1B 50524E2020202020    <1>     db "PRN     "
    51                              <1> clkHdr:
    52 00001F23 [451F000000000000]  <1>     dq msdHdr
    53 00001F2B 0880                <1>     dw 08008h
    54 00001F2D [5D20000000000000]  <1>     dq commonStrat
    55 00001F35 [A421000000000000]  <1>     dq clkDriver
    56 00001F3D 434C4F434B242020    <1>     db "CLOCK$  "
    57                              <1> msdHdr:
    58 00001F45 [671F000000000000]  <1>     dq com1Hdr
    59 00001F4D 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    60 00001F4F [5D20000000000000]  <1>     dq commonStrat
    61 00001F57 [D624000000000000]  <1>     dq msdDriver
    62 00001F5F 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    63                              <1> com1Hdr:
    64 00001F67 [891F000000000000]  <1>     dq com2Hdr
    65 00001F6F 0080                <1>     dw 08000h
    66 00001F71 [5D20000000000000]  <1>     dq commonStrat
    67 00001F79 [3123000000000000]  <1>     dq com1Intr
    68 00001F81 434F4D3120202020    <1>     db "COM1    "
    69                              <1> com2Hdr:
    70 00001F89 [AB1F000000000000]  <1>     dq com3Hdr
    71 00001F91 0080                <1>     dw 08000h
    72 00001F93 [5D20000000000000]  <1>     dq commonStrat
    73 00001F9B [3A23000000000000]  <1>     dq com2Intr
    74 00001FA3 434F4D3220202020    <1>     db "COM2    "
    75                              <1> com3Hdr:
    76 00001FAB [CD1F000000000000]  <1>     dq com4Hdr
    77 00001FB3 0080                <1>     dw 08000h
    78 00001FB5 [5D20000000000000]  <1>     dq commonStrat
    79 00001FBD [4323000000000000]  <1>     dq com3Intr
    80 00001FC5 434F4D3320202020    <1>     db "COM3    "
    81                              <1> com4Hdr:
    82 00001FCD [EF1F000000000000]  <1>     dq lpt1Hdr
    83 00001FD5 0080                <1>     dw 08000h
    84 00001FD7 [5D20000000000000]  <1>     dq commonStrat
    85 00001FDF [4C23000000000000]  <1>     dq com4Intr
    86 00001FE7 434F4D3420202020    <1>     db "COM4    "
    87                              <1> lpt1Hdr:
    88 00001FEF [1120000000000000]  <1>     dq lpt2Hdr
    89 00001FF7 40A0                <1>     dw 0A040h
    90 00001FF9 [6520000000000000]  <1>     dq nulStrat
    91 00002001 [6B20000000000000]  <1>     dq nulIntr
    92 00002009 4C50543120202020    <1>     db "LPT1    "
    93                              <1> lpt2Hdr:
    94 00002011 [3320000000000000]  <1>     dq lpt3Hdr
    95 00002019 40A0                <1>     dw 0A040h
    96 0000201B [6520000000000000]  <1>     dq nulStrat
    97 00002023 [6B20000000000000]  <1>     dq nulIntr
    98 0000202B 4C50543220202020    <1>     db "LPT2    "
    99                              <1> lpt3Hdr:
   100 00002033 FFFFFFFFFFFFFFFF    <1>     dq -1
   101 0000203B 40A0                <1>     dw 0A040h
   102 0000203D [6520000000000000]  <1>     dq nulStrat
   103 00002045 [6B20000000000000]  <1>     dq nulIntr
   104 0000204D 4C50543320202020    <1>     dq "LPT3    "
   105 00002055 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    29                                  %include "./Source/Drivers/charDrv.asm"
    30                              <1> commonStrat:
    31                              <1> ;DOS calls this function with rbx=Ptr to request header
    32 0000205D 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    33 00002064 C3                  <1>     ret
    34                              <1> nulStrat:
    35 00002065 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    36                              <1> nulIntr:
    37 0000206B C3                  <1>     ret
    38                              <1> conDriver:
    39 0000206C 50                  <1>     push rax
    40 0000206D 53                  <1>     push rbx
    41 0000206E 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    42 00002075 B003                <1>     mov al, 03h ;Unknown Command
    43 00002077 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    44 0000207B 7735                <1>     ja .conWriteErrorCode ;If yes, error!
    45                              <1> 
    46 0000207D 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    47 00002080 3C04                <1>     cmp al, 4
    48 00002082 743D                <1>     jz .conRead
    49 00002084 3C05                <1>     cmp al, 5
    50 00002086 747F                <1>     jz .conNondestructiveRead
    51 00002088 3C06                <1>     cmp al, 6
    52 0000208A 0F84A8000000        <1>     jz .conInputStatus
    53 00002090 3C07                <1>     cmp al, 7
    54 00002092 0F84B0000000        <1>     jz .conFlushInputBuffers
    55 00002098 3C08                <1>     cmp al, 8
    56 0000209A 0F84CA000000        <1>     jz .conWrite
    57 000020A0 3C09                <1>     cmp al, 9
    58 000020A2 0F84C2000000        <1>     jz .conWrite
    59 000020A8 3C0A                <1>     cmp al, 0Ah
    60 000020AA 0F84E3000000        <1>     jz .conOutputStatus
    61 000020B0 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    62                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    63 000020B2 B480                <1>     mov ah, 80h ;Set error bit
    64 000020B4 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    65                              <1> .conExit:
    66 000020B8 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    67 000020BE 5B                  <1>     pop rbx
    68 000020BF 58                  <1>     pop rax
    69 000020C0 C3                  <1>     ret
    70                              <1> .conRead:    ;Function 4
    71 000020C1 B005                <1>     mov al, 05h ;Bad request structure length?
    72 000020C3 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    73 000020C6 75EA                <1>     jne .conWriteErrorCode
    74                              <1> 
    75 000020C8 57                  <1>     push rdi
    76 000020C9 51                  <1>     push rcx
    77 000020CA 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    78 000020CE 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    79                              <1> .cre1:
    80 000020D0 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    81 000020D3 741C                <1>     je .cre2
    82 000020D5 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    83 000020DC 751A                <1>     jnz .cre3   ;No, get the buffer value
    84 000020DE 31C0                <1>     xor eax, eax
    85 000020E0 CD36                <1>     int 36h
    86                              <1> .cre11:
    87 000020E2 AA                  <1>     stosb
    88 000020E3 84C0                <1>     test al, al ;Was the ascii code 0?
    89 000020E5 7506                <1>     jnz .cre12  ;No, skip storing scancode
    90 000020E7 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    91                              <1> .cre12:
    92 000020ED FFC1                <1>     inc ecx ;Inc chars stored in buffer
    93 000020EF EBDF                <1>     jmp short .cre1
    94                              <1> .cre2:
    95 000020F1 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    96 000020F4 59                  <1>     pop rcx
    97 000020F5 5F                  <1>     pop rdi
    98 000020F6 EBC0                <1>     jmp short .conExit
    99                              <1> .cre3:
   100 000020F8 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   101 000020FE C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   102 00002105 EBDB                <1>     jmp short .cre11
   103                              <1> 
   104                              <1> .conNondestructiveRead:  ;Function 5
   105 00002107 B005                <1>     mov al, 05h ;Bad request structure length?
   106 00002109 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   107 0000210C 75A4                <1>     jne .conWriteErrorCode
   108 0000210E 803D8E00000000      <1>     cmp byte [.conBuf], 0
   109 00002115 7519                <1>     jnz .cnr2
   110 00002117 B401                <1>     mov ah, 01h     ;Get key if exists
   111 00002119 CD36                <1>     int 36h
   112 0000211B 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   113                              <1>     ;Keystroke available
   114                              <1> .cnr0:
   115 0000211D 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   116 00002120 E993FFFFFF          <1>     jmp .conExit
   117                              <1> .cnr1: ;No keystroke available
   118 00002125 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   119 0000212B E988FFFFFF          <1>     jmp .conExit
   120                              <1> .cnr2:
   121 00002130 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   122 00002136 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   123                              <1> 
   124                              <1> .conInputStatus:         ;Function 6
   125 00002138 B005                <1>     mov al, 05h ;Bad request structure length?
   126 0000213A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   127 0000213D 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   128 00002143 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   129                              <1> 
   130                              <1> .conFlushInputBuffers:   ;Function 7
   131 00002148 B005                <1>     mov al, 05h ;Bad request structure length?
   132 0000214A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   133 0000214D 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   134 00002153 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   135                              <1> .cfib0:
   136 0000215A B401                <1>     mov ah, 01      ;Get buffer status
   137 0000215C CD36                <1>     int 36h
   138 0000215E 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   139 00002164 30E4                <1>     xor ah, ah
   140 00002166 CD36                <1>     int 36h ;Read key to flush from buffer
   141 00002168 EBF0                <1>     jmp short .cfib0
   142                              <1> 
   143                              <1> .conWrite:   ;Function 8 and 9
   144 0000216A B005                <1>     mov al, 05h ;Bad request structure length?
   145 0000216C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   146 0000216F 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   147                              <1> 
   148 00002175 56                  <1>     push rsi
   149 00002176 51                  <1>     push rcx
   150 00002177 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   151 0000217B 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   152                              <1> .cw1: 
   153 0000217D 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   154 00002180 7407                <1>     je .cw2
   155 00002182 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   156 00002183 CD49                <1>     int 49h ;Fast print char
   157 00002185 FFC1                <1>     inc ecx
   158 00002187 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   159                              <1> .cw2:
   160 00002189 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   161 0000218C 59                  <1>     pop rcx
   162 0000218D 5E                  <1>     pop rsi
   163 0000218E E925FFFFFF          <1>     jmp .conExit
   164                              <1> .conOutputStatus:   ;Function 0Ah
   165 00002193 B005                <1>     mov al, 05h ;Bad request structure length?
   166 00002195 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   167 00002198 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   168 0000219E E915FFFFFF          <1>     jmp .conExit
   169                              <1> 
   170 000021A3 00                  <1> .conBuf db 0    ;Single byte buffer
   171                              <1> clkDriver:
   172 000021A4 50                  <1>     push rax
   173 000021A5 53                  <1>     push rbx
   174 000021A6 51                  <1>     push rcx
   175 000021A7 52                  <1>     push rdx
   176 000021A8 56                  <1>     push rsi
   177 000021A9 55                  <1>     push rbp
   178 000021AA 488B1DA4FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   179 000021B1 B003                <1>     mov al, 03h ;Unknown Command
   180 000021B3 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   181 000021B7 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   182                              <1> 
   183 000021B9 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   184 000021BC 3C04                <1>     cmp al, 04h
   185 000021BE 7437                <1>     jz .clkRead
   186 000021C0 3C06                <1>     cmp al, 06h
   187 000021C2 0F8494000000        <1>     jz .clkInputStatus
   188 000021C8 3C07                <1>     cmp al, 07h
   189 000021CA 0F8498000000        <1>     jz .clkFlushInputBuffers
   190 000021D0 3C08                <1>     cmp al, 08h
   191 000021D2 0F84A0000000        <1>     jz .clkWrite
   192 000021D8 3C09                <1>     cmp al, 09h
   193 000021DA 0F8498000000        <1>     jz .clkWrite
   194 000021E0 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   195                              <1> .clkNotFunctioning:
   196 000021E2 B002                <1>     mov al, 02h ;Device not ready error
   197                              <1> .clkWriteErrorCode:
   198 000021E4 B480                <1>     mov ah, 80h ;Set error bit
   199 000021E6 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   200                              <1> .clkExit:
   201 000021EA 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   202 000021F0 5D                  <1>     pop rbp
   203 000021F1 5E                  <1>     pop rsi
   204 000021F2 5A                  <1>     pop rdx
   205 000021F3 59                  <1>     pop rcx
   206 000021F4 5B                  <1>     pop rbx
   207 000021F5 58                  <1>     pop rax
   208 000021F6 C3                  <1>     ret
   209                              <1> 
   210                              <1> .clkRead:           ;Function 4
   211 000021F7 B005                <1>     mov al, 05h ;Bad request structure length?
   212 000021F9 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   213 000021FC 75E6                <1>     jne .clkWriteErrorCode
   214                              <1> 
   215 000021FE 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   216 00002201 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   217 00002205 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   218 0000220C 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   219 00002210 30E4                <1>     xor ah, ah
   220 00002212 CD3A                <1>     int 3Ah         ;Read the system timer
   221 00002214 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   222 00002216 740D                <1>     jz .clkr1       ;Nope, now just time 
   223 00002218 30E4                <1>     xor ah, ah
   224                              <1>     ;This works as al should keep count of the # of days passed since last read
   225 0000221A 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   226 0000221E 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   227                              <1> .clkr1:
   228 00002225 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   229 00002228 0FB7D2              <1>     movzx edx, dx
   230 0000222B 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   231 0000222D 89D0                <1>     mov eax, edx
   232 0000222F 31D2                <1>     xor edx, edx
   233 00002231 89D8                <1>     mov eax, ebx
   234 00002233 B944040000          <1>     mov ecx, 1092   
   235 00002238 F7F1                <1>     div ecx
   236 0000223A 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   237 0000223D 89D0                <1>     mov eax, edx    ;Get remainder in eax
   238 0000223F 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   239 00002243 31D2                <1>     xor edx, edx
   240 00002245 B95B000000          <1>     mov ecx, 91 ;5*18.2
   241 0000224A F7F1                <1>     div ecx
   242 0000224C 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   243 0000224F 89D0                <1>     mov eax, edx    ;Get remainder in eax
   244                              <1>     ;lea eax, dword [eax + 4*eax]
   245                              <1>     ;add eax, edx    ;Essentially multiply by 6
   246 00002251 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   247 00002254 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   248 00002257 E98EFFFFFF          <1>     jmp .clkExit
   249                              <1> 
   250                              <1> .clkInputStatus:    ;Function 6
   251                              <1> ;Always return ready
   252 0000225C B005                <1>     mov al, 05h ;Bad request structure length?
   253 0000225E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   254 00002261 7581                <1>     jne .clkWriteErrorCode
   255 00002263 E982FFFFFF          <1>     jmp .clkExit
   256                              <1> .clkFlushInputBuffers:  ;Function 7
   257                              <1> ;Always return done immediately
   258 00002268 B005                <1>     mov al, 05h ;Bad request structure length?
   259 0000226A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   260 0000226D 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   261 00002273 E972FFFFFF          <1>     jmp .clkExit
   262                              <1> 
   263                              <1> .clkWrite:          ;Functions 8 and 9
   264 00002278 B005                <1>     mov al, 05h ;Bad request structure length?
   265 0000227A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   266 0000227D 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   267                              <1> 
   268 00002283 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   269 00002286 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   270 0000228A 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   271 0000228E 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   272                              <1> 
   273 00002295 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   274 00002297 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   275 0000229B B105                <1>     mov cl, 5
   276 0000229D F6F1                <1>     div cl          ;Divide al by 5
   277 0000229F 30E4                <1>     xor ah, ah      ;Remove the remainder
   278 000022A1 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   279                              <1> ;Using the decimal part of this formula for the low count
   280                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   281 000022A3 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   282 000022A6 B912000000          <1>     mov ecx, 18
   283 000022AB F7E1                <1>     mul ecx  
   284 000022AD 01C3                <1>     add ebx, eax
   285                              <1> 
   286 000022AF 31D2                <1>     xor edx, edx
   287 000022B1 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   288 000022B5 B944040000          <1>     mov ecx, 1092
   289 000022BA F7E1                <1>     mul ecx
   290 000022BC 01C3                <1>     add ebx, eax
   291 000022BE 89DA                <1>     mov edx, ebx    ;edx now has low count
   292 000022C0 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   293 000022C4 B401                <1>     mov ah, 01h     ;Set the system time
   294 000022C6 CD3A                <1>     int 3Ah
   295                              <1> 
   296 000022C8 4889F3              <1>     mov rbx, rsi
   297 000022CB E91AFFFFFF          <1>     jmp .clkExit
   298                              <1> 
   299                              <1> .clkBCDtoHex:
   300                              <1> ;Converts a BCD value to a Hex byte
   301                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   302 000022D0 51                  <1>     push rcx
   303 000022D1 0FB6C0              <1>     movzx eax, al   ;Zero extend
   304 000022D4 89C1                <1>     mov ecx, eax    ;Save al in ecx
   305 000022D6 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   306 000022DB 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   307 000022E1 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   308                              <1> .cbth0:
   309 000022E4 050A000000          <1>     add eax, 10
   310 000022E9 E2F9                <1>     loop .cbth0
   311 000022EB 59                  <1>     pop rcx
   312 000022EC C3                  <1>     ret
   313                              <1> 
   314                              <1> .clkHexToBCD:
   315                              <1> ;Converts a Hex byte into two BCD digits
   316                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   317 000022ED 51                  <1>     push rcx
   318 000022EE 0FB6C0              <1>     movzx eax, al   ;Zero extend
   319 000022F1 31C9                <1>     xor ecx, ecx
   320                              <1> .chtb0:
   321 000022F3 3D0A000000          <1>     cmp eax, 10
   322 000022F8 7209                <1>     jb .chtb1
   323 000022FA 2D0A000000          <1>     sub eax, 10
   324 000022FF FFC1                <1>     inc ecx
   325 00002301 EBF0                <1>     jmp short .chtb0
   326                              <1> .chtb1:
   327 00002303 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   328 00002306 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   329 00002308 59                  <1>     pop rcx
   330 00002309 C3                  <1>     ret
   331 0000230A 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   332                              <1> ;When counting the number of days, first compute the number of years since
   333                              <1> ; 1980 and your year. 
   334                              <1> ;Then, using the table below, find the number of leap years between 1980
   335                              <1> ; and (YourYear - 1). 
   336                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   337                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   338                              <1> ;Use the months table to get the number of days in a normal month as leap 
   339                              <1> ; years are added using the previous comment.
   340                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   341                              <1> ; a leap year using the table. If it is, add an extra day.
   342                              <1> .clkLeapYears:
   343 0000230C 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   343 00002315 24282C30            <1>
   344 00002319 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   344 00002322 585C60              <1>
   345                              <1> .clkMonths:
   346 00002325 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   346 0000232E 1F1E1F              <1>
   347                              <1> ;COM Driver headers and main interrupt strat
   348                              <1> com1Intr:
   349 00002331 C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   350 00002338 EB19                <1>     jmp short comIntr
   351                              <1> com2Intr:
   352 0000233A C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   353 00002341 EB10                <1>     jmp short comIntr
   354                              <1> com3Intr:
   355 00002343 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   356 0000234A EB07                <1>     jmp short comIntr
   357                              <1> com4Intr:
   358 0000234C C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   359                              <1> comIntr:
   360 00002353 50                  <1>     push rax
   361 00002354 53                  <1>     push rbx
   362 00002355 51                  <1>     push rcx
   363 00002356 52                  <1>     push rdx
   364 00002357 56                  <1>     push rsi
   365 00002358 57                  <1>     push rdi
   366 00002359 488B1DF5FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   367 00002360 B003                <1>     mov al, 03h ;Unknown Command
   368 00002362 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   369 00002366 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   370                              <1> 
   371 00002368 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   372 0000236B 3C04                <1>     cmp al, 4   ;Read Character(s)
   373 0000236D 7462                <1>     jz .comRead
   374 0000236F 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   375 00002371 0F849B000000        <1>     jz .comNondestructiveRead   
   376 00002377 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   377 00002379 0F8484000000        <1>     jz .comReadInputStatus
   378 0000237F 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   379 00002381 0F84B9000000        <1>     jz .comFlushInputBuffers
   380 00002387 3C08                <1>     cmp al, 8
   381 00002389 0F84DB000000        <1>     jz .comWrite
   382 0000238F 3C09                <1>     cmp al, 9
   383 00002391 0F84D3000000        <1>     jz .comWrite
   384 00002397 3C0A                <1>     cmp al, 0Ah
   385 00002399 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   386 0000239F EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   387                              <1> .comErrorNoCount:
   388 000023A1 B002                <1>     mov al, 02h ;Unknown device
   389 000023A3 EB19                <1>     jmp short .comWriteErrorCode
   390                              <1> .comReadError:
   391 000023A5 BA0B000000          <1>     mov edx, 0Bh
   392                              <1> .comWriteError:
   393 000023AA BA0A000000          <1>     mov edx, 0Ah
   394                              <1> .comError:
   395 000023AF 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   396 000023B2 B902000000          <1>     mov ecx, 02h    ;Unknown device
   397 000023B7 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   398 000023B9 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   399 000023BC 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   400                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   401 000023BE B480                <1>     mov ah, 80h ;Set error bit
   402 000023C0 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   403                              <1> .comExit:
   404 000023C4 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   405 000023CA 5F                  <1>     pop rdi
   406 000023CB 5E                  <1>     pop rsi
   407 000023CC 5A                  <1>     pop rdx
   408 000023CD 59                  <1>     pop rcx
   409 000023CE 5B                  <1>     pop rbx
   410 000023CF 58                  <1>     pop rax
   411 000023D0 C3                  <1>     ret
   412                              <1> 
   413                              <1> .comRead:
   414 000023D1 B005                <1>     mov al, 05h ;Bad request structure length?
   415 000023D3 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   416 000023D6 75E6                <1>     jne .comWriteErrorCode
   417                              <1> 
   418 000023D8 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   419 000023DC 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   420                              <1> .cr1:
   421 000023DE 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   422 000023E1 741B                <1>     je .cre2
   423                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   424 000023E3 B802000000          <1>     mov eax, 02h    ;Recieve 
   425 000023E8 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   426 000023EE 6698                <1>     cbw     ;Zero extend to upper byte
   427 000023F0 CD34                <1>     int 34h ;Recieve Char
   428 000023F2 72BB                <1>     jc .comError
   429 000023F4 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   430 000023F7 74EA                <1>     je .cr11
   431 000023F9 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   432 000023FA FFC1                <1>     inc ecx
   433 000023FC EBE0                <1>     jmp short .cr1
   434                              <1> .cre2:
   435 000023FE 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   436 00002401 EBC1                <1>     jmp short .comExit
   437                              <1> 
   438                              <1> .comReadInputStatus:
   439 00002403 B005                <1>     mov al, 05h ;Bad request structure length?
   440 00002405 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   441 00002408 75B4                <1>     jne .comWriteErrorCode
   442 0000240A 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   443 00002410 EBB2                <1>     jmp short .comExit
   444                              <1> 
   445                              <1> .comNondestructiveRead:
   446                              <1> ;Acts like a "read one character if there is one" function
   447 00002412 B005                <1>     mov al, 05h ;Bad request structure length?
   448 00002414 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   449 00002417 75A5                <1>     jne .comWriteErrorCode
   450                              <1> .cndr1:
   451 00002419 B802000000          <1>     mov eax, 02h    ;Recieve 
   452 0000241E 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   453 00002424 6698                <1>     cbw     ;Zero extend to upper byte
   454 00002426 CD34                <1>     int 34h ;Recieve Char
   455 00002428 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   456 0000242E 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   457 00002431 7405                <1>     je .cndr2
   458 00002433 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   459 00002436 EB8C                <1>     jmp short .comExit
   460                              <1> .cndr2:
   461 00002438 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   462 0000243E EB84                <1>     jmp short .comExit
   463                              <1> 
   464                              <1> .comFlushInputBuffers:
   465 00002440 B005                <1>     mov al, 05h ;Bad request structure length?
   466 00002442 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   467 00002445 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   468                              <1> .cfib0:
   469 0000244B 8A1584000000        <1>     mov dl, byte [.comDevice]
   470 00002451 6698                <1>     cbw
   471 00002453 B802000000          <1>     mov eax, 02h    ;Recieve
   472 00002458 CD34                <1>     int 34h
   473 0000245A 0F8241FFFFFF        <1>     jc .comErrorNoCount
   474 00002460 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   475 00002463 75E6                <1>     jne .cfib0
   476 00002465 E95AFFFFFF          <1>     jmp .comExit
   477                              <1> 
   478                              <1> .comWrite:
   479 0000246A B005                <1>     mov al, 05h ;Bad request structure length?
   480 0000246C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   481 0000246F 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   482                              <1> 
   483 00002475 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   484 00002479 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   485                              <1> .cw1: 
   486 0000247B 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   487 0000247E 7417                <1>     je .cw2
   488 00002480 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   489 00002481 B401                <1>     mov ah, 01h ;Move function number into ah
   490 00002483 8A154C000000        <1>     mov dl, byte [.comDevice]
   491 00002489 6698                <1>     cbw     ;Zero extend to upper byte
   492 0000248B CD34                <1>     int 34h ;Transmit char
   493 0000248D 0F821CFFFFFF        <1>     jc .comError
   494 00002493 FFC1                <1>     inc ecx
   495 00002495 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   496                              <1> .cw2:
   497 00002497 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   498 0000249A E925FFFFFF          <1>     jmp .comExit
   499                              <1> 
   500                              <1> .comOutputStatus:
   501                              <1> ;Read MODEM status
   502 0000249F B005                <1>     mov al, 05h ;Bad request structure length?
   503 000024A1 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   504 000024A4 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   505                              <1> 
   506 000024AA 8A1525000000        <1>     mov dl, byte [.comDevice]
   507 000024B0 6698                <1>     cbw     ;Zero extend to upper byte
   508 000024B2 B403                <1>     mov ah, 03h     ;Get status
   509 000024B4 CD34                <1>     int 34h
   510 000024B6 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   511 000024BC 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   512 000024C1 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   513 000024C4 F7D0                <1>     not eax      ;Bitwise inversion
   514 000024C6 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   515 000024CB 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   516 000024D0 E9EFFEFFFF          <1>     jmp .comExit
   517 000024D5 00                  <1> .comDevice   db 0
    30                                  %include "./Source/Drivers/diskDrv.asm"
    31                              <1> msdDriver:
    32 000024D6 50                  <1>     push rax
    33 000024D7 53                  <1>     push rbx
    34 000024D8 51                  <1>     push rcx
    35 000024D9 52                  <1>     push rdx
    36 000024DA 56                  <1>     push rsi
    37 000024DB 57                  <1>     push rdi
    38 000024DC 55                  <1>     push rbp
    39 000024DD 4150                <1>     push r8
    40 000024DF 488B1D6FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    41 000024E6 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    42 000024EA B003                <1>     mov al, drvBadCmd
    43 000024EC 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    44 000024F2 B001                <1>     mov al, drvBadUnit 
    45 000024F4 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    46 000024F8 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    47 000024FE 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    48 00002505 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    49 00002509 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    50 0000250C 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    51 00002510 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    52 00002514 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    53 00002516 488D0D9A000000      <1>     lea rcx, .msdTable
    54 0000251D 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    55 00002521 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    56 00002523 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    57 00002525 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    58 00002528 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    59                              <1> .msdDriverExit:
    60 0000252A 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    61 00002530 4158                <1>     pop r8
    62 00002532 5D                  <1>     pop rbp
    63 00002533 5F                  <1>     pop rdi
    64 00002534 5E                  <1>     pop rsi
    65 00002535 5A                  <1>     pop rdx
    66 00002536 59                  <1>     pop rcx
    67 00002537 5B                  <1>     pop rbx
    68 00002538 58                  <1>     pop rax
    69 00002539 C3                  <1>     ret
    70                              <1> 
    71                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    72 0000253A 4889FB              <1>     mov rbx, rdi
    73 0000253D 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    74 00002540 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    75 00002542 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    76                              <1> ;Now fall through to general error
    77                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    78 00002545 B401                <1>     mov ah, 01h
    79 00002547 CD33                <1>     int 33h ;Read status of last operation
    80 00002549 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    81 0000254C B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    82 0000254E 7460                <1>     je .msdWriteErrorCode 
    83 00002550 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    84 00002552 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    85 00002555 7459                <1>     je .msdWriteErrorCode 
    86 00002557 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    87 0000255A 7454                <1>     je .msdWriteErrorCode
    88                              <1> ;Device Not Ready
    89 0000255C B002                <1>     mov al, 02h  ;Device not ready code
    90 0000255E 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    91 00002561 744D                <1>     je .msdWriteErrorCode
    92 00002563 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    93 00002567 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    94                              <1> ;Write Protected
    95 0000256B 30C0                <1>     xor al, al
    96 0000256D 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
    97 00002572 743C                <1>     je .msdWriteErrorCode
    98                              <1> ;CRC Error
    99 00002574 B004                <1>     mov al, 04h     ;CRC error code
   100 00002576 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   101 0000257B 7433                <1>     je .msdWriteErrorCode
   102 0000257D 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   103 00002582 742C                <1>     je .msdWriteErrorCode
   104 00002584 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   105 00002589 7425                <1>     je .msdWriteErrorCode
   106                              <1> ;Seek Error
   107 0000258B B006                <1>     mov al, 06h     ;Seek error code
   108 0000258D 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   109 00002590 741E                <1>     je .msdWriteErrorCode
   110                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   111                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   112 00002592 B007                <1>     mov al, 07h
   113 00002594 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   114 00002597 7417                <1>     je .msdWriteErrorCode
   115                              <1> ;Sector Not Found
   116 00002599 B008                <1>     mov al, 08h     ;Sector not found code
   117 0000259B 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   118 0000259E 7410                <1>     je .msdWriteErrorCode
   119                              <1> ;Write faults
   120 000025A0 B00A                <1>     mov al, 0Ah     ;Write fault
   121 000025A2 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   122 000025A5 7409                <1>     je .msdWriteErrorCode
   123                              <1> ;Read faults
   124 000025A7 B00B                <1>     mov al, 0Bh     ;Read fault
   125 000025A9 80F911              <1>     cmp cl, 11h     ;Read error
   126 000025AC 7402                <1>     je .msdWriteErrorCode
   127                              <1> ;General Errors
   128 000025AE B00C                <1>     mov al, 0Ch     ;Everything else is general error
   129                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   130 000025B0 B480                <1>     mov ah, 80h ;Set error bit
   131 000025B2 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   132 000025B6 C3                  <1>     ret ;Return to set done bit
   133                              <1> .msdTable:
   134 000025B7 0000                <1>     dw 0                            ;Function 0
   135 000025B9 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   136 000025BB 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   137 000025BD 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   138 000025BF 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   139 000025C1 0000                <1>     dw 0                            ;Function 5
   140 000025C3 0000                <1>     dw 0                            ;Function 6
   141 000025C5 0000                <1>     dw 0                            ;Function 7
   142 000025C7 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   143 000025C9 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   144 000025CB 0000                <1>     dw 0                            ;Function 10
   145 000025CD 0000                <1>     dw 0                            ;Function 11
   146 000025CF C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   147 000025D1 D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   148 000025D3 ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   149 000025D5 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   150 000025D7 0000                <1>     dw 0                            ;Function 16
   151 000025D9 0000                <1>     dw 0                            ;Function 17
   152 000025DB 0000                <1>     dw 0                            ;Function 18
   153 000025DD 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   154 000025DF 0000                <1>     dw 0                            ;Function 20
   155 000025E1 0000                <1>     dw 0                            ;Function 21
   156 000025E3 0000                <1>     dw 0                            ;Function 22
   157 000025E5 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   158 000025E7 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   159                              <1> 
   160                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   161                              <1> .msdMedChk:          ;Function 1
   162 000025E9 B005                <1>     mov al, 05h ;Bad request structure length
   163 000025EB 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   164 000025EE 75C0                <1>     jne .msdWriteErrorCode
   165                              <1> 
   166 000025F0 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   167 000025F5 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   168 000025FC 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   169 000025FF F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   170 00002602 753F                <1>     jnz .mmcNoChange
   171                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   172 00002604 B416                <1>     mov ah, 16h 
   173 00002606 CD33                <1>     int 33h
   174 00002608 0F8237FFFFFF        <1>     jc .msdGenDiskError
   175 0000260E 80FC80              <1>     cmp ah, 80h
   176 00002611 740E                <1>     je .mmcNoChangeLine
   177 00002613 80FC86              <1>     cmp ah, 86h
   178 00002616 7409                <1>     je .mmcNoChangeLine
   179 00002618 84E4                <1>     test ah, ah ;No change?
   180 0000261A 7427                <1>     jz .mmcNoChange
   181 0000261C F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   182 0000261F 750D                <1>     jnz .mmcChange
   183                              <1> ;If nothing, fall through and test manually, should never happen though
   184                              <1> .mmcNoChangeLine:
   185                              <1> ;Now we test Media Descriptor
   186 00002621 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   187 00002626 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   188 00002629 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   189 0000262C 7410                <1>     je .mmcUnsure
   190                              <1> .mmcChange:
   191 0000262E C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   192 00002632 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   193 00002639 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   194                              <1>     ;Check here if there were any open handles on the device when it was changed
   195 0000263D C3                  <1>     ret
   196                              <1> .mmcUnsure:
   197 0000263E C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   198 00002642 C3                  <1>     ret
   199                              <1> .mmcNoChange:
   200 00002643 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   201 00002647 C3                  <1>     ret
   202                              <1> 
   203                              <1> 
   204                              <1> .msdBuildBPB:        ;Function 2
   205 00002648 B005                <1>     mov al, 05h ;Bad request structure length
   206 0000264A 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   207 0000264D 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   208                              <1> 
   209 00002653 4889DE              <1>     mov rsi, rbx
   210 00002656 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   211 0000265B 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   212 00002662 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   213 00002665 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   214 00002669 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   215 0000266B 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   216 0000266E B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   217 00002673 CD33                <1>     int 33h
   218 00002675 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   219                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   220 0000267B 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   221 0000267F 7418                <1>     je .mbbpb0
   222 00002681 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   223 00002685 7412                <1>     je .mbbpb0
   224 00002687 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   225 0000268B 740C                <1>     je .mbbpb0
   226 0000268D 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   227 00002691 B007                <1>     mov al, 07h ;Unknown media error code
   228 00002693 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   229                              <1> .mbbpb0:
   230 00002699 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   231 0000269C 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   232 000026A1 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   233 000026A8 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   234 000026AC 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   235 000026AF 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   236 000026B3 B90F000000          <1>     mov ecx, bpbEx_size/8
   237 000026B8 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   238 000026BB C3                  <1>     ret
   239                              <1> .msdIOCTLRead:       ;Function 3, returns done
   240 000026BC B005                <1>     mov al, drvBadDrvReq
   241 000026BE 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   242 000026C1 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   243 000026C7 C3                  <1>     ret
   244                              <1> .msdRead:            ;Function 4
   245                              <1> ;Will read one sector at a time.
   246 000026C8 B005                <1>     mov al, 05h ;Bad request structure length
   247 000026CA 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   248 000026CD 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   249                              <1> 
   250 000026D3 4889DF              <1>     mov rdi, rbx
   251 000026D6 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   252                              <1> .msdr0:
   253 000026D8 B682                <1>     mov dh, 82h ;LBA Read Sectors
   254 000026DA E841010000          <1>     call .msdBlkIOCommon
   255 000026DF 0F8255FEFFFF        <1>     jc .msdIOError
   256 000026E5 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   257 000026ED 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   258 000026F5 FFC6                <1>     inc esi
   259 000026F7 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   260 000026FA 75DC                <1>     jne .msdr0
   261 000026FC 4889FB              <1>     mov rbx, rdi
   262 000026FF C3                  <1>     ret
   263                              <1> .msdWrite:           ;Function 8
   264                              <1> ;Will write one sector at a time.
   265 00002700 B005                <1>     mov al, 05h ;Bad request structure length
   266 00002702 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   267 00002705 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   268                              <1> 
   269 0000270B 4889DF              <1>     mov rdi, rbx
   270 0000270E 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   271                              <1> .msdw0:
   272 00002710 B683                <1>     mov dh, 83h ;LBA Write Sectors
   273 00002712 E809010000          <1>     call .msdBlkIOCommon
   274 00002717 0F821DFEFFFF        <1>     jc .msdIOError
   275 0000271D 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   276 00002725 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   277 0000272D FFC6                <1>     inc esi
   278 0000272F 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   279 00002732 75DC                <1>     jne .msdw0
   280 00002734 4889FB              <1>     mov rbx, rdi
   281 00002737 C3                  <1>     ret
   282                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   283                              <1> ;Will write one sector at a time and then verify it.
   284 00002738 B005                <1>     mov al, 05h ;Bad request structure length
   285 0000273A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   286 0000273D 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   287                              <1> 
   288 00002743 4889DF              <1>     mov rdi, rbx
   289 00002746 31F6                <1>     xor esi, esi  ;Set counter to zero
   290                              <1> .msdwv0:
   291 00002748 B683                <1>     mov dh, 83h ;LBA Write Sectors
   292 0000274A E8D1000000          <1>     call .msdBlkIOCommon
   293 0000274F 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   294 00002755 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   295 00002757 E8C4000000          <1>     call .msdBlkIOCommon
   296 0000275C 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   297 00002762 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   298 0000276A 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   299 00002772 FFC6                <1>     inc esi
   300 00002774 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   301 00002777 75CF                <1>     jne .msdwv0
   302 00002779 4889FB              <1>     mov rbx, rdi
   303 0000277C C3                  <1>     ret
   304                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   305 0000277D B005                <1>     mov al, drvBadDrvReq
   306 0000277F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   307 00002782 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   308                              <1> 
   309 00002788 C3                  <1>     ret
   310                              <1> .msdDevOpen:         ;Function 13
   311 00002789 B005                <1>     mov al, drvBadDrvReq
   312 0000278B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   313 0000278E 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   314                              <1> 
   315 00002794 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   316 00002799 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   317 000027A0 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   318 000027A3 C3                  <1>     ret
   319                              <1> .msdDevClose:        ;Function 14
   320 000027A4 B005                <1>     mov al, drvBadDrvReq
   321 000027A6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   322 000027A9 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   323                              <1> 
   324 000027AF 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   325 000027B4 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   326 000027BB FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   327 000027BE C3                  <1>     ret
   328                              <1> .msdRemovableMedia:  ;Function 15
   329 000027BF B005                <1>     mov al, drvBadDrvReq
   330 000027C1 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   331 000027C4 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   332                              <1> 
   333 000027CA 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   334 000027CF 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   335 000027D6 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   336 000027D9 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   337 000027DE 31D2                <1>     xor edx, edx    ;Busy bit clear
   338 000027E0 A880                <1>     test al, 80h
   339 000027E2 0F44CA              <1>     cmovz ecx, edx
   340 000027E5 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   341 000027E9 C3                  <1>     ret
   342                              <1> .msdGenericIOCTL:    ;Function 19
   343 000027EA B005                <1>     mov al, drvBadDrvReq
   344 000027EC 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   345 000027EF 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   346                              <1> 
   347 000027F5 C3                  <1>     ret
   348                              <1> .msdGetLogicalDev:   ;Function 23
   349 000027F6 B005                <1>     mov al, drvBadDrvReq
   350 000027F8 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   351 000027FB 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   352                              <1> 
   353 00002801 8A0541000000        <1>     mov al, byte [.msdCurDev]
   354 00002807 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   355 0000280A C3                  <1>     ret
   356                              <1> .msdSetLogicalDev:   ;Function 24
   357 0000280B B005                <1>     mov al, drvBadDrvReq
   358 0000280D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   359 00002810 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   360                              <1> 
   361 00002816 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   362 00002819 880529000000        <1>     mov byte [.msdCurDev], al
   363 0000281F C3                  <1>     ret
   364                              <1> 
   365                              <1> .msdBlkIOCommon:  ;Does block IO
   366                              <1> ;Called with rdi containing old rbx value and ah with function number
   367                              <1> ;rbp points to bpb
   368                              <1> ;Error handled by caller
   369                              <1> ;Sector count handled by caller
   370                              <1> ;Called with dh = BIOS function number
   371 00002820 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   372 00002825 8A90[49280000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   373 0000282B 31C9                <1>     xor ecx, ecx
   374 0000282D 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   375 00002830 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   376 00002834 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   377 00002838 88F4                <1>     mov ah, dh
   378 0000283A B001                <1>     mov al, 01h ;Do one sector at a time 
   379 0000283C CD33                <1>     int 33h
   380 0000283E C3                  <1>     ret
   381                              <1> 
   382 0000283F 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   383                              <1> ;LASTDRIVE default is 5
   384                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   385                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   386 00002848 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   387                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   388 00002849 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   389 0000284E 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   390 00002853 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   390 0000285C 000000000000000000- <1>
   390 00002865 000000000000000000- <1>
   390 0000286E 000000000000000000- <1>
   390 00002877 00000000            <1>
   391 0000287B 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   391 00002884 000000000000000000- <1>
   391 0000288D 000000000000000000- <1>
   391 00002896 000000000000000000- <1>
   391 0000289F 000000000000000000- <1>
   391 000028A8 000000000000000000- <1>
   391 000028B1 000000000000000000- <1>
   391 000028BA 000000000000000000- <1>
   391 000028C3 000000000000000000- <1>
   391 000028CC 000000000000000000- <1>
   391 000028D5 000000000000000000- <1>
   391 000028DE 000000000000000000- <1>
   391 000028E7 000000000000000000- <1>
   391 000028F0 000000000000000000- <1>
   391 000028F9 000000000000000000- <1>
   391 00002902 000000000000000000- <1>
   391 0000290B 000000000000000000- <1>
   391 00002914 000000000000000000- <1>
   391 0000291D 000000000000000000- <1>
   391 00002926 000000000000000000- <1>
   391 0000292F 000000000000000000- <1>
   391 00002938 000000000000000000- <1>
   391 00002941 000000000000000000- <1>
   391 0000294A 000000000000000000- <1>
   391 00002953 000000000000000000- <1>
   391 0000295C 000000000000000000- <1>
   391 00002965 000000000000000000- <1>
   391 0000296E 000000000000000000- <1>
   391 00002977 000000000000000000- <1>
   391 00002980 000000000000000000- <1>
   391 00002989 000000000000000000- <1>
   391 00002992 000000000000000000- <1>
   391 0000299B 000000000000000000- <1>
   391 000029A4 000000000000000000- <1>
   391 000029AD 000000000000000000- <1>
   391 000029B6 000000000000000000- <1>
   391 000029BF 000000000000000000- <1>
   391 000029C8 000000000000000000- <1>
   391 000029D1 000000000000000000- <1>
   391 000029DA 000000000000000000- <1>
   391 000029E3 000000000000000000- <1>
   391 000029EC 000000000000000000- <1>
   391 000029F5 000000000000000000- <1>
   391 000029FE 000000000000000000- <1>
   391 00002A07 000000000000000000- <1>
   391 00002A10 000000000000000000- <1>
   391 00002A19 000000000000000000- <1>
   391 00002A22 000000000000000000- <1>
   391 00002A2B 000000000000000000- <1>
   391 00002A34 000000000000000000- <1>
   391 00002A3D 000000000000000000- <1>
   391 00002A46 000000000000000000- <1>
   391 00002A4F 000000000000000000- <1>
   391 00002A58 000000000000000000- <1>
   391 00002A61 000000000000000000- <1>
   391 00002A6A 000000000000000000- <1>
   391 00002A73 000000000000000000- <1>
   391 00002A7C 000000000000000000- <1>
   391 00002A85 000000000000000000- <1>
   391 00002A8E 000000000000000000- <1>
   391 00002A97 000000000000000000- <1>
   391 00002AA0 000000000000000000- <1>
   391 00002AA9 000000000000000000- <1>
   391 00002AB2 000000000000000000- <1>
   391 00002ABB 000000000000000000- <1>
   391 00002AC4 000000000000000000- <1>
   391 00002ACD 000000000000        <1>
   392                              <1> 
   393                              <1> endptr equ $
    31                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    32                                  ;Paragraph alignment
    33                                  %include "./Source/BSS/dosDynaDataArea.asm"
    34                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    35                              <1> ; the MCB chain!
    36                              <1> ddaStart:
    37 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    38                              <1> 
    39                              <1> ;Create SFT header and corresponding array of five default sft entries
    40 00000010 <res Ah>            <1> firstSftHeader  resb sfth_size
    41 0000001A <res 3Dh>           <1> firstSft        resb sft_size
    42 00000057 <res 3Dh>           <1> secondSft       resb sft_size
    43 00000094 <res 3Dh>           <1> thirdSft        resb sft_size
    44 000000D1 <res 3Dh>           <1> fourthSft       resb sft_size
    45 0000010E <res 3Dh>           <1> fifthSft        resb sft_size
    46                              <1> 
    47                              <1> ;Create DPB chain of first 5 available DPB slots
    48                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    49 0000014B <res 34h>           <1> firstDPB        resb dpb_size
    50 0000017F <res 34h>           <1> secondDPB       resb dpb_size
    51                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    52                              <1> ;Always jettison this space
    53 000001B3 <res 34h>           <1> thirdDPB        resb dpb_size
    54 000001E7 <res 34h>           <1> fourthDPB       resb dpb_size
    55 0000021B <res 34h>           <1> fifthDPB        resb dpb_size 
    56                              <1> 
    57                              <1> ;Create a one drive CDS to keep track of drive A's current dir
    58                              <1> ;Replace once CONFGI.SYS has been read
    59 0000024F <res 5Bh>           <1> initCDS         resb cds_size 
    60                              <1> 
    61                              <1> 
    62 000002AA <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    63 000002CA <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    64                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    65                              <1> dynamicDataAreaLength equ $ - ddaStart
