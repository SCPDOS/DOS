     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs and strucs
     5                                  %include "./Source/Include/driverStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     9                              <1> ; device driver related structures.                     ;
    10                              <1> ;-------------------------------------------------------;
    11                              <1> 
    12                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    13                              <1> 
    14 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    15 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    16 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    17 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    18 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    19                              <1> 
    20                              <1> endstruc
    21                              <1> 
    22                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    23                              <1> 
    24                              <1>     .hdrlen resb 1  ;Length of the request header
    25                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    26                              <1>     .cmdcde resb 1  ;Command code
    27                              <1>     .status resw 1  ;Status word
    28                              <1>     .devptr resq 1  ;Device queue pointer field
    29                              <1> 
    30                              <1> %endmacro
    31                              <1> ;Command Code equates
    32                              <1>     drvINIT         equ 0
    33                              <1>     drvMEDCHK       equ 1
    34                              <1>     drvBUILDBPB     equ 2
    35                              <1>     drvIOCTLREAD    equ 3
    36                              <1>     drvREAD         equ 4
    37                              <1>     drvNONDESTREAD  equ 5
    38                              <1>     drvINSTATUS     equ 6
    39                              <1>     drvFLUSHINBUF   equ 7
    40                              <1>     drvWRITE        equ 8
    41                              <1>     drvWRITEVERIFY  equ 9
    42                              <1>     drvOUTSTATUS    equ 10
    43                              <1>     drvFLUSHOUTBUF  equ 11
    44                              <1>     drvIOCTLWRITE   equ 12
    45                              <1>     drvOPEN         equ 13
    46                              <1>     drvCLOSE        equ 14
    47                              <1>     drvREMMEDCHECK  equ 15
    48                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    49                              <1>     drvIOCTL        equ 19
    50                              <1>     drvGETDRVMAP    equ 23
    51                              <1>     drvSETDRVMAP    equ 24
    52                              <1>     
    53                              <1> ;Driver Error equates 
    54                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    55                              <1>     drvBadUnit      equ 1   ;Unknown unit
    56                              <1>     drvNotReady     equ 2   ;Device not ready
    57                              <1>     drvBadCmd       equ 3   ;Unknown command
    58                              <1>     drvCRCErr       equ 4   ;CRC Error
    59                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    60                              <1>     drvBadSeek      equ 6   ;Seek error
    61                              <1>     drvBadMed       equ 7   ;Unknown media
    62                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    63                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    64                              <1>     drvWriteFault   equ 10  ;Write Fault
    65                              <1>     drvReadFault    equ 11  ;Read Fault
    66                              <1>     drvGenFault     equ 12  ;General Fault
    67                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    68                              <1> 
    69                              <1> ;Driver status word status bit meanings
    70                              <1>     drvErrStatus    equ 8000h  
    71                              <1>     drvDonStatus    equ 0100h
    72                              <1>     drvBsyStatus    equ 0200h
    73                              <1> ;Driver structures
    74                              <1> struc drvReqHdr
    75                              <1>     drvReqHdrM
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    76                              <1> endstruc
    77                              <1> 
    78                              <1> struc initReqPkt  ;Init Request Packet
    79                              <1> 
    80                              <1>     drvReqHdrM   ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    81 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    82 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    83 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    84 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    85                              <1> 
    86                              <1> endstruc
    87                              <1> 
    88                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    89                              <1> 
    90                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    91 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    92 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    93 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    94                              <1> 
    95                              <1> endstruc
    96                              <1> 
    97                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    98                              <1> 
    99                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   100 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   101 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   102 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   103                              <1> 
   104                              <1> endstruc
   105                              <1> 
   106                              <1> struc ioReqPkt   ;IO Request Packet
   107                              <1> 
   108                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   109 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   110 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   111 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   112 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   113 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   114                              <1> 
   115                              <1> endstruc
   116                              <1> 
   117                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
   118                              <1>     
   119                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   120 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   121                              <1> 
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc statusReqPkt   ;Status Request Packet
   125                              <1> 
   126                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   127                              <1> 
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   131                              <1> 
   132                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   133                              <1>      
   134                              <1> endstruc
   135                              <1> 
   136                              <1> struc openReqPkt ;Open Device Request Packet
   137                              <1> 
   138                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   139                              <1>      
   140                              <1> endstruc
   141                              <1> 
   142                              <1> struc closeReqPkt ;Close Device Request Packet
   143                              <1> 
   144                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   145                              <1>      
   146                              <1> endstruc
   147                              <1> 
   148                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   149                              <1> 
   150                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   151                              <1>      
   152                              <1> endstruc
   153                              <1> 
   154                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   155                              <1> 
   156                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   157 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   158 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   159 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   160 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   161 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   162                              <1> 
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   166                              <1>     
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   168                              <1> 
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   172                              <1>     
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   174                              <1> 
   175                              <1> endstruc
     6                                  %include "./Source/Include/fatStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous FAT driver   ;
    10                              <1> ; structures. exFAT will have it's own files at a later ;
    11                              <1> ; stage.                                                ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    17                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    18                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    19                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    20                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    21                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    22                              <1> ;-------------------------------------------------------;
    23                              <1> 
    24                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    25                              <1> 
    26 00000000 ??????              <1>     .jmpBoot    resb 3 
    27 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    28 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    29 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    30 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    31 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    32 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    33 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    34 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    35 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    36 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    37 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    38 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    39 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    40                              <1> 
    41 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    42 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    43 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    44 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    45 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    46 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    47                              <1> 
    48                              <1> endstruc
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    51                              <1> 
    52 00000000 ??????              <1>     .jmpBoot    resb 3
    53 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    54 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    55 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    56 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    57 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    58 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    59 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    60 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    61 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    62 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    63 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    64 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    65 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    66                              <1> 
    67 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    68 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    69 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    70 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    71 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    72 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    73 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    74                              <1> 
    75 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    76 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    77 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    78 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    79 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    80 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mbr
    85 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    86 000001B8 ????????            <1>     .diskID     resb 4
    87 000001BC ????                <1>     .reserved   resb 2
    88 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    89 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    90 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    91 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    92 000001FE ????                <1>     .mbrSig     resb 2
    93                              <1> endstruc
    94                              <1> 
    95                              <1> struc mbrEntry
    96 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    97 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    98 00000004 ??                  <1>     .ptnType    resb 1
    99 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   100 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   101 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc ebr
   105 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   106 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   107 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   108 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   109 000001FE ????                <1>     .mbrSig     resb 2
   110                              <1> endstruc
   111                              <1> 
   112                              <1> 
   113                              <1> struc fatDirEntry
   114                              <1> 
   115 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   116 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   121 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   122 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   127                              <1> 
   128                              <1> endstruc
   129                              <1> ;Directory attribute equates
   130                              <1>     dirReadOnly     equ 01h
   131                              <1>     dirHidden       equ 02h
   132                              <1>     dirSystem       equ 04h
   133                              <1>     dirVolumeID     equ 08h
   134                              <1>     dirDirectory    equ 10h
   135                              <1>     dirArchive      equ 20h
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1> 
   138                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   139                              <1> 
   140 00000000 ??????              <1>     .jmpBoot                resb 3 
   141 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   142 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   143 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   144 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   145 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   146 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   147 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   148 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   149 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   150 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   151 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   152 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   153 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   154 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   155 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   156 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   157 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   158 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   159                              <1> 
   160                              <1> endstruc
   161                              <1> 
   162                              <1> struc FSInfo
   163                              <1> 
   164 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   165 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   166 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   167 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   168 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   169 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   170 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   171                              <1> 
   172                              <1> endstruc
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsNetDrive     equ 8000h
    77                              <1> cdsPhysDrive    equ 4000h
    78                              <1> cdsJoinDrive    equ 2000h
    79                              <1> cdsSubstDrive   equ 1000h
    80                              <1> cdsRedirDrive   equ 0080h
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   144 0000002B ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   145 0000002C <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   146 00000037 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   147 0000003F ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   148                              <1> endstruc
   149                              <1> ;Open Mode equates
   150                              <1> ;Access modes   Bits[2:0]
   151                              <1> ReadAccess      equ 0h
   152                              <1> WriteAccess     equ 1h
   153                              <1> RWAccess        equ 2h
   154                              <1> ;Bit 3 reserved 0
   155                              <1> ;Sharing modes  Bits[6:4]
   156                              <1> CompatShare     equ 0h
   157                              <1> denyRWShare     equ 10h
   158                              <1> denyWriteShare  equ 20h
   159                              <1> denyReadShare   equ 30h
   160                              <1> denyNoneShare   equ 40h
   161                              <1> ;Bit 7 reserved 0
   162                              <1> ;Bits 8-12 reserved 0
   163                              <1> ;Critical Error handling
   164                              <1> critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   165                              <1> ;Buffering on writes
   166                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   167                              <1> ;FCB opened file?
   168                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   169                              <1> ;Attribute Byte
   170                              <1> readOnlyFile    equ 1h
   171                              <1> hiddenFile      equ 2h
   172                              <1> systemFile      equ 4h
   173                              <1> volumeLabel     equ 8h
   174                              <1> directoryFile   equ 10h ;Directory entry
   175                              <1> archiveFile     equ 20h
   176                              <1> ;Device Info equates
   177                              <1> ;For a block device, bits [5:0] contain the drive number
   178                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   179                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   180                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   181                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   182                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   183                              <1> devBinary       equ 20h ;If set, r/w device in Binary mode!!!
   184                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   185                              <1> blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   186                              <1> devCharDev      equ 80h ;If set, it is a char device!
   187                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   188                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   189                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   190                              <1> blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   191                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   215                              <1>     .dataarea:             ;Points to the start of the data area
   216                              <1> endstruc
   217                              <1> ;Buffer Flag equates
   218                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   219                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   220                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   221                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   222                              <1> refBuffer   equ 20h ;Data in buffer referenced by an application
   223                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   224                              <1> ;------------------------------------------------------------------------;
   225                              <1> ; Memory control block for each memory arena
   226                              <1> ;------------------------------------------------------------------------;
   227                              <1> struc mcb
   228 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   229 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   230 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   231 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   232                              <1>     .program:
   233                              <1> endstruc
   234                              <1> ;MCB equates
   235                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   236                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   237                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   238                              <1> mcbMarkCtn      equ "M"
   239                              <1> mcbMarkEnd      equ "Z"
   240                              <1> 
   241                              <1> memFirstFit     equ 0   ;First free block goes to application
   242                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   243                              <1> memLastFit      equ 2   ;Last free block goes to application
   244                              <1> 
   245                              <1> ;Owner = Para aligned address => Owning application PSP
   246                              <1> ;...To consider...
   247                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   248                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   249                              <1> ;------------------------------------------------------------------------;
   250                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   251                              <1> ; following order, thus allowing for return values to be placed in the 
   252                              <1> ; registers by accessing the caller register stack frame.
   253                              <1> ;------------------------------------------------------------------------;
   254                              <1> struc callerFrame
   255 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   256 00000008 ????????????????    <1>     .rbx    resq 1    
   257 00000010 ????????????????    <1>     .rcx    resq 1
   258 00000018 ????????????????    <1>     .rdx    resq 1
   259 00000020 ????????????????    <1>     .rsi    resq 1
   260 00000028 ????????????????    <1>     .rdi    resq 1
   261 00000030 ????????????????    <1>     .rbp    resq 1
   262 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   263 00000040 ????????????????    <1>     .r9     resq 1
   264                              <1> ;Pushed by Processor when invoked via Interrupt
   265 00000048 ????????????????    <1>     .rip    resq 1
   266 00000050 ????????????????    <1>     .cs     resq 1
   267 00000058 ????????????????    <1>     .flags  resq 1
   268                              <1> endstruc
   269                              <1> 
   270                              <1> struc fcb
   271                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   272 00000000 ??                  <1>     .driveNum   resb 1
   273 00000001 ????????????????    <1>     .filename   resb 8
   274 00000009 ??????              <1>     .fileext    resb 3
   275 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   276                              <1> ;One block consists of 128 records, of size denoted in the below
   277 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   278 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   279 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   280 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   281 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   282 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   283 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   284 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   285 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   286                              <1>     ;If record size > 64, high byte is ignored.
   287                              <1>     ;Used for random read and write operations to find the right record
   288                              <1> endstruc
   289                              <1> 
   290                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   291 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   292 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   293 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   294 0000000D ????????            <1>     .dirOffset  resd 1  ;Entry within dir (made a dword but will never be so)
   295 00000011 ????????            <1>     .parCluster resd 1  ;Parent cluster number
   296 00000015 ??                  <1>     .atrribFnd  resb 1  ;Attrib of file found
   297 00000016 ????                <1>     .fileTime   resw 1  ;File time
   298 00000018 ????                <1>     .fileDate   resw 1  ;File date
   299 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   300 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   301                              <1> endstruc
   302                              <1> 
   303                              <1> struc psp
   304 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   305 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   306 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   307 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   308 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   309 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   310 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   311 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   312 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   313 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   314 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   315 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   316 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   317                              <1> ;Extra handle arrays are grouped into a linked list
   318                              <1> ;The below are in the same place as in DOS
   319 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   320 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   321                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   322 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   323 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   324                              <1> endstruc
   325                              <1> 
   326                              <1> struc clkStruc
   327 00000000 ????                <1>     .dateWord   resw 1
   328 00000002 ??                  <1>     .minutes    resb 1
   329 00000003 ??                  <1>     .hours      resb 1
   330 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   331 00000005 ??                  <1>     .seconds    resb 1
   332                              <1> endstruc
   333                              <1> 
   334                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   335                              <1> ;for a space of 64Gb
   336                              <1> dosAPTsize  equ 60*4096
   337                              <1> 
   338                              <1> ;Critical Error AH bitfield equates
   339                              <1> critRead    equ 0h
   340                              <1> critWrite   equ 1h
   341                              <1> critDOS     equ 0h
   342                              <1> critFAT     equ 2h
   343                              <1> critDir     equ 4h
   344                              <1> critData    equ 6h
   345                              <1> critFailOK  equ 8h
   346                              <1> critRetryOK equ 10h
   347                              <1> critIgnorOK equ 20h
   348                              <1> critCharDev equ 80h
   349                              <1> 
   350                              <1> critIgnore  equ 0
   351                              <1> critRetry   equ 1
   352                              <1> critAbort   equ 2
   353                              <1> critFail    equ 3
     8                                  %include "./Source/Debug/debSym.inc"
     9                              <1> ;This file will include the debuging symbols
    10                              <1> 
    11                              <1> %define true 1
    12                              <1> %define false 0
    13                              <1> 
    14                              <1> ;Switch the DEBUG to false in production!
    15                              <1> %define DEBUG false
    16                              <1> %define DPBINFO false
    17                              <1> %define REGS true
    18                              <1> %define ENDSTATUS true
    19                              <1> %define ALLOCTEST true
    20                              <1> 
    21                              <1> 
    22                              <1> ;Use this space as the debug stack
    23                              <1> %define debStackTop 80000h
     9                                  %include "./Source/Include/dosError.inc"
    10                              <1> ;DOS Error codes
    11                              <1> 
    12                              <1> ;Extended Error Codes
    13                              <1> errInvFnc   equ 1   ;Invalid function number
    14                              <1> errFnf      equ 2   ;File not found
    15                              <1> errPnf      equ 3   ;Path not found
    16                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    17                              <1> errAccDen   equ 5   ;Access denied (to resource)
    18                              <1> errBadHdl   equ 6   ;Invalid handle
    19                              <1> errMCBbad   equ 7   ;MCB's destroyed
    20                              <1> errNoMem    equ 8   ;Insufficient memory
    21                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    22                              <1> errBadEnv   equ 10  ;Invalid environment
    23                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    24                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    25                              <1> errInvDat   equ 13  ;Invalid data
    26                              <1> ;           equ 14  ;Reserved
    27                              <1> errBadDrv   equ 15  ;Invalid drive specified
    28                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    29                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    30                              <1> errNoFil    equ 18  ;No more files
    31                              <1> ;The following are Driver error codes + 19
    32                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    33                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    34                              <1> errUnkUnt   equ 20  ;Unknown Unit
    35                              <1> errDrvNR    equ 21  ;Drive not ready
    36                              <1> errUnkCmd   equ 22  ;Unknown Command
    37                              <1> errCRCerr   equ 23  ;Data (CRC) error
    38                              <1> errBadRLn   equ 24  ;Bad request structure length
    39                              <1> errSekErr   equ 25  ;Seek error
    40                              <1> errUnkMed   equ 26  ;Unknown media type
    41                              <1> errSecNF    equ 27  ;Sector not Found
    42                              <1> errNoPap    equ 28  ;Printer out of paper
    43                              <1> errWF       equ 29  ;Write fault
    44                              <1> errRF       equ 30  ;Read fault
    45                              <1> errGF       equ 31  ;General fault
    46                              <1> ;Number 32-33 reserved
    47                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    48                              <1> errNoFCB    equ 35  ;FCB unavailable
    49                              <1> ;Numbers 36-82 reserved
    50                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    51                              <1> errFI44     equ 83  ;Fail on INT 44h
    52                              <1> ;Numbers 84-88 reserved
    53                              <1> ;-----------------------------------------------------------------------------
    54                              <1> ;Error Loci
    55                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    56                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    57                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    58                              <1> eLocSer     equ 4   ;Serial Device error
    59                              <1> eLocMem     equ 5   ;Related to RAM
    60                              <1> ;-----------------------------------------------------------------------------
    61                              <1> ;Error Actions
    62                              <1> eActRet     equ 1   ;Retry
    63                              <1> eActDRet    equ 2   ;Delay then retry
    64                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    65                              <1> eActAbt     equ 4   ;Abort with cleanup
    66                              <1> eActKil     equ 5   ;Abort without cleanup
    67                              <1> eActIgn     equ 6   ;Ignore error
    68                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    69                              <1> ;-----------------------------------------------------------------------------
    70                              <1> ;Error classes
    71                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    72                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    73                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    74                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    75                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    76                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    77                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    78                              <1> eClsNotFnd  equ 8   ;Resource not found
    79                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    80                              <1> eClsLocked  equ 10  ;Resource Locked
    81                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    82                              <1> eClsClash   equ 12  ;Resource already exists!
    83                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  Segment .text align=1   ;Init code
    11                                  %include "./Source/Sysinit/sysInit.asm"
    12                              <1> ; We arrive here with the following values in the registers.
    13                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    14                              <1> ; dx  = Int 33h boot device number
    15                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    16                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    17 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    18 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    18 0000000B 909090909090909090- <1>
    18 00000014 909090909090909090- <1>
    18 0000001D 909090909090909090- <1>
    18 00000026 909090909090909090- <1>
    18 0000002F 909090909090909090- <1>
    18 00000038 909090909090909090- <1>
    18 00000041 909090909090909090- <1>
    18 0000004A 909090909090909090- <1>
    18 00000053 909090909090909090- <1>
    18 0000005C 909090909090909090- <1>
    18 00000065 909090909090909090- <1>
    18 0000006E 909090909090909090- <1>
    18 00000077 909090909090909090- <1>
    18 00000080 909090909090909090- <1>
    18 00000089 909090909090909090- <1>
    18 00000092 909090909090909090- <1>
    18 0000009B 909090909090909090- <1>
    18 000000A4 909090909090909090- <1>
    18 000000AD 909090909090909090- <1>
    18 000000B6 909090909090909090- <1>
    18 000000BF 909090909090909090- <1>
    18 000000C8 909090909090909090- <1>
    18 000000D1 909090909090909090- <1>
    18 000000DA 909090909090909090- <1>
    18 000000E3 909090909090909090- <1>
    18 000000EC 909090909090909090- <1>
    18 000000F5 909090909090909090- <1>
    18 000000FE 9090                <1>
    19                              <1> ;First move the alignment of the DOSSEG to 4Kb
    20 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    21 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    22 00000106 0F32                <1>     rdmsr
    23 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    24 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    25 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    26 00000110 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    27 00000113 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    28 0000011A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    29 00000121 89F8                <1>     mov eax, edi
    30 00000123 4889FA              <1>     mov rdx, rdi
    31 00000126 48C1EA20            <1>     shr rdx, 20h
    32 0000012A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    33 0000012C 5A                  <1>     pop rdx
    34                              <1> ;------------------------------------------------;
    35                              <1> ;              Connect Debugger                  ;
    36                              <1> ;------------------------------------------------;
    37                              <1> %if DEBUG
    38                              <1> ;Only connect if in debug mode
    39                              <1>     mov eax, 0C501h ;Connect debugger
    40                              <1>     int 35h
    41                              <1> %endif
    42                              <1> ;------------------------------------------------;
    43                              <1> ;           Sanitise the data area               ;
    44                              <1> ;------------------------------------------------;
    45 0000012D B9[59D50300]        <1>     mov ecx, dSegLen
    46 00000132 30C0                <1>     xor al, al
    47 00000134 57                  <1>     push rdi    ;Temp save rdi on the stack
    48 00000135 F3AA                <1>     rep stosb
    49 00000137 5F                  <1>     pop rdi
    50                              <1> ;------------------------------------------------;
    51                              <1> ;          Start saving Basic DOS data           ;
    52                              <1> ;------------------------------------------------;
    53 00000138 64881425[10C00300]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    54                              <1> ;Copy DOS to its final resting place
    55 00000140 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    55 00000145 [00C00300]          <1>
    56 00000149 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    56 0000014E [08C00300]          <1>
    57 00000152 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    58 00000155 4881C7[59D50300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    59 0000015C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    60 00000163 B900100000          <1>     mov ecx, 1000h
    61 00000168 F348A5              <1>     rep movsq
    62                              <1> 
    63 0000016B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    64 0000016D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    65 00000171 664489C0            <1>     mov ax, r8w
    66 00000175 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
    67 0000017D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    68 00000185 64C60425[B2C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    68 0000018D 05                  <1>
    69 0000018E 64C60425[13C00300]- <1>     mov byte fs:[numLogDrv], 0     ;Number of logical drives
    69 00000196 00                  <1>
    70 00000197 6466C70425-         <1>     mov word fs:[numFiles], 5      ;Default 8 files, at start 5
    70 0000019C [B4C00300]0500      <1>
    71 000001A2 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
    71 000001A7 [B6C00300]1400      <1>
    72 000001AD 64C60425[B3C00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
    72 000001B5 01                  <1>
    73                              <1>     ;If no detected Int 33h devices, halt 
    74 000001B6 49C1E810            <1>     shr r8, 2*8
    75 000001BA 4584C0              <1>     test r8b, r8b
    76 000001BD 0F84F60A0000        <1>     jz errorInit
    77                              <1> ;------------------------------------------------;
    78                              <1> ;          Add additional page tables            ;
    79                              <1> ;------------------------------------------------;
    80                              <1> ;This will allow for up to 64Gb of addressible space
    81 000001C3 4889EF              <1>     mov rdi, rbp
    82                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    83 000001C6 B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
    84 000001CB 57                  <1>     push rdi
    85 000001CC 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    85 000001D5 00                  <1>
    86                              <1> pdtLoop:
    87 000001D6 48AB                <1>     stosq
    88 000001D8 480500002000        <1>     add rax, 200000h
    89 000001DE FFC9                <1>     dec ecx
    90 000001E0 75F4                <1>     jnz pdtLoop
    91 000001E2 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
    92                              <1> ;Now we add every 4kb page to the page directory pointer table
    93                              <1> ;15 4kb pages to consider
    94 000001E3 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
    95 000001E6 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
    96 000001E9 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
    97 000001F0 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
    98 000001F7 B93C000000          <1>     mov ecx, 60
    99 000001FC 480D03000000        <1>     or rax, 3h      ;present and r/w
   100                              <1> pdptLoop:
   101 00000202 48AB                <1>     stosq
   102 00000204 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   103 0000020A FFC9                <1>     dec ecx
   104 0000020C 75F4                <1>     jnz pdptLoop
   105 0000020E 0F20DF              <1>     mov rdi, cr3
   106 00000211 0F22DF              <1>     mov cr3, rdi
   107                              <1> 
   108                              <1> ;------------------------------------------------;
   109                              <1> ;                   MCB inits                    ;
   110                              <1> ;------------------------------------------------;
   111                              <1> mcbInit:
   112 00000214 B820E80000          <1>     mov eax, 0E820h
   113 00000219 CD35                <1>     int 35h
   114                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   115 0000021B E808010000          <1>     call .mcbFindAddress
   116 00000220 7349                <1>     jnc .mcbi1  ;If found, proceed
   117                              <1>     ;Here, we try use E801h
   118 00000222 B801E80000          <1>     mov eax, 0E801h
   119 00000227 CD35                <1>     int 35h
   120 00000229 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   121 0000022C 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   122 0000022F 85C0                <1>     test eax, eax
   123 00000231 741B                <1>     jz .worst
   124 00000233 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   125 00000236 C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   126 00000239 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax
   127 00000241 64891C25[18C00300]  <1>     mov dword fs:[hiProtMem], ebx
   128 00000249 E927010000          <1>     jmp mcbBuild
   129                              <1> .worst:
   130                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   131 0000024E B800002000          <1>     mov eax, 200000h
   132 00000253 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   132 00000258 [08C00300]          <1>
   133 0000025C 29D8                <1>     sub eax, ebx
   134 0000025E 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   135 00000266 E90A010000          <1>     jmp mcbBuild 
   136                              <1> .mcbi1:
   137 0000026B 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   138 0000026E 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   138 00000277 00                  <1>
   139 00000278 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   140 0000027C 0F85C6000000        <1>     jne .mcbFail
   141 00000282 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   142                              <1>     ;PCI hole always exists so this value will always be a dword
   143 00000286 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax
   144 0000028E 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   145 00000291 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   146 00000294 4881FB00000001      <1>     cmp rbx, 1000000h  
   147 0000029B 773C                <1>     ja .skipISA
   148                              <1> ;Here we deal with ISA hole issues
   149 0000029D B820E80000          <1>     mov eax, 0E820h
   150 000002A2 CD35                <1>     int 35h
   151 000002A4 48B800000001000000- <1>     mov rax, 1000000h
   151 000002AD 00                  <1>
   152 000002AE E875000000          <1>     call .mcbFindAddress
   153 000002B3 0F82BC000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   154 000002B9 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   154 000002C2 00                  <1>
   155 000002C3 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   156 000002C7 0F85A8000000        <1>     jne mcbBuild  
   157 000002CD 488B5808            <1>     mov rbx, qword [rax + 8]
   158 000002D1 64891C25[18C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   159                              <1> .skipISA:
   160 000002D9 B820E80000          <1>     mov eax, 0E820h
   161 000002DE CD35                <1>     int 35h
   162 000002E0 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   162 000002E9 00                  <1>
   163 000002EA E839000000          <1>     call .mcbFindAddress
   164 000002EF 0F8280000000        <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   165 000002F5 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   165 000002FE 00                  <1>
   166 000002FF 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   167 00000303 7570                <1>     jne mcbBuild   
   168 00000305 488B5808            <1>     mov rbx, qword [rax + 8]
   169                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   170 00000309 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   170 00000312 00                  <1>
   171 00000313 4839CB              <1>     cmp rbx, rcx
   172 00000316 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   173 0000031A 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   173 0000031F [1CC00300]          <1>
   174 00000323 E94D000000          <1>     jmp mcbBuild
   175                              <1> .mcbFindAddress:
   176                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   177                              <1> ;Entry: rax = Address of arena to search for
   178                              <1> ;       rsi = Pointer to memory map
   179                              <1> ;       ecx = Number of 24 byte entries
   180                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   181                              <1> ;       CF=CY : value in rax not found
   182 00000328 56                  <1>     push rsi
   183 00000329 51                  <1>     push rcx
   184 0000032A 50                  <1>     push rax
   185                              <1> .mfa0:
   186 0000032B 483B06              <1>     cmp rax, qword [rsi]
   187 0000032E 7410                <1>     je .mcbAddressFound
   188 00000330 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   189 00000337 FFC9                <1>     dec ecx
   190 00000339 79F0                <1>     jns .mfa0
   191                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   192 0000033B 58                  <1>     pop rax
   193 0000033C 59                  <1>     pop rcx
   194 0000033D 5E                  <1>     pop rsi
   195 0000033E F9                  <1>     stc
   196 0000033F C3                  <1>     ret
   197                              <1> .mcbAddressFound:
   198 00000340 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   199 00000343 59                  <1>     pop rcx ;Pop old rax value off
   200 00000344 59                  <1>     pop rcx
   201 00000345 5E                  <1>     pop rsi
   202 00000346 F8                  <1>     clc
   203 00000347 C3                  <1>     ret
   204                              <1> .mcbFail:
   205 00000348 488D2D0C000000      <1>     lea rbp, .mcbFailmsg
   206 0000034F B804130000          <1>     mov eax, 1304h
   207 00000354 CD30                <1>     int 30h
   208 00000356 E95E090000          <1>     jmp errorInit
   209 0000035B 4D656D6F727920416C- <1> .mcbFailmsg: db "Memory Allocation Error",0Ah,0Dh,0
   209 00000364 6C6F636174696F6E20- <1>
   209 0000036D 4572726F720A0D00    <1>
   210                              <1> mcbBuild:
   211                              <1> ;Actually build the MCB chain here
   212                              <1> ;Start by computing the difference between userbase and DOS area
   213                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   214 00000375 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   214 0000037A [08C00300]          <1>
   215 0000037E 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   216 00000385 56                  <1>     push rsi    ;Save ptr
   217 00000386 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   218 0000038D 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   219 00000390 64293425[14C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   220 00000398 5B                  <1>     pop rbx
   221 00000399 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   222 0000039C 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   223 000003A4 648B3425[14C00300]  <1>     mov esi, dword fs:[loProtMem]
   224 000003AC C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   225 000003AF 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   226 000003B2 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   226 000003B7 [78C00300]          <1>
   227                              <1> 
   228                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   229 000003BB 64813C25[18C00300]- <1>     cmp dword fs:[hiProtMem], 0
   229 000003C3 00000000            <1>
   230 000003C7 746E                <1>     jz .skipISA
   231                              <1>     ;Here if an ISA hole exists, place a MCB around it
   232 000003C9 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   233                              <1>     ;Remove one MCB worth of space from alloc
   234 000003D0 31C9                <1>     xor ecx, ecx
   235 000003D2 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   236 000003D5 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   237 000003DB C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   238 000003DE C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   239 000003E1 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   240 000003E4 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   241 000003E7 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   242 000003EF 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   242 000003F8 00                  <1>
   243 000003F9 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   244 000003FC 480510000000        <1>     add rax, mcb_size
   245 00000402 4829C1              <1>     sub rcx, rax    ;Take their difference
   246 00000405 C1E904              <1>     shr ecx, 4
   247 00000408 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   248 0000040B C1E104              <1>     shl ecx, 4  ;Get bytes again
   249 0000040E 4881C310000000      <1>     add rbx, mcb_size
   250 00000415 4801CB              <1>     add rbx, rcx
   251                              <1>     ;RBX should now be at 16Mb
   252 00000418 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   253 0000041B 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   254 00000423 648B0C25[18C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   255 0000042B C1E904              <1>     shr ecx, 4  ;Get paragraphs
   256 0000042E 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   257 00000434 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   258                              <1> .skipISA:
   259                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   260                              <1>     ;rbx points to a block with "Z" marker
   261 00000437 64813C25[1CC00300]- <1>     cmp dword fs:[longMem], 0
   261 0000043F 00000000            <1>
   262 00000443 7470                <1>     jz .exit
   263                              <1>     ;Add PCI hole MCB
   264 00000445 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   265                              <1>     ;Remove one MCB worth of space from alloc
   266 0000044C 31C9                <1>     xor ecx, ecx
   267 0000044E 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   268 00000451 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   269 00000457 C1E104              <1>     shl ecx, 4  ;Get bytes
   270 0000045A C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   271 0000045D 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   272 00000460 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   273 00000463 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   274 0000046B 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   274 00000474 00                  <1>
   275 00000475 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   276 00000478 480510000000        <1>     add rax, mcb_size
   277 0000047E 4829C1              <1>     sub rcx, rax    ;Take their difference
   278 00000481 C1E904              <1>     shr ecx, 4
   279 00000484 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   280 00000487 C1E104              <1>     shl ecx, 4  ;Get bytes again
   281 0000048A 4881C310000000      <1>     add rbx, mcb_size
   282 00000491 4801CB              <1>     add rbx, rcx
   283                              <1>     ;RBX should now be at 4Gb
   284 00000494 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   285 00000497 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   286 0000049F 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   286 000004A4 [1CC00300]          <1>
   287 000004A8 48C1E904            <1>     shr rcx, 4
   288 000004AC 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   289 000004B2 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   290                              <1> .exit:
   291                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   292 000004B5 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   293                              <1> ;------------------------------------------------;
   294                              <1> ;          Kernel inits and adjustments          ;
   295                              <1> ;------------------------------------------------;
   296                              <1> ;Adjust Interrupt Entries Int 40h-49h
   297                              <1> adjInts:
   298 000004BC B340                <1>     mov bl, 40h
   299 000004BE B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   300 000004C3 CD35                <1>     int 35h
   301 000004C5 B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   302 000004CA 488D3D4C080000      <1>     lea rdi, intData
   303 000004D1 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   304                              <1> .ai0:
   305 000004D3 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   306 000004D8 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   307 000004DB 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   308                              <1> .ai1:
   309 000004DE CD35                <1>     int 35h
   310 000004E0 4881C708000000      <1>     add rdi, 8
   311 000004E7 FFC1                <1>     inc ecx
   312 000004E9 81F950000000        <1>     cmp ecx, 50h
   313 000004EF 75E2                <1>     jne .ai0
   314                              <1> 
   315                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   316                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   317                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   318                              <1>     %if DEBUG
   319                              <1> debugPopUpMsg:
   320                              <1>     push rbx
   321                              <1>     push rbp
   322                              <1>     push rcx
   323                              <1>     push rdx
   324                              <1>     mov ecx, 53 ;A large number of lines
   325                              <1>     xor edx, edx    ;COM 1
   326                              <1> .cls:
   327                              <1>     mov eax, 010Ah ;Transmit Line feed
   328                              <1>     int 34h
   329                              <1>     dec ecx
   330                              <1>     jnz .cls
   331                              <1>     lea rbx, qword [debPrintNullString + rbp]
   332                              <1>     lea rbp, .msg
   333                              <1>     call rbx
   334                              <1>     jmp short .exit
   335                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   336                              <1> .exit:
   337                              <1>     pop rdx
   338                              <1>     pop rcx
   339                              <1>     pop rbp
   340                              <1>     pop rbx
   341                              <1>     %endif
   342                              <1> 
   343                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   344 000004F1 488D15C1070000      <1>     lea rdx, errorInit ;Get segment start address
   345 000004F8 B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   346 000004FD CD41                <1>     int 41h
   347 000004FF 488D15B3070000      <1>     lea rdx, errorInit ;Get segment start address
   348 00000506 B844250000          <1>     mov eax, 2544h
   349 0000050B CD41                <1>     int 41h
   350                              <1> ;------------------------------------------------;
   351                              <1> ;          Driver Adjustments and inits          ;
   352                              <1> ;------------------------------------------------;
   353                              <1> ;Modify the pointers in nData before putting them in the data area
   354 0000050D 48012D89080000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   355 00000514 48012D8C080000      <1>     add qword [nData + drvHdr.strPtr], rbp
   356 0000051B 48012D8D080000      <1>     add qword [nData + drvHdr.intPtr], rbp
   357                              <1> ;Copy the Null driver to its location in Sysvars
   358 00000522 B922000000          <1>     mov ecx, drvHdr_size
   359 00000527 488D356F080000      <1>     lea rsi, qword [nData]
   360 0000052E 488DBD[C3C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   361 00000535 F3A4                <1>     rep movsb   
   362                              <1> 
   363                              <1> ;Adjust the addresses in the other driver headers 
   364 00000537 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   364 00000539 [3E23000000000000]  <1>
   365 00000541 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   366 00000546 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   367                              <1> adjDrivers:
   368 0000054A E857070000          <1>     call adjustDrvHdr
   369 0000054F E2F9                <1>     loop adjDrivers
   370                              <1> 
   371                              <1> ;Open NUL
   372 00000551 488D9D[24C00300]    <1>     lea rbx, qword [rbp + charReqHdr]
   373 00000558 C6030D              <1>     mov byte [rbx + openReqPkt.hdrlen], openReqPkt_size
   374 0000055B C6430300            <1>     mov byte [rbx + openReqPkt.status], 0
   375 0000055F FF95[CDC00300]      <1>     call qword [rbp + nulDevHdr + drvHdr.strPtr]
   376 00000565 FF95[D5C00300]      <1>     call qword [rbp + nulDevHdr + drvHdr.intPtr]
   377                              <1> ;Open CON
   378                              <1> conInit:    ;Rather than keeping this resident... do it here
   379                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   380 0000056B 488D95[25260000]    <1>     lea rdx, qword [rbp + fastOutput]
   381 00000572 B849250000          <1>     mov eax, 2549h
   382 00000577 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   383 00000579 488D95[2D260000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   384 00000580 B83B250000          <1>     mov eax, 253Bh
   385 00000585 CD41                <1>     int 41h ;Hook int 3Bh
   386                              <1> .ci0:
   387 00000587 B401                <1>     mov ah, 01      ;Get buffer status
   388 00000589 CD36                <1>     int 36h
   389 0000058B 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   390 0000058D 30E4                <1>     xor ah, ah
   391 0000058F CD36                <1>     int 36h ;Read key to flush from buffer
   392 00000591 EBF4                <1>     jmp short .ci0
   393                              <1> .ci1:
   394 00000593 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   395 00000598 CD30                <1>     int 30h
   396 0000059A B402                <1>     mov ah, 02h
   397 0000059C 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   398 0000059E 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   399 000005A0 CD30                <1>     int 30h
   400 000005A2 B707                <1>     mov bh, 07h     ;Grey/Black attribs
   401 000005A4 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   402 000005A9 CD30                <1>     int 30h
   403                              <1> 
   404                              <1>     ;Save ptr to ConHdr in Sysvars
   405 000005AB 488D85[3E230000]    <1>     lea rax, qword [rbp + conHdr]
   406 000005B2 6448890425-         <1>     mov qword fs:[conPtr], rax
   406 000005B7 [98C00300]          <1>
   407                              <1> 
   408                              <1>     ;Save ptr to ClkHdr in Sysvars
   409 000005BB 488D85[A4230000]    <1>     lea rax, qword [rbp + clkHdr]
   410 000005C2 6448890425-         <1>     mov qword fs:[clockPtr], rax
   410 000005C7 [90C00300]          <1>
   411                              <1> 
   412                              <1> ;------------------------------------------------;
   413                              <1> ;         Link DOS to temporary Buffer           ;
   414                              <1> ;------------------------------------------------;
   415                              <1> tempBufferInit:
   416 000005CB 488DBD[CD020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   417 000005D2 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   417 000005D7 [A2C00300]          <1>
   418 000005DB 31C0                <1>     xor eax, eax
   419 000005DD 48FFC8              <1>     dec rax
   420 000005E0 48AB                <1>     stosq   ;.nextBufPtr, end of list
   421 000005E2 AA                  <1>     stosb   ;.driveNumber, Free entry
   422 000005E3 48FFC0              <1>     inc rax
   423 000005E6 AA                  <1>     stosb   ;.bufferFlags, No flags
   424                              <1> ;------------------------------------------------;
   425                              <1> ;         Init msd driver, create DPB            ;
   426                              <1> ;------------------------------------------------;
   427                              <1> storageInits:
   428                              <1> ;First save dpb pointer in sysvars
   429 000005E7 488D9D[69010000]    <1>     lea rbx, qword [rbp + firstDPB]
   430 000005EE 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   430 000005F3 [80C00300]          <1>
   431                              <1> ;Open Mass Storage
   432                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   433                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   434                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   435                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   436                              <1>     ;mov al, byte fs:[numLogDrv]
   437                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   438                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   439                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   440                              <1>     ;Check if it returned OK first!
   441                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   442                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   443                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   444                              <1>     ;mov byte fs:[numLogDrv], al
   445                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   446                              <1> 
   447                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   448 000005F7 E8C3070000          <1>     call diskInit
   449 000005FC 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   450 000005FF 648A0425[13C00300]  <1>     mov al, byte fs:[numLogDrv]
   451 00000607 488D95[E52C0000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   452 0000060E 30C9                <1>     xor cl, cl  ;Clear counter
   453 00000610 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   453 00000615 [80C00300]          <1>
   454                              <1> .si0:   
   455 00000619 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   456 0000061C B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   457 0000061E CD41                <1>     int 41h
   458                              <1> ;Add other data to DPB
   459 00000620 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   460 00000623 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   461 00000626 50                  <1>     push rax
   462 00000627 488D87[C6230000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   463 0000062E 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   464 00000632 58                  <1>     pop rax
   465 00000633 FEC1                <1>     inc cl
   466 00000635 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   467 00000637 7416                <1>     je .si1
   468 00000639 50                  <1>     push rax
   469 0000063A 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   470 0000063E 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   471 00000642 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   472 00000645 58                  <1>     pop rax
   473 00000646 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   474 0000064D EBCA                <1>     jmp short .si0
   475                              <1> .si1:
   476                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   477 0000064F 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   478 00000657 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   479                              <1> ;------------------------------------------------;
   480                              <1> ;          Find largest sector size              ;
   481                              <1> ;------------------------------------------------;
   482                              <1> sectorSizeSearch:
   483                              <1> ;Done by reading BPB's for each drive
   484 0000065A 488D9D[E52C0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   485                              <1>     
   486                              <1>     ;Go thru each block individually
   487 00000661 31C0                <1>     xor eax, eax
   488 00000663 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   489                              <1> .findLargest:
   490 00000666 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   491 0000066A 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   492 0000066F 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   493 00000676 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   494 00000679 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   495 0000067C 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   496 0000067E 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   496 00000683 [A0C00300]          <1>
   497                              <1>     
   498                              <1> ;------------------------------------------------;
   499                              <1> ;                 Temp CDS inits                 ;
   500                              <1> ;------------------------------------------------;
   501                              <1> tempCDS:
   502                              <1> ;Build a temporary CDS for Drive A to use it for booting
   503 00000687 488DBD[72020000]    <1>     lea rdi, qword [rbp + initCDS]
   504 0000068E 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   504 00000693 [AAC00300]          <1>
   505 00000697 B943000000          <1>     mov ecx, 67 ;Buffer length
   506 0000069C 31C0                <1>     xor eax, eax
   507 0000069E 4889FB              <1>     mov rbx, rdi    ;Save CDS pointer in rbx
   508 000006A1 F3AA                <1>     rep stosb   ;Zero out the path string
   509 000006A3 4889DF              <1>     mov rdi, rbx
   510 000006A6 B041                <1>     mov al, "A"
   511 000006A8 AA                  <1>     stosb
   512 000006A9 B03A                <1>     mov al, ":"
   513 000006AB AA                  <1>     stosb
   514 000006AC B05C                <1>     mov al, "\"
   515 000006AE AA                  <1>     stosb
   516 000006AF 4889DF              <1>     mov rdi, rbx
   517 000006B2 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   518 000006B8 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   518 000006BD [80C00300]          <1>
   519 000006C1 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   520 000006C5 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   521                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   522                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   523                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   524 000006CB 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax    ;eax was zeroed before
   525                              <1> ;------------------------------------------------;
   526                              <1> ;     Set up general PSP areas and DOS vars      ;
   527                              <1> ;------------------------------------------------;
   528                              <1>     ;Additional DOS Vars init
   529 000006CE 31C0                <1>     xor eax, eax
   530 000006D0 64880425[3BC10300]  <1>     mov byte fs:[currentDrv], al ;Current Drive = Drive A
   531 000006D8 64880425[3DC10300]  <1>     mov byte fs:[breakFlag], al  ;Break off
   532 000006E0 64880425[3EC10300]  <1>     mov byte fs:[verifyFlag], al ;Write only
   533 000006E8 64880425[3CC10300]  <1>     mov byte fs:[singleDrv], al  ;Only used on single drive systems
   534 000006F0 64880425[0EC10300]  <1>     mov byte fs:[critErrFlag], al   ;Not in critical error
   535 000006F8 64880425[0FC10300]  <1>     mov byte fs:[inDOS], al      ;Not in DOS
   536 00000700 64C60425[10C10300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   536 00000708 FF                  <1>
   537 00000709 6466890425-         <1>     mov word fs:[errorLevel], ax   ;Last return code is 0, no error
   537 0000070E [38C10300]          <1>
   538 00000712 64880425[3AC10300]  <1>     mov byte fs:[allocStrat], al    ;First Fit
   539                              <1> 
   540                              <1>     ;SYSVARS PSP Init
   541 0000071A 488D1DDFF8FFFF      <1>     lea rbx, qword [tempPSP]
   542 00000721 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   542 00000726 [26C10300]          <1>
   543 0000072A 53                  <1>     push rbx
   544 0000072B 4881C380000000      <1>     add rbx, psp.dta
   545 00000732 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   545 00000737 [1EC10300]          <1>
   546 0000073B 5B                  <1>     pop rbx
   547 0000073C 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   548 00000741 C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   549 00000748 48895B02            <1>     mov qword [rbx + psp.startSeg], rbx ;Save start segment of app
   550 0000074C 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   551 00000750 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   552 00000754 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   553 00000758 48B800000001020000- <1>     mov rax, 0000000201000000h  ;Store default handles in JFT
   553 00000761 00                  <1>
   554 00000762 48AB                <1>     stosq   ;8 bytes
   555 00000764 31C0                <1>     xor eax, eax
   556 00000766 48AB                <1>     stosq   ;16 bytes
   557 00000768 AB                  <1>     stosd   ;20 bytes
   558 00000769 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   559 00000771 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   560 00000775 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   561 00000779 4889DA              <1>     mov rdx, rbx
   562 0000077C B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   563 00000781 CD41                <1>     int 41h
   564 00000783 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   565 00000787 B843350000          <1>     mov eax, 3543h
   566 0000078C CD41                <1>     int 41h
   567 0000078E 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   568 00000792 B844350000          <1>     mov eax, 3544h
   569 00000797 CD41                <1>     int 41h
   570 00000799 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   571                              <1> 
   572 0000079D B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   573 000007A2 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   574 000007A6 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   575                              <1> ;------------------------------------------------;
   576                              <1> ;          Default File Handle Creation          ;
   577                              <1> ;------------------------------------------------;
   578                              <1> defaultFileHandles:
   579                              <1> ;Fill in the default file table entries
   580 000007A8 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstSftHeader]
   581 000007AF 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   582 000007B6 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   583 000007BC 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   583 000007C1 [88C00300]          <1>
   584                              <1> ;GOTO FIRST FILE 
   585 000007C5 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   586                              <1> ;Write CON
   587 000007CC 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   588 000007D1 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   589 000007D7 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   590 000007DB C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   591                              <1>     ;No EOF when reading from the device
   592 000007DF 64488B0425-         <1>     mov rax, qword fs:[conPtr]  ;Get pointer to CON device
   592 000007E4 [98C00300]          <1>
   593 000007E8 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   594                              <1>     ;Ignore disk related fields and Date/Time of open
   595 000007EC 488D7B2C            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   596 000007F0 488D3598000000      <1>     lea rsi, qword [.dfhCon]
   597                              <1>     ;11 chars in 8.3 name
   598 000007F7 48A5                <1>     movsq   ;8 chars
   599 000007F9 66A5                <1>     movsw   ;10 chars
   600 000007FB A4                  <1>     movsb   ;11 chars
   601 000007FC 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   601 00000801 [26C10300]          <1>
   602 00000805 48894337            <1>     mov qword [rbx + sft.qPSPOwner], rax
   603                              <1> ;GOTO NEXT ENTRY
   604 00000809 4881C343000000      <1>     add rbx, sft_size   ;Goto next SFT
   605                              <1> ;Write AUX
   606 00000810 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   607 00000815 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   608 0000081B C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   609 0000081F C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   610                              <1>     ;No EOF when reading from the device
   611 00000823 488B85[60230000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   612 0000082A 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   613                              <1>     ;Ignore disk related fields and Date/Time of open
   614 0000082E 488D7B2C            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   615 00000832 488D3561000000      <1>     lea rsi, qword [.dfhAux]
   616                              <1>     ;11 chars in 8.3 name
   617 00000839 48A5                <1>     movsq   ;8 chars
   618 0000083B 66A5                <1>     movsw   ;10 chars
   619 0000083D A4                  <1>     movsb   ;11 chars
   620 0000083E 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   620 00000843 [26C10300]          <1>
   621 00000847 48894337            <1>     mov qword [rbx + sft.qPSPOwner], rax
   622                              <1> ;GOTO NEXT ENTRY
   623 0000084B 4881C343000000      <1>     add rbx, sft_size   ;Goto next SFT
   624                              <1> ;Write PRN
   625 00000852 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   626 00000857 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   627 0000085D C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   628 00000861 C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   629                              <1>     ;Want EOF when reading from to the device
   630 00000865 488B85[82230000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   631 0000086C 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   632                              <1>     ;Ignore disk related fields and Date/Time of open
   633 00000870 488D7B2C            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   634 00000874 488D352A000000      <1>     lea rsi, qword [.dfhPrn]
   635                              <1>     ;11 chars in 8.3 name
   636 0000087B 48A5                <1>     movsq   ;8 chars
   637 0000087D 66A5                <1>     movsw   ;10 chars
   638 0000087F A4                  <1>     movsb   ;11 chars
   639 00000880 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   639 00000885 [26C10300]          <1>
   640 00000889 48894337            <1>     mov qword [rbx + sft.qPSPOwner], rax
   641 0000088D EB21                <1>     jmp short .dfhExit
   642 0000088F 434F4E202020202020- <1> .dfhCon db "CON        "
   642 00000898 2020                <1>
   643 0000089A 415558202020202020- <1> .dfhAux db "AUX        "
   643 000008A3 2020                <1>
   644 000008A5 50524E202020202020- <1> .dfhPrn db "PRN        "
   644 000008AE 2020                <1>
   645                              <1> .dfhExit:
   646                              <1> ;------------------------------------------------;
   647                              <1> ;               Load CONFIG.SYS                  ;
   648                              <1> ;------------------------------------------------;
   649                              <1> ;------------------------------------------------;
   650                              <1> ;              Process CONFIG.SYS                ;
   651                              <1> ;------------------------------------------------;
   652                              <1> ;------------------------------------------------;
   653                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   654                              <1> ;------------------------------------------------;
   655                              <1> ;------------------------------------------------;
   656                              <1> ;   Setup Final Data Areas With Overrides from   ;
   657                              <1> ;                  CONFIG.SYS                    ;
   658                              <1> ;------------------------------------------------;
   659                              <1> ;------------------------------------------------;
   660                              <1> ;           Load Command interpreter             ;
   661                              <1> ;------------------------------------------------;
   662 000008B0 488D1513040000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   663 000008B7 B409                <1>     mov ah, 09h
   664 000008B9 CD41                <1>     int 41h
   665                              <1> ;Resize DOS allocation before loading COMMAND.COM
   666 000008BB 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   666 000008C0 [78C00300]          <1>
   667 000008C4 4981C010000000      <1>     add r8, mcb.program
   668 000008CB BBED120000          <1>     mov ebx, dynamicDataAreaLength
   669 000008D0 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   670 000008D3 FFC3                <1>     inc ebx
   671 000008D5 B44A                <1>     mov ah, 4Ah
   672 000008D7 CD41                <1>     int 41h
   673                              <1>     
   674                              <1>     %if DEBUG && ALLOCTEST
   675                              <1> ;Test Allocation, Growth and Deallocation
   676                              <1>     mov r15, qword fs:[currentPSP]
   677                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   678                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   679                              <1>     mov ah, 48h ;Allocate
   680                              <1>     int 41h
   681                              <1> 
   682                              <1>     mov r8, rax ;Move the pointer to r8
   683                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   684                              <1>     mov ah, 4Ah
   685                              <1>     int 41h
   686                              <1> 
   687                              <1>     mov ah, 49h ;Free r8
   688                              <1>     int 41h
   689                              <1>     mov qword fs:[currentPSP], r15
   690                              <1>     %endif
   691                              <1> 
   692                              <1>     %if ENDSTATUS
   693                              <1> debugFinal:
   694                              <1>     ;Print system state
   695 000008D9 55                  <1>     push rbp    ;Only rbp really matters here
   696 000008DA 4989E8              <1>     mov r8, rbp
   697                              <1> 
   698 000008DD 488D2DD0020000      <1>     lea rbp, .msg2
   699 000008E4 4D8D88[C4010000]    <1>     lea r9, qword [r8 + debPrintNullString]
   700 000008EB 41FFD1              <1>     call r9
   701                              <1> 
   702 000008EE 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   703 000008F5 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   703 000008FA [08C00300]          <1>
   704                              <1> 
   705 000008FE 4D8D88[FF040000]    <1>     lea r9, qword [r8 + overlayQword]
   706 00000905 41FFD1              <1>     call r9
   707                              <1> 
   708 00000908 4881C31B000000      <1>     add rbx, 19+8
   709 0000090F 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   709 00000914 [00C00300]          <1>
   710 00000918 41FFD1              <1>     call r9
   711                              <1> 
   712 0000091B 4881C31B000000      <1>     add rbx, 19+8
   713 00000922 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   713 00000927 [78C00300]          <1>
   714 0000092B 41FFD1              <1>     call r9
   715                              <1> 
   716 0000092E 4881C31C000000      <1>     add rbx, 20+8
   717 00000935 4D8D88[BC040000]    <1>     lea r9, qword [r8 + overlayDword]
   718 0000093C 648B0425[14C00300]  <1>     mov eax, dword fs:[loProtMem]
   719 00000944 41FFD1              <1>     call r9
   720                              <1> 
   721 00000947 4881C312000000      <1>     add rbx, 10+8
   722 0000094E 648B0425[18C00300]  <1>     mov eax, dword fs:[hiProtMem]
   723 00000956 41FFD1              <1>     call r9
   724                              <1> 
   725 00000959 4881C312000000      <1>     add rbx, 10+8
   726 00000960 64488B0425-         <1>     mov rax, qword fs:[longMem]
   726 00000965 [1CC00300]          <1>
   727 00000969 4D8D88[FF040000]    <1>     lea r9, qword [r8 + overlayQword]
   728 00000970 41FFD1              <1>     call r9
   729                              <1> 
   730 00000973 4881C31B000000      <1>     add rbx, 19+8
   731 0000097A 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   731 0000097F [80C00300]          <1>
   732 00000983 41FFD1              <1>     call r9
   733                              <1> 
   734 00000986 4881C31B000000      <1>     add rbx, 19+8
   735 0000098D 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   735 00000992 [88C00300]          <1>
   736 00000996 41FFD1              <1>     call r9
   737                              <1> 
   738 00000999 4881C31B000000      <1>     add rbx, 19+8
   739 000009A0 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   739 000009A5 [A2C00300]          <1>
   740 000009A9 41FFD1              <1>     call r9
   741                              <1> 
   742 000009AC 4881C31B000000      <1>     add rbx, 19+8
   743 000009B3 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   743 000009B8 [AAC00300]          <1>
   744 000009BC 41FFD1              <1>     call r9
   745                              <1> 
   746 000009BF 4D8D88[4A040000]    <1>     lea r9, qword [r8 + overlayByte]
   747                              <1> 
   748 000009C6 4881C32C000000      <1>     add rbx, 25+19
   749 000009CD 64480FB60425-       <1>     movzx rax, byte fs:[numLogDrv]
   749 000009D3 [13C00300]          <1>
   750 000009D7 41FFD1              <1>     call r9
   751                              <1> 
   752 000009DA 4881C31E000000      <1>     add rbx, 30
   753 000009E1 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   753 000009E7 [12C00300]          <1>
   754 000009EB 41FFD1              <1>     call r9
   755                              <1> 
   756 000009EE 4881C31E000000      <1>     add rbx, 30
   757 000009F5 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   757 000009FB [11C00300]          <1>
   758 000009FF 41FFD1              <1>     call r9
   759                              <1> 
   760 00000A02 4881C310000000      <1>     add rbx, 16
   761 00000A09 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   761 00000A0F [10C00300]          <1>
   762 00000A13 0441                <1>     add al, "A"
   763 00000A15 8803                <1>     mov byte [rbx], al
   764                              <1> 
   765 00000A17 488D2D10000000      <1>     lea rbp, .msg
   766 00000A1E 4D8D88[C4010000]    <1>     lea r9, qword [r8 + debPrintNullString]
   767 00000A25 41FFD1              <1>     call r9
   768 00000A28 5D                  <1>     pop rbp
   769 00000A29 E99E010000          <1>     jmp l1
   770 00000A2E 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   770 00000A37 206261736520464646- <1>
   770 00000A40 464646464646464646- <1>
   770 00000A49 46464646680A0D      <1>
   771 00000A50 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   771 00000A59 464646464646464646- <1>
   771 00000A62 464646464646680A0D  <1>
   772 00000A6B 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   772 00000A74 464646464646464646- <1>
   772 00000A7D 46464646464668200A- <1>
   772 00000A86 0D                  <1>
   773 00000A87 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   773 00000A90 464646464646466820  <1>
   774 00000A99 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   774 00000AA2 464646464646466820  <1>
   775 00000AAB 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   775 00000AB4 464646464646464646- <1>
   775 00000ABD 464646464646680A0D  <1>
   776 00000AC6 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   776 00000ACF 464646464646464646- <1>
   776 00000AD8 464646464646680A0D  <1>
   777 00000AE1 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   777 00000AEA 464646464646464646- <1>
   777 00000AF3 464646464646680A0D  <1>
   778 00000AFC 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   778 00000B05 464646464646464646- <1>
   778 00000B0E 464646464646680A0D  <1>
   779 00000B17 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   779 00000B20 464646464646464646- <1>
   779 00000B29 464646464646680A0D  <1>
   780 00000B32 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   780 00000B3B 204C6F676963616C20- <1>
   780 00000B44 447269766573204646- <1>
   780 00000B4D 680A0D              <1>
   781 00000B50 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   781 00000B59 204669786564204472- <1>
   781 00000B62 697665732020204646- <1>
   781 00000B6B 680A0D              <1>
   782 00000B6E 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   782 00000B77 2052656D6F7661626C- <1>
   782 00000B80 652044727673204646- <1>
   782 00000B89 680A0D              <1>
   783 00000B8C 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   783 00000B95 65205A3A0A0D        <1>
   784 00000B9B 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   784 00000BA4 4F4D4D414E442E434F- <1>
   784 00000BAD 4D2E2E2E0A0D00      <1>
   785 00000BB4 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   785 00000BBD 626F6F742073756D6D- <1>
   785 00000BC6 6172790A0D00        <1>
   786                              <1>     %endif
   787                              <1> l1:
   788 00000BCC B401                <1>     mov ah, 01h  ;Write with echo
   789 00000BCE CD41                <1>     int 41h
   790 00000BD0 3C00                <1>     cmp al, 0
   791 00000BD2 7402                <1>     je l2
   792 00000BD4 EBF6                <1>     jmp short l1
   793                              <1> l2:
   794 00000BD6 B407                <1>     mov ah, 07h
   795 00000BD8 CD41                <1>     int 41h
   796 00000BDA 3C42                <1>     cmp al, 42h
   797 00000BDC 75EE                <1>     jne l1
   798                              <1> l3:
   799 00000BDE 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   799 00000BE3 [8BC20300]0000      <1>
   800 00000BE9 488D9D[24C00300]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   801 00000BF0 488D85[8BC20300]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   802 00000BF7 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   803 00000BFA C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   804 00000BFE 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   805 00000C04 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   806 00000C08 C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   807 00000C0F FF95[AE230000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   808 00000C15 FF95[B6230000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr] 
   809                              <1> 
   810 00000C1B B403                <1>     mov ah, 03h
   811 00000C1D 30FF                <1>     xor bh, bh
   812 00000C1F CD30                <1>     int 30h
   813 00000C21 30D2                <1>     xor dl, dl  ;0 column
   814 00000C23 B402                <1>     mov ah, 02h
   815 00000C25 CD30                <1>     int 30h
   816                              <1> 
   817 00000C27 488D9D[8BC20300]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   818 00000C2E 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   819 00000C32 E832000000          <1>     call .clkHexToBCD
   820 00000C37 B40E                <1>     mov ah, 0Eh
   821 00000C39 B03A                <1>     mov al, ":"
   822 00000C3B CD30                <1>     int 30h
   823 00000C3D 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   824 00000C41 E823000000          <1>     call .clkHexToBCD
   825 00000C46 B40E                <1>     mov ah, 0Eh
   826 00000C48 B03A                <1>     mov al, ":"
   827 00000C4A CD30                <1>     int 30h
   828 00000C4C 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   829 00000C50 E814000000          <1>     call .clkHexToBCD
   830 00000C55 B40E                <1>     mov ah, 0Eh
   831 00000C57 B02E                <1>     mov al, "."
   832 00000C59 CD30                <1>     int 30h
   833 00000C5B 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   834 00000C5F E805000000          <1>     call .clkHexToBCD
   835 00000C64 E963FFFFFF          <1>     jmp l1
   836                              <1> .clkHexToBCD:
   837                              <1> ;Converts a Hex byte into two BCD digits
   838                              <1> ;Takes input in each nybble of al
   839 00000C69 53                  <1>     push rbx
   840 00000C6A 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   840 00000C73 00                  <1>
   841 00000C74 31D2                <1>     xor edx, edx
   842 00000C76 48F7F3              <1>     div rbx
   843 00000C79 80C230              <1>     add dl, '0'
   844 00000C7C 80FA39              <1>     cmp dl, '9'
   845 00000C7F 7603                <1>     jbe .chtb0
   846 00000C81 80C207              <1>     add dl, 'A'-'0'-10
   847                              <1> .chtb0:
   848 00000C84 88D1                <1>     mov cl, dl    ;Save remainder byte
   849 00000C86 31D2                <1>     xor edx, edx
   850 00000C88 48F7F3              <1>     div rbx
   851 00000C8B 80C230              <1>     add dl, '0'
   852 00000C8E 80FA39              <1>     cmp dl, '9'
   853 00000C91 7603                <1>     jbe .chtb1
   854 00000C93 80C207              <1>     add dl, 'A'-'0'-10
   855                              <1> .chtb1:
   856 00000C96 88D5                <1>     mov ch, dl    ;Save remainder byte
   857                              <1> 
   858 00000C98 88E8                <1>     mov al, ch    ;Get most sig digit into al
   859 00000C9A B40E                <1>     mov ah, 0Eh
   860 00000C9C CD30                <1>     int 30h
   861 00000C9E 88C8                <1>     mov al, cl    ;Get least sig digit into al
   862 00000CA0 B40E                <1>     mov ah, 0Eh
   863 00000CA2 CD30                <1>     int 30h
   864 00000CA4 5B                  <1>     pop rbx
   865 00000CA5 C3                  <1>     ret
   866                              <1> ;--------------------------------
   867                              <1> ;       PROCS FOR SYSINIT       :
   868                              <1> ;--------------------------------
   869                              <1> adjustDrvHdr:
   870                              <1> ;Input: rsi = Effective address of driver in DOS segment
   871                              <1> ;       rbp = Ptr to the start of the DOS segment
   872                              <1> ;Output: rsi = EA of next header in DOS segment
   873 00000CA6 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   874 00000CA9 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   875 00000CAD 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   876 00000CB1 4881C622000000      <1>     add rsi, drvHdr_size
   877 00000CB8 C3                  <1>     ret
   878                              <1> errorInit:
   879                              <1> ;If a critical error occurs during sysinit, fail through here
   880                              <1> ;Int 42h, 43h and 44h point here during sysinit
   881 00000CB9 488D2D20000000      <1>     lea rbp, hltmsg
   882 00000CC0 B804130000          <1>     mov eax, 1304h
   883 00000CC5 CD30                <1>     int 30h
   884                              <1>     ;cli ;Clear interrupts
   885                              <1>     ;mov al, -1
   886                              <1>     ;mov dx, 0A1h    ;PIC2 data
   887                              <1>     ;out dx, al      ;Mask all lines
   888                              <1>     ;mov dx, 21h     ;PIC1 data
   889                              <1>     ;out dx, al      ;Mask all lines
   890                              <1> .ei0:
   891 00000CC7 F4                  <1>     hlt
   892 00000CC8 EBFD                <1>     jmp short .ei0
   893                              <1> ;--------------------------------
   894                              <1> ;       DATA FOR SYSINIT        :
   895                              <1> ;--------------------------------
   896 00000CCA 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   896 00000CD3 5343502F444F532E2E- <1>
   896 00000CDC 2E0A0D24            <1>
   897 00000CE0 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   897 00000CE9 7469616C6973696E67- <1>
   897 00000CF2 20534350444F532E53- <1>
   897 00000CFB 59532E205379737465- <1>
   897 00000D04 6D2068616C74696E67- <1>
   897 00000D0D 2E2E2E00            <1>
   898 00000D11 434F4E00            <1> conName db "CON",0
   899 00000D15 41555800            <1> auxName db "AUX",0
   900 00000D19 50524E00            <1> prnName db "PRN",0
   901                              <1> intData:
   902 00000D1D [B516000000000000]  <1>     dq terminateProcess ;Int 40h
   903 00000D25 [AA1B000000000000]  <1>     dq functionDispatch ;Int 41h
   904 00000D2D [B90C000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   905 00000D35 [E61C000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
   906 00000D3D [8A17000000000000]  <1>     dq dosDefCritErrHdlr 
   907 00000D45 [5518000000000000]  <1>     dq absDiskRead      ;Int 45h
   908 00000D4D [3718000000000000]  <1>     dq absDiskWrite     ;Int 46h
   909 00000D55 [B716000000000000]  <1>     dq terminateRes     ;Int 47h
   910 00000D5D [E61C000000000000]  <1>     dq defaultIretq     ;Int 48h
   911 00000D65 [E61C000000000000]  <1>     dq defaultIretq     ;Int 49h
   912 00000D6D [E61C000000000000]  <1>     dq defaultIretq     ;Int 4Ah
   913 00000D75 [E61C000000000000]  <1>     dq defaultIretq     ;Int 4Bh
   914 00000D7D [E61C000000000000]  <1>     dq defaultIretq     ;Int 4Ch
   915 00000D85 [E61C000000000000]  <1>     dq defaultIretq     ;Int 4Dh
   916 00000D8D [E61C000000000000]  <1>     dq defaultIretq     ;Int 4Eh
   917 00000D95 [8720000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
   918                              <1> nData:
   919 00000D9D [3E23000000000000]  <1>     dq conHdr
   920 00000DA5 0480                <1>     dw 08004h
   921 00000DA7 [E624000000000000]  <1>     dq nulStrat
   922 00000DAF [EC24000000000000]  <1>     dq nulIntr
   923 00000DB7 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   924                              <1> 
   925                              <1> diskInit:
   926                              <1>     ;We create a function to deal with BPB parsing etc
   927                              <1>     ;Start with the first primary partition on each hard disk (until max)
   928                              <1>     ;   They dont have to be bootable
   929                              <1>     ;Then go back and look for other partitions partitions. 
   930                              <1>     ;   Add each other primary or logical ptn (until max)
   931                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   932                              <1>     ;Use r8 as device counter
   933 00000DBF 488DBD[0D2D0000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
   934 00000DC6 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
   934 00000DCE 00                  <1>
   935 00000DCF 0F84C6000000        <1>     jz .remInit ;No? Go to removables
   936 00000DD5 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   936 00000DDE 00                  <1>
   937 00000DDF B280                <1>     mov dl, 80h ;Start with HDD 0
   938                              <1> .primary:
   939 00000DE1 64803C25[13C00300]- <1>     cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
   939 00000DE9 03                  <1>
   940 00000DEA 0F84AB000000        <1>     je .remInit
   941 00000DF0 31C9                <1>     xor ecx, ecx    ;Sector 0
   942 00000DF2 E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   943 00000DF7 0F8289000000        <1>     jc .primaryEpilog
   944                              <1>     ;Here, check MBR or BPB
   945 00000DFD 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   946 00000E06 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   947                              <1>     ;Now check if BPB or MBR
   948 00000E08 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   949 00000E0A 8A6302              <1>     mov ah, byte [rbx + 2]
   950 00000E0D 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   951 00000E11 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   952                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   953                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   954 00000E13 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   955 00000E1A B104                <1>     mov cl, 4
   956                              <1> .checkPrimary:
   957 00000E1C 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   958 00000E1F 3C01                <1>     cmp al, 01
   959 00000E21 7421                <1>     je .primaryFound
   960 00000E23 3C04                <1>     cmp al, 04
   961 00000E25 741D                <1>     je .primaryFound
   962 00000E27 3C06                <1>     cmp al, 06
   963 00000E29 7419                <1>     je .primaryFound
   964 00000E2B 3C0B                <1>     cmp al, 0Bh
   965 00000E2D 7415                <1>     je .primaryFound
   966 00000E2F 3C0C                <1>     cmp al, 0Ch
   967 00000E31 7411                <1>     je .primaryFound
   968 00000E33 3C0E                <1>     cmp al, 0Eh
   969 00000E35 740D                <1>     je .primaryFound
   970 00000E37 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   971 00000E3E FEC9                <1>     dec cl
   972 00000E40 7444                <1>     jz .primaryEpilog
   973 00000E42 EBD8                <1>     jmp short .checkPrimary
   974                              <1> .primaryFound:
   975                              <1>     ;Copy the first sector of this partition into memory
   976 00000E44 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   977 00000E47 E8E9000000          <1>     call .initReadSector
   978 00000E4C 7238                <1>     jc .primaryEpilog
   979                              <1>     ;Now verify this is a BPB
   980 00000E4E 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   981 00000E50 8A6302              <1>     mov ah, byte [rbx + 2]
   982 00000E53 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   983 00000E57 752D                <1>     jne .primaryEpilog   ;If not, skip
   984                              <1>     ;Now copy data to internal tables
   985 00000E59 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   986 00000E5C B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   987 00000E61 57                  <1>     push rdi
   988 00000E62 F348A5              <1>     rep movsq   ;Copy the BPB
   989 00000E65 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
   990                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   991 00000E66 4A8D9C05[DB2C0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
   992                              <1>     ;Add device count to rbx to point to correct entry
   993 00000E6E 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   994 00000E70 4A8D9CC5[E52C0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
   995 00000E78 488933              <1>     mov qword [rbx], rsi
   996 00000E7B 49FFC0              <1>     inc r8  ;Goto next logical drive
   997 00000E7E 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have
   998                              <1> .primaryEpilog:
   999 00000E86 FEC2                <1>     inc dl  ;Goto next BIOS drive
  1000 00000E88 88D6                <1>     mov dh, dl
  1001 00000E8A 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1002 00000E8D 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1003 00000E95 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1004                              <1> .extended:
  1005                              <1> ;We have gone through all the devices once
  1006                              <1>     ;cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
  1007                              <1>     ;je .remInit ;If yes, get removable devices
  1008                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1009                              <1>     ;xor ecx, ecx    ;Get MBR back
  1010                              <1>     ;call .initReadSector
  1011                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1012                              <1> .remInit:
  1013                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1014 00000E9B 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1015 00000E9E 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1016 00000EA0 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1017                              <1>     ;rdi points to the space for the subsequent bpb's
  1018                              <1> .removables:
  1019 00000EA3 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1020 00000EA5 E88B000000          <1>     call .initReadSector
  1021 00000EAA 7238                <1>     jc .removableEpilogue   ;Goto next device
  1022                              <1>     ;Now verify this is a BPB
  1023 00000EAC 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1024 00000EAE 8A6302              <1>     mov ah, byte [rbx + 2]
  1025 00000EB1 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1026 00000EB5 752D                <1>     jne .removableEpilogue   ;If not, skip
  1027                              <1>     ;Now copy data to internal tables
  1028 00000EB7 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1029 00000EBA B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1030 00000EBF 57                  <1>     push rdi
  1031 00000EC0 F348A5              <1>     rep movsq   ;Copy the BPB
  1032 00000EC3 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1033                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1034 00000EC4 4A8D9C05[DB2C0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1035                              <1>     ;Add device count to rbx to point to correct entry
  1036 00000ECC 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1037 00000ECE 4A8D9CC5[E52C0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1038 00000ED6 488933              <1>     mov qword [rbx], rsi
  1039 00000ED9 49FFC0              <1>     inc r8  ;Goto next logical drive
  1040 00000EDC 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have    
  1041                              <1> .removableEpilogue:
  1042 00000EE4 FEC2                <1>     inc dl  ;Goto next BIOS device now
  1043 00000EE6 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1044 00000EEE 7412                <1>     je .end
  1045 00000EF0 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1046 00000EF7 7403                <1>     je .re0
  1047 00000EF9 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1048                              <1> .re0:
  1049 00000EFC 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1050 00000F00 72A1                <1>     jb .removables
  1051                              <1> .end:
  1052 00000F02 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1052 00000F0A 01                  <1>
  1053 00000F0B 7401                <1>     je .singleRemDev
  1054 00000F0D C3                  <1>     ret
  1055                              <1> .singleRemDev:
  1056                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1057 00000F0E 488D9D[DB2C0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1058 00000F15 8A95[DB2C0000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1059 00000F1B 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1060 00000F1E 488D9D[E52C0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1061 00000F25 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1062 00000F28 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1063 00000F2C 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Gotta register the phantom drive!
  1064 00000F34 C3                  <1>     ret
  1065                              <1> .initReadSector:
  1066                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1067 00000F35 B482                <1>     mov ah, 82h ;Read
  1068 00000F37 B001                <1>     mov al, 1   ;One sector
  1069 00000F39 488D9D[ED020000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1070 00000F40 CD33                <1>     int 33h
  1071 00000F42 C3                  <1>     ret
    12                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    13                                  %include "./Source/BSS/dosSeg.asm"
    14                              <1> ;This file contains the main DOS data segment
    15                              <1> dosAPT: ;Additional Page tables
    16 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    17                              <1> dosDataArea:
    18 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    19 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    20 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    21 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    22 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    23 0003C013 ??                  <1>     numLogDrv   resb 1    ;Number of logical drives in system x
    24 0003C014 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    25 0003C018 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    26 0003C01C ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    27 0003C024 <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    28 0003C04E <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    29                              <1>     ;The device driver header with space for the largest possible packet
    30 0003C078 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    31                              <1> sysVarsPtr:
    32 0003C080 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    33 0003C088 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    34 0003C090 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    35                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    36 0003C098 ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    37                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    38 0003C0A0 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    39 0003C0A2 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    40 0003C0AA ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    41 0003C0B2 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    42 0003C0B3 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    43 0003C0B4 ????                <1>     numFiles    resw 1    ;FILES=5 default
    44 0003C0B6 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    45 0003C0B8 ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    46 0003C0C0 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    47 0003C0C2 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    48 0003C0C3 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    49                              <1> 
    50 0003C0E5 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    51 0003C105 ??                  <1>                 resb 1  ;Alignment byte
    52                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    53 0003C106 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
    54 0003C10E ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    55 0003C10F ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    56 0003C110 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    57 0003C111 ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    58 0003C112 ????                <1>     errorExCde  resw 1  ;Extended Error Code
    59 0003C114 ??                  <1>     errorAction resb 1  ;Suggested action for error  
    60 0003C115 ??                  <1>     errorClass  resb 1  ;Error Class
    61                              <1> 
    62 0003C116 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
    63                              <1> 
    64 0003C11E ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    65 0003C126 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
    66 0003C12E ????                <1>     Int44Error  resw 1  ;Saves Error code from request status word
    67 0003C130 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    68 0003C138 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
    69 0003C13A ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    70 0003C13B ??                  <1>     currentDrv  resb 1  ;Default drive x
    71                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    72 0003C13C ??                  <1>     singleDrv   resb 1  ;Set if last drive accessed was drive B x
    73                              <1> ;This is done to allow for DOS to give the user a change to swap devices
    74 0003C13D ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
    75 0003C13E ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    76                              <1> ;SDA, needs to be replaced between processes
    77 0003C13F ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
    78 0003C147 ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
    79 0003C14F ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
    80 0003C157 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
    81 0003C15F ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    82 0003C167 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    83 0003C168 ??                  <1>     Int44Fail   resb 1  ;Counts the number of fails that have occured
    84 0003C169 ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
    85 0003C16A ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    86 0003C16B ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    87 0003C173 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    88 0003C17B ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    89 0003C183 ??                  <1>     dosInvoke   resb 1  ;FIXED 0, any other value fails calls (-1 = server invoke)
    90 0003C184 ??                  <1>     critExit    resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
    91                              <1> ;The above flag tells DOS to print ^C in the termination function
    92                              <1> 
    93                              <1> ;Time stuff
    94 0003C185 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    95 0003C186 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    96 0003C187 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    97 0003C188 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    98 0003C18A ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    99                              <1> 
   100                              <1> ;Buffers
   101 0003C18B <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   102 0003C20B <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   103 0003C28B ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   104 0003C291 ??                  <1>     singleIObyt resb 1  ;For single IO byte buffers
   105                              <1> ;Misc bookkeeping flags and vars
   106                              <1>     ;secClusConv resb 1  ;For networking, do we convert sector to cluster?
   107 0003C292 ??                  <1>     rwFlag      resb 1  ;00h=Read, 01h=Write
   108 0003C293 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   109 0003C294 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   110 0003C295 ??                  <1>     typePSPcopy resb 1  ;00=Simple copy, -1=Make Child process
   111 0003C296 ??                  <1>     spliceFlag  resb 1  ;01 = file name and directory name together
   112                              <1> 
   113 0003C297 ??                  <1>     workingDrv  resb 1  ;Working drive number
   114 0003C298 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   115 0003C2A0 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   116 0003C2A8 <res 5Bh>           <1>     curDrvCDS   resb cds_size   ;Working cp of CDS of drv being accessed
   117 0003C303 ????????????????    <1>     currentJFT  resq 1  ;Ptr to JFT num in caller PSP of file being accessed
   118 0003C30B ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   119 0003C313 ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   120 0003C315 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   121                              <1> ;Temp vars, used when walking FAT or changing sectors
   122 0003C31D ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   123 0003C325 ????                <1>     entries     resw 1  ;FAT entries per FAT sector
   124                              <1> ;***************************************************|
   125                              <1> ; Needs to be set up before any file access         |
   126                              <1> ; These vars keep track of file access properties   |
   127                              <1> ;   and must be used only for such purposes.        |
   128                              <1> ;***************************************************|
   129 0003C327 ????????            <1>     currClust   resd 1  ;Relative cluster in file being r/w to/from
   130 0003C32B ????????            <1>     currClustA  resd 1  ;Current Cluster (abs) on disk being r/w to/from
   131 0003C32F ??                  <1>     clustFact   resb 1  ;NUMBER of sectors per cluster
   132 0003C330 ??                  <1>     currSect    resb 1  ;Current Sector in Cluster being r/w to/from
   133 0003C331 ????????????????    <1>     currSectA   resq 1  ;Current absolute Sector number on Disk
   134 0003C339 ????                <1>     currByte    resw 1  ;Current Byte in sector being r/w to/from
   135 0003C33B ????????            <1>     currByteA   resd 1  ;Current Byte in file being r/w to/from
   136                              <1> ;***************************************************|
   137 0003C33F ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   138 0003C343 ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   139 0003C347 ????????            <1>     bytesAdded  resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   140 0003C34B ????????            <1>     tfrLen      resd 1  ;Number of bytes/sectors to transfer
   141 0003C34F ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   142                              <1> ;Directory stuff
   143 0003C353 ????????            <1>     dirClust    resd 1  ;Cluster number of current directory
   144 0003C357 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   145 0003C35B ??                  <1>     dirSect     resb 1  ;Sector of current directory
   146 0003C35C ??                  <1>     dirEntry    resb 1  ;32 byte offset in dir sect for file being searched for
   147                              <1> ;Error DPB 
   148 0003C35D ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary  situations
   149                              <1>     
   150                              <1> ;Stacks and scratch SFT
   151 0003C365 <res 528h>          <1>     critStack   resq 165
   152 0003C88D ????????????????    <1>     critStakTop resq 1
   153                              <1> 
   154 0003C895 <res 43h>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   155                              <1> 
   156 0003C8D8 <res 638h>          <1>     AuxStack    resq 199
   157 0003CF10 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   158 0003CF18 <res 638h>          <1>     DiskStack   resq 199
   159 0003D550 ????????????????    <1>     DiskStakTop resq 1
   160 0003D558 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   161                              <1>     dSegLen     equ     $
    14                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    15                                  %include "./Source/Data/staticData.asm"
    16                              <1> 
    17                              <1> ;-----------------------------------:
    18                              <1> ;           Static Data             :
    19                              <1> ;-----------------------------------:
    20 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    21 00000001 01                  <1> dosMinor    db 01h      ;.01
    22 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    22 0000000B 535953              <1>
    23 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    23 00000017 535953              <1>
    24 0000001A 2F                  <1> switchchar  db "/" ;Editable by the Int 41h/ah=37h
    16                                  %include "./Source/Data/dispTbl.asm"
    17                              <1> ;Kernel Dispatch Function Table
    18                              <1> 
    19                              <1> kDispTbl:
    20 0000001B 9E16                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    21 0000001D 840B                <1>     dw stdinReadEcho - kDispTbl       ;AH = 01H, CHAR IO
    22 0000001F F10B                <1>     dw stdoutWrite - kDispTbl         ;AH = 02H, CHAR IO
    23 00000021 2A0C                <1>     dw stdauxRead - kDispTbl          ;AH = 03H, CHAR IO
    24 00000023 2A0C                <1>     dw stdauxWrite - kDispTbl         ;AH = 04H, CHAR IO
    25 00000025 2A0C                <1>     dw stdprnWrite - kDispTbl         ;AH = 05H, CHAR IO
    26 00000027 2A0C                <1>     dw directCONIO - kDispTbl         ;AH = 06H, CHAR IO
    27 00000029 2A0C                <1>     dw waitDirectInNoEcho - kDispTbl  ;AH = 07H, CHAR IO
    28 0000002B 630C                <1>     dw waitStdinNoEcho - kDispTbl     ;AH = 08H, CHAR IO
    29 0000002D 640C                <1>     dw printString - kDispTbl         ;AH = 09H, CHAR IO
    30 0000002F A60C                <1>     dw buffStdinInput - kDispTbl      ;AH = 0AH, CHAR IO
    31 00000031 A60C                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    32 00000033 A60C                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    33 00000035 6E1D                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    34 00000037 8F1D                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    35 00000039 1F0D                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    36 0000003B 1F0D                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    37 0000003D 1F0D                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    38 0000003F 1F0D                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    39 00000041 1F0D                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    40 00000043 1F0D                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    41 00000045 1F0D                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    42 00000047 1F0D                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    43 00000049 1F0D                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    44 0000004B 6B20                <1>     dw return - kDispTbl              ;AH = 18H, RESERVED
    45 0000004D A81D                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    46 0000004F 200D                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    47 00000051 AF1D                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    48 00000053 B11D                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    49 00000055 6B20                <1>     dw return - kDispTbl              ;AH = 1DH, RESERVED
    50 00000057 6B20                <1>     dw return - kDispTbl              ;AH = 1EH, RESERVED
    51 00000059 6C1E                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    52 0000005B 6B20                <1>     dw return - kDispTbl              ;AH = 20H, RESERVED
    53 0000005D 330D                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    54 0000005F 330D                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    55 00000061 330D                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    56 00000063 330D                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    57 00000065 1B1E                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    58 00000067 481E                <1>     dw createNewPSP - kDispTbl        ;AH = 26H, PROCESS MANAGEMENT
    59 00000069 330D                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    60 0000006B 330D                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    61 0000006D 330D                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    62 0000006F 1E0D                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    63 00000071 1E0D                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    64 00000073 1E0D                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    65 00000075 1E0D                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    66 00000077 491E                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    67 00000079 340D                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    68 0000007B 571E                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    69 0000007D 9F16                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    70 0000007F 6E1E                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    71 00000081 231D                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    72 00000083 B51E                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    73 00000085 C61E                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    74 00000087 DB1E                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    75 00000089 A216                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    76 0000008B A216                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    77 0000008D 7408                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    78 0000008F 7408                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    79 00000091 7408                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    80 00000093 470D                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    81 00000095 480D                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    82 00000097 490D                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    83 00000099 4A0D                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    84 0000009B 1F0F                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    85 0000009D 200F                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    86 0000009F 210F                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    87 000000A1 740F                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    88 000000A3 740F                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    89 000000A5 740F                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    90 000000A7 740F                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    91 000000A9 7408                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    92 000000AB 9310                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    93 000000AD B012                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    94 000000AF D913                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    95 000000B1 A016                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    96 000000B3 A116                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
    97 000000B5 441F                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
    98 000000B7 740F                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
    99 000000B9 740F                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   100 000000BB 511D                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   101 000000BD 5A1D                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   102 000000BF 561F                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   103 000000C1 671F                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   104 000000C3 3920                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   105 000000C5 4020                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   106 000000C7 740F                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   107 000000C9 7408                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   108 000000CB 8A15                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   109 000000CD 4120                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   110 000000CF 740F                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   111 000000D1 740F                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   112 000000D3 740F                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   113 000000D5 6A20                <1>     dw getCritErrorInfo - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   114 000000D7 6A20                <1>     dw networkServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   115 000000D9 6A20                <1>     dw networkRedirection - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   116 000000DB 7408                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   117 000000DD 6B20                <1>     dw return - kDispTbl              ;AH = 61H, RESERVED
   118 000000DF 631D                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   119 000000E1 6B20                <1>     dw return - kDispTbl              ;AH = 63H, RESERVED
   120 000000E3 6C1D                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   121 000000E5 A216                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   122 000000E7 A216                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   123 000000E9 740F                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   124 000000EB 740F                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   125 000000ED 6B20                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   126                              <1> kDispTblL  equ $ - kDispTbl 
   127                              <1> 
   128                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   129 000000EF B91F                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   130                              <1> mDispTblL   equ     $ - mDispTbl
    17                                  %include "./Source/Debug/debug.asm"
    18                              <1> ;This file contains debugging macros, procs and strings
    19                              <1> ; that we can use to output to COM1 bypassing the operating system.
    20                              <1> ;A serial terminal must be connected for this to work.
    21                              <1> 
    22                              <1> ;Variables and equates
    23                              <1> 
    24 000000F1 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    25                              <1> 
    26 000000F9 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    26 00000102 39414243444546      <1>
    27                              <1> ;Common procedures
    28                              <1> debMakeDebuggerRespond:
    29 00000109 488D2D26000000      <1>     lea rbp, .msg
    30 00000110 E8AF000000          <1>     call debPrintNullString
    31 00000115 B900001000          <1>     mov ecx, 100000h
    32                              <1> .waiting:
    33 0000011A FFC9                <1>     dec ecx
    34 0000011C 740C                <1>     jz .timeout
    35 0000011E B402                <1>     mov ah, 02h ;Blocking recieve!
    36 00000120 31D2                <1>     xor edx, edx
    37 00000122 CD34                <1>     int 34h
    38 00000124 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    39 00000127 75F1                <1>     jnz .waiting
    40 00000129 C3                  <1>     ret
    41                              <1> .timeout:
    42 0000012A 488D2D47000000      <1>     lea rbp, .msg2
    43 00000131 E98E000000          <1>     jmp debPrintNullString
    44 00000136 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    44 0000013F 6B6579206174207468- <1>
    44 00000148 65207465726D696E61- <1>
    44 00000151 6C20746F20636F6E74- <1>
    44 0000015A 696E7565206F722077- <1>
    44 00000163 61697420666F722074- <1>
    44 0000016C 696D656F75742E2E2E- <1>
    44 00000175 0A0D00              <1>
    45 00000178 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    45 00000181 436F6E74696E75696E- <1>
    45 0000018A 672E2E2E0A0D00      <1>
    46                              <1> debPrintHexByte:
    47                              <1> ;Print the hex byte in al as a hex value
    48 00000191 52                  <1>     push rdx
    49 00000192 53                  <1>     push rbx
    50 00000193 50                  <1>     push rax
    51                              <1> 
    52 00000194 88C2                <1>     mov dl, al           ;save byte in dl
    53 00000196 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    54 0000019A 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    55 0000019F 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    56 000001A3 E80C000000          <1>     call .wrchar
    57 000001A8 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    58 000001AB E804000000          <1>     call .wrchar
    59                              <1> 
    60 000001B0 58                  <1>     pop rax
    61 000001B1 5B                  <1>     pop rbx
    62 000001B2 5A                  <1>     pop rdx
    63 000001B3 C3                  <1>     ret
    64                              <1> .wrchar:
    65 000001B4 6687DB              <1>     xchg bx, bx
    66 000001B7 488D1D3BFFFFFF      <1>     lea rbx, debascii
    67 000001BE D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    68 000001BF B401                <1>     mov ah, 01h
    69 000001C1 CD34                <1>     int 34h  ;print char
    70 000001C3 C3                  <1>     ret
    71                              <1> 
    72                              <1> debPrintNullString:
    73                              <1> ;Print a null terminated string pointed to by rbp
    74 000001C4 56                  <1>     push rsi
    75 000001C5 50                  <1>     push rax
    76 000001C6 52                  <1>     push rdx
    77 000001C7 31D2                <1>     xor edx, edx    ;Select COM1
    78 000001C9 4889EE              <1>     mov rsi, rbp
    79                              <1> .getChar:
    80 000001CC AC                  <1>     lodsb
    81 000001CD 84C0                <1>     test al, al
    82 000001CF 7406                <1>     jz .exit
    83 000001D1 B401                <1>     mov ah, 01h
    84 000001D3 CD34                <1>     int 34h
    85 000001D5 EBF5                <1>     jmp short .getChar
    86                              <1> .exit:
    87 000001D7 5A                  <1>     pop rdx
    88 000001D8 58                  <1>     pop rax
    89 000001D9 5E                  <1>     pop rsi
    90 000001DA C3                  <1>     ret
    91                              <1> 
    92                              <1> debPrintDOSStack:
    93                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    94                              <1> ;Shows me which function, and parameters passed and returned
    95 000001DB 488D2DA5010000      <1>     lea rbp, .a1
    96 000001E2 E8DDFFFFFF          <1>     call debPrintNullString
    97 000001E7 488B15(73C10300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
    98 000001EE 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
    99 000001F5 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   100 000001F8 E802030000          <1>     call overlayQword
   101 000001FD 4881C316000000      <1>     add rbx, 22
   102 00000204 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   103 00000208 E8F2020000          <1>     call overlayQword
   104 0000020D 4881C316000000      <1>     add rbx, 22
   105 00000214 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   106 00000218 E8E2020000          <1>     call overlayQword
   107 0000021D 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   108 00000224 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   109 00000228 E8D2020000          <1>     call overlayQword
   110 0000022D 4881C316000000      <1>     add rbx, 22 
   111 00000234 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   112 00000238 E8C2020000          <1>     call overlayQword
   113 0000023D 4881C316000000      <1>     add rbx, 22
   114 00000244 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   115 00000248 E8B2020000          <1>     call overlayQword
   116 0000024D 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   117 00000254 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   118 00000258 E8A2020000          <1>     call overlayQword
   119 0000025D 4881C316000000      <1>     add rbx, 22
   120 00000264 488B05(73C10300)    <1>     mov rax, qword [oldRSP]
   121 0000026B 480560000000        <1>     add rax, callerFrame_size
   122 00000271 E889020000          <1>     call overlayQword
   123 00000276 4881C316000000      <1>     add rbx, 22
   124 0000027D 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   125 00000281 E879020000          <1>     call overlayQword
   126 00000286 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   127 0000028D 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   128 00000291 E869020000          <1>     call overlayQword
   129 00000296 488D2D06000000      <1>     lea rbp, .a0
   130 0000029D E822FFFFFF          <1>     call debPrintNullString
   131 000002A2 C3                  <1>     ret
   132                              <1> 
   133 000002A3 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   133 000002AC 303030303030303030- <1>
   133 000002B5 30306820            <1>
   134 000002B9 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   134 000002C2 303030303030303030- <1>
   134 000002CB 30306820            <1>
   135 000002CF 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   135 000002D8 303030303030303030- <1>
   135 000002E1 30306820            <1>
   136 000002E5 0A0D                <1>     db  0Ah,0Dh
   137 000002E7 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   137 000002F0 303030303030303030- <1>
   137 000002F9 30306820            <1>
   138 000002FD 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   138 00000306 303030303030303030- <1>
   138 0000030F 30306820            <1>
   139 00000313 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   139 0000031C 303030303030303030- <1>
   139 00000325 30306820            <1>
   140 00000329 0A0D                <1>     db 0Ah, 0Dh
   141 0000032B 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   141 00000334 303030303030303030- <1>
   141 0000033D 30306820            <1>
   142 00000341 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   142 0000034A 303030303030303030- <1>
   142 00000353 30306820            <1>
   143 00000357 7269703D3030303030- <1>     db "rip=0000000000000000h"
   143 00000360 303030303030303030- <1>
   143 00000369 303068              <1>
   144 0000036C 0A0D                <1>     db 0Ah, 0Dh
   145 0000036E 666C673D3030303030- <1>     db "flg=0000000000000000h "
   145 00000377 303030303030303030- <1>
   145 00000380 30306820            <1>
   146 00000384 0A0D00              <1>     db 0Ah,0Dh,0
   147 00000387 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   147 00000390 206F6E20496E742034- <1>
   147 00000399 316820737461636B0A- <1>
   147 000003A2 0D00                <1>
   148                              <1> 
   149                              <1> debDPBptr:
   150                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   151 000003A4 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   152 000003AB 4889E8              <1>     mov rax, rbp
   153 000003AE E84C010000          <1>     call overlayQword
   154 000003B3 488D2D06000000      <1>     lea rbp, .dpb
   155 000003BA E805FEFFFF          <1>     call debPrintNullString
   156 000003BF C3                  <1>     ret
   157                              <1> .dpb: 
   158 000003C0 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   158 000003C9 203030303030303030- <1>
   158 000003D2 303030303030303068- <1>
   158 000003DB 200A0D00            <1>
   159                              <1> 
   160                              <1> debDPBBPBptr:
   161                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   162                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   163 000003DF 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   164 000003E6 4889E8              <1>     mov rax, rbp
   165 000003E9 E811010000          <1>     call overlayQword
   166 000003EE 4881C321000000      <1>     add rbx, 33
   167 000003F5 4889F0              <1>     mov rax, rsi
   168 000003F8 E802010000          <1>     call overlayQword
   169 000003FD 488D2D06000000      <1>     lea rbp, .dpb
   170 00000404 E8BBFDFFFF          <1>     call debPrintNullString
   171 00000409 C3                  <1>     ret
   172                              <1> .dpb: 
   173 0000040A 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   173 00000413 203030303030303030- <1>
   173 0000041C 303030303030303068- <1>
   173 00000425 2066726F6D20        <1>
   174 0000042B 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   174 00000434 203030303030303030- <1>
   174 0000043D 303030303030303068- <1>
   174 00000446 200A0D00            <1>
   175                              <1> overlayByte:
   176                              <1>     ;Called with number in rax
   177                              <1>     ;pointer to START of 16 byte space for number in rbx
   178 0000044A 53                  <1>     push rbx
   179 0000044B 51                  <1>     push rcx
   180 0000044C 52                  <1>     push rdx
   181 0000044D 55                  <1>     push rbp
   182 0000044E 4889DD              <1>     mov rbp, rbx
   183 00000451 4889C2              <1>     mov rdx, rax
   184 00000454 48FFC5              <1>     inc rbp ;Go to end of number
   185                              <1> 
   186 00000457 488D1D9BFCFFFF      <1>     lea rbx, debascii
   187 0000045E 88D0                <1>     mov al, dl  ;Go low nybble first
   188 00000460 240F                <1>     and al, 0Fh
   189 00000462 D7                  <1>     xlatb
   190 00000463 884500              <1>     mov byte [rbp], al
   191 00000466 48FFCD              <1>     dec rbp ;Go down one char pos
   192 00000469 88D0                <1>     mov al, dl
   193 0000046B 24F0                <1>     and al, 0F0h    ;Hi nybble next
   194 0000046D C0E804              <1>     shr al, 4   ;Shift hi nybble low
   195 00000470 D7                  <1>     xlatb
   196 00000471 884500              <1>     mov byte [rbp], al  ;Store char
   197                              <1> 
   198 00000474 5D                  <1>     pop rbp
   199 00000475 5A                  <1>     pop rdx
   200 00000476 59                  <1>     pop rcx
   201 00000477 5B                  <1>     pop rbx
   202 00000478 C3                  <1>     ret
   203                              <1> 
   204                              <1> overlayWord:
   205                              <1>     ;Called with number in rax
   206                              <1>     ;pointer to START of 16 byte space for number in rbx
   207 00000479 53                  <1>     push rbx
   208 0000047A 51                  <1>     push rcx
   209 0000047B 52                  <1>     push rdx
   210 0000047C 55                  <1>     push rbp
   211 0000047D 4889DD              <1>     mov rbp, rbx
   212 00000480 4889C2              <1>     mov rdx, rax
   213 00000483 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   214 0000048A B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   215 0000048F 488D1D63FCFFFF      <1>     lea rbx, debascii
   216                              <1> .ow0:
   217 00000496 88D0                <1>     mov al, dl  ;Go low nybble first
   218 00000498 240F                <1>     and al, 0Fh
   219 0000049A D7                  <1>     xlatb
   220 0000049B 884500              <1>     mov byte [rbp], al
   221 0000049E 48FFCD              <1>     dec rbp ;Go down one char pos
   222 000004A1 88D0                <1>     mov al, dl
   223 000004A3 24F0                <1>     and al, 0F0h    ;Hi nybble next
   224 000004A5 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   225 000004A8 D7                  <1>     xlatb
   226 000004A9 884500              <1>     mov byte [rbp], al  ;Store char
   227 000004AC 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   228 000004B0 48FFCD              <1>     dec rbp
   229 000004B3 FFC9                <1>     dec ecx
   230 000004B5 75DF                <1>     jnz .ow0
   231 000004B7 5D                  <1>     pop rbp
   232 000004B8 5A                  <1>     pop rdx
   233 000004B9 59                  <1>     pop rcx
   234 000004BA 5B                  <1>     pop rbx
   235 000004BB C3                  <1>     ret
   236                              <1> 
   237                              <1> overlayDword:
   238                              <1>     ;Called with number in rax
   239                              <1>     ;pointer to START of 16 byte space for number in rbx
   240 000004BC 53                  <1>     push rbx
   241 000004BD 51                  <1>     push rcx
   242 000004BE 52                  <1>     push rdx
   243 000004BF 55                  <1>     push rbp
   244 000004C0 4889DD              <1>     mov rbp, rbx
   245 000004C3 4889C2              <1>     mov rdx, rax
   246 000004C6 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   247 000004CD B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   248 000004D2 488D1D20FCFFFF      <1>     lea rbx, debascii
   249                              <1> .od0:
   250 000004D9 88D0                <1>     mov al, dl  ;Go low nybble first
   251 000004DB 240F                <1>     and al, 0Fh
   252 000004DD D7                  <1>     xlatb
   253 000004DE 884500              <1>     mov byte [rbp], al
   254 000004E1 48FFCD              <1>     dec rbp ;Go down one char pos
   255 000004E4 88D0                <1>     mov al, dl
   256 000004E6 24F0                <1>     and al, 0F0h    ;Hi nybble next
   257 000004E8 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   258 000004EB D7                  <1>     xlatb
   259 000004EC 884500              <1>     mov byte [rbp], al  ;Store char
   260 000004EF 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   261 000004F3 48FFCD              <1>     dec rbp
   262 000004F6 FFC9                <1>     dec ecx
   263 000004F8 75DF                <1>     jnz .od0
   264 000004FA 5D                  <1>     pop rbp
   265 000004FB 5A                  <1>     pop rdx
   266 000004FC 59                  <1>     pop rcx
   267 000004FD 5B                  <1>     pop rbx
   268 000004FE C3                  <1>     ret
   269                              <1> 
   270                              <1> overlayQword:
   271                              <1>     ;Called with number in rax
   272                              <1>     ;pointer to START of 16 byte space for number in rbx
   273 000004FF 53                  <1>     push rbx
   274 00000500 51                  <1>     push rcx
   275 00000501 52                  <1>     push rdx
   276 00000502 55                  <1>     push rbp
   277 00000503 4889DD              <1>     mov rbp, rbx
   278 00000506 4889C2              <1>     mov rdx, rax
   279 00000509 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   280 00000510 B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   281 00000515 488D1DDDFBFFFF      <1>     lea rbx, debascii
   282                              <1> .oq0:
   283 0000051C 88D0                <1>     mov al, dl  ;Go low nybble first
   284 0000051E 240F                <1>     and al, 0Fh
   285 00000520 D7                  <1>     xlatb
   286 00000521 884500              <1>     mov byte [rbp], al
   287 00000524 48FFCD              <1>     dec rbp ;Go down one char pos
   288 00000527 88D0                <1>     mov al, dl
   289 00000529 24F0                <1>     and al, 0F0h    ;Hi nybble next
   290 0000052B C0E804              <1>     shr al, 4   ;Shift hi nybble low
   291 0000052E D7                  <1>     xlatb
   292 0000052F 884500              <1>     mov byte [rbp], al  ;Store char
   293 00000532 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   294 00000536 48FFCD              <1>     dec rbp
   295 00000539 FFC9                <1>     dec ecx
   296 0000053B 75DF                <1>     jnz .oq0
   297 0000053D 5D                  <1>     pop rbp
   298 0000053E 5A                  <1>     pop rdx
   299 0000053F 59                  <1>     pop rcx
   300 00000540 5B                  <1>     pop rbx
   301 00000541 C3                  <1>     ret
   302                              <1> 
   303                              <1> debPrintFunctionName:
   304                              <1> ;Prints the DOS function that has been entered
   305                              <1> ;Entered with ah = Function number
   306 00000542 88E0                <1>     mov al, ah  ;Get dos function number
   307 00000544 488D1DAEFBFFFF      <1>     lea rbx, debascii
   308 0000054B 488D1535000000      <1>     lea rdx, .number
   309 00000552 24F0                <1>     and al, 0F0h    ;Get high nybble first
   310 00000554 C0E804              <1>     shr al, 4
   311 00000557 D7                  <1>     xlatb
   312 00000558 8802                <1>     mov byte [rdx], al
   313 0000055A 88E0                <1>     mov al, ah
   314 0000055C 240F                <1>     and al, 0Fh
   315 0000055E D7                  <1>     xlatb
   316 0000055F 884201              <1>     mov byte [rdx + 1], al
   317 00000562 488D2D06000000      <1>     lea rbp, .dosString
   318 00000569 E856FCFFFF          <1>     call debPrintNullString
   319 0000056E C3                  <1>     ret
   320 0000056F 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   320 00000578 696F6E20496E742034- <1>
   320 00000581 31682F41483D        <1>
   321 00000587 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   322                              <1> 
   323                              <1> ;----------------:
   324                              <1> ;!!!! MACROS !!!!:
   325                              <1> ;----------------:
   326                              <1> ;Insert macro when entering a debug block
   327                              <1> %macro debugEnterM 0
   328                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   329                              <1>     mov rsp, debStackTop
   330                              <1> ;Push all registers except rsp on stack
   331                              <1>     push rax
   332                              <1>     push rbx
   333                              <1>     push rcx
   334                              <1>     push rdx
   335                              <1>     push rsi
   336                              <1>     push rdi
   337                              <1>     push rbp
   338                              <1>     push r8
   339                              <1>     push r9
   340                              <1>     push r10
   341                              <1>     push r11
   342                              <1>     push r12
   343                              <1>     push r13
   344                              <1>     push r14
   345                              <1>     push r15
   346                              <1>     pushfq
   347                              <1> %endmacro
   348                              <1> ;Insert macro when exiting a debug block
   349                              <1> %macro debugExitM 0
   350                              <1>     popfq
   351                              <1>     pop r15
   352                              <1>     pop r14
   353                              <1>     pop r13
   354                              <1>     pop r12
   355                              <1>     pop r11
   356                              <1>     pop r10
   357                              <1>     pop r9
   358                              <1>     pop r8
   359                              <1>     pop rbp
   360                              <1>     pop rdi
   361                              <1>     pop rsi
   362                              <1>     pop rdx
   363                              <1>     pop rcx
   364                              <1>     pop rbx
   365                              <1>     pop rax
   366                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   367                              <1> %endmacro
    18                                  %include "./Source/Kernel/FAT/bufferFunctions.asm"
    19                              <1> ;This file contains FAT disk buffer related functions that
    20                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    21                              <1> ;----------------------------------------------------
    22                              <1> ;           Externally referenced functions         :
    23                              <1> ;----------------------------------------------------
    24                              <1> testDirtyBufferForDrive:    ;External linkage
    25                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
    26                              <1> ;Input: al = Drive number (0 based)
    27                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
    28                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
    29 0000058D 53                  <1>     push rbx
    30 0000058E 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
    31                              <1> .tdbfdCheckBuffer:
    32 00000595 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
    33 00000598 7509                <1>     jne .tdbfdGotoNextBuffer
    34 0000059A F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
    35 0000059E 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
    36 000005A0 F9                  <1>     stc ;Else dirty buffer found, set carry flag
    37                              <1> .tdbfdExit:
    38 000005A1 5B                  <1>     pop rbx
    39 000005A2 C3                  <1>     ret
    40                              <1> .tdbfdGotoNextBuffer:
    41 000005A3 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
    42 000005A6 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
    43 000005AD 74F2                <1>     je .tdbfdExit
    44 000005AF EBE4                <1>     jmp short .tdbfdCheckBuffer
    45                              <1> 
    46                              <1> freeBuffersForDPB:
    47                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
    48                              <1> ; to have a drive number of -1, thus freeing it
    49                              <1> ;Given DPB is in rbp
    50 000005B1 53                  <1>     push rbx
    51 000005B2 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
    52                              <1> .i0:
    53 000005B9 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
    54 000005BD 7506                <1>     jne .i1 ;If no, skip freeing
    55 000005BF 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
    56                              <1> .i1:
    57 000005C5 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
    58 000005C8 4881FBFFFFFFFF      <1>     cmp rbx, -1
    59 000005CF 75E8                <1>     jne .i0
    60                              <1> .exit:
    61 000005D1 5B                  <1>     pop rbx
    62 000005D2 C3                  <1>     ret
    63                              <1> 
    64                              <1> 
    65                              <1> freeBuffersForDrive:
    66                              <1> ;Walks the buffer chain and sets ALL buffers with the given drive number 
    67                              <1> ; to have a drive number of -1, thus freeing it
    68                              <1> ;Given drive number is in al
    69 000005D3 53                  <1>     push rbx
    70 000005D4 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
    71                              <1> .i0:
    72 000005DB 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al  ;Chosen drive?
    73 000005DE 7506                <1>     jne .i1 ;If no, skip freeing
    74 000005E0 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
    75                              <1> .i1:
    76 000005E6 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
    77 000005E9 4881FBFFFFFFFF      <1>     cmp rbx, -1
    78 000005F0 75E9                <1>     jne .i0
    79                              <1> .exit:
    80 000005F2 5B                  <1>     pop rbx
    81 000005F3 C3                  <1>     ret
    82                              <1> 
    83                              <1> 
    84                              <1> getBuffer: ;External Linkage (dosPrim.asm, fat.asm)
    85                              <1> ;
    86                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
    87                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
    88                              <1> ;Flushes if not in disk change mode. 
    89                              <1> ;If in disk change mode, will check to see if the selected buffer 
    90                              <1> ; has data referring a device using the same DPB as we are changing.
    91                              <1> ; If it is, skip flushing, if not, flush first!
    92                              <1> ;
    93                              <1> ;This function will return a pointer to the desired data sector OR 
    94                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
    95                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
    96                              <1> ;Entry: rax = Sector to read
    97                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
    98                              <1> ;       qword [workingDPB] = DPB to use for transaction
    99                              <1> ;Exit:  CF=NC => 
   100                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   101                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   102 000005F4 51                  <1>     push rcx
   103 000005F5 52                  <1>     push rdx
   104 000005F6 56                  <1>     push rsi
   105 000005F7 57                  <1>     push rdi
   106 000005F8 488B35(98C20300)    <1>     mov rsi, qword [workingDPB]  ;Get DPB of transacting device
   107 000005FF 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   108 00000601 E847020000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   109 00000606 4881FFFFFFFFFF      <1>     cmp rdi, -1
   110 0000060D 740D                <1>     je .rbReadNewSector
   111                              <1> .rbExit:
   112 0000060F F8                  <1>     clc
   113                              <1> .rbExitNoFlag:
   114 00000610 5F                  <1>     pop rdi
   115 00000611 5E                  <1>     pop rsi
   116 00000612 5A                  <1>     pop rdx
   117 00000613 59                  <1>     pop rcx
   118 00000614 488B1D(15C30300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   119 0000061B C3                  <1>     ret
   120                              <1> .rbReadNewSector:
   121 0000061C E8D5010000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   122 00000621 803D(58D50300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   123 00000628 7506                <1>     jne .flush  ;We are not, flush buffer
   124 0000062A 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   125 0000062E 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used
   126                              <1> .flush:
   127 00000630 E8DF000000          <1>     call flushAndFreeBuffer
   128 00000635 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   129                              <1> .skipFlush:
   130                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   131 00000637 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   132 0000063A 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
   133 0000063D 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   134 00000641 80F902              <1>     cmp cl, fatBuffer
   135 00000644 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   136 00000646 7503                <1>     jne .rbNonFATbuffer
   137 00000648 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   138                              <1> .rbNonFATbuffer:
   139 0000064B 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   140 0000064E 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   141 00000651 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   142 00000654 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   143 00000658 C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   144 0000065C E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   145 00000661 EBAD                <1>     jmp short .rbExitNoFlag
   146                              <1> 
   147                              <1> ;----------------------------------------------------
   148                              <1> ;           Internally referenced functions         :
   149                              <1> ;----------------------------------------------------
   150                              <1> 
   151                              <1> readSectorBuffer:   ;Internal Linkage
   152                              <1> ;Reads a sector into a built sector buffer
   153                              <1> ;Entry: rdi = Pointer to buffer header
   154                              <1> ;Exit:  CF=NC : Success
   155                              <1> ;       CF=CY : Fail, terminate the request
   156                              <1> ;       rbx pointing to buffer header
   157                              <1> ;First make request to device driver
   158 00000663 50                  <1>     push rax
   159 00000664 53                  <1>     push rbx
   160 00000665 51                  <1>     push rcx
   161 00000666 52                  <1>     push rdx
   162 00000667 56                  <1>     push rsi
   163 00000668 55                  <1>     push rbp
   164                              <1> .rsRequest0:
   165 00000669 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   166 0000066E F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   167 00000672 7406                <1>     jz .rsRequest1
   168 00000674 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   169                              <1> .rsRequest1:
   170 0000067A 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   171 0000067D B901000000          <1>     mov ecx, 1  ;One sector to copy
   172 00000682 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   173 00000686 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   174 0000068A 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   175 0000068E E82C140000          <1>     call diskReadSetup  ;Setup request (preserves setup registers)
   176 00000693 E818120000          <1>     call absDiskDriverCall    ;Make Driver Request
   177 00000698 7508                <1>     jnz .rsFail
   178                              <1> .rsExit:
   179 0000069A F8                  <1>     clc
   180                              <1> .rsExitFail:
   181 0000069B 5D                  <1>     pop rbp
   182 0000069C 5E                  <1>     pop rsi
   183 0000069D 5A                  <1>     pop rdx
   184 0000069E 59                  <1>     pop rcx
   185 0000069F 5B                  <1>     pop rbx
   186 000006A0 58                  <1>     pop rax
   187 000006A1 C3                  <1>     ret
   188                              <1> .rsFail:
   189                              <1> ;Enter here only if the request failed
   190 000006A2 FFCE                <1>     dec esi
   191 000006A4 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   192                              <1> ;Request failed thrice, critical error call
   193 000006A6 48893D(57C10300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   194 000006AD 48892D(5DC30300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   195 000006B4 89C7                <1>     mov edi, eax    ;Save status word in di
   196 000006B6 48892D(5DC30300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   197 000006BD 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   198 000006C0 B418                <1>     mov ah, critRead | critFailOK | critRetryOK ;Set bits
   199                              <1>     ;Test for correct buffer data type
   200 000006C2 F6C401              <1>     test ah, dosBuffer
   201 000006C5 7505                <1>     jnz .rsFail0
   202 000006C7 80CC00              <1>     or ah, critDOS
   203 000006CA EB14                <1>     jmp short .rsFailMain
   204                              <1> .rsFail0:
   205 000006CC F6C402              <1>     test ah, fatBuffer
   206 000006CF 7504                <1>     jnz .rsFail1
   207 000006D1 B402                <1>     mov ah, critFAT
   208 000006D3 EB0B                <1>     jmp short .rsFailMain
   209                              <1> .rsFail1:
   210 000006D5 F6C404              <1>     test ah, dirBuffer
   211 000006D8 7504                <1>     jnz .rsFail2
   212 000006DA B404                <1>     mov ah, critDir
   213 000006DC EB02                <1>     jmp short .rsFailMain
   214                              <1> .rsFail2:
   215                              <1> ;Here it must be a data buffer
   216 000006DE B406                <1>     mov ah, critData
   217                              <1> .rsFailMain:
   218 000006E0 8825(67C10300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   219 000006E6 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
   220 000006EA E8CF0F0000          <1>     call criticalDOSError
   221 000006EF 488B3D(57C10300)    <1>     mov rdi, qword [xInt44RDI]
   222 000006F6 488B2D(5DC30300)    <1>     mov rbp, qword [tmpDPBPtr]
   223 000006FD 3C01                <1>     cmp al, critRetry
   224 000006FF 0F8464FFFFFF        <1>     je .rsRequest0
   225                              <1>     ;Else we fail (Ignore=Fail here)
   226 00000705 66C705(12C10300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   226 0000070D 00                  <1>
   227 0000070E F9                  <1>     stc ;Set error flag to indicate fail
   228 0000070F E987FFFFFF          <1>     jmp .rsExitFail
   229                              <1> 
   230                              <1> flushAndFreeBuffer:    ;Internal Linkage Int 4Fh AX=1209h
   231 00000714 E809000000          <1>     call flushBuffer
   232 00000719 7306                <1>     jnc .exit
   233                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
   234 0000071B 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
   235                              <1> .exit:
   236 00000721 C3                  <1>     ret
   237                              <1> flushBuffer:
   238                              <1> ;Flushes the data in a sector buffer to disk!
   239                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   240                              <1> ;Exit:  CF=NC : Success
   241                              <1> ;       CF=CY : Fail, terminate the request
   242                              <1> ;First make request to device driver
   243 00000722 50                  <1>     push rax
   244 00000723 53                  <1>     push rbx
   245 00000724 51                  <1>     push rcx
   246 00000725 52                  <1>     push rdx
   247 00000726 56                  <1>     push rsi
   248 00000727 55                  <1>     push rbp
   249 00000728 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   250 0000072C 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   251                              <1> .fbRequest0:
   252 0000072E BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   253 00000733 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   254 00000737 7406                <1>     jz .fbRequest1
   255 00000739 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   256                              <1> .fbRequest1:
   257 0000073F 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   258 00000742 B901000000          <1>     mov ecx, 1  ;One sector to copy
   259 00000747 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   260 0000074B 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   261 0000074F 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   262 00000753 E85C130000          <1>     call diskWriteSetup  ;Setup request (preserves setup registers)
   263 00000758 E853110000          <1>     call absDiskDriverCall    ;Make Driver Request
   264 0000075D 7525                <1>     jnz .fbFail
   265                              <1> ;Now check if the buffer was a FAT, to write additional copies
   266 0000075F F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   267 00000763 7417                <1>     jz .fbFreeExit  ;If not, exit
   268 00000765 FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   269 00000768 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   270 0000076A 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   271 0000076D 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   272 00000771 E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   273                              <1> .fbFreeExit1:
   274 00000776 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   275 00000779 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   276                              <1> .fbFreeExit:
   277 0000077C F8                  <1>     clc
   278                              <1> .fbExitFail:
   279 0000077D 5D                  <1>     pop rbp
   280 0000077E 5E                  <1>     pop rsi
   281 0000077F 5A                  <1>     pop rdx
   282 00000780 59                  <1>     pop rcx
   283 00000781 5B                  <1>     pop rbx
   284 00000782 58                  <1>     pop rax
   285 00000783 C3                  <1>     ret
   286                              <1> .fbFail:
   287                              <1> ;Enter here only if the request failed
   288 00000784 FFCE                <1>     dec esi
   289 00000786 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   290                              <1> ;Request failed thrice, critical error call
   291 00000788 48893D(57C10300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   292 0000078F 48892D(5DC30300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   293 00000796 89C7                <1>     mov edi, eax    ;Save status word in di
   294 00000798 48892D(5DC30300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   295 0000079F 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   296 000007A2 B419                <1>     mov ah, critWrite | critFailOK | critRetryOK ;Set bits
   297                              <1>     ;Test for correct buffer data type
   298 000007A4 F6C401              <1>     test ah, dosBuffer
   299 000007A7 7505                <1>     jnz .fbFail0
   300 000007A9 80CC00              <1>     or ah, critDOS
   301 000007AC EB14                <1>     jmp short .fbFailMain
   302                              <1> .fbFail0:
   303 000007AE F6C402              <1>     test ah, fatBuffer
   304 000007B1 7504                <1>     jnz .fbFail1
   305 000007B3 B402                <1>     mov ah, critFAT
   306 000007B5 EB0B                <1>     jmp short .fbFailMain
   307                              <1> .fbFail1:
   308 000007B7 F6C404              <1>     test ah, dirBuffer
   309 000007BA 7504                <1>     jnz .fbFail2
   310 000007BC B404                <1>     mov ah, critDir
   311 000007BE EB02                <1>     jmp short .fbFailMain
   312                              <1> .fbFail2:
   313                              <1> ;Here it must be a data buffer
   314 000007C0 B406                <1>     mov ah, critData
   315                              <1> .fbFailMain:
   316 000007C2 8825(67C10300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   317 000007C8 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
   318 000007CC E8ED0E0000          <1>     call criticalDOSError   ;Return in al the return code
   319 000007D1 488B3D(57C10300)    <1>     mov rdi, qword [xInt44RDI]
   320 000007D8 488B2D(5DC30300)    <1>     mov rbp, qword [tmpDPBPtr]
   321 000007DF 3C01                <1>     cmp al, critRetry
   322 000007E1 0F8447FFFFFF        <1>     je .fbRequest0
   323                              <1>     ;Else we fail (Ignore=Fail here)
   324 000007E7 66C705(12C10300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   324 000007EF 00                  <1>
   325 000007F0 F9                  <1>     stc ;Set error flag to indicate fail
   326 000007F1 E987FFFFFF          <1>     jmp .fbExitFail
   327                              <1>     
   328                              <1> findLRUBuffer: ;Internal Linkage
   329                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   330                              <1> ; in rbx and the currBuff variable
   331                              <1> ;Input: Nothing
   332                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   333                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   334 000007F6 52                  <1>     push rdx
   335 000007F7 488B3D(A2C00300)    <1>     mov rdi, qword [bufHeadPtr]
   336 000007FE 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   337 00000802 7436                <1>     je .flbExit 
   338 00000804 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   339 0000080B 742D                <1>     je .flbExit
   340                              <1> .flbWalk:
   341 0000080D 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   342 00000810 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   343 00000813 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   344 00000817 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   345 00000819 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   346 00000820 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   347 00000822 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   348                              <1> .flbHeadLink:
   349 00000829 488B15(A2C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   350 00000830 48893D(A2C00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   351 00000837 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   352                              <1> .flbExit:
   353 0000083A 5A                  <1>     pop rdx
   354 0000083B 48893D(15C30300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   355 00000842 C3                  <1>     ret
   356                              <1> .flbFreeLink:
   357 00000843 51                  <1>     push rcx
   358 00000844 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   359 00000847 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   360 0000084A 59                  <1>     pop rcx
   361 0000084B EBDC                <1>     jmp short .flbHeadLink
   362                              <1> 
   363                              <1> findSectorInBuffer:     ;Internal linkage
   364                              <1> ;Finds the Buffer for a sector
   365                              <1> ;If the sector is not in a buffer, returns with a -1
   366                              <1> ;Input: rax = Sector number
   367                              <1> ;        dl = Drive number
   368                              <1> ;Output: rdi = Buffer hdr pointer or -1
   369 0000084D 488B3D(A2C00300)    <1>     mov rdi, qword [bufHeadPtr]
   370                              <1> .fsiCheckBuffer:
   371 00000854 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   372 00000857 7507                <1>     jne .fsiGotoNextBuffer
   373 00000859 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   374 0000085D 7501                <1>     jne .fsiGotoNextBuffer
   375                              <1> .fsiExit:
   376 0000085F C3                  <1>     ret
   377                              <1> .fsiGotoNextBuffer:
   378 00000860 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   379 00000863 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   380 0000086A 74F3                <1>     je .fsiExit
   381 0000086C EBE6                <1>     jmp short .fsiCheckBuffer
   382                              <1> 
   383                              <1> 
   384                              <1> findDirtyBufferForDrive:    ;No Use
   385                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   386                              <1> ;Input: dl = Drive number
   387                              <1> ;Output: rbx = Pointer to dirty buffer for drive letter if exists or -1 if not
   388 0000086E 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
   389                              <1> .fdbfdCheckBuffer:
   390 00000875 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   391 00000878 7507                <1>     jne .fdbfdGotoNextBuffer
   392 0000087A F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   393 0000087E 7401                <1>     jz .fdbfdGotoNextBuffer ;Bit not set, goto next buffer
   394                              <1> .fdbfdExit:
   395 00000880 C3                  <1>     ret
   396                              <1> .fdbfdGotoNextBuffer:
   397 00000881 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   398 00000884 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   399 0000088B 74F3                <1>     je .fdbfdExit
   400 0000088D EBE6                <1>     jmp short .fdbfdCheckBuffer
    19                                  %include "./Source/Kernel/FAT/fat.asm"
    20                              <1> ;---------------------------------------------------:
    21                              <1> ;                   KERNEL FUNCTIONS                :
    22                              <1> ;---------------------------------------------------:
    23                              <1> makeDIR:           ;ah = 39h
    24                              <1> removeDIR:         ;ah = 3Ah
    25                              <1> setCurrentDIR:     ;ah = 3Bh, set dir for current drive (or drive in path)
    26                              <1> getCurrentDIR:     ;ah = 47h
    27                              <1> getSetFileDateTime:;ah = 57h
    28                              <1> trueName:          ;ah = 60h, get fully qualified name
    29 0000088F C3                  <1>     ret
    30                              <1> 
    31                              <1> 
    32                              <1> ;-----------------------------------:
    33                              <1> ;       File System routines        :
    34                              <1> ;-----------------------------------:
    35                              <1> getFATtype:
    36                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    37                              <1> ;Entry: rbp = DPB to ascertain FAT
    38                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    39 00000890 53                  <1>     push rbx
    40 00000891 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    41 00000894 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    42 00000899 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    43 0000089F 730F                <1>     jae .exit
    44 000008A1 FFC9                <1>     dec ecx     ;FAT 12 marker
    45 000008A3 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    46 000008A9 7205                <1>     jb .exit
    47 000008AB B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    48                              <1> .exit:
    49 000008B0 5B                  <1>     pop rbx
    50 000008B1 C3                  <1>     ret
    51                              <1> 
    52                              <1> clust2FATEntry:
    53                              <1> ;Converts a cluster number to a offset in the FAT
    54                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    55                              <1> ;        eax = Cluster number to look for
    56                              <1> ;Exit:   eax = Sector on disk of FAT 
    57                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    58                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    59 000008B2 53                  <1>     push rbx
    60 000008B3 55                  <1>     push rbp
    61 000008B4 488B2D(98C20300)    <1>     mov rbp, qword [workingDPB]
    62 000008BB 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    63 000008BE 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    64 000008C4 731E                <1>     jae .fat32
    65 000008C6 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    66 000008CC 7209                <1>     jb .fat12
    67                              <1> ;FAT16
    68 000008CE D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    69 000008D0 6801000000          <1>     push qword 1
    70 000008D5 EB15                <1>     jmp short .common
    71                              <1> .fat12:
    72 000008D7 89C1                <1>     mov ecx, eax    ;ecx = eax
    73 000008D9 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    74 000008DB 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    75 000008DD 6800000000          <1>     push qword 0
    76 000008E2 EB08                <1>     jmp short .common
    77                              <1> .fat32:
    78 000008E4 6802000000          <1>     push qword 2
    79 000008E9 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    80                              <1> .common:
    81                              <1> ;eax has the FAToffset
    82 000008EC 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    83 000008F0 31D2                <1>     xor edx, edx    ;edx = 0
    84 000008F2 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    85 000008F4 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    86 000008F8 01D8                <1>     add eax, ebx
    87 000008FA 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    88 000008FB 5D                  <1>     pop rbp
    89 000008FC 5B                  <1>     pop rbx
    90 000008FD C3                  <1>     ret
    91                              <1> 
    92                              <1> getStartSectorOfCluster:
    93                              <1> ;Input: eax = Cluster Number
    94                              <1> ;       rbp = dpb pointer
    95                              <1> ;Output: rax = Starting Sector number for cluster
    96                              <1> ;Gives the data sector we are at in the current cluster
    97                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    98 000008FE 51                  <1>     push rcx
    99 000008FF 09C0                <1>     or eax, eax ;Zero upper dword
   100 00000901 482D02000000        <1>     sub rax, 2
   101 00000907 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   102 0000090A 48D3E0              <1>     shl rax, cl
   103 0000090D 31C9                <1>     xor ecx, ecx
   104 0000090F 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
   105 00000912 4801C8              <1>     add rax, rcx
   106                              <1>     ;rax now has the first sector of the current cluster
   107 00000915 59                  <1>     pop rcx
   108 00000916 C3                  <1>     ret
   109                              <1> 
   110                              <1> findFreeCluster:
   111                              <1> ;Walks the FAT to find a free cluster and returns the 
   112                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   113                              <1> ;Works on the workingDPB
   114                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   115 00000917 53                  <1>     push rbx
   116 00000918 51                  <1>     push rcx
   117 00000919 52                  <1>     push rdx
   118 0000091A 57                  <1>     push rdi
   119 0000091B 55                  <1>     push rbp
   120 0000091C 488B2D(98C20300)    <1>     mov rbp, qword [workingDPB]
   121 00000923 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   122 00000927 488905(1DC30300)    <1>     mov qword [tempSect], rax   ;Save the sector number temporarily
   123                              <1> ;Use ebp as sector counter
   124 0000092E 8B5513              <1>     mov edx, dword [rbp + dpb.dFATlength]
   125                              <1> ;Get Sector Size in bytes in ebx
   126 00000931 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
   127                              <1> ;Get FAT type
   128 00000935 E856FFFFFF          <1>     call getFATtype ;Gets FAT type (for number of elements in sector)
   129 0000093A 0F84B6000000        <1>     jz .fat12
   130 00000940 F6C101              <1>     test cl, 1
   131 00000943 7571                <1>     jnz .fat16
   132                              <1> ;FAT32 proceeds here
   133 00000945 C1EB02              <1>     shr ebx, 2  ;Divide by 4 to get number of FAT entries in a sector buffer
   134 00000948 66891D(25C30300)    <1>     mov word [entries], bx
   135                              <1> .fat32Search:
   136 0000094F B102                <1>     mov cl, fatBuffer
   137 00000951 488B05(1DC30300)    <1>     mov rax, qword [tempSect]
   138 00000958 E897FCFFFF          <1>     call getBuffer ;Buffer Header in ebx
   139 0000095D 724A                <1>     jc .exitFail
   140 0000095F 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   141 00000963 31C0                <1>     xor eax, eax
   142 00000965 0FB70D(25C30300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   143 0000096C F2AF                <1>     repne scasd ;Look for the zero dword 
   144 0000096E 740D                <1>     je .fat32Found  ;If found, report cluster number (offset into FAT)
   145 00000970 FFCA                <1>     dec edx ;Dec number of sectors left to search
   146 00000972 743B                <1>     jz .noFreeClusters
   147 00000974 48FF05(1DC30300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   148 0000097B EBD2                <1>     jmp short .fat32Search
   149                              <1> .fat32Found:
   150 0000097D 81EF04000000        <1>     sub edi, 4  ;edi is one dword past the entry
   151                              <1> .computeEntry:
   152 00000983 480FB74D06          <1>     movzx rcx, word [rbp + dpb.wFAToffset] ;Get start sector number of FAT 
   153 00000988 488B05(1DC30300)    <1>     mov rax, qword [tempSect]   ;Get disk sector number of FAT into rax
   154 0000098F 4829C8              <1>     sub rax, rcx   ;Get Offset into FAT in rax
   155 00000992 0FB70D(25C30300)    <1>     movzx ecx, word [entries] ;Get number of entries in a FAT sector
   156 00000999 52                  <1>     push rdx
   157 0000099A 48F7E1              <1>     mul rcx ;Multiply rax with rcx (technically eax with ecx)
   158 0000099D 5A                  <1>     pop rdx
   159                              <1> ;rbx points to current buffer header
   160 0000099E 488D5320            <1>     lea rdx, qword [rbx + bufferHdr.dataarea]
   161 000009A2 4829D7              <1>     sub rdi, rdx
   162 000009A5 4801F8              <1>     add rax, rdi    ;Add the offset into the sector to rax to get cluster number
   163                              <1> .exit:
   164 000009A8 F8                  <1>     clc
   165                              <1> .exitFail:      ;Keep carry flag
   166 000009A9 5D                  <1>     pop rbp
   167 000009AA 5F                  <1>     pop rdi
   168 000009AB 5A                  <1>     pop rdx
   169 000009AC 59                  <1>     pop rcx
   170 000009AD 5B                  <1>     pop rbx
   171 000009AE C3                  <1>     ret
   172                              <1> .noFreeClusters:
   173 000009AF B8FFFFFFFF          <1>     mov eax, -1 ;No free cluster marker
   174 000009B4 EBF2                <1>     jmp short .exit
   175                              <1> .fat16:
   176 000009B6 D1EB                <1>     shr ebx, 1  ;Divide by 2 to get number of FAT entries in a sector buffer
   177 000009B8 66891D(25C30300)    <1>     mov word [entries], bx
   178                              <1> .fat16Search:
   179 000009BF B102                <1>     mov cl, fatBuffer
   180 000009C1 488B05(1DC30300)    <1>     mov rax, qword [tempSect]
   181 000009C8 E827FCFFFF          <1>     call getBuffer ;Buffer Header in ebx
   182 000009CD 72DA                <1>     jc .exitFail
   183 000009CF 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   184 000009D3 31C0                <1>     xor eax, eax
   185 000009D5 0FB70D(25C30300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   186 000009DC F266AF              <1>     repne scasw ;Look for the zero word 
   187 000009DF 740D                <1>     je .fat16Found  ;If found, report cluster number (offset into FAT)
   188 000009E1 FFCA                <1>     dec edx ;Dec number of sectors left to search
   189 000009E3 74CA                <1>     jz .noFreeClusters
   190 000009E5 48FF05(1DC30300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   191 000009EC EBD1                <1>     jmp short .fat16Search
   192                              <1> .fat16Found:
   193 000009EE 81EF02000000        <1>     sub edi, 2  ;edi is one word past the entry
   194 000009F4 EB8D                <1>     jmp short .computeEntry
   195                              <1> .fat12:
   196 000009F6 89D8                <1>     mov eax, ebx    ;Get sectorsize in ax
   197 000009F8 D1E0                <1>     shl eax, 1  ;Multiply by 2
   198 000009FA B903000000          <1>     mov ecx, 3  ;1.5 bytes per FAT entry *2
   199 000009FF 52                  <1>     push rdx    ;Preserve number of sectors in FAT counter
   200 00000A00 31D2                <1>     xor edx, edx
   201 00000A02 F7F1                <1>     div ecx
   202 00000A04 5A                  <1>     pop rdx
   203 00000A05 668905(25C30300)    <1>     mov word [entries], ax ;Get quotient (number of whole entries in sector) 
   204                              <1>     ;The value is rounded down so we can read the next sector for the 
   205                              <1>     ;last entry manually (thus buffering it if it not already buffered)
   206 00000A0C B102                <1>     mov cl, fatBuffer
   207 00000A0E 488B05(1DC30300)    <1>     mov rax, qword [tempSect]
   208 00000A15 E8DAFBFFFF          <1>     call getBuffer ;Buffer Header in ebx
   209 00000A1A 728D                <1>     jc .exitFail
   210 00000A1C 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   211                              <1> .fat12SearchNewSector:
   212 00000A20 0FB70D(25C30300)    <1>     movzx ecx, word [entries]   ;This is total entries in Sector rounded down
   213                              <1> .fat12Search:
   214 00000A27 0FB707              <1>     movzx eax, word [rdi]   ;Get first word (EVEN ENTRY)
   215 00000A2A 25FF0F0000          <1>     and eax, 0FFFh   ;Clear upper nybble
   216 00000A2F 744A                <1>     jz .fat12EntryFound
   217 00000A31 48FFC7              <1>     inc rdi ;Goto next byte
   218 00000A34 FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   219 00000A36 0FB707              <1>     movzx eax, word [rdi]  ;Get second word (ODD ENTRY)
   220 00000A39 C1E804              <1>     shr eax, 4  ;Shift down by 4
   221 00000A3C 743D                <1>     jz .fat12EntryFound
   222 00000A3E 48FFC7              <1>     inc rdi ;Goto next entry
   223 00000A41 FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   224 00000A43 75E2                <1>     jnz .fat12Search
   225                              <1> ;We arrive here when we are at the last entry in the sector
   226 00000A45 48FF05(1DC30300)    <1>     inc qword [tempSect]    ;Get next Sector
   227 00000A4C 488B05(1DC30300)    <1>     mov rax, qword [tempSect]   ;Get this sector in rax
   228 00000A53 B102                <1>     mov cl, fatBuffer
   229 00000A55 E89AFBFFFF          <1>     call getBuffer ;Buffer Header in ebx
   230 00000A5A 0F8249FFFFFF        <1>     jc .exitFail
   231 00000A60 0FB607              <1>     movzx eax, byte [rdi]  ;Get last byte in old buffer (rdi still points there)
   232 00000A63 488D4B20            <1>     lea rcx, qword [rbx + bufferHdr.dataarea]   ;Go to data area (preserve rdi)
   233 00000A67 8A21                <1>     mov ah, byte [rcx]  ;Get first byte in new sector
   234 00000A69 C1E804              <1>     shr eax, 4  ;Clear out bottom nybble
   235 00000A6C 740D                <1>     jz .fat12EntryFound ;Found a sector!
   236                              <1>     ;Empty cluster not found in sector
   237 00000A6E FFCA                <1>     dec edx ;Decrement sector count
   238 00000A70 0F8439FFFFFF        <1>     jz .noFreeClusters
   239 00000A76 4889CF              <1>     mov rdi, rcx    ;Set rdi to point at start of next sector
   240 00000A79 EBA5                <1>     jmp short .fat12SearchNewSector ;Reload the number of entries and search
   241                              <1> .fat12EntryFound:
   242 00000A7B E903FFFFFF          <1>     jmp .computeEntry   ;Unnecessary redirection
   243                              <1> 
   244                              <1> getDataSector:
   245                              <1> ;This function will request the sector of data in [currSectA].
   246                              <1> ;This call can only be used for DATA sectors.
   247                              <1> ;Preserves all registers
   248                              <1> ;On ret: CF=NC => currBuff = Buffer with data
   249                              <1> ;        CF=CY => Critical error occurred and was FAILed
   250 00000A80 50                  <1>     push rax
   251 00000A81 53                  <1>     push rbx
   252 00000A82 51                  <1>     push rcx
   253 00000A83 488B05(31C30300)    <1>     mov rax, qword [currSectA]  ;Get the disk sector number to read
   254 00000A8A BB01000000          <1>     mov ebx, dosBuffer
   255 00000A8F B908000000          <1>     mov ecx, dataBuffer 
   256 00000A94 4885C0              <1>     test rax, rax
   257 00000A97 0F44CB              <1>     cmovz ecx, ebx  ;If sector 0, change to DOS buffer
   258                              <1> .getSectorRead:
   259 00000A9A E855FBFFFF          <1>     call getBuffer  ;Get ptr to buffer header in [currBuff] (and rbx but ignore)
   260 00000A9F 59                  <1>     pop rcx
   261 00000AA0 5B                  <1>     pop rbx
   262 00000AA1 58                  <1>     pop rax
   263 00000AA2 C3                  <1>     ret
   264                              <1> 
   265                              <1> getNextSectorOfFile:
   266                              <1> ;This function will read the next sector for a file into a buffer.
   267                              <1> ;If the next sector to be read lives in the next cluster, it will update
   268                              <1> ; the file handle of the file being read/written to the new cluster
   269                              <1> ;
   270                              <1> ;Input: rbp = dpb pointer
   271                              <1> ;Output:
   272                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   273                              <1> ; If rax = -1 => [currClust] = Last Cluster of File
   274                              <1> ;       CF=CY => Critical error occurred and was FAILed
   275                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   276                              <1> ; next cluster and read first sector 
   277                              <1>     ;Check if we need to go to next cluster
   278 00000AA3 8A05(30C30300)      <1>     mov al, byte [currSect]    ;Get current sector rel Cluster
   279 00000AA9 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   280 00000AAC 7416                <1>     je .gotoNextCluster
   281                              <1>     ;Goto next sector in same cluster
   282 00000AAE FE05(30C30300)      <1>     inc byte [currSect]    ;Goto next sector in cluster
   283 00000AB4 48FF05(31C30300)    <1>     inc qword [currSectA]  ;Goto next sector on Disk
   284 00000ABB 488B05(31C30300)    <1>     mov rax, qword [currSectA]
   285                              <1> .exitOK:
   286 00000AC2 F8                  <1>     clc
   287                              <1> .exitFail:
   288 00000AC3 C3                  <1>     ret
   289                              <1> .gotoNextCluster:
   290 00000AC4 8B05(2BC30300)      <1>     mov eax, dword [currClustA] ;Get absolute cluster number
   291 00000ACA E82A000000          <1>     call walkFAT
   292 00000ACF 72F2                <1>     jc .exitFail
   293                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   294 00000AD1 3DFFFFFFFF          <1>     cmp eax, -1
   295 00000AD6 74EA                <1>     je .exitOK
   296                              <1> ;Update the new cluster and sector information
   297 00000AD8 8905(2BC30300)      <1>     mov dword [currClustA], eax ;Update disk location of next cluster
   298 00000ADE FF05(27C30300)      <1>     inc dword [currClust]   ;Goto next file cluster
   299 00000AE4 E815FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster
   300 00000AE9 488905(31C30300)    <1>     mov qword [currSectA], rax  ;Save it
   301 00000AF0 C605(30C30300)00    <1>     mov byte [currSect], 0      ;We are at sector 0 rel Clust
   302 00000AF7 EBC9                <1>     jmp short .exitOK
   303                              <1> 
   304                              <1> 
   305                              <1> walkFAT:
   306                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   307                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   308                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   309                              <1> ;       rbp = DPB number
   310                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   311                              <1> ;If carry set, getBuffer failed!
   312 00000AF9 53                  <1>     push rbx
   313 00000AFA 51                  <1>     push rcx
   314 00000AFB 52                  <1>     push rdx
   315 00000AFC 57                  <1>     push rdi
   316 00000AFD 55                  <1>     push rbp
   317 00000AFE 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   318 00000B00 E8ADFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   319                              <1>     ;and FAT type in ecx
   320 00000B05 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]
   321 00000B09 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   322 00000B0B 51                  <1>     push rcx    ;Move FAT signature onto stack
   323 00000B0C B102                <1>     mov cl, fatBuffer
   324 00000B0E E8E1FAFFFF          <1>     call getBuffer ;Buffer Header in ebx
   325 00000B13 59                  <1>     pop rcx
   326 00000B14 722D                <1>     jc .exitFail
   327                              <1>     ;Check if FAT 12, 16, 32
   328 00000B16 85C9                <1>     test ecx, ecx
   329 00000B18 742F                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   330 00000B1A F7C101000000        <1>     test ecx, 1
   331 00000B20 7410                <1>     jz .goToNextClusterFat32
   332                              <1>     ;Here we handle FAT16
   333 00000B22 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   334 00000B27 663DFFFF            <1>     cmp ax, -1
   335 00000B2B 7515                <1>     jne .exit
   336 00000B2D 0FBEC0              <1>     movsx eax, al
   337 00000B30 EB10                <1>     jmp short .exit
   338                              <1> .goToNextClusterFat32:
   339 00000B32 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   340 00000B36 3DFFFFFFFF          <1>     cmp eax, -1
   341 00000B3B 7405                <1>     je .exit   ;If EOC, skip zeroing nybble
   342 00000B3D 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   343                              <1> .exit:
   344 00000B42 F8                  <1>     clc
   345                              <1> .exitFail:
   346 00000B43 5D                  <1>     pop rbp
   347 00000B44 5F                  <1>     pop rdi
   348 00000B45 5A                  <1>     pop rdx
   349 00000B46 59                  <1>     pop rcx
   350 00000B47 5B                  <1>     pop rbx
   351 00000B48 C3                  <1>     ret
   352                              <1> .gotoNextClusterFat12:
   353                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   354                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   355                              <1> 
   356 00000B49 57                  <1>     push rdi    ;Save the cluster number on the stack
   357 00000B4A 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   358 00000B4D FFC0                <1>     inc eax ;Get next sector
   359 00000B4F B102                <1>     mov cl, fatBuffer
   360 00000B51 E89EFAFFFF          <1>     call getBuffer ;Buffer Header in ebx
   361 00000B56 59                  <1>     pop rcx ;Return the cluster number in rcx
   362 00000B57 72EA                <1>     jc .exitFail
   363                              <1>     ;rdi has first buffer header, rbx has second buffer header
   364                              <1>     ;rdx has offset into first header for entry
   365 00000B59 F7C101000000        <1>     test ecx, 1  ;Check if cluster is odd
   366 00000B5F 7422                <1>     jz .gotoNextClusterFat12Even
   367                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   368 00000B61 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   369 00000B65 29D0                <1>     sub eax, edx
   370 00000B67 FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   371 00000B69 750E                <1>     jnz .gotoNextClusterFat12NoCross
   372                              <1>     ;Boundary cross, build entry properly
   373 00000B6B 31C0                <1>     xor eax, eax
   374 00000B6D 8A441720            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   375 00000B71 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   376 00000B74 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   377 00000B77 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   378                              <1> .gotoNextClusterFat12NoCross:
   379 00000B79 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   380 00000B7E C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   381 00000B81 EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   382                              <1> .gotoNextClusterFat12Even:
   383                              <1>     ;Here the cluster is even and can't cross a sector boundary
   384 00000B83 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   385 00000B88 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   386                              <1> .checkIfLastFAT12Cluster:
   387 00000B8D 663DFF0F            <1>     cmp ax, 0FFFh
   388 00000B91 75AF                <1>     jne .exit
   389 00000B93 B8FFFFFFFF          <1>     mov eax, -1
   390 00000B98 E9A5FFFFFF          <1>     jmp .exit
    20                                  %include "./Source/Kernel/FAT/fileSearch.asm"
    21                              <1> ;Generic Find First and Find Next functions here
    22                              <1> 
    23                              <1> genericFindFirst:
    24 00000B9D C3                  <1>     ret
    25                              <1> genericFindNext:
    26 00000B9E C3                  <1>     ret
    21                                  %include "./Source/Kernel/CharDevs/charFunctions.asm"
    22                              <1> ;Dos default char functions live here
    23                              <1> 
    24                              <1> stdinReadEcho:     ;ah = 01h
    25                              <1> ;Return char that has been read and echoed in al
    26 00000B9F 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    27 00000BA6 488D05(91C20300)    <1>     lea rax, singleIObyt
    28 00000BAD C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    29 00000BB0 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    30 00000BB4 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    31 00000BBA 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    32 00000BBE C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    33                              <1> 
    34 00000BC5 488B35(98C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
    35 00000BCC E8BD0B0000          <1>     call goDriver
    36                              <1> 
    37 00000BD1 803D(91C20300)00    <1>     cmp byte [singleIObyt], 00h
    38 00000BD8 742B                <1>     jz .stdireexit
    39 00000BDA 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    40 00000BE1 488D05(91C20300)    <1>     lea rax, singleIObyt
    41 00000BE8 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    42 00000BEB C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    43 00000BEF 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    44 00000BF5 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    45 00000BF9 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    46 00000C00 E8890B0000          <1>     call goDriver   ;rbx has reqheader ptr
    47                              <1> .stdireexit:
    48 00000C05 8A05(91C20300)      <1>     mov al, byte [singleIObyt]
    49 00000C0B C3                  <1>     ret
    50                              <1> 
    51                              <1> stdoutWrite:       ;ah = 02h
    52                              <1> ;Bspace is regular cursor left, does not insert a blank
    53 00000C0C 8815(91C20300)      <1>     mov byte [singleIObyt], dl
    54 00000C12 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    55 00000C19 488D15(91C20300)    <1>     lea rdx, singleIObyt
    56 00000C20 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    57 00000C23 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    58 00000C27 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    59 00000C2D 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    60 00000C31 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    61                              <1> 
    62 00000C38 488B35(98C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
    63 00000C3F E84A0B0000          <1>     call goDriver
    64 00000C44 C3                  <1>     ret
    65                              <1> stdauxRead:        ;ah = 03h
    66                              <1> stdauxWrite:       ;ah = 04h
    67                              <1> stdprnWrite:       ;ah = 05h
    68                              <1> directCONIO:       ;ah = 06h
    69                              <1> waitDirectInNoEcho:;ah = 07h
    70                              <1> ;Return char in al
    71 00000C45 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    72 00000C4C 488D05(91C20300)    <1>     lea rax, singleIObyt
    73 00000C53 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    74 00000C56 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    75 00000C5A 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    76 00000C60 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    77 00000C64 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    78                              <1> 
    79 00000C6B 488B35(98C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
    80 00000C72 E8170B0000          <1>     call goDriver
    81 00000C77 8A05(91C20300)      <1>     mov al, byte [singleIObyt]
    82 00000C7D C3                  <1>     ret
    83                              <1> waitStdinNoEcho:   ;ah = 08h
    84 00000C7E C3                  <1>     ret
    85                              <1> printString:       ;ah = 09h
    86 00000C7F 31C9                <1>     xor ecx, ecx    ;Clear char counter
    87 00000C81 B824000000          <1>     mov eax, "$"    ;Terminating char
    88 00000C86 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
    89                              <1> .ps0:   ;Search for $ to get count of chars
    90 00000C89 AE                  <1>     scasb
    91 00000C8A 7404                <1>     je .ps1
    92 00000C8C FFC1                <1>     inc ecx
    93 00000C8E EBF9                <1>     jmp short .ps0
    94                              <1> .ps1:   ;Use handle 
    95 00000C90 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    96 00000C97 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    97 00000C9A C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    98 00000C9E 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    99 00000CA4 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   100 00000CA8 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   101                              <1>     
   102 00000CAB 488B35(98C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
   103 00000CB2 E8D70A0000          <1>     call goDriver   ;Called with rbx pointing to the request header
   104                              <1> 
   105 00000CB7 488B1D(73C10300)    <1>     mov rbx, qword [oldRSP]
   106 00000CBE 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
   107 00000CC0 C3                  <1>     ret
   108                              <1> buffStdinInput:    ;ah = 0Ah
   109                              <1> checkStdinStatus:  ;ah = 0Bh
   110                              <1> clearbuffDoFunc:   ;ah = 0Ch
   111                              <1> 
   112                              <1> ;Utility functions
   113                              <1> checkBreakOnCon:
   114                              <1> ;Reads bytes from CON if there are any bytes to read and 
   115                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   116 00000CC1 803D(0FC10300)01    <1>     cmp byte [inDOS], 1
   117 00000CC8 7401                <1>     je checkBreak  ;Only check ^C on first entry to DOS
   118 00000CCA C3                  <1>     ret
   119                              <1> checkBreak:
   120                              <1> ;Returns in al the keystroke that is available IF one is available
   121                              <1> ; or al=0 if no keystroke available
   122 00000CCB 53                  <1>     push rbx
   123 00000CCC 56                  <1>     push rsi
   124 00000CCD 488B35(98C00300)    <1>     mov rsi, qword [conPtr] ;Get pointer to Console device driver
   125 00000CD4 31C0                <1>     xor eax, eax
   126                              <1>     ;Place command code and a zero status word at the same time
   127 00000CD6 B005                <1>     mov al, drvNONDESTREAD
   128 00000CD8 8905(26C00300)      <1>     mov dword [charReqHdr + nonDestInNoWaitReqPkt.cmdcde], eax
   129                              <1>     ;Place the packet size in the hdrlen field
   130 00000CDE B00E                <1>     mov al, nonDestInNoWaitReqPkt_size
   131 00000CE0 8805(24C00300)      <1>     mov byte [charReqHdr + nonDestInNoWaitReqPkt.hdrlen], al
   132 00000CE6 488D1D(24C00300)    <1>     lea rbx, charReqHdr
   133 00000CED E89C0A0000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   134                              <1>     ;Check if the busy bit is set (No keystroke available)
   135 00000CF2 66F705(27C00300)00- <1>     test word [charReqHdr + nonDestInNoWaitReqPkt.status], drvBsyStatus
   135 00000CFA 02                  <1>
   136 00000CFB 7403                <1>     jz .charFound
   137                              <1> .exit:
   138 00000CFD 5E                  <1>     pop rsi
   139 00000CFE 5B                  <1>     pop rbx
   140 00000CFF C3                  <1>     ret
   141                              <1> .charFound:
   142                              <1> ;Keystroke available, proceed
   143 00000D00 8A05(31C00300)      <1>     mov al, byte [charReqHdr + nonDestInNoWaitReqPkt.retbyt]    ;Get char
   144 00000D06 3C03                <1>     cmp al, 03h ;BREAK/^C =ASCII 03h
   145 00000D08 75F3                <1>     jne .exit   ;If not equal exit
   146                              <1> ;Now we pull the char out of the buffer
   147 00000D0A 31C0                <1>     xor eax, eax
   148 00000D0C B004                <1>     mov al, drvREAD ;Read command
   149 00000D0E 8905(26C00300)      <1>     mov dword [charReqHdr + ioReqPkt.cmdcde], eax
   150                              <1>     ;Place packet size
   151 00000D14 C605(24C00300)2A    <1>     mov byte [charReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   152                              <1>     ;Place pointers and number of chars
   153 00000D1B C705(3AC00300)0100- <1>     mov dword [charReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   153 00000D23 0000                <1>
   154 00000D25 488D05(91C20300)    <1>     lea rax, singleIObyt    ;IO Byte buffer
   155 00000D2C 488905(32C00300)    <1>     mov qword [charReqHdr + ioReqPkt.bufptr], rax
   156 00000D33 E8560A0000          <1>     call goDriver   ;RSI and RBX as before
   157 00000D38 C3                  <1>     ret ;Stopgap right now, do nothing
   158                              <1> 
   159                              <1> 
   160                              <1>     
    22                                  %include "./Source/Kernel/CharDevs/dateTimeFunctions.asm"
    23                              <1> ;Major kernel date time functions and subroutines
    24                              <1> 
    25                              <1> getDate:           ;ah = 2Ah
    26                              <1> setDate:           ;ah = 2Bh
    27                              <1> getTime:           ;ah = 2Ch
    28                              <1> setTime:           ;ah = 2Dh
    29 00000D39 C3                  <1>     ret
    23                                  %include "./Source/Kernel/FileIO/fcbFunctions.asm"
    24                              <1> openFileFCB:       ;ah = 0Fh
    25                              <1> closeFileFCB:      ;ah = 10h
    26                              <1> findFirstFileFCB:  ;ah = 11h
    27                              <1> findNextFileFCB:   ;ah = 12h
    28                              <1> deleteFileFCB:     ;ah = 13h
    29                              <1> sequentialReadFCB: ;ah = 14h
    30                              <1> sequentialWriteFCB:;ah = 15h
    31                              <1> createFileFCB:     ;ah = 16h
    32                              <1> renameFileFCB:     ;ah = 17h
    33 00000D3A C3                  <1>     ret
    34                              <1> setDTA:            ;ah = 1Ah
    35                              <1> ;Called with:
    36                              <1> ;   rdx = Pointer to the new default DTA
    37 00000D3B 488B1D(73C10300)    <1>     mov rbx, qword [oldRSP]
    38 00000D42 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    39 00000D46 488915(1EC10300)    <1>     mov qword [currentDTA], rdx
    40 00000D4D C3                  <1>     ret
    41                              <1> randomReadFCB:     ;ah = 21h
    42                              <1> randomWriteFCB:    ;ah = 22h
    43                              <1> getFileSizeFCB:    ;ah = 23h
    44                              <1> setRelRecordFCB:   ;ah = 24h
    45                              <1> randBlockReadFCB:  ;ah = 27h
    46                              <1> randBlockWriteFCB: ;ah = 28h
    47                              <1> parseFilenameFCB:  ;ah = 29h
    48 00000D4E C3                  <1>     ret
    49                              <1> getDTA:            ;ah = 2Fh
    50 00000D4F 488B15(73C10300)    <1>     mov rdx, qword [oldRSP]
    51 00000D56 488B1D(1EC10300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    52 00000D5D 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    53 00000D61 C3                  <1>     ret
    24                                  %include "./Source/Kernel/FileIO/handleFunctions.asm"
    25                              <1> ;-----------------------------------:
    26                              <1> ;    File Handle Kernel routines    :
    27                              <1> ;-----------------------------------:
    28                              <1> 
    29                              <1> createFileHdl:     ;ah = 3Ch, handle function
    30 00000D62 C3                  <1>     ret
    31                              <1> openFileHdl:       ;ah = 3Dh, handle function
    32 00000D63 C3                  <1>     ret
    33                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    34 00000D64 C3                  <1>     ret
    35                              <1> readFileHdl:       ;ah = 3Fh, handle function
    36 00000D65 C605(92C20300)00    <1>     mov byte [rwFlag], 0    ;Read
    37                              <1>     ;bx has file handle, ecx has number of bytes to read
    38                              <1>     ;Set the following vars: currentSFT, currentJFT, currentHdl
    39 00000D6C E83F020000          <1>     call getSFTPtr  ;Get SFT ptr in var in rdi
    40 00000D71 0F82D3010000        <1>     jc lseekHdl.exitBad ;If file handle not good, recycle error (in al)
    41                              <1>     ;Now check if we have permissions to read from file
    42 00000D77 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get handle permissions in ax
    43 00000D7B 240F                <1>     and al, 0Fh ;Save low nybble
    44 00000D7D 3C01                <1>     cmp al, WriteAccess ;Was this file opened with write access only?
    45 00000D7F 750F                <1>     jne .readable
    46 00000D81 E80A020000          <1>     call invalidFilePermissions
    47                              <1>     ;Set CF on caller stack
    48 00000D86 E8750D0000          <1>     call getUserRegs
    49 00000D8B 804E5801            <1>     or byte [rsi + callerFrame.flags], 1
    50 00000D8F C3                  <1>     ret ;Exit with error code in al
    51                              <1> .readable:
    52 00000D90 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
    53 00000D93 8905(3BC30300)      <1>     mov dword [currByteA], eax
    54                              <1>     ;If the file is readable, check if it is a disk or char device
    55 00000D99 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
    56 00000D9D F7C380800000        <1>     test ebx, devRedirDev | devCharDev  ;Either of these get handled separately
    57 00000DA3 0F8583010000        <1>     jnz .notDiskDev
    58 00000DA9 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer
    59 00000DAD E8460D0000          <1>     call setWorkingDPB  ;Set the DPB pointer as working
    60 00000DB2 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
    61 00000DB5 881D(97C20300)      <1>     mov byte [workingDrv], bl
    62 00000DBB 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
    63                              <1>     ;Here we divide
    64 00000DBF 31D2                <1>     xor edx, edx
    65 00000DC1 F7F3                <1>     div ebx ;Divide the number of bytes by bytes per sector
    66                              <1>     ;eax has sector number in file
    67                              <1>     ;edx has offset in sector
    68 00000DC3 8915(39C30300)      <1>     mov dword [currByte], edx
    69 00000DC9 89C2                <1>     mov edx, eax    ;Save sector number in edx
    70 00000DCB 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    71 00000DCE D3E8                <1>     shr eax, cl ;Divide eax by sectors/cluster (to get cluster number)
    72 00000DD0 8905(27C30300)      <1>     mov dword [currClust], eax    ;Save rounded down value (cluster number)
    73 00000DD6 D3E0                <1>     shl eax, cl     ;Go up again
    74 00000DD8 29C2                <1>     sub edx, eax    ;Get the sector offset INTO the cluster in eax
    75 00000DDA 8815(30C30300)      <1>     mov byte [currSect], dl ;Save this number
    76                              <1> ;Now we need to find the absolute cluster number
    77 00000DE0 8B15(27C30300)      <1>     mov edx, dword [currClust]
    78 00000DE6 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get the start cluster for the file
    79 00000DE9 31C9                <1>     xor ecx, ecx    ;If fail, have 0 bytes ready
    80                              <1> .clusterSearch:
    81 00000DEB 3DFFFFFFFF          <1>     cmp eax, -1
    82 00000DF0 0F8413010000        <1>     je .exitSetFlag ;This is a fail condition. The handle is past the EOF
    83 00000DF6 E8FEFCFFFF          <1>     call walkFAT    ;eax has next cluster
    84 00000DFB FFCA                <1>     dec edx
    85 00000DFD 75EC                <1>     jnz .clusterSearch
    86                              <1> ;eax should have the absolute cluster of the file pointer
    87 00000DFF 8905(2BC30300)      <1>     mov dword [currClustA], eax
    88 00000E05 E8F4FAFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of cluster
    89 00000E0A 0FB60D(30C30300)    <1>     movzx ecx, byte [currSect]  ;Get sector offset into cluster 
    90 00000E11 4801C8              <1>     add rax, rcx    ;Get starting sector number
    91 00000E14 488905(31C30300)    <1>     mov qword [currSectA], rax  ;Save it!
    92                              <1> ;Update SFT with entries
    93 00000E1B E849020000          <1>     call updateCurrentSFT
    94                              <1> ;Now enact data transfer
    95 00000E20 E85BFCFFFF          <1>     call getDataSector  ;Gets sector in [currSectA] in [currBuff]
    96 00000E25 0F82F3000000        <1>     jc .exitFail
    97                              <1> ;Now load rbx with function to call
    98 00000E2B 488D1D5F020000      <1>     lea rbx, readWriteBytesBinary
    99 00000E32 488D1557020000      <1>     lea rdx, readBytesASCII
   100 00000E39 F6470520            <1>     test byte [rdi + sft.wDeviceInfo], devBinary
   101 00000E3D 480F44DA            <1>     cmovz rbx, rdx  ;Move only if bit not set i.e. in ASCII mode
   102 00000E41 48891D(16C10300)    <1>     mov qword [dosReturn], rbx ;Save the function to call in this var
   103 00000E48 E8B30C0000          <1>     call getUserRegs
   104 00000E4D 488B7E18            <1>     mov rdi, qword [rsi + callerFrame.rdx]  ;Get Read Destination
   105 00000E51 8B4E10              <1>     mov ecx, dword [rsi + callerFrame.rcx]  ;Get number of bytes to transfer
   106 00000E54 890D(4BC30300)      <1>     mov dword [tfrLen], ecx ;Set user requested transfer length in var
   107 00000E5A E849010000          <1>     call getCurrentSFT  ;Set rsi to current SFT
   108                              <1>     ;Check if the transfer length is possible
   109                              <1>     ;If not, then transfer the max length possible
   110 00000E5F 8B4E17              <1>     mov ecx, dword [rsi + sft.dFileSize]    ;When file ptr == ecx, EOF
   111 00000E62 2B0D(3BC30300)      <1>     sub ecx, dword [currByteA]  ;Get the bytes left in the file
   112 00000E68 8B15(4BC30300)      <1>     mov edx, dword [tfrLen]
   113 00000E6E 39CA                <1>     cmp edx, ecx ;If userRequest > bytesLeftInFile, swap 
   114 00000E70 0F47D1              <1>     cmova edx, ecx
   115 00000E73 8915(4BC30300)      <1>     mov dword [tfrLen], edx 
   116                              <1>     
   117 00000E79 0FB75502            <1>     movzx edx, word [rbp + dpb.wBytesPerSector]
   118 00000E7D 0FB605(39C30300)    <1>     movzx eax, byte [currByte]  ;Get current byte in the sector
   119 00000E84 29C2                <1>     sub edx, eax    ;edx has the remaining bytes to read in this sector
   120 00000E86 488B35(15C30300)    <1>     mov rsi, qword [currBuff]
   121 00000E8D 804E0920            <1>     or byte [rsi + bufferHdr.bufferFlags], refBuffer ;Set referenced bit
   122 00000E91 488D7620            <1>     lea rsi, qword [rsi + bufferHdr.dataarea]    ;Goto the data area
   123 00000E95 4801C6              <1>     add rsi, rax    ;Go to the current byte in the sector
   124                              <1>     ;Now we check to see if we have less than a partial sector's worth of 
   125                              <1>     ; data to transfer.
   126 00000E98 8B0D(4BC30300)      <1>     mov ecx, dword [tfrLen] ;Get the current settled length of transfer
   127 00000E9E 39D1                <1>     cmp ecx, edx    ;edx has the bytes left in the sector
   128 00000EA0 0F47CA              <1>     cmova ecx, edx  ;if transferLength > bytes left in sector, swap
   129 00000EA3 890D(4BC30300)      <1>     mov dword [tfrLen], ecx
   130                              <1>     ;Here, tfrLen is settled, so set tfrCntr too
   131 00000EA9 890D(4FC30300)      <1>     mov dword [tfrCntr], ecx   ;Populate the counter
   132                              <1> .mainReadLoop:
   133 00000EAF FF15(16C10300)      <1>     call qword [dosReturn]  ;Call the tfr func, ecx rets num. bytes transferred
   134 00000EB5 7433                <1>     jz .exit   ;If we return with ZF=ZE then we are done!
   135                              <1>     ;Else we must goto the next sector and repeat
   136 00000EB7 E8E7FBFFFF          <1>     call getNextSectorOfFile    ;Increments the cluster and sector vars
   137 00000EBC 725B                <1>     jc .exitFailInTfr
   138 00000EBE E8BDFBFFFF          <1>     call getDataSector  ;Get data buffer
   139 00000EC3 7254                <1>     jc .exitFailInTfr
   140 00000EC5 E89F010000          <1>     call updateCurrentSFT   ;Ensure the SFT is up to date after a transfer
   141 00000ECA 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   142 00000ECE 8B15(4FC30300)      <1>     mov edx, dword [tfrCntr]    ;Get bytes left to transfer in edx
   143 00000ED4 39CA                <1>     cmp edx, ecx    ;If bytes left > bytes in sector, dont swap!
   144 00000ED6 0F42CA              <1>     cmovb ecx, edx
   145                              <1>     ;Reposition rsi again
   146 00000ED9 488B35(15C30300)    <1>     mov rsi, qword [currBuff]
   147 00000EE0 804E0920            <1>     or byte [rsi + bufferHdr.bufferFlags], refBuffer ;Set referenced bit
   148 00000EE4 488D7620            <1>     lea rsi, qword [rsi + bufferHdr.dataarea]    ;Goto the data area
   149 00000EE8 EBC5                <1>     jmp short .mainReadLoop
   150                              <1> .exit:
   151 00000EEA E8B9000000          <1>     call getCurrentSFT
   152 00000EEF 66F746050040        <1>     test word [rsi + sft.wDeviceInfo], blokDevDTSet ;Should I set the time/date?
   153                              <1>     ;For now do nothing, but eventually, make CLOCK$ request
   154 00000EF5 E860010000          <1>     call getBytesTransferred    ;Gets bytes transferred in ecx
   155 00000EFA E8010C0000          <1>     call getUserRegs
   156 00000EFF 894E10              <1>     mov dword [rsi + callerFrame.rcx], ecx
   157 00000F02 806658FE            <1>     and byte [rsi + callerFrame.flags], 0FEh    ;Clear CF
   158 00000F06 30C0                <1>     xor al, al  ;No error
   159 00000F08 C3                  <1>     ret
   160                              <1> .exitSetFlag:
   161 00000F09 E8F20B0000          <1>     call getUserRegs
   162 00000F0E 894E10              <1>     mov dword [rsi + callerFrame.rcx], ecx
   163 00000F11 814E5801000000      <1>     or dword [rsi + callerFrame.flags], 1    ;Set CF
   164 00000F18 C3                  <1>     ret
   165                              <1> .exitFailInTfr:
   166 00000F19 E83C010000          <1>     call getBytesTransferred    ;Gets bytes transferred in ecx
   167                              <1> .exitFail:
   168                              <1> ;Exit on Int 44h
   169 00000F1E B853000000          <1>     mov eax, errFI44
   170 00000F23 668905(12C10300)    <1>     mov word [errorExCde], ax
   171 00000F2A EBDD                <1>     jmp short .exitSetFlag
   172                              <1> .notDiskDev:    ;qPtr here is a device driver
   173                              <1> ;Here only char devices. Redirector is not yet implemented!
   174                              <1> ;Arrive here with ebx = wDeviceInfo for device
   175 00000F2C F7C300800000        <1>     test ebx, devRedirDev  ;Test for network redirector drive
   176 00000F32 7406                <1>     jz .charDev
   177 00000F34 B032                <1>     mov al, errNoNet    ;No network pls
   178 00000F36 31C9                <1>     xor ecx, ecx    ;No bytes transferred
   179 00000F38 EBCF                <1>     jmp short .exitSetFlag
   180                              <1> .charDev:
   181                              <1> ;When reading from a char device, if it is the console, we must give it
   182                              <1> ; special treatment if the handle is in ASCII mode.
   183                              <1> writeFileHdl:      ;ah = 40h, handle function
   184 00000F3A C3                  <1>     ret
   185                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   186 00000F3B C3                  <1>     ret
   187                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   188                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   189 00000F3C E86F000000          <1>     call getSFTPtr
   190 00000F41 7326                <1>     jnc .sftValid
   191                              <1>     ;Error code and exit
   192                              <1>     ;al (eax) has error code for bad file handle
   193 00000F43 668905(12C10300)    <1>     mov word [errorExCde], ax
   194                              <1> .exitBad:
   195 00000F4A C605(11C10300)01    <1>     mov byte [errorLocus], eLocUnk  ;Unknown Locus
   196 00000F51 C605(14C10300)03    <1>     mov byte [errorAction], eActUsr ;Reinput data
   197 00000F58 C605(15C10300)08    <1>     mov byte [errorClass], eClsNotFnd
   198 00000F5F E89C0B0000          <1>     call getUserRegs    ;Get user regs in rsi
   199 00000F64 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set CF
   200 00000F68 C3                  <1>     ret
   201                              <1> .sftValid:
   202 00000F69 3C03                <1>     cmp al, 3
   203 00000F6B 7206                <1>     jb .validFunction
   204                              <1>     ;Error code and exit
   205 00000F6D 66B80100            <1>     mov ax, errInvFnc
   206 00000F71 EBD7                <1>     jmp short .exitBad
   207                              <1> .validFunction:
   208 00000F73 3C01                <1>     cmp al, 1
   209 00000F75 7713                <1>     ja .seekend
   210 00000F77 7203                <1>     jb .seekset
   211                              <1> ;Here we are at seekcur, seek from current (signed)
   212 00000F79 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   213                              <1> .seekset:
   214                              <1> ;Seek from the start (unsigned)
   215 00000F7C 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   216 00000F7F E87C0B0000          <1>     call getUserRegs    ;Get user regs in rsi
   217 00000F84 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   218 00000F87 30C0                <1>     xor al, al  ;Return OK!
   219 00000F89 C3                  <1>     ret
   220                              <1> .seekend:
   221                              <1> ;Here we are at seekend, seek from end (signed)
   222 00000F8A 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   223 00000F8D EBED                <1>     jmp short .seekset
   224                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   225                              <1> ioctrl:            ;ah = 44h, handle function
   226                              <1> duplicateHandle:   ;ah = 45h, handle function
   227                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   228                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   229                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   230                              <1> renameFile:        ;ah = 56h
   231                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   232                              <1> createNewFile:     ;ah = 5Bh
   233                              <1> lockUnlockFile:    ;ah = 5Ch
   234                              <1> setHandleCount:    ;ah = 67h
   235                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   236 00000F8F C3                  <1>     ret
   237                              <1> ;-----------------------------------:
   238                              <1> ;        File Handle routines       :
   239                              <1> ;-----------------------------------:
   240                              <1> invalidFilePermissions:
   241 00000F90 B805000000          <1>     mov eax, errAccDen
   242 00000F95 668905(12C10300)    <1>     mov word [errorExCde], ax
   243 00000F9C 31C9                <1>     xor ecx, ecx    ;To allow for using jrcxz to exit
   244 00000F9E F9                  <1>     stc
   245 00000F9F C3                  <1>     ret
   246                              <1> 
   247                              <1> setCurrentSFT:
   248                              <1> ;Set the pointer in rsi as current SFT 
   249 00000FA0 488935(0BC30300)    <1>     mov qword [currentSFT], rsi
   250 00000FA7 C3                  <1>     ret
   251                              <1> getCurrentSFT:
   252                              <1> ;Get the current SFT pointer in rsi
   253 00000FA8 488B35(0BC30300)    <1>     mov rsi, qword [currentSFT]
   254 00000FAF C3                  <1>     ret
   255                              <1> 
   256                              <1> getSFTPtr:
   257                              <1> ;Gets the SFT pointer for a given file handle from the calling application
   258                              <1> ;On entry:
   259                              <1> ;   bx = File handle from JFT for calling application
   260                              <1> ;On exit: CF=NC, SFT found.
   261                              <1> ; Set the following vars: currentSFT, currentJFT, currentHdl
   262                              <1> ; Set rdi = currentSFT entry
   263                              <1> ;         CF=CY, SFT not found, abort! al=BadHdl errorcode
   264 00000FB0 50                  <1>     push rax
   265 00000FB1 53                  <1>     push rbx
   266 00000FB2 56                  <1>     push rsi
   267 00000FB3 663B1D(B6C00300)    <1>     cmp bx, word [maxHndls]  ;current max number of file handles
   268 00000FBA 736E                <1>     jnb .gspFail
   269 00000FBC 488B35(26C10300)    <1>     mov rsi, qword [currentPSP]
   270 00000FC3 89D8                <1>     mov eax, ebx    ;Save handle number in eax
   271 00000FC5 480FB7DB            <1>     movzx rbx, bx
   272 00000FC9 488D5C1E2A          <1>     lea rbx, qword [rsi + psp.jobFileTbl + rbx] 
   273 00000FCE 48891D(03C30300)    <1>     mov [currentJFT], rbx   ;Save a pointer to the JFT entry
   274 00000FD5 8A1B                <1>     mov bl, byte [rbx]   ;Use jft entry to get sft num
   275 00000FD7 80FBFF              <1>     cmp bl, -1  ;Non-existant SFT reference?
   276 00000FDA 744E                <1>     je .gspFail
   277 00000FDC 668905(13C30300)    <1>     mov word [currentHdl], ax   ;Current handle number saved here
   278 00000FE3 31C0                <1>     xor eax, eax
   279 00000FE5 488B3D(88C00300)    <1>     mov rdi, qword [sftHeadPtr]
   280                              <1> .gsp0:
   281 00000FEC 66034708            <1>     add ax, word [rdi + sfth.wNumFiles]
   282 00000FF0 38D8                <1>     cmp al, bl  ;Check if the file header block contains the entry
   283 00000FF2 760E                <1>     jbe .gsp1   ;IF bl is below or equal to al then it does
   284 00000FF4 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of list
   285 00000FFB 742D                <1>     je .gspFail   ;If we have a number greater than the last entry, fail
   286 00000FFD 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Walk the chain
   287 00001000 EBEA                <1>     jmp short .gsp0 ;Search again
   288                              <1> .gsp1: 
   289                              <1>     ;Now point to the right entry
   290 00001002 28D8                <1>     sub al, bl  ;Subtract the number from the total so far to get offset
   291 00001004 0FB6C0              <1>     movzx eax, al
   292 00001007 4881C70A000000      <1>     add rdi, sfth_size  ;Point to first file in table
   293 0000100E 84C0                <1>     test al, al ;Check if rdi points to the first file in this block
   294 00001010 740B                <1>     jz .gsp12   ;Skip walking down the sft blocks
   295                              <1> .gsp11:
   296 00001012 4881C743000000      <1>     add rdi, sft_size
   297 00001019 FEC8                <1>     dec al
   298 0000101B 75F5                <1>     jnz .gsp11  ;Keep adding one until al is zero
   299                              <1> .gsp12:
   300 0000101D 4889FE              <1>     mov rsi, rdi
   301 00001020 E87BFFFFFF          <1>     call setCurrentSFT ;Set Current SFT pointer to rsi value
   302 00001025 F8                  <1>     clc
   303                              <1> .gspExit:
   304 00001026 5E                  <1>     pop rsi
   305 00001027 5B                  <1>     pop rbx
   306 00001028 58                  <1>     pop rax
   307 00001029 C3                  <1>     ret
   308                              <1> .gspFail:
   309 0000102A B806000000          <1>     mov eax, errBadHdl  ;al, zero rest of it
   310 0000102F F9                  <1>     stc
   311 00001030 EBF4                <1>     jmp short .gspExit
   312                              <1> 
   313                              <1> copySFTtoSDA:
   314                              <1> ;Called with rsi pointing to SFT structure
   315                              <1> ;Prepares the scratch SFT in SDA for use
   316 00001032 488D3D(95C80300)    <1>     lea rdi, scratchSFT
   317 00001039 488B35(0BC30300)    <1>     mov rsi, qword [currentSFT]   ;Get current SFT
   318 00001040 EB0E                <1>     jmp short copySScommon
   319                              <1> copySDAtoSFT:
   320 00001042 488D35(95C80300)    <1>     lea rsi, scratchSFT
   321 00001049 488B3D(0BC30300)    <1>     mov rdi, qword [currentSFT]   ;Get current SFT
   322                              <1> copySScommon:
   323 00001050 51                  <1>     push rcx
   324 00001051 B943000000          <1>     mov ecx, sft_size
   325 00001056 F3A4                <1>     rep movsb   ;Copy
   326 00001058 59                  <1>     pop rcx
   327 00001059 C3                  <1>     ret
   328                              <1> getBytesTransferred:
   329 0000105A 8B0D(4FC30300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
   330 00001060 F7D9                <1>     neg ecx ;Multiply by -1
   331 00001062 030D(4BC30300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
   332 00001068 C3                  <1>     ret ;Return bytes transferred in ecx
   333                              <1> updateCurrentSFT:
   334                              <1> ;Updates the Current SFT fields before returning from a file handle operation
   335 00001069 56                  <1>     push rsi
   336 0000106A 50                  <1>     push rax
   337 0000106B 488B35(0BC30300)    <1>     mov rsi, qword [currentSFT]
   338 00001072 8B05(3BC30300)      <1>     mov eax, dword [currByteA]
   339 00001078 89461B              <1>     mov dword [rsi + sft.dCurntOff], eax
   340 0000107B 8B05(2BC30300)      <1>     mov eax, dword [currClustA]
   341 00001081 89463F              <1>     mov dword [rsi + sft.dAbsClusr], eax
   342 00001084 8B05(27C30300)      <1>     mov eax, dword [currClust]
   343 0000108A 89461F              <1>     mov dword [rsi + sft.dRelClust], eax
   344 0000108D 58                  <1>     pop rax
   345 0000108E 5E                  <1>     pop rsi
   346 0000108F C3                  <1>     ret
   347                              <1> readBytesASCII:
   348                              <1> ;Input: ecx = number of bytes to read in ASCII mode
   349                              <1> writeBytesASCII:
   350                              <1> ;Input: ecx = number of bytes to write in ASCII mode
   351 00001090 C3                  <1>     ret
   352                              <1> readWriteBytesBinary:
   353                              <1> ;Input: ecx = number of bytes to read in Binary mode
   354                              <1> ;       rdi = Points to where in caller buffer to place bytes
   355                              <1> ;       rsi = Points to where in DOS buffer to place pointer
   356                              <1> ;xchg rdi and rsi if rwFlag is set (i.e. a write operation)
   357                              <1> ;Preserve rcx so we know how many bytes transferred
   358                              <1> ;Update the currByteA variable
   359                              <1> ;Returns (rsi and rdi) + (ecx on entry)
   360 00001091 51                  <1>     push rcx
   361 00001092 F605(92C20300)FF    <1>     test byte [rwFlag], -1   ;Is this a write operaiton
   362 00001099 7403                <1>     jz .noSwap
   363 0000109B 4887FE              <1>     xchg rdi, rsi
   364                              <1> .noSwap:
   365 0000109E F3A4                <1>     rep movsb
   366 000010A0 59                  <1>     pop rcx
   367 000010A1 010D(3BC30300)      <1>     add dword [currByteA], ecx  ;Move file pointer by ecx bytes
   368 000010A7 290D(4FC30300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
   369 000010AD C3                  <1>     ret
    25                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    26                              <1> ;Memory related functions
    27                              <1> 
    28                              <1> ;-----------------------------------:
    29                              <1> ;  Memory related Kernel routines   :
    30                              <1> ;-----------------------------------:
    31                              <1> allocateMemory:    ;ah = 48h
    32                              <1> ;Input: ebx = Number of paragraphs requested
    33                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    34                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    35 000010AE 31D2                <1>     xor edx, edx
    36                              <1>     ;Clear the pointers
    37 000010B0 488915(3FC10300)    <1>     mov qword [firstMCB], rdx
    38 000010B7 488915(47C10300)    <1>     mov qword [bestMCB], rdx
    39 000010BE 488915(4FC10300)    <1>     mov qword [lastMCB], rdx
    40 000010C5 31ED                <1>     xor ebp, ebp    
    41 000010C7 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    42 000010C9 488B35(78C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    43                              <1> .walk:
    44 000010D0 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    45 000010D3 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    46 000010D6 7409                <1>     je .walk1
    47 000010D8 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    48 000010DB 0F8565050000        <1>     jne memSysHalt
    49                              <1> .walk1:
    50                              <1>     ;Here if valid but not the last block
    51 000010E1 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    52 000010E9 0F8582000000        <1>     jne .walk2
    53                              <1>     ;Here we consolidate adjacent free blocks if there are any
    54                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    55                              <1>     ;End consolidation at first non free block or at last block in chain
    56 000010EF 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    57 000010F2 744A                <1>     je .det0    ;Determine if this block is useful
    58 000010F4 31C9                <1>     xor ecx, ecx
    59 000010F6 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    60 000010F9 4881C610000000      <1>     add rsi, mcb.program
    61                              <1> .cons0:
    62 00001100 48C1E104            <1>     shl rcx, 4
    63 00001104 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    64 00001107 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    65 0000110A 7409                <1>     je .cons1
    66 0000110C 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    67 0000110F 0F8531050000        <1>     jne memSysHalt 
    68                              <1> .cons1:
    69 00001115 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    70 0000111D 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    71                              <1>     ;Here rsi, points to a free block, add it to rdi
    72 0000111F 31C9                <1>     xor ecx, ecx
    73 00001121 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    74 00001124 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    75 0000112A 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    76 0000112D 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    77 0000112F 31D2                <1>     xor edx, edx
    78 00001131 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    79 00001134 48895608            <1>     mov qword [rsi + 8], rdx
    80 00001138 3C5A                <1>     cmp al, mcbMarkEnd
    81 0000113A 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    82                              <1>     ;Here we deal with if the block was the last one 
    83 0000113C 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    84                              <1> .det0:  ;Now determine if pointer in rdi is useful
    85 0000113E 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    86                              <1> ;ebx must be less than the arena size for the arena to be useful!
    87 00001141 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    88 00001144 39D9                <1>     cmp ecx, ebx
    89 00001146 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    90 00001148 488935(4FC10300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    91 0000114F 488B05(3FC10300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    92 00001156 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    93 00001159 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    94 0000115B 488935(3FC10300)    <1>     mov qword [firstMCB], rsi
    95                              <1> .det1:
    96                              <1>     ;Now test for best fit.
    97 00001162 29D9                <1>     sub ecx, ebx    ;Block - ebx
    98 00001164 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    99 00001166 7209                <1>     jb .walk2
   100 00001168 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   101 0000116A 488935(47C10300)    <1>     mov qword [bestMCB], rsi
   102                              <1> .walk2:
   103 00001171 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   104 00001174 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   105 00001176 31C9                <1>     xor ecx, ecx
   106 00001178 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   107 0000117B 48C1E104            <1>     shl rcx, 4
   108 0000117F 4881C610000000      <1>     add rsi, mcb.program
   109 00001186 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   110 00001189 E942FFFFFF          <1>     jmp .walk
   111                              <1> .allocate:
   112                              <1>     ;Allocation fails IF the pointer is the null pointer
   113 0000118E 803D(3AC10300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   114 00001195 7261                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   115                              <1>     ;Fall thru if last fit
   116 00001197 488B35(4FC10300)    <1>     mov rsi, qword [lastMCB]
   117 0000119E 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   118 000011A1 0F84CE000000        <1>     jz .allocFail
   119 000011A7 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   120 000011A9 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   121 000011AC 31C9                <1>     xor ecx, ecx
   122 000011AE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   123 000011B1 29D9                <1>     sub ecx, ebx
   124 000011B3 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   125 000011B9 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   126 000011BC 48C1E104            <1>     shl rcx, 4
   127 000011C0 4881C610000000      <1>     add rsi, mcb.program
   128 000011C7 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   129 000011CA 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   130 000011CC 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   131 000011CF 488B15(26C10300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   132 000011D6 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   133 000011DA 488B15(73C10300)    <1>     mov rdx, qword [oldRSP]
   134 000011E1 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   135 000011E8 4889F0              <1>     mov rax, rsi
   136 000011EB 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   137 000011EE 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   138 000011F2 E824040000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   139 000011F7 C3                  <1>     ret
   140                              <1> .bfCommon:
   141 000011F8 488B35(3FC10300)    <1>     mov rsi, qword [firstMCB]
   142 000011FF 803D(3AC10300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   143 00001206 480F4435(47C10300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   144 0000120E 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   145 00001211 7462                <1>     jz .allocFail
   146 00001213 8A06                <1>     mov al, byte [rsi + mcb.marker]
   147 00001215 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   148 00001218 31C9                <1>     xor ecx, ecx
   149 0000121A 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   150 0000121D 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   151 0000121F 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   152 00001225 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   153 00001228 488B15(26C10300)    <1>     mov rdx, qword [currentPSP]
   154 0000122F 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   155 00001233 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   156 00001236 4881C610000000      <1>     add rsi, mcb.program
   157 0000123D 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   158 00001243 48C1E304            <1>     shl rbx, 4
   159 00001247 4801DE              <1>     add rsi, rbx
   160 0000124A 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   161 0000124C 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   162 00001254 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   163 00001257 488B15(73C10300)    <1>     mov rdx, qword [oldRSP]
   164 0000125E 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   165 00001265 4889F8              <1>     mov rax, rdi
   166 00001268 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   167 0000126B 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   168 0000126F E8A7030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   169 00001274 C3                  <1>     ret
   170                              <1> .allocFail:
   171                              <1>     ;Walk the MCB chain to determine the biggest block size
   172 00001275 488B35(78C00300)    <1>     mov rsi, [mcbChainPtr]
   173 0000127C 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   174                              <1> .af0:
   175 0000127E 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   176 00001281 7409                <1>     je .af1
   177 00001283 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   178 00001286 0F85BA030000        <1>     jne memSysHalt
   179                              <1> .af1:
   180 0000128C 31C9                <1>     xor ecx, ecx
   181 0000128E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   182 00001291 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   183 00001299 7505                <1>     jne .af2
   184 0000129B 39D9                <1>     cmp ecx, ebx
   185 0000129D 0F47D9              <1>     cmova ebx, ecx
   186                              <1> .af2:
   187 000012A0 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   188 000012A3 7410                <1>     je .afExit
   189 000012A5 48C1E104            <1>     shl rcx, 4
   190 000012A9 4881C610000000      <1>     add rsi, mcb.program
   191 000012B0 4801CE              <1>     add rsi, rcx
   192 000012B3 EBD7                <1>     jmp short .af1
   193                              <1> .afExit:
   194 000012B5 B808000000          <1>     mov eax, errNoMem
   195 000012BA 488B15(73C10300)    <1>     mov rdx, qword [oldRSP]
   196 000012C1 8802                <1>     mov byte [rdx + callerFrame.rax], al
   197 000012C3 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx
   198 000012C6 804A5801            <1>     or byte [rdx + callerFrame.flags], 1
   199 000012CA C3                  <1>     ret
   200                              <1> freeMemory:        ;ah = 49h
   201                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   202                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   203                              <1> ;Always skip the first block as this is the anchor for DOS
   204 000012CB 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   205 000012D2 31C9                <1>     xor ecx, ecx
   206 000012D4 488B35(78C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   207 000012DB 4889F7              <1>     mov rdi, rsi
   208 000012DE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   209 000012E1 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   210 000012E5 4881C610000000      <1>     add rsi, mcb.program
   211 000012EC 4801CE              <1>     add rsi, rcx    ;Go to next block
   212                              <1> .mainLoop:
   213 000012EF 31C9                <1>     xor ecx, ecx
   214 000012F1 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   215 000012F4 7409                <1>     je .valid
   216 000012F6 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   217 000012F9 0F8547030000        <1>     jne memSysHalt
   218                              <1> .valid:
   219 000012FF 4939F0              <1>     cmp r8, rsi
   220 00001302 741C                <1>     je .blockFound
   221                              <1>     ;Not valid, check if last block in chain
   222 00001304 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   223 00001307 0F84A0000000        <1>     je .blockNotFound
   224 0000130D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   225 00001310 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   226 00001314 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   227 0000131B 4801CE              <1>     add rsi, rcx    ;Go to next block
   228 0000131E EBCF                <1>     jmp short .mainLoop
   229                              <1> .blockFound:
   230                              <1>     ;If hole, error.
   231                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   232 00001320 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   233 00001328 0F8488000000        <1>     je .blockHole
   234 0000132E 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   235 00001336 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   236 0000133E 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   237                              <1>     ;It is, let it absorb this space
   238 00001340 31C9                <1>     xor ecx, ecx
   239 00001342 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   240 00001345 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   241 0000134B 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   242                              <1>     ;Replace block marker
   243 0000134E 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   244 00001350 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   245 00001352 31C9                <1>     xor ecx, ecx
   246 00001354 48890E              <1>     mov qword [rsi], rcx
   247 00001357 48894E08            <1>     mov qword [rsi + 8], rcx
   248 0000135B 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   249                              <1> .blockFoundCheckFollowing:
   250                              <1>     ;First check if we are the last block in chain
   251 0000135E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   252 00001361 7439                <1>     je .blockFoundExit  ;If yes, exit!
   253 00001363 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   254 00001366 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   255 00001369 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   256 0000136D 4881C110000000      <1>     add rcx, mcb.program
   257 00001374 4801CE              <1>     add rsi, rcx    ;Go to next block
   258 00001377 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   259 0000137F 751B                <1>     jne .blockFoundExit ;If not free, exit
   260                              <1>     ;If free, absorb into block pointed to by rdi
   261 00001381 31C9                <1>     xor ecx, ecx
   262 00001383 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   263 00001386 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   264 0000138C 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   265                              <1>     ;Replace block marker
   266 0000138F 8A06                <1>     mov al, byte [rsi + mcb.marker]
   267 00001391 8807                <1>     mov byte [rdi + mcb.marker], al
   268 00001393 31C9                <1>     xor ecx, ecx
   269 00001395 48890E              <1>     mov qword [rsi], rcx
   270 00001398 48894E08            <1>     mov qword [rsi + 8], rcx
   271                              <1> .blockFoundExit:
   272 0000139C E87A020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   273 000013A1 488B1D(73C10300)    <1>     mov rbx, qword [oldRSP]
   274 000013A8 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   275 000013AC C3                  <1>     ret
   276                              <1> .blockNotFound:
   277                              <1>     ;Set CF and error code
   278 000013AD C605(15C10300)08    <1>     mov byte [errorClass], eClsNotFnd   ;Block not found 
   279 000013B4 EB07                <1>     jmp short .blockError
   280                              <1> .blockHole:
   281                              <1> ;Cannot free a hole! Fail!
   282 000013B6 C605(15C10300)0A    <1>     mov byte [errorClass], eClsLocked   ;Cant free a hole
   283                              <1> .blockError:
   284 000013BD C605(10C10300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   285 000013C4 C605(11C10300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   286 000013CB 66C705(12C10300)09- <1>     mov word [errorExCde], errMemAddr   ;Invalid mem addr
   286 000013D3 00                  <1>
   287 000013D4 C605(14C10300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   288 000013DB B809000000          <1>     mov eax, errMemAddr
   289 000013E0 488B1D(73C10300)    <1>     mov rbx, qword [oldRSP]
   290 000013E7 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   291 000013EA 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   292 000013EE E828020000          <1>     call verifyIntegrityOfMCBChain
   293 000013F3 C3                  <1>     ret
   294                              <1> reallocMemory:     ;ah = 4Ah
   295                              <1> ;Input: r8 = address of the block to be realloc'ed
   296                              <1> ;       ebx = How many paras this block should contain after realloc. 
   297                              <1> ;               If ebx = 0, jump to free memory
   298 000013F4 85DB                <1>     test ebx, ebx
   299 000013F6 0F84CFFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   300 000013FC 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   301 00001403 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   302 00001406 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   303 00001409 7409                <1>     je .ctn
   304 0000140B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   305 0000140E 0F855C010000        <1>     jne .badAddrGiven
   306                              <1> .ctn:
   307                              <1>     ;Provided block is valid and not a hole
   308                              <1>     ;Check if Growth or Shrink
   309 00001414 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   310 0000141C 7498                <1>     je freeMemory.blockHole
   311 0000141E 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   312 00001421 31C9                <1>     xor ecx, ecx
   313 00001423 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   314 00001426 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   315 00001428 0F8786000000        <1>     ja .growth
   316 0000142E 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   317                              <1> ;We can always shrink
   318 00001434 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   319 00001436 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   320 0000143C 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   321 0000143F 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   322 00001445 48C1E304            <1>     shl rbx, 4
   323 00001449 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   324 00001450 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   325 00001453 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   326 00001455 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   327 00001458 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   328 0000145A 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   329 00001462 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   330 00001465 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   331 00001467 0F84DB000000        <1>     je .exit
   332                              <1> ;Else, now see if the block following is also free and absorb it
   333 0000146D 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   334 00001470 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   335 00001474 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   336 0000147B 4801CE              <1>     add rsi, rcx    ;Goto next arena
   337 0000147E 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   338 00001481 7409                <1>     je .shrinkAbsorb
   339 00001483 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   340 00001486 0F85BA010000        <1>     jne memSysHalt
   341                              <1> .shrinkAbsorb:
   342 0000148C 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   343 00001494 0F85AE000000        <1>     jne .exit
   344                              <1>     ;It is free, absorb it
   345 0000149A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   346 0000149D 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   347 000014A3 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   348 000014A6 31C9                <1>     xor ecx, ecx
   349                              <1>     ;Clear absorbed MCB
   350 000014A8 48890E              <1>     mov qword [rsi], rcx
   351 000014AB 48894E08            <1>     mov qword [rsi + 8], rcx
   352 000014AF E994000000          <1>     jmp .exit
   353                              <1> .growth:
   354                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   355 000014B4 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   356 000014B7 0F84A0000000        <1>     je .notEnuffMem
   357                              <1> ;Now check the following space is free. If not, not enuff mem err
   358 000014BD 31C9                <1>     xor ecx, ecx
   359 000014BF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   360 000014C2 48C1E104            <1>     shl rcx, 4
   361 000014C6 4889F7              <1>     mov rdi, rsi    
   362 000014C9 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   363 000014D0 4801CE              <1>     add rsi, rcx
   364 000014D3 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   365 000014D6 7409                <1>     je .growthOK
   366 000014D8 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   367 000014DB 0F8565010000        <1>     jne memSysHalt
   368                              <1> .growthOK:
   369                              <1>     ;rdi points to block we are growing
   370 000014E1 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   371 000014E9 7572                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   372                              <1>     ;rsi must own all memory up to the next owned arena
   373 000014EB 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   374 000014ED 31C9                <1>     xor ecx, ecx
   375 000014EF 31D2                <1>     xor edx, edx
   376 000014F1 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   377 000014F4 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   378 000014FA 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   379 000014FD 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   380 000014FF 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   381 00001501 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   382 00001504 7759                <1>     ja .notEnuffMem1
   383 00001506 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   384 00001508 81FA01000000        <1>     cmp edx, 1
   385 0000150E 7449                <1>     je .notEnuffMem2
   386 00001510 31C9                <1>     xor ecx, ecx
   387 00001512 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   388 00001515 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   389 00001519 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   390 0000151C 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   391 0000151F 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   392 00001526 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   393 0000152A 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   394 0000152D 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   395 00001531 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   396                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   397                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   398 00001533 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   399 00001535 7411                <1>     jz .exit
   400 00001537 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   401 0000153D 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   402 00001540 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   403                              <1> .exit:
   404 00001548 E8CE000000          <1>     call verifyIntegrityOfMCBChain
   405 0000154D 488B1D(73C10300)    <1>     mov rbx, qword [oldRSP]
   406 00001554 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   407 00001558 C3                  <1>     ret
   408                              <1> .notEnuffMem2:
   409 00001559 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   410 0000155B EB02                <1>     jmp short .notEnuffMem1
   411                              <1> .notEnuffMem:
   412 0000155D 31DB                <1>     xor ebx, ebx    ;No space to grow
   413                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   414 0000155F B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   415 00001564 488B15(73C10300)    <1>     mov rdx, qword [oldRSP]
   416 0000156B 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   417 0000156E EB0C                <1>     jmp short .bad
   418                              <1> .badAddrGiven:
   419 00001570 488B15(73C10300)    <1>     mov rdx, qword [oldRSP]
   420 00001577 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   421                              <1> .bad:
   422 0000157C C605(10C10300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   423 00001583 C605(11C10300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   424 0000158A 668905(12C10300)    <1>     mov word [errorExCde], ax   ;Error code
   425 00001591 C605(14C10300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   426 00001598 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save this word on stack
   427 0000159B 804A5801            <1>     or byte [rdx + callerFrame.flags], 1    ;Set Carry flag on
   428 0000159F E877000000          <1>     call verifyIntegrityOfMCBChain
   429 000015A4 C3                  <1>     ret
   430                              <1> getsetMallocStrat: ;ah = 58h
   431 000015A5 84C0                <1>     test al, al
   432 000015A7 741F                <1>     jz .get
   433 000015A9 3C02                <1>     cmp al, 2
   434 000015AB 7337                <1>     jae .bad
   435                              <1> ;Set here
   436 000015AD 488B1D(73C10300)    <1>     mov rbx, qword [oldRSP]
   437 000015B4 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   438 000015B8 8805(3AC10300)      <1>     mov byte [allocStrat], al   ;Only save low word
   439 000015BE 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   440 000015C2 E854000000          <1>     call verifyIntegrityOfMCBChain
   441 000015C7 C3                  <1>     ret
   442                              <1> .get:
   443 000015C8 488B1D(73C10300)    <1>     mov rbx, qword [oldRSP]
   444 000015CF 31C0                <1>     xor eax, eax
   445 000015D1 8A05(3AC10300)      <1>     mov al, byte [allocStrat]
   446 000015D7 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   447 000015DA 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   448 000015DE E838000000          <1>     call verifyIntegrityOfMCBChain
   449 000015E3 C3                  <1>     ret
   450                              <1> .bad:
   451 000015E4 C605(10C10300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   452 000015EB C605(11C10300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   453 000015F2 66C705(12C10300)01- <1>     mov word [errorExCde], errInvFnc   ;Invalid function number addr
   453 000015FA 00                  <1>
   454 000015FB C605(14C10300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   455 00001602 B801000000          <1>     mov eax, errInvFnc
   456 00001607 488B1D(73C10300)    <1>     mov rbx, qword [oldRSP]
   457 0000160E 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   458 00001611 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   459 00001615 E801000000          <1>     call verifyIntegrityOfMCBChain
   460 0000161A C3                  <1>     ret
   461                              <1> ;-----------------------------------:
   462                              <1> ;      Memory related routines      :
   463                              <1> ;-----------------------------------:
   464                              <1> verifyIntegrityOfMCBChain:
   465 0000161B 50                  <1>     push rax
   466 0000161C 53                  <1>     push rbx
   467 0000161D 488B1D(78C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   468                              <1> .ok:
   469 00001624 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   470 00001627 7408                <1>     je .ok1
   471 00001629 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   472 0000162C 7518                <1>     jne memSysHalt    ;It was not M or Z, fail violently
   473                              <1> .exit:
   474 0000162E 5B                  <1>     pop rbx
   475 0000162F 58                  <1>     pop rax
   476 00001630 C3                  <1>     ret ;We have reached the end of the chain, return all good!
   477                              <1> .ok1:
   478 00001631 31C0                <1>     xor eax, eax
   479 00001633 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   480 00001636 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   481 0000163A 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   482 00001641 4801C3              <1>     add rbx, rax
   483 00001644 EBDE                <1>     jmp short .ok
   484                              <1> memSysHalt:
   485                              <1> ;Only arrive here if the integrity of the system is not verified
   486                              <1> ;Lock the system
   487 00001646 C605(10C10300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   488 0000164D C605(11C10300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   489 00001654 66C705(12C10300)07- <1>     mov word [errorExCde], errMCBbad   ;Destroyed MCB chain
   489 0000165C 00                  <1>
   490 0000165D C605(14C10300)05    <1>     mov byte [errorAction], eActKil ;Abort the system
   491 00001664 488D150E000000      <1>     lea rdx, .sysHltString
   492 0000166B B409                <1>     mov ah, 09h
   493 0000166D CD41                <1>     int 41h
   494                              <1>     ;Only halt IRQ's in production!
   495                              <1>     %if !DEBUG
   496 0000166F FA                  <1>     cli ;Halt interrupts
   497 00001670 B0FF                <1>     mov al, 0FFh    ;Mask IRQ lines 
   498 00001672 E6A1                <1>     out 0A1h, al
   499 00001674 E621                <1>     out 021h, al
   500                              <1>     %endif
   501 00001676 F4                  <1>     hlt             ;Halt the system
   502 00001677 EBFD                <1>     jmp short $ - 1 ;Go back far enough to capture the hlt
   503 00001679 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
   503 00001682 6C6F636174696F6E20- <1>
   503 0000168B 6572726F720D0A      <1>
   504 00001692 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
   504 0000169B 616420434F4D4D414E- <1>
   504 000016A4 442C2073797374656D- <1>
   504 000016AD 2068616C74656424    <1>
    26                                  %include "./Source/Kernel/MemExec/execTerm.asm"
    27                              <1> ;EXEC and all default terminates are here
    28                              <1> 
    29                              <1> ;========================
    30                              <1> ;   Interrupt handlers
    31                              <1> ;========================
    32                              <1> terminateProcess:   ;Int 40h
    33 000016B5 48CF                <1>     iretq
    34                              <1> terminateRes:       ;Int 47h
    35 000016B7 48CF                <1>     iretq
    36                              <1> ;========================
    37                              <1> ;    Int 21h functions
    38                              <1> ;========================
    39                              <1> simpleTerminate:   ;ah = 00h
    40 000016B9 C3                  <1>     ret
    41                              <1> terminateStayRes:  ;ah = 31h
    42 000016BA C3                  <1>     ret
    43                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    44 000016BB C3                  <1>     ret
    45                              <1> terminateClean:    ;ah = 4Ch, EXIT
    46 000016BC C3                  <1>     ret
    27                                  %include "./Source/Kernel/Local/Local.asm"
    28                              <1> ;Localisation based functions live here
    29                              <1> 
    30                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    31                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    32                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    33                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    34 000016BD C3                  <1>     ret
    28                                  %include "./Source/Kernel/ctrlc.asm"
    29                              <1> criticalDOSError:
    30                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    31                              <1> ; to the critical error handler.
    32                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    33                              <1> ; and with Int44Bitfield set
    34                              <1> ;               AH = Critical Error Bitfield
    35                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    36                              <1> ;               Bit 6 - Reserved
    37                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    38                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    39                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    40                              <1> ;               Bits [2-1] = Affected Disk Error
    41                              <1> ;                     0 0   DOS area
    42                              <1> ;                     0 1   FAT area
    43                              <1> ;                     1 0   Directory area
    44                              <1> ;                     1 1   Data area
    45                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    46                              <1> ;               AL  = Failing drive number if AH[7] = 0
    47                              <1> ;               DIL = Error code for errorMsg
    48                              <1> ;               RSI = EA of Device Header for which device the error occured
    49                              <1> ;Return:
    50                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    51                              <1> ;                  = 1 - Retry the Operation    (Retry)
    52                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
    53                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    54                              <1> ; Return response from int 44h in al
    55                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
    56                              <1> ; This function will terminate the program if an abort was requested!
    57                              <1> ; This function also destroys RBP
    58 000016BE 803D(0EC10300)01    <1>     cmp byte [critErrFlag], 1
    59 000016C5 7204                <1>     jb .noIntError  ;If not 0, enter
    60 000016C7 B003                <1>     mov al, critFail    ;Else, return Fail always
    61 000016C9 EB34                <1>     jmp short .checkResponse
    62                              <1> .noIntError:
    63 000016CB FA                  <1>     cli ;Disable Interrupts
    64 000016CC FE05(0EC10300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
    65 000016D2 FE0D(0FC10300)      <1>     dec byte [inDOS]    ;Exiting DOS
    66 000016D8 488925(5FC10300)    <1>     mov qword [xInt44hRSP], rsp
    67 000016DF 488B25(73C10300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    68 000016E6 31ED                <1>     xor ebp, ebp
    69 000016E8 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
    70 000016EA 488B25(5FC10300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    71 000016F1 C605(0EC10300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    72 000016F8 FE05(0FC10300)      <1>     inc byte [inDOS]    ;Reenter DOS
    73 000016FE FB                  <1>     sti ;Reenable Interrupts
    74                              <1>     ;Now we check that the response given was allowed, and translate if needed
    75                              <1> .checkResponse:
    76 000016FF 3C01                <1>     cmp al, 01h
    77 00001701 7217                <1>     jb .checkIgnore
    78 00001703 7420                <1>     je .checkRetry
    79 00001705 3C03                <1>     cmp al, 03h
    80 00001707 752F                <1>     jne .abort   ;Must be abort
    81                              <1> ;Here is for fail
    82 00001709 F605(67C10300)08    <1>     test byte [Int44bitfld], critFailOK
    83 00001710 7526                <1>     jnz .abort
    84                              <1> .exit:
    85 00001712 C605(10C10300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
    86 00001719 C3                  <1>     ret
    87                              <1> .checkIgnore:
    88 0000171A F605(67C10300)20    <1>     test byte [Int44bitfld], critIgnorOK
    89 00001721 75EF                <1>     jnz .exit
    90 00001723 EB09                <1>     jmp short .setFail
    91                              <1> .checkRetry:
    92 00001725 F605(67C10300)10    <1>     test byte [Int44bitfld], critRetryOK
    93 0000172C 75E4                <1>     jnz .exit
    94                              <1> .setFail:
    95 0000172E B003                <1>     mov al, critFail
    96 00001730 FE05(68C10300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
    97 00001736 EBC7                <1>     jmp short .checkResponse    ;Double check if I can return Fail
    98                              <1> .abort:
    99                              <1> ;Prepare to abort. We abort from within!
   100                              <1> ;Currently fall into ^C
   101                              <1> ctrlBreakHdlr:
   102                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   103 00001738 FA                  <1> 	cli
   104 00001739 488B25(73C10300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   105 00001740 E8A3050000          <1> 	call dosPopRegs ;Get user state back
   106 00001745 488925(30C10300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   107 0000174C F8                  <1>     clc
   108 0000174D CD43                <1>     int 43h ;Call critical error handler
   109 0000174F FA                  <1>     cli ;Clear interrupts again
   110 00001750 488905(06C10300)    <1>     mov qword [oldRAX], rax ;Save rax
   111 00001757 9C                  <1>     pushfq  ;Get flags in rax
   112 00001758 58                  <1>     pop rax 
   113 00001759 483B25(30C10300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   114 00001760 750C                <1>     jne .checkCF
   115                              <1> .returnToDOS:
   116 00001762 488B05(06C10300)    <1>     mov rax, qword [oldRAX]
   117 00001769 E93C040000          <1>     jmp functionDispatch    ;Goto int 41h
   118                              <1> .checkCF:
   119 0000176E 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   120 00001775 A801                <1>     test al, 1  ;CF set?
   121 00001777 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   122 00001779 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   123 0000177E C605(84C10300)FF    <1>     mov byte [critExit], -1  ;CTRL+BREAK termination
   124 00001785 E920040000          <1>     jmp functionDispatch
   125                              <1> 
    29                                  %include "./Source/Kernel/dosPrim.asm"
    30                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    31                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    32                              <1> 
    33                              <1> dosDefCritErrHdlr:
    34                              <1> ;The DOS default critical error handler always returns FAIL
    35 0000178A B003                <1>     mov al, critFail
    36 0000178C 48CF                <1>     iretq
    37                              <1> 
    38                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    39                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    40                              <1> ;       rbx = Ptr to the request header for the driver call!
    41 0000178E E897050000          <1>     call dosCrit2Enter
    42 00001793 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    43 00001796 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    44 00001799 E896050000          <1>     call dosCrit2Exit
    45 0000179E C3                  <1>     ret
    46                              <1> 
    47                              <1> setupPhysicalDiskRequest:
    48                              <1> ;Ensure that al has valid disk number
    49                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    50                              <1> ;If CF=NC, rbp = DPB ptr.
    51                              <1> ;If CF=CY, exit error
    52 0000179F 84C0                <1>     test al, al
    53 000017A1 723F                <1>     jc .diskError
    54 000017A3 3A05(B2C00300)      <1>     cmp al, byte [lastdrvNum]
    55 000017A9 7337                <1>     jae .diskError
    56 000017AB 50                  <1>     push rax
    57 000017AC FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    58 000017AE E8BD030000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    59 000017B3 58                  <1>     pop rax
    60 000017B4 7235                <1>     jc .error
    61 000017B6 8805(97C20300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    62 000017BC 488B2D(A0C20300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    63 000017C3 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsNetDrive   ;On a network?
    64 000017CB 750A                <1>     jnz .netError
    65 000017CD 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    66 000017D1 E822030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    67 000017D6 C3                  <1>     ret
    68                              <1> .netError:
    69 000017D7 66C705(12C10300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    69 000017DF 00                  <1>
    70 000017E0 EB09                <1>     jmp short .error
    71                              <1> .diskError:
    72 000017E2 66C705(12C10300)0F- <1>     mov word [errorExCde], errBadDrv
    72 000017EA 00                  <1>
    73                              <1> .error:
    74 000017EB C605(11C10300)02    <1>     mov byte [errorLocus], eLocDsk
    75 000017F2 C605(14C10300)07    <1>     mov byte [errorAction], eActRetUsr
    76 000017F9 C605(15C10300)09    <1>     mov byte [errorClass], eClsBadFmt
    77 00001800 F9                  <1>     stc
    78 00001801 C3                  <1>     ret
    79                              <1> 
    80                              <1> setupAbsDiskEntry:
    81                              <1> ;Prepares to sets up the CDS and DPB for the request
    82 00001802 FE05(0FC10300)      <1>     inc byte [inDOS]
    83 00001808 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    84 00001809 FC                  <1>     cld ;Set string ops in the right direction
    85 0000180A E890FFFFFF          <1>     call setupPhysicalDiskRequest
    86 0000180F 7223                <1>     jc .exit    ;Error exit
    87 00001811 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    88 00001818 56                  <1>     push rsi
    89 00001819 50                  <1>     push rax
    90 0000181A 488D35(8BC10300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    91 00001821 8806                <1>     mov byte [rsi], al  ;Construct a path
    92 00001823 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    93 00001826 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
    94 0000182A F8                  <1>     clc
    95                              <1> ;++++++++++++++++++++++++++++
    96                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    97                              <1> ;Entered with path in rsi (ah=03h)
    98 0000182B B800030000          <1>     mov eax, 0300h  
    99 00001830 CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   100                              <1> ;++++++++++++++++++++++++++++
   101 00001832 58                  <1>     pop rax
   102 00001833 5E                  <1>     pop rsi
   103                              <1> .exit:
   104 00001834 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   105 00001836 C3                  <1>     ret
   106                              <1> 
   107                              <1> absDiskWrite:       ;Int 46h
   108                              <1> ;al = Drive number
   109                              <1> ;rbx = Memory Buffer address to read from
   110                              <1> ;ecx = Number of sectors to write
   111                              <1> ;rdx = Start LBA to write to
   112 00001837 FA                  <1>     cli
   113 00001838 488925(73C10300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   114 0000183F 488D25(10CF0300)    <1>     lea rsp, AuxStakTop
   115 00001846 55                  <1>     push rbp
   116 00001847 E8B6FFFFFF          <1>     call setupAbsDiskEntry
   117 0000184C 7251                <1>     jc absDiskExit
   118 0000184E E861020000          <1>     call diskWriteSetup
   119 00001853 EB1C                <1>     jmp short absDiskReadWriteCommon
   120                              <1> absDiskRead:        ;Int 45h
   121                              <1> ;al = Drive number
   122                              <1> ;rbx = Memory Buffer address to write to
   123                              <1> ;ecx = Number of sectors to read
   124                              <1> ;rdx = Start LBA to read from
   125 00001855 FA                  <1>     cli 
   126 00001856 488925(73C10300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   127 0000185D 488D25(10CF0300)    <1>     lea rsp, AuxStakTop
   128 00001864 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   129 00001865 E898FFFFFF          <1>     call setupAbsDiskEntry
   130 0000186A 7233                <1>     jc absDiskExit
   131 0000186C E84E020000          <1>     call diskReadSetup
   132                              <1> absDiskReadWriteCommon:
   133                              <1> ;Entered with the appropriate function number in ah
   134 00001871 E83A000000          <1>     call absDiskDriverCall
   135 00001876 7427                <1>     jz absDiskExit  ;Skip error code checking
   136 00001878 8A05(51C00300)      <1>     mov al, byte [diskReqHdr + ioReqPkt.status] ;Get low byte into al
   137                              <1>     ;DOS uses the following pairs in a table
   138                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   139 0000187E B480                <1>     mov ah, 80h ;Attachment failure
   140 00001880 3C0C                <1>     cmp al, 0Ch ;Gen error
   141 00001882 741A                <1>     je .absExit
   142 00001884 B440                <1>     mov ah, 40h ;Seek error
   143 00001886 3C06                <1>     cmp al, 06h
   144 00001888 7414                <1>     je .absExit
   145 0000188A B408                <1>     mov ah, 08h ;Bad CRC
   146 0000188C 3C04                <1>     cmp al, 04h
   147 0000188E 740E                <1>     je .absExit
   148 00001890 B404                <1>     mov ah, 04h ;Sector not found
   149 00001892 3C08                <1>     cmp al, 08h
   150 00001894 7408                <1>     je .absExit
   151 00001896 30E4                <1>     xor ah, ah  ;Write Protect Violation
   152 00001898 84C0                <1>     test al, al
   153 0000189A 7402                <1>     je .absExit
   154 0000189C B402                <1>     mov ah, 02h ;Other Error
   155                              <1> .absExit:
   156 0000189E F9                  <1>     stc
   157                              <1> absDiskExit:
   158 0000189F 5D                  <1>     pop rbp
   159 000018A0 FA                  <1>     cli
   160 000018A1 FE0D(0FC10300)      <1>     dec byte [inDOS]
   161 000018A7 488B25(73C10300)    <1>     mov rsp, qword [oldRSP]
   162 000018AE FB                  <1>     sti ;Reenable interrupts
   163 000018AF C3                  <1>     ret ;Return from interrupt without popping flags!
   164                              <1> absDiskDriverCall:
   165                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   166                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   167                              <1> ;       eax = Status word from request
   168                              <1> ;       ecx = Number of sectors transferred
   169 000018B0 53                  <1>     push rbx
   170 000018B1 56                  <1>     push rsi
   171                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   172 000018B2 8B0D(64C00300)      <1>     mov ecx, dword [diskReqHdr + ioReqPkt.tfrlen]
   173                              <1>     ;Prepare for goDriver now
   174 000018B8 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   175 000018BC 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr
   176 000018C3 E8C6FEFFFF          <1>     call goDriver   ;Make request
   177 000018C8 5E                  <1>     pop rsi
   178 000018C9 5B                  <1>     pop rbx
   179 000018CA 8B05(64C00300)      <1>     mov eax, dword [diskReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   180 000018D0 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   181 000018D2 0FB705(51C00300)    <1>     movzx eax, word [diskReqHdr + ioReqPkt.status]
   182 000018D9 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   183 000018DD C3                  <1>     ret
   184                              <1> 
   185                              <1> getDiskDPB:
   186                              <1> ;Gets the disk DPB if the Disk is physical
   187                              <1> ;Otherwise will return a pointer to the drive DPB
   188                              <1> ;Called with rdi pointing to the CDS
   189                              <1> ;CF=NC => RBP=DPBptr, CF=CY => Error exit
   190 000018DE 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   191 000018E2 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   192 000018E5 8805(97C20300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   193 000018EB E808020000          <1>     call setWorkingDPB
   194 000018F0 57                  <1>     push rdi    ;Save the CDS ptr
   195 000018F1 E838000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   196 000018F6 5F                  <1>     pop rdi
   197 000018F7 7234                <1>     jc .exitBad ;Preserve CF
   198 000018F9 7531                <1>     jnz .exit
   199                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   200 000018FB 8A0D(B2C00300)      <1>     mov cl, byte [lastdrvNum]
   201 00001901 4831C0              <1>     xor rax, rax
   202 00001904 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   203 00001907 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   204 0000190B 488B3D(AAC00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   205                              <1> .checkCDS:
   206 00001912 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   207 00001916 7509                <1>     jne .next
   208 00001918 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   209 0000191C 7403                <1>     jz .next    ;IF yes, skip it
   210 0000191E 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   211                              <1> .next:
   212 00001921 4881C75B000000      <1>     add rdi, cds_size
   213 00001928 FEC9                <1>     dec cl
   214 0000192A 75E6                <1>     jnz .checkCDS
   215                              <1> .exit:
   216 0000192C F8                  <1>     clc
   217                              <1> .exitBad:
   218 0000192D C3                  <1>     ret
   219                              <1> 
   220                              <1> ensureDiskValid:
   221                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   222                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   223                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   224                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   225                              <1> .medChk:
   226 0000192E E81E010000          <1>     call diskDrvMedCheck    ;Prepare disk io packet for media check
   227 00001933 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr
   228 0000193A 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   229 0000193E E84BFEFFFF          <1>     call goDriver   ;Request!
   230 00001943 480FB73D(51C00300)  <1>     movzx rdi, word [diskReqHdr + mediaCheckReqPkt.status]
   231 0000194B F7C700800000        <1>     test edi, drvErrStatus
   232 00001951 7576                <1>     jnz .diskDrvCritErrMedChk
   233                              <1> .medChkIgnore:
   234 00001953 8A05(97C20300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   235 00001959 30E4                <1>     xor ah, ah
   236 0000195B 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   237 0000195E 84630E              <1>     test byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   238 00001961 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   239 00001963 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   240 00001965 E823ECFFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   241 0000196A F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   242 0000196B 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   243                              <1>     ;ZF=NZ from test for dirty buffers
   244                              <1> .exit:
   245 0000196D C3                  <1>     ret
   246                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   247 0000196E C605(58D50300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   248 00001975 E837ECFFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   249                              <1>     ;Get a buffer to read BPB into in rdi
   250 0000197A B101                <1>     mov cl, dosBuffer
   251 0000197C 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   252 0000197E E871ECFFFF          <1>     call getBuffer ;Get a disk buffer
   253 00001983 72E8                <1>     jc .exit    ;Immediately exit with the carry flag set
   254 00001985 4889DF              <1>     mov rdi, rbx
   255                              <1> .repeatEP:
   256 00001988 E8F0000000          <1>     call diskDrvGetBPB  ;Prepare to get BPB
   257 0000198D 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr
   258 00001994 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   259 00001998 E8F1FDFFFF          <1>     call goDriver   ;Request!
   260 0000199D 0FB705(51C00300)    <1>     movzx eax, word [diskReqHdr + bpbBuildReqPkt.status]
   261 000019A4 A900800000          <1>     test eax, drvErrStatus
   262 000019A9 7565                <1>     jnz .diskDrvCritErrBPB
   263                              <1>     ;Now rebuild the dpb fields for this drive
   264 000019AB 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   265 000019AF E8CE050000          <1>     call createDPB  
   266                              <1>     ;Adjust the buffer header information
   267 000019B4 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   268 000019B7 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   269 000019BA 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   270 000019BD 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   271 000019C0 30E4                <1>     xor ah, ah
   272 000019C2 8825(58D50300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   273 000019C8 C3                  <1>     ret
   274                              <1> .diskDrvCritErrMedChk:
   275                              <1> ;Critical Errors fall through here
   276                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   277 000019C9 48893D(57C10300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   278 000019D0 48892D(5DC30300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   279 000019D7 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   280 000019DA B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   281 000019DC 8825(67C10300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   282 000019E2 E8D7FCFFFF          <1>     call criticalDOSError
   283 000019E7 488B3D(57C10300)    <1>     mov rdi, qword [xInt44RDI]
   284 000019EE 488B2D(5DC30300)    <1>     mov rbp, qword [tmpDPBPtr]
   285 000019F5 3C01                <1>     cmp al, critRetry
   286 000019F7 0F8431FFFFFF        <1>     je .medChk
   287 000019FD 3C00                <1>     cmp al, critIgnore
   288 000019FF 0F844EFFFFFF        <1>     je .medChkIgnore
   289 00001A05 66C705(12C10300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   289 00001A0D 00                  <1>
   290 00001A0E F9                  <1>     stc ;Set error flag to indicate fail
   291 00001A0F C3                  <1>     ret ;And exit from function with CF set
   292                              <1> 
   293                              <1> .diskDrvCritErrBPB:
   294                              <1>     ;eax has status word, rbp has dpb ptr
   295                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   296 00001A10 48893D(57C10300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   297 00001A17 48892D(5DC30300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   298 00001A1E 89C7                <1>     mov edi, eax    ;Transfer the status word over
   299 00001A20 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   300 00001A23 B418                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK ;Set bits
   301 00001A25 8825(67C10300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   302 00001A2B E88EFCFFFF          <1>     call criticalDOSError
   303 00001A30 488B3D(57C10300)    <1>     mov rdi, qword [xInt44RDI]
   304 00001A37 488B2D(5DC30300)    <1>     mov rbp, qword [tmpDPBPtr]
   305 00001A3E 3C01                <1>     cmp al, critRetry
   306 00001A40 0F8442FFFFFF        <1>     je .repeatEP
   307                              <1>     ;Else we fail (Ignore=Fail here)
   308 00001A46 66C705(12C10300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   308 00001A4E 00                  <1>
   309 00001A4F F9                  <1>     stc ;Set error flag to indicate fail
   310 00001A50 C3                  <1>     ret ;And exit from function with CF set
   311                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   312                              <1> ;           Primitive Driver Requests
   313                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   314                              <1> ;First are Disk requests, then Char device requests
   315                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   316                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   317                              <1> 
   318                              <1> diskDrvMedCheck:
   319                              <1> ;Prepare the diskIO packet for mediacheck
   320                              <1> ;rbp has DPB pointer for device to check media on
   321 00001A51 50                  <1>     push rax
   322 00001A52 C605(4EC00300)17    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   323 00001A59 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   324 00001A5C 8805(5BC00300)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.medesc], al
   325 00001A62 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   326 00001A65 8805(4FC00300)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.unitnm], al
   327 00001A6B C605(50C00300)01    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   328 00001A72 66C705(51C00300)00- <1>     mov word [diskReqHdr + mediaCheckReqPkt.status], 0
   328 00001A7A 00                  <1>
   329                              <1> diskDrvCommonExit:
   330 00001A7B 58                  <1>     pop rax
   331 00001A7C C3                  <1>     ret
   332                              <1> 
   333                              <1> diskDrvGetBPB:
   334                              <1> ;rbp has DPB pointer for device
   335                              <1> ;rdi has sector buffer header pointer for transfer
   336 00001A7D 50                  <1>     push rax
   337 00001A7E 488D4720            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   338 00001A82 48893D(5CC00300)    <1>     mov qword [diskReqHdr + bpbBuildReqPkt.bufptr], rdi
   339 00001A89 C605(4EC00300)1E    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   340 00001A90 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   341 00001A93 8805(5BC00300)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.medesc], al
   342 00001A99 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   343 00001A9C 8805(4FC00300)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.unitnm], al
   344 00001AA2 C605(50C00300)02    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   345 00001AA9 66C705(51C00300)00- <1>     mov word [diskReqHdr + bpbBuildReqPkt.status], 0
   345 00001AB1 00                  <1>
   346 00001AB2 EBC7                <1>     jmp short diskDrvCommonExit
   347                              <1> 
   348                              <1> diskWriteSetup:
   349 00001AB4 50                  <1>     push rax
   350 00001AB5 B408                <1>     mov ah, drvWRITE    ;Command code
   351 00001AB7 0225(3EC10300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   352 00001ABD EB03                <1>     jmp short diskRWCommon
   353                              <1> diskReadSetup:
   354 00001ABF 50                  <1>     push rax
   355 00001AC0 B404                <1>     mov ah, drvREAD
   356                              <1> diskRWCommon:
   357                              <1> ;Sets up the IO request packet with:
   358                              <1> ; rbp = DPB ptr
   359                              <1> ; rbx = Data storage buffer ptr
   360                              <1> ; ecx = Number of sectors to transfer
   361                              <1> ; rdx = Starting sector to read from
   362                              <1> ; All regs preserved
   363 00001AC2 B02A                <1>     mov al, ioReqPkt_size
   364 00001AC4 48891D(5CC00300)    <1>     mov qword [diskReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   365 00001ACB 890D(64C00300)      <1>     mov dword [diskReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors
   366 00001AD1 488915(68C00300)    <1>     mov qword [diskReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   367 00001AD8 C605(4EC00300)2A    <1>     mov byte [diskReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   368 00001ADF 25FFFF0000          <1>     and eax, 0000FFFFh  ;Clear the upper word (status word)
   369 00001AE4 8905(4FC00300)      <1>     mov dword [diskReqHdr + ioReqPkt.unitnm], eax
   370 00001AEA 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   371 00001AED 8805(68C00300)      <1>     mov byte [diskReqHdr + ioReqPkt.strtsc], al ;Store medesc!
   372 00001AF3 E983FFFFFF          <1>     jmp diskDrvCommonExit   ;Jump popping rax
    30                                  %include "./Source/Kernel/dosUtils.asm"
    31                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    32                              <1> 
    33                              <1> ;Basic Drive related Utilities
    34                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    35                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    36                              <1> ; that gets set up)
    37                              <1> 
    38                              <1> setWorkingDPB:
    39                              <1> ;Gets dpb in rbp and saves to curDrvDPB (working dpb)
    40 00001AF8 48892D(98C20300)    <1>     mov qword [workingDPB], rbp
    41 00001AFF C3                  <1>     ret
    42                              <1> 
    43                              <1> getUserRegs:   ;Int 4Fh AX=1218h
    44                              <1> ;Returns ptr to user regs in rsi
    45 00001B00 488B35(73C10300)    <1>     mov rsi, qword [oldRSP]
    46 00001B07 C3                  <1>     ret
    47                              <1> 
    48                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
    49                              <1>     ;Gets the CDS for the current drive in al
    50                              <1>     ;Input: al = Drive number, 0 = A ...
    51                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
    52                              <1>     ;        CF=CY => al not valid
    53 00001B08 3A05(B2C00300)      <1>     cmp al, byte [lastdrvNum]
    54 00001B0E 7202                <1>     jb .ctn
    55 00001B10 F9                  <1>     stc 
    56 00001B11 C3                  <1>     ret
    57                              <1> .ctn:
    58 00001B12 50                  <1>     push rax
    59 00001B13 52                  <1>     push rdx
    60 00001B14 0FB6C0              <1>     movzx eax, al
    61 00001B17 48BE5B000000000000- <1>     mov rsi, cds_size
    61 00001B20 00                  <1>
    62 00001B21 31D2                <1>     xor edx, edx
    63 00001B23 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip
    64 00001B25 488D05(AAC00300)    <1>     lea rax, qword [cdsHeadPtr] ;Get the first CDS
    65 00001B2C 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
    66 00001B2F 488935(A0C20300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
    67 00001B36 5A                  <1>     pop rdx
    68 00001B37 58                  <1>     pop rax
    69 00001B38 F8                  <1>     clc
    70 00001B39 C3                  <1>     ret
    71                              <1> 
    72                              <1> walkDPBchain:
    73                              <1> ;Called with al = 0 based drive number
    74                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    75 00001B3A 488B35(88C00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
    76                              <1> .walk:
    77 00001B41 4881FEFFFFFFFF      <1>     cmp rsi, -1
    78 00001B48 740A                <1>     je .exitBad
    79 00001B4A 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    80 00001B4C 7407                <1>     je .exit    ;Drive found
    81 00001B4E 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    82 00001B52 EBED                <1>     jmp short .walk
    83                              <1> .exitBad:
    84 00001B54 F9                  <1>     stc
    85                              <1> .exit:
    86 00001B55 C3                  <1>     ret
    87                              <1> setDrive:   ;Int 4Fh AX=1219h   
    88                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
    89                              <1> ;Input: al = 1-based drive number
    90                              <1> ;Output: al = 0-based drive number
    91                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
    92                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
    93                              <1> ;            set.
    94 00001B56 E815000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
    95 00001B5B 7212                <1>     jc .exit    ;Carry the CF flag if not Physical
    96 00001B5D 56                  <1>     push rsi
    97 00001B5E 488B35(A0C20300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
    98 00001B65 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
    99 00001B6B 5E                  <1>     pop rsi
   100 00001B6C 7401                <1>     jz .exit
   101 00001B6E F9                  <1>     stc
   102                              <1> .exit:
   103 00001B6F C3                  <1>     ret
   104                              <1> getCDS:
   105                              <1> ;Gets the device DPB and saves it in the DOS variable
   106                              <1> ;This can be called to get CDS for network drives too!
   107                              <1> ;Input: al = 1 based drive number
   108                              <1> ;Sets workingCDS var with the CDS for the device. 
   109                              <1> ;   If device on a network, sets CF
   110                              <1> ;Returns al with 0-based drive number
   111 00001B70 84C0                <1>     test al, al
   112 00001B72 7508                <1>     jnz .skip
   113 00001B74 8A05(3BC10300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   114 00001B7A FEC0                <1>     inc al
   115                              <1> .skip:
   116 00001B7C FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   117 00001B7E 56                  <1>     push rsi
   118 00001B7F C605(11C10300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   119 00001B86 F605(83C10300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   120 00001B8D 7402                <1>     jz .physDrive
   121                              <1>     ;Invalid invokation (21/5D00 invokation not yet supported)
   122                              <1>     ;If returned with CF=CY, consider it an error for now
   123                              <1>     ;Eventually, here we will build a fresh DPB for the non-physical drive
   124 00001B8F EB16                <1>     jmp short .exitBad1
   125                              <1> .physDrive:
   126 00001B91 E872FFFFFF          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   127 00001B96 7208                <1>     jc .exitBad
   128 00001B98 66F746430040        <1>     test word [rsi + cds.wFlags], cdsPhysDrive
   129 00001B9E 7508                <1>     jnz .exitOk ;Exit with flag cleared
   130                              <1>     ;Else Return to unknown error locus
   131                              <1> .exitBad:
   132 00001BA0 C605(11C10300)01    <1>     mov byte [errorLocus], eLocUnk
   133                              <1> .exitBad1:
   134 00001BA7 F9                  <1>     stc
   135                              <1> .exitOk:
   136 00001BA8 5E                  <1>     pop rsi
   137 00001BA9 C3                  <1>     ret
    31                                  %include "./Source/Kernel/dosMain.asm"
    32                              <1> ;-----------------------------------:
    33                              <1> ;        Main Kernel dispatch       :
    34                              <1> ;            and routines           :
    35                              <1> ;-----------------------------------:
    36                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    37                              <1> ;ah = Function number, all other registers have various meanings
    38                              <1>  %if DEBUG
    39                              <1>     ;Entry function
    40                              <1>     debugEnterM
    41                              <1>     lea rbp, .l0000
    42                              <1>     call debPrintNullString
    43                              <1>     call debPrintFunctionName
    44                              <1>     jmp short .l0001
    45                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    46                              <1> .l0001:    
    47                              <1>     debugExitM
    48                              <1>     %endif
    49 00001BAA FA                  <1>     cli ;Halt external interrupts
    50 00001BAB FC                  <1>     cld ;Ensure all string ops occur in the right direction
    51 00001BAC 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    52 00001BAF 0F832F010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    53                              <1>     ;Cherry pick functions
    54 00001BB5 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    55 00001BB8 722C                <1>     jb .fsbegin   ;If below skip these checks
    56 00001BBA 0F847E010000        <1>     je ctrlBreakCheck
    57 00001BC0 80FC64              <1>     cmp ah, 64h
    58 00001BC3 0F84BE010000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    59 00001BC9 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    60 00001BCB 80FC51              <1>     cmp ah, 51h
    61 00001BCE 0F84A1010000        <1>     je getCurrProcessID    ;This and below are exactly the same
    62 00001BD4 80FC62              <1>     cmp ah, 62h
    63 00001BD7 0F84A1010000        <1>     je getPSPaddr          ;Calls the above function
    64 00001BDD 80FC50              <1>     cmp ah, 50h
    65 00001BE0 0F8486010000        <1>     je setCurrProcessID
    66                              <1> .fsbegin:
    67 00001BE6 E814010000          <1>     call dosPushRegs ;Push the usual prologue registers
    68 00001BEB 488B05(73C10300)    <1>     mov rax, qword [oldRSP]
    69 00001BF2 488905(6BC10300)    <1>     mov qword [oldoldRSP], rax
    70 00001BF9 FE05(0FC10300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    71 00001BFF 488925(73C10300)    <1>     mov qword [oldRSP], rsp
    72                              <1> ;Network related variable resetting
    73 00001C06 C605(83C10300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    74                              <1> ;Here, we want to save oldRSP in the callers PSP
    75 00001C0D 803D(0FC10300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    76 00001C14 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    77 00001C16 488B05(26C10300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    78 00001C1D 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    79                              <1> .fsb1:
    80 00001C21 58                  <1>     pop rax     ;Get old rax back
    81 00001C22 50                  <1>     push rax    ;and push it back onto the stack
    82 00001C23 488D25(8DC80300)    <1>     lea rsp, critStakTop
    83 00001C2A FB                  <1>     sti         ;Reenable interrupts
    84                              <1> 
    85 00001C2B C605(6AC10300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    86 00001C32 48891D(7BC10300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    87 00001C39 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
    88 00001C3C D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    89 00001C3E 50                  <1>     push rax        ;Push rax onto the stack
    90 00001C3F 488D05D5E3FFFF      <1>     lea rax, kDispTbl
    91 00001C46 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    92 00001C49 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    93 00001C4D 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
    94 00001C50 58                  <1>     pop rax
    95                              <1> 
    96 00001C51 84E4                <1>     test ah, ah     ;Simple Terminate function?
    97 00001C53 741C                <1>     jz .fddiskOp
    98 00001C55 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
    99 00001C58 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   100 00001C5A 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   101 00001C5D 7712                <1>     ja .fddiskOp
   102                              <1> ;Char operations here
   103 00001C5F F605(0EC10300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   104 00001C66 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   105 00001C68 488D25(10CF0300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   106 00001C6F EB40                <1>     jmp short .fdGoToFunction
   107                              <1> .fddiskOp:
   108                              <1>     ;Disk operations go here
   109                              <1>     ;Save rax on entry to a disk funciton
   110 00001C71 488905(06C10300)    <1>     mov qword [oldRAX], rax
   111                              <1>     ;Clear up error info
   112 00001C78 C605(11C10300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   113 00001C7F C605(0EC10300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   114 00001C86 C605(10C10300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   115                              <1> 
   116 00001C8D 50                  <1>     push rax
   117 00001C8E B482                <1>     mov ah, 82h ;Cancel all critical section!
   118 00001C90 CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   119 00001C92 58                  <1>     pop rax
   120                              <1> 
   121 00001C93 C605(6AC10300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   122 00001C9A 488D25(50D50300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   123 00001CA1 F605(3DC10300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   124 00001CA8 7407                <1>     jz .fdGoToFunction
   125                              <1> ; HANDLE CTRL+BREAK HERE!
   126 00001CAA 50                  <1>     push rax
   127 00001CAB E811F0FFFF          <1>     call checkBreakOnCon    ; Check for a ^C in the CON buffer
   128 00001CB0 58                  <1>     pop rax
   129                              <1> .fdGoToFunction:
   130 00001CB1 48871D(7BC10300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   131                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   132                              <1>     ;
   133                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   134                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   135                              <1>     ;
   136                              <1>     %if DEBUG && REGS
   137                              <1>     ;Print stack if necessary function
   138                              <1>     debugEnterM
   139                              <1>     call debPrintDOSStack
   140                              <1>     debugExitM
   141                              <1>     %endif
   142 00001CB8 FF15(7BC10300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   143                              <1>     %if DEBUG
   144                              <1>     ;Entry function
   145                              <1>     debugEnterM
   146                              <1>     lea rbp, .l0002
   147                              <1>     call debPrintNullString
   148                              <1>     jmp short .l0003
   149                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   150                              <1> .l0003:    
   151                              <1>     debugExitM
   152                              <1>     %endif
   153                              <1>     %if DEBUG && REGS
   154                              <1>     ;Exit function
   155                              <1>     debugEnterM
   156                              <1>     call debPrintDOSStack
   157                              <1>     debugExitM
   158                              <1>     %endif
   159                              <1> .fdExit:
   160 00001CBE FA                  <1>     cli     ;Redisable interrupts
   161 00001CBF FE0D(0FC10300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   162 00001CC5 488B25(73C10300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   163 00001CCC 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   164 00001CCF 488B05(6BC10300)    <1>     mov rax, qword [oldoldRSP]
   165 00001CD6 488905(73C10300)    <1>     mov qword [oldRSP], rax
   166 00001CDD E806000000          <1>     call dosPopRegs  ;Pop the frame
   167 00001CE2 48CF                <1>     iretq
   168                              <1> .fdExitBad:
   169 00001CE4 30C0                <1>     xor al, al
   170                              <1> defaultIretq:
   171 00001CE6 48CF                <1>     iretq
   172                              <1> dosPopRegs:
   173 00001CE8 8F05(16C10300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   174 00001CEE 58                  <1>     pop rax
   175 00001CEF 5B                  <1>     pop rbx
   176 00001CF0 59                  <1>     pop rcx
   177 00001CF1 5A                  <1>     pop rdx
   178 00001CF2 5E                  <1>     pop rsi
   179 00001CF3 5F                  <1>     pop rdi
   180 00001CF4 5D                  <1>     pop rbp
   181 00001CF5 4158                <1>     pop r8
   182 00001CF7 4159                <1>     pop r9
   183 00001CF9 FF25(16C10300)      <1>     jmp qword [dosReturn]
   184                              <1> dosPushRegs:
   185 00001CFF 8F05(16C10300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   186 00001D05 4151                <1>     push r9
   187 00001D07 4150                <1>     push r8
   188 00001D09 55                  <1>     push rbp
   189 00001D0A 57                  <1>     push rdi
   190 00001D0B 56                  <1>     push rsi
   191 00001D0C 52                  <1>     push rdx
   192 00001D0D 51                  <1>     push rcx
   193 00001D0E 53                  <1>     push rbx
   194 00001D0F 50                  <1>     push rax
   195 00001D10 FF25(16C10300)      <1>     jmp qword [dosReturn]
   196                              <1> dosCrit1Enter:
   197 00001D16 C3                  <1>     ret     ;Needs to be patched with 50h (PUSH RAX)
   198 00001D17 B801800000          <1>     mov eax, 8001h
   199 00001D1C CD4A                <1>     int 4ah
   200 00001D1E 58                  <1>     pop rax
   201 00001D1F C3                  <1>     ret
   202                              <1> dosCrit1Exit:
   203 00001D20 C3                  <1>     ret
   204 00001D21 B801810000          <1>     mov eax, 8101h
   205 00001D26 CD4A                <1>     int 4ah
   206 00001D28 58                  <1>     pop rax
   207 00001D29 C3                  <1>     ret
   208                              <1> dosCrit2Enter:
   209 00001D2A C3                  <1>     ret
   210 00001D2B B802800000          <1>     mov eax, 8002h
   211 00001D30 CD4A                <1>     int 4ah
   212 00001D32 58                  <1>     pop rax
   213 00001D33 C3                  <1>     ret
   214                              <1> dosCrit2Exit:
   215 00001D34 C3                  <1>     ret
   216 00001D35 B802810000          <1>     mov eax, 8102h
   217 00001D3A CD4A                <1>     int 4ah
   218 00001D3C 58                  <1>     pop rax
   219 00001D3D C3                  <1>     ret
   220                              <1> ;========================================:
   221                              <1> ;      Reentrant Kernel Functions        :
   222                              <1> ;========================================:
   223                              <1> ctrlBreakCheck:    ;ah = 33h
   224 00001D3E 84C0                <1>     test al, al
   225 00001D40 7508                <1>     jnz .cbcget  ;Get the state or other functions
   226 00001D42 8A15(3DC10300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   227 00001D48 48CF                <1>     iretq
   228                              <1> .cbcget:
   229 00001D4A 3C02                <1>     cmp al, 02h
   230 00001D4C 771A                <1>     ja .cbcBad
   231 00001D4E 740D                <1>     jz .cbcxchg ;Function 2
   232 00001D50 52                  <1>     push rdx
   233 00001D51 80E201              <1>     and dl, 1   ;Get only the bottom bit
   234 00001D54 8815(3DC10300)      <1>     mov byte [breakFlag], dl    ;Set the state
   235 00001D5A 5A                  <1>     pop rdx
   236 00001D5B 48CF                <1>     iretq
   237                              <1> .cbcxchg:
   238 00001D5D 80E201              <1>     and dl, 1
   239 00001D60 8615(3DC10300)      <1>     xchg byte [breakFlag], dl
   240 00001D66 48CF                <1>     iretq
   241                              <1> .cbcBad:
   242 00001D68 B0FF                <1>     mov al, -1
   243 00001D6A 48CF                <1>     iretq
   244                              <1> 
   245                              <1> 
   246                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   247 00001D6C 48891D(26C10300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   248 00001D73 48CF                <1>     iretq
   249                              <1> 
   250                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   251 00001D75 488B15(26C10300)    <1>     mov rdx, qword [currentPSP]
   252 00001D7C 48CF                <1>     iretq
   253                              <1> 
   254                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   255 00001D7E 488B15(26C10300)    <1>     mov rdx, qword [currentPSP]
   256 00001D85 48CF                <1>     iretq
   257                              <1> 
   258                              <1> setDriverLookahead:;ah = 64h, reserved
   259 00001D87 48CF                <1>     iretq
   260                              <1> 
   261                              <1> ;========================================:
   262                              <1> ;            Kernel Functions            :
   263                              <1> ;========================================:
   264                              <1> diskReset:         ;ah = 0Dh
   265                              <1> ;Flush all dirty buffers to disk
   266 00001D89 488B3D(A2C00300)    <1>     mov rdi, qword [bufHeadPtr]
   267                              <1> .drCheckBuffer:
   268 00001D90 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   269 00001D94 7407                <1>     jz .drGotoNextBuffer
   270                              <1> .drFlushBuffer:
   271 00001D96 E879E9FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   272 00001D9B 720C                <1>     jc .drExit
   273                              <1> .drGotoNextBuffer:
   274 00001D9D 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   275 00001DA0 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   276 00001DA7 75E7                <1>     jne .drCheckBuffer
   277                              <1> .drExit:
   278 00001DA9 C3                  <1>     ret
   279                              <1> 
   280                              <1> selectDisk:        ;ah = 0Eh
   281                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   282 00001DAA 88D0                <1>     mov al, dl
   283 00001DAC FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   284 00001DAE E8A3FDFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   285 00001DB3 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   286 00001DB5 8805(3BC10300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   287                              <1> .skipSettingCurrent:
   288 00001DBB 0FB605(B2C00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   289 00001DC2 C3                  <1>     ret
   290                              <1> 
   291                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   292 00001DC3 8A05(3BC10300)      <1>     mov al, byte [currentDrv]
   293 00001DC9 C3                  <1>     ret
   294                              <1> 
   295                              <1> FATinfoDefault:    ;ah = 1Bh
   296 00001DCA 30D2                <1>     xor dl, dl
   297                              <1> FATinfoDevice:     ;ah = 1Ch
   298                              <1> ;Return in:
   299                              <1> ;   al = Number of sectors per cluster
   300                              <1> ;   edx = Number of clusters
   301                              <1> ;   cx =  Size of a clsuter
   302 00001DCC 84D2                <1>     test dl, dl
   303 00001DCE 7508                <1>     jnz .fidSkipdefault
   304 00001DD0 8A15(3BC10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   305 00001DD6 FEC2                <1>     inc dl
   306                              <1> .fidSkipdefault:
   307 00001DD8 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   308                              <1> ;Walk the dpb chain manually
   309 00001DDA 88D0                <1>     mov al, dl  ;Move drive number into al
   310 00001DDC E859FDFFFF          <1>     call walkDPBchain    ;Get in rsi the dpb pointer for drive in al
   311 00001DE1 7331                <1>     jnc .fidDPBFound
   312                              <1> ;Else, we at an error.
   313                              <1> ;Simply return with CY set and error code in al with extended error info
   314 00001DE3 E818FDFFFF          <1>     call getUserRegs
   315 00001DE8 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set the CY flag
   316 00001DF0 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   317 00001DF5 66C705(12C10300)0F- <1>     mov word [errorExCde], errBadDrv     
   317 00001DFD 00                  <1>
   318 00001DFE C605(11C10300)01    <1>     mov byte [errorLocus], eLocUnk    ;Not appropriate
   319 00001E05 C605(15C10300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   320 00001E0C C605(14C10300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   321 00001E13 C3                  <1>     ret
   322                              <1> .fidDPBFound:
   323 00001E14 8A4604              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   324 00001E17 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   325 00001E19 8B560F              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   326 00001E1C 0FB74E02            <1>     movzx ecx, word [rsi + dpb.wBytesPerSector] ; Save the value in ecx
   327 00001E20 488D5E23            <1>     lea rbx, qword [rsi + dpb.bMediaDescriptor]
   328 00001E24 E8D7FCFFFF          <1>     call getUserRegs
   329 00001E29 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   330 00001E2D 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   331 00001E31 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   332 00001E35 C3                  <1>     ret
   333                              <1> 
   334                              <1> setIntVector:      ;ah = 25h
   335                              <1> ;Called with:
   336                              <1> ;   rdx = Pointer to interrupt handler
   337                              <1> ;   al = Interrupt number
   338 00001E36 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   339 00001E38 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   340                              <1> ;First call to get default BIOS segement selector and attribute word
   341 00001E3E 88C3                <1>     mov bl, al  ;Set interrupt number 
   342 00001E40 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   343 00001E45 CD35                <1>     int 35h
   344 00001E47 E8B4FCFFFF          <1>     call getUserRegs
   345 00001E4C 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   346 00001E50 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   347 00001E52 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   348                              <1> ;dx preserves the attribute word
   349 00001E54 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   350 00001E59 CD35                <1>     int 35h
   351 00001E5B E8A0FCFFFF          <1>     call getUserRegs
   352 00001E60 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Preserve low byte of rax
   353 00001E62 C3                  <1>     ret
   354                              <1> createNewPSP:      ;ah = 26h
   355 00001E63 C3                  <1>     ret
   356                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   357 00001E64 8805(3EC10300)      <1>     mov byte [verifyFlag], al
   358 00001E6A 8025(3EC10300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   359 00001E71 C3                  <1>     ret
   360                              <1> getDOSversion:     ;ah = 30h
   361 00001E72 E889FCFFFF          <1>     call getUserRegs
   362 00001E77 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   363 00001E79 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   364 00001E7C 668B057DE1FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   365 00001E83 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   366 00001E86 C3                  <1>     ret
   367                              <1> 
   368                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   369                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   370 00001E87 30D2                <1>     xor dl, dl
   371                              <1> getDeviceDPBptr:   ;ah = 32h
   372                              <1> ;On entry: dl = Drive number
   373                              <1> ;On exit: rbx = DPB pointer
   374 00001E89 84D2                <1>     test dl, dl
   375 00001E8B 7508                <1>     jnz .gddpskipdefault
   376 00001E8D 8A15(3BC10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   377 00001E93 FEC2                <1>     inc dl
   378                              <1> .gddpskipdefault:
   379                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   380 00001E95 FECA                <1>     dec dl
   381 00001E97 88D0                <1>     mov al, dl
   382 00001E99 E8D2FCFFFF          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   383 00001E9E 722D                <1>     jc .bad
   384 00001EA0 488B3D(A0C20300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   385 00001EA7 48F7C700800000      <1>     test rdi, cdsNetDrive ;Is dev a network drv (since they have no DPB)?
   386 00001EAE 751D                <1>     jnz .bad
   387 00001EB0 E861FEFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   388 00001EB5 E824FAFFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   389 00001EBA E861FEFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   390 00001EBF 720C                <1>     jc .bad
   391 00001EC1 E83AFCFFFF          <1>     call getUserRegs
   392 00001EC6 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   393 00001ECA 30C0                <1>     xor al, al
   394 00001ECC C3                  <1>     ret
   395                              <1> .bad:
   396 00001ECD B0FF                <1>     mov al, -1
   397 00001ECF C3                  <1>     ret
   398                              <1> 
   399                              <1> getInDOSflagPtr:   ;ah = 34h
   400 00001ED0 488D15(0FC10300)    <1>     lea rdx, inDOS
   401 00001ED7 E824FCFFFF          <1>     call getUserRegs
   402 00001EDC 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   403 00001EE0 C3                  <1>     ret
   404                              <1> getIntVector:      ;ah = 35h
   405                              <1> ;Called with:
   406                              <1> ;   al = Interrupt Number
   407                              <1> ;Returns:
   408                              <1> ;   rbx = Pointer to interrupt handler
   409 00001EE1 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   410 00001EE3 B807F00000          <1>     mov eax, 0F007h
   411 00001EE8 CD35                <1>     int 35h
   412 00001EEA E811FCFFFF          <1>     call getUserRegs
   413 00001EEF 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   414 00001EF3 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   415 00001EF5 C3                  <1>     ret
   416                              <1> 
   417                              <1> getDiskFreeSpace:  ;ah = 36h
   418 00001EF6 84D2                <1>     test dl, dl
   419 00001EF8 7508                <1>     jnz .gdfsSkipdefault
   420 00001EFA 8A15(3BC10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   421 00001F00 FEC2                <1>     inc dl
   422                              <1> .gdfsSkipdefault:
   423 00001F02 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   424 00001F04 88D0                <1>     mov al, dl
   425 00001F06 E82FFCFFFF          <1>     call walkDPBchain ;Get in rsi the dpb pointer for drive al
   426 00001F0B 7331                <1>     jnc .gdfsDPBFound
   427                              <1> ;Else, we at an error.
   428                              <1> ;Simply return with CY set and error code in al with extended error info
   429 00001F0D 66C705(12C10300)0F- <1>     mov word [errorExCde], errBadDrv     ;Invalid drive error
   429 00001F15 00                  <1>
   430 00001F16 C605(11C10300)02    <1>     mov byte [errorLocus], eLocDsk    ;Not appropriate
   431 00001F1D C605(15C10300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   432 00001F24 C605(14C10300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   433 00001F2B E8D0FBFFFF          <1>     call getUserRegs
   434 00001F30 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   435 00001F35 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set CF=CY
   436 00001F3D C3                  <1>     ret
   437                              <1> .gdfsDPBFound:
   438 00001F3E 8A4604              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   439 00001F41 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   440 00001F43 8B560F              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   441 00001F46 0FB74E02            <1>     movzx ecx, word [rsi + dpb.wBytesPerSector] ;Save the value in ecx
   442 00001F4A 8B5E31              <1>     mov ebx, dword [rsi + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   443 00001F4D E8AEFBFFFF          <1>     call getUserRegs
   444 00001F52 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   445 00001F56 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   446 00001F5A 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   447 00001F5E C3                  <1>     ret
   448                              <1> 
   449                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   450 00001F5F 31C0                <1>     xor eax, eax
   451 00001F61 668705(38C10300)    <1>     xchg ax, word [errorLevel]
   452 00001F68 E893FBFFFF          <1>     call getUserRegs
   453 00001F6D 668906              <1>     mov word [rsi + callerFrame.rax], ax
   454 00001F70 C3                  <1>     ret
   455                              <1> 
   456                              <1> getSysVarsPtr:     ;ah = 52h
   457 00001F71 488D15(80C00300)    <1>     lea rdx, sysVarsPtr
   458 00001F78 E883FBFFFF          <1>     call getUserRegs
   459 00001F7D 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   460 00001F81 C3                  <1>     ret
   461                              <1> 
   462                              <1> 
   463                              <1> ;AH = 53h - CREATE DPB
   464                              <1> createDPB:         ;generates a DPB from a given BPB
   465                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   466                              <1> ;This is done so that the other fields of the DPB can be recycled
   467                              <1> ;Input: rsi = ptr to the BPB
   468                              <1> ;       rbp = ptr to the DPB
   469                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   470                              <1> ;bMediaDescriptor
   471 00001F82 8A4615              <1>     mov al, byte [rsi + bpb.media]
   472 00001F85 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   473                              <1> ;dFirstFreeCluster
   474 00001F88 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   475                              <1> ;dNumberOfFreeClusters
   476 00001F8F C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   477                              <1> ;wBytesPerSector
   478 00001F96 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   479 00001F9A 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   480                              <1> ;bMaxSectorInCluster
   481 00001F9E 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   482 00001FA1 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   483 00001FA3 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   484                              <1> ;bSectorsPerClusterShift
   485 00001FA6 FEC0                <1>     inc al
   486 00001FA8 30C9                <1>     xor cl, cl
   487                              <1> .cd2:
   488 00001FAA D0E8                <1>     shr al, 1
   489 00001FAC 7404                <1>     jz .cd3
   490 00001FAE FEC1                <1>     inc cl
   491 00001FB0 EBF8                <1>     jmp short .cd2
   492                              <1> .cd3:
   493 00001FB2 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   494                              <1> ;wFAToffset, number of reserved sectors in partition
   495 00001FB5 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   496 00001FB9 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   497                              <1> ;bNumberOfFATs
   498 00001FBD 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   499 00001FC0 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   500                              <1> ;wNumberRootDirSectors
   501 00001FC3 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   502 00001FC7 C1E005              <1>     shl eax, 5  ;Multiply by 32
   503 00001FCA 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   504 00001FCE FFC9                <1>     dec ecx
   505 00001FD0 01C8                <1>     add eax, ecx
   506 00001FD2 31D2                <1>     xor edx, edx    ;Clear for divide
   507 00001FD4 F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   508 00001FD6 66894509            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   509                              <1> ;dFATlength, get the FAT length
   510 00001FDA 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   511 00001FDE 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   512 00001FE1 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   513 00001FE3 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   514 00001FE6 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   515                              <1> ;Complex cases below...
   516                              <1> ;dClusterHeapOffset, start sector of the data area
   517 00001FE9 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   518 00001FED 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   519 00001FF0 85C0                <1>     test eax, eax
   520 00001FF2 0F44C3              <1>     cmovz eax, ebx
   521                              <1> ;eax = FATsz
   522 00001FF5 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   523 00001FF9 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   524 00001FFC 85DB                <1>     test ebx, ebx
   525 00001FFE 0F44D9              <1>     cmovz ebx, ecx 
   526                              <1> ;ebx = TotSec
   527 00002001 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   528 00002004 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   529                              <1> .cd4:
   530 00002006 01C2                <1>     add edx, eax
   531 00002008 FEC9                <1>     dec cl
   532 0000200A 75FA                <1>     jnz .cd4
   533 0000200C 89D0                <1>     mov eax, edx    ;Store product in eax
   534 0000200E 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   535 00002012 01D0                <1>     add eax, edx
   536 00002014 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   537 00002018 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   538                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   539                              <1>     ;aka eax = Start sector of the data area in volume
   540 0000201A 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   541                              <1> ;dClusterCount
   542 0000201D 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   543 0000201F 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   544 00002021 31D2                <1>     xor edx, edx
   545 00002023 BB01000000          <1>     mov ebx, 1
   546 00002028 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   547 0000202B D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   548 0000202D F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   549 0000202F FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   550 00002031 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   551                              <1> ;dFirstUnitOfRootDir
   552 00002034 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   553 00002039 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   554 0000203C 7709                <1>     ja .cd5
   555                              <1>     ;Else, we need to find the first sector of the root directory
   556                              <1>     ;Get the start sector of data area in volume 
   557                              <1>     ; and sub the number of sectors in the root directory
   558 0000203E 8B450B              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   559 00002041 0FB75D09            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   560 00002045 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   561                              <1> .cd5:
   562 00002047 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   563                              <1> ;Exit epilogue
   564 0000204A 488B1D(73C10300)    <1>     mov rbx, qword [oldRSP]
   565 00002051 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   566                              <1>     %if DEBUG && DPBINFO
   567                              <1>     ;Print DPB 
   568                              <1>     debugEnterM
   569                              <1>     push rbp
   570                              <1>     lea rbp, .l0000
   571                              <1>     call debPrintNullString
   572                              <1>     pop rbp
   573                              <1>     call debDPBBPBptr
   574                              <1>     call debMakeDebuggerRespond
   575                              <1>     jmp short .l0001
   576                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   577                              <1> .l0001:
   578                              <1>     debugExitM
   579                              <1>     %endif
   580 00002053 C3                  <1>     ret
   581                              <1> 
   582                              <1> getVerifySetting:  ;ah = 54h
   583 00002054 8A05(3EC10300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   584 0000205A C3                  <1>     ret
   585                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   586 0000205B C3                  <1>     ret
   587                              <1> getExtendedError:  ;ah = 59h
   588 0000205C E89FFAFFFF          <1>     call getUserRegs
   589 00002061 668B05(12C10300)    <1>     mov ax, word [errorExCde]
   590 00002068 8A2D(11C10300)      <1>     mov ch, byte [errorLocus]
   591 0000206E 8A3D(15C10300)      <1>     mov bh, byte [errorClass]
   592 00002074 8A1D(14C10300)      <1>     mov bl, byte [errorAction]
   593 0000207A 668906              <1>     mov word [rsi + callerFrame.rax], ax
   594 0000207D 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   595 00002081 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   596 00002084 C3                  <1>     ret
   597                              <1> getCritErrorInfo:  ;ah = 5Dh
   598                              <1> networkServices:   ;ah = 5Eh, do nothing
   599                              <1> networkRedirection:;ah = 5Fh, do nothing
   600 00002085 C3                  <1>     ret
   601                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   602                              <1> return:
   603 00002086 C3                  <1>     ret
    32                                  %include "./Source/Kernel/multiplx.asm"
    33                              <1> ;Default multiplexer. Current only installed function is ah=12h
    34                              <1> 
    35                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    36 00002087 80FC12              <1>     cmp ah, 12h
    37 0000208A 751A                <1>     jne .exit       ;Exit if not for us
    38 0000208C 3C01                <1>     cmp al, mDispTblL / 2
    39 0000208E 7316                <1>     jae .exit   ;If above or equal, exit
    40 00002090 53                  <1>     push rbx
    41 00002091 51                  <1>     push rcx
    42 00002092 31C9                <1>     xor ecx, ecx
    43 00002094 488D1D54E0FFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    44 0000209B 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    45 0000209D D1E1                <1>     shl ecx, 1   ;multiply by 2
    46 0000209F 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    47 000020A2 FFD3                <1>     call rbx
    48 000020A4 59                  <1>     pop rcx
    49 000020A5 5B                  <1>     pop rbx
    50                              <1> .exit:
    51 000020A6 48CF                <1>     iretq
    52                              <1> multiplexTest:
    53 000020A8 B0FF                <1>     mov al, -1
    54 000020AA C3                  <1>     ret
    33                                  %include "./Source/Misc/int44h.asm"
    34                              <1> critErrorHandler:   ;Int 44h
    35                              <1> ;User Stack in usage here, must be swapped to before this is called
    36                              <1> ;Entered with:  
    37                              <1> ;               AH = Critical Error Bitfield
    38                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    39                              <1> ;               Bit 6 - Reserved
    40                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    41                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    42                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    43                              <1> ;               Bits [2-1] = Affected Disk Error
    44                              <1> ;                     0 0   DOS area
    45                              <1> ;                     0 1   FAT area
    46                              <1> ;                     1 0   Directory area
    47                              <1> ;                     1 1   Data area
    48                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    49                              <1> ;               AL  = Failing drive number if AH[7] = 0
    50                              <1> ;               DIL = Error code for errorMsg
    51                              <1> ;               RSI = EA of Device Header for which device the error occured
    52                              <1> ;Return:
    53                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    54                              <1> ;                  = 1 - Retry the Operation    (Retry)
    55                              <1> ;                  = 2 - Terminate the Program  (Abort)
    56                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    57 000020AB 53                  <1>     push rbx
    58 000020AC 51                  <1>     push rcx
    59 000020AD 52                  <1>     push rdx
    60 000020AE 57                  <1>     push rdi
    61 000020AF 56                  <1>     push rsi
    62 000020B0 FC                  <1>     cld         ;Make String ops go forward
    63                              <1> 
    64 000020B1 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    65 000020B4 488D155E020000      <1>     lea rdx, qword [.crlf]
    66 000020BB B409                <1>     mov ah, 09h ;Print String
    67 000020BD CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    68                              <1> 
    69 000020BF 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    70 000020C5 B90C000000          <1>     mov ecx, 0Ch
    71 000020CA 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    72 000020CC 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    73 000020CF 480FB7FF            <1>     movzx rdi, di
    74 000020D3 4889FA              <1>     mov rdx, rdi    ;Copy error code
    75 000020D6 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    76 000020DA 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    77 000020DD 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    78 000020E0 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    79 000020E7 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    80 000020EB B409                <1>     mov ah, 09h ;Print String
    81 000020ED CD41                <1>     int 41h     ;Call DOS to print first part of message
    82                              <1> 
    83 000020EF 488D1505020000      <1>     lea rdx, qword [.readmsg]
    84 000020F6 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    85 000020FD F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    86 00002100 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    87 00002104 B409                <1>     mov ah, 09h ;Print String
    88 00002106 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    89                              <1> 
    90 00002108 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    91 0000210B 0F85DF000000        <1>     jnz .charError
    92                              <1> ;Disk error continues here
    93 00002111 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    94 00002118 B409                <1>     mov ah, 09h
    95 0000211A CD41                <1>     int 41h
    96 0000211C 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    97 0000211E 80C241              <1>     add dl, "A" ;Add ASCII code
    98 00002121 B402                <1>     mov ah, 02h ;Print char in dl
    99 00002123 CD41                <1>     int 41h
   100                              <1> .userInput:
   101 00002125 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   102 0000212C B409                <1>     mov ah, 09h
   103 0000212E CD41                <1>     int 41h
   104                              <1> ;Abort, Retry, Ignore, Fail is word order
   105                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   106                              <1> .userAbort:
   107                              <1> ;Abort is always an option
   108 00002130 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   109 00002137 B409                <1>     mov ah, 09h
   110 00002139 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   111                              <1> .userRetry:
   112 0000213B F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   113 0000213E 7416                <1>     jz .userIgnore    ;If clear, dont print message
   114 00002140 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   115 00002147 B409                <1>     mov ah, 09h
   116 00002149 CD41                <1>     int 41h
   117 0000214B 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   118 00002152 B409                <1>     mov ah, 09h
   119 00002154 CD41                <1>     int 41h
   120                              <1> .userIgnore:
   121 00002156 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   122 00002159 7416                <1>     jz .userFail
   123 0000215B 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   124 00002162 B409                <1>     mov ah, 09h
   125 00002164 CD41                <1>     int 41h
   126 00002166 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   127 0000216D B409                <1>     mov ah, 09h
   128 0000216F CD41                <1>     int 41h
   129                              <1> .userFail:
   130 00002171 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   131 00002174 7416                <1>     jz .userMsgEnd
   132 00002176 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   133 0000217D B409                <1>     mov ah, 09h
   134 0000217F CD41                <1>     int 41h
   135 00002181 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   136 00002188 B409                <1>     mov ah, 09h
   137 0000218A CD41                <1>     int 41h
   138                              <1> .userMsgEnd:
   139 0000218C 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   140 00002193 B409                <1>     mov ah, 09h
   141 00002195 CD41                <1>     int 41h
   142                              <1> ;Get user input now 
   143 00002197 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   144 00002199 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   145 000021A0 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   146 000021A2 CD41                <1>     int 41h ;Get char in al
   147 000021A4 3C61                <1>     cmp al, "a" ;Chack if lowercase
   148 000021A6 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   149 000021A8 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   150                              <1> .uip1:
   151 000021AA AE                  <1>     scasb   ;Compare char to list, offset gives return code
   152 000021AB 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   153 000021AD FFC1                <1>     inc ecx
   154 000021AF 81F904000000        <1>     cmp ecx, 4
   155 000021B5 75F3                <1>     jne .uip1
   156 000021B7 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   157                              <1> .validInput:
   158 000021BC 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   159                              <1> ;Now check if the input is permitted
   160 000021BE 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   161 000021C0 7427                <1>     je .cehExit
   162 000021C2 84C0                <1>     test al, al ;Check if 0 => Ignore
   163 000021C4 740F                <1>     je .viIgnore
   164 000021C6 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   165 000021C8 7416                <1>     je .viRetry
   166                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   167 000021CA F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   168 000021CD 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   169 000021D3 EB14                <1>     jmp short .cehExit
   170                              <1> .viIgnore:
   171 000021D5 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   172 000021D8 0F8447FFFFFF        <1>     jz .userInput
   173 000021DE EB09                <1>     jmp short .cehExit
   174                              <1> .viRetry:
   175 000021E0 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   176 000021E3 0F843CFFFFFF        <1>     jz .userInput
   177                              <1> .cehExit:
   178 000021E9 5E                  <1>     pop rsi
   179 000021EA 5F                  <1>     pop rdi
   180 000021EB 5A                  <1>     pop rdx
   181 000021EC 59                  <1>     pop rcx
   182 000021ED 5B                  <1>     pop rbx
   183 000021EE 48CF                <1>     iretq
   184                              <1> .charError:
   185 000021F0 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   186 000021F5 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   187                              <1> .ce1:
   188 000021FC AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   189 000021FD 88C2                <1>     mov dl, al  ;Move char into dl
   190 000021FF B402                <1>     mov ah, 02h
   191 00002201 CD41                <1>     int 41h ;Print char
   192 00002203 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   193 00002205 E91BFFFFFF          <1>     jmp .userInput
   194                              <1> 
   195                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   196 0000220A 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   196 00002213 746563742024202020  <1>
   197 0000221C 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   197 00002225 6E6974202420202020  <1>
   198 0000222E 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   198 00002237 202420202020202020  <1>
   199 00002240 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   199 00002249 6F6D6D616E64202420  <1>
   200 00002252 446174612024202020- <1>             db "Data $            "       ;Error 4
   200 0000225B 202020202020202020  <1>
   201 00002264 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   201 0000226D 737420242020202020  <1>
   202 00002276 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   202 0000227F 202020202020202020  <1>
   203 00002288 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   203 00002291 656469612024202020  <1>
   204 0000229A 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   204 000022A3 7420466F756E642024  <1>
   205 000022AC 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   205 000022B5 706572202420202020  <1>
   206 000022BE 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   206 000022C7 6C7420242020202020  <1>
   207 000022D0 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   207 000022D9 742024202020202020  <1>
   208 000022E2 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   208 000022EB 61696C757265202420  <1>
   209                              <1> 
   210 000022F4 64726976652024      <1> .drive      db "drive $"
   211 000022FB 6572726F7220726561- <1> .readmsg    db "error reading $"
   211 00002304 64696E672024        <1>
   212 0000230A 6572726F7220777269- <1> .writemsg   db "error writing $"
   212 00002313 74696E672024        <1>
   213 00002319 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   214 0000231C 41626F727424        <1> .abortmsg   db "Abort$" 
   215 00002322 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   216 00002329 526574727924        <1> .retrymsg   db "Retry$"
   217 0000232F 4661696C24          <1> .failmsg    db "Fail$"
   218 00002334 2C2024              <1> .betweenMsg db ", $"
   219 00002337 3F2024              <1> .endMsg     db "? $"
   220 0000233A 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    34                                  %include "./Source/Drivers/drvData.asm"
    35                              <1> ;-----------------------------------:
    36                              <1> ;          Driver routines          :
    37                              <1> ;-----------------------------------:
    38                              <1> drivers:
    39                              <1> conHdr:
    40 0000233E [6023000000000000]  <1>     dq auxHdr
    41 00002346 1308                <1>     dw 0813h
    42 00002348 [DE24000000000000]  <1>     dq commonStrat
    43 00002350 [ED24000000000000]  <1>     dq conDriver
    44 00002358 434F4E2020202020    <1>     db "CON     "
    45                              <1> auxHdr:
    46 00002360 [8223000000000000]  <1>     dq prnHdr
    47 00002368 0080                <1>     dw 08000h
    48 0000236A [DE24000000000000]  <1>     dq commonStrat
    49 00002372 [C327000000000000]  <1>     dq com1Intr
    50 0000237A 4155582020202020    <1>     db "AUX     "
    51                              <1> prnHdr:
    52 00002382 [A423000000000000]  <1>     dq clkHdr
    53 0000238A 40A0                <1>     dw 0A040h
    54 0000238C [E624000000000000]  <1>     dq nulStrat
    55 00002394 [EC24000000000000]  <1>     dq nulIntr
    56 0000239C 50524E2020202020    <1>     db "PRN     "
    57                              <1> clkHdr:
    58 000023A4 [C623000000000000]  <1>     dq msdHdr
    59 000023AC 0880                <1>     dw 08008h
    60 000023AE [DE24000000000000]  <1>     dq commonStrat
    61 000023B6 [3626000000000000]  <1>     dq clkDriver
    62 000023BE 434C4F434B242020    <1>     db "CLOCK$  "
    63                              <1> msdHdr:
    64 000023C6 [E823000000000000]  <1>     dq com1Hdr
    65 000023CE 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    66 000023D0 [DE24000000000000]  <1>     dq commonStrat
    67 000023D8 [6829000000000000]  <1>     dq msdDriver
    68 000023E0 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    69                              <1> com1Hdr:
    70 000023E8 [0A24000000000000]  <1>     dq com2Hdr
    71 000023F0 0080                <1>     dw 08000h
    72 000023F2 [DE24000000000000]  <1>     dq commonStrat
    73 000023FA [C327000000000000]  <1>     dq com1Intr
    74 00002402 434F4D3120202020    <1>     db "COM1    "
    75                              <1> com2Hdr:
    76 0000240A [2C24000000000000]  <1>     dq com3Hdr
    77 00002412 0080                <1>     dw 08000h
    78 00002414 [DE24000000000000]  <1>     dq commonStrat
    79 0000241C [CC27000000000000]  <1>     dq com2Intr
    80 00002424 434F4D3220202020    <1>     db "COM2    "
    81                              <1> com3Hdr:
    82 0000242C [4E24000000000000]  <1>     dq com4Hdr
    83 00002434 0080                <1>     dw 08000h
    84 00002436 [DE24000000000000]  <1>     dq commonStrat
    85 0000243E [D527000000000000]  <1>     dq com3Intr
    86 00002446 434F4D3320202020    <1>     db "COM3    "
    87                              <1> com4Hdr:
    88 0000244E [7024000000000000]  <1>     dq lpt1Hdr
    89 00002456 0080                <1>     dw 08000h
    90 00002458 [DE24000000000000]  <1>     dq commonStrat
    91 00002460 [DE27000000000000]  <1>     dq com4Intr
    92 00002468 434F4D3420202020    <1>     db "COM4    "
    93                              <1> lpt1Hdr:
    94 00002470 [9224000000000000]  <1>     dq lpt2Hdr
    95 00002478 40A0                <1>     dw 0A040h
    96 0000247A [E624000000000000]  <1>     dq nulStrat
    97 00002482 [EC24000000000000]  <1>     dq nulIntr
    98 0000248A 4C50543120202020    <1>     db "LPT1    "
    99                              <1> lpt2Hdr:
   100 00002492 [B424000000000000]  <1>     dq lpt3Hdr
   101 0000249A 40A0                <1>     dw 0A040h
   102 0000249C [E624000000000000]  <1>     dq nulStrat
   103 000024A4 [EC24000000000000]  <1>     dq nulIntr
   104 000024AC 4C50543220202020    <1>     db "LPT2    "
   105                              <1> lpt3Hdr:
   106 000024B4 FFFFFFFFFFFFFFFF    <1>     dq -1
   107 000024BC 40A0                <1>     dw 0A040h
   108 000024BE [E624000000000000]  <1>     dq nulStrat
   109 000024C6 [EC24000000000000]  <1>     dq nulIntr
   110 000024CE 4C50543320202020    <1>     dq "LPT3    "
   111 000024D6 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    35                                  %include "./Source/Drivers/charDrv.asm"
    36                              <1> commonStrat:
    37                              <1> ;DOS calls this function with rbx=Ptr to request header
    38 000024DE 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    39 000024E5 C3                  <1>     ret
    40                              <1> nulStrat:
    41 000024E6 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    42                              <1> nulIntr:
    43 000024EC C3                  <1>     ret
    44                              <1> conDriver:
    45 000024ED 50                  <1>     push rax
    46 000024EE 53                  <1>     push rbx
    47 000024EF 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    48 000024F6 B003                <1>     mov al, 03h ;Unknown Command
    49 000024F8 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    50 000024FC 7735                <1>     ja .conWriteErrorCode ;If yes, error!
    51                              <1> 
    52 000024FE 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    53 00002501 3C04                <1>     cmp al, 4
    54 00002503 743D                <1>     jz .conRead
    55 00002505 3C05                <1>     cmp al, 5
    56 00002507 747F                <1>     jz .conNondestructiveRead
    57 00002509 3C06                <1>     cmp al, 6
    58 0000250B 0F84A8000000        <1>     jz .conInputStatus
    59 00002511 3C07                <1>     cmp al, 7
    60 00002513 0F84B0000000        <1>     jz .conFlushInputBuffers
    61 00002519 3C08                <1>     cmp al, 8
    62 0000251B 0F84CA000000        <1>     jz .conWrite
    63 00002521 3C09                <1>     cmp al, 9
    64 00002523 0F84C2000000        <1>     jz .conWrite
    65 00002529 3C0A                <1>     cmp al, 0Ah
    66 0000252B 0F84E3000000        <1>     jz .conOutputStatus
    67 00002531 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    68                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    69 00002533 B480                <1>     mov ah, 80h ;Set error bit
    70 00002535 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    71                              <1> .conExit:
    72 00002539 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    73 0000253F 5B                  <1>     pop rbx
    74 00002540 58                  <1>     pop rax
    75 00002541 C3                  <1>     ret
    76                              <1> .conRead:    ;Function 4
    77 00002542 B005                <1>     mov al, 05h ;Bad request structure length?
    78 00002544 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    79 00002547 75EA                <1>     jne .conWriteErrorCode
    80                              <1> 
    81 00002549 57                  <1>     push rdi
    82 0000254A 51                  <1>     push rcx
    83 0000254B 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    84 0000254F 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    85                              <1> .cre1:
    86 00002551 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    87 00002554 741C                <1>     je .cre2
    88 00002556 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    89 0000255D 751A                <1>     jnz .cre3   ;No, get the buffer value
    90 0000255F 31C0                <1>     xor eax, eax
    91 00002561 CD36                <1>     int 36h
    92                              <1> .cre11:
    93 00002563 AA                  <1>     stosb
    94 00002564 84C0                <1>     test al, al ;Was the ascii code stored 0?
    95 00002566 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    96 00002568 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    97                              <1> .cre12:
    98 0000256E FFC1                <1>     inc ecx ;Inc chars stored in buffer
    99 00002570 EBDF                <1>     jmp short .cre1
   100                              <1> .cre2:
   101 00002572 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   102 00002575 59                  <1>     pop rcx
   103 00002576 5F                  <1>     pop rdi
   104 00002577 EBC0                <1>     jmp short .conExit
   105                              <1> .cre3:
   106 00002579 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   107 0000257F C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   108 00002586 EBDB                <1>     jmp short .cre11
   109                              <1> 
   110                              <1> .conNondestructiveRead:  ;Function 5
   111 00002588 B005                <1>     mov al, 05h ;Bad request structure length?
   112 0000258A 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   113 0000258D 75A4                <1>     jne .conWriteErrorCode
   114 0000258F 803D8E00000000      <1>     cmp byte [.conBuf], 0
   115 00002596 7519                <1>     jnz .cnr2
   116 00002598 B401                <1>     mov ah, 01h     ;Get key if exists
   117 0000259A CD36                <1>     int 36h
   118 0000259C 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   119                              <1>     ;Keystroke available
   120                              <1> .cnr0:
   121 0000259E 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   122 000025A1 E993FFFFFF          <1>     jmp .conExit
   123                              <1> .cnr1: ;No keystroke available
   124 000025A6 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   125 000025AC E988FFFFFF          <1>     jmp .conExit
   126                              <1> .cnr2:
   127 000025B1 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   128 000025B7 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   129                              <1> 
   130                              <1> .conInputStatus:         ;Function 6
   131 000025B9 B005                <1>     mov al, 05h ;Bad request structure length?
   132 000025BB 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   133 000025BE 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   134 000025C4 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   135                              <1> 
   136                              <1> .conFlushInputBuffers:   ;Function 7
   137 000025C9 B005                <1>     mov al, 05h ;Bad request structure length?
   138 000025CB 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   139 000025CE 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   140 000025D4 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   141                              <1> .cfib0:
   142 000025DB B401                <1>     mov ah, 01      ;Get buffer status
   143 000025DD CD36                <1>     int 36h
   144 000025DF 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   145 000025E5 30E4                <1>     xor ah, ah
   146 000025E7 CD36                <1>     int 36h ;Read key to flush from buffer
   147 000025E9 EBF0                <1>     jmp short .cfib0
   148                              <1> 
   149                              <1> .conWrite:   ;Function 8 and 9
   150 000025EB B005                <1>     mov al, 05h ;Bad request structure length?
   151 000025ED 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   152 000025F0 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   153                              <1> 
   154 000025F6 56                  <1>     push rsi
   155 000025F7 51                  <1>     push rcx
   156 000025F8 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   157 000025FC 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   158                              <1> .cw1: 
   159 000025FE 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   160 00002601 7407                <1>     je .cw2
   161 00002603 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   162 00002604 CD49                <1>     int 49h ;Fast print char
   163 00002606 FFC1                <1>     inc ecx
   164 00002608 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   165                              <1> .cw2:
   166 0000260A 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   167 0000260D 59                  <1>     pop rcx
   168 0000260E 5E                  <1>     pop rsi
   169 0000260F E925FFFFFF          <1>     jmp .conExit
   170                              <1> .conOutputStatus:   ;Function 0Ah
   171 00002614 B005                <1>     mov al, 05h ;Bad request structure length?
   172 00002616 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   173 00002619 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   174 0000261F E915FFFFFF          <1>     jmp .conExit
   175                              <1> 
   176 00002624 00                  <1> .conBuf db 0    ;Single byte buffer
   177                              <1> fastOutput:         ;This CON driver supports Int 49h
   178                              <1> ;Called with char to transfer in al
   179 00002625 50                  <1>     push rax
   180 00002626 B40E                <1>     mov ah, 0Eh
   181 00002628 CD30                <1>     int 30h
   182 0000262A 58                  <1>     pop rax
   183 0000262B 48CF                <1>     iretq
   184                              <1> ctrlBreak:
   185                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   186 0000262D C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   187 00002634 48CF                <1>     iretq
   188                              <1> 
   189                              <1> clkDriver:
   190 00002636 50                  <1>     push rax
   191 00002637 53                  <1>     push rbx
   192 00002638 51                  <1>     push rcx
   193 00002639 52                  <1>     push rdx
   194 0000263A 56                  <1>     push rsi
   195 0000263B 55                  <1>     push rbp
   196 0000263C 488B1D93FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   197 00002643 B003                <1>     mov al, 03h ;Unknown Command
   198 00002645 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   199 00002649 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   200                              <1> 
   201 0000264B 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   202 0000264E 3C04                <1>     cmp al, 04h
   203 00002650 7437                <1>     jz .clkRead
   204 00002652 3C06                <1>     cmp al, 06h
   205 00002654 0F8494000000        <1>     jz .clkInputStatus
   206 0000265A 3C07                <1>     cmp al, 07h
   207 0000265C 0F8498000000        <1>     jz .clkFlushInputBuffers
   208 00002662 3C08                <1>     cmp al, 08h
   209 00002664 0F84A0000000        <1>     jz .clkWrite
   210 0000266A 3C09                <1>     cmp al, 09h
   211 0000266C 0F8498000000        <1>     jz .clkWrite
   212 00002672 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   213                              <1> .clkNotFunctioning:
   214 00002674 B002                <1>     mov al, 02h ;Device not ready error
   215                              <1> .clkWriteErrorCode:
   216 00002676 B480                <1>     mov ah, 80h ;Set error bit
   217 00002678 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   218                              <1> .clkExit:
   219 0000267C 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   220 00002682 5D                  <1>     pop rbp
   221 00002683 5E                  <1>     pop rsi
   222 00002684 5A                  <1>     pop rdx
   223 00002685 59                  <1>     pop rcx
   224 00002686 5B                  <1>     pop rbx
   225 00002687 58                  <1>     pop rax
   226 00002688 C3                  <1>     ret
   227                              <1> 
   228                              <1> .clkRead:           ;Function 4
   229 00002689 B005                <1>     mov al, 05h ;Bad request structure length?
   230 0000268B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   231 0000268E 75E6                <1>     jne .clkWriteErrorCode
   232                              <1> 
   233 00002690 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   234 00002693 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   235 00002697 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   236 0000269E 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   237 000026A2 30E4                <1>     xor ah, ah
   238 000026A4 CD3A                <1>     int 3Ah         ;Read the system timer
   239 000026A6 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   240 000026A8 740D                <1>     jz .clkr1       ;Nope, now just time 
   241 000026AA 30E4                <1>     xor ah, ah
   242                              <1>     ;This works as al should keep count of the # of days passed since last read
   243 000026AC 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   244 000026B0 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   245                              <1> .clkr1:
   246 000026B7 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   247 000026BA 0FB7D2              <1>     movzx edx, dx
   248 000026BD 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   249 000026BF 89D0                <1>     mov eax, edx
   250 000026C1 31D2                <1>     xor edx, edx
   251 000026C3 89D8                <1>     mov eax, ebx
   252 000026C5 B944040000          <1>     mov ecx, 1092   
   253 000026CA F7F1                <1>     div ecx
   254 000026CC 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   255 000026CF 89D0                <1>     mov eax, edx    ;Get remainder in eax
   256 000026D1 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   257 000026D5 31D2                <1>     xor edx, edx
   258 000026D7 B95B000000          <1>     mov ecx, 91 ;5*18.2
   259 000026DC F7F1                <1>     div ecx
   260 000026DE 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   261 000026E1 89D0                <1>     mov eax, edx    ;Get remainder in eax
   262                              <1>     ;lea eax, dword [eax + 4*eax]
   263                              <1>     ;add eax, edx    ;Essentially multiply by 6
   264 000026E3 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   265 000026E6 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   266 000026E9 E98EFFFFFF          <1>     jmp .clkExit
   267                              <1> 
   268                              <1> .clkInputStatus:    ;Function 6
   269                              <1> ;Always return ready
   270 000026EE B005                <1>     mov al, 05h ;Bad request structure length?
   271 000026F0 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   272 000026F3 7581                <1>     jne .clkWriteErrorCode
   273 000026F5 E982FFFFFF          <1>     jmp .clkExit
   274                              <1> .clkFlushInputBuffers:  ;Function 7
   275                              <1> ;Always return done immediately
   276 000026FA B005                <1>     mov al, 05h ;Bad request structure length?
   277 000026FC 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   278 000026FF 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   279 00002705 E972FFFFFF          <1>     jmp .clkExit
   280                              <1> 
   281                              <1> .clkWrite:          ;Functions 8 and 9
   282 0000270A B005                <1>     mov al, 05h ;Bad request structure length?
   283 0000270C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   284 0000270F 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   285                              <1> 
   286 00002715 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   287 00002718 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   288 0000271C 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   289 00002720 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   290                              <1> 
   291 00002727 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   292 00002729 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   293 0000272D B105                <1>     mov cl, 5
   294 0000272F F6F1                <1>     div cl          ;Divide al by 5
   295 00002731 30E4                <1>     xor ah, ah      ;Remove the remainder
   296 00002733 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   297                              <1> ;Using the decimal part of this formula for the low count
   298                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   299 00002735 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   300 00002738 B912000000          <1>     mov ecx, 18
   301 0000273D F7E1                <1>     mul ecx  
   302 0000273F 01C3                <1>     add ebx, eax
   303                              <1> 
   304 00002741 31D2                <1>     xor edx, edx
   305 00002743 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   306 00002747 B944040000          <1>     mov ecx, 1092
   307 0000274C F7E1                <1>     mul ecx
   308 0000274E 01C3                <1>     add ebx, eax
   309 00002750 89DA                <1>     mov edx, ebx    ;edx now has low count
   310 00002752 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   311 00002756 B401                <1>     mov ah, 01h     ;Set the system time
   312 00002758 CD3A                <1>     int 3Ah
   313                              <1> 
   314 0000275A 4889F3              <1>     mov rbx, rsi
   315 0000275D E91AFFFFFF          <1>     jmp .clkExit
   316                              <1> 
   317                              <1> .clkBCDtoHex:
   318                              <1> ;Converts a BCD value to a Hex byte
   319                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   320 00002762 51                  <1>     push rcx
   321 00002763 0FB6C0              <1>     movzx eax, al   ;Zero extend
   322 00002766 89C1                <1>     mov ecx, eax    ;Save al in ecx
   323 00002768 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   324 0000276D 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   325 00002773 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   326                              <1> .cbth0:
   327 00002776 050A000000          <1>     add eax, 10
   328 0000277B E2F9                <1>     loop .cbth0
   329 0000277D 59                  <1>     pop rcx
   330 0000277E C3                  <1>     ret
   331                              <1> 
   332                              <1> .clkHexToBCD:
   333                              <1> ;Converts a Hex byte into two BCD digits
   334                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   335 0000277F 51                  <1>     push rcx
   336 00002780 0FB6C0              <1>     movzx eax, al   ;Zero extend
   337 00002783 31C9                <1>     xor ecx, ecx
   338                              <1> .chtb0:
   339 00002785 3D0A000000          <1>     cmp eax, 10
   340 0000278A 7209                <1>     jb .chtb1
   341 0000278C 2D0A000000          <1>     sub eax, 10
   342 00002791 FFC1                <1>     inc ecx
   343 00002793 EBF0                <1>     jmp short .chtb0
   344                              <1> .chtb1:
   345 00002795 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   346 00002798 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   347 0000279A 59                  <1>     pop rcx
   348 0000279B C3                  <1>     ret
   349 0000279C 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   350                              <1> ;When counting the number of days, first compute the number of years since
   351                              <1> ; 1980 and your year. 
   352                              <1> ;Then, using the table below, find the number of leap years between 1980
   353                              <1> ; and (YourYear - 1). 
   354                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   355                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   356                              <1> ;Use the months table to get the number of days in a normal month as leap 
   357                              <1> ; years are added using the previous comment.
   358                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   359                              <1> ; a leap year using the table. If it is, add an extra day.
   360                              <1> .clkLeapYears:
   361 0000279E 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   361 000027A7 24282C30            <1>
   362 000027AB 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   362 000027B4 585C60              <1>
   363                              <1> .clkMonths:
   364 000027B7 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   364 000027C0 1F1E1F              <1>
   365                              <1> ;COM Driver headers and main interrupt strat
   366                              <1> com1Intr:
   367 000027C3 C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   368 000027CA EB19                <1>     jmp short comIntr
   369                              <1> com2Intr:
   370 000027CC C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   371 000027D3 EB10                <1>     jmp short comIntr
   372                              <1> com3Intr:
   373 000027D5 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   374 000027DC EB07                <1>     jmp short comIntr
   375                              <1> com4Intr:
   376 000027DE C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   377                              <1> comIntr:
   378 000027E5 50                  <1>     push rax
   379 000027E6 53                  <1>     push rbx
   380 000027E7 51                  <1>     push rcx
   381 000027E8 52                  <1>     push rdx
   382 000027E9 56                  <1>     push rsi
   383 000027EA 57                  <1>     push rdi
   384 000027EB 488B1DE4FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   385 000027F2 B003                <1>     mov al, 03h ;Unknown Command
   386 000027F4 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   387 000027F8 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   388                              <1> 
   389 000027FA 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   390 000027FD 3C04                <1>     cmp al, 4   ;Read Character(s)
   391 000027FF 7462                <1>     jz .comRead
   392 00002801 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   393 00002803 0F849B000000        <1>     jz .comNondestructiveRead   
   394 00002809 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   395 0000280B 0F8484000000        <1>     jz .comReadInputStatus
   396 00002811 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   397 00002813 0F84B9000000        <1>     jz .comFlushInputBuffers
   398 00002819 3C08                <1>     cmp al, 8
   399 0000281B 0F84DB000000        <1>     jz .comWrite
   400 00002821 3C09                <1>     cmp al, 9
   401 00002823 0F84D3000000        <1>     jz .comWrite
   402 00002829 3C0A                <1>     cmp al, 0Ah
   403 0000282B 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   404 00002831 EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   405                              <1> .comErrorNoCount:
   406 00002833 B002                <1>     mov al, 02h ;Unknown device
   407 00002835 EB19                <1>     jmp short .comWriteErrorCode
   408                              <1> .comReadError:
   409 00002837 BA0B000000          <1>     mov edx, 0Bh
   410                              <1> .comWriteError:
   411 0000283C BA0A000000          <1>     mov edx, 0Ah
   412                              <1> .comError:
   413 00002841 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   414 00002844 B902000000          <1>     mov ecx, 02h    ;Unknown device
   415 00002849 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   416 0000284B 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   417 0000284E 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   418                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   419 00002850 B480                <1>     mov ah, 80h ;Set error bit
   420 00002852 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   421                              <1> .comExit:
   422 00002856 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   423 0000285C 5F                  <1>     pop rdi
   424 0000285D 5E                  <1>     pop rsi
   425 0000285E 5A                  <1>     pop rdx
   426 0000285F 59                  <1>     pop rcx
   427 00002860 5B                  <1>     pop rbx
   428 00002861 58                  <1>     pop rax
   429 00002862 C3                  <1>     ret
   430                              <1> 
   431                              <1> .comRead:
   432 00002863 B005                <1>     mov al, 05h ;Bad request structure length?
   433 00002865 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   434 00002868 75E6                <1>     jne .comWriteErrorCode
   435                              <1> 
   436 0000286A 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   437 0000286E 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   438                              <1> .cr1:
   439 00002870 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   440 00002873 741B                <1>     je .cre2
   441                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   442 00002875 B802000000          <1>     mov eax, 02h    ;Recieve 
   443 0000287A 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   444 00002880 6698                <1>     cbw     ;Zero extend to upper byte
   445 00002882 CD34                <1>     int 34h ;Recieve Char
   446 00002884 72BB                <1>     jc .comError
   447 00002886 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   448 00002889 74EA                <1>     je .cr11
   449 0000288B AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   450 0000288C FFC1                <1>     inc ecx
   451 0000288E EBE0                <1>     jmp short .cr1
   452                              <1> .cre2:
   453 00002890 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   454 00002893 EBC1                <1>     jmp short .comExit
   455                              <1> 
   456                              <1> .comReadInputStatus:
   457 00002895 B005                <1>     mov al, 05h ;Bad request structure length?
   458 00002897 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   459 0000289A 75B4                <1>     jne .comWriteErrorCode
   460 0000289C 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   461 000028A2 EBB2                <1>     jmp short .comExit
   462                              <1> 
   463                              <1> .comNondestructiveRead:
   464                              <1> ;Acts like a "read one character if there is one" function
   465 000028A4 B005                <1>     mov al, 05h ;Bad request structure length?
   466 000028A6 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   467 000028A9 75A5                <1>     jne .comWriteErrorCode
   468                              <1> .cndr1:
   469 000028AB B802000000          <1>     mov eax, 02h    ;Recieve 
   470 000028B0 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   471 000028B6 6698                <1>     cbw     ;Zero extend to upper byte
   472 000028B8 CD34                <1>     int 34h ;Recieve Char
   473 000028BA 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   474 000028C0 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   475 000028C3 7405                <1>     je .cndr2
   476 000028C5 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   477 000028C8 EB8C                <1>     jmp short .comExit
   478                              <1> .cndr2:
   479 000028CA 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   480 000028D0 EB84                <1>     jmp short .comExit
   481                              <1> 
   482                              <1> .comFlushInputBuffers:
   483 000028D2 B005                <1>     mov al, 05h ;Bad request structure length?
   484 000028D4 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   485 000028D7 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   486                              <1> .cfib0:
   487 000028DD 8A1584000000        <1>     mov dl, byte [.comDevice]
   488 000028E3 6698                <1>     cbw
   489 000028E5 B802000000          <1>     mov eax, 02h    ;Recieve
   490 000028EA CD34                <1>     int 34h
   491 000028EC 0F8241FFFFFF        <1>     jc .comErrorNoCount
   492 000028F2 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   493 000028F5 75E6                <1>     jne .cfib0
   494 000028F7 E95AFFFFFF          <1>     jmp .comExit
   495                              <1> 
   496                              <1> .comWrite:
   497 000028FC B005                <1>     mov al, 05h ;Bad request structure length?
   498 000028FE 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   499 00002901 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   500                              <1> 
   501 00002907 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   502 0000290B 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   503                              <1> .cw1: 
   504 0000290D 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   505 00002910 7417                <1>     je .cw2
   506 00002912 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   507 00002913 B401                <1>     mov ah, 01h ;Move function number into ah
   508 00002915 8A154C000000        <1>     mov dl, byte [.comDevice]
   509 0000291B 6698                <1>     cbw     ;Zero extend to upper byte
   510 0000291D CD34                <1>     int 34h ;Transmit char
   511 0000291F 0F821CFFFFFF        <1>     jc .comError
   512 00002925 FFC1                <1>     inc ecx
   513 00002927 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   514                              <1> .cw2:
   515 00002929 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   516 0000292C E925FFFFFF          <1>     jmp .comExit
   517                              <1> 
   518                              <1> .comOutputStatus:
   519                              <1> ;Read MODEM status
   520 00002931 B005                <1>     mov al, 05h ;Bad request structure length?
   521 00002933 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   522 00002936 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   523                              <1> 
   524 0000293C 8A1525000000        <1>     mov dl, byte [.comDevice]
   525 00002942 6698                <1>     cbw     ;Zero extend to upper byte
   526 00002944 B403                <1>     mov ah, 03h     ;Get status
   527 00002946 CD34                <1>     int 34h
   528 00002948 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   529 0000294E 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   530 00002953 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   531 00002956 F7D0                <1>     not eax      ;Bitwise inversion
   532 00002958 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   533 0000295D 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   534 00002962 E9EFFEFFFF          <1>     jmp .comExit
   535 00002967 00                  <1> .comDevice   db 0
    36                                  %include "./Source/Drivers/diskDrv.asm"
    37                              <1> msdDriver:
    38 00002968 50                  <1>     push rax
    39 00002969 53                  <1>     push rbx
    40 0000296A 51                  <1>     push rcx
    41 0000296B 52                  <1>     push rdx
    42 0000296C 56                  <1>     push rsi
    43 0000296D 57                  <1>     push rdi
    44 0000296E 55                  <1>     push rbp
    45 0000296F 4150                <1>     push r8
    46 00002971 488B1D5EFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    47 00002978 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    48 0000297C B003                <1>     mov al, drvBadCmd
    49 0000297E 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    50 00002984 B001                <1>     mov al, drvBadUnit 
    51 00002986 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    52 0000298A 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    53 00002990 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    54 00002997 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    55 0000299B C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    56 0000299E 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    57 000029A2 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    58 000029A6 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    59 000029A8 488D0D9A000000      <1>     lea rcx, .msdTable
    60 000029AF 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    61 000029B3 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    62 000029B5 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    63 000029B7 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    64 000029BA FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    65                              <1> .msdDriverExit:
    66 000029BC 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    67 000029C2 4158                <1>     pop r8
    68 000029C4 5D                  <1>     pop rbp
    69 000029C5 5F                  <1>     pop rdi
    70 000029C6 5E                  <1>     pop rsi
    71 000029C7 5A                  <1>     pop rdx
    72 000029C8 59                  <1>     pop rcx
    73 000029C9 5B                  <1>     pop rbx
    74 000029CA 58                  <1>     pop rax
    75 000029CB C3                  <1>     ret
    76                              <1> 
    77                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    78 000029CC 4889FB              <1>     mov rbx, rdi
    79 000029CF 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    80 000029D2 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    81 000029D4 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    82                              <1> ;Now fall through to general error
    83                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    84 000029D7 B401                <1>     mov ah, 01h
    85 000029D9 CD33                <1>     int 33h ;Read status of last operation
    86 000029DB 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    87 000029DE B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    88 000029E0 7460                <1>     je .msdWriteErrorCode 
    89 000029E2 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    90 000029E4 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    91 000029E7 7459                <1>     je .msdWriteErrorCode 
    92 000029E9 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    93 000029EC 7454                <1>     je .msdWriteErrorCode
    94                              <1> ;Device Not Ready
    95 000029EE B002                <1>     mov al, 02h  ;Device not ready code
    96 000029F0 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    97 000029F3 744D                <1>     je .msdWriteErrorCode
    98 000029F5 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    99 000029F9 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   100                              <1> ;Write Protected
   101 000029FD 30C0                <1>     xor al, al
   102 000029FF 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   103 00002A04 743C                <1>     je .msdWriteErrorCode
   104                              <1> ;CRC Error
   105 00002A06 B004                <1>     mov al, 04h     ;CRC error code
   106 00002A08 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   107 00002A0D 7433                <1>     je .msdWriteErrorCode
   108 00002A0F 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   109 00002A14 742C                <1>     je .msdWriteErrorCode
   110 00002A16 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   111 00002A1B 7425                <1>     je .msdWriteErrorCode
   112                              <1> ;Seek Error
   113 00002A1D B006                <1>     mov al, 06h     ;Seek error code
   114 00002A1F 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   115 00002A22 741E                <1>     je .msdWriteErrorCode
   116                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   117                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   118 00002A24 B007                <1>     mov al, 07h
   119 00002A26 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   120 00002A29 7417                <1>     je .msdWriteErrorCode
   121                              <1> ;Sector Not Found
   122 00002A2B B008                <1>     mov al, 08h     ;Sector not found code
   123 00002A2D 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   124 00002A30 7410                <1>     je .msdWriteErrorCode
   125                              <1> ;Write faults
   126 00002A32 B00A                <1>     mov al, 0Ah     ;Write fault
   127 00002A34 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   128 00002A37 7409                <1>     je .msdWriteErrorCode
   129                              <1> ;Read faults
   130 00002A39 B00B                <1>     mov al, 0Bh     ;Read fault
   131 00002A3B 80F911              <1>     cmp cl, 11h     ;Read error
   132 00002A3E 7402                <1>     je .msdWriteErrorCode
   133                              <1> ;General Errors
   134 00002A40 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   135                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   136 00002A42 B480                <1>     mov ah, 80h ;Set error bit
   137 00002A44 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   138 00002A48 C3                  <1>     ret ;Return to set done bit
   139                              <1> .msdTable:
   140 00002A49 0000                <1>     dw 0                            ;Function 0
   141 00002A4B 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   142 00002A4D 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   143 00002A4F 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   144 00002A51 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   145 00002A53 0000                <1>     dw 0                            ;Function 5
   146 00002A55 0000                <1>     dw 0                            ;Function 6
   147 00002A57 0000                <1>     dw 0                            ;Function 7
   148 00002A59 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   149 00002A5B 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   150 00002A5D 0000                <1>     dw 0                            ;Function 10
   151 00002A5F 0000                <1>     dw 0                            ;Function 11
   152 00002A61 C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   153 00002A63 D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   154 00002A65 ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   155 00002A67 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   156 00002A69 0000                <1>     dw 0                            ;Function 16
   157 00002A6B 0000                <1>     dw 0                            ;Function 17
   158 00002A6D 0000                <1>     dw 0                            ;Function 18
   159 00002A6F 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   160 00002A71 0000                <1>     dw 0                            ;Function 20
   161 00002A73 0000                <1>     dw 0                            ;Function 21
   162 00002A75 0000                <1>     dw 0                            ;Function 22
   163 00002A77 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   164 00002A79 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   165                              <1> 
   166                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   167                              <1> .msdMedChk:          ;Function 1
   168 00002A7B B005                <1>     mov al, 05h ;Bad request structure length
   169 00002A7D 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   170 00002A80 75C0                <1>     jne .msdWriteErrorCode
   171                              <1> 
   172 00002A82 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   173 00002A87 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   174 00002A8E 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   175 00002A91 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   176 00002A94 753F                <1>     jnz .mmcNoChange
   177                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   178 00002A96 B416                <1>     mov ah, 16h 
   179 00002A98 CD33                <1>     int 33h
   180 00002A9A 0F8237FFFFFF        <1>     jc .msdGenDiskError
   181 00002AA0 80FC80              <1>     cmp ah, 80h
   182 00002AA3 740E                <1>     je .mmcNoChangeLine
   183 00002AA5 80FC86              <1>     cmp ah, 86h
   184 00002AA8 7409                <1>     je .mmcNoChangeLine
   185 00002AAA 84E4                <1>     test ah, ah ;No change?
   186 00002AAC 7427                <1>     jz .mmcNoChange
   187 00002AAE F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   188 00002AB1 750D                <1>     jnz .mmcChange
   189                              <1> ;If nothing, fall through and test manually, should never happen though
   190                              <1> .mmcNoChangeLine:
   191                              <1> ;Now we test Media Descriptor
   192 00002AB3 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   193 00002AB8 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   194 00002ABB 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   195 00002ABE 7410                <1>     je .mmcUnsure
   196                              <1> .mmcChange:
   197 00002AC0 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   198 00002AC4 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   199 00002ACB 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   200                              <1>     ;Check here if there were any open handles on the device when it was changed
   201 00002ACF C3                  <1>     ret
   202                              <1> .mmcUnsure:
   203 00002AD0 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   204 00002AD4 C3                  <1>     ret
   205                              <1> .mmcNoChange:
   206 00002AD5 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   207 00002AD9 C3                  <1>     ret
   208                              <1> 
   209                              <1> 
   210                              <1> .msdBuildBPB:        ;Function 2
   211 00002ADA B005                <1>     mov al, 05h ;Bad request structure length
   212 00002ADC 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   213 00002ADF 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   214                              <1> 
   215 00002AE5 4889DE              <1>     mov rsi, rbx
   216 00002AE8 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   217 00002AED 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   218 00002AF4 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   219 00002AF7 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   220 00002AFB 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   221 00002AFD 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   222 00002B00 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   223 00002B05 CD33                <1>     int 33h
   224 00002B07 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   225                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   226 00002B0D 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   227 00002B11 7418                <1>     je .mbbpb0
   228 00002B13 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   229 00002B17 7412                <1>     je .mbbpb0
   230 00002B19 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   231 00002B1D 740C                <1>     je .mbbpb0
   232 00002B1F 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   233 00002B23 B007                <1>     mov al, 07h ;Unknown media error code
   234 00002B25 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   235                              <1> .mbbpb0:
   236 00002B2B 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   237 00002B2E 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   238 00002B33 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   239 00002B3A 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   240 00002B3E 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   241 00002B41 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   242 00002B45 B90F000000          <1>     mov ecx, bpbEx_size/8
   243 00002B4A F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   244 00002B4D C3                  <1>     ret
   245                              <1> .msdIOCTLRead:       ;Function 3, returns done
   246 00002B4E B005                <1>     mov al, drvBadDrvReq
   247 00002B50 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   248 00002B53 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   249 00002B59 C3                  <1>     ret
   250                              <1> .msdRead:            ;Function 4
   251                              <1> ;Will read one sector at a time.
   252 00002B5A B005                <1>     mov al, 05h ;Bad request structure length
   253 00002B5C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   254 00002B5F 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   255                              <1> 
   256 00002B65 4889DF              <1>     mov rdi, rbx
   257 00002B68 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   258                              <1> .msdr0:
   259 00002B6A B682                <1>     mov dh, 82h ;LBA Read Sectors
   260 00002B6C E841010000          <1>     call .msdBlkIOCommon
   261 00002B71 0F8255FEFFFF        <1>     jc .msdIOError
   262 00002B77 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   263 00002B7F 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   264 00002B87 FFC6                <1>     inc esi
   265 00002B89 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   266 00002B8C 75DC                <1>     jne .msdr0
   267 00002B8E 4889FB              <1>     mov rbx, rdi
   268 00002B91 C3                  <1>     ret
   269                              <1> .msdWrite:           ;Function 8
   270                              <1> ;Will write one sector at a time.
   271 00002B92 B005                <1>     mov al, 05h ;Bad request structure length
   272 00002B94 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   273 00002B97 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   274                              <1> 
   275 00002B9D 4889DF              <1>     mov rdi, rbx
   276 00002BA0 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   277                              <1> .msdw0:
   278 00002BA2 B683                <1>     mov dh, 83h ;LBA Write Sectors
   279 00002BA4 E809010000          <1>     call .msdBlkIOCommon
   280 00002BA9 0F821DFEFFFF        <1>     jc .msdIOError
   281 00002BAF 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   282 00002BB7 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   283 00002BBF FFC6                <1>     inc esi
   284 00002BC1 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   285 00002BC4 75DC                <1>     jne .msdw0
   286 00002BC6 4889FB              <1>     mov rbx, rdi
   287 00002BC9 C3                  <1>     ret
   288                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   289                              <1> ;Will write one sector at a time and then verify it.
   290 00002BCA B005                <1>     mov al, 05h ;Bad request structure length
   291 00002BCC 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   292 00002BCF 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   293                              <1> 
   294 00002BD5 4889DF              <1>     mov rdi, rbx
   295 00002BD8 31F6                <1>     xor esi, esi  ;Set counter to zero
   296                              <1> .msdwv0:
   297 00002BDA B683                <1>     mov dh, 83h ;LBA Write Sectors
   298 00002BDC E8D1000000          <1>     call .msdBlkIOCommon
   299 00002BE1 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   300 00002BE7 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   301 00002BE9 E8C4000000          <1>     call .msdBlkIOCommon
   302 00002BEE 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   303 00002BF4 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   304 00002BFC 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   305 00002C04 FFC6                <1>     inc esi
   306 00002C06 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   307 00002C09 75CF                <1>     jne .msdwv0
   308 00002C0B 4889FB              <1>     mov rbx, rdi
   309 00002C0E C3                  <1>     ret
   310                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   311 00002C0F B005                <1>     mov al, drvBadDrvReq
   312 00002C11 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   313 00002C14 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   314                              <1> 
   315 00002C1A C3                  <1>     ret
   316                              <1> .msdDevOpen:         ;Function 13
   317 00002C1B B005                <1>     mov al, drvBadDrvReq
   318 00002C1D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   319 00002C20 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   320                              <1> 
   321 00002C26 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   322 00002C2B 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   323 00002C32 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   324 00002C35 C3                  <1>     ret
   325                              <1> .msdDevClose:        ;Function 14
   326 00002C36 B005                <1>     mov al, drvBadDrvReq
   327 00002C38 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   328 00002C3B 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   329                              <1> 
   330 00002C41 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   331 00002C46 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   332 00002C4D FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   333 00002C50 C3                  <1>     ret
   334                              <1> .msdRemovableMedia:  ;Function 15
   335 00002C51 B005                <1>     mov al, drvBadDrvReq
   336 00002C53 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   337 00002C56 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   338                              <1> 
   339 00002C5C 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   340 00002C61 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   341 00002C68 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   342 00002C6B B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   343 00002C70 31D2                <1>     xor edx, edx    ;Busy bit clear
   344 00002C72 A880                <1>     test al, 80h
   345 00002C74 0F44CA              <1>     cmovz ecx, edx
   346 00002C77 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   347 00002C7B C3                  <1>     ret
   348                              <1> .msdGenericIOCTL:    ;Function 19
   349 00002C7C B005                <1>     mov al, drvBadDrvReq
   350 00002C7E 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   351 00002C81 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   352                              <1> 
   353 00002C87 C3                  <1>     ret
   354                              <1> .msdGetLogicalDev:   ;Function 23
   355 00002C88 B005                <1>     mov al, drvBadDrvReq
   356 00002C8A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   357 00002C8D 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   358                              <1> 
   359 00002C93 8A0541000000        <1>     mov al, byte [.msdCurDev]
   360 00002C99 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   361 00002C9C C3                  <1>     ret
   362                              <1> .msdSetLogicalDev:   ;Function 24
   363 00002C9D B005                <1>     mov al, drvBadDrvReq
   364 00002C9F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   365 00002CA2 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   366                              <1> 
   367 00002CA8 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   368 00002CAB 880529000000        <1>     mov byte [.msdCurDev], al
   369 00002CB1 C3                  <1>     ret
   370                              <1> 
   371                              <1> .msdBlkIOCommon:  ;Does block IO
   372                              <1> ;Called with rdi containing old rbx value and ah with function number
   373                              <1> ;rbp points to bpb
   374                              <1> ;Error handled by caller
   375                              <1> ;Sector count handled by caller
   376                              <1> ;Called with dh = BIOS function number
   377 00002CB2 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   378 00002CB7 8A90[DB2C0000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   379 00002CBD 31C9                <1>     xor ecx, ecx
   380 00002CBF 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   381 00002CC2 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   382 00002CC6 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   383 00002CCA 88F4                <1>     mov ah, dh
   384 00002CCC B001                <1>     mov al, 01h ;Do one sector at a time 
   385 00002CCE CD33                <1>     int 33h
   386 00002CD0 C3                  <1>     ret
   387                              <1> 
   388 00002CD1 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   389                              <1> ;LASTDRIVE default is 5
   390                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   391                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   392 00002CDA 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   393                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   394 00002CDB FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   395 00002CE0 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   396 00002CE5 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   396 00002CEE 000000000000000000- <1>
   396 00002CF7 000000000000000000- <1>
   396 00002D00 000000000000000000- <1>
   396 00002D09 00000000            <1>
   397 00002D0D 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   397 00002D16 000000000000000000- <1>
   397 00002D1F 000000000000000000- <1>
   397 00002D28 000000000000000000- <1>
   397 00002D31 000000000000000000- <1>
   397 00002D3A 000000000000000000- <1>
   397 00002D43 000000000000000000- <1>
   397 00002D4C 000000000000000000- <1>
   397 00002D55 000000000000000000- <1>
   397 00002D5E 000000000000000000- <1>
   397 00002D67 000000000000000000- <1>
   397 00002D70 000000000000000000- <1>
   397 00002D79 000000000000000000- <1>
   397 00002D82 000000000000000000- <1>
   397 00002D8B 000000000000000000- <1>
   397 00002D94 000000000000000000- <1>
   397 00002D9D 000000000000000000- <1>
   397 00002DA6 000000000000000000- <1>
   397 00002DAF 000000000000000000- <1>
   397 00002DB8 000000000000000000- <1>
   397 00002DC1 000000000000000000- <1>
   397 00002DCA 000000000000000000- <1>
   397 00002DD3 000000000000000000- <1>
   397 00002DDC 000000000000000000- <1>
   397 00002DE5 000000000000000000- <1>
   397 00002DEE 000000000000000000- <1>
   397 00002DF7 000000000000000000- <1>
   397 00002E00 000000000000000000- <1>
   397 00002E09 000000000000000000- <1>
   397 00002E12 000000000000000000- <1>
   397 00002E1B 000000000000000000- <1>
   397 00002E24 000000000000000000- <1>
   397 00002E2D 000000000000000000- <1>
   397 00002E36 000000000000000000- <1>
   397 00002E3F 000000000000000000- <1>
   397 00002E48 000000000000000000- <1>
   397 00002E51 000000000000000000- <1>
   397 00002E5A 000000000000000000- <1>
   397 00002E63 000000000000000000- <1>
   397 00002E6C 000000000000000000- <1>
   397 00002E75 000000000000000000- <1>
   397 00002E7E 000000000000000000- <1>
   397 00002E87 000000000000000000- <1>
   397 00002E90 000000000000000000- <1>
   397 00002E99 000000000000000000- <1>
   397 00002EA2 000000000000000000- <1>
   397 00002EAB 000000000000000000- <1>
   397 00002EB4 000000000000000000- <1>
   397 00002EBD 000000000000000000- <1>
   397 00002EC6 000000000000000000- <1>
   397 00002ECF 000000000000000000- <1>
   397 00002ED8 000000000000000000- <1>
   397 00002EE1 000000000000000000- <1>
   397 00002EEA 000000000000000000- <1>
   397 00002EF3 000000000000000000- <1>
   397 00002EFC 000000000000000000- <1>
   397 00002F05 000000000000000000- <1>
   397 00002F0E 000000000000000000- <1>
   397 00002F17 000000000000000000- <1>
   397 00002F20 000000000000000000- <1>
   397 00002F29 000000000000000000- <1>
   397 00002F32 000000000000000000- <1>
   397 00002F3B 000000000000000000- <1>
   397 00002F44 000000000000000000- <1>
   397 00002F4D 000000000000000000- <1>
   397 00002F56 000000000000000000- <1>
   397 00002F5F 000000000000        <1>
   398                              <1> 
   399                              <1> endptr equ $
    37                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    38                                  ;Paragraph alignment
    39                                  %include "./Source/BSS/dosDynaDataArea.asm"
    40                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    41                              <1> ; the MCB chain!
    42                              <1> ddaStart:
    43 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    44                              <1> 
    45                              <1> ;Create SFT header and corresponding array of five default sft entries
    46 00000010 <res Ah>            <1> firstSftHeader  resb sfth_size
    47 0000001A <res 43h>           <1> firstSft        resb sft_size
    48 0000005D <res 43h>           <1> secondSft       resb sft_size
    49 000000A0 <res 43h>           <1> thirdSft        resb sft_size
    50 000000E3 <res 43h>           <1> fourthSft       resb sft_size
    51 00000126 <res 43h>           <1> fifthSft        resb sft_size
    52                              <1> 
    53                              <1> ;Create DPB chain of first 5 available DPB slots
    54                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    55 00000169 <res 35h>           <1> firstDPB        resb dpb_size
    56 0000019E <res 35h>           <1> secondDPB       resb dpb_size
    57                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    58                              <1> ;Always jettison this space
    59 000001D3 <res 35h>           <1> thirdDPB        resb dpb_size
    60 00000208 <res 35h>           <1> fourthDPB       resb dpb_size
    61 0000023D <res 35h>           <1> fifthDPB        resb dpb_size 
    62                              <1> 
    63                              <1> ;Create a one drive CDS to keep track of drive A's current dir
    64                              <1> ;Replace once CONFGI.SYS has been read
    65 00000272 <res 5Bh>           <1> initCDS         resb cds_size 
    66                              <1> 
    67                              <1> 
    68 000002CD <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    69 000002ED <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    70                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    71                              <1> dynamicDataAreaLength equ $ - ddaStart
