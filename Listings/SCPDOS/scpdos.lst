     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     6                                  %include "./Source/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    67                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    69                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    70                              <1>     devDrvChar     equ 8000h ;If set, Char device
    71                              <1> ;Bit 0 1=console input
    72                              <1> ;    1 1=console output (character devices)
    73                              <1> ;    2 1=NUL device
    74                              <1> ;    3 1=CLOCK device
    75                              <1> ;    4 1=INT 49 output (CON)
    76                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    77                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    78                              <1> ;   11 1=open/close/removable media supported (3.0+)
    79                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    80                              <1> ;      1=media descriptor in FAT required (block devices)
    81                              <1> ;   14 1=IOCTL supported
    82                              <1> ;   15 0=block device
    83                              <1> ;      1=character device
    84                              <1> 
    85                              <1> ;Driver structures
    86                              <1> 
    87                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    88                              <1> 
    89                              <1>     .hdrlen resb 1  ;Length of the request header
    90                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    91                              <1>     .cmdcde resb 1  ;Command code
    92                              <1>     .status resw 1  ;Status word
    93                              <1>     .devptr resq 1  ;Device queue pointer field, reserved for future use
    94                              <1> 
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc drvReqHdr
    98                              <1>     drvReqHdrM
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
    99                              <1> endstruc
   100                              <1> 
   101                              <1> struc initReqPkt  ;Init Request Packet
   102                              <1> 
   103                              <1>     drvReqHdrM   ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   104 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   105 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   106 00000016 ????????????????    <1>     .optptr resq 1  ;Ptr to BPB array (blkdev) or cmdline args
   107 0000001E ??                  <1>     .drvnum resb 1  ;First Drive number
   108                              <1> 
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   114 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   115 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   116 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   121                              <1> 
   122                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   123 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   124 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   125 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   126                              <1> 
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc ioReqPkt   ;IO Request Packet
   130                              <1> 
   131                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   132 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   133 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   134 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   135 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   136 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   137                              <1> 
   138                              <1> endstruc
   139                              <1> 
   140                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   141                              <1>     
   142                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   143 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   144                              <1> 
   145                              <1> endstruc
   146                              <1> 
   147                              <1> struc statusReqPkt   ;Status Request Packet
   148                              <1> 
   149                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   156                              <1>      
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc openReqPkt ;Open Device Request Packet
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc closeReqPkt ;Close Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   180 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   181 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   182 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   183 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   184 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   185                              <1> 
   186                              <1> endstruc
   187                              <1> 
   188                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   189                              <1>     
   190                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> 
   201                              <1> struc genioctlGetParamsTable
   202 00000000 ??                  <1>     .size           resb 1
   203 00000001 ??????????????      <1>     .res            resb 7
   204 00000008 ????????????????    <1>     .sectorSize     resb 8  ;Only the lower dword is valid here
   205 00000010 ????????????????    <1>     .numSectors     resb 8
   206                              <1> endstruc
   207                              <1> 
   208                              <1> ;THE WRITE STRUCT MUST BE A STRICT SUPERSET OF THE FORMAT STRUCT ALWAYS
   209                              <1> struc genioctlLBAformat
   210 00000000 ??                  <1>     .size           resb 1
   211 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to format
   212 00000002 ????????????        <1>     .res            resb 6
   213 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start format at
   214                              <1> endstruc
   215                              <1> 
   216                              <1> struc genioctlLBAwrite
   217 00000000 ??                  <1>     .size           resb 1
   218 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to write
   219 00000002 ????????????        <1>     .res            resb 6
   220 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start write at
   221 00000010 ????????????????    <1>     .xferBuffer     resb 8  ;Transfer buffer for data
   222                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    19                              <1> 
    20 00000000 ??????              <1>     .jmpBoot    resb 3 
    21 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    22 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    23 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    24 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    25 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    26 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    27 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    28 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    29 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    30 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    31 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    32 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    33 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    34                              <1> 
    35 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    36 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    37 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    38 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    39 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    40 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    41                              <1> 
    42                              <1> endstruc
    43                              <1> 
    44                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    45                              <1> 
    46 00000000 ??????              <1>     .jmpBoot    resb 3
    47 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    48 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    49 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    50 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    51 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    52 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    53 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    54 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    55 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    56 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    57 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    58 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    59 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    60                              <1> 
    61 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    62 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    63 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    64 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    65 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    66 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    67 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    68                              <1> 
    69 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    70 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    71 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    72 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    73 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    74 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    75                              <1> 
    76                              <1> endstruc
    77                              <1> 
    78                              <1> struc mbr
    79 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    80 000001B8 ????????            <1>     .diskID     resb 4
    81 000001BC ????                <1>     .reserved   resb 2
    82 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    83 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    84 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    85 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    86 000001FE ????                <1>     .mbrSig     resb 2
    87                              <1> endstruc
    88                              <1> 
    89                              <1> struc mbrEntry
    90 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    91 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    92 00000004 ??                  <1>     .ptnType    resb 1  ;This being 00 means free
    93 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    94 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    95 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    96                              <1> endstruc
    97                              <1> 
    98                              <1> struc ebr
    99 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   100 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   101 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   102 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   103 000001FE ????                <1>     .mbrSig     resb 2
   104                              <1> endstruc
   105                              <1> 
   106                              <1> 
   107                              <1> struc fatDirEntry
   108                              <1> 
   109 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   110 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   111 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   112 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   113 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   114 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   115 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   116 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   117 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   118 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   119 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   120 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   121                              <1> 
   122                              <1> endstruc
   123                              <1> ;Directory attribute equates
   124                              <1>     dirReadOnly     equ 01h
   125                              <1>     dirHidden       equ 02h
   126                              <1>     dirSystem       equ 04h
   127                              <1>     dirVolumeID     equ 08h
   128                              <1>     dirDirectory    equ 10h
   129                              <1>     dirArchive      equ 20h
   130                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   131                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   132                              <1>     ;If any of the three bits are set, then ALL three bits are set
   133                              <1>     ; in addition to whatever the user passed to search for.
   134                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   135                              <1>     dirIncFiles     equ dirHidden | dirSystem
   136                              <1> 
   137                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   138                              <1> 
   139 00000000 ??????              <1>     .jmpBoot                resb 3 
   140 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   141 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   142 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   143 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   144 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   145 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   146 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   147 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   148 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   149 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   150 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   151 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   152 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   153 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   154 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   155 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   156 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   157 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc FSInfo
   162                              <1> 
   163 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   164 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   165 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   166 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   167 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   168 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   169 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   170                              <1> 
   171                              <1> endstruc
   172                              <1> 
   173                              <1> %macro defaultBPB 0
   174                              <1>     db 0E9h
   175                              <1>     db 00h
   176                              <1>     db 90h
   177                              <1>     db 'SCPDOSv1'
   178                              <1>     dw 0200h                       
   179                              <1>     db 01h                         
   180                              <1>     dw 0001h                           
   181                              <1>     db 02h                              
   182                              <1>     dw 00E0h            
   183                              <1>     dw 0B40h   
   184                              <1>     db 0F0h                   
   185                              <1>     dw 0009h                   
   186                              <1>     dw 0012h                     
   187                              <1>     dw 0002h                  
   188                              <1>     dd 0                 
   189                              <1>     dd 0 
   190                              <1>     db 00h
   191                              <1>     db 00h
   192                              <1>     db 29h
   193                              <1>     dd 0
   194                              <1>     db 'NO NAME    '
   195                              <1>     db 'FAT12   '
   196                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   197                              <1> %endmacro
     8                                  %include "./Source/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     9                                  %include "./Source/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    57 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    58                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    59                              <1> ; another, we save the number of chars to skip to that deep level).
    60                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    61                              <1> ; Only affects for SUBST drives, not JOIN
    62                              <1> ; Flags: Bit 15 set = Network drive
    63                              <1> ;        Bit 14 set = Physical drive
    64                              <1> ;        Bit 13 set = JOIN'ed drive
    65                              <1> ;        Bit 12 set = SUBST'ed drive
    66                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    67                              <1> endstruc
    68                              <1> ;CDS equates
    69                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    70                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    71                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    72                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    73                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    74                              <1> ;------------------------------------------------------------------------;
    75                              <1> ; The SFT is a way to allow applications to open file handles to files 
    76                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    77                              <1> ; under the first header, and then a second header will be linked to the 
    78                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    79                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    80                              <1> ; using the FCBS= command. Default FCBS=5.
    81                              <1> ;
    82                              <1> ; A file handle describes the file, and the location within the file that
    83                              <1> ; we are reading. The file handle can be manipulated without the file
    84                              <1> ; being in memory, thus allowing the user to access data without needing 
    85                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    86                              <1> ; accessing devices, by treating them as files with their drivers 
    87                              <1> ; responding and translating the manipulations of the file handle itself.
    88                              <1> ; Neither the driver nor the application should see or use the SFT for
    89                              <1> ; the handle, as it is subject to change (and will change when file 
    90                              <1> ; sharing provisions are included). The DOS will make requests to the 
    91                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    92                              <1> ; track of the information in the SFT entry for that handle. 
    93                              <1> ;
    94                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    95                              <1> ; can point to the same file. It all depends on what the applications 
    96                              <1> ; want to do with the File.
    97                              <1> ;
    98                              <1> ; !!!!IMPORTANT!!!!
    99                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   100                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   101                              <1> ;
   102                              <1> ;Each SFT may look like this:
   103                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   104                              <1> ;            |                |
   105                              <1> ;       wNumFiles*sft    wNumFiles*sft
   106                              <1> ;
   107                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   108                              <1> ; System FCBs.
   109                              <1> ;
   110                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   111                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   112                              <1> ;
   113                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   114                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   115                              <1> ;------------------------------------------------------------------------;
   116                              <1> struc sfth   ;System file table header
   117                              <1> ; This is the SFT header.
   118                              <1> ; This structure comes before the start of the first file in the array/table.
   119 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   120 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   121                              <1> endstruc
   122                              <1> 
   123                              <1> struc sft
   124                              <1> ;This is the file struc itself
   125 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   126 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   127 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   128 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   129 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   130 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   131 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   132 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   133 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   134 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   135 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   136 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   137 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   138 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   139 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   140 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   141 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   142 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   143 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   144                              <1> ;                           0 means no record
   145                              <1> endstruc
   146                              <1> ;Open Mode equates
   147                              <1> ;Access modes   Bits[2:0]
   148                              <1> ReadAccess      equ 0h
   149                              <1> WriteAccess     equ 1h
   150                              <1> RWAccess        equ 2h
   151                              <1> ;Bit 3 reserved 0
   152                              <1> ;Sharing modes  Bits[6:4]
   153                              <1> CompatShare     equ 0h
   154                              <1> denyRWShare     equ 10h
   155                              <1> denyWriteShare  equ 20h
   156                              <1> denyReadShare   equ 30h
   157                              <1> denyNoneShare   equ 40h
   158                              <1> netFCBShare     equ 70h
   159                              <1> noInherit       equ 80h
   160                              <1> ;Bits 8-12 reserved 0
   161                              <1> 
   162                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   163                              <1> ;Buffering on writes
   164                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   165                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   166                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   167                              <1> ;Attribute Byte
   168                              <1> readOnlyFile    equ 1h
   169                              <1> hiddenFile      equ 2h
   170                              <1> systemFile      equ 4h
   171                              <1> volumeLabel     equ 8h
   172                              <1> directoryFile   equ 10h ;Directory entry
   173                              <1> archiveFile     equ 20h
   174                              <1> ;Device Info equates
   175                              <1> ;For a block device, bits [5:0] contain the drive number
   176                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   177                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   178                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   179                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   180                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   181                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   182                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   183                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   184                              <1> devCharDev      equ 80h ;If set, it is a char device!
   185                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   186                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   187                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   188                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   189                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   190                              <1>  
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   214 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   215                              <1>     .dataarea:             ;Points to the start of the data area
   216                              <1> endstruc
   217                              <1> ;Buffer Flag equates
   218                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   219                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   220                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   221                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   222                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   223                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   224                              <1> ;Note! A buffer is marked as referenced only when the application 
   225                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   226                              <1> ;------------------------------------------------------------------------;
   227                              <1> ; Memory control block for each memory arena
   228                              <1> ;------------------------------------------------------------------------;
   229                              <1> struc mcb
   230 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   231 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   232 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   233                              <1>     ;The following byte is reserved outside of sysinit
   234 0000000D ??                  <1>     .subSysMark resb 1  ;Marks the optional DOS subsystem of the MCB
   235 0000000E ????                <1>     .reserved   resb 2  
   236                              <1>     .program:
   237                              <1> endstruc
   238                              <1> ;MCB equates
   239                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   240                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   241                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   242                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   243                              <1> mcbMarkCtn      equ "M"
   244                              <1> mcbMarkEnd      equ "Z"
   245                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   246                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   247                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   248                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   249                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   250                              <1> mcbSubIFS       equ "I" ;Unused for now
   251                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   252                              <1> mcbSubFCBS      equ "X" ;Unused for now
   253                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   254                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   255                              <1> mcbSubStacks    equ "S" ;Unused for now
   256                              <1> 
   257                              <1> 
   258                              <1> memFirstFit     equ 0   ;First free block goes to application
   259                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   260                              <1> memLastFit      equ 2   ;Last free block goes to application
   261                              <1> 
   262                              <1> ;Owner = Para aligned address => Owning application PSP
   263                              <1> ;...To consider...
   264                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   265                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   266                              <1> ;------------------------------------------------------------------------;
   267                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   268                              <1> ; following order, thus allowing for return values to be placed in the 
   269                              <1> ; registers by accessing the caller register stack frame.
   270                              <1> ;------------------------------------------------------------------------;
   271                              <1> struc callerFrame
   272 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   273 00000008 ????????????????    <1>     .rbx    resq 1    
   274 00000010 ????????????????    <1>     .rcx    resq 1
   275 00000018 ????????????????    <1>     .rdx    resq 1
   276 00000020 ????????????????    <1>     .rsi    resq 1
   277 00000028 ????????????????    <1>     .rdi    resq 1
   278 00000030 ????????????????    <1>     .rbp    resq 1
   279 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   280 00000040 ????????????????    <1>     .r9     resq 1
   281                              <1> ;Pushed by Processor when invoked via Interrupt
   282 00000048 ????????????????    <1>     .rip    resq 1
   283 00000050 ????????????????    <1>     .cs     resq 1
   284 00000058 ????????????????    <1>     .flags  resq 1
   285                              <1> endstruc
   286                              <1> 
   287                              <1> struc dpl
   288                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   289                              <1> ; server calls
   290 00000000 ????????????????    <1>     .rax    resq 1
   291 00000008 ????????????????    <1>     .rbx    resq 1
   292 00000010 ????????????????    <1>     .rcx    resq 1
   293 00000018 ????????????????    <1>     .rdx    resq 1
   294 00000020 ????????????????    <1>     .rsi    resq 1
   295 00000028 ????????????????    <1>     .rdi    resq 1
   296 00000030 ????????????????    <1>     .r8     resq 1
   297 00000038 ????????????????    <1>     .r9     resq 1
   298 00000040 ????????????????    <1>     .align  resq 1
   299 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   300 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   301                              <1> endstruc
   302                              <1> 
   303                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   304 00000000 ????????????????    <1>     .oldRBP         resq 1  ;Ptr to DOSSEG
   305 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   306 00000010 ????????????????    <1>     .newSFTVal      resq 1
   307 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   308 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   309 00000028 ????????????????    <1>     .newLastdrive   resq 1
   310 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   311 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   312 00000040 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   313 00000048 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   314 00000050 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line buffer of line being processed
   315 00000058 ????????????????    <1>     .driverBreak    resq 1  ;Ptr to the pathname terminator 
   316 00000060 ????????????????    <1>     .breakChar      resq 1  ;Char that was replaced by null for terminator
   317                              <1> endstruc
   318                              <1> 
   319                              <1> struc filename
   320                              <1> ;8.3 File name struct
   321 00000000 ????????????????    <1>     .fName  resb 8
   322 00000008 ??????              <1>     .fExt   resb 3
   323                              <1> endstruc
   324                              <1> 
   325                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   326 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   327 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   328 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   329 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   330 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   331 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   332 00000016 ????                <1>     .fileTime   resw 1  ;File time
   333 00000018 ????                <1>     .fileDate   resw 1  ;File date
   334 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   335 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   336                              <1> endstruc
   337                              <1> 
   338                              <1> struc psp
   339 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   340 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   341 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   342 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   343 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   344 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   345 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   346                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   347 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   348 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   349 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   350 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   351 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   352 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   353 0000005B ??                  <1>                 resb 1  ;Reserved byte
   354                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   355                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   356                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   357                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   358                              <1> ; always used and xtraHdlSz.
   359                              <1> ;Will need to add two SYSCALLS for future expansion:
   360                              <1> ;       1) Get Program Environment Pointer
   361                              <1> ;       2) Get Command Line arguments pointer
   362                              <1> ;The below are in the same place as in DOS.
   363                              <1>     .cmdLineArgPtr: ;Symbol for future use
   364 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   365 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   366                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   367 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   368 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   369                              <1> endstruc
   370                              <1> 
   371                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   372                              <1> 
   373                              <1> struc clkStruc
   374 00000000 ????                <1>     .dateWord   resw 1
   375 00000002 ??                  <1>     .minutes    resb 1
   376 00000003 ??                  <1>     .hours      resb 1
   377 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   378 00000005 ??                  <1>     .seconds    resb 1
   379                              <1> endstruc
   380                              <1> 
   381                              <1> struc countryStruc
   382 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   383                              <1>                         ;0 = month day year hh:mm:ss
   384                              <1>                         ;1 = day month year hh:mm:ss
   385                              <1>                         ;2 = year month day hh:mm:ss
   386 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   387 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   388 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   389 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   390 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   391 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   392                              <1>                         ;0 = Symbol leads, without space
   393                              <1>                         ;1 = Symbol follows, without space
   394                              <1>                         ;2 = Symbol leads, one space
   395                              <1>                         ;3 = Symbol follows, one space
   396                              <1>                         ;4 = Symbol replace decimal separator
   397 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   398 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   399 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   400 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   401 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   402                              <1> endstruc
   403                              <1> 
   404                              <1> ;Critical Error AH bitfield equates
   405                              <1> critRead    equ 0h
   406                              <1> critWrite   equ 1h
   407                              <1> critDOS     equ 0h
   408                              <1> critFAT     equ 2h
   409                              <1> critDir     equ 4h
   410                              <1> critData    equ 6h
   411                              <1> critFailOK  equ 8h
   412                              <1> critRetryOK equ 10h
   413                              <1> critIgnorOK equ 20h
   414                              <1> critCharDev equ 80h
   415                              <1> 
   416                              <1> critIgnore  equ 0
   417                              <1> critRetry   equ 1
   418                              <1> critAbort   equ 2
   419                              <1> critFail    equ 3
   420                              <1> 
   421                              <1> ;MISC ASCII control chars
   422                              <1> NUL equ 00h ;^@         | ASCII Null
   423                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   424                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   425                              <1> BEL equ 07h ;^G         | ASCII Bell
   426                              <1> BSP equ 08h ;^H         | ASCII Backspace
   427                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   428                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   429                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   430                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   431                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   432                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   433                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   434                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   435                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   436                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   437                              <1> SPC equ 20h ;Printable  | ASCII Space
   438                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   439                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   440                              <1> 
   441                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   442                              <1> ;Extended Ascii Codes
   443                              <1> eF1     equ 3Bh ;F1 second byte
   444                              <1> eF2     equ 3Ch ;F2 second byte
   445                              <1> eF3     equ 3Dh ;F3 second byte
   446                              <1> eF4     equ 3Eh ;F4 second byte
   447                              <1> eF5     equ 3Fh ;F5 second byte
   448                              <1> eF6     equ 40h ;F6 second byte
   449                              <1> eF7     equ 41h ;F7 second byte
   450                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   451                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   452                              <1> eIns    equ 52h ;Insert second byte
   453                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   454                              <1> 
   455                              <1> ;Default Configuration for the system
   456                              <1> 
   457                              <1> buffersDefault  equ 30
   458                              <1> filesDefault    equ 20
   459                              <1> fcbsDefault     equ 4
   460                              <1> safeFcbsDeflt   equ 0
   461                              <1> lastDriveDeflt  equ 5   
    10                                  %include "./Source/Debug/debSym.inc"
     1                              <1> ;This file will include the debuging symbols
     2                              <1> 
     3                              <1> %define true 1
     4                              <1> %define false 0
     5                              <1> 
     6                              <1> ;Switch the DEBUG to false in production!
     7                              <1> %define DEBUG false
     8                              <1> %define DPBINFO false
     9                              <1> %define REGS false
    10                              <1> %define ENDSTATUS false
    11                              <1> 
    12                              <1> 
    13                              <1> ;Use this space as the debug stack
    14                              <1> %define debStackTop 80000h
    11                                  %include "./Source/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on INT 44h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    12                                  %include "./Source/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 41h/4Bh
     3                              <1> 
     4                              <1> ;Int 41h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    13                                  Segment .text align=1   ;Init code
    14                                  %define currSegVBase 0
    15                                  %include "./Source/Sysinit/oemreloc.asm"
     1                              <1> ; We arrive here with the following values in the registers.
     2                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
     3                              <1> ; dx  = Int 33h boot device number
     4                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
     5                              <1> 
     6 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
     7 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
     8 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
     9 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    10 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    11 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    12 0000001A F348A5              <1>     rep movsq   ;Copy over
    13 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    14 00000022 50                  <1>     push rax
    15 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    16                              <1> sysInitldr:
    17                              <1> ;Now the tough part, load DOS to 800
    18 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    19                              <1> .read:
    20 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    21 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    21 00000035 00                  <1>
    22 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    23 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    24 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    25 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    26 0000003F CD33                <1>     int 33h
    27 00000041 7206                <1>     jc .readFail
    28 00000043 6800080000          <1>     push qword 800h
    29 00000048 C3                  <1>     ret   ;No error? Yay, DOS loaded.
    30                              <1> .readFail:
    31 00000049 FFCE                <1>     dec esi
    32 0000004B 75DC                <1>     jnz .read
    33 0000004D 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    34 00000054 B804130000          <1>     mov eax, 1304h
    35 00000059 CD30                <1>     int 30h
    36 0000005B CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    37 0000005D 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    37 00000066 6F6164204572726F72- <1>
    37 0000006F 0A0D00              <1>
    38 00000072 909090909090909090- <1>     db 200h-($-$$) dup 90h ;Fill rest of the sector with NOPs
    38 0000007B 909090909090909090- <1>
    38 00000084 909090909090909090- <1>
    38 0000008D 909090909090909090- <1>
    38 00000096 909090909090909090- <1>
    38 0000009F 909090909090909090- <1>
    38 000000A8 909090909090909090- <1>
    38 000000B1 909090909090909090- <1>
    38 000000BA 909090909090909090- <1>
    38 000000C3 909090909090909090- <1>
    38 000000CC 909090909090909090- <1>
    38 000000D5 909090909090909090- <1>
    38 000000DE 909090909090909090- <1>
    38 000000E7 909090909090909090- <1>
    38 000000F0 909090909090909090- <1>
    38 000000F9 909090909090909090- <1>
    38 00000102 909090909090909090- <1>
    38 0000010B 909090909090909090- <1>
    38 00000114 909090909090909090- <1>
    38 0000011D 909090909090909090- <1>
    38 00000126 909090909090909090- <1>
    38 0000012F 909090909090909090- <1>
    38 00000138 909090909090909090- <1>
    38 00000141 909090909090909090- <1>
    38 0000014A 909090909090909090- <1>
    38 00000153 909090909090909090- <1>
    38 0000015C 909090909090909090- <1>
    38 00000165 909090909090909090- <1>
    38 0000016E 909090909090909090- <1>
    38 00000177 909090909090909090- <1>
    38 00000180 909090909090909090- <1>
    38 00000189 909090909090909090- <1>
    38 00000192 909090909090909090- <1>
    38 0000019B 909090909090909090- <1>
    38 000001A4 909090909090909090- <1>
    38 000001AD 909090909090909090- <1>
    38 000001B6 909090909090909090- <1>
    38 000001BF 909090909090909090- <1>
    38 000001C8 909090909090909090- <1>
    38 000001D1 909090909090909090- <1>
    38 000001DA 909090909090909090- <1>
    38 000001E3 909090909090909090- <1>
    38 000001EC 909090909090909090- <1>
    38 000001F5 909090909090909090- <1>
    38 000001FE 9090                <1>
    39                              <1> ;END OF FIRST SECTOR!!
    40                              <1> ;Now move the alignment of the DOSSEG to 4Kb boundary
    41                              <1> initBegin:
    42 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    43 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    44 00000206 0F32                <1>     rdmsr
    45 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    46 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    47 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    48 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    49 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    50 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    51 00000221 E900000000          <1>     jmp sysinit
    52                              <1> ;Jump with rsi -> BIOS userbase
    53                              <1> ;          rdi -> APT load area (page aligned)
    54                              <1> ;          r15 -> Boot drive
    16                                  %include "./Source/Sysinit/sysinit.asm"
     1                              <1> 
     2                              <1> sysinit:    ;Control is passed here from OEMINIT
     3 00000226 E87E140000          <1>     call OEMINIT    ;First we call OEMINIT
     4 0000022B 0F82E2170000        <1>     jc OEMHALT      ;If it returns CF=CY, assume halt boot
     5                              <1> ;First move the OEMINIT into fs 
     6 00000231 B9000100C0          <1>     mov ecx, 0C0000100h ;Write FS MSR
     7 00000236 488B3D28130000      <1>     mov rdi, qword [FINALDOSPTR] ;Pointer of the address we loaded at
     8 0000023D 89F8                <1>     mov eax, edi
     9 0000023F 4889FA              <1>     mov rdx, rdi
    10 00000242 48C1EA20            <1>     shr rdx, 20h
    11 00000246 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    12 00000248 4889FD              <1>     mov rbp, rdi    ;Move the pointer into rbp as well
    13                              <1> ;------------------------------------------------;
    14                              <1> ;      Copy DOS to it's final resting ground     ;
    15                              <1> ;------------------------------------------------;  
    16                              <1> dosReloc:
    17 0000024B 488D35(00000000)    <1>     lea rsi, section.resSeg.start   ;Get pointer to the start of resSeg
    18 00000252 488B3D0C130000      <1>     mov rdi, qword [FINALDOSPTR]    ;Get ptr to where dSeg goes
    19 00000259 4881C7[C61A0000]    <1>     add rdi, dSegLen                ;Make this a pointer to the start of resSeg
    20 00000260 4839F7              <1>     cmp rdi, rsi 
    21 00000263 7408                <1>     je short skipDOSReloc   ;Skip relocating if DOS is at correct address
    22 00000265 B987100000          <1>     mov ecx, (dosLen + 7)/8
    23 0000026A F348A5              <1>     rep movsq
    24                              <1> skipDOSReloc:
    25                              <1> ;------------------------------------------------;
    26                              <1> ;              Connect Debugger                  ;
    27                              <1> ;------------------------------------------------;
    28                              <1> %if DEBUG
    29                              <1> ;Only connect if in debug mode
    30                              <1>     mov eax, 0C501h ;Connect debugger
    31                              <1>     int 35h
    32                              <1> %endif
    33                              <1> ;------------------------------------------------;
    34                              <1> ;           Sanitise the data area               ;
    35                              <1> ;------------------------------------------------;
    36                              <1> ; This call initialises ALL fields in the DOS    ;
    37                              <1> ; data area with 0's. Thus any fields, which     ;
    38                              <1> ; need to be initialised with a 0 value, are     ;
    39                              <1> ; initialised for free.                          ;
    40                              <1> ;------------------------------------------------;
    41 0000026D 488B3DF1120000      <1>     mov rdi, qword [FINALDOSPTR]    ;Go back to the data area
    42 00000274 B9[C61A0000]        <1>     mov ecx, dSegLen
    43 00000279 30C0                <1>     xor al, al
    44 0000027B F3AA                <1>     rep stosb   ;and sanitise away!
    45                              <1> ;------------------------------------------------;
    46                              <1> ;          Kernel inits and adjustments          ;
    47                              <1> ;------------------------------------------------;
    48                              <1> ;Adjust Interrupt Entries Int 00h-15h
    49                              <1> ;Assumes rbp points to DOSSEG
    50 0000027D 0F010DD7120000      <1>     sidt [localIDTpointer]   ;Get the idt pointer here
    51                              <1> adjExceptions:
    52 00000284 488D3DF20E0000      <1>     lea rdi, exceptData
    53 0000028B 31C0                <1>     xor eax, eax            ;Start with interrupt 0
    54 0000028D B915000000          <1>     mov ecx, 21
    55 00000292 E87E120000          <1>     call setupInterruptBlock
    56                              <1> ;Adjust Interrupt Entries Int 40h-49h
    57                              <1> adjInts:
    58 00000297 488D3D8F0F0000      <1>     lea rdi, intData
    59 0000029E B840000000          <1>     mov eax, 40h            ;Start with interrupt 40h
    60 000002A3 B950000000          <1>     mov ecx, 50h
    61 000002A8 E868120000          <1>     call setupInterruptBlock
    62                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
    63                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
    64                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
    65                              <1> ;Now adjust int 42h and 44h correctly using DOS to get them low
    66 000002AD 488D155F170000      <1>     lea rdx, OEMHALT ;Get segment start address
    67 000002B4 B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
    68 000002B9 CD41                <1>     int 41h
    69 000002BB 488D1551170000      <1>     lea rdx, OEMHALT ;Get segment start address
    70 000002C2 B844250000          <1>     mov eax, 2544h
    71 000002C7 CD41                <1>     int 41h
    72                              <1> ;------------------------------------------------;
    73                              <1> ;          Driver Adjustments and inits          ;
    74                              <1> ;------------------------------------------------;
    75                              <1> ;Modify the pointers in nData before putting them in the data area
    76 000002C9 48012DE70F0000      <1>     add qword [nData + drvHdr.strPtr], rbp
    77 000002D0 48012DE80F0000      <1>     add qword [nData + drvHdr.intPtr], rbp
    78                              <1> ;Copy the Null driver header to its location in Sysvars
    79 000002D7 B922000000          <1>     mov ecx, drvHdr_size
    80 000002DC 488D35CA0F0000      <1>     lea rsi, qword [nData]
    81 000002E3 488DBD[6E000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
    82 000002EA F3A4                <1>     rep movsb   
    83                              <1> 
    84                              <1> ;Adjust the addresses in the other driver headers 
    85 000002EC 488B358F120000      <1>     mov rsi, qword [OEMDRVCHAIN]
    86 000002F3 4889B5[6E000000]    <1>     mov qword [rbp + nulDevHdr + drvHdr.nxtPtr], rsi  ;Point NUL to the OEM driver chain
    87                              <1> adjDrivers:
    88                              <1> ;Input: rsi = Effective address of driver in DOS segment
    89                              <1> ;       rbp = Ptr to the start of the DOS segment
    90                              <1> ;Output: rsi = EA of next header in DOS segment
    91 000002FA 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
    92 000002FE 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
    93 00000302 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
    94 00000309 7408                <1>     je short .exit
    95 0000030B 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
    96 0000030E 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Dont "demand" ctguos headers... 
    97                              <1>     ;add rsi, drvHdr_size   ;... but definitely suggest it for kernel drivers
    98 00000311 EBE7                <1>     jmp short adjDrivers
    99                              <1> .exit:
   100                              <1> ;------------------------------------------------;
   101                              <1> ;                   MCB inits                    ;
   102                              <1> ;------------------------------------------------;
   103                              <1> makeMCBChain:
   104                              <1> ;Fill in Anchor MCB first
   105 00000313 488D85[10000000]    <1>     lea rax, qword [rbp + anchorMcb + mcb.program]    ;Get first allocated byte
   106 0000031A 488D9D[10100000]    <1>     lea rbx, qword [rbp + dosEnd] ;Get the end of the file
   107 00000321 4829C3              <1>     sub rbx, rax    ;Number of bytes in rbx (ebx bzw.)
   108 00000324 81C30F000000        <1>     add ebx, 0Fh    ;Round up if not para aligned
   109 0000032A C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   110 0000032D 899D[09000000]      <1>     mov dword [rbp + anchorMcb + mcb.blockSize], ebx
   111 00000333 48C785[01000000]08- <1>     mov qword [rbp + anchorMcb + mcb.owner], mcbOwnerDOS
   111 0000033B 000000              <1>
   112 0000033E C685[00000000]5A    <1>     mov byte [rbp + anchorMcb + mcb.marker], mcbMarkEnd
   113                              <1> 
   114 00000345 488D85[00000000]    <1>     lea rax, qword [rbp + anchorMcb]    ;Now store the anchor pointer in var
   115 0000034C 48890522120000      <1>     mov qword [MCBANCHOR], rax          ;Save in external var...
   116 00000353 6448890425-         <1>     mov qword fs:[mcbChainPtr], rax     ; and in internal DOS var 
   116 00000358 [27000000]          <1>
   117                              <1> 
   118 0000035C 55                  <1>     push rbp    ;Save the pointer to DOSSEG on the stack temporarily
   119 0000035D E803140000          <1>     call OEMMCBINIT ;Build MCB chain
   120 00000362 5D                  <1>     pop rbp
   121 00000363 0F82AA160000        <1>     jc OEMHALT
   122                              <1> ;------------------------------------------------;
   123                              <1> ;              Kernel Driver inits               ;
   124                              <1> ;------------------------------------------------;
   125                              <1> kernDrvInit:
   126                              <1>     ;rbp and fs point to DOSSEG
   127                              <1>     ;Set the CON pointer and the CLOCK pointers.
   128                              <1>     ;The standard defines that kernel drivers are such that the 
   129                              <1>     ;first driver MUST be CON and the fourth MUST be CLOCK$.
   130                              <1>     ;This is done to allow the drivers to use DOS CHAR functions and 
   131                              <1>     ;GET/SET TIME and GET/SET DATE
   132 00000369 488B3512120000      <1>     mov rsi, qword [OEMDRVCHAIN]    ;Get the first driver in the chain
   133 00000370 4889F3              <1>     mov rbx, rsi
   134 00000373 4889B5[47000000]    <1>     mov qword [rbp + vConPtr], rsi  ;Store default CON ptr
   135 0000037A 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto AUX
   136 0000037D 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto PRN
   137 00000380 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto CLOCK$
   138 00000383 4889B5[3F000000]    <1>     mov qword [rbp + clockPtr], rsi ;Store default CLOCK$ ptr
   139 0000038A 4889DE              <1>     mov rsi, rbx     ;Point rsi back to head of device chain
   140 0000038D 488D1DF6110000      <1>     lea rbx, initDrvBlk
   141                              <1>     ;The following is to mark all kernel driver allocs as new DOS
   142 00000394 48C785[13040000]09- <1>     mov qword [rbp + currentPSP], mcbOwnerNewDOS
   142 0000039C 000000              <1>
   143                              <1> .init:
   144 0000039F E8BE100000          <1>     call initDriver         ;Importantly preserves rbp, rsi and rbx
   145 000003A4 0F8269160000        <1>     jc OEMHALT
   146 000003AA E87D0F0000          <1>     call addDriverMarkers   ;Preserves all registers
   147 000003AF 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   148 000003B5 750B                <1>     jnz short .notMSD
   149 000003B7 E814110000          <1>     call buildDPBs          ;Preserves rbp, rsi and rbx
   150 000003BC 0F8251160000        <1>     jc OEMHALT
   151                              <1> .notMSD:
   152 000003C2 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Now point rsi to that header
   153 000003C5 4881FEFFFFFFFF      <1>     cmp rsi, -1     ;We at the end of the chain?
   154 000003CC 75D1                <1>     jne short .init ;If not, goto next driver
   155                              <1> ;Finally, Eject the init routine if so desired by the implementers
   156 000003CE 488D9D[10100000]    <1>     lea rbx, qword [rbp + dosEnd]   ;Get the original alloc end pointer (para aligned)
   157 000003D5 4C8D85[00000000]    <1>     lea r8, qword [rbp + anchorMcb]   ;Get pointer to mcb
   158 000003DC E830100000          <1>     call ejectKernelInit
   159 000003E1 0F822C160000        <1>     jc OEMHALT
   160                              <1> ;----------------------------------------:
   161                              <1> ;           End of driver inits.         :
   162                              <1> ;----------------------------------------:
   163                              <1> ;
   164                              <1> ;----------------------------------------:
   165                              <1> ;END OF IMPLEMENTERS SYSINIT PORTION ^^^ :
   166                              <1> ;      So called the OEM BIOS INIT       :
   167                              <1> ;----------------------------------------:
   168                              <1> ;
   169                              <1> ;----------------------------------------:
   170                              <1> ;START OF COMMON DOS SYSINIT PORTION VVV :
   171                              <1> ;----------------------------------------:
   172                              <1> ;
   173                              <1> ;Setup internal DOS vars from OEM passed arguments.
   174 000003E7 0FB60591110000      <1>     movzx eax, byte [DFLTDRIVE]
   175 000003EE 31DB                <1>     xor ebx, ebx
   176 000003F0 3D19000000          <1>     cmp eax, 25
   177 000003F5 0F47C3              <1>     cmova eax, ebx
   178 000003F8 8885[10000000]      <1>     mov byte [rbp + bootDrive], al
   179                              <1> 
   180 000003FE 0FB60578110000      <1>     movzx eax, byte [FILES]
   181 00000405 BB14000000          <1>     mov ebx, filesDefault
   182 0000040A 3D05000000          <1>     cmp eax, 5
   183 0000040F 0F42C3              <1>     cmovb eax, ebx
   184 00000412 8885[91000000]      <1>     mov byte [rbp + numFiles], al
   185                              <1> 
   186 00000418 0FB6055F110000      <1>     movzx eax, byte [BUFFERS]
   187 0000041F BB1E000000          <1>     mov ebx, buffersDefault
   188 00000424 85C0                <1>     test eax, eax
   189 00000426 0F44C3              <1>     cmovz eax, ebx
   190 00000429 88054F110000        <1>     mov byte [BUFFERS], al
   191                              <1> 
   192 0000042F 0FB6054A110000      <1>     movzx eax, byte [LASTDRIVE]
   193 00000436 BB05000000          <1>     mov ebx, lastDriveDeflt
   194 0000043B 39D8                <1>     cmp eax, ebx
   195 0000043D 0F42C3              <1>     cmovb eax, ebx
   196 00000440 88053A110000        <1>     mov byte [LASTDRIVE], al
   197 00000446 8885[6C000000]      <1>     mov byte [rbp + lastdrvNum], al     ;Set for DOS to be usable
   198                              <1> 
   199 0000044C 66C785[13000000]03- <1>     mov word [rbp + shareCount], 3      ;Retry the repeat 3 times before failing
   199 00000454 00                  <1>
   200 00000455 66C785[15000000]01- <1>     mov word [rbp + shareDelay], 1      ;Go through one multiple of countdown loop
   200 0000045D 00                  <1>
   201                              <1> ;------------------------------------------------;
   202                              <1> ;          Find largest sector size              ;
   203                              <1> ;------------------------------------------------;
   204                              <1> sectorSizeSearch:
   205                              <1> ;Done by reading DPB's for each drive
   206 0000045E 31C0                <1>     xor eax, eax
   207 00000460 64488B1425-         <1>     mov rdx, qword fs:[dpbHeadPtr]  ;Get ptr to first DPB
   207 00000465 [2F000000]          <1>
   208                              <1>     ;Go thru each block individually
   209                              <1> .findLargest:
   210 00000469 663B4202            <1>     cmp ax, word [rdx + dpb.wBytesPerSector]    ;Is current bigger than max?
   211 0000046D 660F424202          <1>     cmovb ax, word [rdx + dpb.wBytesPerSector]  ;Move if so
   212 00000472 488B5225            <1>     mov rdx, qword [rdx + dpb.qNextDPBPtr]  ;Goto next DPB
   213 00000476 4881FAFFFFFFFF      <1>     cmp rdx, -1 ;We at the end?
   214 0000047D 75EA                <1>     jne short .findLargest  ;If not, keep checking
   215 0000047F 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   215 00000484 [4F000000]          <1>
   216                              <1> ;------------------------------------------------;
   217                              <1> ;                CDS array inits                 ;
   218                              <1> ;------------------------------------------------;
   219 00000488 0FB68D[6C000000]    <1>     movzx ecx, byte [rbp + lastdrvNum]     ;Use as a counter
   220 0000048F E805000000          <1>     call makeCDSArray   ;Sets the CDS head pointer to rdi
   221 00000494 E995000000          <1>     jmp initialCDSWritten ;Go past the function
   222                              <1> makeCDSArray:
   223                              <1> ;Builds a new CDS array for ya and sets the sysvars var to point to it!
   224                              <1> ;Input: ecx = Size of array (number of CDS's in the array)
   225                              <1> ;Ouput: CF=CY: Abort operation. CF=NC: CDS Array allocated ok!
   226 00000499 B85B000000          <1>     mov eax, cds_size
   227 0000049E F7E1                <1>     mul ecx ;eax has the size of the CDS array to make
   228 000004A0 050F000000          <1>     add eax, 0Fh    ;Round up if not on a para boundary
   229 000004A5 C1E804              <1>     shr eax, 4      ;Convert to paragraphs
   230 000004A8 31DB                <1>     xor ebx, ebx
   231 000004AA 89C3                <1>     mov ebx, eax
   232 000004AC B800480000          <1>     mov eax, 4800h  ;ALLOC  (current owner is mcbOwnerNewDOS)
   233 000004B1 CD41                <1>     int 41h
   234                              <1>     retc    ;Return if Carry set
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34 000004B3 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000004B5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
   235 000004B6 4889C7              <1>     mov rdi, rax            ;Save pointer to MCB in rdi
   236 000004B9 482D10000000        <1>     sub rax, mcb_size       ;Move rax to point to MCB
   237 000004BF C6400D4C            <1>     mov byte [rax + mcb.subSysMark], mcbSubCDS  ;Mark as a CDS array
   238 000004C3 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Mark as owned by DOS
   239                              <1> 
   240 000004CB 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   240 000004D0 [59000000]          <1>
   241 000004D4 57                  <1>     push rdi
   242 000004D5 51                  <1>     push rcx
   243 000004D6 89C8                <1>     mov eax, ecx
   244 000004D8 B95B000000          <1>     mov ecx, cds_size
   245 000004DD F7E1                <1>     mul ecx ;Multiply eax with ecx to get number of bytes to null out
   246 000004DF 89C1                <1>     mov ecx, eax
   247 000004E1 31C0                <1>     xor eax, eax
   248 000004E3 F3AA                <1>     rep stosb
   249 000004E5 59                  <1>     pop rcx
   250 000004E6 5F                  <1>     pop rdi
   251 000004E7 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]
   251 000004EC [2F000000]          <1>
   252 000004F0 B8413A5C00          <1>     mov eax, 005C3A41h      ;"A:\"+NULL char
   253                              <1> .tempCDS:
   254 000004F5 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax
   255 000004F7 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   256 000004FB C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir for all!
   257 00000502 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the X:
   258 00000508 31D2                <1>     xor edx, edx    ;Use edx for flags
   259 0000050A 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Is rbx an invalid DPB ptr?
   260 00000511 7409                <1>     je .skipValidCDS
   261 00000513 BA00400000          <1>     mov edx, cdsValidDrive  ;If not, set drive to valid and...
   262 00000518 488B5B25            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]  ;... go to next DPB
   263                              <1> .skipValidCDS:
   264 0000051C 66895743            <1>     mov word [rdi + cds.wFlags], dx ;Store the flags now
   265 00000520 FFC0                <1>     inc eax ;Increment the drive letter
   266 00000522 4881C75B000000      <1>     add rdi, cds_size   ;Goto next array entry
   267 00000529 FFC9                <1>     dec ecx
   268 0000052B 75C8                <1>     jnz .tempCDS
   269 0000052D C3                  <1>     ret
   270                              <1> initialCDSWritten:
   271                              <1> ;------------------------------------------------;
   272                              <1> ;     Set up general PSP areas and DOS vars      ;
   273                              <1> ;------------------------------------------------;
   274                              <1> ;Ensure to link the default DOS vCON edit key
   275                              <1> ; controller routines before proceeding
   276 0000052E 488D85[68250000]    <1>     lea rax, qword [rbp + editKeys]
   277 00000535 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   277 0000053A [58000000]          <1>
   278                              <1> 
   279                              <1> ;Additional DOS Vars init and fixups
   280 0000053E 64C60425[FD030000]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   280 00000546 FF                  <1>
   281 00000547 64C60425[C5030000]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   281 0000054F 2F                  <1>
   282 00000550 488DBD[CF010000]    <1>     lea rdi, qword [rbp + extAsciiTbl]  ;Get the load of dflt extascii tbl
   283 00000557 6448893C25-         <1>     mov qword fs:[ctryTbl + countryStruc.mapaddr], rdi ;Store in country table
   283 0000055C [2C000000]          <1>
   284                              <1> 
   285                              <1> ;Server Table setup
   286 00000560 488DBD[F4030000]    <1>     lea rdi, qword [rbp + serverDispTbl]  ;Get pointer to table
   287 00000567 6448893C25-         <1>     mov qword fs:[serverDispTblPtr], rdi   ;Store to use
   287 0000056C [831A0000]          <1>
   288                              <1> 
   289                              <1> ;Set network machine name to... nothing!
   290 00000570 488DBD[CA030000]    <1>     lea rdi, qword [rbp + machineName]
   291 00000577 B910000000          <1>     mov ecx, 10h    ;16 chars long
   292 0000057C B020                <1>     mov al, SPC ;Space char
   293 0000057E F3AA                <1>     rep stosb   ;Fill with space chars
   294                              <1> 
   295                              <1> ;Patch Data Table init
   296 00000580 488DBD[DA030000]    <1>     lea rdi, qword [rbp + critPtchTbl]
   297 00000587 488D85[026B0000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   298 0000058E 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   299 00000590 488D85[0C6B0000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   300 00000597 48AB                <1>     stosq
   301 00000599 488D85[166B0000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   302 000005A0 48AB                <1>     stosq
   303 000005A2 488D85[206B0000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   304 000005A9 48AB                <1>     stosq
   305                              <1> 
   306                              <1> ;Initial PSP pointer fields
   307 000005AB 488D1DF70F0000      <1>     lea rbx, qword [tempPSP]
   308 000005B2 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   308 000005B7 [13040000]          <1>
   309 000005BB 53                  <1>     push rbx
   310 000005BC 4881C380000000      <1>     add rbx, psp.dta
   311 000005C3 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   311 000005C8 [0B040000]          <1>
   312 000005CC 5B                  <1>     pop rbx
   313 000005CD 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   314 000005D1 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   315 000005D5 4889DA              <1>     mov rdx, rbx
   316 000005D8 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   317 000005DD CD41                <1>     int 41h
   318 000005DF 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   319 000005E3 B843350000          <1>     mov eax, 3543h
   320 000005E8 CD41                <1>     int 41h
   321 000005EA 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   322 000005EE B844350000          <1>     mov eax, 3544h
   323 000005F3 CD41                <1>     int 41h
   324 000005F5 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   325                              <1> ;------------------------------------------------;
   326                              <1> ;              Setup DOSMGR Hooks                ;
   327                              <1> ;------------------------------------------------;   
   328 000005F9 488DBD[93000000]    <1>     lea rdi, qword [rbp + dosMgrHooks + 1]  ;Skip the present flag
   329 00000600 488D85[62720000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = NC
   330 00000607 48AB                <1>     stosq   ;Store ptr for LaunchTask
   331 00000609 48AB                <1>     stosq   ;Store ptr for TerminateTask
   332                              <1> ;------------------------------------------------;
   333                              <1> ;              Setup DLLMGR Hooks                ;
   334                              <1> ;------------------------------------------------;   
   335 0000060B 488DBD[A3000000]    <1>     lea rdi, qword [rbp + dllHooks]
   336 00000612 488D85[62720000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = NC
   337 00000619 48AB                <1>     stosq   ;Store ptr for RegisterDLL
   338 0000061B 48AB                <1>     stosq   ;Store ptr for UnloadDLLHook
   339                              <1> ;------------------------------------------------;
   340                              <1> ;               Setup Share Hooks                ;
   341                              <1> ;------------------------------------------------;
   342 0000061D 488DBD[B3000000]    <1>     lea rdi, qword [rbp + shareHooks]
   343 00000624 488D9D[62720000]    <1>     lea rbx, qword [rbp + goodDfltShareHook]
   344 0000062B 488D85[5C720000]    <1>     lea rax, qword [rbp + badDfltShareHook]
   345 00000632 48AB                <1>     stosq   ;Store bad for openFileCheck
   346 00000634 4893                <1>     xchg rax, rbx
   347 00000636 48AB                <1>     stosq   ;Store good for open
   348 00000638 48AB                <1>     stosq   ;Store good for close
   349 0000063A 4893                <1>     xchg rax, rbx
   350                              <1> ;Store bad for close for machine, task, name, lock and unlock file
   351 0000063C B905000000          <1>     mov ecx, 5
   352 00000641 F348AB              <1>     rep stosq
   353 00000644 4893                <1>     xchg rax, rbx
   354 00000646 48AB                <1>     stosq   ;Store good for check file lock exists
   355 00000648 4893                <1>     xchg rax, rbx
   356                              <1> ;Store bad for open file, update fcb from sft and get fst cluster of fcb
   357 0000064A B903000000          <1>     mov ecx, 3
   358 0000064F F348AB              <1>     rep stosq
   359 00000652 4893                <1>     xchg rax, rbx
   360 00000654 48AB                <1>     stosq   ;Store good for close dup file share
   361 00000656 4893                <1>     xchg rax, rbx
   362 00000658 48AB                <1>     stosq   ;Store bad for close handles for new file opened 
   363 0000065A 48AB                <1>     stosq   ;Store bad for update dir information
   364                              <1> ;------------------------------------------------;
   365                              <1> ;        Create a Default Temporary Buffer       ;
   366                              <1> ;------------------------------------------------;
   367 0000065C 640FB71C25-         <1>     movzx ebx, word fs:[maxBytesSec]    ;Get buffer size
   367 00000661 [4F000000]          <1>
   368 00000665 81C330000000        <1>     add ebx, bufferHdr_size             ;add header size for allocation size
   369 0000066B 81C30F000000        <1>     add ebx, 0Fh
   370 00000671 C1EB04              <1>     shr ebx, 4  ;Convert to number of paragraphs
   371 00000674 B800480000          <1>     mov eax, 4800h
   372 00000679 CD41                <1>     int 41h
   373 0000067B 0F8292130000        <1>     jc OEMHALT
   374 00000681 6448890425-         <1>     mov qword fs:[bufHeadPtr], rax      ;Save pointer to buffer
   374 00000686 [51000000]          <1>
   375 0000068A 48C700FFFFFFFF      <1>     mov qword [rax + bufferHdr.nextBufPtr], -1 ;Point to no buffer
   376 00000691 66C74008FF00        <1>     mov word [rax + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags    
   377 00000697 482D10000000        <1>     sub rax, mcb_size   ;Now go back to the mcb itself
   378 0000069D 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set DOS as owner of Buffer
   379 000006A5 C6400D42            <1>     mov byte [rax + mcb.subSysMark], mcbSubBuffers  ;Set this arena as a buffer
   380                              <1> ;------------------------------------------------;
   381                              <1> ;          Default File Handle Creation          ;
   382                              <1> ;                                                ;
   383                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   384                              <1> ;------------------------------------------------;
   385                              <1> defaultFileHandles:
   386 000006A9 488D95[2B010000]    <1>     lea rdx, qword [rbp + firstSftHeader]
   387 000006B0 6448891425-         <1>     mov qword fs:[sftHeadPtr], rdx  ;Start from this SFT header
   387 000006B5 [37000000]          <1>
   388 000006B9 48C702FFFFFFFF      <1>     mov qword [rdx + sfth.qNextSFTPtr], -1
   389 000006C0 66C742080500        <1>     mov word [rdx + sfth.wNumFiles], 5  ;This SFTH has space for 5 SFTs
   390                              <1> 
   391 000006C6 E8040C0000          <1>     call openStreams
   392 000006CB 0F8242130000        <1>     jc OEMHALT
   393                              <1> ;------------------------------------------------;
   394                              <1> ;             Print Welcome Message              ;
   395                              <1> ;------------------------------------------------;
   396 000006D1 488D15240A0000      <1>     lea rdx, strtmsg
   397 000006D8 B409                <1>     mov ah, 09h
   398 000006DA CD41                <1>     int 41h    
   399                              <1> ;------------------------------------------------;
   400                              <1> ;               Load CONFIG.SYS                  ;
   401                              <1> ;------------------------------------------------;
   402                              <1> ;Setup stackframe, workout base 
   403                              <1> setupFrame:
   404 000006DC 55                  <1>     push rbp
   405 000006DD 4889E5              <1>     mov rbp, rsp
   406 000006E0 4881EC68000000      <1>     sub rsp, cfgFrame_size
   407 000006E7 0FB605900E0000      <1>     movzx eax, byte [BUFFERS]
   408 000006EE 488945F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rax
   409 000006F2 0FB605840E0000      <1>     movzx eax, byte [FILES]
   410 000006F9 488945F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rax
   411 000006FD 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   412 00000705 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   413 0000070D 0FB6056C0E0000      <1>     movzx eax, byte [LASTDRIVE]
   414 00000714 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
   415                              <1> 
   416 00000718 0FB615600E0000      <1>     movzx edx, byte [DFLTDRIVE]    ;Get the default drive
   417 0000071F B40E                <1>     mov ah, 0Eh ;Select drive
   418 00000721 CD41                <1>     int 41h
   419 00000723 488D15190A0000      <1>     lea rdx, cfgspec    ;CONFIG.SYS, must be on bootdrive for now
   420 0000072A B43D                <1>     mov ah, 3Dh ;Open file for reading
   421 0000072C B000                <1>     mov al, ReadAccess
   422 0000072E CD41                <1>     int 41h
   423 00000730 0F8259070000        <1>     jc noCfg  ;If no CONFIG.SYS found, just use defaults that are already setup
   424                              <1> ;------------------------------------------------;
   425                              <1> ;              Process CONFIG.SYS                ;
   426                              <1> ;------------------------------------------------;
   427                              <1> ;Create a stack frame with the following order.
   428                              <1> ;Values greater than max are set to max. Values less than min are set to min.
   429                              <1> ; New Buffers value.        Default = 30, Min = 1, Max = 99
   430                              <1> ; New SFT value.            Default = 20, Min = 8, Max = 254
   431                              <1> ; New FCBS value.           Default = 4,  Min = 4, Max = 254
   432                              <1> ; New protected FCBS value. Default = 0,  Min = 0, Max = New FCBS value
   433                              <1> ; New CDS value.            Default = 5,  Min = 5, Max = 26
   434                              <1> ;
   435                              <1> ;Remember to maintain the base of occupied memory on stack (endPtr)
   436                              <1> ;-------------------------------------------------------------------------;
   437                              <1> ; CONFIG.SYS processing pseudocode:-
   438                              <1> ;
   439                              <1> ; _START:
   440                              <1> ; Read file one byte at a time a until a EOF or CR encountered.
   441                              <1> ; If (EOF encountered)
   442                              <1> ;   Insert a terminating ^Z to the end of the line. 
   443                              <1> ;   Close handle.
   444                              <1> ; Parse the line from beginning looking for a DOS terminating char.
   445                              <1> ;   If (CR or EOF encoutered before terminating char)
   446                              <1> ;       Bad line error msg. 
   447                              <1> ;       If (CR encountered)
   448                              <1> ;           Goto _START
   449                              <1> ;       Else
   450                              <1> ;           Goto _EXIT
   451                              <1> ;   Else 
   452                              <1> ;       If (Keyword AND not DEVICE) 
   453                              <1> ;           Store it's value on stack or change internal variable value
   454                              <1> ;       If (DEVICE)
   455                              <1> ;           Move endPtr after end of line and try load the driver.
   456                              <1> ;           If (driver doesn't exist or fails to init)
   457                              <1> ;               print bad driver error msg.
   458                              <1> ;       Else 
   459                              <1> ;           Bad line error msg
   460                              <1> ;       If (line terminated by CR)
   461                              <1> ;           Goto _START
   462                              <1> ; _EXIT:
   463                              <1> ;-------------------------------------------------------------------------;
   464                              <1> ; Note:
   465                              <1> ; If driver a Block Device Driver, build all the DPB's for it (up until max)
   466                              <1> ;   directly after the driver pointer as returned by the driver. Then, 
   467                              <1> ;   adjust the memory pointer and start loading next line.
   468                              <1> ; Once EOF has been reached, we jmp to noCfg which configures the other
   469                              <1> ;   data structures according to the values on the stack frame.
   470                              <1> ;-------------------------------------------------------------------------;
   471                              <1> ;Start CONFIG.SYS parsing here
   472                              <1> configParse:
   473 00000736 488945C0            <1>     mov qword [rbp - cfgFrame.cfgHandle], rax
   474 0000073A 48C745B800000000    <1>     mov qword [rbp - cfgFrame.lastLine], 0
   475 00000742 48C745B0FFFFFFFF    <1>     mov qword [rbp - cfgFrame.linePtr], -1   ;Default buffer
   476 0000074A B800480000          <1>     mov eax, 4800h
   477 0000074F BB10000000          <1>     mov ebx, 10h    ;Request 16 paragraphs (256 bytes)
   478 00000754 CD41                <1>     int 41h
   479 00000756 0F8238010000        <1>     jc .stopProcessError
   480 0000075C 488945B0            <1>     mov qword [rbp - cfgFrame.linePtr], rax
   481 00000760 4889C2              <1>     mov rdx, rax    ;Move the pointer to rdx
   482 00000763 482D10000000        <1>     sub rax, mcb_size 
   483 00000769 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set owner to DOS
   484 00000771 31C0                <1>     xor eax, eax
   485                              <1> .nextChar:
   486 00000773 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into ebx
   487 00000777 6681FBFFFF          <1>     cmp bx, -1
   488 0000077C 0F8412010000        <1>     je .stopProcessError
   489 00000782 B8003F0000          <1>     mov eax, 3F00h  ;Read handle
   490 00000787 B901000000          <1>     mov ecx, 1  ;Read one byte
   491 0000078C CD41                <1>     int 41h
   492 0000078E 0F8200010000        <1>     jc .stopProcessError
   493 00000794 85C0                <1>     test eax, eax	;If this is zero, EOF reached
   494 00000796 0F84DD060000        <1>     jz .cfgExit
   495                              <1> .notEOF:
   496 0000079C 0FB602              <1>     movzx eax, byte [rdx]
   497 0000079F 3C0D                <1>     cmp al, CR
   498 000007A1 7420                <1>     je short .endOfLine
   499 000007A3 3C0A                <1>     cmp al, LF
   500 000007A5 741C                <1>     je short .endOfLine
   501 000007A7 3C1A                <1>     cmp al, EOF
   502 000007A9 7410                <1>     je short .endOfFileChar
   503 000007AB 50                  <1>     push rax    ;Push rax on stack as the argument to normalise
   504 000007AC B813120000          <1>     mov eax, 1213h  ;Uppercase the char if it is uppercasable
   505 000007B1 CD4F                <1>     int 4fh
   506 000007B3 8802                <1>     mov byte [rdx], al  ;Replace the char with the capitalised form
   507 000007B5 58                  <1>     pop rax ;Pop into rax to renormalise the stack
   508                              <1> .notChar:
   509 000007B6 48FFC2              <1>     inc rdx ;Now move our local pointer to the next byte
   510 000007B9 EBB8                <1>     jmp short .nextChar
   511                              <1> .endOfFileChar:
   512 000007BB 48C745B8FFFFFFFF    <1>     mov qword [rbp - cfgFrame.lastLine], -1	;Mark EOF and End of line
   513                              <1> .endOfLine:
   514                              <1> ;rdx points to terminating char
   515                              <1> ;First find the length of the instruction word
   516 000007C3 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   517 000007C7 31C9                <1>     xor ecx, ecx
   518                              <1> .cmdNameLenGet:
   519 000007C9 AC                  <1>     lodsb
   520 000007CA E8B5000000          <1>     call .isCharTerminal
   521 000007CF 740A                <1>     jz short .endOfCommandFound
   522 000007D1 FFC1                <1>     inc ecx
   523 000007D3 81F90A000000        <1>     cmp ecx, 10 ;If shorter than longest command, keep looping
   524 000007D9 72EE                <1>     jb short .cmdNameLenGet
   525                              <1> ;Else, fall through in error
   526                              <1> .endOfCommandFound:
   527                              <1> ;ecx has the length of the command
   528 000007DB 81F90A000000        <1>     cmp ecx, 10
   529 000007E1 0F84AD000000        <1>     je .stopProcessError
   530 000007E7 488D3D1B010000      <1>     lea rdi, .keyTbl ;Put rdi at the table to search for
   531                              <1> .cmdSearch:
   532 000007EE 803FFF              <1>     cmp byte [rdi], -1
   533 000007F1 0F849D000000        <1>     je .stopProcessError
   534 000007F7 380F                <1>     cmp byte [rdi], cl
   535 000007F9 7579                <1>     jne short .gotoNextCmd
   536                              <1>     ;Candidate command found, check said command is the command we want
   537 000007FB 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   538 000007FF 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Error?
   539 00000806 0F8488000000        <1>     je .stopProcessError
   540 0000080C 57                  <1>     push rdi
   541 0000080D 51                  <1>     push rcx
   542 0000080E 48FFC7              <1>     inc rdi ;Go to next char
   543 00000811 F3A6                <1>     repe cmpsb  ;Compare whilst the strings are equal
   544 00000813 59                  <1>     pop rcx
   545 00000814 5F                  <1>     pop rdi
   546 00000815 755D                <1>     jne short .gotoNextCmd    ;If not equal, just goto next command
   547                              <1>     ;Else, rdi points to the table entry from the head of the table
   548                              <1>     ;      rcx has the length of the name field
   549                              <1>     ;rdx points to the terminating char of the line 
   550 00000817 488D35EB000000      <1>     lea rsi, .keyTbl
   551 0000081E 4889F0              <1>     mov rax, rsi    ;Keep a copy in rax
   552 00000821 480FB7740F01        <1>     movzx rsi, word [rdi + rcx + 1]
   553 00000827 4801C6              <1>     add rsi, rax    ;So add the EA of the head of the tbl before calling
   554 0000082A F8                  <1>     clc ;Ensure flags are happy before entering
   555 0000082B 55                  <1>     push rbp
   556 0000082C FFD6                <1>     call rsi    ;Call this function
   557 0000082E 5D                  <1>     pop rbp
   558 0000082F 7263                <1>     jc .stopProcessError    ;If the function returns CF=CY, error exit
   559 00000831 48F745B8FFFFFFFF    <1>     test qword [rbp - cfgFrame.lastLine], -1 ;If we concluded at EOF, exit
   560 00000839 0F853A060000        <1>     jnz .cfgExit
   561 0000083F 488B55B0            <1>     mov rdx, qword [rbp - cfgFrame.linePtr] ;Start reading afresh
   562                              <1>     ;Read the next char. 
   563                              <1>     ;If EOF, exit.
   564                              <1>     ;Else if, LF, proceed to read line routine.
   565                              <1>     ;Else, advance ptr by one and proceed to process char
   566                              <1> .endCommandClear:
   567 00000843 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into rbx
   568 00000847 B8003F0000          <1>     mov eax, 3F00h  ;Read handle
   569 0000084C B901000000          <1>     mov ecx, 1  ;Read one byte to clear the LF from the file
   570 00000851 CD41                <1>     int 41h
   571 00000853 723F                <1>     jc .stopProcessError
   572 00000855 85C0                <1>     test eax, eax   ;If no chars were read, exit!
   573 00000857 0F841C060000        <1>     jz .cfgExit
   574                              <1>     ;Do a trash check
   575 0000085D 8A02                <1>     mov al, byte [rdx]
   576 0000085F 3C1A                <1>     cmp al, EOF
   577 00000861 0F8412060000        <1>     je .cfgExit
   578 00000867 3C0A                <1>     cmp al, LF
   579 00000869 0F8404FFFFFF        <1>     je .nextChar
   580 0000086F E928FFFFFF          <1>     jmp .notEOF
   581                              <1> ;CONFIG.SYS utility functions
   582                              <1> .gotoNextCmd:
   583 00000874 0FB607              <1>     movzx eax, byte [rdi]
   584 00000877 0503000000          <1>     add eax, 3
   585 0000087C 4801C7              <1>     add rdi, rax
   586 0000087F E96AFFFFFF          <1>     jmp .cmdSearch
   587                              <1> .isCharTerminal:
   588                              <1> ;Input: AL = Char to check
   589                              <1> ;Output: ZF=ZE -> Char terminal
   590                              <1> ;        ZF=NZ -> Char not terminal
   591 00000884 3C3D                <1>     cmp al, "="
   592                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000886 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000888 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   593 00000889 3C20                <1>     cmp al, SPC
   594                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000088B 74(88)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   595 0000088D 3C09                <1>     cmp al, TAB
   596                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000088F 74(88)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   597 00000891 3C3B                <1>     cmp al, ";"
   598                              <1>     return
    13                              <2> %%_ret:
    14 00000893 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   599                              <1> .stopProcessError:
   600 00000894 E836000000          <1>     call .badLineErrorMsg
   601                              <1>     ;Reset all values to OEM defaults
   602 00000899 0FB605DE0C0000      <1>     movzx eax, byte [BUFFERS]
   603 000008A0 488945F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rax
   604 000008A4 0FB605D20C0000      <1>     movzx eax, byte [FILES]
   605 000008AB 488945F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rax
   606 000008AF 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   607 000008B7 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   608 000008BF 0FB605BA0C0000      <1>     movzx eax, byte [LASTDRIVE]
   609 000008C6 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
   610 000008CA E9AA050000          <1>     jmp .cfgExit
   611                              <1>     
   612                              <1> .badLineErrorMsg:
   613                              <1> ;Prints an error message BUT DOES NOT TERMINATE PARSING
   614 000008CF 50                  <1>     push rax
   615 000008D0 52                  <1>     push rdx
   616 000008D1 488D150A000000      <1>     lea rdx, .speLine
   617 000008D8 B800090000          <1>     mov eax, 0900h
   618 000008DD CD41                <1>     int 41h
   619 000008DF 5A                  <1>     pop rdx
   620 000008E0 58                  <1>     pop rax
   621                              <1>     return
    13                              <2> %%_ret:
    14 000008E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   622 000008E2 0D0A556E7265636F67- <1> .speLine:   db CR,LF,"Unrecognised command in CONFIG.SYS",CR,LF,"$"
   622 000008EB 6E6973656420636F6D- <1>
   622 000008F4 6D616E6420696E2043- <1>
   622 000008FD 4F4E4649472E535953- <1>
   622 00000906 0D0A24              <1>
   623                              <1> .keyTbl: 
   624 00000909 05425245414B        <1>     db 5, "BREAK"           ;DONE
   625 0000090F 7800                <1> 	dw .breakHandler - .keyTbl
   626 00000911 0742554646455253    <1>     db 7, "BUFFERS"         ;DONE
   627 00000919 AE00                <1> 	dw .bufHandler - .keyTbl
   628 0000091B 07434F554E545259    <1> 	db 7, "COUNTRY"         ;Ignored for now
   629 00000923 6F05                <1> 	dw .countryScan - .keyTbl
   630 00000925 06444556494345      <1> 	db 6, "DEVICE"          ;DONE
   631 0000092C 2B01                <1> 	dw .drvLoader - .keyTbl
   632 0000092E 0446434253          <1> 	db 4, "FCBS"            ;Ignored for now
   633 00000933 6F05                <1> 	dw .fcbHandler - .keyTbl
   634 00000935 0546494C4553        <1> 	db 5, "FILES"           ;DONE
   635 0000093B 6804                <1> 	dw .sftHandler - .keyTbl
   636 0000093D 094C41535444524956- <1> 	db 9, "LASTDRIVE"       ;DONE
   636 00000946 45                  <1>
   637 00000947 1D05                <1> 	dw .lastdriveHandler - .keyTbl
   638 00000949 055348454C4C        <1> 	db 5, "SHELL"           ;Ignored for now
   639 0000094F 6F05                <1> 	dw .shellHandler - .keyTbl
   640 00000951 06535441434B53      <1> 	db 6, "STACKS"          ;Ignored for now
   641 00000958 6F05                <1> 	dw .stacksHandler - .keyTbl
   642 0000095A 08445249565041524D  <1>     db 8, "DRIVPARM"
   643 00000963 6F05                <1>     dw .drivParm - .keyTbl  ;Ignored for now
   644 00000965 FF                  <1> 	db -1	;End of table marker
   645                              <1> .cfgSkipLeadingSpaces:
   646                              <1> ;Input: rsi -> Start of string to skip spaces of
   647                              <1> ;Output: rsi -> First non-space char in string
   648 00000966 50                  <1>     push rax
   649 00000967 51                  <1>     push rcx
   650 00000968 57                  <1>     push rdi
   651 00000969 4889F7              <1>     mov rdi, rsi
   652 0000096C B820000000          <1>     mov eax, SPC
   653 00000971 31C9                <1>     xor ecx, ecx
   654 00000973 FFC9                <1>     dec ecx
   655 00000975 F3AE                <1>     repe scasb  ;
   656 00000977 4889FE              <1>     mov rsi, rdi
   657 0000097A 5F                  <1>     pop rdi
   658 0000097B 59                  <1>     pop rcx
   659 0000097C 58                  <1>     pop rax
   660 0000097D 48FFCE              <1>     dec rsi
   661                              <1>     return
    13                              <2> %%_ret:
    14 00000980 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   662                              <1> 
   663                              <1> .breakHandler:
   664 00000981 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   665 00000985 4881C606000000      <1>     add rsi, 6  ;Go past BREAK=
   666                              <1>     ;This must be the word ON or OFF 
   667 0000098C E8D5FFFFFF          <1>     call .cfgSkipLeadingSpaces
   668 00000991 31D2                <1>     xor edx, edx    ;Clear CF and default to OFF
   669 00000993 66813E4F4E          <1>     cmp word [rsi], "ON"
   670 00000998 7413                <1>     je .breakOn
   671 0000099A 66813E4F46          <1>     cmp word [rsi], "OF"
   672 0000099F 7506                <1>     jne .breakBad
   673 000009A1 807E0246            <1>     cmp byte [rsi + 2], "F"
   674 000009A5 7408                <1>     je .breakCommon
   675                              <1> .breakBad:
   676 000009A7 E823FFFFFF          <1>     call .badLineErrorMsg
   677                              <1>     return
    13                              <2> %%_ret:
    14 000009AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   678                              <1> .breakOn:
   679 000009AD FFC2                <1>     inc edx ;Go from OFF to ON  (keeps CF=NC)
   680                              <1> .breakCommon:
   681 000009AF B801330000          <1>     mov eax, 3301h  ;Set break to value in dl
   682 000009B4 CD41                <1>     int 41h
   683                              <1>     return
    13                              <2> %%_ret:
    14 000009B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   684                              <1> 
   685                              <1> .bufHandler:
   686 000009B7 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   687 000009BB 4881C608000000      <1>     add rsi, 8  ;Go past BUFFERS=
   688                              <1>     ;This must be at most three digits, anything else is a failure
   689 000009C2 E89FFFFFFF          <1>     call .cfgSkipLeadingSpaces
   690 000009C7 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
   691 000009CA 31C9                <1>     xor ecx, ecx
   692 000009CC AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
   693 000009CD 3C30                <1>     cmp al, "0"
   694 000009CF 724C                <1>     jb .bufHandlerErr
   695 000009D1 3C39                <1>     cmp al, "9"
   696 000009D3 7748                <1>     ja .bufHandlerErr
   697 000009D5 FFC1                <1>     inc ecx ;Increment char counter
   698 000009D7 AC                  <1>     lodsb   ;Get second char
   699 000009D8 E846000000          <1>     call .bufHandlerTermCheck
   700 000009DD 7410                <1>     je .bufHandlerProcess   ;If it is a terminating char, exit
   701 000009DF 3C30                <1>     cmp al, "0"
   702 000009E1 723A                <1>     jb .bufHandlerErr
   703 000009E3 3C39                <1>     cmp al, "9"
   704 000009E5 7736                <1>     ja .bufHandlerErr
   705 000009E7 AC                  <1>     lodsb   ;Check no more chars!
   706 000009E8 E836000000          <1>     call .bufHandlerTermCheck
   707 000009ED 752E                <1>     jne .bufHandlerErr
   708                              <1> .bufHandlerProcess:
   709 000009EF 31D2                <1>     xor edx, edx    ;Accumulate value in edx
   710 000009F1 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
   711                              <1> .bufHandlerLp:
   712 000009F4 AC                  <1>     lodsb   ;Get the digit
   713 000009F5 E819000000          <1>     call .bufHandlerMul
   714 000009FA 67E304              <1>     jecxz .bufHandlerPrepExit
   715 000009FD FFC9                <1>     dec ecx
   716 000009FF EBF3                <1>     jmp short .bufHandlerLp 
   717                              <1> .bufHandlerPrepExit:
   718                              <1> ;edx has the value now, so place it in stack
   719 00000A01 0FB60D760B0000      <1>     movzx ecx, byte [BUFFERS]
   720 00000A08 85D2                <1>     test edx, edx
   721 00000A0A 0F44D1              <1>     cmovz edx, ecx  ;Replace zero with default if the user specified 0 buffers
   722 00000A0D 488955F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rdx
   723 00000A11 F8                  <1>     clc
   724                              <1>     return
    13                              <2> %%_ret:
    14 00000A12 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   725                              <1> .bufHandlerMul:
   726 00000A13 2C30                <1>     sub al, "0" ;Convert to a binary value
   727 00000A15 F6E1                <1>     mul cl  ;Multiply al by cl, answer in ax
   728 00000A17 0FB7C0              <1>     movzx eax, ax
   729 00000A1A 01C2                <1>     add edx, eax
   730                              <1>     return
    13                              <2> %%_ret:
    14 00000A1C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   731                              <1> .bufHandlerErr:
   732 00000A1D E8ADFEFFFF          <1>     call .badLineErrorMsg
   733                              <1>     return
    13                              <2> %%_ret:
    14 00000A22 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   734                              <1> .bufHandlerTermCheck:
   735 00000A23 3C20                <1>     cmp al, SPC
   736                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000A25 74(22)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   737 00000A27 3C09                <1>     cmp al, TAB
   738                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000A29 74(22)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   739 00000A2B 3C0D                <1>     cmp al, CR
   740                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000A2D 74(22)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   741 00000A2F 3C0A                <1>     cmp al, LF
   742                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000A31 74(22)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   743                              <1>     return
    13                              <2> %%_ret:
    14 00000A33 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   744                              <1> 
   745                              <1> ;===============================
   746                              <1> ;   Device Driver Loader here  :
   747                              <1> ;===============================
   748                              <1> .drvLoader:
   749                              <1> ;    mov rsi, rdx    ;Save the ptr to past the end of the line in rsi
   750 00000A34 488B7DB0            <1>     mov rdi, qword [rbp - cfgFrame.linePtr]
   751 00000A38 4881C707000000      <1>     add rdi, 7  ;Go past DEVICE= to the pathname
   752 00000A3F 4889FA              <1>     mov rdx, rdi    ;Prepare rdx for the open
   753 00000A42 B820000000          <1>     mov eax, SPC
   754 00000A47 51                  <1>     push rcx
   755 00000A48 31C9                <1>     xor ecx, ecx
   756 00000A4A FFC9                <1>     dec ecx
   757 00000A4C F3AE                <1>     repe scasb      ;Skip leading spaces for name (between = and first char)
   758 00000A4E 59                  <1>     pop rcx
   759                              <1> ;Now search for the first char after pathname. 
   760 00000A4F 4889FE              <1>     mov rsi, rdi
   761                              <1> .drvFindEndOfFileName:
   762 00000A52 AC                  <1>     lodsb ;Get char from string name
   763                              <1>     ;Was the char a primitive string terminator?
   764 00000A53 3C20                <1>     cmp al, SPC
   765 00000A55 740C                <1>     je short .fileNameFound
   766 00000A57 3C1A                <1>     cmp al, EOF
   767 00000A59 7408                <1>     je short .fileNameFound
   768 00000A5B 3C0D                <1>     cmp al, CR
   769 00000A5D 7404                <1>     je short .fileNameFound
   770 00000A5F 3C0A                <1>     cmp al, LF
   771 00000A61 75EF                <1>     jne short .drvFindEndOfFileName
   772                              <1> .fileNameFound:
   773 00000A63 48FFCE              <1>     dec rsi ;Point rdi to the space itself
   774 00000A66 488975A8            <1>     mov qword [rbp - cfgFrame.driverBreak], rsi
   775 00000A6A 0FB606              <1>     movzx eax, byte [rsi]   ;Get the original breakchar
   776 00000A6D 488945A0            <1>     mov qword [rbp - cfgFrame.breakChar], rax  ;And save it
   777 00000A71 C60600              <1>     mov byte [rsi], 0   ;Null terminate the path to the file
   778                              <1>     ;rdx -> Filename
   779                              <1>     ;Here open the file to attempt to see how much space to 
   780                              <1>     ; allocate to the file for loading. 
   781                              <1>     ;Consider using the 4B01h loading mode instead and swapping back
   782                              <1>     ; the current DTA and PSP to DOS default? This gives each driver a PSP
   783                              <1>     ; which would allow for opening of files independently of calling programs'
   784                              <1>     ; file table... maybe try it after getting 4B03h load to work first!
   785 00000A74 B8003D0000          <1>     mov eax, 3D00h  ;Read only file
   786 00000A79 CD41                <1>     int 41h
   787 00000A7B 0F82B4020000        <1>     jc .drvBad
   788 00000A81 0FB7D8              <1>     movzx ebx, ax   ;Get the handle in ebx
   789 00000A84 31D2                <1>     xor edx, edx    ;Move the handle to the end of the file
   790 00000A86 B802420000          <1>     mov eax, 4202h  ;LSEEK to SEEK_END
   791 00000A8B CD41                <1>     int 41h
   792 00000A8D 89C6                <1>     mov esi, eax    ;Save the file size in esi
   793 00000A8F 31D2                <1>     xor edx, edx    ;Move the handle to the start of the file
   794 00000A91 B800420000          <1>     mov eax, 4200h  ;LSEEK to SEEK_SET (start of the file)
   795 00000A96 CD41                <1>     int 41h
   796 00000A98 53                  <1>     push rbx        ;Push the file handle on the stack
   797 00000A99 BB06000000          <1>     mov ebx, 6      ;6 paragraphs (96 bytes)
   798 00000A9E B800480000          <1>     mov eax, 4800h  ;Allocate this block of memory
   799 00000AA3 CD41                <1>     int 41h
   800 00000AA5 5B                  <1>     pop rbx         ;Get the handle back in rbx
   801 00000AA6 0F8299020000        <1>     jc .drvMemClose
   802 00000AAC 4889C2              <1>     mov rdx, rax    ;Get pointer to memory in rdx
   803 00000AAF B940000000          <1>     mov ecx, imageDosHdr_size
   804 00000AB4 B8003F0000          <1>     mov eax, 3F00h  ;READ
   805 00000AB9 CD41                <1>     int 41h
   806 00000ABB 4989D0              <1>     mov r8, rdx     ;Store the pointer to the memory block in r8 if need to free
   807 00000ABE 4889D7              <1>     mov rdi, rdx    ;Get pointer to the EXE header
   808 00000AC1 730C                <1>     jnc short .headerReadOK
   809                              <1> .drvFreeMemAndHdl: ;Frees the block and then handle
   810                              <1>     ;r8 must point to the block to free
   811 00000AC3 B800490000          <1>     mov eax, 4900h  ;Free the block first!
   812 00000AC8 CD41                <1>     int 41h
   813 00000ACA E95F020000          <1>     jmp .drvBadClose
   814                              <1> .headerReadOK:
   815                              <1> ;Use register r10 as the indicator for .COM or .EXE. Set if COM.
   816 00000ACF 4889D7              <1>     mov rdi, rdx    ;Save the pointer in rdi
   817                              <1>     ;First check this file is MZ/ZM. If this is not, we assume its a .COM driver
   818 00000AD2 66813F4D5A          <1>     cmp word [rdi], dosMagicSignature
   819 00000AD7 7430                <1>     je short .exeDrivers
   820 00000AD9 66813F5A4D          <1>     cmp word [rdi], dosMagicSignature2
   821 00000ADE 7429                <1>     je short .exeDrivers
   822                              <1> ;.COM drivers come down here
   823                              <1>     ;Get File Image Allocation Size in ecx here.
   824                              <1>     ;Must be leq than 64Kb, rounded to nearest paragraph if .COM
   825 00000AE0 31C9                <1>     xor ecx, ecx
   826 00000AE2 31D2                <1>     xor edx, edx
   827 00000AE4 B802420000          <1>     mov eax, 4202h  ;LSEEK from the end of the file
   828 00000AE9 CD41                <1>     int 41h
   829                              <1>     ;eax now has the filesize. 
   830 00000AEB 89C1                <1>     mov ecx, eax
   831 00000AED 81E1F0FFFFFF        <1>     and ecx, ~0Fh   ;Clear lower byte
   832 00000AF3 81C101000000        <1>     add ecx, 1h     ;... and round up!
   833 00000AF9 C1E904              <1>     shr ecx, 4      ;Convert to paragraphs
   834 00000AFC 81F900000100        <1>     cmp ecx, 10000h ;Is it greater than 64k?
   835 00000B02 73BF                <1>     jae .drvFreeMemAndHdl
   836 00000B04 E97C000000          <1>     jmp .loadCont
   837                              <1> .exeDrivers:
   838                              <1>     ;Get the file pointer for file header
   839 00000B09 8B573C              <1>     mov edx, dword [rdi + imageDosHdr.e_lfanew] ;Get this file offset
   840 00000B0C 31C9                <1>     xor ecx, ecx
   841 00000B0E B800420000          <1>     mov eax, 4200h  ;LSEEK from the start of the file
   842 00000B13 CD41                <1>     int 41h
   843                              <1>     ;Now read in imageFileHeader here
   844 00000B15 4889FA              <1>     mov rdx, rdi    ;Overwrite the 16-bit header
   845 00000B18 B918000000          <1>     mov ecx, imageFileHeader_size   ;Read the header
   846 00000B1D B8003F0000          <1>     mov eax, 3F00h  ;READ
   847 00000B22 CD41                <1>     int 41h
   848 00000B24 729D                <1>     jc short .drvFreeMemAndHdl
   849 00000B26 3D18000000          <1>     cmp eax, imageFileHeader_size   ;If fewer bytes were read, fail
   850 00000B2B 7296                <1>     jb short .drvFreeMemAndHdl
   851 00000B2D 813F50450000        <1>     cmp dword [rdi + imageFileHeader.dPESignature], imagePESignature
   852 00000B33 758E                <1>     jne .drvFreeMemAndHdl
   853 00000B35 66817F046486        <1>     cmp word [rdi + imageFileHeader.wMachineType], imageFileMachineAMD64
   854 00000B3B 7586                <1>     jne .drvFreeMemAndHdl
   855 00000B3D 66817F143C00        <1>     cmp word [rdi + imageFileHeader.wSizeOfOptionalHdr], 60
   856 00000B43 0F827AFFFFFF        <1>     jb .drvFreeMemAndHdl ;We need section alignment info if a .EXE!
   857                              <1>     ;Now read the first 60 bytes of the optional header here. rdx points to buffer
   858 00000B49 B93C000000          <1>     mov ecx, 60     ;Read only 60 bytes
   859 00000B4E B8003F0000          <1>     mov eax, 3F00h  ;READ
   860 00000B53 CD41                <1>     int 41h
   861 00000B55 0F8268FFFFFF        <1>     jc .drvFreeMemAndHdl   ;If something goes wrong, skip
   862 00000B5B 3D38000000          <1>     cmp eax, 56
   863 00000B60 0F825DFFFFFF        <1>     jb .drvFreeMemAndHdl   ;If fewer than 60 bytes read, skip
   864                              <1>     ;Round up size requirement.
   865                              <1>     ;If .EXE, round up to nearest section alignment
   866 00000B66 8B4F38              <1>     mov ecx, dword [rdi + imageFileOptionalHeader.dSizeOfImage] ;Get mem alloc size
   867 00000B69 8B4720              <1>     mov eax, dword [rdi + imageFileOptionalHeader.dSectionAlignment]
   868 00000B6C 89C6                <1>     mov esi, eax    ;Save in esi the alignment requirement
   869 00000B6E FFC8                <1>     dec eax         ;Set bits to strip, clear all other bits
   870 00000B70 F7D0                <1>     not eax         ;Flip the set and clear bits
   871 00000B72 21C1                <1>     and ecx, eax    ;Now clear the bits to clear from size, aligning downwards
   872 00000B74 01F1                <1>     add ecx, esi    ;Now round upwards!
   873 00000B76 C1E904              <1>     shr ecx, 4      ;Convert to number of paragraphs.
   874 00000B79 81F900000020        <1>     cmp ecx, 20000000h  ;Drivers cannot be more than 2Gb in size.
   875 00000B7F 0F833EFFFFFF        <1>     jae .drvFreeMemAndHdl
   876                              <1> .loadCont:
   877 00000B85 B800490000          <1>     mov eax, 4900h  ;FREE -> Free the 6 paragraph header buffer.
   878 00000B8A CD41                <1>     int 41h ;r8 has the pointer to the block for freeing
   879                              <1>     ;Now close the file
   880 00000B8C B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
   881 00000B91 CD41                <1>     int 41h
   882 00000B93 89CB                <1>     mov ebx, ecx    ;Put the number of paragraphs in ebx
   883 00000B95 B800480000          <1>     mov eax, 4800h  ;Allocate this block of memory
   884 00000B9A CD41                <1>     int 41h         ;rax gets the pointer to load the program into
   885 00000B9C 0F82A3010000        <1>     jc .drvMemClose
   886                              <1>     ;Now set the subsystem marker and the owner to DOS
   887 00000BA2 C640FD44            <1>     mov byte [rax - mcb_size + mcb.subSysMark], mcbSubDriver  ;Mark as occupied by driver
   888 00000BA6 48C740F109000000    <1>     mov qword [rax - mcb_size + mcb.owner], mcbOwnerNewDOS
   889                              <1>     ;Build the overlay command block
   890 00000BAE 488D1DA8050000      <1>     lea rbx, cmdBlock
   891 00000BB5 488903              <1>     mov qword [rbx + loadOvly.pLoadLoc], rax
   892 00000BB8 48894308            <1>     mov qword [rbx + loadOvly.qRelocFct], rax
   893 00000BBC 488B55B0            <1>     mov rdx, qword [rbp - cfgFrame.linePtr] ;Get the pointer to the 
   894 00000BC0 4881C207000000      <1>     add rdx, 7  ;Go past DEVICE= to the null terminated pathname
   895 00000BC7 B8034B0000          <1>     mov eax, 4B03h  ;Load overlay!
   896 00000BCC CD41                <1>     int 41h
   897 00000BCE 733E                <1>     jnc short .loadOk   ;Driver loaded and unpacked. Now we get going...
   898                              <1> .badDriverLoad:
   899 00000BD0 4C8B0586050000      <1>     mov r8, qword [cmdBlock + loadOvly.pLoadLoc] ;Get the address of this 
   900 00000BD7 B800490000          <1>     mov eax, 4900h  ;FREE -> Free the space where the program shouldve gone
   901 00000BDC CD41                <1>     int 41h
   902 00000BDE 488D1508000000      <1>     lea rdx, .drvMemMsg
   903 00000BE5 B800090000          <1>     mov eax, 0900h
   904 00000BEA CD41                <1>     int 41h
   905                              <1>     return
    13                              <2> %%_ret:
    14 00000BEC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   906 00000BED 0D0A4E6F7420656E6F- <1> .drvMemMsg: db CR,LF,"Not enough memory for driver",CR,LF,"$" 
   906 00000BF6 756768206D656D6F72- <1>
   906 00000BFF 7920666F7220647269- <1>
   906 00000C08 7665720D0A24        <1>
   907                              <1> .loadOk:
   908                              <1>     ;Use driver load routines. Get the first byte of the MCB (where prog is loaded).
   909 00000C0E 488B33              <1>     mov rsi, qword [rbx + loadOvly.pLoadLoc]
   910 00000C11 4989F0              <1>     mov r8, rsi  ;Get the pointer to the MCB arena in r8 for later!
   911                              <1>     ;Reset the command line to have a space at the null terminator
   912 00000C14 488B45A8            <1>     mov rax, qword [rbp - cfgFrame.driverBreak]
   913 00000C18 53                  <1>     push rbx
   914 00000C19 8A5DA0              <1>     mov bl, byte [rbp - cfgFrame.breakChar] ;Get the original breakchar
   915 00000C1C 8818                <1>     mov byte [rax], bl  ;and replace the null terminator
   916 00000C1E 5B                  <1>     pop rbx
   917                              <1>     ;Remember, the first byte of the overlay is the driver header. 
   918                              <1>     ;Hence, rsi points to that byte!
   919                              <1>     ;Pointers of each header need adjustment relative to their load address,
   920                              <1>     ; and linking into the main driver chain after NUL.
   921                              <1>     ;r11 = Local var, if no drivers in file passed init, free allocation.
   922                              <1>     ;                 Else, free using kernel eject routine.
   923 00000C1F 56                  <1>     push rsi    ;Save the pointer to the first pointer to adjust
   924                              <1> .driverPtrAdjustment:
   925 00000C20 4801760A            <1>     add qword [rsi + drvHdr.strPtr], rsi
   926 00000C24 48017612            <1>     add qword [rsi + drvHdr.intPtr], rsi
   927 00000C28 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1
   928 00000C2F 7408                <1>     je short .driverPtrAdjustmentDone
   929 00000C31 480136              <1>     add qword [rsi + drvHdr.nxtPtr], rsi
   930 00000C34 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]
   931 00000C37 EBE7                <1>     jmp short .driverPtrAdjustment
   932                              <1> .driverPtrAdjustmentDone:
   933 00000C39 5E                  <1>     pop rsi     ;Get back the pointer to the first driver header
   934                              <1>     ;Prepare for initialising the drivers in the arena
   935                              <1>     ;EXPERIMENT: USING R9-R11 UNTIL THE END OF THE FUNCTION
   936 00000C3A 4989F1              <1>     mov r9, rsi     ;Save a copy of the driver pointer in r9
   937 00000C3D 49BB09000000000000- <1>     mov r11, mcbOwnerNewDOS ;Set currentPSP for new dos object
   937 00000C46 00                  <1>
   938 00000C47 644C871C25-         <1>     xchg r11, qword fs:[currentPSP] ;Save in r11 old owner
   938 00000C4C [13040000]          <1>
   939 00000C50 488D1D33090000      <1>     lea rbx, initDrvBlk
   940 00000C57 488B45B0            <1>     mov rax, qword [rbp - cfgFrame.linePtr] ;Get the line pointer
   941 00000C5B 48894316            <1>     mov qword [rbx + initReqPkt.optptr], rax ;and pass to driver!
   942 00000C5F 4C8B6500            <1>     mov r12, qword [rbp - cfgFrame.oldRBP]  ;Get DOSSEG in r12
   943                              <1> .driverInit:
   944 00000C63 4C87E5              <1>     xchg r12, rbp
   945 00000C66 E8F7070000          <1>     call initDriver
   946 00000C6B 725E                <1>     jc short .driverBadRbpAdjust
   947 00000C6D E8BA060000          <1>     call addDriverMarkers
   948 00000C72 4C87E5              <1>     xchg r12, rbp
   949 00000C75 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   950 00000C7B 7507                <1>     jnz short .driverInitialised
   951 00000C7D E84E080000          <1>     call buildDPBs          ;Preserves rbp, rsi and rbx
   952 00000C82 724A                <1>     jc short .driverBad
   953                              <1> .driverInitialised:
   954 00000C84 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1     ;We at the end of the chain?
   955 00000C8B 480F4536            <1>     cmovne rsi, qword [rsi + drvHdr.nxtPtr]    ;Walk rsi if not
   956 00000C8F 75D2                <1>     jne short .driverInit ;If not, goto next driver
   957                              <1> ;Now we eject the init routines for the driver
   958                              <1> ;r8 points to the MCB data area already
   959 00000C91 31DB                <1>     xor ebx, ebx
   960 00000C93 418B58F9            <1>     mov ebx, dword [r8 - mcb_size + mcb.blockSize] ;Get the size of the arena in paragraphs
   961 00000C97 48C1E304            <1>     shl rbx, 4  ;Turn into number of bytes
   962 00000C9B 4981E810000000      <1>     sub r8, mcb_size    ;Point to the mcb header proper
   963 00000CA2 498D5C1810          <1>     lea rbx, qword [r8 + rbx + mcb.program] ;Get pointer to the end of the arena
   964 00000CA7 E865070000          <1>     call ejectKernelInit    ;Ignore any errors in ejection.
   965                              <1>     ;Link into main driver chain, 
   966                              <1>     ;r9 points to first driver in block
   967                              <1>     ;rsi points to last driver in block
   968 00000CAC 488B7D00            <1>     mov rdi, qword [rbp - cfgFrame.oldRBP]  ;Get DOSSEG ptr
   969 00000CB0 488DBF[6E000000]    <1>     lea rdi, qword [rdi + nulDevHdr] ;Get ptr to first driver
   970 00000CB7 488B07              <1>     mov rax, qword [rdi + drvHdr.nxtPtr]    ;Get the link
   971 00000CBA 4C890F              <1>     mov qword [rdi + drvHdr.nxtPtr], r9     ;Link new drivers in
   972 00000CBD 488906              <1>     mov qword [rsi + drvHdr.nxtPtr], rax    ;Link end to old chain
   973                              <1> .driverExit:
   974                              <1> ;Exit the init routine if it all works out, WOO!
   975                              <1> ;Return values to original registers/memory locations
   976 00000CC0 644C891C25-         <1>     mov qword fs:[currentPSP], r11
   976 00000CC5 [13040000]          <1>
   977 00000CC9 F8                  <1>     clc
   978                              <1>     return
    13                              <2> %%_ret:
    14 00000CCA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   979                              <1> .driverBadRbpAdjust:
   980 00000CCB 4C89E5              <1>     mov rbp, r12
   981                              <1> .driverBad:
   982                              <1>     ;Form the string to print
   983 00000CCE 488D3D4E000000      <1>     lea rdi, .driverBad2    ;Store the name here
   984 00000CD5 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar ;Are we a char dev?
   985 00000CDB 750C                <1>     jnz short .driverCharBad    ;If not, exit
   986                              <1>     ;MSD devices need to have something placed in there
   987 00000CDD 48B84D534420646576- <1>     mov rax, "MSD dev "
   987 00000CE6 20                  <1>
   988 00000CE7 48AB                <1>     stosq   ;Store the 8 chars here
   989                              <1> .driverCharBad:
   990 00000CE9 488D761A            <1>     lea rsi, qword [rsi + drvHdr.drvNam]    ;Copy the device driver name over
   991 00000CED 48A5                <1>     movsq   ;Move all 8 chars over from device driver name
   992                              <1> .driverBadPrint:
   993 00000CEF 488D1510000000      <1>     lea rdx, .driverBad1
   994 00000CF6 B800090000          <1>     mov eax, 0900h  ;Print the string!
   995 00000CFB CD41                <1>     int 41h
   996 00000CFD B800490000          <1>     mov eax, 4900h  ;Attempt to deallocate the driver now
   997 00000D02 CD41                <1>     int 41h
   998 00000D04 EBBA                <1>     jmp short .driverExit
   999 00000D06 0D0A4572726F722069- <1> .driverBad1 db CR,LF,"Error initialising driver: "
   999 00000D0F 6E697469616C697369- <1>
   999 00000D18 6E6720647269766572- <1>
   999 00000D21 3A20                <1>
  1000 00000D23 20202020202020200D- <1> .driverBad2 db "        ",CR,LF,"$"
  1000 00000D2C 0A24                <1>
  1001                              <1> ;------------------
  1002                              <1> ;Bad exit cases
  1003                              <1> ;------------------
  1004                              <1> .drvBadClose:
  1005 00000D2E B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
  1006 00000D33 CD41                <1>     int 41h
  1007                              <1> .drvBad:
  1008 00000D35 488D1519000000      <1>     lea rdx, .drvBadMsg
  1009                              <1> .drvBad2:
  1010 00000D3C B800090000          <1>     mov eax, 0900h
  1011 00000D41 CD41                <1>     int 41h
  1012 00000D43 F8                  <1>     clc ;Never return with CF=CY
  1013                              <1>     return
    13                              <2> %%_ret:
    14 00000D44 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1014                              <1> .drvMemClose:
  1015 00000D45 B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
  1016 00000D4A CD41                <1>     int 41h
  1017 00000D4C 488D159AFEFFFF      <1>     lea rdx, .drvMemMsg
  1018 00000D53 EBE7                <1>     jmp short .drvBad2
  1019                              <1> 
  1020 00000D55 0D0A426164206F7220- <1> .drvBadMsg: db CR,LF,"Bad or missing filename",CR,LF,"$"
  1020 00000D5E 6D697373696E672066- <1>
  1020 00000D67 696C656E616D650D0A- <1>
  1020 00000D70 24                  <1>
  1021                              <1> 
  1022                              <1> .sftHandler:
  1023                              <1> ;This reads the line to set the number of FILE to between 1 and 254
  1024 00000D71 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1025 00000D75 4881C606000000      <1>     add rsi, 6  ;Go past FILES=
  1026 00000D7C E8E5FBFFFF          <1>     call .cfgSkipLeadingSpaces
  1027                              <1>     ;This must be at most three digits, anything else is a failure
  1028 00000D81 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
  1029 00000D84 31C9                <1>     xor ecx, ecx
  1030 00000D86 AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
  1031 00000D87 3C30                <1>     cmp al, "0"
  1032 00000D89 0F8280000000        <1>     jb .sftHandlerErr
  1033 00000D8F 3C39                <1>     cmp al, "9"
  1034 00000D91 777C                <1>     ja .sftHandlerErr
  1035 00000D93 FFC1                <1>     inc ecx ;Increment char counter
  1036 00000D95 AC                  <1>     lodsb   ;Get second char
  1037 00000D96 E87A000000          <1>     call .sftHandlerTermCheck
  1038 00000D9B 7424                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
  1039 00000D9D 3C30                <1>     cmp al, "0"
  1040 00000D9F 726E                <1>     jb .sftHandlerErr
  1041 00000DA1 3C39                <1>     cmp al, "9"
  1042 00000DA3 776A                <1>     ja .sftHandlerErr
  1043 00000DA5 FFC1                <1>     inc ecx ;Increment char counter
  1044 00000DA7 AC                  <1>     lodsb   ;Get third char
  1045 00000DA8 E868000000          <1>     call .sftHandlerTermCheck
  1046 00000DAD 7412                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
  1047 00000DAF 3C30                <1>     cmp al, "0"
  1048 00000DB1 725C                <1>     jb .sftHandlerErr
  1049 00000DB3 3C32                <1>     cmp al, "2" ;Max BUFFERS=254 soooo, sorry buddy!
  1050 00000DB5 7758                <1>     ja .sftHandlerErr
  1051 00000DB7 AC                  <1>     lodsb   ;Check no more chars!
  1052 00000DB8 E858000000          <1>     call .sftHandlerTermCheck
  1053 00000DBD 7550                <1>     jne .sftHandlerErr
  1054 00000DBF FFC1                <1>     inc ecx ;Increment char counter
  1055                              <1> .sftHandlerProcess:
  1056 00000DC1 31D2                <1>     xor edx, edx    ;Accumulate value in edx
  1057 00000DC3 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
  1058                              <1> .sftHandlerLp:
  1059 00000DC6 FFC9                <1>     dec ecx
  1060 00000DC8 AC                  <1>     lodsb   ;Get the digit
  1061 00000DC9 E819000000          <1>     call .sftHandlerMul
  1062 00000DCE 67E302              <1>     jecxz .sftHandlerPrepExit
  1063 00000DD1 EBF3                <1>     jmp short .sftHandlerLp 
  1064                              <1> .sftHandlerPrepExit:
  1065                              <1> ;edx has the value now, so place it in stack
  1066 00000DD3 B914000000          <1>     mov ecx, filesDefault  ;Get default if the user specifies less than min
  1067 00000DD8 81FA08000000        <1>     cmp edx, 8
  1068 00000DDE 0F42D1              <1>     cmovb edx, ecx
  1069 00000DE1 488955F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rdx
  1070 00000DE5 F8                  <1>     clc
  1071                              <1>     return
    13                              <2> %%_ret:
    14 00000DE6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1072                              <1> .sftHandlerMul:
  1073                              <1> ;Input:
  1074                              <1> ;al = digit to add to result (ASCII digit)
  1075                              <1> ;ecx = whether al is a unit (0), ten (1) or hundred (2)
  1076                              <1> ;rdx = Accumulated sum
  1077                              <1> ;Output:
  1078                              <1> ;rdx = Accumulated sum with al added
  1079                              <1> ;eax is destroyed
  1080                              <1> ;All other registers preserved
  1081 00000DE7 51                  <1>     push rcx
  1082 00000DE8 52                  <1>     push rdx
  1083 00000DE9 0FB6C0              <1>     movzx eax, al
  1084 00000DEC 2D30000000          <1>     sub eax, '0' ;Convert to a binary digit
  1085 00000DF1 BA01000000          <1>     mov edx, 1    ;Get 1 in edx (multiplicative unit)
  1086 00000DF6 39D1                <1>     cmp ecx, edx  ;Was cl a ten?
  1087 00000DF8 BB0A000000          <1>     mov ebx, 10     ;Default base offset to 10
  1088 00000DFD B964000000          <1>     mov ecx, 100
  1089 00000E02 0F42DA              <1>     cmovb ebx, edx  ;If below, it was a unit
  1090 00000E05 0F47D9              <1>     cmova ebx, ecx  ;If above, it was a hundred
  1091 00000E08 F7E3                <1>     mul ebx    ;Multiply the base offset to eax
  1092 00000E0A 5A                  <1>     pop rdx ;Get the accumulated value back
  1093 00000E0B 01C2                <1>     add edx, eax    ;Add this result over
  1094 00000E0D 59                  <1>     pop rcx
  1095                              <1>     return
    13                              <2> %%_ret:
    14 00000E0E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1096                              <1> .sftHandlerErr:
  1097 00000E0F E8BBFAFFFF          <1>     call .badLineErrorMsg
  1098                              <1>     return
    13                              <2> %%_ret:
    14 00000E14 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1099                              <1> .sftHandlerTermCheck:
  1100 00000E15 3C20                <1>     cmp al, SPC
  1101                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E17 74(14)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1102 00000E19 3C09                <1>     cmp al, TAB
  1103                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E1B 74(14)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1104 00000E1D 3C0D                <1>     cmp al, CR
  1105                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E1F 74(14)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1106 00000E21 3C0A                <1>     cmp al, LF
  1107                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E23 74(14)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1108                              <1>     return
    13                              <2> %%_ret:
    14 00000E25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1109                              <1> 
  1110                              <1> .lastdriveHandler:
  1111 00000E26 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1112 00000E2A 4881C60A000000      <1>     add rsi, 10  ;Go past LASTDRIVE=
  1113 00000E31 E830FBFFFF          <1>     call .cfgSkipLeadingSpaces
  1114 00000E36 AC                  <1>     lodsb   ;Get this char
  1115 00000E37 0FB6C0              <1>     movzx eax, al   ;Zero extend to eax
  1116 00000E3A 50                  <1>     push rax    ;Push on stack
  1117 00000E3B B813120000          <1>     mov eax, 1213h  ;Uppercase the char
  1118 00000E40 CD4F                <1>     int 4Fh
  1119 00000E42 5B                  <1>     pop rbx
  1120 00000E43 3C5A                <1>     cmp al, "Z"
  1121 00000E45 77C8                <1>     ja .sftHandlerErr
  1122 00000E47 3C41                <1>     cmp al, "A"
  1123 00000E49 72C4                <1>     jb .sftHandlerErr
  1124 00000E4B 803E0D              <1>     cmp byte [rsi], CR
  1125 00000E4E 740F                <1>     je .ldProceed
  1126 00000E50 803E0A              <1>     cmp byte [rsi], LF
  1127 00000E53 740A                <1>     je .ldProceed
  1128 00000E55 803E09              <1>     cmp byte [rsi], TAB
  1129 00000E58 7405                <1>     je .ldProceed
  1130 00000E5A 803E20              <1>     cmp byte [rsi], SPC
  1131 00000E5D 75B0                <1>     jne .sftHandlerErr
  1132                              <1> .ldProceed:
  1133 00000E5F 2C41                <1>     sub al, "A" ;Convert into a number
  1134 00000E61 0FB6C0              <1>     movzx eax, al   ;Zero extend in case DOS rets something dumb in upper bits
  1135 00000E64 BA05000000          <1>     mov edx, lastDriveDeflt
  1136 00000E69 3D05000000          <1>     cmp eax, lastDriveDeflt
  1137 00000E6E 0F42C2              <1>     cmovb eax, edx
  1138 00000E71 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
  1139 00000E75 F8                  <1>     clc
  1140                              <1>     return
    13                              <2> %%_ret:
    14 00000E76 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1141                              <1> .ldBad:
  1142 00000E77 F9                  <1>     stc
  1143                              <1> .countryScan:
  1144                              <1> .fcbHandler:
  1145                              <1> .shellHandler:
  1146                              <1> .stacksHandler:
  1147                              <1> .drivParm:
  1148                              <1>     return
    13                              <2> %%_ret:
    14 00000E78 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1149                              <1> 
  1150                              <1> .cfgExit:
  1151 00000E79 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle] ;Get the handle back
  1152 00000E7D B8003E0000          <1>     mov eax, 3E00h    ;Close the handle
  1153 00000E82 CD41                <1>     int 41h ;bx already has the handle
  1154 00000E84 4C8B45B0            <1>     mov r8, qword [rbp - cfgFrame.linePtr]   ;Get the line buffer ptr back
  1155 00000E88 B800490000          <1>     mov eax, 4900h  ;FREE
  1156 00000E8D CD41                <1>     int 41h
  1157                              <1> ;------------------------------------------------;
  1158                              <1> ;   Setup Final Data Areas With Overrides from   ;
  1159                              <1> ;                  CONFIG.SYS                    ;
  1160                              <1> ;------------------------------------------------;
  1161                              <1> ;Add additional buffers.
  1162                              <1> ;Add additional SFT entries.
  1163                              <1> ;Add additional FCBS.
  1164                              <1> ;Create a larger CDS if needed.
  1165                              <1> noCfg:
  1166                              <1> ;Start with buffers:
  1167 00000E8F 488B4DF8            <1>     mov rcx, qword [rbp - cfgFrame.newBuffers]    ;Get new number of buffers
  1168 00000E93 81F901000000        <1>     cmp ecx, 1   ;If its only one buffer, skip as we have one already
  1169 00000E99 0F84A5000000        <1>     je .skipBuffers
  1170 00000E9F FFC9                <1>     dec ecx  ;Minus one now
  1171 00000EA1 64880C25[6D000000]  <1>     mov byte fs:[numBuffers], cl    ;Store this value in var
  1172                              <1>     ;Now do the allocation at rdi. Each buffer = maxSectorSize + bufferHdr_size
  1173 00000EA9 640FB70425-         <1>     movzx eax, word fs:[maxBytesSec]    ;Get buffer sector size
  1173 00000EAE [4F000000]          <1>
  1174 00000EB2 0530000000          <1>     add eax, bufferHdr_size ;eax has the size to add
  1175 00000EB7 50                  <1>     push rax    ;Save the total number of bytes for a buffer and its header
  1176 00000EB8 F7E1                <1>     mul ecx ;Get total size to allocate in eax
  1177 00000EBA 5A                  <1>     pop rdx     ;and get the total value back in rdx
  1178 00000EBB 89C3                <1>     mov ebx, eax    ;Move the total number of bytes into ebx
  1179 00000EBD 81C30F000000        <1>     add ebx, 0Fh
  1180 00000EC3 C1EB04              <1>     shr ebx, 4      ;And convert it to paragraphs
  1181 00000EC6 B800480000          <1>     mov eax, 4800h  ;ALLOC
  1182 00000ECB CD41                <1>     int 41h
  1183 00000ECD 7275                <1>     jc short .skipBuffers   ;If it fails to allocate, default to one buffer
  1184                              <1>     ;Each buffer has no flags, drive number must be -1
  1185 00000ECF 4889D3              <1>     mov rbx, rdx    ;Put the total number of bytes per buffer in rbx
  1186 00000ED2 4889C7              <1>     mov rdi, rax    ;Point rdi to the new area 
  1187 00000ED5 482D10000000        <1>     sub rax, mcb.program    ;Point rax to the head of the mcb
  1188 00000EDB 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Mark as owned by DOS
  1189 00000EE3 C6400D42            <1>     mov byte [rax + mcb.subSysMark], mcbSubBuffers  ;Buffer buffer (funny)
  1190 00000EE7 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]  ;Get the pointer to the first buffer
  1190 00000EEC [51000000]          <1>
  1191 00000EF0 488938              <1>     mov qword [rax + bufferHdr.nextBufPtr], rdi ;And set the new next buffer to point to it
  1192 00000EF3 4889FE              <1>     mov rsi, rdi    ;Points rsi to first new buffer space
  1193 00000EF6 31C0                <1>     xor eax, eax    ;Use for sanitising buffer headers
  1194 00000EF8 FFC9                <1>     dec ecx         ;Reduce to convert from 1 based count to 0 based
  1195 00000EFA 67E325              <1>     jecxz .lastBuffer
  1196                              <1> .bufferLoop:
  1197 00000EFD 4801DF              <1>     add rdi, rbx    ;Goto next buffer space
  1198 00000F00 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Point to next buffer
  1199 00000F03 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1200 00000F09 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1201 00000F0D 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1202 00000F10 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1203 00000F13 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1204 00000F17 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
  1205 00000F1B 4889FE              <1>     mov rsi, rdi    ;Move rsi to next buffer position
  1206 00000F1E FFC9                <1>     dec ecx
  1207 00000F20 75DB                <1>     jnz .bufferLoop
  1208                              <1> .lastBuffer:
  1209 00000F22 4801DF              <1>     add rdi, rbx    ;Goto past the last buffer
  1210 00000F25 48C706FFFFFFFF      <1>     mov qword [rsi + bufferHdr.nextBufPtr], -1 ;Point to no buffer
  1211 00000F2C 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1212 00000F32 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1213 00000F36 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1214 00000F39 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1215 00000F3C 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1216 00000F40 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
  1217                              <1> .skipBuffers:
  1218                              <1> ;Now build a new SFT header for the number of files specified by user
  1219 00000F44 488B4DF0            <1>     mov rcx, qword [rbp - cfgFrame.newSFTVal]
  1220 00000F48 81F905000000        <1>     cmp ecx, 5  ;If we are not adding anything, skip building SFT
  1221 00000F4E 764F                <1>     jbe short .skipSFT
  1222                              <1>     ;First compute how big this new arena needs to be
  1223 00000F50 81E905000000        <1>     sub ecx, 5   ;Remove the default five files that are *always* present!
  1224 00000F56 B84F000000          <1>     mov eax, sft_size
  1225 00000F5B F7E1                <1>     mul ecx ;Get number of files*size of file in bytes in eax
  1226 00000F5D 050A000000          <1>     add eax, sfth_size  ;Add the size of one SFT header
  1227 00000F62 89C3                <1>     mov ebx, eax        ;And move into ebx for the syscall
  1228 00000F64 81C30F000000        <1>     add ebx, 0Fh        ;Round up to nearest paragraph...
  1229 00000F6A C1EB04              <1>     shr ebx, 4          ;And convert to paragraphs
  1230 00000F6D B800480000          <1>     mov eax, 4800h
  1231 00000F72 CD41                <1>     int 41h
  1232 00000F74 7229                <1>     jc short .skipSFT   ;Skip adding files if this fails. Sorry end user!
  1233 00000F76 64488B3425-         <1>     mov rsi, qword fs:[sftHeadPtr]
  1233 00000F7B [37000000]          <1>
  1234 00000F7F 488906              <1>     mov qword [rsi + sfth.qNextSFTPtr], rax ;RAX points to the next sfth
  1235 00000F82 66894808            <1>     mov word [rax + sfth.wNumFiles], cx ;Move remaining files here
  1236 00000F86 48C700FFFFFFFF      <1>     mov qword [rax + sfth.qNextSFTPtr], -1  ;Last table in chain    
  1237 00000F8D 482D10000000        <1>     sub rax, mcb.program    ;Point to MCB now
  1238 00000F93 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS
  1239 00000F9B C6400D46            <1>     mov byte [rax + mcb.subSysMark], mcbSubFiles
  1240                              <1> .skipSFT:
  1241                              <1> ;FCBS now
  1242 00000F9F 488B4DE8            <1>     mov rcx, qword [rbp - cfgFrame.newFCBSVal]
  1243 00000FA3 67E346              <1>     jecxz .skipFCBS ;Skip if no FCBS requested
  1244 00000FA6 B84F000000          <1>     mov eax, sft_size
  1245 00000FAB F7E1                <1>     mul ecx ;Get number of files*size of file in bytes in eax
  1246 00000FAD 050A000000          <1>     add eax, sfth_size  ;Add the size of one SFT header
  1247 00000FB2 89C3                <1>     mov ebx, eax        ;And move into ebx for the syscall
  1248 00000FB4 81C30F000000        <1>     add ebx, 0Fh        ;Round up to nearest paragraph...
  1249 00000FBA C1EB04              <1>     shr ebx, 4          ;And convert to paragraphs
  1250 00000FBD B800480000          <1>     mov eax, 4800h
  1251 00000FC2 CD41                <1>     int 41h
  1252 00000FC4 7226                <1>     jc short .skipFCBS   ;Skip adding files if this fails. Sorry end user!
  1253 00000FC6 6448890425-         <1>     mov qword fs:[fcbsHeadPtr], rax ;This is the FCBS head now
  1253 00000FCB [61000000]          <1>
  1254 00000FCF 66894808            <1>     mov word [rax + sfth.wNumFiles], cx ;Move FCBS here
  1255 00000FD3 48C700FFFFFFFF      <1>     mov qword [rax + sfth.qNextSFTPtr], -1  ;Last table in chain  
  1256 00000FDA 482D10000000        <1>     sub rax, mcb.program    ;Point to MCB now
  1257 00000FE0 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS
  1258 00000FE8 C6400D58            <1>     mov byte [rax + mcb.subSysMark], mcbSubFCBS
  1259                              <1> .skipFCBS:
  1260                              <1> ;And CDS now
  1261 00000FEC 488B4DD8            <1>     mov rcx, qword [rbp - cfgFrame.newLastdrive]
  1262 00000FF0 64380C25[6C000000]  <1>     cmp byte fs:[lastdrvNum], cl
  1263 00000FF8 731F                <1>     jae .skipCDS    ;If user specifies less than 5 drives, dont reallocate
  1264                              <1>     ;Else, we first free the old CDS and then reallocate
  1265 00000FFA 644C8B0425-         <1>     mov r8, qword fs:[cdsHeadPtr]
  1265 00000FFF [59000000]          <1>
  1266 00001003 B800490000          <1>     mov eax, 4900h  ;FREE the old allocation.
  1267 00001008 CD41                <1>     int 41h
  1268 0000100A 720D                <1>     jc short .skipCDS
  1269 0000100C 64880C25[6C000000]  <1>     mov byte fs:[lastdrvNum], cl ;Save this value
  1270 00001014 E880F4FFFF          <1>     call makeCDSArray
  1271                              <1> .skipCDS:
  1272 00001019 4889EC              <1>     mov rsp, rbp    ;Return stack pointer to original position
  1273 0000101C 5D                  <1>     pop rbp ;Stack frame no longer needed
  1274                              <1> ;Now we close all five default handles and open AUX, CON and PRN
  1275                              <1> ; and reopen the handles as user may have loaded new CON/AUX/PRN etc drivers
  1276 0000101D 31DB                <1>     xor ebx, ebx
  1277                              <1> closeHandlesLoop:
  1278 0000101F B8003E0000          <1>     mov eax, 3e00h  ;Close
  1279 00001024 CD41                <1>     int 41h
  1280 00001026 FFC3                <1>     inc ebx ;Goto next handle
  1281 00001028 81FB06000000        <1>     cmp ebx, 6
  1282 0000102E 75EF                <1>     jne closeHandlesLoop
  1283 00001030 E89A020000          <1>     call openStreams
  1284                              <1> l1:
  1285 00001035 BB00100000          <1>     mov ebx, 1000h  ;Get a 64Kb block
  1286 0000103A B800480000          <1>     mov eax, 4800h  ;Allocate the memory block
  1287 0000103F CD41                <1>     int 41h         ;Malloc and get pointer in rbx
  1288 00001041 0F828F000000        <1>     jc badMem
  1289 00001047 4889C3              <1>     mov rbx, rax    ;Get pointer to block header to set owner to DOS
  1290 0000104A 4881EB10000000      <1>     sub rbx, mcb_size
  1291 00001051 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
  1292 00001059 48890522050000      <1>     mov qword [OEMMEMPTR], rax   ;Save the pointer here
  1293 00001060 4C8D0542050000      <1>     lea r8, tempPSP ;Get the DOS PSP pointer to r8
  1294 00001067 4989C1              <1>     mov r9, rax  ;Copy the Memory arena pointer to r9
  1295                              <1>     ;Input: r8 = PSP
  1296                              <1>     ;       r9 = Memory Arena Pointer
  1297                              <1>     ;All regs must be preserved (including r9, even if you free. Dont free!)
  1298 0000106A E8E8090000          <1>     call OEMCALLBK  ;Return CF=CY if OEM wants to keep the memory block
  1299 0000106F 720E                <1>     jc short l2 
  1300 00001071 4C8B050A050000      <1>     mov r8, qword [OEMMEMPTR]
  1301 00001078 B800490000          <1>     mov eax, 4900h  ;Free the memory block
  1302 0000107D CD41                <1>     int 41h
  1303                              <1> l2:
  1304                              <1>     ;Load COMMAND.COM
  1305                              <1>     ;Get currentPSP ptr
  1306 0000107F B462                <1>     mov ah, 62h ;Get current PSP ptr in rbx
  1307 00001081 CD41                <1>     int 41h
  1308 00001083 B419                <1>     mov ah, 19h ;Get current Drive letter in al
  1309 00001085 CD41                <1>     int 41h
  1310 00001087 0441                <1>     add al, "A"
  1311 00001089 8805BF000000        <1>     mov byte [cmdLine], al  ;Store drive letter at start of command line
  1312                              <1> 
  1313 0000108F 488D1DC7000000      <1>     lea rbx, cmdBlock
  1314 00001096 488D350C050000      <1>     lea rsi, tempPSP
  1315 0000109D 488D465C            <1>     lea rax, qword [rsi + psp.fcb1]
  1316 000010A1 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1317 000010A5 488D466C            <1>     lea rax, qword [rsi + psp.fcb2]
  1318 000010A9 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1319 000010AD 488D8680000000      <1>     lea rax, qword [rsi + psp.dta]  ;Get the dummy command line ptr
  1320 000010B4 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax    ;Store dummy command line here
  1321 000010B8 488D158F000000      <1>     lea rdx, cmdLine
  1322 000010BF B8004B0000          <1>     mov eax, 4B00h  ;Exec Prog
  1323 000010C4 CD41                <1>     int 41h
  1324 000010C6 488D1545000000      <1>     lea rdx, badCom
  1325 000010CD B409                <1>     mov ah, 09h ;Print message
  1326 000010CF CD41                <1>     int 41h
  1327                              <1> hltLbl:
  1328 000010D1 F4                  <1>     hlt
  1329 000010D2 F390                <1>     pause
  1330 000010D4 EBFB                <1>     jmp short hltLbl
  1331                              <1> badMem:
  1332 000010D6 488D1509000000      <1>     lea rdx, memErr
  1333 000010DD B800090000          <1>     mov eax, 0900h
  1334 000010E2 CD41                <1>     int 41h
  1335 000010E4 EBEB                <1>     jmp short hltLbl
  1336 000010E6 53797374656D204D65- <1> memErr  db "System Memory Error",0Ah,0Dh,"$"
  1336 000010EF 6D6F7279204572726F- <1>
  1336 000010F8 720A0D24            <1>
  1337                              <1> ;--------------------------------
  1338                              <1> ;       DATA FOR SYSINIT        :
  1339                              <1> ;--------------------------------
  1340 000010FC 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
  1340 00001105 5343502F444F532E2E- <1>
  1340 0000110E 2E0A0D24            <1>
  1341 00001112 426164206F72206D69- <1> badCom  db "Bad or missing Command interpreter",0Ah,0Dh,"$"
  1341 0000111B 7373696E6720436F6D- <1>
  1341 00001124 6D616E6420696E7465- <1>
  1341 0000112D 727072657465720A0D- <1>
  1341 00001136 24                  <1>
  1342 00001137 434F4E00            <1> conName db "CON",0
  1343 0000113B 41555800            <1> auxName db "AUX",0
  1344 0000113F 50524E00            <1> prnName db "PRN",0
  1345                              <1> 
  1346 00001143 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
  1346 0000114C 5300                <1>
  1347 0000114E 5F3A5C434F4D4D414E- <1> cmdLine db "_:\COMMAND.COM",0   ;ASCIIZ FOR COMMAND.COM
  1347 00001157 442E434F4D00        <1>
  1348                              <1> 
  1349                              <1> cmdBlock:   ;Used also for overlay block
  1350                              <1>     istruc execProg
  1351 0000115D 0000000000000000    <1>     at execProg.pEnv,       dq 0    ;Is set to point at the above line
  1352 00001165 0000000000000000    <1>     at execProg.pCmdLine,   dq 0    ;Points to just a 0Dh
  1353 0000116D 0000000000000000    <1>     at execProg.pfcb1,      dq 0    ;Set to DOS's fcb 1 and 2
  1354 00001175 0000000000000000    <1>     at execProg.pfcb2,      dq 0
  1355                              <1>     iend
  1356                              <1> exceptData:
  1357 0000117D [345E000000000000]  <1>     dq i0
  1358 00001185 [3B5E000000000000]  <1>     dq i1
  1359 0000118D [455E000000000000]  <1>     dq i2
  1360 00001195 [4F5E000000000000]  <1>     dq i3
  1361 0000119D [595E000000000000]  <1>     dq i4
  1362 000011A5 [635E000000000000]  <1>     dq i5
  1363 000011AD [6A5E000000000000]  <1>     dq i6
  1364 000011B5 [715E000000000000]  <1>     dq i7
  1365 000011BD [785E000000000000]  <1>     dq i8
  1366 000011C5 [7F5E000000000000]  <1>     dq i9
  1367 000011CD [865E000000000000]  <1>     dq i10
  1368 000011D5 [8D5E000000000000]  <1>     dq i11
  1369 000011DD [945E000000000000]  <1>     dq i12
  1370 000011E5 [9B5E000000000000]  <1>     dq i13
  1371 000011ED [A25E000000000000]  <1>     dq i14
  1372 000011F5 [A95E000000000000]  <1>     dq i15
  1373 000011FD [B05E000000000000]  <1>     dq i16
  1374 00001205 [B75E000000000000]  <1>     dq i17
  1375 0000120D [BE5E000000000000]  <1>     dq i18
  1376 00001215 [C55E000000000000]  <1>     dq i19
  1377 0000121D [CC5E000000000000]  <1>     dq i20
  1378 00001225 [D35E000000000000]  <1>     dq i21
  1379                              <1> 
  1380                              <1> intData:
  1381 0000122D [8652000000000000]  <1>     dq terminateProcess ;Int 40h
  1382 00001235 [7A69000000000000]  <1>     dq functionDispatch ;Int 41h
  1383 0000123D [131A000000000000]  <1>     dq OEMHALT          ;Int 42h, If sysinit terminates, halt system
  1384 00001245 [D26A000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
  1385 0000124D [6862000000000000]  <1>     dq dosDefCritErrHdlr 
  1386 00001255 [3F63000000000000]  <1>     dq absDiskRead      ;Int 45h
  1387 0000125D [2063000000000000]  <1>     dq absDiskWrite     ;Int 46h
  1388 00001265 [8D52000000000000]  <1>     dq terminateRes     ;Int 47h
  1389 0000126D [D26A000000000000]  <1>     dq defaultIretq     ;Int 48h
  1390 00001275 [D26A000000000000]  <1>     dq defaultIretq     ;Int 49h
  1391 0000127D [D26A000000000000]  <1>     dq defaultIretq     ;Int 4Ah
  1392 00001285 [D26A000000000000]  <1>     dq defaultIretq     ;Int 4Bh
  1393 0000128D [D26A000000000000]  <1>     dq defaultIretq     ;Int 4Ch
  1394 00001295 [D26A000000000000]  <1>     dq defaultIretq     ;Int 4Dh
  1395 0000129D [D26A000000000000]  <1>     dq defaultIretq     ;Int 4Eh
  1396 000012A5 [E271000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
  1397                              <1> nData:
  1398 000012AD 0000000000000000    <1>     dq 0    ;We link here to the head of the OEM driver chain
  1399 000012B5 0480                <1>     dw 08004h
  1400 000012B7 [8162000000000000]  <1>     dq nulStrat
  1401 000012BF [8762000000000000]  <1>     dq nulIntr
  1402 000012C7 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1403                              <1> 
  1404                              <1> openStreams:
  1405                              <1> ;If this returns with CF=CY, an error occured. Halt boot if initial set of streams
  1406 000012CF 488D1565FEFFFF      <1>     lea rdx, auxName
  1407 000012D6 B8023D0000          <1>     mov eax, 3D02h   ;Open read/write
  1408 000012DB CD41                <1>     int 41h
  1409                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000012DD 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000012DF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1410 000012E0 89C3                <1>     mov ebx, eax
  1411 000012E2 B903000000          <1>     mov ecx, 3  ;
  1412 000012E7 B800460000          <1>     mov eax, 4600h  ;DUP2
  1413 000012EC CD41                <1>     int 41h
  1414                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000012EE 72(DF)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1415 000012F0 B8003E0000          <1>     mov eax, 3e00h
  1416 000012F5 CD41                <1>     int 41h ;Close the original handle
  1417                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000012F7 72(DF)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1418 000012F9 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
  1419 000012FE 488D1532FEFFFF      <1>     lea rdx, conName
  1420 00001305 CD41                <1>     int 41h
  1421                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001307 72(DF)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1422 00001309 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
  1423 0000130B B800450000          <1>     mov eax, 4500h  ;DUP
  1424 00001310 CD41                <1>     int 41h
  1425                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001312 72(DF)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1426 00001314 B800450000          <1>     mov eax, 4500h  ;DUP
  1427 00001319 CD41                <1>     int 41h
  1428                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000131B 72(DF)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1429 0000131D 488D151BFEFFFF      <1>     lea rdx, prnName
  1430 00001324 B8023D0000          <1>     mov eax, 3D02h
  1431 00001329 CD41                <1>     int 41h       ;Open file
  1432                              <1>     return
    13                              <2> %%_ret:
    14 0000132B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1433                              <1> 
  1434                              <1> addDriverMarkers:
  1435                              <1> ;Traverses the MCB chain after a driver init to add the correct subsytem 
  1436                              <1> ; information and owner to each memory block. Used for drivers that allocate
  1437                              <1> ; their own memory using ALLOC.
  1438                              <1> ;Input: qword [currentPSP] = Signature to search for (9 means kernel driver).
  1439                              <1> ;       fs -> Dos Data Area
  1440                              <1> ;Output: Sets the first occurrence to Driver, the rest to driver appendage,
  1441                              <1> ;           unless the signature is 9 in which case, it is set to DOS owner.
  1442                              <1> ;           In the event of a kernel driver then only mcbSubDrvExtra is used.
  1443 0000132C 50                  <1>     push rax
  1444 0000132D 53                  <1>     push rbx
  1445 0000132E 51                  <1>     push rcx
  1446 0000132F 56                  <1>     push rsi
  1447 00001330 57                  <1>     push rdi
  1448 00001331 488BBD[13040000]    <1>     mov rdi, qword [rbp + currentPSP]
  1449 00001338 488BB5[27000000]    <1>     mov rsi, qword [rbp + mcbChainPtr] ;Points to the kernel allocation
  1450 0000133F B844000000          <1>     mov eax, mcbSubDriver
  1451 00001344 BB4C000000          <1>     mov ebx, mcbSubDrvExtra
  1452 00001349 4881FF09000000      <1>     cmp rdi, mcbOwnerNewDOS  ;If so, skip setting driver, only extra!
  1453 00001350 0F44C3              <1>     cmove eax, ebx
  1454 00001353 EB18                <1>     jmp short .gotoNextBlock    ;Skip the first alloc (the kernel)
  1455                              <1> .checkSubsystem:
  1456 00001355 48397E01            <1>     cmp qword [rsi + mcb.owner], rdi
  1457 00001359 7512                <1>     jne short .gotoNextBlock
  1458 0000135B 88460D              <1>     mov byte [rsi + mcb.subSysMark], al
  1459 0000135E 39D8                <1>     cmp eax, ebx
  1460 00001360 0F45C3              <1>     cmovne eax, ebx
  1461 00001363 807E0109            <1>     cmp byte [rsi + mcb.owner], mcbOwnerNewDOS
  1462 00001367 7504                <1>     jne short .gotoNextBlock
  1463 00001369 C6460108            <1>     mov byte [rsi + mcb.owner], mcbOwnerDOS
  1464                              <1> .gotoNextBlock:
  1465 0000136D 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
  1466 00001370 7415                <1>     je short .exit
  1467 00001372 31C9                <1>     xor ecx, ecx
  1468 00001374 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
  1469 00001377 48C1E104            <1>     shl rcx, 4
  1470 0000137B 4881C610000000      <1>     add rsi, mcb.program    
  1471 00001382 4801CE              <1>     add rsi, rcx
  1472 00001385 EBCE                <1>     jmp short .checkSubsystem
  1473                              <1> .exit:
  1474 00001387 5F                  <1>     pop rdi
  1475 00001388 5E                  <1>     pop rsi
  1476 00001389 59                  <1>     pop rcx
  1477 0000138A 5B                  <1>     pop rbx
  1478 0000138B 58                  <1>     pop rax
  1479                              <1>     return
    13                              <2> %%_ret:
    14 0000138C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1480                              <1> 
  1481                              <1> 
  1482                              <1> convertBPBArray:
  1483                              <1> ;rsi -> BPB array
  1484                              <1> ;rbp -> Space for cl consecutive DPB's
  1485                              <1> ;rdi -> Driver header
  1486                              <1> ;cl = Number of BPBs to process
  1487                              <1> ;If ZF=NZ on entry, link the end of the last DPB array 
  1488 0000138D E852000000          <1>     call .findLastDPB
  1489 00001392 0FB6C9              <1>     movzx ecx, cl   ;Use ch as the unit number counter
  1490                              <1> .buildNext:
  1491 00001395 56                  <1>     push rsi
  1492 00001396 488B36              <1>     mov rsi, qword [rsi]    ;Get the BPB pointer from the BPB array
  1493 00001399 B453                <1>     mov ah, 53h ;Build DPB
  1494 0000139B CD41                <1>     int 41h
  1495 0000139D 5E                  <1>     pop rsi
  1496 0000139E 640FB60425-         <1>     movzx eax, byte fs:[numPhysVol] ;Get current # drives
  1496 000013A3 [6B000000]          <1>
  1497 000013A7 884500              <1>     mov byte [rbp + dpb.bDriveNumber], al   ;Set it as drvnum
  1498 000013AA 64FE0425[6B000000]  <1>     inc byte fs:[numPhysVol]    ;One more physical volume present!
  1499 000013B2 886D01              <1>     mov byte [rbp + dpb.bUnitNumber], ch    ;Set unit number
  1500 000013B5 48897D1B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rdi ;Store ptr to driver
  1501 000013B9 FEC5                <1>     inc ch  ;Goto next unit number
  1502 000013BB 38E9                <1>     cmp cl, ch  ;When equal, exit!
  1503 000013BD 7414                <1>     jz short .exit
  1504 000013BF 488D4535            <1>     lea rax, qword [rbp + dpb_size]
  1505 000013C3 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
  1506 000013C7 4889C5              <1>     mov rbp, rax    ;Advance rbp by that amount
  1507 000013CA 4881C608000000      <1>     add rsi, 8 ;Go to the next BPB in the BPB array
  1508 000013D1 EBC2                <1>     jmp short .buildNext
  1509                              <1> .exit:
  1510                              <1>     ;Now set next DPB as -1 i.e end of chain!
  1511 000013D3 31C0                <1>     xor eax, eax
  1512 000013D5 48FFC8              <1>     dec rax
  1513 000013D8 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
  1514 000013DC 4881C535000000      <1>     add rbp, dpb_size   ;Point rbp past the next DPB
  1515 000013E3 C3                  <1>     ret
  1516                              <1> .findLastDPB:
  1517                              <1> ;Finds the last DPB and links the next DPB to it
  1518 000013E4 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
  1518 000013E9 [2F000000]          <1>
  1519 000013ED 4885C0              <1>     test rax, rax
  1520 000013F0 7415                <1>     jz short .first 
  1521                              <1> .lp:
  1522 000013F2 48817825FFFFFFFF    <1>     cmp qword [rax + dpb.qNextDPBPtr], -1   ;End of chain?
  1523 000013FA 7406                <1>     je short .lastFound
  1524 000013FC 488B4025            <1>     mov rax, qword [rax + dpb.qNextDPBPtr]  ;Get this pointer in rax
  1525 00001400 EBF0                <1>     jmp short .lp   ;And go again
  1526                              <1> .lastFound:
  1527 00001402 48896825            <1>     mov qword [rax + dpb.qNextDPBPtr], rbp  ;The next dpb will go here
  1528 00001406 C3                  <1>     ret
  1529                              <1> .first:
  1530                              <1> ;If this is the first DPB array, set the dpbHeadPtr
  1531 00001407 6448892C25-         <1>     mov qword fs:[dpbHeadPtr], rbp
  1531 0000140C [2F000000]          <1>
  1532 00001410 C3                  <1>     ret
  1533                              <1> 
  1534                              <1> ejectKernelInit:
  1535                              <1> ;Reallocates the space allocated to the driver file after 
  1536                              <1> ; init was called.
  1537                              <1> ;Input: rbx -> Pointer to the original end of the allocation (para aligned)
  1538                              <1> ;       r8 -> Points to the mcb header for reallocation
  1539                              <1> ;Uses the sysinit init drive block. 
  1540                              <1> ;rax, rbx, rflags trashed
  1541                              <1> ;If returns CF=CY, error in reallocation.
  1542 00001411 53                  <1>     push rbx
  1543 00001412 488D1D71010000      <1>     lea rbx, initDrvBlk
  1544 00001419 488B430E            <1>     mov rax, qword [rbx + initReqPkt.endptr]
  1545 0000141D 5B                  <1>     pop rbx
  1546                              <1>     ;If this endptr is zero or -1 ignore it. 
  1547                              <1>     ;If this endptr is greater than the end of alloc, ignore it.
  1548 0000141E 4885C0              <1>     test rax, rax
  1549                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001421 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001423 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1550 00001424 48FFC0              <1>     inc rax ;Carry over to 0 if this is -1
  1551                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001427 74(23)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1552 00001429 48FFC8              <1>     dec rax ;Return to original value
  1553 0000142C 48050F000000        <1>     add rax, 0Fh    ;Paragraph align the endptr
  1554 00001432 48C1E804            <1>     shr rax, 4
  1555 00001436 48C1E004            <1>     shl rax, 4
  1556 0000143A 4829C3              <1>     sub rbx, rax    ;If this is above zero then rbx > rax, which is valid
  1557 0000143D 7621                <1>     jbe short .exit   ;If equal or below zero, dont reallocate
  1558 0000143F 418B80[09000000]    <1>     mov eax, dword [r8 + anchorMcb + mcb.blockSize]    ;Get alloc size
  1559 00001446 4150                <1>     push r8 ;Save the pointer to the mcb before using syscall
  1560 00001448 4981C010000000      <1>     add r8, mcb.program ;Goto program
  1561 0000144F C1EB04              <1>     shr ebx, 4  ;Now convert the difference into number of paragraphs
  1562 00001452 29D8                <1>     sub eax, ebx
  1563 00001454 89C3                <1>     mov ebx, eax
  1564 00001456 B8004A0000          <1>     mov eax, 4A00h  ;Reallocate space
  1565 0000145B CD41                <1>     int 41h
  1566 0000145D 4158                <1>     pop r8
  1567                              <1>     return
    13                              <2> %%_ret:
    14 0000145F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1568                              <1> .exit:
  1569 00001460 F8                  <1>     clc ;Make sure to clear the CF flag before returning
  1570                              <1>     return
    13                              <2> %%_ret:
    14 00001461 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1571                              <1> 
  1572                              <1> initDriver:
  1573                              <1> ;Initialises one driver and adjusts the DOS data appropriately
  1574                              <1> ;If on return CF=CY then the driver didnt want to be loaded
  1575                              <1> ;Preserves rbx (initReqPkt), rbp (DOSSEG ptr), rsi (driver pointer)
  1576                              <1> ;initReqPkt.optptr must be set before calling this function if cmdline
  1577                              <1> ; arguments are to be passed to the driver
  1578                              <1> ;Input: rsi -> driver pointer
  1579                              <1> ;       rbx -> sysinit request pointer
  1580                              <1> ;       rbp -> DOSSEG pointer
  1581 00001462 C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
  1582 00001465 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], drvINIT
  1583 00001469 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0
  1584 0000146F 8A85[6B000000]      <1>     mov al, byte [rbp + numPhysVol]    ;Get current num of physical volumes
  1585 00001475 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al
  1586                              <1>     ;Protect the important registers. All others trashable
  1587 00001478 53                  <1>     push rbx
  1588 00001479 56                  <1>     push rsi
  1589 0000147A 55                  <1>     push rbp
  1590 0000147B FF560A              <1>     call qword [rsi + drvHdr.strPtr]
  1591 0000147E FF5612              <1>     call qword [rsi + drvHdr.intPtr]
  1592 00001481 5D                  <1>     pop rbp
  1593 00001482 5E                  <1>     pop rsi
  1594 00001483 5B                  <1>     pop rbx
  1595                              <1>     ;Check if a driver wants to not load.
  1596                              <1>     ;If a kernel driver wants to stop, halt boot.
  1597 00001484 66F743030080        <1>     test word [rbx + initReqPkt.status], drvErrStatus
  1598 0000148A 750C                <1>     jnz short .errExit
  1599 0000148C 807B0D00            <1>     cmp byte [rbx + initReqPkt.numunt], 0
  1600 00001490 7508                <1>     jne short .notHalt
  1601 00001492 4839730E            <1>     cmp qword [rbx + initReqPkt.endptr], rsi    ;If endptr -> header, abort
  1602 00001496 7502                <1>     jne short .notHalt
  1603                              <1> .errExit:
  1604 00001498 F9                  <1>     stc
  1605 00001499 C3                  <1>     ret
  1606                              <1> .notHalt:
  1607                              <1>     ;Now check if the drivers were con/clock before exiting
  1608 0000149A 668B4608            <1>     mov ax, word [rsi + drvHdr.attrib]
  1609 0000149E 66250300            <1>     and ax, devDrvConIn | devDrvConOut
  1610 000014A2 740D                <1>     jz short .checkClock    ;If neither one of these bits are set, jmp
  1611 000014A4 663D0300            <1>     cmp ax, devDrvConIn | devDrvConOut
  1612 000014A8 7507                <1>     jne short .checkClock
  1613 000014AA 4889B5[47000000]    <1>     mov qword [rbp + vConPtr], rsi  ;Store the header ptr here
  1614                              <1> .checkClock:
  1615 000014B1 66F746080800        <1>     test word [rsi + drvHdr.attrib], devDrvClockDev
  1616 000014B7 7407                <1>     jz short .notClock
  1617 000014B9 4889B5[3F000000]    <1>     mov qword [rbp + clockPtr], rsi
  1618                              <1> .notClock:
  1619                              <1> ;Now test if MSD driver. If so, store the number of units in the name field
  1620 000014C0 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
  1621                              <1>     retnz   ;Return if this is a char device
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000014C6 75(61)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1622                              <1>     ;Else, store the number of units as reported live by driver
  1623 000014C8 0FB6430D            <1>     movzx eax, byte [rbx + initReqPkt.numunt] ;Get # units reported by driver
  1624 000014CC 88461A              <1>     mov byte [rsi + drvHdr.drvUnt], al ;Store this byte permanently here
  1625 000014CF C3                  <1>     ret
  1626                              <1> 
  1627                              <1> buildDPBs:
  1628                              <1>     ;Here we specially handle MSD drivers, building DPBs
  1629                              <1>     ;If return with CF=CY, fail. Else, all done and setup
  1630                              <1>     ;Input: rbx -> Points to sysinit request packet
  1631                              <1>     ;       rsi -> Driver header
  1632                              <1>     ;       rbp -> DOSSEG pointer
  1633                              <1>     ;Preserves those registers
  1634 000014D0 53                  <1>     push rbx
  1635 000014D1 55                  <1>     push rbp
  1636 000014D2 56                  <1>     push rsi
  1637 000014D3 57                  <1>     push rdi
  1638 000014D4 4889F7              <1>     mov rdi, rsi    ;SAVE THE DRIVER HEADER!
  1639 000014D7 0FB64E1A            <1>     movzx ecx, byte [rsi + drvHdr.drvUnt]  ;Get # of units reported by driver
  1640 000014DB 488B7316            <1>     mov rsi, qword [rbx + initReqPkt.optptr]
  1641 000014DF B835000000          <1>     mov eax, dpb_size
  1642 000014E4 F7E1                <1>     mul ecx         ;Get the number of bytes for all the dpb's into eax
  1643 000014E6 050F000000          <1>     add eax, 0Fh    ;Round up if not precisely on para boundry
  1644 000014EB C1E804              <1>     shr eax, 4      ;Convert to paragraphs
  1645 000014EE 89C3                <1>     mov ebx, eax
  1646 000014F0 B800480000          <1>     mov eax, 4800h  ;ALLOC (marked as owned by DOS for now)
  1647 000014F5 CD41                <1>     int 41h
  1648 000014F7 7219                <1>     jc short .badExit
  1649 000014F9 4889C5              <1>     mov rbp, rax    
  1650 000014FC C6400D50            <1>     mov byte [rax + mcb.subSysMark], mcbSubDrvDPB  ;Set DPB marker here
  1651 00001500 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set DOS owner here
  1652                              <1>     ;rsi -> Ptr to BPB
  1653                              <1> 	;rbp -> Ptr to buffer to hold first DPB
  1654                              <1>     ;rdi -> Ptr to the driver header
  1655 00001508 E880FEFFFF          <1>     call convertBPBArray    ;Returns rbp -> past last DPB
  1656                              <1> .exit:
  1657 0000150D 5F                  <1>     pop rdi
  1658 0000150E 5E                  <1>     pop rsi
  1659 0000150F 5D                  <1>     pop rbp
  1660 00001510 5B                  <1>     pop rbx
  1661                              <1>     return
    13                              <2> %%_ret:
    14 00001511 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1662                              <1> .badExit:
  1663 00001512 F9                  <1>     stc
  1664 00001513 EBF8                <1>     jmp short .exit
  1665                              <1> 
  1666                              <1> setupInterruptBlock:
  1667                              <1> ;Sets up a block of interrupts with pointers provided in a table
  1668                              <1> ;Input:
  1669                              <1> ; al = Start interrupt
  1670                              <1> ; rdi -> Start of pointer table
  1671                              <1> ; cl = Last interrupt + 1
  1672                              <1> ;Assumes rbp points to DOSSEG
  1673 00001515 0FB6C0              <1>     movzx eax, al
  1674 00001518 0FB6C9              <1>     movzx ecx, cl
  1675                              <1> .lp:
  1676 0000151B 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
  1677 0000151E 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
  1678 00001521 E80E000000          <1>     call writeIDTEntry
  1679 00001526 4881C708000000      <1>     add rdi, 8  ;Goto next interrupt handler
  1680 0000152D FFC0                <1>     inc eax     ;Goto next interrupt number
  1681 0000152F 39C8                <1>     cmp eax, ecx
  1682 00001531 75E8                <1>     jne .lp
  1683                              <1>     return
    13                              <2> %%_ret:
    14 00001533 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1684                              <1> 
  1685                              <1> writeIDTEntry:
  1686                              <1> ;Writes the interrupt in the right place in the table
  1687                              <1>     ;al = Interrupt number
  1688                              <1>     ;rbx -> Handler to install
  1689 00001534 50                  <1>     push rax
  1690 00001535 53                  <1>     push rbx
  1691 00001536 0FB6C0              <1>     movzx eax, al
  1692 00001539 4893                <1>     xchg rbx, rax
  1693 0000153B 48C1E304            <1>     shl rbx, 4h     ;Multiply IDT entry number by 16
  1694 0000153F 48031D17000000      <1>     add rbx, qword [localIDTpointer.Base]    ;rsx points to IDT entry
  1695 00001546 668903              <1>     mov word [rbx], ax  ;Get low word into offset 15...0
  1696 00001549 48C1E810            <1>     shr rax, 10h    ;Bring next word low
  1697 0000154D 66894306            <1>     mov word [rbx + 6], ax  ;Get low word into offset 31...16
  1698 00001551 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
  1699 00001555 894308              <1>     mov dword [rbx + 8], eax
  1700 00001558 5B                  <1>     pop rbx
  1701 00001559 58                  <1>     pop rax
  1702 0000155A C3                  <1>     ret
  1703                              <1> 
  1704                              <1> ; DATA AREA
  1705                              <1> localIDTpointer: ;Local IDT pointer
  1706 0000155B 0000                <1>     .Limit  dw 0
  1707 0000155D 0000000000000000    <1>     .Base   dq 0
  1708                              <1> 
  1709 00001565 0000000000000000    <1> FINALDOSPTR dq 0    ;Pointer to where dSeg should be loaded
  1710 0000156D 0000000000000000    <1> DOSENDPTR   dq 0    ;Pointer to the first free byte AFTER DOS
  1711 00001575 0000000000000000    <1> MCBANCHOR   dq 0    ;Pointer to the Anchor MCB
  1712                              <1> 
  1713                              <1> ;DOS Data given by OEM
  1714 0000157D 00                  <1> FILES       db 0    ;Default number of FILES
  1715 0000157E 00                  <1> BUFFERS     db 0    ;Default number of BUFFERS
  1716 0000157F 00                  <1> DFLTDRIVE   db 0    ;Default drive number (0-25), this is the boot drive
  1717 00001580 00                  <1> LASTDRIVE   db 0    ;Default last drive number (0-25)
  1718 00001581 00                  <1> OEMBIOS     db 0    ;Set if to use IO.SYS or clear if to use SCPBIOS.SYS
  1719                              <1> OEMMEMPTR:  ;Used to save the allocated 64k block for OEMCALLBK
  1720 00001582 0000000000000000    <1> OEMDRVCHAIN dq 0    ;Pointer to the uninitialised device drivers
  1721                              <1> 
  1722 0000158A 000000000000000000- <1> initDrvBlk  db initReqPkt_size dup (0)  ;Used for making driver init reqs
  1722 00001593 000000000000000000- <1>
  1722 0000159C 000000000000000000- <1>
  1722 000015A5 00000000            <1>
  1723                              <1> tempPSP: ;Points to a 256 byte space that is set up appropriately
  1724                              <1>     istruc psp
  1725 000015A9 CD40                <1>     at psp.return,      db 0CDh, 40h
  1726 000015AB 0000000000000000    <1>     at psp.allocSize,   dd 0, 0 ;Second 0 is for the reserved dword
  1727 000015B3 0000000000000000    <1>     at psp.oldInt42h,   dq 0
  1728 000015BB 0000000000000000    <1>     at psp.oldInt43h,   dq 0
  1729 000015C3 0000000000000000    <1>     at psp.oldInt44h,   dq 0
  1730 000015CB 0000000000000000    <1>     at psp.parentPtr,   dq 0
  1731 000015D3 FFFFFFFFFFFFFFFFFF- <1>     at psp.jobFileTbl,  db 20 dup (0FFh)
  1731 000015DC FFFFFFFFFFFFFFFFFF- <1>
  1731 000015E5 FFFF                <1>
  1732 000015E7 0000000000000000    <1>     at psp.envPtr,      dq 0
  1733 000015EF 0000000000000000    <1>     at psp.rspPtr,      dq 0
  1734 000015F7 1400                <1>     at psp.jftSize,     dw 20 
  1735 000015F9 CD41CB              <1>     at psp.unixEntry,   db 0CDh, 41h, 0CBh
  1736 000015FC 0000000000000000    <1>     at psp.prevPSP,     dq 0
  1737 00001604 000000000000000000- <1>     at psp.fcb1,        db 16 dup (0)
  1737 0000160D 0000000000000000    <1>
  1738 00001615 000000000000000000- <1>     at psp.fcb2,        db 20 dup (0)
  1738 0000161E 000000000000000000- <1>
  1738 00001627 0000                <1>
  1739 00001629 000D00000000000000- <1>     at psp.dta,         db 0, CR, 126 dup (0)   ;Dummy empty command line
  1739 00001632 000000000000000000- <1>
  1739 0000163B 000000000000000000- <1>
  1739 00001644 000000000000000000- <1>
  1739 0000164D 000000000000000000- <1>
  1739 00001656 000000000000000000- <1>
  1739 0000165F 000000000000000000- <1>
  1739 00001668 000000000000000000- <1>
  1739 00001671 000000000000000000- <1>
  1739 0000167A 000000000000000000- <1>
  1739 00001683 000000000000000000- <1>
  1739 0000168C 000000000000000000- <1>
  1739 00001695 000000000000000000- <1>
  1739 0000169E 000000000000000000- <1>
  1739 000016A7 0000                <1>
  1740                              <1>     iend
    17                                  %include "./Source/Sysinit/oeminit.asm"
     1                              <1> %use masm
     2                              <1> 
     3                              <1> OEMINIT PROC NEAR
     4                              <1> ;Sets the Statistical data and adds any page tables that are needed
     5                              <1> ;Entered with:
     6                              <1> ;           rsi -> BIOS userbase
     7                              <1> ;           rdi -> APT load area (page aligned)
     8                              <1> ;           r15 -> Boot drive
     9                              <1> ;------------------------------------------------;
    10                              <1> ;      Start saving basic DOS data to the        ; 
    11                              <1> ;                OEM Variables                   ;
    12                              <1> ;------------------------------------------------;
    13 000016A9 31C0                <1>     xor eax, eax    ;Drive A:
    14 000016AB BB02000000          <1>     mov ebx, 2      ;Drive C:
    15 000016B0 41F6C780            <1>     test r15b, 80h  ;Is the hard drive bit set?
    16 000016B4 0F45C3              <1>     cmovnz eax, ebx
    17 000016B7 8805C2FEFFFF        <1>     mov byte [DFLTDRIVE], al    ;Set default drive
    18                              <1> ;Copy DOS to its final resting place
    19 000016BD 48893594030000      <1>     mov qword [biosUBase], rsi  ;Local OEM variable
    20 000016C4 C605B2FEFFFF08      <1>     mov byte [FILES], 8         ;Default 8 files, initially 5 only
    21 000016CB C605ACFEFFFF1E      <1>     mov byte [BUFFERS], 30      ;Default 30 buffers, at start 1
    22 000016D2 C605A7FEFFFF05      <1>     mov byte [LASTDRIVE], 5     ;Default Last drive value
    23                              <1>    ;If no detected Int 33h devices, halt 
    24 000016D9 CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    25 000016DB 49C1E818            <1>     shr r8, 3*8
    26 000016DF 4584C0              <1>     test r8b, r8b
    27 000016E2 0F842B030000        <1>     jz OEMHALT
    28 000016E8 4889F7              <1>     mov rdi, rsi
    29 000016EB 4881E700F0FFFF      <1>     and rdi, ~0FFFh ;round up to next 4Kb page after biosUBase
    30 000016F2 4881C700100000      <1>     add rdi, 1000h
    31                              <1> ;------------------------------------------------;
    32                              <1> ;      Add additional page tables before the     ;
    33                              <1> ;                   data area.                   ;
    34                              <1> ;------------------------------------------------;
    35                              <1> ;This will allow for up to 64Gb of addressible space
    36                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    37 000016F9 B900780000          <1>     mov ecx, aptSize/8   ;This many entries as qwords
    38 000016FE 57                  <1>     push rdi        ;rdi points to the APT space
    39 000016FF 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    39 00001708 00                  <1>
    40                              <1> pdtLoop:
    41 00001709 48AB                <1>     stosq
    42 0000170B 480500002000        <1>     add rax, 200000h
    43 00001711 FFC9                <1>     dec ecx
    44 00001713 75F4                <1>     jnz pdtLoop
    45 00001715 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
    46                              <1> ;Now we add every 4kb page to the page directory pointer table
    47                              <1> ;15 4kb pages to consider
    48 00001716 48893D48FEFFFF      <1>     mov qword [FINALDOSPTR], rdi ;rdi now points to where dSeg will go
    49 0000171D 57                  <1>     push rdi
    50 0000171E 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
    51 00001721 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
    52 00001724 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
    53 0000172B 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
    54 00001732 B93C000000          <1>     mov ecx, 60
    55 00001737 480D03000000        <1>     or rax, 3h      ;present and r/w
    56                              <1> pdptLoop:
    57 0000173D 48AB                <1>     stosq
    58 0000173F 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
    59 00001745 FFC9                <1>     dec ecx
    60 00001747 75F4                <1>     jnz pdptLoop
    61                              <1> 
    62 00001749 0F20DF              <1>     mov rdi, cr3    ;Reload cr3 to make the system aware of new table entries
    63 0000174C 0F22DF              <1>     mov cr3, rdi    ;(is this strictly necessary?)
    64                              <1> ;------------------------------------------------;
    65                              <1> ;       Set Device Driver Chain and Exit         ;
    66                              <1> ;------------------------------------------------;  
    67                              <1> ;Before we exit, set the device driver chain
    68 0000174F 48B8-               <1>     mov rax, driverChain
    68 00001751 [9F73000000000000]  <1>
    69 00001759 5F                  <1>     pop rdi
    70 0000175A 4801F8              <1>     add rax, rdi    ;Add the DOSSEG base address
    71 0000175D 4889051EFEFFFF      <1>     mov qword [OEMDRVCHAIN], rax  ;Store this value here
    72 00001764 C3                  <1>     ret
    73                              <1> aptSize equ 60*4096 ;(APT = Additional Page Tables)
    74                              <1> OEMINIT ENDP
    75                              <1> 
    76                              <1> OEMMCBINIT PROC NEAR
    77 00001765 B820E80000          <1>     mov eax, 0E820h ;Get memory map
    78 0000176A CD35                <1>     int 35h ; rsi has pointer to memory map
    79 0000176C 488B05E5020000      <1>     mov rax, qword [biosUBase]
    80 00001773 E8F6000000          <1>     call .mcbFindAddress
    81 00001778 7341                <1>     jnc .mcbi1  ;If found, proceed
    82                              <1>     ;Here, we try use E801h
    83 0000177A B801E80000          <1>     mov eax, 0E801h
    84 0000177F CD35                <1>     int 35h
    85 00001781 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
    86 00001784 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
    87 00001787 85C0                <1>     test eax, eax
    88 00001789 7417                <1>     jz .worst
    89 0000178B C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
    90 0000178E C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
    91 00001791 8905C9020000        <1>     mov dword [loProtMem], eax
    92 00001797 891DC7020000        <1>     mov dword [hiProtMem], ebx
    93 0000179D E919010000          <1>     jmp mcbBuild
    94                              <1> .worst:
    95                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
    96 000017A2 B800002000          <1>     mov eax, 200000h
    97 000017A7 488B1DAA020000      <1>     mov rbx, qword [biosUBase]   ;Get userbase
    98 000017AE 29D8                <1>     sub eax, ebx
    99 000017B0 8905AA020000        <1>     mov dword [loProtMem], eax  ;The leftover goes here
   100 000017B6 E900010000          <1>     jmp mcbBuild 
   101                              <1> .mcbi1:
   102 000017BB 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   103 000017BE 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   103 000017C7 00                  <1>
   104 000017C8 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   105 000017CC 0F85BC000000        <1>     jne .mcbFail
   106 000017D2 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   107                              <1>     ;PCI hole always exists so this value will always be a dword
   108 000017D6 890584020000        <1>     mov dword [loProtMem], eax
   109 000017DC 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   110 000017DF 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   111 000017E2 4881FB00000001      <1>     cmp rbx, 1000000h  
   112 000017E9 773A                <1>     ja .skipISA
   113                              <1> ;Here we deal with ISA hole issues
   114 000017EB B820E80000          <1>     mov eax, 0E820h
   115 000017F0 CD35                <1>     int 35h
   116 000017F2 48B800000001000000- <1>     mov rax, 1000000h
   116 000017FB 00                  <1>
   117 000017FC E86D000000          <1>     call .mcbFindAddress
   118 00001801 0F82B4000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   119 00001807 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   119 00001810 00                  <1>
   120 00001811 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   121 00001815 0F85A0000000        <1>     jne mcbBuild  
   122 0000181B 488B5808            <1>     mov rbx, qword [rax + 8]
   123 0000181F 891D3F020000        <1>     mov dword [hiProtMem], ebx   ;Save data 
   124                              <1> .skipISA:
   125 00001825 B820E80000          <1>     mov eax, 0E820h
   126 0000182A CD35                <1>     int 35h
   127 0000182C 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   127 00001835 00                  <1>
   128 00001836 E833000000          <1>     call .mcbFindAddress
   129 0000183B 727E                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   130 0000183D 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   130 00001846 00                  <1>
   131 00001847 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   132 0000184B 756E                <1>     jne mcbBuild   
   133 0000184D 488B5808            <1>     mov rbx, qword [rax + 8]
   134                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   135 00001851 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   135 0000185A 00                  <1>
   136 0000185B 4839CB              <1>     cmp rbx, rcx
   137 0000185E 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   138 00001862 48891DFF010000      <1>     mov qword [longMem], rbx   ;Save data 
   139 00001869 E94D000000          <1>     jmp mcbBuild
   140                              <1> .mcbFindAddress:
   141                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   142                              <1> ;Entry: rax = Address of arena to search for
   143                              <1> ;       rsi = Pointer to memory map
   144                              <1> ;       ecx = Number of 24 byte entries
   145                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   146                              <1> ;       CF=CY : value in rax not found
   147 0000186E 56                  <1>     push rsi
   148 0000186F 51                  <1>     push rcx
   149 00001870 50                  <1>     push rax
   150                              <1> .mfa0:
   151 00001871 483B06              <1>     cmp rax, qword [rsi]
   152 00001874 7410                <1>     je .mcbAddressFound
   153 00001876 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   154 0000187D FFC9                <1>     dec ecx
   155 0000187F 79F0                <1>     jns .mfa0
   156                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   157 00001881 58                  <1>     pop rax
   158 00001882 59                  <1>     pop rcx
   159 00001883 5E                  <1>     pop rsi
   160 00001884 F9                  <1>     stc
   161 00001885 C3                  <1>     ret
   162                              <1> .mcbAddressFound:
   163 00001886 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   164 00001889 59                  <1>     pop rcx ;Pop old rax value off
   165 0000188A 59                  <1>     pop rcx
   166 0000188B 5E                  <1>     pop rsi
   167 0000188C F8                  <1>     clc
   168 0000188D C3                  <1>     ret
   169                              <1> .mcbFail:
   170 0000188E 488D2D0C000000      <1>     lea rbp, mcbFailmsg
   171 00001895 B804130000          <1>     mov eax, 1304h
   172 0000189A CD30                <1>     int 30h
   173 0000189C E972010000          <1>     jmp OEMHALT
   174 000018A1 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   174 000018AA 6C6F636174696F6E20- <1>
   174 000018B3 4572726F720A0D00    <1>
   175                              <1> 
   176                              <1> mcbBuild:
   177                              <1> ;Actually build the MCB chain here
   178                              <1> ;Start by computing the difference between userbase and DOS area
   179 000018BB 488B1D96010000      <1>     mov rbx, qword [biosUBase]
   180 000018C2 488B35ACFCFFFF      <1>     mov rsi, qword [MCBANCHOR]  
   181 000018C9 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]    ;Get the size of the block
   182 000018CC 48C1E004            <1>     shl rax, 4      ;Convert to number of allocated bytes
   183 000018D0 480510000000        <1>     add rax, mcb_size   ;Add the mcb itself to the count
   184 000018D6 4801F0              <1>     add rax, rsi    ;Add the pointer to the mcb to get pointer to free space
   185 000018D9 4889C7              <1>     mov rdi, rax    ;Save this value as the pointer to the next MCB
   186 000018DC 4829D8              <1>     sub rax, rbx    ;Get difference from userbase and first byte after DOS
   187 000018DF 29057B010000        <1>     sub dword [loProtMem], eax  ;Remove difference from the free bytes count
   188 000018E5 0F8228010000        <1>     jc OEMHALT                  ;If this carries, fail
   189 000018EB 813D6B010000008000- <1>     cmp dword [loProtMem], 8000h   ;Need a minimum of 32Kb free space.
   189 000018F4 00                  <1>
   190 000018F5 0F8218010000        <1>     jb OEMHALT
   191 000018FB C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;Now mark anchor as not end
   192 000018FE 4889FB              <1>     mov rbx, rdi    ;Get the pointer to the free space back
   193 00001901 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   194 00001904 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   195 0000190C 31F6                <1>     xor esi, esi
   196 0000190E 8B354C010000        <1>     mov esi, dword [loProtMem]
   197 00001914 81EE10000000        <1>     sub esi, mcb_size   ;Now remove one mcb's worth of space
   198 0000191A C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   199 0000191D 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   200                              <1> 
   201                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   202 00001920 813D3A010000000000- <1>     cmp dword [hiProtMem], 0
   202 00001929 00                  <1>
   203 0000192A 746C                <1>     jz .skipISA
   204                              <1>     ;Here if an ISA hole exists, place a MCB around it
   205 0000192C 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   206                              <1>     ;Remove one MCB worth of space from alloc
   207 00001933 31C9                <1>     xor ecx, ecx
   208 00001935 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   209 00001938 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   210 0000193E C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   211 00001941 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   212 00001944 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   213 00001947 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   214 0000194A 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   215 00001952 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   215 0000195B 00                  <1>
   216 0000195C 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   217 0000195F 480510000000        <1>     add rax, mcb_size
   218 00001965 4829C1              <1>     sub rcx, rax    ;Take their difference
   219 00001968 C1E904              <1>     shr ecx, 4
   220 0000196B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   221 0000196E C1E104              <1>     shl ecx, 4  ;Get bytes again
   222 00001971 4881C310000000      <1>     add rbx, mcb_size
   223 00001978 4801CB              <1>     add rbx, rcx
   224                              <1>     ;RBX should now be at 16Mb
   225 0000197B C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   226 0000197E 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   227 00001986 8B0DD8000000        <1>     mov ecx, dword [hiProtMem]
   228 0000198C C1E904              <1>     shr ecx, 4  ;Get paragraphs
   229 0000198F 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   230 00001995 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   231                              <1> .skipISA:
   232                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   233                              <1>     ;rbx points to a block with "Z" marker
   234 00001998 813DC6000000000000- <1>     cmp dword [longMem], 0
   234 000019A1 00                  <1>
   235 000019A2 746E                <1>     jz .exit
   236                              <1>     ;Add PCI hole MCB
   237 000019A4 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   238                              <1>     ;Remove one MCB worth of space from alloc
   239 000019AB 31C9                <1>     xor ecx, ecx
   240 000019AD 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   241 000019B0 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   242 000019B6 C1E104              <1>     shl ecx, 4  ;Get bytes
   243 000019B9 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   244 000019BC 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   245 000019BF C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   246 000019C2 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   247 000019CA 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   247 000019D3 00                  <1>
   248 000019D4 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   249 000019D7 480510000000        <1>     add rax, mcb_size
   250 000019DD 4829C1              <1>     sub rcx, rax    ;Take their difference
   251 000019E0 C1E904              <1>     shr ecx, 4
   252 000019E3 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   253 000019E6 C1E104              <1>     shl ecx, 4  ;Get bytes again
   254 000019E9 4881C310000000      <1>     add rbx, mcb_size
   255 000019F0 4801CB              <1>     add rbx, rcx
   256                              <1>     ;RBX should now be at 4Gb
   257 000019F3 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   258 000019F6 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   259 000019FE 488B0D63000000      <1>     mov rcx, qword [longMem]
   260 00001A05 48C1E904            <1>     shr rcx, 4
   261 00001A09 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   262 00001A0F 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   263                              <1> .exit:
   264 00001A12 C3                  <1>     ret
   265                              <1> OEMMCBINIT ENDP
   266                              <1> 
   267                              <1> OEMHALT PROC    NEAR
   268                              <1> ;If a critical error occurs during sysinit, fail through here
   269                              <1> ;Int 42h, 43h and 44h point here during sysinit
   270 00001A13 488D2D0C000000      <1>     lea rbp, hltmsg
   271 00001A1A B804130000          <1>     mov eax, 1304h
   272 00001A1F CD30                <1>     int 30h
   273                              <1> .ei0:
   274 00001A21 F4                  <1>     hlt
   275 00001A22 F390                <1>     pause
   276 00001A24 EBFB                <1>     jmp short .ei0
   277 00001A26 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   277 00001A2F 7469616C6973696E67- <1>
   277 00001A38 20534350444F532E53- <1>
   277 00001A41 59532E205379737465- <1>
   277 00001A4A 6D2068616C74696E67- <1>
   277 00001A53 2E2E2E00            <1>
   278                              <1> OEMHALT ENDP
   279                              <1> 
   280                              <1> OEMCALLBK PROC NEAR
   281 00001A57 C3                  <1>     ret
   282                              <1> OEMCALLBK ENDP
   283                              <1> 
   284                              <1> ;OEM Only variables are permitted in this file. They are not 
   285                              <1> ; visible to SYSINIT
   286 00001A58 0000000000000000    <1> biosUBase   dq 0
   287 00001A60 00000000            <1> loProtMem   dd 0
   288 00001A64 00000000            <1> hiProtMem   dd 0
   289 00001A68 0000000000000000    <1> longMem     dq 0
    18                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    19                                  %include "./Source/BSS/dosSeg.asm"
     1                              <1> ;This file contains the main DOS data segment
     2                              <1> dosDataArea:
     3 00000000 <res 10h>           <1>     anchorMcb   resb mcb_size   ;This is space for the anchor MCB
     4 00000010 ??                  <1>     bootDrive   resb 1    ;The logical drive we booted from
     5                              <1> ;Above is the system stats
     6                              <1> ;Below is the DOS vars, DO NOT TOUCH FROM validNetNam TO NUMJOINDRV
     7                              <1> ;Both below variables can be edited with Int 41h AX=440Bh
     8 00000011 ????                <1>     validNetNam resw 1    ;Flag if machinename valid, deflt no=0
     9 00000013 ????                <1>     shareCount  resw 1    ;Share Retry Count, number of repeats before fail.
    10 00000015 ????                <1>     shareDelay  resw 1    ;Share Delay, in multiples of ms. (TEMP, just loop)
    11 00000017 ????????????????    <1>                 resq 1    ;Unused ptr for future, current disk buffer
    12 0000001F ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    13                              <1>     ;   A value of 0 means no chars buffered.
    14 00000027 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    15                              <1> sysVarsPtr:
    16 0000002F ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    17 00000037 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    18 0000003F ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    19                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    20 00000047 ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    21                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    22 0000004F ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    23 00000051 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    24 00000059 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    25 00000061 ????????????????    <1>     fcbsHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    26 00000069 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    27 0000006B ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    28 0000006C ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    29 0000006D ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    30 0000006E <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    31 00000090 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    32                              <1> ;Additional internal variables
    33 00000091 ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    34                              <1>     ;DOSMGR hook functions and variable here
    35                              <1>     ;All DOSMGR hooks are 8 byte pointers and have been introduced to allow
    36                              <1>     ; an external application to install itself as a multitasker into the
    37                              <1>     ; DOS kernel. DOS's behaviour changes accordingly when a multitasker 
    38                              <1>     ; is installed. It is recommended that a multitasker NOT be installed
    39                              <1>     ; when a file sharing broker is not installed but that is up to the 
    40                              <1>     ; implementer to decide.  
    41                              <1>     ;Three function hooks are provided. NOTE, all functions must preserve
    42                              <1>     ; ALL registers used.
    43                              <1>     ;
    44                              <1>     ;launchTask:
    45                              <1>     ;This allows for a multitasker to install its handling routine for 
    46                              <1>     ; launching tasks. Note this is called after all setup
    47                              <1>     ; for the EXE has been done except for setting the PSP.
    48                              <1>     ; If the mode bSuFunc = 4, then we have we have the following:
    49                              <1>     ;       ecx = mode of termination
    50                              <1>     ;           = 00 -> Upon terminating, leave task in Zombie mode
    51                              <1>     ;                   awaiting for a task to read it's return code
    52                              <1>     ;           = 01 -> Upon terminating, discard all resources allocated
    53                              <1>     ;                   to the task.
    54                              <1>     ;           > 01 -> Error code, unknown function (01h).
    55                              <1>     ;This function must return to the caller via DOS with CF=CY if an error 
    56                              <1>     ;   and eax = Error code or CF=NC if all ok. DOS will then return to
    57                              <1>     ;   the parent task, with the background task hopefully scheduled to run
    58                              <1>     ;   in the DOSMGR.
    59                              <1>     ;Either before or on initial run, DOSMGR must set currentDTA in a bgTasks'
    60                              <1>     ; SDA to psp+80h. This can be done in launchBgTask.
    61                              <1>     ;
    62                              <1>     ;terminateTask:
    63                              <1>     ;This allows for a multitasker to install its handling routine for
    64                              <1>     ; cleaning up resources allocated to a task. 
    65                              <1>     ;
    66                              <1>     ;Specific function definitions:
    67                              <1>     ;
    68                              <1>     ;If we enter
    69                              <1>     ;   Input:  bx = FCB drive statuses
    70                              <1>     ;           ecx = Termination mode setting
    71                              <1>     ;           rsi = RSP value to start with
    72                              <1>     ;           rbp = execFrame. Use this to get parentPSP data et al.
    73                              <1>     ;           qword [rbp - execFrame.pProgEP] = RIP value to launch from
    74                              <1>     ;   Output: CF=NC -> Proceed with launch of bg task
    75                              <1>     ;           CF=CY -> Error exit, errorcode in eax
    76                              <1> dosMgrHooks:
    77 00000092 ??                  <1>     dosMgrPresent   db ?    ;Clear if no mgr, else set to -1
    78 00000093 ????????????????    <1>     launchTask      dq ?    ;Registers a new task, with specifics based on bSubfunc
    79 0000009B ????????????????    <1>     terminateTask   dq ?    ;Called to tell the MGR that this task is ending
    80                              <1> 
    81                              <1>     ;DLL Manager hook functions here
    82                              <1>     ;All DLLMGR hooks are 8 byte pointers and are new to the DOS kernel.
    83                              <1>     ;They allow for the installation of a DLL manager program, which hooks
    84                              <1>     ; these pointers, to point to their own subroutines in the DLLMGR prog.
    85                              <1>     ;These hooks are called from within EXEC, only for PE type executables
    86                              <1>     ; and from within EXIT. 
    87                              <1>     ;
    88                              <1>     ;In EXEC mode, modes 0 and 1 create a PSP for the task and thus the 
    89                              <1>     ; task is self standing and has a PSP as a Unique ID. 
    90                              <1>     ;If mode 3, this is an overlay EXE. This means it is not it's own task and 
    91                              <1>     ; is an extension of the parent task. In such a case, the DLL Manager must 
    92                              <1>     ; look at where the overlay is to be loaded (execFrame.pProgBase), and if 
    93                              <1>     ; there is already an overlay there, to remove it's functions from the 
    94                              <1>     ; registery, replacing them with the new overlay's functions. All overlay
    95                              <1>     ; exports must be flagged as belonging to the parent task PSP so that
    96                              <1>     ; on EXIT, they can be removed from the registry. 
    97                              <1>     ;
    98                              <1>     ;In EXIT, the PSP of the ending task must be taken
    99                              <1>     ; into consideration, as if the PSP isn't registered then the task ending
   100                              <1>     ; is a .COM file or an .EXE with no exports.
   101                              <1>     ;Furthermore, if register fails (due to memory or namespace constraints),
   102                              <1>     ; it must return CF=CY.
   103                              <1> dllHooks:
   104 000000A3 ????????????????    <1>     registerDLL     resq 1  ;Entered with rbp = execFrame
   105 000000AB ????????????????    <1>     unloadDLLHook   resq 1  ;
   106                              <1>     ;Share hook functions here
   107                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
   108                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
   109                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
   110                              <1> 
   111                              <1>     ;Note to programmer - Please adjust as necessary:
   112                              <1>     ;Functions which are nowhere called (yet) are noted as UNUSED in caps.
   113                              <1>     ;Those which are not meant to be used are noted as unused in lower case.
   114                              <1>     ;Those suffixed with a ? have their future in question.
   115                              <1>     ;Those suffixed with a / are done partially wrt MSDOS.
   116                              <1> 
   117                              <1>     ;SCPDOS has an optional handle, openFileCheck. This function can be used 
   118                              <1>     ; to see if there are any open handles. Its implementation is completely
   119                              <1>     ; optional, and an equivalent form of the function is provided for older
   120                              <1>     ; SHARE versions that might be ported that don't have a particular function.
   121                              <1>     ;This function is defined as follows:
   122                              <1>     ; Input: fname1Ptr -> Filename we want to see if there are any open records
   123                              <1>     ;                       for.
   124                              <1>     ; Output: CF=CY -> Handle not supported.
   125                              <1>     ;         CF=NC -> Handle supported. 
   126                              <1>     ;           ZF=ZE -> No Files open.
   127                              <1>     ;           ZF=NZ -> Some files are open.
   128                              <1> shareHooks:
   129                              <1>     ;markerShare resq 1  ;Marker Share hook
   130 000000B3 ????????????????    <1>     openFileCheck   resq 1  ;Check if share record for file exist       DONE
   131 000000BB ????????????????    <1>     openShare   resq 1  ;Share called on open.                          DONE 
   132 000000C3 ????????????????    <1>     closeShare  resq 1  ;Share called on close.                         DONE/
   133 000000CB ????????????????    <1>     closeCompShare  resq 1  ;Share to close all files for a machine.    DONE
   134 000000D3 ????????????????    <1>     closeTaskShare  resq 1  ;Share to close all files for a task.       DONE
   135 000000DB ????????????????    <1>     closeNameShare  resq 1  ;Share to close file by name.               DONE/
   136 000000E3 ????????????????    <1>     lockFileShare   resq 1  ;Share to lock file region.                 DONE
   137 000000EB ????????????????    <1>     unlockFileShare resq 1  ;Share to unlock file region.               DONE
   138 000000F3 ????????????????    <1>     checkFileLockShare  resq 1  ;Share to check file region locked.     DONE
   139 000000FB ????????????????    <1>     openFileListShare   resq 1  ;Share to get open file list entry.     DONE
   140 00000103 ????????????????    <1>     updateFCBfromSFTShr resq 1  ;Share to update FCB from the SFT.      UNUSED?
   141 0000010B ????????????????    <1>     fstClstOfFCBShare   resq 1  ;Share to get first cluster of FCB.     UNUSED?
   142 00000113 ????????????????    <1>     closeDupFileShare   resq 1  ;Share to close file if dup for proc.   DONE
   143 0000011B ????????????????    <1>     closeNewHdlShare    resq 1  ;Share to close hdls of rec opened file. DONE
   144 00000123 ????????????????    <1>     updateDirShare      resq 1  ;Share to update dir info in SFT.       DONE 
   145                              <1> ;Create SFT header and corresponding array of five default sft entries
   146 0000012B <res Ah>            <1>     firstSftHeader  resb sfth_size
   147 00000135 <res 4Fh>           <1>     firstSft    resb sft_size
   148 00000184 <res 4Fh>           <1>     secondSft   resb sft_size
   149 000001D3 <res 4Fh>           <1>     thirdSft    resb sft_size
   150 00000222 <res 4Fh>           <1>     fourthSft   resb sft_size
   151 00000271 <res 4Fh>           <1>     fifthSft    resb sft_size
   152                              <1> 
   153                              <1> ;Virtual CONsole Buffers
   154 000002C0 ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
   155                              <1>     ;Only incremented when CON device runs vCon
   156                              <1> vConBuf:    ;Proper buffer symbol
   157 000002C1 ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
   158 000002C2 <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
   159                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
   160 00000342 <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
   161 000003C2 ??                  <1>     bufpad      resb 1     ;Used to pad with LF
   162                              <1> 
   163 000003C3 ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
   164 000003C4 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
   165 000003C5 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
   166 000003C6 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
   167                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   168                              <1> 
   169 000003C7 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
   170                              <1> ;Server stuff. Default to all zeros (blank)
   171 000003C8 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
   172                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   173 000003C9 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5E01h call
   174 000003CA <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5E01h) (set to SPC)    
   175                              <1> ;Swappable Data Area
   176 000003DA <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
   177 000003FA ??                  <1>                 resb 1  ;Alignment byte
   178                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   179 000003FB ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
   180 000003FC ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
   181 000003FD ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
   182 000003FE ??                  <1>     errorLocus  resb 1  ;Where the error took place  
   183 000003FF ????                <1>     errorExCde  resw 1  ;Extended Error Code
   184 00000401 ??                  <1>     errorAction resb 1  ;Suggested action for error  
   185 00000402 ??                  <1>     errorClass  resb 1  ;Error Class
   186 00000403 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
   187 0000040B ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   188 00000413 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   189                              <1> 
   190 0000041B ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   191 00000423 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   192                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   193                              <1>     ;Lower byte: User Specified
   194 00000425 ??                  <1>     currentDrv  resb 1  ;Default drive x
   195 00000426 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   196                              <1> ;SDA, needs to be replaced between processes
   197                              <1> sdaDOSSwap:
   198 00000427 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   199 0000042F ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   200 00000437 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   201 00000439 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   202 00000441 ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   203 00000449 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   204 00000451 ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   205 00000453 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   206 0000045B ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   207 0000045C ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   208 0000045D ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   209                              <1> 
   210 0000045E ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   211 00000466 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   212 0000046E ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   213 00000476 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   214 0000047E ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   215                              <1> ;The below flag tells DOS to print ^C in the termination function
   216 0000047F ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   217 00000480 ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   218                              <1> ;Time stuff
   219                              <1> ;Read the below two as a word
   220 00000481 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   221 00000482 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   222 00000483 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   223 00000484 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   224 00000486 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   225                              <1> 
   226 00000487 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   227 00000488 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   228 00000489 ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   229                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   230                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   231                              <1> ; without forcing to re-build the whole primary request block.
   232                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   233                              <1> ; with secondary char output going through the secondary header
   234                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   235                              <1> ; for output)
   236                              <1> ;ioReqPkt is the largest possible packet
   237 0000048A <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   238 000004B4 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   239                              <1>     altRet: ;Accessed as a qword
   240 000004DE <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   241 00000508 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   242                              <1> ;Swappable Buffers
   243 00000509 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   244                              <1>     ;We add an additional byte to save ah too
   245 0000050F ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   246 00000511 <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   247 00000591 <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   248 00000611 ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   249 00000619 ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   250 00000621 ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   251                              <1> ;Misc bookkeeping flags and vars
   252 00000622 <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal search block (fullsize unlike DOS)
   253 0000064D <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   254 0000066D <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need a tmp CDS
   255 000006C8 <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   256 000006D4 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards for rename
   257 000006E0 ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   258                              <1> 
   259 000006E8 ??                  <1>     volIncmpFCB resb 1  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   260 000006E9 ??                  <1>     extFCBAttr  resb 1  ;Extended FCB file attribute
   261 000006EA ??                  <1>     extFCBFlag  resb 1  ;Set to -1 if Extended FCB
   262 000006EB ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   263 000006EC ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   264 000006ED ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   265 000006EE ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   266 000006EF ??                  <1>     rwFlag      resb 1  ;00h=Read, -1=Write, read/write/share error reporting
   267 000006F0 ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   268 000006F1 ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   269                              <1> 
   270 000006F2 ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   271 000006F3 ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   272 000006F4 ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   273 000006F5 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlvl
   274 000006F6 ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   275 000006F7 ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   276 000006F8 ??                  <1>     workingDrv  resb 1  ;Working drive number, 0 based, from DPB
   277                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   278                              <1> workingDD:  ;Create a symbol for the working device driver too
   279 000006F9 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   280 00000701 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   281 00000709 ????????????????    <1>     workingFCB  resq 1  ;Ptr to the caller FCB for FCB function
   282                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   283                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   284 00000711 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   285 00000719 ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   286 00000721 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   287 00000729 ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   288 0000072B ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   289 0000072D ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   290                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   291                              <1> ; and 32 byte offset into the sector for directory
   292 00000735 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   293                              <1> sectTfr:    ;Symbol to use this var to hold a counter on disk read/write ops 
   294                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   295 0000073D ????                <1>     entry       resw 1  ;32 byte offset into a sector or #fats sectors/fat
   296                              <1> ;***************************************************|
   297                              <1> ; Needs to be set up before any file access         |
   298                              <1> ; These vars keep track of file access properties   |
   299                              <1> ;   and must be used only for such purposes.        |
   300                              <1> ;***************************************************|
   301 0000073F ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   302 00000743 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   303                              <1> 
   304 00000747 ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   305 0000074B ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   306 0000074C ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   307                              <1> 
   308 00000754 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   309 00000756 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   310                              <1> ;***************************************************|
   311 0000075A ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   312 0000075E ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   313 00000762 ??                  <1>     fileGrowing resb 1  ;Flag to indicate the file is growing
   314 00000763 ????????            <1>     bytesAppend resd 1  ;Number of bytes by which a file has been extended by
   315 00000767 ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   316 0000076B ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   317                              <1> ;Directory stuff
   318 0000076F ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   319 00000773 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   320 00000777 ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   321 00000779 ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   322                              <1> ;Error DPB 
   323 0000077D ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary situations
   324 00000785 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   325                              <1>     
   326 00000786 <res 2Bh>           <1>     renameFFBlk resb ffBlock_size   ;Source file "find first" block
   327 000007B1 <res 20h>           <1>     renameDir   resb fatDirEntry_size   ;Build new file dir entry here
   328                              <1> ;Stacks and scratch SFT
   329 000007D1 ??????????????      <1>     alignb  8
   330 000007D8 <res 528h>          <1>     critStack   resq 165
   331 00000D00 ????????????????    <1>     critStakTop resq 1
   332                              <1> 
   333 00000D08 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   334                              <1>     
   335 00000D57 ??                  <1>     alignb  8
   336 00000D58 <res 638h>          <1>     AuxStack    resq 199
   337 00001390 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   338 00001398 <res 638h>          <1>     DiskStack   resq 199
   339 000019D0 ????????????????    <1>     DiskStakTop resq 1
   340                              <1> 
   341 000019D8 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   342 000019D9 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls! 
   343                              <1> ;Putting this in SDA as multiple tasks can try to parse EXE's simultaneously
   344 000019DA <res 70h>           <1>     exeHdrSpace resb imageFileOptionalHeader_size   ;Use for parsing an EXE hdr
   345 00001A4A <res 28h>           <1>     sectHdr     resb imageSectionHdr_size   ;Use to load one sctn hdr at a time
   346                              <1> ;Exception handler vars in SDA now 
   347 00001A72 <res 10h>           <1>     byteBuffer  resb 16 ;Used by DOS exception handler to build strings
   348 00001A82 ??                  <1>     haltDOS     resb 1  ;Set by DOS exception handler to indicate DOS will halt
   349                              <1>     sdaLen      equ     $ - sda 
   350                              <1>     sdaDOSLen   equ     $ - sdaDOSSwap
   351                              <1> 
   352                              <1> ;Additional variables NOT in the SDA
   353 00001A83 ????????????????    <1>     serverDispTblPtr    resq 1  ;DO NOT MOVE! Used to find server dispatch tbl
   354 00001A8B ??                  <1>     xActDrv     resb 1  ;0 based number of last drive to transact
   355 00001A8C <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   356                              <1>     ;for saving the current header when quickly doing a second request
   357                              <1> 
   358 00001AB6 ??                  <1>     lastDiskNum resb 1  ;Last drive that operated
   359 00001AB7 ????                <1>     lastOpTime  resw 1  ;Packed Time of last successful disk operation
   360                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   361                              <1> inExtASCII:
   362 00001AB9 ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   363 00001ABA ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   364                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   365                              <1>     ; copy of the date/time record
   366                              <1>     ;The idt doesnt need to be in the SDA as we will halt interrupts
   367                              <1>     ; until we get/set the address. Thus the IDT entry returned is the 
   368                              <1>     ; correct one AT the time of calling up to "the time it takes to get
   369                              <1>     ; to the read IDT routine".
   370                              <1>     dosIdtPtr:          ;41h/25h will always read a new copy of IDT here
   371 00001ABC ????                <1>         .limit  dw ?
   372 00001ABE ????????????????    <1>         .base   dq ?
   373                              <1>     dSegLen     equ     $
    20                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    21                                  %define currSegVBase section.resSeg.vstart
    22                                  %include "./Source/Data/staticData.asm"
     1                              <1> 
     2                              <1> ;-----------------------------------:
     3                              <1> ;       Static Data Variables       :
     4                              <1> ;-----------------------------------:
     5 00000000 00                  <1> dosMajor    db 00h      ;Version 0
     6 00000001 5F                  <1> dosMinor    db 95      ;.95
     7 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
     7 0000000B 535953              <1>
     8 0000000E 534350444F5320202E- <1> dosKernName db "SCPDOS  .SYS"
     8 00000017 535953              <1>
     9                              <1> ;-----------------------------------:
    10                              <1> ;        Static Data Tables         :
    11                              <1> ;-----------------------------------:
    12                              <1> ctryTbl:
    13                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
    14 0000001A 0100                <1>     dw 1            
    15 0000001C 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
    16 00000021 2C00                <1>     db ",",0
    17 00000023 2E00                <1>     db ".",0
    18 00000025 2D00                <1>     db "-",0
    19 00000027 3A00                <1>     db ":",0
    20 00000029 00                  <1>     db 0
    21 0000002A 02                  <1>     db 2 
    22 0000002B 00                  <1>     db 0 
    23 0000002C 0000000000000000    <1>     dq 0 
    24 00000034 2C00                <1>     db ",",0    
    25 00000036 000000000000000000- <1>     db 0,0,0,0,0,0,0,0,0,0
    25 0000003F 00                  <1>
    26                              <1> 
    27                              <1> ;IO Char table
    28                              <1> ;This table has Request header length, command code and error flags
    29                              <1> ; as a packed DWORD entry
    30                              <1> ioRqCmdErrTbl:
    31                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    32                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    33 00000040 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    34 00000044 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    35 00000048 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    36 0000004C 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    37 00000050 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    38 00000054 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    39                              <1> 
    40                              <1> 
    41                              <1> 
    42                              <1> ;Keyboard vCon static data that can be edited and replaced by a user if they
    43                              <1> ; wish to install their own custom logic.
    44 00000058 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    45 00000060 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    46 00000061 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    47                              <1> ;Extended ASCII keys with special meanings
    48 00000062 3B                  <1> extKeyTbl   db eF1
    49 00000063 5224                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    50 00000065 3C                  <1>             db eF2
    51 00000066 4424                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    52 00000068 3D                  <1>             db eF3
    53 00000069 4B24                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    54 0000006B 3E                  <1>             db eF4
    55 0000006C 8024                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    56 0000006E 3F                  <1>             db eF5
    57 0000006F C524                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    58 00000071 40                  <1>             db eF6
    59 00000072 DB24                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    60 00000074 41                  <1>             db eF7
    61 00000075 E224                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    62 00000077 4B                  <1>             db eCursL
    63 00000078 A923                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    64 0000007A 4D                  <1>             db eCursR
    65 0000007B 5224                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    66 0000007D 52                  <1>             db eIns
    67 0000007E ED24                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    68 00000080 53                  <1>             db eDel
    69 00000081 F424                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    70                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    71                              <1> 
    72                              <1> ;When counting the number of days, first compute the number of years since
    73                              <1> ; 1980 and your year. 
    74                              <1> ;Then, using the table below, find the number of leap years between 1980
    75                              <1> ; and (YourYear - 1). 
    76                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
    77                              <1> ; days since 01/01/1980 and 01/01/YourYear.
    78                              <1> ;
    79                              <1> ;Use the months table to get the number of days in a normal month as leap 
    80                              <1> ; years are added using the previous comment.
    81                              <1> 
    82                              <1> ;This table is the number of days in the month
    83                              <1> ;The function which updates the days in Feb writes the number to this table
    84                              <1> monthsTbl:  
    85 00000083 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    85 0000008C 1F1E1F              <1>
    86                              <1> 
    87                              <1> ;Error tables
    88                              <1> errXlatTbl:
    89                              <1> ;Each entry is n bytes long, defined as
    90                              <1> ; Byte 0      : DOS function number for which translation will occur
    91                              <1> ; Byte 1      : Length of the table entry - 2
    92                              <1> ; Bytes n - 3 : Acceptable Error codes
    93                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
    94                              <1> ;The table is terminated with a single -1 byte
    95                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
    96                              <1> ; only on entry to a disk function
    97 0000008F 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
    98 00000093 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
    99 00000098 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   100 0000009E 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   101 000000A2 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   102 000000A8 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   103 000000AF 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   104 000000B2 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   105 000000B6 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   106 000000BA 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   107 000000BF 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   108 000000C3 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   109 000000C9 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   110 000000D0 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   111 000000D4 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   112 000000D8 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   113 000000DB 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   114 000000DF 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   115 000000E3 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   116 000000E8 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   117 000000F0 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   118 000000F2 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   119 000000F7 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   120 000000FA 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   121 00000100 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   122 00000104 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   123 00000107 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   124 0000010D 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   125 00000114 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   126 0000011A 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   127 0000011E 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   128 00000122 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   129 00000127 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   130 0000012A FF                  <1>     db -1   ;End Of Table marker
   131                              <1> 
   132                              <1> 
   133                              <1> extErrTbl:
   134                              <1> ;This table contains the default values for how to respond
   135                              <1> ; to particular errors. Fields with -1 need to be filled in before
   136                              <1> ; setting variables using this table.
   137                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   138                              <1> ; Byte 0: Extended Error Code as a byte
   139                              <1> ; Byte 1: Error Class
   140                              <1> ; Byte 2: Error Suggested Action
   141                              <1> ; Byte 3: Error Locus
   142                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   143                              <1> ;
   144                              <1> ;Error 01: Invalid function number
   145 0000012B 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   146                              <1> ;Error 02: File not found
   147 0000012F 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   148                              <1> ;Error 03: Path not found
   149 00000133 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   150                              <1> ;Error 04: Too many open handles, and no handles are left
   151 00000137 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   152                              <1> ;Error 05: Access being denied
   153 0000013B 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   154                              <1> ;Error 06: Invalid File handle being provided
   155 0000013F 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   156                              <1> ;Error 07: MCB chain destroyed
   157 00000143 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   158                              <1> ;Error 08: No Memory remaining
   159 00000147 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   160                              <1> ;Error 09: Invalid MCB block Address
   161 0000014B 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   162                              <1> ;Error 0A: Bad Environment block
   163 0000014F 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   164                              <1> ;Error 0B: Data provided in a bad format
   165 00000153 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   166                              <1> ;Error 0C: Access Code Invalid
   167 00000157 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   168                              <1> ;Error 0D: Error due to Invalid Data provided
   169 0000015B 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   170                              <1> ;Error 0F: Error due to a bad drive letter being provided
   171 0000015F 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   172                              <1> ;Error 10: Error due to attempting to delete the CWD
   173 00000163 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   174                              <1> ;Error 11: Error due to a unknown device being used
   175 00000167 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   176                              <1> ;Error 12: No more file handles available
   177 0000016B 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   178                              <1> ;Error 50: Network request not supported
   179 0000016F 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   180                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   181 00000173 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   182                              <1> ;Error 21: File Locking Violation
   183 00000177 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   184                              <1> ;Error 54: Too many levels of redirection error
   185 0000017B 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   186                              <1> ;Error 56: Bad resource password provided
   187 0000017F 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   188                              <1> ;Error 52: Directory already exists
   189 00000183 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   190                              <1> ;Error 32: Network request not supported by DOS
   191 00000187 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   192                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   193 0000018B 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   194                              <1> ;Error 57: Bad parameter in request
   195 0000018F 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   196                              <1> ;Error 53: Fail was returned from Int 44h
   197 00000193 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   198                              <1> ;Error 24: Sharing Buffer Full
   199 00000197 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   200 0000019B FFFFFFFF            <1>     dd -1   ;End of table signature
   201                              <1> 
   202                              <1> badDirNameChar: ;This table needs to be replaced in other Codepages (i.e. Kanji)
   203 0000019F 000102030405060708- <1>     db 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
   203 000001A8 090A0B0C0D0E0F      <1>
   204 000001AF 101112131415161718- <1>     db 10h,11h,12h,13h,14h,15h,16h,17h,18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
   204 000001B8 191A1B1C1D1E1F      <1>
   205 000001BF 222A2B2C2E2F3A3B3C- <1>     db '"', "*", "+",",",".","/",":",";","<","=",">","?","[","\","]","|"
   205 000001C8 3D3E3F5B5C5D7C      <1>
   206                              <1> badDirNameCharL equ $ - badDirNameChar
   207                              <1> ;The chars * ? . \ / need to always be handled separately
   208                              <1> 
   209                              <1> extAsciiTbl:    ;This table needs to be replaced in other Codepages
   210 000001CF 809A45418E418F8045- <1>     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 45h, 45h, 45h, 49h, 49h, 49h
   210 000001D8 4545494949          <1>
   211 000001DD 8E8F9092924F994F55- <1>     db 8Eh, 8Fh, 90h, 92h, 92h, 4Fh, 99h, 4Fh, 55h, 55h, 59h, 99h, 9Ah, 9Bh
   211 000001E6 5559999A9B          <1>
   212 000001EB 9C9D9E9F41494F55A5- <1>     db 9Ch, 9Dh, 9Eh, 9Fh, 41h, 49h, 4Fh, 55h, 0A5h, 0A5h, 0A6h, 0A7h, 0A8h
   212 000001F4 A5A6A7A8            <1>
   213 000001F8 A9AAABACADAEAFB0B1- <1>     db 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h
   213 00000201 B2B3B4              <1>
   214 00000204 B5B6B7B8B9BABBBCBD- <1>     db 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h 
   214 0000020D BEBFC0              <1>
   215 00000210 C1C2C3C4C5C6C7C8C9- <1>     db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh
   215 00000219 CACBCC              <1>
   216 0000021C CDCECFD0D1D2D3D4D5- <1>     db 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h 
   216 00000225 D6D7D8              <1>
   217 00000228 D9DADBDCDDDEDFE0E1- <1>     db 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
   217 00000231 E2E3E4              <1>
   218 00000234 E5E6E7E8E9EAEBECED- <1>     db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h
   218 0000023D EEEFF0              <1>
   219 00000240 F1F2F3F4F5F6F7F8F9- <1>     db 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh
   219 00000249 FAFBFC              <1>
   220 0000024C FDFEFF              <1>     db 0FDh, 0FEh, 0FFh
   221                              <1> 
   222                              <1> asciiCharProperties:   ;This table needs to replaces in other Codepages
   223 0000024F F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F0h, 0F6h, 0F6h 
   223 00000258 F0F6F6              <1>
   224 0000025B F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h
   224 00000264 F6F6F6              <1>
   225 00000267 F6F6F6F6F6F6F6F6F8- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F8h, 0FFh, 0F6h, 0FFh 
   225 00000270 FFF6FF              <1>
   226 00000273 FFFFFFFFFFFFFFF4F4- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h 
   226 0000027C FFFEF6              <1>
   227 0000027F FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h 
   227 00000288 FFF4F4              <1>
   228 0000028B F4F4F4FFFFFFFFFFFF- <1>     db 0F4h, 0F4h, 0F4h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   228 00000294 FFFFFF              <1>
   229 00000297 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   229 000002A0 FFFFFF              <1>
   230 000002A3 FFFFFFFFFFFFFFF6F6- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh 
   230 000002AC F6FFFF              <1>
   231 000002AF FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   231 000002B8 FFFFFF              <1>
   232 000002BB FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   232 000002C4 FFFFFF              <1>
   233 000002C7 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   
   234                              <1> 
   235                              <1> hardErrorStack:
   236 000002CF 13                  <1>     db errWpd
   237 000002D0 0B                  <1>     db eClsMedia
   238 000002D1 07                  <1>     db eActRetUsr
   239 000002D2 02                  <1>     db eLocDsk
    23                                  %include "./Source/Data/dispTbl.asm"
     1                              <1> ;Kernel Dispatch Function Table
     2                              <1> 
     3                              <1> kDispTbl:
     4 000002D3 DB50                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
     5 000002D5 BD1B                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
     6 000002D7 CA1B                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
     7 000002D9 9E1C                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
     8 000002DB C71C                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
     9 000002DD CF1C                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    10 000002DF E71C                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    11 000002E1 1A1D                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    12 000002E3 3F1D                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    13 000002E5 9E1D                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    14 000002E7 5120                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    15 000002E9 AD1D                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    16 000002EB B91D                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    17 000002ED F369                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    18 000002EF 256A                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    19 000002F1 0728                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    20 000002F3 0728                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    21 000002F5 9025                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    22 000002F7 4926                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    23 000002F9 D026                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    24 000002FB 0728                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    25 000002FD 0728                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    26 000002FF F227                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    27 00000301 FF26                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    28 00000303 A86C                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    29 00000305 3E6A                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    30 00000307 BD27                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    31 00000309 456A                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    32 0000030B 476A                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    33 0000030D A86C                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    34 0000030F A86C                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    35 00000311 DD6A                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    36 00000313 A86C                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    37 00000315 0728                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    38 00000317 0728                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    39 00000319 6A27                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    40 0000031B 0728                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    41 0000031D 906A                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    42 0000031F E04F                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    43 00000321 0728                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    44 00000323 0728                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    45 00000325 E327                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    46 00000327 CA22                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    47 00000329 F122                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    48 0000032B F722                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    49 0000032D 1823                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    50 0000032F BA6A                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    51 00000331 D027                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    52 00000333 C86A                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    53 00000335 AD50                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    54 00000337 DF6A                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    55 00000339 3969                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    56 0000033B 176B                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    57 0000033D 286B                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    58 0000033F 376B                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    59 00000341 5F59                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    60 00000343 8859                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    61 00000345 9F12                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    62 00000347 CF14                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    63 00000349 A816                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    64 0000034B FC29                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    65 0000034D 0D2A                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    66 0000034F 372B                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    67 00000351 762B                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    68 00000353 B12B                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    69 00000355 BD2B                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    70 00000357 222C                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    71 00000359 912C                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    72 0000035B 3245                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    73 0000035D A92D                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    74 0000035F E42D                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    75 00000361 7017                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    76 00000363 784A                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    77 00000365 7C4C                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    78 00000367 844D                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    79 00000369 2752                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    80 0000036B DD50                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
    81 0000036D 7B6B                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
    82 0000036F F92D                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
    83 00000371 642E                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
    84 00000373 6769                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
    85 00000375 7069                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
    86 00000377 896B                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
    87 00000379 9A6B                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
    88 0000037B 786C                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
    89 0000037D CD4F                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
    90 0000037F 942E                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
    91 00000381 202F                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
    92 00000383 2C4F                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
    93 00000385 7F6C                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
    94 00000387 682F                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
    95 00000389 3030                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
    96 0000038B 4430                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
    97 0000038D A96C                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
    98 0000038F 6D6E                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
    99 00000391 D36E                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   100 00000393 EB17                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   101 00000395 8A69                <1>     dw systemServices - kDispTbl      ;AH = 61H, PROCESS MANAGEMENT, NEW
   102 00000397 7969                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   103 00000399 A86C                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   104 0000039B 8269                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   105 0000039D B759                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   106 0000039F B759                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   107 000003A1 B030                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   108 000003A3 ED31                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   109 000003A5 A86C                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   110                              <1> kDispTblL  equ $ - kDispTbl 
   111                              <1> 
   112                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   113 000003A7 26                  <1>     db mDispTblL/2  ;Number of entries in table
   114 000003A8 9C6E                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   115 000003AA 073A                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   116 000003AC D062                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   117 000003AE 9F6E                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   118 000003B0 1864                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   119 000003B2 F81A                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   120 000003B4 7759                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   121 000003B6 6400                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   122 000003B8 EF43                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   123 000003BA 9600                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   124 000003BC 826F                <1>     dw shareCriticalError - mDispTbl    ;AX=120Ah, Signal Share Critical Error
   125 000003BE 0A6F                <1>     dw shareCheckOpenViolation - mDispTbl  ;AX=120Bh, Signal Sharing Violation 
   126 000003C0 D236                <1>     dw openDriverMux - mDispTbl ;AX=120Ch, Open device
   127 000003C2 A924                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   128 000003C4 A400                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   129 000003C6 BE00                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   130 000003C8 CC00                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   131 000003CA 7464                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   132 000003CC 5664                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   133 000003CE 2464                <1>     dw uppercaseChar - mDispTbl ;AX=1213h, Uppercase Char
   134 000003D0 A265                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   135 000003D2 DF00                <1>     dw flushBuffer - mDispTbl   ;AX=1215h
   136 000003D4 0743                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   137 000003D6 E663                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   138 000003D8 FE62                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   139 000003DA 8B63                <1>     dw getCDS - mDispTbl    ;AX=1219h
   140 000003DC FC0B                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   141 000003DE 3C24                <1>     dw setDaysInFeb - mDispTbl  ;AX=121Bh
   142 000003E0 D46B                <1>     dw noOp - mDispTbl  ;AX=121Ch -> Old Checksum memory
   143 000003E2 D46B                <1>     dw noOp - mDispTbl  ;AX=121Dh -> Old Sum Memory
   144 000003E4 8D64                <1>     dw compareFileNames - mDispTbl ;AX=121Eh, Compare Filenames
   145 000003E6 3C63                <1>     dw buildNewCDS - mDispTbl   ;AX=121Fh, Build CDS
   146 000003E8 3C43                <1>     dw getJFTPtr - mDispTbl     ;AX=1220h, Get JFT entry
   147 000003EA 0D17                <1>     dw trueNameMultiplex - mDispTbl     ;AX=1221h, Truename
   148 000003EC FF67                <1>     dw setErrorVars - mDispTbl ;AX=1222h, Set Extended Error Info
   149 000003EE 3811                <1>     dw checkIfCharDevice - mDispTbl  ;AX=1223, Check If Char Device
   150 000003F0 E76E                <1>     dw shareRetryCountdown - mDispTbl   ;AX=1224h, Share Retry
   151 000003F2 4B64                <1>     dw strlen2 - mDispTbl   ;AX=1225h, strlen
   152                              <1> mDispTblL   equ     $ - mDispTbl
   153                              <1> 
   154                              <1> serverDispTbl:  ;Server Dispatch functions
   155 000003F4 0B                  <1>     db serverDispTblL/2                         ;Number of entries
   156 000003F5 CF6B                <1>     dw serverDispatch - serverDispTbl           ;AX=5D00h
   157 000003F7 216C                <1>     dw commitAllFilesForProcess - serverDispTbl ;AX=5D01h
   158 000003F9 7A6C                <1>     dw closeFilesByName - serverDispTbl         ;AX=5D02h
   159 000003FB 8B6C                <1>     dw closeFilesByComputer - serverDispTbl     ;AX=5D03h
   160 000003FD 936C                <1>     dw closeFilesByProcess - serverDispTbl      ;AX=5D04h
   161 000003FF 9B6C                <1>     dw getOpenFileListEntry - serverDispTbl     ;AX=5D05h
   162 00000401 B66C                <1>     dw getSDAData - serverDispTbl               ;AX=5D06h
   163 00000403 E06C                <1>     dw printerRedir - serverDispTbl             ;AX=5D07h
   164 00000405 E06C                <1>     dw printerRedir - serverDispTbl             ;AX=5D08h
   165 00000407 E06C                <1>     dw printerRedir - serverDispTbl             ;AX=5D09h
   166 00000409 ED6C                <1>     dw setExtendedErrorInfo - serverDispTbl     ;AX=5D0Ah
   167                              <1> serverDispTblL   equ     $ - serverDispTbl
    24                                  %if DEBUG
    25                                  %include "./Source/Debug/debug.asm"
    26                                  %endif
    27                                  %include "./Source/Kernel/FAT/buffun.asm"
     1                              <1> ;This file contains FAT disk buffer related functions that
     2                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
     3                              <1> ;----------------------------------------------------
     4                              <1> ;           Externally referenced functions         :
     5                              <1> ;----------------------------------------------------
     6                              <1> 
     7                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
     8                              <1> ;Sets the buffer in rdi to the head of the chain
     9                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    10                              <1> ;Output: Buffer header set to the head of the chain
    11 0000040B 48393D(51000000)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    12 00000412 7428                <1>     je .exit
    13 00000414 56                  <1>     push rsi
    14 00000415 488B35(51000000)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    15                              <1> .mainlp:
    16 0000041C 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    17 0000041F 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    18 00000421 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    19 00000424 EBF6                <1>     jmp short .mainlp
    20                              <1> .fnd:
    21 00000426 57                  <1>     push rdi
    22 00000427 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    23 0000042A 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    24 0000042D 5F                  <1>     pop rdi ;Get original buf back
    25 0000042E 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    26 00000431 488735(51000000)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    27 00000438 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    28 0000043B 5E                  <1>     pop rsi
    29                              <1> .exit:
    30                              <1>     return
    13                              <2> %%_ret:
    14 0000043C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> 
    32                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h 
    33                              <1> ;1 External reference
    34                              <1> ;Input: rdi = Buffer header to flush and free
    35 0000043D E844000000          <1>     call flushBuffer
    36 00000442 7206                <1>     jc .exit
    37                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    38 00000444 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    39                              <1> .exit:
    40                              <1>     return
    13                              <2> %%_ret:
    14 0000044A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    41                              <1> 
    42                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    43                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    44                              <1> ;Output: rdi = First disk buffer
    45 0000044B 488B3D(51000000)    <1>     mov rdi, [bufHeadPtr]
    46 00000452 57                  <1>     push rdi
    47                              <1> .lp:
    48 00000453 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    49 00000457 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    50 0000045A 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    51 00000461 75F0                <1>     jne .lp
    52 00000463 5F                  <1>     pop rdi
    53                              <1>     return
    13                              <2> %%_ret:
    14 00000464 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> 
    55                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    56                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    57                              <1> ; second buffer in the chain in rdi
    58                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    59                              <1> ;Output: rdi = Second buffer in the chain
    60 00000465 52                  <1>     push rdx
    61 00000466 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    62 00000469 E89DFFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    63 0000046E 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    64 00000471 5A                  <1>     pop rdx
    65                              <1>     return
    13                              <2> %%_ret:
    14 00000472 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    66                              <1> 
    67                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    68                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    69                              <1> ;Input: rdi = Buffer header to start searching at
    70                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    71                              <1> ;        ZF=ZE => No unreferenced buffer found
    72 00000473 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    73 00000477 750C                <1>     jnz .exit
    74 00000479 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    75 0000047C 4881FFFFFFFFFF      <1>     cmp rdi, -1
    76 00000483 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    77                              <1> .exit:
    78                              <1>     return
    13                              <2> %%_ret:
    14 00000485 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    79                              <1> 
    80                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
    81                              <1> ;Flushes the data in a sector buffer to disk!
    82                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
    83                              <1> ;Exit:  CF=NC : Success
    84                              <1> ;       CF=CY : Fail, terminate the request
    85                              <1> ;First make request to device driver
    86 00000486 50                  <1>     push rax
    87 00000487 53                  <1>     push rbx
    88 00000488 51                  <1>     push rcx
    89 00000489 52                  <1>     push rdx
    90 0000048A 56                  <1>     push rsi
    91 0000048B 55                  <1>     push rbp
    92                              <1> ;If the buffer is freed, skip flushing to avoid issues
    93 0000048C 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
    94 00000490 7454                <1>     je .fbFreeExit  ;If it is free exit
    95 00000492 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
    96 00000496 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
    97                              <1> .fbRequest0:
    98 00000498 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
    99 0000049D F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   100 000004A1 7406                <1>     jz .fbRequest1
   101 000004A3 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   102                              <1> .fbRequest1:
   103 000004A9 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   104 000004AC B901000000          <1>     mov ecx, 1  ;One sector to copy
   105 000004B1 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   106 000004B5 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   107 000004B9 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   108 000004BD E861600000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   109 000004C2 E8F35E0000          <1>     call absDiskDriverCall    ;Make Driver Request
   110 000004C7 7525                <1>     jnz .fbFail
   111                              <1> ;Now check if the buffer was a FAT, to write additional copies
   112 000004C9 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   113 000004CD 7417                <1>     jz .fbFreeExit  ;If not, exit
   114 000004CF FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   115 000004D2 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   116 000004D4 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   117 000004D7 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   118 000004DB E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   119                              <1> .fbFreeExit1:
   120 000004E0 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   121 000004E3 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   122                              <1> .fbFreeExit:
   123 000004E6 F8                  <1>     clc
   124                              <1> .fbExitFail:
   125 000004E7 5D                  <1>     pop rbp
   126 000004E8 5E                  <1>     pop rsi
   127 000004E9 5A                  <1>     pop rdx
   128 000004EA 59                  <1>     pop rcx
   129 000004EB 5B                  <1>     pop rbx
   130 000004EC 58                  <1>     pop rax
   131                              <1>     return
    13                              <2> %%_ret:
    14 000004ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   132                              <1> .fbFail:
   133                              <1> ;Enter here only if the request failed
   134 000004EE FFCE                <1>     dec esi
   135 000004F0 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   136                              <1> ;Request failed thrice, critical error call
   137 000004F2 C605(5B040000)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   138 000004F9 E8B7570000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   139 000004FE 3C01                <1>     cmp al, critRetry
   140 00000500 7496                <1>     je .fbRequest0
   141                              <1>     ;Else we fail (Ignore=Fail here)
   142 00000502 F9                  <1>     stc ;Set error flag to indicate fail
   143 00000503 E9DFFFFFFF          <1>     jmp .fbExitFail
   144                              <1> 
   145                              <1> testDirtyBufferForDrive:    ;External linkage
   146                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   147                              <1> ;Input: al = Drive number (0 based)
   148                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   149                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   150 00000508 53                  <1>     push rbx
   151 00000509 488B1D(51000000)    <1>     mov rbx, qword [bufHeadPtr]
   152                              <1> .tdbfdCheckBuffer:
   153 00000510 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   154 00000513 7509                <1>     jne .tdbfdGotoNextBuffer
   155 00000515 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   156 00000519 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   157 0000051B F9                  <1>     stc ;Else dirty buffer found, set carry flag
   158                              <1> .tdbfdExit:
   159 0000051C 5B                  <1>     pop rbx
   160                              <1>     return
    13                              <2> %%_ret:
    14 0000051D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   161                              <1> .tdbfdGotoNextBuffer:
   162 0000051E 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   163 00000521 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   164 00000528 74F2                <1>     je .tdbfdExit
   165 0000052A EBE4                <1>     jmp short .tdbfdCheckBuffer
   166                              <1> 
   167                              <1> 
   168                              <1> cancelWriteThroughBuffers:  ;External linkage
   169                              <1> ; Frees all buffers for the workingDPB
   170                              <1> ; Alternative symbol for the same function. Used on Fails and Aborts.
   171                              <1> freeBuffersForDPB:  ;External Linkage (Before Get BPB in medchk)
   172                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   173                              <1> ; to have a drive number of -1, thus freeing it
   174                              <1> ;Given DPB is in rbp
   175 0000052C 53                  <1>     push rbx
   176 0000052D 488B1D(51000000)    <1>     mov rbx, qword [bufHeadPtr]
   177                              <1> .i0:
   178 00000534 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   179 00000538 7506                <1>     jne .i1 ;If no, skip freeing
   180 0000053A 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   181                              <1> .i1:
   182 00000540 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   183 00000543 4881FBFFFFFFFF      <1>     cmp rbx, -1
   184 0000054A 75E8                <1>     jne .i0
   185                              <1> .exit:
   186 0000054C 5B                  <1>     pop rbx
   187                              <1>     return
    13                              <2> %%_ret:
    14 0000054D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   188                              <1> 
   189                              <1> ;******* NEW BUFFER HANDLING *******
   190                              <1> writeThroughBuffer: ;External linkage
   191                              <1> ; Flushes the current disk buffer to disk.
   192                              <1> ; Returns: CF=NC => All is well, buffer flushed and dirty bit cleaned
   193                              <1> ;          CF=CY => Buffer failed to flush, marked as dirty and return 
   194 0000054E 57                  <1>     push rdi
   195 0000054F 488B3D(2D070000)    <1>     mov rdi, qword [currBuff]
   196 00000556 E82BFFFFFF          <1>     call flushBuffer
   197 0000055B 7204                <1>     jc short .exit
   198 0000055D 806709BF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~dirtyBuffer
   199                              <1> .exit:
   200 00000561 5F                  <1>     pop rdi
   201                              <1>     return
    13                              <2> %%_ret:
    14 00000562 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   202                              <1> ;******* NEW BUFFER HANDLING *******
   203                              <1> 
   204                              <1> writeThroughBuffers:    ;External linkage
   205                              <1> ; Flushes and resets the dirty bit for all dirty bufs for working drive
   206                              <1> ; Returns: CF=NC => All is well, buffer flushed and dirty bit cleaned
   207                              <1> ;          CF=CY => Buffer failed to flush, marked as dirty and return
   208 00000563 50                  <1>     push rax
   209 00000564 57                  <1>     push rdi
   210 00000565 488B05(F9060000)    <1>     mov rax, qword [workingDPB]    ;Get current DPB to compare with
   211 0000056C 488B3D(51000000)    <1>     mov rdi, qword [bufHeadPtr]
   212                              <1> .mainLp:
   213 00000573 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;When we get to the end of the buffer chain, exit
   214 0000057A 7416                <1>     je .exit   
   215 0000057C 48394717            <1>     cmp qword [rdi + bufferHdr.driveDPBPtr], rax  ;Compare dpb numbers
   216 00000580 750B                <1>     jne .nextBuffer
   217 00000582 E8FFFEFFFF          <1>     call flushBuffer    ;Flush this buffer if it on dpb we want
   218 00000587 7209                <1>     jc .exit  ;If something went wrong, exit
   219 00000589 806709BF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~dirtyBuffer
   220                              <1> .nextBuffer:
   221 0000058D 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Goto next buffer
   222 00000590 EBE1                <1>     jmp short .mainLp
   223                              <1> .exit:
   224 00000592 5F                  <1>     pop rdi
   225 00000593 58                  <1>     pop rax
   226                              <1>     return
    13                              <2> %%_ret:
    14 00000594 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> markBufferDirty:
   229 00000595 55                  <1>     push rbp
   230 00000596 9C                  <1>     pushfq
   231 00000597 488B2D(2D070000)    <1>     mov rbp, qword [currBuff]
   232 0000059E 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   233 000005A2 9D                  <1>     popfq
   234 000005A3 5D                  <1>     pop rbp
   235                              <1>     return
    13                              <2> %%_ret:
    14 000005A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   236                              <1> 
   237                              <1> 
   238                              <1> getBuffer: ;Internal Linkage ONLY
   239                              <1> ;
   240                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   241                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   242                              <1> ;Flushes if not in disk change mode. 
   243                              <1> ;If in disk change mode, will check to see if the selected buffer 
   244                              <1> ; has data referring a device using the same DPB as we are changing.
   245                              <1> ; If it is, skip flushing, if not, flush first!
   246                              <1> ;
   247                              <1> ;This function will return a pointer to the desired data sector OR 
   248                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   249                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   250                              <1> ;Entry: rax = Sector to read
   251                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   252                              <1> ;       rsi = DPB to use for transaction
   253                              <1> ;Exit:  CF=NC => 
   254                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   255                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   256 000005A5 51                  <1>     push rcx
   257 000005A6 52                  <1>     push rdx
   258 000005A7 56                  <1>     push rsi
   259 000005A8 57                  <1>     push rdi
   260 000005A9 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   261 000005AB E832010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   262 000005B0 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   263 000005B7 7418                <1>     je .rbReadNewSector
   264 000005B9 48893D(2D070000)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   265 000005C0 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer ;Only set if in buf chain
   266                              <1> .rbExit:
   267 000005C4 F8                  <1>     clc
   268                              <1> .rbExitNoFlag:
   269 000005C5 5F                  <1>     pop rdi
   270 000005C6 5E                  <1>     pop rsi
   271 000005C7 5A                  <1>     pop rdx
   272 000005C8 59                  <1>     pop rcx
   273 000005C9 488B1D(2D070000)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   274                              <1>     return
    13                              <2> %%_ret:
    14 000005D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   275                              <1> .rbReadNewSector:
   276 000005D1 E8B5000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   277 000005D6 803D(D8190000)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   278 000005DD 7506                <1>     jne .flush  ;We are not, flush buffer
   279 000005DF 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   280 000005E3 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used. Lose the sector
   281                              <1> .flush:
   282 000005E5 E853FEFFFF          <1>     call flushAndFreeBuffer
   283 000005EA 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   284                              <1> .skipFlush:
   285                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   286                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   287                              <1>     ; is no longer owned by that File so we mark the owner as none
   288 000005EC 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   289 000005F4 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   290 000005F7 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   291 000005FA 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   292 000005FE 80F902              <1>     cmp cl, fatBuffer
   293 00000601 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   294 00000603 7503                <1>     jne .rbNonFATbuffer
   295 00000605 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   296                              <1> .rbNonFATbuffer:
   297 00000608 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   298 0000060B 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   299 0000060E 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   300 00000611 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   301 00000615 C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   302 00000619 E804000000          <1>     call readSectorBuffer ;Carry the flag from the request
   303 0000061E 72A5                <1>     jc .rbExitNoFlag
   304 00000620 EBA2                <1>     jmp short .rbExit
   305                              <1> 
   306                              <1> readSectorBuffer:   ;Internal Linkage
   307                              <1> ;Reads a sector into a built sector buffer
   308                              <1> ;Entry: rdi = Pointer to buffer header
   309                              <1> ;Exit:  CF=NC : Success
   310                              <1> ;       CF=CY : Fail, terminate the request
   311                              <1> ;       rbx pointing to buffer header
   312                              <1> ;First make request to device driver
   313 00000622 50                  <1>     push rax
   314 00000623 53                  <1>     push rbx
   315 00000624 51                  <1>     push rcx
   316 00000625 52                  <1>     push rdx
   317 00000626 56                  <1>     push rsi
   318 00000627 55                  <1>     push rbp
   319                              <1> .rsRequest0:
   320 00000628 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   321 0000062D F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   322 00000631 7406                <1>     jz .rsRequest1
   323 00000633 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   324                              <1> .rsRequest1:
   325 00000639 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   326 0000063C B901000000          <1>     mov ecx, 1  ;One sector to copy
   327 00000641 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   328 00000645 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   329 00000649 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   330 0000064D E8DC5E0000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   331 00000652 E8635D0000          <1>     call absDiskDriverCall    ;Make Driver Request
   332 00000657 7508                <1>     jnz .rsFail
   333                              <1> .rsExit:
   334 00000659 F8                  <1>     clc
   335                              <1> .rsExitFail:
   336 0000065A 5D                  <1>     pop rbp
   337 0000065B 5E                  <1>     pop rsi
   338 0000065C 5A                  <1>     pop rdx
   339 0000065D 59                  <1>     pop rcx
   340 0000065E 5B                  <1>     pop rbx
   341 0000065F 58                  <1>     pop rax
   342                              <1>     return
    13                              <2> %%_ret:
    14 00000660 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   343                              <1> .rsFail:
   344                              <1> ;Enter here only if the request failed
   345 00000661 FFCE                <1>     dec esi
   346 00000663 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   347                              <1> ;Request failed thrice, critical error call
   348                              <1> ;First free the buffer if we failed to read data into it 
   349 00000665 0FB74F08            <1>     movzx ecx, word [rdi + bufferHdr.driveNumber]   ;Save drv num for retry
   350 00000669 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh ;Free buffer and clear flags
   351 0000066F C605(5B040000)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   352 00000676 E83A560000          <1>     call diskDevErr
   353 0000067B 3C01                <1>     cmp al, critRetry
   354 0000067D 7506                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   355 0000067F 66894F08            <1>     mov word [rdi + bufferHdr.driveNumber], cx ;Put drvNm + flgs if trying again
   356 00000683 EBA3                <1>     jmp short .rsRequest0
   357                              <1> .fail:
   358 00000685 F9                  <1>     stc ;Set error flag to indicate fail
   359 00000686 E9CFFFFFFF          <1>     jmp .rsExitFail
   360                              <1>     
   361                              <1> findLRUBuffer: ;Internal Linkage
   362                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   363                              <1> ; in rbx and the currBuff variable
   364                              <1> ;Input: Nothing
   365                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   366                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   367 0000068B 52                  <1>     push rdx
   368 0000068C 488B3D(51000000)    <1>     mov rdi, qword [bufHeadPtr]
   369 00000693 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   370 00000697 7436                <1>     je .flbExit 
   371 00000699 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   372 000006A0 742D                <1>     je .flbExit
   373                              <1> .flbWalk:
   374 000006A2 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   375 000006A5 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   376 000006A8 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   377 000006AC 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   378 000006AE 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   379 000006B5 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   380 000006B7 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   381                              <1> .flbHeadLink:
   382 000006BE 488B15(51000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   383 000006C5 48893D(51000000)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   384 000006CC 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   385                              <1> .flbExit:
   386 000006CF 5A                  <1>     pop rdx
   387 000006D0 48893D(2D070000)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   388                              <1>     return
    13                              <2> %%_ret:
    14 000006D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   389                              <1> .flbFreeLink:
   390 000006D8 51                  <1>     push rcx
   391 000006D9 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   392 000006DC 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   393 000006DF 59                  <1>     pop rcx
   394 000006E0 EBDC                <1>     jmp short .flbHeadLink
   395                              <1> 
   396                              <1> findSectorInBuffer:     ;Internal linkage
   397                              <1> ;Finds the Buffer for a sector belonging to a particular dpb device
   398                              <1> ;If the sector is not in a buffer, returns with a -1
   399                              <1> ;Input: rax = Sector number
   400                              <1> ;       dl = Drive number
   401                              <1> ;Output: rdi = Buffer hdr pointer or -1
   402 000006E2 488B3D(51000000)    <1>     mov rdi, qword [bufHeadPtr]
   403                              <1> .fsiCheckBuffer:
   404 000006E9 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   405 000006EC 7507                <1>     jne .fsiGotoNextBuffer
   406 000006EE 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   407 000006F2 7501                <1>     jne .fsiGotoNextBuffer
   408                              <1> .fsiExit:
   409                              <1>     return
    13                              <2> %%_ret:
    14 000006F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   410                              <1> .fsiGotoNextBuffer:
   411 000006F5 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   412 000006F8 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   413 000006FF 74F3                <1>     je .fsiExit
   414 00000701 EBE6                <1>     jmp short .fsiCheckBuffer
   415                              <1> 
   416                              <1> ;-----------------------------------------------------------------------------
   417                              <1> ;SPECIAL BUFFER FUNCTIONS
   418                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   419                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   420                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   421                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   422                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   423                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   424                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   425                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   426                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   427                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   428                              <1> ;-----------------------------------------------------------------------------
   429                              <1> getBufForDataNoFile:
   430                              <1> ;Returns a buffer to use for disk data in rbx
   431                              <1> ;Requires a File Handle.
   432                              <1> ;Input: [workingDPB] = DPB to transact on
   433                              <1> ;       rax = Sector to transfer
   434                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   435 00000703 51                  <1>     push rcx
   436 00000704 B108                <1>     mov cl, dataBuffer
   437 00000706 56                  <1>     push rsi
   438 00000707 57                  <1>     push rdi
   439 00000708 488B35(F9060000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   440 0000070F E891FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   441 00000714 725F                <1>     jc getBufCommon.exit
   442 00000716 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   443 0000071E EB55                <1>     jmp short getBufCommon.exit
   444                              <1> getBufForDirNoFile:
   445                              <1> ;Returns a buffer to use for disk dir data in rbx
   446                              <1> ;Requires a File Handle.
   447                              <1> ;Input: [workingDPB] = DPB to transact on
   448                              <1> ;       rax = Sector to transfer
   449                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   450 00000720 51                  <1>     push rcx
   451 00000721 B104                <1>     mov cl, dirBuffer
   452 00000723 56                  <1>     push rsi
   453 00000724 57                  <1>     push rdi
   454 00000725 488B35(F9060000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   455 0000072C E874FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   456 00000731 7242                <1>     jc getBufCommon.exit
   457 00000733 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   458 0000073B EB38                <1>     jmp short getBufCommon.exit
   459                              <1> getBufForFat:
   460                              <1> ;Returns a buffer to use for fat data in rbx
   461                              <1> ;Input: [workingDPB] = DPB to transact on
   462                              <1> ;       rax = Sector to transfer
   463                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   464 0000073D 51                  <1>     push rcx
   465 0000073E B102                <1>     mov cl, fatBuffer
   466 00000740 EB03                <1>     jmp short getBufCommon2
   467                              <1> getBufForDOS:
   468                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   469                              <1> ;Input: [workingDPB] = DPB to transact on
   470                              <1> ;       rax = Sector to transfer
   471                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   472 00000742 51                  <1>     push rcx
   473 00000743 B101                <1>     mov cl, dosBuffer
   474                              <1> getBufCommon2:
   475 00000745 56                  <1>     push rsi
   476 00000746 57                  <1>     push rdi    ;Push rdi to preserve it
   477 00000747 488B35(F9060000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   478 0000074E EB15                <1>     jmp short getBufCommon.makeReq
   479                              <1> getBufForDir:
   480                              <1> ;Returns a buffer to use for disk directory data in rbx
   481                              <1> ;Input: [currentSFT] = File to manipulate
   482                              <1> ;       rax = Sector to transfer
   483                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   484 00000750 51                  <1>     push rcx
   485 00000751 B104                <1>     mov cl, dirBuffer
   486 00000753 EB03                <1>     jmp short getBufCommon
   487                              <1> getBufForData:
   488                              <1> ;Returns a buffer to use for disk data in rbx
   489                              <1> ;Requires a File Handle.
   490                              <1> ;Input: [currentSFT] = File to manipulate
   491                              <1> ;       rax = Sector to transfer
   492                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   493 00000755 51                  <1>     push rcx
   494 00000756 B108                <1>     mov cl, dataBuffer
   495                              <1> getBufCommon:
   496 00000758 56                  <1>     push rsi
   497 00000759 57                  <1>     push rdi
   498 0000075A 488B3D(21070000)    <1>     mov rdi, qword [currentSFT]
   499 00000761 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   500                              <1> .makeReq:
   501 00000765 E83BFEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   502 0000076A 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   503                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   504                              <1>     ; flushed to the file!
   505                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   506                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   507                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   508 0000076C F6C103              <1>     test cl, dosBuffer | fatBuffer
   509 0000076F 7504                <1>     jnz .exit
   510 00000771 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   511                              <1> .exit:
   512 00000775 5F                  <1>     pop rdi
   513 00000776 5E                  <1>     pop rsi
   514 00000777 59                  <1>     pop rcx
   515                              <1>     return
    13                              <2> %%_ret:
    14 00000778 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   516                              <1> 
   517                              <1> flushFile:
   518                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   519                              <1> ; FAT/DOS buffers to flush
   520                              <1> ; We flush and free, and set to head of chain before continuing to search
   521                              <1> ;Input: rdi = is the file (sft) we wish to flush
   522                              <1> ;Output: CF=NC => All ok
   523                              <1> ;        CF=CY => A sector failed, exit. 
   524 00000779 57                  <1>     push rdi
   525 0000077A 56                  <1>     push rsi
   526                              <1>     ;First check if the file has been written to?
   527 0000077B 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   528 00000781 7534                <1>     jnz .exitNoFlush ;Exit without flushing if set
   529 00000783 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   530 00000786 488B3D(51000000)    <1>     mov rdi, qword [bufHeadPtr]
   531                              <1> .ffLoop:
   532 0000078D 4881FFFFFFFFFF      <1>     cmp rdi, -1
   533 00000794 741B                <1>     je .exit
   534 00000796 F6470907            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer | dirBuffer
   535 0000079A 751E                <1>     jnz .found  ;Flush if either bit is set
   536 0000079C 48817F1FFFFFFFFF    <1>     cmp qword [rdi + bufferHdr.owningFile], -1  ;If owning file is -1, flush too
   537 000007A4 7414                <1>     je .found
   538 000007A6 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   539 000007AA 740E                <1>     je .found
   540 000007AC 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   541 000007AF EBDC                <1>     jmp short .ffLoop
   542                              <1> .exit:
   543                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   544 000007B1 66814E054000        <1>     or word [rsi + sft.wDeviceInfo], blokFileNoFlush  ;Set that bit again!
   545                              <1> .exitNoFlush:
   546 000007B7 5E                  <1>     pop rsi
   547 000007B8 5F                  <1>     pop rdi
   548                              <1>     return
    13                              <2> %%_ret:
    14 000007B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> .found:
   550                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   551                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   552 000007BA E87EFCFFFF          <1>     call flushAndFreeBuffer ;Flush and free buffer
   553 000007BF 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   554                              <1>     ;If the sector has been successfully flushed, then it
   555                              <1>     ; is no longer owned by that File so we mark the owner as none
   556 000007C1 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   557 000007C9 E897FCFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   558 000007CE EBBD                <1>     jmp short .ffLoop
    28                                  %include "./Source/Kernel/FAT/fat.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;       File System routines        :
     3                              <1> ;-----------------------------------:
     4                              <1> getFATtype:
     5                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
     6                              <1> ;Entry: rbp = DPB to ascertain FAT
     7                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
     8 000007D0 53                  <1>     push rbx
     9 000007D1 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    10 000007D4 B902000000          <1>     mov ecx, 2  ;FAT 32 marker
    11 000007D9 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    12 000007DF 730C                <1>     jae .exit
    13 000007E1 FFC9                <1>     dec ecx     ;FAT 16 marker
    14 000007E3 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    15 000007E9 7302                <1>     jae .exit
    16 000007EB FFC9                <1>     dec ecx     ;FAT 12 marker
    17                              <1> .exit:
    18 000007ED 5B                  <1>     pop rbx
    19                              <1>     return
    13                              <2> %%_ret:
    14 000007EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> clust2FATEntry:
    22                              <1> ;Converts a cluster number to a offset in the FAT
    23                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    24                              <1> ;        eax = Cluster number to look for
    25                              <1> ;Exit:   eax = Sector on disk of FAT 
    26                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    27                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    28 000007EF 53                  <1>     push rbx
    29 000007F0 55                  <1>     push rbp
    30 000007F1 488B2D(F9060000)    <1>     mov rbp, qword [workingDPB]
    31 000007F8 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    32 000007FB 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    33 00000801 731E                <1>     jae .fat32
    34 00000803 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    35 00000809 7209                <1>     jb .fat12
    36                              <1> ;FAT16
    37 0000080B D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    38 0000080D 6801000000          <1>     push qword 1
    39 00000812 EB15                <1>     jmp short .common
    40                              <1> .fat12:
    41 00000814 89C1                <1>     mov ecx, eax    ;ecx = eax
    42 00000816 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    43 00000818 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    44 0000081A 6800000000          <1>     push qword 0
    45 0000081F EB08                <1>     jmp short .common
    46                              <1> .fat32:
    47 00000821 6802000000          <1>     push qword 2
    48 00000826 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    49                              <1> .common:
    50                              <1> ;eax has the FAToffset
    51 00000829 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    52 0000082D 31D2                <1>     xor edx, edx    ;edx = 0
    53 0000082F F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    54 00000831 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    55 00000835 01D8                <1>     add eax, ebx
    56 00000837 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    57 00000838 5D                  <1>     pop rbp
    58 00000839 5B                  <1>     pop rbx
    59                              <1>     return
    13                              <2> %%_ret:
    14 0000083A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> getStartSectorOfCluster:
    62                              <1> ;Input: eax = Cluster Number
    63                              <1> ;       rbp = dpb pointer
    64                              <1> ;Output: rax = Starting Sector number for cluster
    65                              <1> ;Gives the data sector we are at in the current cluster
    66                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    67 0000083B 51                  <1>     push rcx
    68 0000083C 09C0                <1>     or eax, eax ;Zero upper dword
    69 0000083E 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    70                              <1> .fat32Root:
    71 00000840 482D02000000        <1>     sub rax, 2
    72 00000846 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    73 00000849 48D3E0              <1>     shl rax, cl
    74 0000084C 31C9                <1>     xor ecx, ecx
    75 0000084E 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    76 00000851 4801C8              <1>     add rax, rcx
    77                              <1>     ;rax now has the first sector of the current cluster
    78 00000854 59                  <1>     pop rcx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00000855 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .rootDir:
    81 00000856 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
    82 00000859 E872FFFFFF          <1>     call getFATtype
    83 0000085E 81F902000000        <1>     cmp ecx, 2
    84 00000864 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
    85                              <1>     ;Else rax has the first sector of the Root Dir
    86 00000866 59                  <1>     pop rcx
    87                              <1>     return
    13                              <2> %%_ret:
    14 00000867 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> 
    90                              <1> getLastClusterInChain:
    91                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
    92                              <1> ;Input: eax = Cluster to start searching at
    93                              <1> ;Output: eax = Last cluster in chain
    94                              <1> ;If input eax = 0, output eax = 0
    95 00000868 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
    96                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000086A 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    97 0000086C 53                  <1>     push rbx
    98                              <1> .lp:
    99 0000086D 89C3                <1>     mov ebx, eax
   100 0000086F E8C9010000          <1>     call readFAT
   101 00000874 7209                <1>     jc .exit
   102 00000876 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   103 0000087B 75F0                <1>     jne .lp
   104 0000087D 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   105                              <1> .exit: 
   106 0000087F 5B                  <1>     pop rbx
   107                              <1>     return
    13                              <2> %%_ret:
    14 00000880 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> getNumberOfClustersInChain:
   110                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   111                              <1> ;Input: eax = Cluster to start searching at
   112                              <1> ;Output: eax = Number of clusters in the chain
   113                              <1> ;If input eax = 0, output eax = 0
   114 00000881 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   115                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000883 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   116 00000885 51                  <1>     push rcx
   117 00000886 31C9                <1>     xor ecx, ecx
   118                              <1> .lp:
   119 00000888 FFC1                <1>     inc ecx
   120 0000088A E8AE010000          <1>     call readFAT
   121 0000088F 7209                <1>     jc .exit
   122 00000891 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   123 00000896 75F0                <1>     jne .lp
   124 00000898 89C8                <1>     mov eax, ecx    ;Get the count
   125                              <1> .exit: 
   126 0000089A 59                  <1>     pop rcx
   127                              <1>     return
    13                              <2> %%_ret:
    14 0000089B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> getClusterInChain:
   130                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   131                              <1> ;If an EOC is encountered, then ecx will not be 
   132                              <1> ;Input: eax = Start Cluster to start searching from
   133                              <1> ;       ecx = Number of clusters to go forwards by;
   134                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   135                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   136                              <1> ;Also usual CF babble.
   137 0000089C 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   138                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000089E 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   139 000008A0 53                  <1>     push rbx
   140 000008A1 67E30F              <1>     jecxz .exit
   141                              <1> .lp:
   142 000008A4 89C3                <1>     mov ebx, eax
   143 000008A6 E892010000          <1>     call readFAT
   144 000008AB 7206                <1>     jc .exit
   145 000008AD FFC9                <1>     dec ecx
   146 000008AF 75F3                <1>     jnz .lp
   147 000008B1 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   148                              <1> .exit:
   149 000008B3 5B                  <1>     pop rbx
   150                              <1>     return
    13                              <2> %%_ret:
    14 000008B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> startNewChain:
   153                              <1> ;Working dpb must be set
   154                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   155                              <1> ;If CF=CY, hard error
   156 000008B5 53                  <1>     push rbx
   157 000008B6 56                  <1>     push rsi
   158 000008B7 E862000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   159 000008BC 721A                <1>     jc .exit    ;Disk read error?
   160 000008BE 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   161 000008C3 7413                <1>     je .exit
   162 000008C5 BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   163 000008CA 89C3                <1>     mov ebx, eax
   164 000008CC E80D020000          <1>     call writeFAT   ;Propagate the CF 
   165 000008D1 89D8                <1>     mov eax, ebx
   166 000008D3 E8BC020000          <1>     call decrementFreeClusterCount
   167                              <1> .exit:
   168 000008D8 5E                  <1>     pop rsi
   169 000008D9 5B                  <1>     pop rbx
   170                              <1>     return
    13                              <2> %%_ret:
    14 000008DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   171                              <1> 
   172                              <1> allocateClusters:
   173                              <1> ;Working dpb must be set. 
   174                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   175                              <1> ;       ebx = Cluster to link to the new cluster
   176                              <1> ;Output:    
   177                              <1> ;   CF=NC => Complete.
   178                              <1> ;   If eax = -1, then no more free clusters. 
   179                              <1> ;   CF=CY => Hard error, exit
   180                              <1> ; ecx always has number of allocated clusters
   181 000008DB F8                  <1>     clc ;Always clear the flags before starting
   182 000008DC 53                  <1>     push rbx
   183 000008DD 56                  <1>     push rsi
   184 000008DE 51                  <1>     push rcx    ;Save tfr count on stack
   185 000008DF 67E332              <1>     jecxz .exit ;Allocating nothing? Exit
   186                              <1> .allocateLoop:
   187 000008E2 E837000000          <1>     call findFreeCluster
   188 000008E7 722B                <1>     jc .exit
   189 000008E9 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   190 000008EE 7424                <1>     je .exit    ;If the cluster number is -1, return immediately
   191                              <1>     ;eax has first free cluster value to use
   192                              <1>     ;First we link the previous cluster to this cluster
   193 000008F0 BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   194 000008F5 50                  <1>     push rax
   195 000008F6 E8E3010000          <1>     call writeFAT   ;Allocate this cluster first
   196 000008FB 58                  <1>     pop rax
   197 000008FC 7216                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   198 000008FE E891020000          <1>     call decrementFreeClusterCount
   199                              <1>     ;eax points to this allocated cluster
   200                              <1>     ;ebx points to the previous last cluster
   201 00000903 89C6                <1>     mov esi, eax    ;New cluster as "value"
   202 00000905 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   203 00000907 E8D2010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   204 0000090C 7206                <1>     jc .exit
   205 0000090E 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   206 00000910 FFC9                <1>     dec ecx ;One less cluster allocated
   207 00000912 75CE                <1>     jnz .allocateLoop
   208                              <1> .exit:
   209 00000914 5E                  <1>     pop rsi ;Pop the tfr count into esi
   210 00000915 9C                  <1>     pushfq
   211 00000916 F7D9                <1>     neg ecx
   212 00000918 01F1                <1>     add ecx, esi
   213 0000091A 9D                  <1>     popfq
   214 0000091B 5E                  <1>     pop rsi
   215 0000091C 5B                  <1>     pop rbx
   216                              <1>     return
    13                              <2> %%_ret:
    14 0000091D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> 
   218                              <1> findFreeCluster:
   219                              <1> ;Walks the FAT to find a free cluster and returns the 
   220                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   221                              <1> ;Works on the workingDPB
   222                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   223 0000091E 53                  <1>     push rbx
   224 0000091F 52                  <1>     push rdx
   225 00000920 55                  <1>     push rbp
   226 00000921 488B2D(F9060000)    <1>     mov rbp, qword [workingDPB]
   227                              <1>     ;Use readFAT
   228                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   229                              <1>     ;If readFAT returns 0 then its a free cluster
   230 00000928 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   231                              <1> .fatLoop:
   232 0000092D 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   233 0000092F E809010000          <1>     call readFAT    ;Read the value at eax, if it is 0, then eax is free
   234 00000934 7210                <1>     jc .exitFail    ;If something goes wrong, just return
   235 00000936 85C0                <1>     test eax, eax   ;Is this cluster free?
   236 00000938 7409                <1>     jz .exit    ;If yes, exit
   237 0000093A 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   238 0000093E 3B450F              <1>     cmp eax, dword [rbp + dpb.dClusterCount]
   239 00000941 76EA                <1>     jbe .fatLoop
   240                              <1> .exit:
   241 00000943 89D8                <1>     mov eax, ebx
   242 00000945 F8                  <1>     clc
   243                              <1> .exitFail:      ;Keep carry flag
   244 00000946 5D                  <1>     pop rbp
   245 00000947 5A                  <1>     pop rdx
   246 00000948 5B                  <1>     pop rbx
   247                              <1>     return
    13                              <2> %%_ret:
    14 00000949 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   248                              <1> 
   249                              <1> findFreeClusterData:
   250                              <1> ;Walks the FAT to find a free cluster and returns the 
   251                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   252                              <1> ; Also finds NumberOfFreeCLusters, if it is unknown. 
   253                              <1> ; Both fields get filled in the workingDPB
   254                              <1> ;Works on the workingDPB
   255                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   256 0000094A 53                  <1>     push rbx
   257 0000094B 52                  <1>     push rdx
   258 0000094C 55                  <1>     push rbp
   259 0000094D 488B2D(F9060000)    <1>     mov rbp, qword [workingDPB]
   260 00000954 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   261                              <1>     ;Mark dFirstFreeCluster as -1, unknown
   262 00000958 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dFirstFreeCluster], -1
   263                              <1>     ;Use readFAT
   264                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   265                              <1>     ;If readFAT returns 0 then its a free cluster
   266 0000095F B802000000          <1>     mov eax, 2  ;Start with cluster 2
   267 00000964 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   268                              <1> .fatLoop:
   269 00000967 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   270 00000969 E8CF000000          <1>     call readFAT
   271 0000096E 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   272 00000970 85C0                <1>     test eax, eax   ;Is this cluster free?
   273 00000972 750C                <1>     jne .fatProceed
   274 00000974 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   275 0000097B 7413                <1>     je .fatFirst
   276 0000097D FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   277                              <1> .fatProceed:
   278 00000980 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   279 00000984 39D0                <1>     cmp eax, edx
   280 00000986 76DF                <1>     jbe .fatLoop
   281                              <1> .exit:
   282 00000988 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   283 0000098B F8                  <1>     clc
   284                              <1> .exitFail:      ;Keep carry flag
   285 0000098C 5D                  <1>     pop rbp
   286 0000098D 5A                  <1>     pop rdx
   287 0000098E 5B                  <1>     pop rbx
   288                              <1>     return
    13                              <2> %%_ret:
    14 0000098F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   289                              <1> .fatFirst:
   290                              <1> ;Set the first free cluster value in the DPB and check if we need to get a count
   291 00000990 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   292 00000993 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1 ;If unknown, get count
   293 0000099A 74E4                <1>     je .fatProceed
   294 0000099C EBEA                <1>     jmp short .exit ;Else, we have valid count so just exit
   295                              <1> 
   296                              <1> getNextSectorOfFile:
   297                              <1> ;This function will read the next sector for a file into a buffer.
   298                              <1> ;If the next sector to be read lives in the next cluster, it will update
   299                              <1> ; the vars appropriately
   300                              <1> ;
   301                              <1> ;Input: rbp = dpb pointer
   302                              <1> ;Output:
   303                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   304                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   305                              <1> ;       CF=CY => Critical error occurred and was FAILed
   306                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   307                              <1> ; next cluster and read first sector 
   308                              <1>     ;Check if we need to go to next cluster
   309 0000099E 8A05(4B070000)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   310 000009A4 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   311 000009A7 7416                <1>     je .gotoNextCluster
   312                              <1>     ;Goto next sector in same cluster
   313 000009A9 FE05(4B070000)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   314 000009AF 48FF05(4C070000)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   315 000009B6 488B05(4C070000)    <1>     mov rax, qword [currSectD]
   316                              <1> .exitOK:
   317 000009BD F8                  <1>     clc
   318                              <1> .exitFail:
   319                              <1>     return
    13                              <2> %%_ret:
    14 000009BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   320                              <1> .gotoNextCluster:
   321 000009BF 8B05(43070000)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   322 000009C5 E873000000          <1>     call readFAT
   323 000009CA 72F2                <1>     jc .exitFail
   324                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   325 000009CC 3DFFFFFFFF          <1>     cmp eax, -1
   326 000009D1 74EA                <1>     je .exitOK
   327                              <1> ;Update the new cluster and sector information
   328 000009D3 8905(43070000)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   329 000009D9 FF05(3F070000)      <1>     inc dword [currClustF]   ;Goto next file cluster
   330 000009DF E857FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   331 000009E4 488905(4C070000)    <1>     mov qword [currSectD], rax  ;Save it
   332 000009EB C605(4B070000)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   333 000009F2 EBC9                <1>     jmp short .exitOK
   334                              <1> 
   335                              <1> unlinkFAT:
   336                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   337                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   338                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   339                              <1> ; cluster must be set to EOC before this proc is called.
   340                              <1> ;Stops at first invalid cluster number.
   341                              <1> ;
   342                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   343                              <1> ;       rbp = Current DPB to use for disk
   344                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   345                              <1> 
   346 000009F4 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   347 000009F5 56                  <1>     push rsi
   348 000009F6 E813000000          <1>     call truncateFAT    ;Preserved eax
   349 000009FB 720E                <1>     jc .exit
   350 000009FD 31F6                <1>     xor esi, esi  ;Free first cluster too
   351 000009FF E8DA000000          <1>     call writeFAT
   352 00000A04 7205                <1>     jc .exit
   353 00000A06 E87A010000          <1>     call incrementFreeClusterCount  ;One more cluster freed
   354                              <1> .exit:
   355 00000A0B 5E                  <1>     pop rsi
   356 00000A0C 58                  <1>     pop rax
   357                              <1>     return
    13                              <2> %%_ret:
    14 00000A0D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   358                              <1> 
   359                              <1> truncateFAT:
   360                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   361                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   362                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   363                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   364                              <1> ;Stops at first invalid cluster number.
   365                              <1> ;
   366                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   367                              <1> ;       rbp = Current DPB to use for disk
   368                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   369 00000A0E 50                  <1>     push rax
   370 00000A0F 53                  <1>     push rbx
   371 00000A10 51                  <1>     push rcx
   372 00000A11 56                  <1>     push rsi
   373 00000A12 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   374                              <1> .lp:
   375 00000A14 E824000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   376 00000A19 721D                <1>     jc .exit    ;Error exit
   377 00000A1B 89C1                <1>     mov ecx, eax   ;Move chain marker to ecx
   378 00000A1D 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   379 00000A1E 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   380 00000A20 E8B9000000          <1>     call writeFAT
   381 00000A25 7211                <1>     jc .exit    ;Error exit
   382 00000A27 E859010000          <1>     call incrementFreeClusterCount  ;Successfully freed the cluster
   383 00000A2C 81F9FFFFFFFF        <1>     cmp ecx, -1 ;End of chain?
   384 00000A32 7404                <1>     je .exit
   385 00000A34 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   386 00000A36 EBDC                <1>     jmp short .lp
   387                              <1> .exit:
   388 00000A38 5E                  <1>     pop rsi
   389 00000A39 59                  <1>     pop rcx
   390 00000A3A 5B                  <1>     pop rbx
   391 00000A3B 58                  <1>     pop rax
   392                              <1>     return
    13                              <2> %%_ret:
    14 00000A3C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   393                              <1> readFAT:
   394                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   395                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   396                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   397                              <1> ;       rbp = DPB
   398                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   399                              <1> ;If carry set, getBuffer failed!
   400 00000A3D 53                  <1>     push rbx
   401 00000A3E 51                  <1>     push rcx
   402 00000A3F 52                  <1>     push rdx
   403 00000A40 57                  <1>     push rdi
   404 00000A41 55                  <1>     push rbp
   405 00000A42 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   406 00000A44 E8A6FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   407                              <1>     ;and FAT type in ecx
   408 00000A49 E8EFFCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   409 00000A4E 7237                <1>     jc .exitFail
   410                              <1>     ;Check if FAT 12, 16, 32
   411 00000A50 85C9                <1>     test ecx, ecx
   412 00000A52 7439                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   413 00000A54 F7C101000000        <1>     test ecx, 1
   414 00000A5A 7413                <1>     jz .goToNextClusterFat32
   415                              <1>     ;Here we handle FAT16
   416 00000A5C 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   417 00000A61 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   418 00000A66 721E                <1>     jb .exit
   419 00000A68 B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   420 00000A6D EB17                <1>     jmp short .exit
   421                              <1> .goToNextClusterFat32:
   422 00000A6F 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   423 00000A73 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   424 00000A78 7207                <1>     jb .validCluster32   
   425 00000A7A B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   426 00000A7F EB05                <1>     jmp short .exit
   427                              <1> .validCluster32:
   428 00000A81 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   429                              <1> .exit:
   430 00000A86 F8                  <1>     clc
   431                              <1> .exitFail:
   432 00000A87 5D                  <1>     pop rbp
   433 00000A88 5F                  <1>     pop rdi
   434 00000A89 5A                  <1>     pop rdx
   435 00000A8A 59                  <1>     pop rcx
   436 00000A8B 5B                  <1>     pop rbx
   437                              <1>     return
    13                              <2> %%_ret:
    14 00000A8C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> .gotoNextClusterFat12:
   439                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   440                              <1> ;eax has the sector number of the FAT
   441                              <1> ;edx has byte offset into the sector
   442                              <1> ;edi has current cluster number
   443                              <1> ;rbx has ptr to buffer header
   444 00000A8D F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   445 00000A93 742E                <1>     jz .gotoNextClusterFat12Even
   446                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   447 00000A95 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   448 00000A99 29D1                <1>     sub ecx, edx
   449 00000A9B FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   450 00000A9D 751A                <1>     jnz .gotoNextClusterFat12NoCross
   451                              <1>     ;Boundary cross, build entry properly
   452 00000A9F 0FB65C1330          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   453 00000AA4 FFC0                <1>     inc eax ;Get next FAT sector
   454 00000AA6 53                  <1>     push rbx
   455 00000AA7 E891FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   456 00000AAC 59                  <1>     pop rcx ;Get bl in ecx, the last entry from the previous buffer
   457 00000AAD 72D8                <1>     jc .exitFail
   458 00000AAF 89C8                <1>     mov eax, ecx    ;Move the entry if all ok
   459 00000AB1 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   460 00000AB4 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   461 00000AB7 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   462                              <1> .gotoNextClusterFat12NoCross:
   463 00000AB9 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   464 00000ABE C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   465 00000AC1 EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   466                              <1> .gotoNextClusterFat12Even:
   467                              <1>     ;Here the cluster is even and can't cross a sector boundary
   468 00000AC3 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   469 00000AC8 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   470                              <1> .checkIfLastFAT12Cluster:
   471 00000ACD 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   472 00000AD2 72B2                <1>     jb .exit         ;If so, exit with it in eax (and clear CF)
   473 00000AD4 B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   474 00000AD9 E9A8FFFFFF          <1>     jmp .exit
   475                              <1> 
   476                              <1> writeFAT:
   477                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   478                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   479                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   480                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   481                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   482 00000ADE 53                  <1>     push rbx
   483 00000ADF 51                  <1>     push rcx
   484 00000AE0 52                  <1>     push rdx
   485 00000AE1 56                  <1>     push rsi
   486 00000AE2 57                  <1>     push rdi
   487 00000AE3 55                  <1>     push rbp
   488 00000AE4 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   489 00000AE6 E804FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   490                              <1>     ;and FAT type in ecx
   491 00000AEB E84DFCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   492 00000AF0 7223                <1>     jc .exitFail
   493                              <1>     ;Check if FAT 12, 16, 32
   494 00000AF2 85C9                <1>     test ecx, ecx
   495 00000AF4 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   496 00000AF6 F7C101000000        <1>     test ecx, 1
   497 00000AFC 7407                <1>     jz .goToNextClusterFat32
   498                              <1>     ;Here we handle FAT16
   499 00000AFE 6689741330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], si ;Store the value
   500 00000B03 EB0A                <1>     jmp short .exit
   501                              <1> .goToNextClusterFat32:
   502 00000B05 81E6FFFFFF0F        <1>     and esi, 0FFFFFFFh  ;Zero upper nybble
   503 00000B0B 89741330            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], esi
   504                              <1> .exit:
   505 00000B0F E881FAFFFF          <1>     call markBufferDirty
   506 00000B14 F8                  <1>     clc
   507                              <1> .exitFail:
   508 00000B15 5D                  <1>     pop rbp
   509 00000B16 5F                  <1>     pop rdi
   510 00000B17 5E                  <1>     pop rsi
   511 00000B18 5A                  <1>     pop rdx
   512 00000B19 59                  <1>     pop rcx
   513 00000B1A 5B                  <1>     pop rbx
   514                              <1>     return
    13                              <2> %%_ret:
    14 00000B1B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   515                              <1> .gotoNextClusterFat12:
   516                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   517                              <1> ;eax has the sector number of the FAT
   518                              <1> ;edx has byte offset into the sector
   519                              <1> ;edi has current cluster number
   520                              <1> ;rbx has ptr to buffer header
   521 00000B1C 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   522 00000B22 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   523 00000B28 7445                <1>     jz .gotoNextClusterFat12Even
   524                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   525 00000B2A 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   526 00000B2E 29D1                <1>     sub ecx, edx
   527 00000B30 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   528 00000B32 752C                <1>     jnz .gotoNextClusterFat12NoCross
   529                              <1>     ;Boundary cross, build entry properly
   530                              <1>     ;Replace the high nybble of the low byte 
   531                              <1>     ;breakpoint
   532 00000B34 0FB64C1330          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   533 00000B39 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   534 00000B3F C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   535 00000B42 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   536 00000B44 C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   537 00000B47 884C1330            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   538 00000B4B E845FAFFFF          <1>     call markBufferDirty
   539 00000B50 FFC0                <1>     inc eax ;Get next FAT sector
   540 00000B52 E8E6FBFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   541 00000B57 72BC                <1>     jc .exitFail
   542 00000B59 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   543 00000B5B 884B30              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   544 00000B5E EBAF                <1>     jmp short .exit
   545                              <1> .gotoNextClusterFat12NoCross:
   546 00000B60 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   547 00000B65 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   548 00000B6A C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   549 00000B6D EB0A                <1>     jmp short .fat12common
   550                              <1> .gotoNextClusterFat12Even:
   551                              <1>     ;Here the cluster is even and can't cross a sector boundary
   552 00000B6F 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   553 00000B74 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   554                              <1> .fat12common:
   555 00000B79 09F0                <1>     or eax, esi     ;Add the new entry bits
   556 00000B7B 6689441330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   557 00000B80 E98AFFFFFF          <1>     jmp .exit
   558                              <1> 
   559                              <1> incrementFreeClusterCount:
   560                              <1> ;Cluster Deallocated Function
   561 00000B85 9C                  <1>     pushfq
   562 00000B86 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   563 00000B8D 7403                <1>     je .exit
   564 00000B8F FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters]
   565                              <1> .exit:
   566 00000B92 9D                  <1>     popfq
   567                              <1>     return
    13                              <2> %%_ret:
    14 00000B93 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   568                              <1> decrementFreeClusterCount:
   569                              <1> ;Cluster Allocated Function
   570 00000B94 9C                  <1>     pushfq
   571 00000B95 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   572 00000B9C 7403                <1>     je .exit
   573 00000B9E FF4D31              <1>     dec dword [rbp + dpb.dNumberOfFreeClusters]
   574                              <1> .exit:
   575 00000BA1 9D                  <1>     popfq
   576                              <1>     return
    13                              <2> %%_ret:
    14 00000BA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                                  %include "./Source/Kernel/FAT/findfile.asm"
     1                              <1> ;Generic Find First and Find Next functions here
     2                              <1> findNextMain:
     3 00000BA3 488B3D(0B040000)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
     4 00000BAA F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
     5 00000BAD 7408                <1>     jz .notNet
     6 00000BAF B81C110000          <1>     mov eax, 0111Ch ;Netowrk find next
     7 00000BB4 CD4F                <1>     int 4Fh
     8                              <1>     return  ;Return propagating the error code
    13                              <2> %%_ret:
    14 00000BB6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> .notNet:
    10 00000BB7 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    11 00000BB9 FEC0                <1>     inc al  ;Convert into 1 based number
    12 00000BBB E8425F0000          <1>     call dosCrit1Enter
    13 00000BC0 E8045B0000          <1>     call setDrive   ;Set CDS and current drive vars
    14 00000BC5 720C                <1>     jc .critError   ;Return error if this fails
    15 00000BC7 488B3D(01070000)    <1>     mov rdi, qword [workingCDS] 
    16 00000BCE E80C580000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    17                              <1> .critError:
    18 00000BD3 E8345F0000          <1>     call dosCrit1Exit
    19                              <1>     retc    ;Return error if this fails
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000BD8 72DC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    20 00000BDA E801000000          <1>     call searchMoreDir
    21                              <1>     return
    13                              <2> %%_ret:
    14 00000BDF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> searchMoreDir:
    23                              <1> ;The three directory variables are set up from the ffblock. 
    24                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    25                              <1> ;Current DTA is also used to contain the ff block address
    26                              <1> ;All registers can be trashed
    27 00000BE0 488B2D(F9060000)    <1>     mov rbp, qword [workingDPB]
    28                              <1>     ;First setup dirClustA and dirSect vars
    29 00000BE7 488B3D(0B040000)    <1>     mov rdi, qword [currentDTA]
    30 00000BEE 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    31 00000BF1 8805(EB060000)      <1>     mov byte [searchAttr], al   ;And save it
    32 00000BF7 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    33 00000BFA 8905(73070000)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    34 00000C00 8905(6F070000)      <1>     mov dword [dirClustPar], eax
    35                              <1>     ;Get number of 32 byte entries in a sector
    36 00000C06 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    37 00000C09 8905(79070000)      <1>     mov dword [dirEntry], eax
    38                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    39 00000C0F C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    40                              <1>     ;Now get bytes per cluster
    41 00000C12 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    42 00000C14 813D(73070000)0000- <1>     cmp dword [dirClustA], 0   ;If we at cluster 0, we are in old style root dir
    42 00000C1C 0000                <1>
    43 00000C1E 0F8496000000        <1>     je .oldFat
    44 00000C24 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    45 00000C28 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    46 00000C2C D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    47 00000C2E 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    48 00000C30 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    49 00000C32 31D2                <1>     xor edx, edx
    50 00000C34 F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    51                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    52                              <1>     ;edx has byte offset into cluster (or Root dir)
    53 00000C36 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    54                              <1>     ;Now compute sector offset into cluster
    55 00000C38 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    56 00000C3C 89D0                <1>     mov eax, edx    ;Move offset into cluster
    57 00000C3E 31D2                <1>     xor edx, edx
    58 00000C40 F7F1                <1>     div ecx 
    59                              <1>     ;eax now has sector offset into cluster
    60                              <1>     ;edx has byte offset into sector 
    61 00000C42 668905(77070000)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    62 00000C49 8B05(73070000)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    63                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    64 00000C4F 89D9                <1>     mov ecx, ebx
    65 00000C51 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    66                              <1> .fatlp:
    67 00000C54 E8E4FDFFFF          <1>     call readFAT
    68 00000C59 3DFFFFFFFF          <1>     cmp eax, -1
    69 00000C5E 7477                <1>     je .errorExit
    70 00000C60 FFC9                <1>     dec ecx
    71 00000C62 75F0                <1>     jnz .fatlp
    72 00000C64 8905(73070000)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    73                              <1> .skipFatWalk:
    74 00000C6A 488D05AA000000      <1>     lea rax, searchDir.nextEp
    75 00000C71 50                  <1>     push rax    ;Push the return address onto stack
    76 00000C72 8B05(73070000)      <1>     mov eax, dword [dirClustA]
    77 00000C78 E8BEFBFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
    78 00000C7D 0FB71D(77070000)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
    79 00000C84 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
    80                              <1> .common:
    81 00000C87 E8B6FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
    82 00000C8C 0F8224010000        <1>     jc searchDir.hardError
    83 00000C92 E822010000          <1>     call adjustDosDirBuffer  ;rbx has the buffer ptr for this dir sector
    84 00000C97 E8DE010000          <1>     call findInBuffer.getNumberOfEntries    ;Get in ecx # of entries in sector
    85 00000C9C 8B05(79070000)      <1>     mov eax, dword [dirEntry]
    86 00000CA2 250F000000          <1>     and eax, 0Fh    ;Get the value modulo 16
    87 00000CA7 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
    88 00000CA9 C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
    89 00000CAC 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
    90                              <1>     ;We continue AS IF this entry was bad
    91                              <1>     ;Now setup al as upon normal entry 
    92 00000CAF 8A05(EB060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
    93 00000CB5 E96D010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within function
    94                              <1>     ;The return address on the stack will return to the ep's pushed
    95                              <1> .oldFat:
    96                              <1> ;Old FAT 12/16 root dirs fall thru here only
    97                              <1> ;esi = byte ptr in root dir of entry
    98 00000CBA 488D05D9000000      <1>     lea rax, searchDir.oldNextEP
    99 00000CC1 50                  <1>     push rax    ;Push return address onto the stack
   100 00000CC2 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   101 00000CC6 31D2                <1>     xor edx, edx
   102 00000CC8 96                  <1>     xchg esi, eax
   103 00000CC9 F7F6                <1>     div esi ;Divide dir file position by bytes per sector
   104                              <1>     ;eax = Sector number 
   105                              <1>     ;edx = Byte offset within the sector
   106 00000CCB 668905(77070000)    <1>     mov word [dirSect], ax ;Set the root directory sector offset
   107 00000CD2 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   108 00000CD5 EBB0                <1>     jmp short .common
   109                              <1> .errorExit:
   110 00000CD7 F9                  <1>     stc
   111                              <1>     return
    13                              <2> %%_ret:
    14 00000CD8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   112                              <1> searchDir:
   113                              <1> ;Called in a level 1 critical section. 
   114                              <1> ;The directory variables are set and fcbName has the pattern to match
   115                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   116                              <1> ;All registers can be trashed
   117                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   118                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   119                              <1> 
   120                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   121                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   122 00000CD9 488B3D(01070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   123 00000CE0 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   124 00000CE6 7408                <1>     jz .notNet
   125 00000CE8 B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   126 00000CED CD4F                <1>     int 4fh
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000CEF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> .notNet:
   129 00000CF0 488B2D(F9060000)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   130 00000CF7 8B05(73070000)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   131 00000CFD 85C0                <1>     test eax, eax
   132 00000CFF 747E                <1>     jz .oldRoot
   133 00000D01 E835FBFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   134                              <1> .sectorLoop:
   135 00000D06 E837FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   136 00000D0B 0F82A5000000        <1>     jc .hardError
   137 00000D11 E8A3000000          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   138                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   139 00000D16 E8B2000000          <1>     call findInBuffer
   140                              <1> .nextEp:
   141                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000D1B 73D2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   142 00000D1D 0F848F000000        <1>     jz .fnfError    ;CF=CY AND ZF=ZE => File not found
   143                              <1>     ;If ZF=ZE then fnfError (i.e. we hit an entry starting with 00)
   144                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   145                              <1>     ;IF however, the next cluster is -1, then we return fail
   146 00000D23 8B05(73070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   147 00000D29 8905(43070000)      <1>     mov dword [currClustD], eax
   148 00000D2F 668B05(77070000)    <1>     mov ax, word [dirSect]
   149 00000D36 8805(4B070000)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   150 00000D3C 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   151 00000D40 488905(4C070000)    <1>     mov qword [currSectD], rax  
   152 00000D47 C705(3F070000)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   152 00000D4F 0000                <1>
   153 00000D51 E848FCFFFF          <1>     call getNextSectorOfFile
   154 00000D56 725E                <1>     jc .hardError
   155 00000D58 3DFFFFFFFF          <1>     cmp eax, -1
   156 00000D5D 7453                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   157 00000D5F 66FF05(77070000)    <1>     inc word [dirSect]  ;Goto next sector
   158 00000D66 8B05(73070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   159 00000D6C 3B05(43070000)      <1>     cmp eax, dword [currClustD] ;Did it change?
   160 00000D72 7492                <1>     je .sectorLoop  ;If not, we advanced sectors only
   161 00000D74 66C705(77070000)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   161 00000D7C 00                  <1>
   162 00000D7D EB87                <1>     jmp short .sectorLoop 
   163                              <1> 
   164                              <1> .oldRoot:
   165                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   166                              <1> ; one large contiguous cluster.
   167                              <1> .oldSectorLp:
   168 00000D7F 0FB705(77070000)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   169 00000D86 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   170 00000D89 E8B4F9FFFF          <1>     call getBufForDOS
   171 00000D8E 7226                <1>     jc .hardError
   172 00000D90 E824000000          <1>     call adjustDosDirBuffer      ;rbx has the buffer pointer for this dir sector
   173 00000D95 E833000000          <1>     call findInBuffer
   174                              <1> .oldNextEP:
   175                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000D9A 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000D9C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   176 00000D9D 7413                <1>     jz .fnfError
   177 00000D9F 66FF05(77070000)    <1>     inc word [dirSect]  ;Goto next sector in directory
   178 00000DA6 0FB74509            <1>     movzx eax, word [rbp + dpb.wNumberRootDirEntries]
   179 00000DAA 3905(79070000)      <1>     cmp dword [dirEntry], eax ;Have we reached the last dir entry?
   180 00000DB0 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   181                              <1> .fnfError:
   182 00000DB2 B012                <1>     mov al, errNoFil
   183 00000DB4 F9                  <1>     stc
   184                              <1>     return
    13                              <2> %%_ret:
    14 00000DB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> .hardError:
   186 00000DB6 B0FF                <1>     mov al, -1
   187                              <1>     return
    13                              <2> %%_ret:
    14 00000DB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   188                              <1> adjustDosDirBuffer:
   189 00000DB9 804B0904            <1>     or byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   190 00000DBD 806309FE            <1>     and byte [rbx + bufferHdr.bufferFlags], ~dosBuffer
   191 00000DC1 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   192 00000DC5 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   193 00000DC9 C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   194                              <1>     return
    13                              <2> %%_ret:
    14 00000DCC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   195                              <1> 
   196                              <1> findInBuffer:
   197                              <1> ;Input:  rsi = Sector buffer data area
   198                              <1> ;Output: CF=CY => No entries found
   199                              <1> ;        ZF=NE => Keep searching in subsequent directories
   200                              <1> ;        ZF=ZE => End of directory reached early, stop
   201                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   202                              <1> ;        rsi = Points to start of the disk buffer directory entry
   203 00000DCD E8A8000000          <1>     call .getNumberOfEntries    ;Get in ecx # of entries in sector
   204 00000DD2 8A05(EB060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   205 00000DD8 E8AE000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   206                              <1> .searchMainLp:
   207                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   208 00000DDD 8A25(F7060000)      <1>     mov ah, byte [delChar]
   209 00000DE3 803E00              <1>     cmp byte [rsi], 00h
   210 00000DE6 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   211 00000DE8 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   212 00000DEA 750F                <1>     jne .notLookingForEmpty
   213                              <1> .emptySlot:
   214                              <1> ;Here we check if we are looking for an empty directory entry or
   215                              <1> ; we have reached the end of the file (if the first byte is 00h)
   216                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   217 00000DEC 3A25(C8060000)      <1>     cmp ah, byte [fcbName] 
   218                              <1>     rete    ;Return if equal (CF=NC too)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000DF2 74D8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   219                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   220 00000DF4 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   221 00000DF7 752E                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   222 00000DF9 F9                  <1>     stc
   223                              <1>     return
    13                              <2> %%_ret:
    14 00000DFA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   224                              <1> .notLookingForEmpty:
   225 00000DFB 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   226 00000DFE 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   227 00000E01 803D(5C040000)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   228 00000E08 7434                <1>     je .exclusiveDir
   229 00000E0A 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume only?
   230 00000E0C 7437                <1>     je .volFile ;If so, go here
   231 00000E0E 80FC08              <1>     cmp ah, 08h ;Is this file a volume lbl that we are not looking for?
   232 00000E11 7414                <1>     je .nextEntry
   233 00000E13 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   234 00000E15 7710                <1>     ja .nextEntry
   235                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   236                              <1> .scanName:
   237 00000E17 56                  <1>     push rsi
   238 00000E18 488D3D(C8060000)    <1>     lea rdi, fcbName ;Goto name template to search for
   239 00000E1F E83E000000          <1>     call .nameCompare
   240 00000E24 5E                  <1>     pop rsi
   241 00000E25 7424                <1>     je .searchEntryFound
   242                              <1> .nextEntry:
   243                              <1> ;Go to next entry
   244 00000E27 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   245 00000E2E FF05(79070000)      <1>     inc dword [dirEntry] ;And denote that in variable
   246 00000E34 FFC9                <1>     dec ecx
   247 00000E36 75A5                <1>     jnz .searchMainLp
   248                              <1> .badExit:
   249 00000E38 31C0                <1>     xor eax, eax
   250 00000E3A FFC0                <1>     inc eax ;Clear ZF
   251 00000E3C F9                  <1>     stc
   252                              <1>     return
    13                              <2> %%_ret:
    14 00000E3D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   253                              <1> .exclusiveDir:
   254                              <1> ;Used when going down a path, dir bit simply need be set
   255 00000E3E F6C410              <1>     test ah, dirDirectory
   256 00000E41 75D4                <1>     jnz .scanName
   257 00000E43 EBE2                <1>     jmp short .nextEntry
   258                              <1> 
   259                              <1> .volFile:
   260 00000E45 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   261 00000E47 74CE                <1>     je .scanName       ;If so, scan the name agrees
   262 00000E49 EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   263                              <1> 
   264                              <1> .searchEntryFound:
   265                              <1> ;Here a good entry was found!
   266 00000E4B 56                  <1>     push rsi
   267 00000E4C 57                  <1>     push rdi
   268 00000E4D 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   269 00000E4F 488D3D(4D060000)    <1>     lea rdi, curDirCopy
   270 00000E56 B904000000          <1>     mov ecx, 32/8
   271 00000E5B F348A5              <1>     rep movsq   ;Copy the directory to SDA
   272 00000E5E 5F                  <1>     pop rdi
   273 00000E5F 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   274 00000E60 F8                  <1>     clc
   275                              <1>     return
    13                              <2> %%_ret:
    14 00000E61 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> 
   277                              <1> .nameCompare:
   278                              <1> ;Input: rsi = source string
   279                              <1> ;       rdi = string template to compare against
   280                              <1> ;Output: ZF=ZE => Strings are ok
   281                              <1> ;        ZF=NZ => Strings not ok
   282                              <1> ;Accepts wildcards. Trashes al
   283 00000E62 51                  <1>     push rcx
   284 00000E63 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   285                              <1> .ncLp:
   286 00000E65 81F90B000000        <1>     cmp ecx, 11
   287 00000E6B 740B                <1>     je .ncExit
   288 00000E6D FFC1                <1>     inc ecx
   289 00000E6F A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   290 00000E70 74F3                <1>     je .ncLp    ;If equal, keep going
   291 00000E72 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   292 00000E76 74ED                <1>     je .ncLp
   293                              <1> .ncExit:
   294 00000E78 59                  <1>     pop rcx
   295                              <1>     return
    13                              <2> %%_ret:
    14 00000E79 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> .getNumberOfEntries:
   297 00000E7A 55                  <1>     push rbp
   298 00000E7B 488B2D(F9060000)    <1>     mov rbp, qword [workingDPB]
   299 00000E82 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   300 00000E86 C1E905              <1>     shr ecx, 5  ;Divide by 32
   301 00000E89 5D                  <1>     pop rbp
   302                              <1>     return
    13                              <2> %%_ret:
    14 00000E8A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   303                              <1> adjustSearchAttr:
   304                              <1> ;Converts the byte to a system only if the bit is set
   305                              <1> ;Input: eax = User selected search mask
   306                              <1> ;Output: eax = Modified search mask
   307 00000E8B 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   308 00000E90 A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   309                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E95 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   310 00000E97 B808000000          <1>     mov eax, dirVolumeID
   311                              <1>     return
    13                              <2> %%_ret:
    14 00000E9C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   312                              <1> 
   313                              <1> asciiToFCB:
   314                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   315                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   316                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   317                              <1> ;Name is space padded.
   318                              <1> ;Input: rsi = ASCII string buffer
   319                              <1> ;       rdi = FCB name buffer
   320                              <1> ;Output: al = Char that terminated the source string 
   321 00000E9D 53                  <1>     push rbx    
   322 00000E9E 57                  <1>     push rdi
   323 00000E9F B90B000000          <1>     mov ecx, 11
   324 00000EA4 B020                <1>     mov al, " "
   325 00000EA6 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   326 00000EA8 5F                  <1>     pop rdi
   327 00000EA9 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   328                              <1> .processName:
   329 00000EAC AC                  <1>     lodsb   ;Get the char in al
   330 00000EAD E819590000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   331 00000EB2 84C0                <1>     test al, al
   332 00000EB4 742D                <1>     jz .exit
   333 00000EB6 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   334 00000EB8 740E                <1>     je .extSpace
   335 00000EBA 3C2E                <1>     cmp al, "."
   336 00000EBC 7413                <1>     je .ext
   337                              <1>     ;Test if the char is valid
   338 00000EBE E8495A0000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   339 00000EC3 741E                <1>     jz .exit    ;If the char invalid, consider it a terminator
   340 00000EC5 AA                  <1>     stosb   ;Store the char
   341 00000EC6 EBE4                <1>     jmp short .processName
   342                              <1> .extSpace:
   343                              <1> ;Now we scan for a period in the name
   344 00000EC8 AC                  <1>     lodsb   ;Get a char and increase rsi
   345 00000EC9 84C0                <1>     test al, al
   346 00000ECB 7416                <1>     jz .exit
   347 00000ECD 3C2E                <1>     cmp al, "."     ;If al is not a period...
   348 00000ECF 75F7                <1>     jne .extSpace   ; keep searching
   349                              <1> .ext:
   350 00000ED1 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   351                              <1> .processExt:
   352 00000ED5 AC                  <1>     lodsb
   353 00000ED6 84C0                <1>     test al, al
   354 00000ED8 7409                <1>     jz .exit
   355 00000EDA 3C20                <1>     cmp al, " "
   356 00000EDC 7405                <1>     je .exit
   357 00000EDE AA                  <1>     stosb
   358 00000EDF EBF4                <1>     jmp short .processExt
   359                              <1> .exitBadChar:
   360 00000EE1 30C0                <1>     xor al, al  ;Return a null terminator
   361                              <1> .exit:
   362 00000EE3 5B                  <1>     pop rbx
   363                              <1>     return
    13                              <2> %%_ret:
    14 00000EE4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> 
   365                              <1> FCBToAsciiz:
   366                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   367                              <1> ;Name is space padded too
   368                              <1> ;Input: rsi = FCB name buffer
   369                              <1> ;       rdi = ASCIIZ string buffer
   370 00000EE5 B908000000          <1>     mov ecx, 8
   371 00000EEA F3A4                <1>     rep movsb   ;Move the name over
   372                              <1> .scanNameSpace:
   373 00000EEC 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   374 00000EF0 750D                <1>     jne .ext
   375 00000EF2 48FFCF              <1>     dec rdi
   376 00000EF5 FFC1                <1>     inc ecx
   377 00000EF7 81F908000000        <1>     cmp ecx, 8
   378 00000EFD 72ED                <1>     jb .scanNameSpace
   379                              <1> .ext:
   380 00000EFF 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   381 00000F04 7506                <1>     jne .validExt
   382 00000F06 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   383 00000F0A 7415                <1>     je .exit
   384                              <1> .validExt:
   385 00000F0C B02E                <1>     mov al, "." ;We have a valid extension, store a period
   386 00000F0E AA                  <1>     stosb
   387 00000F0F B903000000          <1>     mov ecx, 3
   388 00000F14 F3A4                <1>     rep movsb   ;Move the three extension chars over
   389                              <1> .scanExtSpace:
   390 00000F16 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   391 00000F1A 7505                <1>     jne .exit
   392 00000F1C 48FFCF              <1>     dec rdi
   393 00000F1F EBF5                <1>     jmp short .scanExtSpace
   394                              <1> .exit:
   395 00000F21 31C0                <1>     xor eax, eax
   396 00000F23 AA                  <1>     stosb   ;Store a null at the end
   397                              <1>     return
    13                              <2> %%_ret:
    14 00000F24 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> setupFFBlock:
   400                              <1> ;Sets up the find first block for the search
   401                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   402 00000F25 50                  <1>     push rax
   403 00000F26 53                  <1>     push rbx
   404 00000F27 56                  <1>     push rsi
   405 00000F28 57                  <1>     push rdi
   406 00000F29 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   407 00000F2C 8A05(EB060000)      <1>     mov al, byte [searchAttr]
   408 00000F32 243F                <1>     and al, 3Fh ;Clear upper two bits
   409 00000F34 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   410 00000F37 0FB605(F8060000)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   411 00000F3E 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   412 00000F40 488D35(C8060000)    <1>     lea rsi, fcbName
   413 00000F47 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   414 00000F4B 57                  <1>     push rdi
   415 00000F4C 48B820202020202020- <1>     mov rax, "        "
   415 00000F55 20                  <1>
   416 00000F56 48AB                <1>     stosq
   417 00000F58 66AB                <1>     stosw
   418 00000F5A AA                  <1>     stosb
   419 00000F5B 5F                  <1>     pop rdi
   420 00000F5C 48A5                <1>     movsq   ;Move 8 chars
   421 00000F5E 66A5                <1>     movsw   ;Move 2 chars
   422 00000F60 A4                  <1>     movsb   ;Move the final char
   423                              <1> 
   424 00000F61 8B05(79070000)      <1>     mov eax, dword [dirEntry]
   425 00000F67 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   426 00000F6A 8B05(6F070000)      <1>     mov eax, dword [dirClustPar]
   427 00000F70 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   428 00000F73 8A05(58060000)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   429 00000F79 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   430 00000F7C 8B05(63060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   431 00000F82 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   432 00000F85 8B05(69060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   433 00000F8B 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   434 00000F8E 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   435 00000F92 488D35(4D060000)    <1>     lea rsi, curDirCopy
   436 00000F99 E847FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   437                              <1> 
   438 00000F9E 5F                  <1>     pop rdi
   439 00000F9F 5E                  <1>     pop rsi
   440 00000FA0 5B                  <1>     pop rbx
   441 00000FA1 58                  <1>     pop rax
   442                              <1>     return
    13                              <2> %%_ret:
    14 00000FA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   443                              <1> 
   444                              <1> getDrvLetterFromPath:   ;Int 4Fh, AX=121Ah
   445                              <1> ;Gets the drive letter for the path in al
   446                              <1> ;Input: rsi = Buffer to process
   447                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   448                              <1> ;       ZF=ZE and al = 0 => Null path
   449                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   450                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   451                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   452 00000FA3 30C0                <1>     xor al, al
   453 00000FA5 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   454                              <1>     retz    ;Return if a null path
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FA8 74F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   455 00000FAA 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   456                              <1>     retne   ;If not equal, Relative path or network path
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FAE 75F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   457 00000FB0 66AD                <1>     lodsw   ;Get first word, rsi += 2
   458                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   459 00000FB2 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   460 00000FB4 2C60                <1>     sub al, 60h
   461                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FB6 75EA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   462 00000FB8 B0FF                <1>     mov al, -1  ;Else not a valid drive number
   463                              <1>     return
    13                              <2> %%_ret:
    14 00000FBA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   464                              <1> 
   465                              <1> canonicaliseFileName:
   466                              <1> ;Always trying to build and qualify a full pathname
   467                              <1> ;Does getPath without hitting the disk
   468 00000FBB B0FF                <1>     mov al, -1
   469 00000FBD 8805(5C040000)      <1>     mov byte [fileDirFlag], al  
   470 00000FC3 8805(F0060000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   471 00000FC9 48893D(11060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   472 00000FD0 FEC0                <1>     inc al  ;make al = 0
   473 00000FD2 8805(21060000)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   474 00000FD8 E854000000          <1>     call getPath.epAlt
   475                              <1>     retc    ;Return if an error
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FDD 72DB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   476 00000FDF 48FFCF              <1>     dec rdi ;Point to what should be the null char
   477 00000FE2 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Was the prev char a drive sep?
   478 00000FE6 7503                <1>     jne .storeNull
   479 00000FE8 B05C                <1>     mov al, "\"
   480 00000FEA AA                  <1>     stosb   ;Store the pathsep and increment rdi
   481                              <1> .storeNull:
   482 00000FEB 803F00              <1>     cmp byte [rdi], 0   ;Ensure path is null terminated (and clear CF)
   483                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FEE 74CA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   484 00000FF0 C60700              <1>     mov byte [rdi], 0   ;Store a terminating zero if necessary
   485                              <1>     return
    13                              <2> %%_ret:
    14 00000FF3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   486                              <1> 
   487                              <1> getDirPathNoCanon:
   488 00000FF4 31C0                <1>     xor eax, eax
   489 00000FF6 4889FE              <1>     mov rsi, rdi
   490 00000FF9 EB1B                <1>     jmp short getPath.noCanon
   491                              <1> getFilePathNoCanon:
   492                              <1> ;Used when the path is constructed internally (as for FCB functions)
   493                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   494 00000FFB B0FF                <1>     mov al, -1
   495 00000FFD 4889FE              <1>     mov rsi, rdi
   496 00001000 EB14                <1>     jmp short getPath.noCanon
   497                              <1> getDirPath:
   498 00001002 30C0                <1>     xor al, al   ;Set to Directory
   499 00001004 EB02                <1>     jmp short getPath
   500                              <1> getFilePath:
   501 00001006 B0FF                <1>     mov al, -1  ;Set to File
   502                              <1> getPath:
   503                              <1> ;Determines whether the path is spliced or not and transfers the chars
   504                              <1> ; from the user buffer into an internal buffer, normalising them.
   505                              <1> ; Single and double dot entries are left as is, but the wildcard * is converted
   506                              <1> ; to ?. Wildcards can only be present in the LAST portion of the given path.
   507                              <1> ; If the portion with wildcards does not end with an ASCII null, we fail the 
   508                              <1> ; request with pnf. If there is a redirector which needs to normalise the path, 
   509                              <1> ; we let it do its thing and return.
   510                              <1> ;If the user requests data from a remote server (i.e. a pathspec starting with
   511                              <1> ; \\) then wildcards, the colon and dots are forbidden.
   512                              <1> ;If a remote user requests data (dosInvoke = -1), then the pathspec must be an
   513                              <1> ; absolute path (no wildcards or dots) and must begin with a drive letter 
   514                              <1> ; (converted from using machine name by the net client program).
   515                              <1> ;We check if we are a net invoke to ensure that the pathspec that was recieved
   516                              <1> ; was good.
   517                              <1> ;Called with:
   518                              <1> ; rdi = SDA Buffer for filename
   519                              <1> ; rsi = Potentially unqualified filename
   520                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   521 00001008 50                  <1>     push rax
   522 00001009 57                  <1>     push rdi
   523 0000100A E8ACFFFFFF          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   524 0000100F 5F                  <1>     pop rdi
   525 00001010 58                  <1>     pop rax
   526 00001011 4889FE              <1>     mov rsi, rdi    ;Use the newly built path as the source
   527                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001014 72DD                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   528                              <1> .noCanon:
   529 00001016 8805(5C040000)      <1>     mov byte [fileDirFlag], al  
   530 0000101C B0FF                <1>     mov al, -1
   531 0000101E 8805(F0060000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   532 00001024 48893D(11060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   533 0000102B 8805(21060000)      <1>     mov byte [skipDisk], al  ;Store -1 to NOT skip checking the file on disk
   534                              <1> .epAlt:
   535 00001031 C605(F4060000)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   536 00001038 C605(F3060000)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   537 0000103F F605(F1060000)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   538 00001046 7428                <1>     jz .notServer
   539                              <1>     ;In this case, the client network program will have correctly
   540                              <1>     ; substituted the drive letter for the path before making the request.
   541                              <1>     ;Thus we can immediately assume the existance of a drive letter in the path 
   542 00001048 E856FFFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in X:    call getCDS ;Get the cds for the drive letter on the path
   544                              <1>     ;REMEMBER, FOR ALL THE LOGIC TO WORK, HERE WE MUST ENSURE THE PATH
   545                              <1>     ; CONTAINS NO . or .., NO INVALID CHARS OR MULTIPLE \\ AND IS 0 TERMINATED.
   546                              <1>     ;We do not scan for this criteria but the client program must adhere to 
   547                              <1>     ; these requirements.
   548                              <1>     ;When a server request is made, the request can ONLY be for a file on
   549                              <1>     ; a CDS drive to avoid multiple server hops.
   550 0000104D FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   551 0000104F 488B3D(01070000)    <1>     mov rdi, qword [workingCDS]
   552 00001056 50                  <1>     push rax
   553 00001057 E8A65A0000          <1>     call dosCrit1Enter
   554 0000105C E87E530000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   555 00001061 E8A65A0000          <1>     call dosCrit1Exit
   556 00001066 58                  <1>     pop rax
   557 00001067 0F8382000000        <1>     jnc .driveOk
   558                              <1> .serverExit:
   559 0000106D B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   560                              <1>     return
    13                              <2> %%_ret:
    14 0000106F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   561                              <1> .notServer:
   562                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   563 00001070 48C705(01070000)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   563 00001078 FFFFFF              <1>
   564 0000107B B823110000          <1>     mov eax, 1123h
   565 00001080 CD4F                <1>     int 4fh ;CF=CY if not resolved. CF=NC if resolved
   566                              <1>     retnc  ;Return if resolved
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001082 73EB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   567 00001084 E81AFFFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   568 00001089 9C                  <1>     pushfq  ;Save the flag state on stack
   569 0000108A 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   570 0000108B 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   571 0000108E E82C570000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   572 00001093 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. \\)
   573 00001095 E825570000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   574 0000109A 7543                <1>     jnz .notNet
   575 0000109C 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   576 0000109E 753F                <1>     jne .notNet
   577 000010A0 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   578 000010A1 9D                  <1>     popfq
   579 000010A2 66AD                <1>     lodsw
   580 000010A4 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   581 000010A8 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   582                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   583                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   584                              <1> ; redirector Find First Without CDS
   585                              <1> 
   586 000010AA 8A1D(21060000)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   587 000010B0 C605(21060000)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   588 000010B7 53                  <1>     push rbx
   589                              <1> .moveNetChars:
   590 000010B8 AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   591 000010B9 E80D570000          <1>     call uppercaseChar  ;Make char in al uppercase
   592 000010BE 84C0                <1>     test al, al
   593 000010C0 740F                <1>     jz .netEnd
   594 000010C2 E8F8560000          <1>     call swapPathSeparator  ;If path sep, swap it
   595 000010C7 AA                  <1>     stosb
   596 000010C8 75EE                <1>     jnz .moveNetChars  ;If not a path separating char in al, keep looking
   597 000010CA E85C000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   598 000010CF EBE7                <1>     jmp short .moveNetChars
   599                              <1> .netEnd:
   600 000010D1 5B                  <1>     pop rbx
   601 000010D2 AA                  <1>     stosb
   602 000010D3 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   603                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000010D5 7498                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   604 000010D7 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   605 000010DC CD4F                <1>     int 4Fh
   606                              <1>     return
    13                              <2> %%_ret:
    14 000010DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   607                              <1> .notNet:
   608                              <1> ;This is the normal case; paths can be relative, or absolute.
   609 000010DF 58                  <1>     pop rax ;Get the drive letter back
   610 000010E0 9D                  <1>     popfq   ;Get the flag state back
   611 000010E1 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   612                              <1> .pnfErr:
   613 000010E3 B003                <1>     mov al, errPnf  ;Null path error
   614 000010E5 F9                  <1>     stc
   615                              <1>     return
    13                              <2> %%_ret:
    14 000010E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   616                              <1> .notNull:
   617 000010E7 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   618 000010E9 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   619 000010EB B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   620 000010ED F9                  <1>     stc
   621                              <1>     return
    13                              <2> %%_ret:
    14 000010EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   622                              <1> .driveOk:
   623 000010EF 84C0                <1>     test al, al
   624 000010F1 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   625                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   626 000010F3 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   627 000010F6 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   628 000010F8 50                  <1>     push rax    ;Save the drive letter
   629 000010F9 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   630 000010FA 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   631 000010FD E8BD560000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   632                              <1>     ;If al is a path separator, then this path is absolute.
   633 00001102 58                  <1>     pop rax ;Get back the drive letter
   634 00001103 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   635                              <1> .absoPath:
   636                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   637 00001105 48FFC6              <1>     inc rsi
   638 00001108 EB1A                <1>     jmp short .commonDir
   639                              <1> .curPath:
   640                              <1> ;This is only jumped to if we are relative the current drive
   641                              <1> ;rsi points to first char in path
   642                              <1> ;If this char is \ or /, then it is an absolute path.
   643 0000110A 8A05(25040000)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   644 00001110 FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   645 00001112 50                  <1>     push rax    ;Save the current drive number
   646 00001113 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   647 00001115 E8A5560000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   648 0000111A 58                  <1>     pop rax ;Get back the current drive number
   649 0000111B 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   650                              <1> .relMain:
   651 0000111D C605(F0060000)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   652                              <1> .commonDir:
   653                              <1> ;rsi points to the start of the string we will be appending
   654                              <1> ;Fall through now
   655                              <1> pathWalk:
   656                              <1> ;Input: rsi must point to source buffer for path to expand
   657                              <1> ;       rdi must point to a destination buffer
   658                              <1> ;       al must contain the drive 1 based number
   659 00001124 E8B5000000          <1>     call prepareDir    ;Prepare the dir if the drive is subst/join drive
   660 00001129 727C                <1>     jc .badDriveExit
   661                              <1>     ;If the user requests to .. to a point before rbx, we fail if a disk
   662                              <1>     ; resolution
   663                              <1> .netEp: ;For net path resolution (resolution ONLY) ptrs must point past "\\"
   664 0000112B 4889FB              <1>     mov rbx, rdi
   665                              <1>     ;If rsi at the end of the string, exit for ROOT dir
   666 0000112E 803E00              <1>     cmp byte [rsi], 0
   667 00001131 7512                <1>     jnz .mainlp
   668                              <1>     ;Setup dummy dir data
   669 00001133 31C0                <1>     xor eax, eax
   670 00001135 668905(61060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   671 0000113C 668905(67060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   672 00001143 EB68                <1>     jmp short .exitGood
   673                              <1> .mainlp:
   674 00001145 E868010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   675 0000114A 84C0                <1>     test al, al
   676 0000114C 7507                <1>     jnz .notFile
   677 0000114E C605(F4060000)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   678                              <1> .notFile:
   679 00001155 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   680 00001156 E856030000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   681 0000115B 58                  <1>     pop rax
   682 0000115C 736B                <1>     jnc .deviceFound
   683 0000115E E816020000          <1>     call searchForPathspec  ;and search the directory
   684 00001163 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   685 00001165 E865020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   686 0000116A 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   687 0000116C 84C0                <1>     test al, al ;Exit if this pathspec was a file
   688 0000116E 743D                <1>     jz .exitGood
   689                              <1>     ;Here I have to take the cluster data from the found directory entry
   690                              <1>     ; and setup the search for the next pathspec portion
   691                              <1>     ;Copy necessary data from the current directory copy
   692 00001170 803D(21060000)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   693 00001177 74CC                <1>     jz .mainlp
   694 00001179 0FB705(61060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   695 00001180 C1E010              <1>     shl eax, 10h    ;Shift it high
   696 00001183 668B05(67060000)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   697                              <1>     ;eax now has the cluster number of the search
   698 0000118A 8905(73070000)      <1>     mov dword [dirClustA], eax
   699 00001190 8905(6F070000)      <1>     mov dword [dirClustPar], eax
   700 00001196 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   701 00001198 8905(79070000)      <1>     mov dword [dirEntry], eax
   702 0000119E 668905(77070000)    <1>     mov word [dirSect], ax
   703 000011A5 EB9E                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   704                              <1> .badDriveExit:
   705 000011A7 B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   706                              <1>     return
    13                              <2> %%_ret:
    14 000011AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> .exitGood:
   708 000011AD C605(F3060000)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   709                              <1> .exit:
   710                              <1>     return
    13                              <2> %%_ret:
    14 000011B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   711                              <1> .checkDev:
   712                              <1> ;If the return code is errNoFil AND Int44Fail = 0, then we check to see if 
   713                              <1> ; we are in \DEV pseudo dir
   714 000011B5 F605(5D040000)FF    <1>     test byte [Int44Fail], -1   ;Make sure we are not returning from a FAIL
   715 000011BC 751D                <1>     jnz .nodev  ;If any bits set, ignore this check
   716                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   717 000011BE 56                  <1>     push rsi
   718 000011BF 57                  <1>     push rdi
   719 000011C0 E87A020000          <1>     call checkDevPath
   720 000011C5 5F                  <1>     pop rdi
   721 000011C6 5E                  <1>     pop rsi
   722 000011C7 72EB                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   723                              <1> .deviceFound:
   724 000011C9 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   725 000011CB C605(F4060000)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   726 000011D2 C605(F3060000)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   727 000011D9 EBD9                <1>     jmp short .exit   
   728                              <1> .nodev:
   729 000011DB F9                  <1>     stc
   730 000011DC EBD6                <1>     jmp short .exit
   731                              <1> 
   732                              <1> prepareDir:
   733                              <1> ;Used to transfer the current directory if it is necessary.
   734                              <1> ;Always necessary if the user specified a subst/join drive. Else only if 
   735                              <1> ; relative
   736                              <1> ;Input: al = 1-based drive letter
   737                              <1> ;Output: rdi = Pointing at where to place chars from source string
   738                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   739 000011DE 56                  <1>     push rsi
   740 000011DF E81E590000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   741 000011E4 E8E0540000          <1>     call setDrive   ;Set internal variables, working CDS etc etc
   742 000011E9 720D                <1>     jc .critExit    ;If the drive number in al is too great or drive invalid
   743 000011EB 488B3D(01070000)    <1>     mov rdi, qword [workingCDS] 
   744 000011F2 57                  <1>     push rdi    ;Push CDS pointer on stack...
   745 000011F3 E8E7510000          <1>     call getDiskDPB  ;Update working DPB and drv before searching, dpbptr in rbp
   746                              <1> .critExit:
   747 000011F8 E80F590000          <1>     call dosCrit1Exit
   748 000011FD 5E                  <1>     pop rsi     ; ...and get CDS pointer in rsi
   749 000011FE 724A                <1>     jc .badDriveExit 
   750 00001200 488B3D(11060000)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   751                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   752                              <1>     ;If this CDS is a join drive, copy the first 3 chars and up to the next 
   753                              <1>     ;   terminating char (\, / or Null)
   754                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   755                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   756 00001207 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive
   757 0000120D 753D                <1>     jnz .prepDirJoin
   758 0000120F 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   759 00001215 7556                <1>     jnz .prepDirSubst
   760                              <1> .prepMain:
   761                              <1> ;Ok so now preliminary copy complete, now we check if path spliced
   762 00001217 F605(F0060000)FF    <1>     test byte [spliceFlag], -1
   763 0000121E 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   764                              <1>     ;Else we copy the first two chars only (X:)
   765 00001220 66A5                <1>     movsw  
   766 00001222 B05C                <1>     mov al, "\"
   767 00001224 AA                  <1>     stosb   ;Store the path separator and increment rdi
   768 00001225 31C0                <1>     xor eax, eax    ;Get cluster 0
   769 00001227 EB1B                <1>     jmp short .prepDirExitSkip
   770                              <1> .prepLoop:
   771 00001229 AC                  <1>     lodsb
   772 0000122A 84C0                <1>     test al, al ;If al was null, then we stop
   773 0000122C 7403                <1>     jz .prepDirExit
   774 0000122E AA                  <1>     stosb
   775 0000122F EBF8                <1>     jmp short .prepLoop
   776                              <1> .prepDirExit:
   777 00001231 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   778 00001235 7403                <1>     je .prepDirExitSkipPathsep
   779 00001237 B05C                <1>     mov al, "\"
   780 00001239 AA                  <1>     stosb   ;Store the path separator and increment rdi
   781                              <1> .prepDirExitSkipPathsep:
   782 0000123A 488B35(01070000)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   783 00001241 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   784                              <1> .prepDirExitSkip:
   785 00001244 E837000000          <1>     call .prepSetupDirSearchVars
   786 00001249 F8                  <1>     clc ;Clear carry before exiting
   787                              <1> .badDriveExit:
   788 0000124A 5E                  <1>     pop rsi
   789                              <1>     return
    13                              <2> %%_ret:
    14 0000124B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   790                              <1> .prepDirJoin:
   791 0000124C 51                  <1>     push rcx
   792 0000124D 56                  <1>     push rsi
   793 0000124E 4881C602000000      <1>     add rsi, 2  ;Goto the backslash for the dir
   794 00001255 B902000000          <1>     mov ecx, 2  ;Instantiate ecx to copy X:
   795                              <1> .prepDirJoin1:
   796 0000125A AC                  <1>     lodsb   ;Get the char
   797 0000125B 84C0                <1>     test al, al ;Null char?
   798 0000125D 740B                <1>     jz .prepDirJoin2
   799 0000125F E85B550000          <1>     call swapPathSeparator
   800 00001264 7404                <1>     jz .prepDirJoin2
   801 00001266 FFC1                <1>     inc ecx ;Accrue length to copy
   802 00001268 EBF0                <1>     jmp short .prepDirJoin1
   803                              <1> .prepDirJoin2:
   804 0000126A 5E                  <1>     pop rsi ;Return rsi to the start of the buffer
   805 0000126B EB05                <1>     jmp short .prepDirCopy1
   806                              <1> .prepDirSubst:
   807 0000126D 51                  <1>     push rcx
   808 0000126E 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   809                              <1> .prepDirCopy1:
   810 00001272 F3A4                <1>     rep movsb   ;Copy the string over
   811 00001274 59                  <1>     pop rcx
   812 00001275 F605(F0060000)FF    <1>     test byte [spliceFlag], -1
   813 0000127C 75B3                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   814 0000127E EBA9                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   815                              <1> .prepSetupDirSearchVars:
   816                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   817                              <1> ;       rbp = DPB pointer for the device which will do transaction
   818 00001280 51                  <1>     push rcx
   819 00001281 31C9                <1>     xor ecx, ecx
   820 00001283 66890D(77070000)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   821 0000128A 890D(79070000)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   822 00001290 E83BF5FFFF          <1>     call getFATtype ;Get type of fat
   823 00001295 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   824 0000129B 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   825                              <1>     ;FAT 32 here
   826 0000129D 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   827 0000129F 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   828 000012A1 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   829                              <1> .psdsvExit:
   830 000012A4 8905(73070000)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   831 000012AA 8905(6F070000)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   832 000012B0 59                  <1>     pop rcx
   833                              <1>     return 
    13                              <2> %%_ret:
    14 000012B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   834                              <1> 
   835                              <1> copyPathspec:
   836                              <1> ;1) Copies a path portion from the source buffer to the destination
   837                              <1> ;2) Advances rsi to the next null, \ or /
   838                              <1> ;3) Expands all * to ?'s
   839                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   840                              <1> ;    next path separator and rdi pointing to the previous pathsep
   841                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   842                              <1> ;    with rsi moving to path separator
   843                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   844                              <1> ;
   845                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   846                              <1> ;           rdi = Points to where to store it
   847                              <1> ;
   848                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   849                              <1> ;           rdi = First char of next space to store next pathspec
   850                              <1> ;           al = Last char stored (either \ or NULL)
   851                              <1> ;           CF=NC = OK path
   852                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   853                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   854 000012B2 57                  <1>     push rdi    ;Save the pointer into the user buffer
   855 000012B3 C605(80040000)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   856 000012BA 488D3D(C8060000)    <1>     lea rdi, fcbName
   857 000012C1 57                  <1>     push rdi
   858 000012C2 B903000000          <1>     mov ecx, 3
   859 000012C7 B820202020          <1>     mov eax, "    " ;Four spaces
   860 000012CC F3AB                <1>     rep stosd   ;Store 12 spaces
   861 000012CE 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   862                              <1> 
   863 000012CF 488D1D(D3060000)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   864 000012D6 AC                  <1>     lodsb   ;Get first char from user path in al
   865 000012D7 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   866 000012D9 745B                <1>     je .cpsDots
   867 000012DB 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   868                              <1> ;First char is not a dot, so now check if starts with E5h? 
   869                              <1> ;If so, store 05h in its place! KANJI SUPPORT WOOHOO!
   870 000012DE 3CE5                <1>     cmp al, 0E5h
   871 000012E0 7506                <1>     jne .cpsMainLoop
   872 000012E2 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   873 000012E5 B005                <1>     mov al, 05h
   874 000012E7 AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   875                              <1> .cpsMainLoop:
   876 000012E8 AC                  <1>     lodsb   ;Get the char in al and advance rsi
   877 000012E9 84C0                <1>     test al, al ;Is it the null char?
   878 000012EB 7471                <1>     jz .cpsStore  ;If so, terminate immediately
   879 000012ED E8CD540000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   880 000012F2 746A                <1>     jz .cpsStore ; and then exit with the final converted pathsep in al
   881 000012F4 3C2E                <1>     cmp al, "." ;Filename extension separator
   882 000012F6 7420                <1>     je .cpsExtension
   883                              <1>     ;If we have space in the filename, we check to see if the next char is *
   884 000012F8 3C2A                <1>     cmp al, "*" ;Wildcard?
   885 000012FA 7430                <1>     je .cpsWildcard
   886 000012FC 3C3F                <1>     cmp al, "?" ;Good wildcard?
   887 000012FE 740C                <1>     je .store
   888 00001300 E8C6540000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   889 00001305 E802560000          <1>     call checkCharValid ; and check it is a valid char
   890 0000130A 7408                <1>     je .cpsInvalidChar  ;If it is not valid, replace with 0 and exit
   891                              <1> .store:
   892 0000130C 4839DF              <1>     cmp rdi, rbx
   893 0000130F 742D                <1>     je .cpsProcessName ;Skip any non-terminating chars
   894 00001311 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   895 00001312 EBD4                <1>     jmp short .cpsMainLoop
   896                              <1> .cpsInvalidChar:
   897 00001314 30C0                <1>     xor al, al
   898 00001316 EB26                <1>     jmp short .cpsProcessName
   899                              <1> .cpsExtension:
   900                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   901 00001318 B903000000          <1>     mov ecx, 3 
   902 0000131D 488D3D(D0060000)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   903 00001324 57                  <1>     push rdi
   904 00001325 B020                <1>     mov al, " "
   905 00001327 F3AA                <1>     rep stosb
   906 00001329 5F                  <1>     pop rdi
   907 0000132A EBBC                <1>     jmp short .cpsMainLoop
   908                              <1> .cpsWildcard:
   909 0000132C B03F                <1>     mov al, "?"
   910                              <1> .cpsWildcardLp:
   911 0000132E AA                  <1>     stosb
   912 0000132F 4839DF              <1>     cmp rdi, rbx
   913 00001332 75FA                <1>     jne .cpsWildcardLp
   914 00001334 EBB2                <1>     jmp short .cpsMainLoop
   915                              <1> 
   916                              <1> .cpsDots:
   917 00001336 AA                  <1>     stosb   ;Store the first dot
   918 00001337 8A06                <1>     mov al, byte [rsi]
   919 00001339 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   920 0000133B 752B                <1>     jne .oneDotResolve
   921 0000133D A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   922                              <1> 
   923                              <1> .cpsProcessName:
   924                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
   925 0000133E 84C0                <1>     test al, al 
   926 00001340 741C                <1>     jz .cpsStore
   927 00001342 E878540000          <1>     call swapPathSeparator
   928 00001347 7415                <1>     jz .cpsStore
   929                              <1> .cpsFindTerminator:
   930 00001349 AC                  <1>     lodsb
   931 0000134A 84C0                <1>     test al, al 
   932 0000134C 7410                <1>     jz .cpsStore
   933 0000134E E86C540000          <1>     call swapPathSeparator
   934 00001353 7409                <1>     jz .cpsStore
   935 00001355 E8B2550000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
   936 0000135A 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
   937                              <1>     ;If we encounter a terminator, convert to 0
   938 0000135C 30C0                <1>     xor al, al
   939                              <1> .cpsStore:
   940 0000135E 488D3D(D3060000)    <1>     lea rdi, fcbName+11
   941 00001365 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   942 00001366 5F                  <1>     pop rdi
   943                              <1>     return
    13                              <2> %%_ret:
    14 00001367 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   944                              <1> .oneDotResolve:
   945 00001368 488D3D(D3060000)    <1>     lea rdi, fcbName+11
   946 0000136F AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   947 00001370 5F                  <1>     pop rdi ;rdi points to fresh space
   948 00001371 48FFCF              <1>     dec rdi ;Point to the previous path separator
   949 00001374 AA                  <1>     stosb   ;Store this separator as if it is what we had before
   950                              <1>     return
    13                              <2> %%_ret:
    14 00001375 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   951                              <1> .cpsBadChar:
   952 00001376 30C0                <1>     xor al, al  ;Convert the char to a terminator
   953                              <1>     return
    13                              <2> %%_ret:
    14 00001378 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   954                              <1> 
   955                              <1> searchForPathspec:
   956                              <1>     ;Now search the current directory for this filename
   957                              <1>     ;Find first using SDA ffBlock
   958                              <1>     ;If al = 0, we have final file name or directory name
   959                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
   960                              <1>     ;Output: CF=CY => Error occured
   961                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
   962                              <1>     ;                 FF block somewhat setup
   963                              <1>     ;Preserves rax, rbx, rsi,  rdi
   964 00001379 50                  <1>     push rax
   965 0000137A 53                  <1>     push rbx
   966 0000137B 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
   967 0000137C 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
   968 0000137D 0FB61D(5C040000)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
   969 00001384 53                  <1>     push rbx    ;and push it onto the stack
   970                              <1> ;Evaluate whether we are searching for a file for a directory
   971 00001385 84C0                <1>     test al, al
   972 00001387 741D                <1>     jz .sfpPNfile
   973                              <1>     ;Fall if subdir
   974 00001389 488D3D(C8060000)    <1>     lea rdi, fcbName
   975 00001390 B03F                <1>     mov al, "?" ;Search for wildcard
   976 00001392 B90B000000          <1>     mov ecx, 11
   977 00001397 F2AE                <1>     repne scasb
   978 00001399 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
   979 0000139B B010                <1>     mov al, dirDirectory    ;We want a directory only search.
   980 0000139D C605(5C040000)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
   981 000013A4 EB07                <1>     jmp short .sfpPNMain
   982                              <1> .sfpPNfile:
   983                              <1>     ;Here if we are searching for a file or directory as setup by search init
   984 000013A6 0FB605(EB060000)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
   985                              <1> .sfpPNMain:
   986 000013AD 803D(21060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
   987 000013B4 7405                <1>     je .sfpPNNoDisk
   988 000013B6 E81EF9FFFF          <1>     call searchDir
   989                              <1> .sfpPNNoDisk:
   990 000013BB 5B                  <1>     pop rbx
   991 000013BC 881D(5C040000)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
   992 000013C2 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
   993 000013C3 5E                  <1>     pop rsi
   994 000013C4 5B                  <1>     pop rbx
   995 000013C5 58                  <1>     pop rax
   996                              <1>     return
    13                              <2> %%_ret:
    14 000013C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   997                              <1> .sfpPnf:
   998 000013C7 B803000000          <1>     mov eax, errPnf
   999                              <1> .sfpErrExit:
  1000 000013CC F9                  <1>     stc ;Set carry
  1001 000013CD EBEC                <1>     jmp short .sfpPNNoDisk
  1002                              <1> 
  1003                              <1> addPathspecToBuffer:
  1004                              <1> ;Input: fcbName = Qualified pathname portion
  1005                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
  1006                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
  1007                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
  1008                              <1> ;rbx points to the "head of the path"
  1009 000013CF F605(21060000)FF    <1>     test byte [skipDisk], -1
  1010                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000013D6 75EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1011 000013D8 803D(C8060000)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
  1012 000013DF 741F                <1>     je .aptbPNDots
  1013                              <1>     ;Copy filename over to internal buffer
  1014 000013E1 56                  <1>     push rsi    ;Save source pointer position
  1015 000013E2 488D35(C8060000)    <1>     lea rsi, fcbName
  1016 000013E9 E8F7FAFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1017 000013EE 48FFCF              <1>     dec rdi ;Go back to the copied Null char
  1018 000013F1 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1019                              <1> .aptbOkExit:
  1020 000013F2 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the prev pathspec term char in al
  1021 000013F5 E8C5530000          <1>     call swapPathSeparator
  1022 000013FA 7402                <1>     jz .aptbPNexit
  1023 000013FC 30C0                <1>     xor al, al  ;Set al to 0 else (all other chars are terminators)
  1024                              <1> .aptbPNexit:
  1025 000013FE AA                  <1>     stosb   ;Store this final char (either \ or NULL) and return
  1026                              <1>     return
    13                              <2> %%_ret:
    14 000013FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1027                              <1> .aptbPNDots:
  1028                              <1> ;For one dot, we leave rdi where it is
  1029                              <1> ;For two dots, we search backwards for the previous "\"
  1030 00001400 803D(C9060000)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1031 00001407 F8                  <1>     clc ;Ensure we clear CF if we return via here
  1032 00001408 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the previous char in al if we return
  1033                              <1>     retne   ;Return with rdi untouched and rsi advanced.
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000140B 75F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1034                              <1>     ;Here we have two dots
  1035                              <1>     ;Walk rdi backwards until a \ is found
  1036 0000140D 48FFCF              <1>     dec rdi  ;rdi points to current char. Preceeding it is a \. Skip that
  1037 00001410 66817FFF3A5C        <1>     cmp word [rdi - 1], ":\" ;IF the char preceeding \ is :, then error out
  1038 00001416 7420                <1>     je .aptbPnf
  1039 00001418 66817FFF5C5C        <1>     cmp word [rdi - 1], "\\" ;Similar net name check
  1040 0000141E 7418                <1>     je .aptbPnf
  1041                              <1> .aptbPNDotsLp:
  1042 00001420 48FFCF              <1>     dec rdi
  1043 00001423 803F5C              <1>     cmp byte [rdi], "\"
  1044 00001426 75F8                <1>     jne .aptbPNDotsLp  ;Keep looping around until it is a "\"
  1045                              <1>     ;Don't go past the pathsep, since we may need to replace it with a null
  1046 00001428 803D(21060000)00    <1>     cmp byte [skipDisk], 0  ;Are we in name resolution mode?
  1047 0000142F 74C1                <1>     je .aptbOkExit    ;If clear, we are, so just return
  1048 00001431 4839DF              <1>     cmp rdi, rbx    ;Are we before the start of the path? (i.e in subst?)
  1049 00001434 7202                <1>     jb .aptbPnf
  1050 00001436 EBBA                <1>     jmp short .aptbOkExit
  1051                              <1> ;.aptbSearchError:
  1052                              <1> ;    mov eax, errFnf
  1053                              <1> ;    jmp short .aptbErrExit
  1054                              <1> .aptbPnf:
  1055 00001438 B803000000          <1>     mov eax, errPnf
  1056                              <1> .aptbErrExit:
  1057 0000143D F9                  <1>     stc ;Set carry
  1058                              <1>     return
    13                              <2> %%_ret:
    14 0000143E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1059                              <1> 
  1060                              <1> checkDevPath:
  1061                              <1> ;Called only if the file/directory was not found on disk.
  1062                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1063                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1064                              <1> ; and check to see if it is a char device. If it is, build a directory
  1065                              <1> ; If it is not, proceed with the request fail.
  1066                              <1> ;
  1067                              <1> ;Input: rsi = Pointer to the next path spec
  1068                              <1> ;Output: CF=NC => Char device found, directory built
  1069                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1070 0000143F 803D(21060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1071                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001446 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1072 00001448 803D(D3060000)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1073 0000144F 7459                <1>     je .notOk                      
  1074                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1075 00001451 50                  <1>     push rax
  1076 00001452 48B844455620202020- <1>     mov rax, "DEV     "
  1076 0000145B 20                  <1>
  1077 0000145C 483905(C8060000)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1078 00001463 58                  <1>     pop rax
  1079 00001464 7544                <1>     jne .notOk
  1080 00001466 813D(D0060000)2020- <1>     cmp dword [fcbName + 8], "   \"
  1080 0000146E 205C                <1>
  1081 00001470 7538                <1>     jne .notOk
  1082                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1083                              <1>     ; looking for a device driver
  1084                              <1>     ;First append it to rdi 
  1085 00001472 B84445565C          <1>     mov eax, "DEV\" 
  1086 00001477 AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1087 00001478 57                  <1>     push rdi
  1088 00001479 488D3D(C8060000)    <1>     lea rdi, fcbName
  1089 00001480 E818FAFFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1090                              <1>     ;Returns in al the terminating char of the source string
  1091 00001485 5F                  <1>     pop rdi
  1092                              <1>     ;If al is a pathsep, fail
  1093 00001486 E834530000          <1>     call swapPathSeparator
  1094 0000148B 741D                <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1095 0000148D 30C0                <1>     xor al, al
  1096 0000148F 8805(D3060000)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1097 00001495 53                  <1>     push rbx
  1098 00001496 E844000000          <1>     call checkIfCharDevice
  1099 0000149B 5B                  <1>     pop rbx ;Don't need bh yet
  1100 0000149C 720C                <1>     jc .notOk
  1101 0000149E E873000000          <1>     call buildCharDir
  1102                              <1>     ;Here the device was determined to be a char device.
  1103                              <1>     ;A dummy directory entry was built for it.
  1104                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1105                              <1>     ; Do not Find Next!
  1106                              <1> .copyName:
  1107 000014A3 E83DFAFFFF          <1>     call FCBToAsciiz    ;Copy the ASCII form of the name over 
  1108 000014A8 F8                  <1>     clc
  1109                              <1>     return
    13                              <2> %%_ret:
    14 000014A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1110                              <1> .notOk:
  1111 000014AA B802000000          <1>     mov eax, errFnf
  1112 000014AF F9                  <1>     stc
  1113                              <1>     return
    13                              <2> %%_ret:
    14 000014B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1114                              <1> .charDevSearch:
  1115 000014B1 53                  <1>     push rbx
  1116 000014B2 E828000000          <1>     call checkIfCharDevice
  1117 000014B7 5B                  <1>     pop rbx ;Dont need bh yet
  1118 000014B8 72F0                <1>     jc .notOk
  1119 000014BA E857000000          <1>     call buildCharDir
  1120 000014BF 803D(D3060000)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1121 000014C6 750C                <1>     jne .cds2
  1122 000014C8 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1123 000014CC 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1124 000014CE 48FFCF              <1>     dec rdi
  1125 000014D1 B02F                <1>     mov al, "/" ;Replace \ with "/"
  1126 000014D3 AA                  <1>     stosb   ;Store that and let the dir write the filename
  1127                              <1> .cds2:
  1128 000014D4 803D(21060000)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1129 000014DB 75C6                <1>     jne .copyName    ;Now jump if in disk search
  1130 000014DD F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1131                              <1>     return
    13                              <2> %%_ret:
    14 000014DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1132                              <1> 
  1133                              <1> checkIfCharDevice:  ;Int 4Fh AX=1223h
  1134                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1135                              <1> ; device driver chain. 
  1136                              <1> ;Output: CF=CY if not found
  1137                              <1> ;        CF=NC if found
  1138                              <1> ;           BH = Low byte of the device attribute word
  1139 000014DF 50                  <1>     push rax
  1140 000014E0 57                  <1>     push rdi
  1141 000014E1 488B05(C8060000)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1142 000014E8 488D3D(6E000000)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1143                              <1> .checkName:
  1144 000014EF 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1145 000014F3 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1146 000014F5 F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1147 000014F8 740C                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1148 000014FA 80CF20              <1>     or bh, 20h  ;RBIL says Bit 5 set and Bits 6-7 clear if Char dev
  1149 000014FD 80E73F              <1>     and bh, ~(80h|40h) ;Clear the upper two bits
  1150 00001500 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1151 00001504 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1152                              <1> .walkList:
  1153 00001506 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1154 00001509 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1155 00001510 75DD                <1>     jne .checkName  ;If no, rdi points to char device
  1156 00001512 F9                  <1>     stc
  1157                              <1> .exit:
  1158 00001513 5F                  <1>     pop rdi
  1159 00001514 58                  <1>     pop rax
  1160                              <1>     return
    13                              <2> %%_ret:
    14 00001515 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1161                              <1> 
  1162                              <1> buildCharDir:
  1163                              <1> ;Build a dummy directory entry for the char device in FCBName
  1164                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1165 00001516 803D(21060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1166                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000151D 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1167 0000151F 50                  <1>     push rax
  1168 00001520 57                  <1>     push rdi
  1169 00001521 C605(D3060000)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1170 00001528 488D3D(4D060000)    <1>     lea rdi, curDirCopy
  1171                              <1>     ;Zero the directory copy (32 bytes)
  1172 0000152F 50                  <1>     push rax
  1173 00001530 51                  <1>     push rcx
  1174 00001531 57                  <1>     push rdi
  1175 00001532 31C0                <1>     xor eax, eax    ;Zero rax
  1176 00001534 B904000000          <1>     mov ecx, 4
  1177 00001539 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1178 0000153C 5F                  <1>     pop rdi
  1179 0000153D 59                  <1>     pop rcx
  1180 0000153E 58                  <1>     pop rax
  1181 0000153F 488B05(C8060000)    <1>     mov rax, qword [fcbName]
  1182 00001546 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1183 00001549 B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1184 0000154E 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1185 00001551 C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1186                              <1>     ;Get date and time and set the write time in the directory entry
  1187 00001555 E8C1110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1188 0000155A E8A7120000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1189 0000155F 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1190 00001562 31C0                <1>     xor eax, eax
  1191 00001564 5F                  <1>     pop rdi
  1192 00001565 58                  <1>     pop rax
  1193                              <1>     return
    13                              <2> %%_ret:
    14 00001566 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1194                              <1> 
  1195                              <1> checkFailingComp:
  1196                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1197                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1198                              <1> ;Returns: ZF=ZE => Last path componant
  1199                              <1> ;         ZF=NZ => Not last path componant
  1200 00001567 50                  <1>     push rax
  1201 00001568 8A05(D3060000)      <1>     mov al, byte [fcbName + 11]
  1202 0000156E 84C0                <1>     test al, al
  1203 00001570 58                  <1>     pop rax
  1204                              <1>     return
    13                              <2> %%_ret:
    14 00001571 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    30                                  %include "./Source/Kernel/FAT/dirfun.asm"
     1                              <1> ;---------------------------------------------------:
     2                              <1> ;                   KERNEL FUNCTIONS                :
     3                              <1> ;---------------------------------------------------:
     4                              <1> makeDIR:           ;ah = 39h
     5                              <1> ;For make, the path must exist but the final componant must not exist.
     6                              <1> ;Input: rdx = Pointer to ASCIIZ string
     7 00001572 4889D7              <1>     mov rdi, rdx
     8 00001575 E883520000          <1>     call strlen
     9 0000157A 81F940000000        <1>     cmp ecx, 64
    10 00001580 7607                <1>     jbe .okLength
    11                              <1> .badPath:
    12 00001582 B003                <1>     mov al, errPnf
    13 00001584 E9C4550000          <1>     jmp extErrExit
    14                              <1> .okLength:
    15 00001589 4889D6              <1>     mov rsi, rdx
    16 0000158C E8D6520000          <1>     call checkPathspecOK
    17 00001591 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
    18                              <1> .pathOk:
    19 00001593 E861530000          <1>     call scanPathWC
    20 00001598 72E8                <1>     jc .badPath ;Dont allow wildcards
    21                              <1>     ;Path is ok, now proceed
    22 0000159A 488D3D(11050000)    <1>     lea rdi, buffer1    ;Build the full path here
    23 000015A1 E860FAFFFF          <1>     call getFilePath ;Get a Directory path in buffer1, hitting the disk
    24                              <1>     ;If the path exists, exit error
    25 000015A6 0F83A1550000        <1>     jnc extErrExit
    26                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    27 000015AC E8B6FFFFFF          <1>     call checkFailingComp
    28 000015B1 0F8596550000        <1>     jnz extErrExit
    29                              <1>     ;So all is well, the new subdirectories name is in fcbName
    30                              <1>     ;The parent dir's directory entry is in the curDirCopy
    31 000015B7 E85C500000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    32                              <1>     ;returns in rdi the working cds ptr
    33 000015BC 7312                <1>     jnc .notNet
    34 000015BE B803110000          <1>     mov eax, 1103h
    35 000015C3 CD4F                <1>     int 4fh
    36 000015C5 0F8282550000        <1>     jc extErrExit
    37 000015CB E96F550000          <1>     jmp extGoodExit
    38                              <1> .notNet:
    39 000015D0 E82D550000          <1>     call dosCrit1Enter
    40                              <1>     ;Current dpb ptr is already set
    41                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    42                              <1>     ;First we make a dummy dir in curDirCopy
    43 000015D5 488B2D(F9060000)    <1>     mov rbp, qword [workingDPB]
    44 000015DC 488D35(C8060000)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    45 000015E3 488D3D(4D060000)    <1>     lea rdi, curDirCopy
    46 000015EA 48A5                <1>     movsq   ;Copy the name over
    47 000015EC A5                  <1>     movsd
    48 000015ED E829110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    49 000015F2 E80F120000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    50 000015F7 8905(5B060000)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    51 000015FD 8905(63060000)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    52 00001603 31C0                <1>     xor eax, eax
    53 00001605 8905(69060000)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    54 0000160B C605(58060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    55 00001612 8B05(6F070000)      <1>     mov eax, dword [dirClustPar]
    56                              <1> .searchForDirSpace:
    57 00001618 8905(73070000)      <1>     mov dword [dirClustA], eax
    58 0000161E 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    59 00001620 668905(77070000)    <1>     mov word [dirSect], ax
    60 00001627 8905(79070000)      <1>     mov dword [dirEntry], eax
    61 0000162D E8C6040000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    62 00001632 7328                <1>     jnc .dirEntryFnd
    63 00001634 813D(6F070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    63 0000163C 0000                <1>
    64 0000163E 0F844A010000        <1>     je .bad ;Set CF and exit
    65 00001644 E8F9050000          <1>     call growDirectory  ;Increase directory size by 1 cluster, writes to buffer
    66 00001649 0F823F010000        <1>     jc .bad
    67 0000164F 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    68 00001654 0F8434010000        <1>     je .bad
    69                              <1>     ;Else eax = Newly allocated cluster
    70 0000165A EBBC                <1>     jmp short .searchForDirSpace
    71                              <1> .dirEntryFnd:
    72                              <1> ;rdi points to current directory copy
    73                              <1> ;rsi now points to offset in the buffer to write the entry to
    74                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
    75 0000165C 488B1D(2D070000)    <1>     mov rbx, qword [currBuff]
    76 00001663 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
    77                              <1>      
    78 00001667 488905(35070000)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
    79 0000166E 4881C330000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
    80 00001675 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
    81 00001678 668935(3D070000)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
    82                              <1> ;Must now request a cluster and sanitise it
    83 0000167F E831F2FFFF          <1>     call startNewChain  ;Get cluster number in eax
    84 00001684 0F8209010000        <1>     jc .badExit
    85 0000168A E8E6050000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax, writes to buf
    86 0000168F 0F82FE000000        <1>     jc .badExit
    87                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
    88 00001695 668905(67060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
    89 0000169C C1E810              <1>     shr eax, 10h    ;Get high word low
    90 0000169F 668905(61060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
    91 000016A6 488B05(35070000)    <1>     mov rax, qword [tempSect]   ;Get the sector back
    92 000016AD E86EF0FFFF          <1>     call getBufForDirNoFile
    93 000016B2 0F82DB000000        <1>     jc .badExit
    94 000016B8 0FB705(3D070000)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
    95 000016BF 488D35(4D060000)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
    96 000016C6 488D7C0330          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
    97 000016CB B904000000          <1>     mov ecx, 4
    98 000016D0 F348A5              <1>     rep movsq   ;Copy over the buffered directory
    99 000016D3 E8BDEEFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   100                              <1>     ;Now need to read in data sector and make two entries . and ..
   101 000016D8 57                  <1>     push rdi
   102 000016D9 51                  <1>     push rcx
   103 000016DA B90B000000          <1>     mov ecx, 11
   104 000016DF 488D3D(4D060000)    <1>     lea rdi, curDirCopy
   105 000016E6 B020                <1>     mov al, " "
   106 000016E8 F3AA                <1>     rep stosb
   107 000016EA 59                  <1>     pop rcx
   108 000016EB 5F                  <1>     pop rdi
   109 000016EC 48B82E000000000000- <1>     mov rax, "."
   109 000016F5 00                  <1>
   110 000016F6 8805(4D060000)      <1>     mov byte [curDirCopy], al
   111 000016FC 0FB705(67060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   112 00001703 0FB715(61060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   113 0000170A C605(58060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
   114 00001711 C1E210              <1>     shl edx, 10h
   115 00001714 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   116 00001716 E820F1FFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   117 0000171B E800F0FFFF          <1>     call getBufForDirNoFile
   118 00001720 7271                <1>     jc .badExit
   119                              <1>     ;rbx has buffer pointer now
   120 00001722 488D35(4D060000)    <1>     lea rsi, curDirCopy
   121 00001729 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   122 0000172D B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   123 00001732 F348A5              <1>     rep movsq
   124                              <1>     ;Now create .. entry
   125 00001735 C605(4E060000)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   126 0000173C 8B05(6F070000)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   127 00001742 E889F0FFFF          <1>     call getFATtype
   128 00001747 81F902000000        <1>     cmp ecx, 2
   129 0000174D 7207                <1>     jb .notFAT32
   130 0000174F 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   131 00001752 7502                <1>     jne .notFAT32
   132 00001754 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   133                              <1> .notFAT32:
   134 00001756 668905(67060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   135 0000175D C1E810              <1>     shr eax, 10h
   136 00001760 668905(61060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   137 00001767 488D35(4D060000)    <1>     lea rsi, curDirCopy
   138 0000176E B904000000          <1>     mov ecx, 4
   139 00001773 F348A5              <1>     rep movsq
   140 00001776 E81AEEFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   141 0000177B E8E3EDFFFF          <1>     call writeThroughBuffers    ;Write the buffers to disk
   142 00001780 7211                <1>     jc .badExit
   143                              <1> .okExit:
   144                              <1>     ;AND WE ARE DONE!
   145 00001782 E885530000          <1>     call dosCrit1Exit
   146 00001787 31C0                <1>     xor eax, eax
   147 00001789 E9B1530000          <1>     jmp extGoodExit
   148                              <1> .bad:
   149 0000178E B805000000          <1>     mov eax, errAccDen
   150                              <1> .badExit:
   151 00001793 E894EDFFFF          <1>     call cancelWriteThroughBuffers
   152 00001798 E86F530000          <1>     call dosCrit1Exit
   153 0000179D E9AB530000          <1>     jmp extErrExit
   154                              <1> 
   155                              <1> removeDIR:         ;ah = 3Ah
   156 000017A2 4889D7              <1>     mov rdi, rdx
   157 000017A5 E853500000          <1>     call strlen
   158 000017AA 81F940000000        <1>     cmp ecx, 64
   159 000017B0 7607                <1>     jbe .okLength
   160                              <1> .badPath:
   161 000017B2 B003                <1>     mov al, errPnf
   162 000017B4 E994530000          <1>     jmp extErrExit
   163                              <1> .okLength:
   164 000017B9 4889D6              <1>     mov rsi, rdx
   165 000017BC E8A6500000          <1>     call checkPathspecOK
   166 000017C1 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   167                              <1> .pathOk:
   168 000017C3 E831510000          <1>     call scanPathWC
   169 000017C8 72E8                <1>     jc .badPath ;Dont allow wildcards
   170                              <1>     ;Path is ok, now proceed
   171 000017CA 488D3D(11050000)    <1>     lea rdi, buffer1    ;Build the full path here
   172 000017D1 E82CF8FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   173 000017D6 72DA                <1>     jc .badPath    ;Path Doesn't exist
   174 000017D8 E83B4E0000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   175 000017DD 7312                <1>     jnc .notNet
   176 000017DF B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   177 000017E4 CD4F                <1>     int 4fh
   178 000017E6 0F8261530000        <1>     jc extErrExit
   179 000017EC E94E530000          <1>     jmp extGoodExit
   180                              <1> .notNet:
   181 000017F1 E80C530000          <1>     call dosCrit1Enter
   182 000017F6 488B2D(F9060000)    <1>     mov rbp, qword [workingDPB]
   183                              <1>     ;Now let use check that our directory is not the CDS currentdir
   184 000017FD 488B35(01070000)    <1>     mov rsi, qword [workingCDS]
   185 00001804 488D3D(11050000)    <1>     lea rdi, buffer1
   186 0000180B E8ED4F0000          <1>     call strlen ;Get the length of the full qualified name in ecx
   187 00001810 66890D(3D070000)    <1>     mov word [pathLen], cx
   188 00001817 E8F84F0000          <1>     call strcmp ;Then compare rdi to CDS string
   189 0000181C 750F                <1>     jnz .notEqual
   190 0000181E B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   191 00001823 E8E4520000          <1>     call dosCrit1Exit
   192 00001828 E920530000          <1>     jmp extErrExit
   193                              <1> .notEqual:
   194 0000182D 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   195                              <1>     ;If the given path length is one more than the backslash offset
   196                              <1>     ; due to the terminating null, then the user is trying to delete the 
   197                              <1>     ; root dir. Fail this.
   198 00001830 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   199 00001834 FFC1                <1>     inc ecx
   200 00001836 663B0D(3D070000)    <1>     cmp cx, word [pathLen]
   201 0000183D 0F8423010000        <1>     je .accessDenied
   202 00001843 E8C3020000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   203                              <1>     ;for the entry in the sector we are hoping to delete
   204 00001848 0FB705(61060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   205 0000184F C1E010              <1>     shl eax, 10h
   206 00001852 0FB71D(67060000)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   207 00001859 09D8                <1>     or eax, ebx
   208 0000185B 8905(6F070000)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   209 00001861 E8D5EFFFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   210 00001866 E8B5EEFFFF          <1>     call getBufForDirNoFile
   211 0000186B 0F82FA000000        <1>     jc .exitBad
   212                              <1>     ;rbx points to buffer
   213 00001871 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   214 00001875 48B82E202020202020- <1>     mov rax, ".       "
   214 0000187E 20                  <1>
   215 0000187F 483906              <1>     cmp qword [rsi], rax
   216 00001882 0F85DE000000        <1>     jne .accessDenied
   217 00001888 B42E                <1>     mov ah, "." ;Screw the partial stall
   218 0000188A 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   219 0000188E 0F85D2000000        <1>     jne .accessDenied
   220 00001894 4881C620000000      <1>     add rsi, fatDirEntry_size
   221 0000189B 488D3D(4D060000)    <1>     lea rdi, curDirCopy
   222 000018A2 B904000000          <1>     mov ecx, 4
   223 000018A7 F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   224                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   225                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   226 000018AA 488D3D(C8060000)    <1>     lea rdi, fcbName
   227 000018B1 B03F                <1>     mov al, "?"
   228 000018B3 B90B000000          <1>     mov ecx, 11
   229 000018B8 F3AA                <1>     rep stosb   ;Store the pattern to search for
   230 000018BA 30C0                <1>     xor al, al  ;Store a terminating zero
   231 000018BC AA                  <1>     stosb
   232 000018BD 8B05(6F070000)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   233 000018C3 50                  <1>     push rax    ;Save on stack temporarily
   234 000018C4 8905(73070000)      <1>     mov dword [dirClustA], eax
   235 000018CA 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   236 000018CC 668905(77070000)    <1>     mov word [dirSect], ax
   237 000018D3 C705(79070000)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   237 000018DB 0000                <1>
   238 000018DD C605(EB060000)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   239 000018E4 58                  <1>     pop rax
   240 000018E5 E851EFFFFF          <1>     call getStartSectorOfCluster
   241 000018EA E853EEFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   242 000018EF 727A                <1>     jc .exitBad
   243 000018F1 E8C3F4FFFF          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   244 000018F6 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   245 000018FD 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   246 00001903 C605(5C040000)FF    <1>     mov byte [fileDirFlag], -1  ;Make sure we are searching for everythin
   247 0000190A E807F4FFFF          <1>     call searchDir.rmdirEP
   248 0000190F 7355                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   249                              <1>     ;Else, this is a empty dir, we can remove it
   250                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   251 00001911 488B05(35070000)    <1>     mov rax, qword [tempSect]
   252 00001918 E825EEFFFF          <1>     call getBufForDOS
   253 0000191D 724C                <1>     jc .exitBad
   254 0000191F E895F4FFFF          <1>     call adjustDosDirBuffer
   255 00001924 0FB705(3D070000)    <1>     movzx eax, word [entry]
   256 0000192B 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   257 0000192F 4801C6              <1>     add rsi, rax    
   258 00001932 8A05(F7060000)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   259 00001938 8806                <1>     mov byte [rsi], al  ;Store delchar there
   260 0000193A 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   261 0000193E 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   262 00001942 E84EECFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   263 00001947 C1E210              <1>     shl edx, 10h
   264 0000194A 09D0                <1>     or eax, edx
   265                              <1>     ;Now remove the FAT chain
   266 0000194C E8A3F0FFFF          <1>     call unlinkFAT
   267 00001951 7218                <1>     jc .exitBad
   268 00001953 E80BECFFFF          <1>     call writeThroughBuffers
   269 00001958 7211                <1>     jc .exitBad
   270 0000195A E8AD510000          <1>     call dosCrit1Exit
   271 0000195F 31C0                <1>     xor eax, eax
   272 00001961 E9D9510000          <1>     jmp extGoodExit
   273                              <1> .accessDenied:
   274 00001966 B805000000          <1>     mov eax, errAccDen
   275                              <1> .exitBad:
   276 0000196B E8BCEBFFFF          <1>     call cancelWriteThroughBuffers
   277 00001970 F9                  <1>     stc
   278 00001971 E896510000          <1>     call dosCrit1Exit
   279 00001976 E9D2510000          <1>     jmp extErrExit
   280                              <1> 
   281                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   282                              <1> ;Input: rdx = Pointer to ASCIIZ string
   283 0000197B 4889D7              <1>     mov rdi, rdx
   284 0000197E E87A4E0000          <1>     call strlen
   285 00001983 81F940000000        <1>     cmp ecx, 64
   286 00001989 7607                <1>     jbe .okLength
   287                              <1> .badPath:
   288 0000198B B003                <1>     mov al, errPnf
   289 0000198D E9BB510000          <1>     jmp extErrExit
   290                              <1> .okLength:
   291 00001992 4889D6              <1>     mov rsi, rdx
   292 00001995 E8CD4E0000          <1>     call checkPathspecOK
   293 0000199A 72EF                <1>     jc .badPath  ;Don't allow any malformed chars or wildcards
   294 0000199C E8AC4F0000          <1>     call checkPathNet
   295 000019A1 74E8                <1>     jz .badPath ;Or Net paths
   296                              <1>     ;Path is ok, now proceed
   297 000019A3 488D3D(11050000)    <1>     lea rdi, buffer1    ;Build the full path here
   298 000019AA E853F6FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   299 000019AF 0F8298510000        <1>     jc extErrExit   ;Exit with error code in eax
   300                              <1>     ;The path must've been ok, so now copy the path into the CDS
   301                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   302 000019B5 488B35(01070000)    <1>     mov rsi, qword [workingCDS] ;Copy the CDS to the tmpCDS
   303 000019BC 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   304 000019C2 756D                <1>     jnz .net    ;This is done by the redirector for redirector drives
   305 000019C4 488D3D(6D060000)    <1>     lea rdi, tmpCDS
   306 000019CB B95B000000          <1>     mov ecx, cds_size
   307 000019D0 F3A4                <1>     rep movsb
   308                              <1>     ;If the path is longer than 67, call it an invalid path
   309 000019D2 488D3D(11050000)    <1>     lea rdi, buffer1
   310 000019D9 E81F4E0000          <1>     call strlen ;Get the length of this path
   311 000019DE 81F943000000        <1>     cmp ecx, 67
   312 000019E4 77A5                <1>     ja .badPath
   313 000019E6 4889FE              <1>     mov rsi, rdi    ;Move buffer source to rsi
   314 000019E9 488D3D(6D060000)    <1>     lea rdi, tmpCDS
   315 000019F0 F3A4                <1>     rep movsb   ;Copy the path over
   316                              <1>     ;Now get the start cluster from the directory copy
   317 000019F2 0FB715(67060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   318 000019F9 0FB705(61060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   319 00001A00 C1E010              <1>     shl eax, 10h
   320 00001A03 09D0                <1>     or eax, edx ;Add low bits to eax
   321 00001A05 8905(BA060000)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   322 00001A0B 488D35(6D060000)    <1>     lea rsi, tmpCDS
   323 00001A12 488B3D(01070000)    <1>     mov rdi, qword [workingCDS]
   324 00001A19 B95B000000          <1>     mov ecx, cds_size
   325 00001A1E E8DF500000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   326 00001A23 F3A4                <1>     rep movsb
   327 00001A25 E8E2500000          <1>     call dosCrit1Exit
   328 00001A2A 31C0                <1>     xor eax, eax
   329 00001A2C E90E510000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   330                              <1> .net:
   331                              <1> ;SDA Vars are setup for this request
   332 00001A31 B805110000          <1>     mov eax, 1105h
   333 00001A36 CD4F                <1>     int 4fh
   334 00001A38 0F820F510000        <1>     jc extErrExit
   335 00001A3E E9FC500000          <1>     jmp extGoodExit
   336                              <1> getCurrentDIR:     ;ah = 47h
   337                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   338                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   339 00001A43 E8BA500000          <1>     call dosCrit1Enter
   340 00001A48 88D0                <1>     mov al, dl  ;Move drive number into al
   341 00001A4A E87A4C0000          <1>     call setDrive ;Set drive variables if it is valid and NOT join
   342 00001A4F 730F                <1>     jnc .okDrive
   343                              <1> .badExit:
   344 00001A51 E8B6500000          <1>     call dosCrit1Exit
   345 00001A56 B80F000000          <1>     mov eax, errBadDrv
   346 00001A5B E9ED500000          <1>     jmp extErrExit
   347                              <1> .okDrive:
   348                              <1>     ;Now we update the DPB, to be accurate for swapped disks
   349 00001A60 56                  <1>     push rsi
   350 00001A61 57                  <1>     push rdi
   351 00001A62 488B3D(01070000)    <1>     mov rdi, qword [workingCDS] ;Get CDS ptr in rdi
   352 00001A69 E871490000          <1>     call getDiskDPB
   353 00001A6E 5F                  <1>     pop rdi
   354 00001A6F 5E                  <1>     pop rsi
   355 00001A70 0F82D7500000        <1>     jc extErrExit
   356                              <1>     ;Here, work needs to be done to ensure that the path built is proper
   357 00001A76 4889F7              <1>     mov rdi, rsi    ;Save destination buffer in rdi
   358 00001A79 488B35(01070000)    <1>     mov rsi, qword [workingCDS]  ;Get pointer to current CDS in rsi
   359 00001A80 31C0                <1>     xor eax, eax
   360 00001A82 FFC8                <1>     dec eax
   361 00001A84 39464D              <1>     cmp dword [rsi + cds.dStartCluster], eax    ;StartCluster != -1 is all ok
   362 00001A87 750E                <1>     jne .writePathInBuffer
   363 00001A89 FFC0                <1>     inc eax
   364 00001A8B 89464D              <1>     mov dword [rsi + cds.dStartCluster], eax    ;Set to root dir
   365                              <1>     ;Here we now add a terminating null at wBackslashOffset
   366 00001A8E 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   367 00001A92 C644060100          <1>     mov byte [rsi + rax + 1], 0 ;Store a zero just past the backslash
   368                              <1> .writePathInBuffer:
   369 00001A97 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   370 00001A9B FFC0                <1>     inc eax ;Go past the backslash
   371 00001A9D 4801C6              <1>     add rsi, rax ;Add this many chars to rsi to point to first char to copy
   372 00001AA0 E8674D0000          <1>     call strcpy
   373 00001AA5 E862500000          <1>     call dosCrit1Exit
   374 00001AAA B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   375 00001AAF E98B500000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   376                              <1> 
   377                              <1> trueNameMultiplex:  ;Int 4Fh, AX=1221h
   378 00001AB4 50                  <1>     push rax
   379 00001AB5 B800600000          <1>     mov eax, 6000h
   380 00001ABA CD41                <1>     int 41h
   381 00001ABC 58                  <1>     pop rax
   382                              <1>     return
    13                              <2> %%_ret:
    14 00001ABD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   383                              <1>     
   384                              <1> trueName:          ;ah = 60h, get fully qualified name. 
   385                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   386 00001ABE E8A44D0000          <1>     call checkPathspecOK    ;This preserves rsi
   387 00001AC3 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   388 00001AC5 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   389                              <1> .badPath:
   390 00001AC7 B803000000          <1>     mov eax, errPnf
   391 00001ACC E97C500000          <1>     jmp extErrExit
   392                              <1> .pathspecOk:
   393 00001AD1 57                  <1>     push rdi    ;Save the destination
   394 00001AD2 488D3D(11050000)    <1>     lea rdi, buffer1    ;Build the full path here
   395 00001AD9 E8DDF4FFFF          <1>     call canonicaliseFileName
   396 00001ADE 5F                  <1>     pop rdi
   397 00001ADF 0F8268500000        <1>     jc extErrExit
   398 00001AE5 488D35(11050000)    <1>     lea rsi, buffer1
   399 00001AEC E81B4D0000          <1>     call strcpy
   400 00001AF1 31C0                <1>     xor eax, eax
   401 00001AF3 E947500000          <1>     jmp extGoodExit
   402                              <1> 
   403                              <1> ;-----------------------------------
   404                              <1> ;    General Directory Routines    :
   405                              <1> ;-----------------------------------
   406                              <1> 
   407                              <1> findFreeDiskDirEntry:
   408                              <1> ;Find a space in the directory we are searching for a directory entry
   409                              <1> ;Accept first entry starting with a 0E5h or 00h
   410                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   411                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   412                              <1> ; be called for CDS's that are NOT net CDS's).
   413                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   414                              <1> ;       Directory vars must be set up for the directory we are searching in
   415                              <1> ;Output: CF=CY => Error, eax has error code
   416                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   417                              <1>     ;breakpoint
   418 00001AF8 8A05(F7060000)      <1>     mov al, byte [delChar]
   419 00001AFE 8805(C8060000)      <1>     mov byte [fcbName], al
   420 00001B04 E8D0F1FFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   421                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001B09 72B2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   422                              <1> ;Free entry found, dir variables are set for the free entry. 
   423                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   424                              <1> getDiskDirectoryEntry:
   425                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   426                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   427                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   428                              <1> ;        qword [tempSect] = Disk sector number of directory
   429                              <1> ;        word [entry] = 32 byte offset into sector
   430                              <1> ;        CF=CY => Error, exit 
   431 00001B0B 53                  <1>     push rbx
   432 00001B0C 8B05(73070000)      <1>     mov eax, dword [dirClustA]  
   433                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   434                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   435 00001B12 0FB71D(77070000)    <1>     movzx ebx, word [dirSect]
   436 00001B19 85C0                <1>     test eax, eax
   437 00001B1B 7407                <1>     jz .skipCluster
   438 00001B1D E819EDFFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   439 00001B22 EB1B                <1>     jmp short .skipOldFat
   440                              <1> .skipCluster:
   441 00001B24 55                  <1>     push rbp
   442 00001B25 488B2D(F9060000)    <1>     mov rbp, qword [workingDPB]
   443 00001B2C 0FB705(77070000)    <1>     movzx eax, word [dirSect]
   444 00001B33 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   445                              <1>     ;If dirSect is greater than wNumberRootDirEntries, then ret fail
   446 00001B36 663B4509            <1>     cmp ax, word [rbp + dpb.wNumberRootDirEntries]
   447 00001B3A 5D                  <1>     pop rbp
   448 00001B3B 7202                <1>     jb .skipOldFat
   449 00001B3D F9                  <1>     stc
   450                              <1>     return
    13                              <2> %%_ret:
    14 00001B3E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   451                              <1> .skipOldFat:
   452 00001B3F 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   453 00001B42 488905(35070000)    <1>     mov qword [tempSect], rax   ;Save this sector number
   454 00001B49 E8F4EBFFFF          <1>     call getBufForDOS   ;Get buffer for DOS in rbx
   455 00001B4E 5B                  <1>     pop rbx
   456                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001B4F 72ED                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   457 00001B51 53                  <1>     push rbx
   458 00001B52 488B1D(2D070000)    <1>     mov rbx, qword [currBuff]
   459 00001B59 E85BF2FFFF          <1>     call adjustDosDirBuffer ;Change buffer to Dir buffer
   460                              <1>     ;Above function gets data buffer ptr in rsi
   461 00001B5E 0FB705(77070000)    <1>     movzx eax, word [dirSect]   ;Get the sector in which the offset lies
   462 00001B65 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   463 00001B69 F7E3                <1>     mul ebx ;Multiply these two words so eax has number of bytes to
   464                              <1>     ; the current sector
   465 00001B6B C1E805              <1>     shr eax, 5  ;Divide by 32 to get the number of dir entries we are skipping
   466 00001B6E 8B1D(79070000)      <1>     mov ebx, dword [dirEntry]   ;Get offset into dir file cluster
   467 00001B74 29C3                <1>     sub ebx, eax    ;Now ebx has the dir entry offset in the current sector
   468 00001B76 C1E305              <1>     shl ebx, 5  ;Multiply by 32 to get byte offset
   469 00001B79 66891D(3D070000)    <1>     mov word [entry], bx  ;Save 32 byte offset into sector
   470 00001B80 4801DE              <1>     add rsi, rbx    ;rsi now points to the entry
   471 00001B83 5B                  <1>     pop rbx
   472                              <1>     return
    13                              <2> %%_ret:
    14 00001B84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   473                              <1> 
   474                              <1> 
   475                              <1> updateDirectoryEntryForFile:    
   476                              <1> ;Updates the directory entry for disk files
   477                              <1> ;Called with:
   478                              <1> ;   [workingDPB] = DPB pointer for the disk device
   479                              <1> ;   [currentSFT] = Current SFT pointer
   480 00001B85 50                  <1>     push rax
   481 00001B86 53                  <1>     push rbx
   482 00001B87 57                  <1>     push rdi
   483 00001B88 55                  <1>     push rbp
   484                              <1> 
   485 00001B89 E8744F0000          <1>     call dosCrit1Enter
   486 00001B8E 488B3D(21070000)    <1>     mov rdi, qword [currentSFT]
   487 00001B95 488B2D(F9060000)    <1>     mov rbp, qword [workingDPB]
   488 00001B9C 66F74705C000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush | devCharDev
   489 00001BA2 0F8581000000        <1>     jnz .exit   ;If it is a char dev or hasn't been written to yet, skip this
   490 00001BA8 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
   491 00001BAE 751B                <1>     jnz .skipDT
   492                              <1>     ;Get date and time words and add them to the directory entry
   493 00001BB0 E8660B0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   494                              <1>     ;Build date and time words
   495 00001BB5 E84C0C0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   496                              <1>     ;Update SFT fields
   497 00001BBA 66894713            <1>     mov word [rdi + sft.wTime], ax
   498 00001BBE C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   499 00001BC1 66894715            <1>     mov word [rdi + sft.wDate], ax
   500 00001BC5 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush  ;We update DT, so flush
   501                              <1> .skipDT:
   502                              <1> ;Before we read the dir sector in, if we never wrote to the disk
   503                              <1> ; we skip all of this
   504 00001BCB 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   505 00001BD1 7556                <1>     jnz .exit ;If the file was never written to, don't bother updating DIR data
   506 00001BD3 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   507 00001BD7 E874EBFFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
   508 00001BDC 7255                <1>     jc .exitBad    ;If an error is to be returned from, we skip the rest of this
   509                              <1>     ;Now we write the changes to the sector
   510                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
   511 00001BDE 488D6B30            <1>     lea rbp, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   512 00001BE2 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   513 00001BE6 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   514 00001BE9 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
   515 00001BEC 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
   516 00001BEF 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
   517 00001BF2 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
   518 00001BF6 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
   519 00001BFA 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
   520 00001BFE 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
   521 00001C02 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
   522 00001C06 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
   523 00001C09 6689451A            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusLo], ax
   524 00001C0D C1E810              <1>     shr eax, 10h
   525 00001C10 66894514            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusHi], ax
   526                              <1>     ;Directory sector updated and marked to be flushed to disk!
   527 00001C14 31C0                <1>     xor eax, eax
   528 00001C16 FF15(23010000)      <1>     call qword [updateDirShare]
   529 00001C1C F8                  <1>     clc ;Clear CF as updateDirShare Defaults to CF=CY
   530 00001C1D E873E9FFFF          <1>     call markBufferDirty
   531 00001C22 E83CE9FFFF          <1>     call writeThroughBuffers
   532 00001C27 720A                <1>     jc .exitBad
   533                              <1> .exit:
   534 00001C29 E8DE4E0000          <1>     call dosCrit1Exit
   535 00001C2E 5D                  <1>     pop rbp
   536 00001C2F 5F                  <1>     pop rdi
   537 00001C30 5B                  <1>     pop rbx
   538 00001C31 58                  <1>     pop rax
   539                              <1>     return
    13                              <2> %%_ret:
    14 00001C32 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   540                              <1> .exitBad:
   541 00001C33 E8F4E8FFFF          <1>     call cancelWriteThroughBuffers
   542 00001C38 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
   543 00001C39 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush
   544 00001C3F 9D                  <1>     popfq
   545 00001C40 EBE7                <1>     jmp short .exit
   546                              <1>     
   547                              <1> growDirectory:
   548                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   549                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   550                              <1> ;                 eax = New Cluster number
   551                              <1> ;               TWO NON CF ERROR CASES.
   552                              <1> ;               If eax = -1 => disk full!
   553                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   554                              <1> ;        CF=CY => Something went wrong. Rip. 
   555 00001C42 53                  <1>     push rbx
   556 00001C43 51                  <1>     push rcx
   557 00001C44 8B05(6F070000)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   558 00001C4A 85C0                <1>     test eax, eax
   559 00001C4C 7424                <1>     jz .exit
   560 00001C4E E815ECFFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   561 00001C53 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   562 00001C55 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   563 00001C5A E87CECFFFF          <1>     call allocateClusters   ;ebx has last cluster value
   564 00001C5F 7211                <1>     jc .exit
   565 00001C61 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   566 00001C63 E8D5EDFFFF          <1>     call readFAT
   567 00001C68 7208                <1>     jc .exit
   568 00001C6A E806000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   569 00001C6F 7201                <1>     jc .exit
   570 00001C71 F8                  <1>     clc
   571                              <1> .exit:
   572 00001C72 59                  <1>     pop rcx
   573 00001C73 5B                  <1>     pop rbx
   574                              <1>     return   
    13                              <2> %%_ret:
    14 00001C74 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   575                              <1> sanitiseCluster:
   576                              <1> ;Sanitises the cluster in eax to all zeros
   577                              <1> ;Does not move file pointers
   578                              <1> ;Currently, is only called to sanitise subdirectory clusters
   579                              <1> ;Input: eax = Cluster number
   580                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   581                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   582                              <1> ;        If CF=CY => Error, exit
   583 00001C75 50                  <1>     push rax
   584 00001C76 53                  <1>     push rbx
   585 00001C77 51                  <1>     push rcx
   586 00001C78 52                  <1>     push rdx
   587 00001C79 56                  <1>     push rsi
   588 00001C7A 55                  <1>     push rbp
   589 00001C7B 488B2D(F9060000)    <1>     mov rbp, qword [workingDPB]
   590 00001C82 E8B4EBFFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   591 00001C87 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   592 00001C8B FFC2                <1>     inc edx ;Make it a count of sectors
   593                              <1> .getSectorInCluster:
   594 00001C8D E871EAFFFF          <1>     call getBufForDataNoFile  ;Get a generic data buffer in rbx
   595 00001C92 721E                <1>     jc .exitBad
   596 00001C94 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   597 00001C98 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   598 00001C9C 31C0                <1>     xor eax, eax
   599 00001C9E F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   600 00001CA0 E8F0E8FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   601                              <1> 
   602 00001CA5 FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   603 00001CA7 740A                <1>     jz .exit    ;Jump if we done
   604 00001CA9 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   605 00001CAD 48FFC0              <1>     inc rax ;Goto next sector in cluster
   606 00001CB0 EBDB                <1>     jmp short .getSectorInCluster
   607                              <1> .exitBad:
   608 00001CB2 F9                  <1>     stc
   609                              <1> .exit:
   610 00001CB3 5D                  <1>     pop rbp
   611 00001CB4 5E                  <1>     pop rsi
   612 00001CB5 5A                  <1>     pop rdx
   613 00001CB6 59                  <1>     pop rcx
   614 00001CB7 5B                  <1>     pop rbx
   615 00001CB8 58                  <1>     pop rax
   616                              <1>     return
    13                              <2> %%_ret:
    14 00001CB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                                  %include "./Source/Kernel/FileIO/devio.asm"
     1                              <1> ;This file contains the primitive dev io function, which will be called 
     2                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
     3                              <1> ; make requests for device IO.
     4                              <1> 
     5                              <1> mainCharIO:
     6                              <1> ;This is the main IO clearing function for Char IO.
     7                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
     8                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
     9                              <1> ;
    10                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    11                              <1> ;       ah = {0,..., 5}, a subfunction number
    12                              <1> ;       Function 0: Read Char (drvREAD)
    13                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    14                              <1> ;       Function 2: Write Char (drvWrite)
    15                              <1> ; In the case the below functions are called for Disk/Net files
    16                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    17                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    18                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    19                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    20                              <1> ;
    21                              <1> ; If and only if ah = 02h, al = Char to write to device
    22                              <1> ;
    23                              <1> ;
    24                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    25                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    26                              <1> ;                                           ZF = NZ => Device ready (not busy)
    27                              <1> ;                                               If ND read, AL = Next Char
    28                              <1> ; For Files/Net:
    29                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    30                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    31                              <1> ;           For Read and ND Read:
    32                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    33                              <1> ;               Read returns ^Z on EOF.
    34                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    35                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    36                              <1> ;
    37                              <1> ;All registers preserved EXCEPT for ax and flags
    38                              <1> 
    39                              <1> ;Reference Request Header
    40                              <1> ;Common Section:
    41                              <1> ;    .hdrlen resb 1  ;Length of the request header
    42                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    43                              <1> ;    .cmdcde resb 1  ;Command code
    44                              <1> ;    .status resw 1  ;Status word
    45                              <1> ;    .devptr resq 1  ;Reserved. Unused
    46                              <1> ;Below used by calls 0,1,2,5
    47                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    48                              <1> ;Below used by calls 0,2
    49                              <1> ;    .bufptr resq 1
    50                              <1> ;    .tfrlen resd 1
    51                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    52                              <1> ;    .strtsc resq 1
    53                              <1> ;    .desptr resq 1
    54                              <1> 
    55                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    56 00001CBA 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    57 00001CBB 488D1D(0F050000)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    58 00001CC2 48891D(98040000)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    59 00001CC9 5B                  <1>     pop rbx
    60 00001CCA C705(A0040000)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    60 00001CD2 0000                <1>
    61 00001CD4 668905(0F050000)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    62 00001CDB 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    63 00001CE1 0F85A1000000        <1>     jnz .notChar
    64 00001CE7 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    65 00001CED 0F8495000000        <1>     jz .notChar
    66                              <1> ;Char devices only here
    67 00001CF3 E8F34D0000          <1>     call dosPushRegs    ;Save context here
    68 00001CF8 488D1D41E3FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    69 00001CFF 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    70 00001D02 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    71 00001D05 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    72 00001D08 890D(8A040000)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    73                              <1>     ;Now set up cx for status word
    74 00001D0E 31C9                <1>     xor ecx, ecx
    75 00001D10 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
    76 00001D13 7506                <1>     jne .skipBsySet
    77 00001D15 81C900020000        <1>     or ecx, drvBsyStatus
    78                              <1> .skipBsySet:
    79 00001D1B 66870D(8D040000)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
    80                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
    81 00001D22 488D1D(8A040000)    <1>     lea rbx, secdReqHdr
    82 00001D29 E83E450000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
    83 00001D2E 668B3D(8D040000)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
    84 00001D35 F7C700800000        <1>     test edi, drvErrStatus
    85 00001D3B 752D                <1>     jnz .error
    86                              <1> .ignoreRet:
    87 00001D3D 803D(8C040000)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
    88 00001D44 750C                <1>     jne .notNDRead
    89 00001D46 8A05(97040000)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
    90 00001D4C 8805(0F050000)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
    91                              <1> .notNDRead:
    92 00001D52 8A25(8E040000)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
    93 00001D58 F6D4                <1>     not ah
    94 00001D5A 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
    95 00001D5D E8724D0000          <1>     call dosPopRegs ;Get back the context
    96 00001D62 668B05(0F050000)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
    97                              <1>     return ;Return to caller
    13                              <2> %%_ret:
    14 00001D69 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    98                              <1> .error:
    99                              <1>     ;cl has flags
   100 00001D6A 88CC                <1>     mov ah, cl
   101 00001D6C E8973F0000          <1>     call charDevErr
   102 00001D71 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   103 00001D73 750A                <1>     jne .errorIgnore
   104                              <1>     ;Fallthrough => Retry
   105 00001D75 E85A4D0000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   106 00001D7A E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   107                              <1> .errorIgnore:
   108                              <1>     ;Clear the busy bit in the status word
   109 00001D7F 8025(8E040000)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   110 00001D86 EBB5                <1>     jmp short .ignoreRet
   111                              <1> .notChar:
   112                              <1> ;rsi -> SFT to read/write to
   113 00001D88 84E4                <1>     test ah, ah ;If ah = 0, read 1 byte
   114 00001D8A 7409                <1>     jz .makeDiskNetReadReq
   115 00001D8C FECC                <1>     dec ah
   116 00001D8E 7421                <1>     jz .makeDiskNetNonDestReq
   117 00001D90 FECC                <1>     dec ah
   118 00001D92 7429                <1>     jz .makeDiskNetWriteReq
   119                              <1>     ;Else just return with ZF=NZ
   120                              <1>     return
    13                              <2> %%_ret:
    14 00001D94 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> .makeDiskNetReadReq:
   122 00001D95 E833000000          <1>     call .prepDiskNetIO
   123 00001D9A E88C200000          <1>     call readBytes
   124 00001D9F 85C9                <1>     test ecx, ecx   ;Set flags for how many bytes we read, ZF=ZE => No read
   125 00001DA1 E850000000          <1>     call .cleanDiskNetIO
   126 00001DA6 8A05(0F050000)      <1>     mov al, byte [singleIObyt]
   127                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001DAC 75E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   128 00001DAE B01A                <1>     mov al, EOF ;Else return an EOF
   129                              <1>     return
    13                              <2> %%_ret:
    14 00001DB0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   130                              <1> .makeDiskNetNonDestReq:
   131                              <1>     ;Save the SFT file pointer position and read a char
   132 00001DB1 FF761B              <1>     push qword [rsi + sft.dCurntOff]
   133 00001DB4 E8DCFFFFFF          <1>     call .makeDiskNetReadReq
   134 00001DB9 8F461B              <1>     pop  qword [rsi + sft.dCurntOff]
   135                              <1>     return
    13                              <2> %%_ret:
    14 00001DBC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   136                              <1> .makeDiskNetWriteReq:
   137 00001DBD E80B000000          <1>     call .prepDiskNetIO
   138 00001DC2 E8A3230000          <1>     call writeBytes
   139 00001DC7 E82A000000          <1>     call .cleanDiskNetIO
   140                              <1>     return
    13                              <2> %%_ret:
    14 00001DCC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> .prepDiskNetIO:
   142                              <1> ;Set up the currentDTA to the internal buffer
   143                              <1> ;We use this here only so we can tweak it for this purpose
   144 00001DCD 8F05(DE040000)      <1>     pop qword [altRet]
   145 00001DD3 E8134D0000          <1>     call dosPushRegs
   146 00001DD8 FF35(0B040000)      <1>     push qword [currentDTA]
   147 00001DDE 488D0D(0F050000)    <1>     lea rcx, singleIObyt   ;Get the buffer ptr
   148 00001DE5 48890D(0B040000)    <1>     mov qword [currentDTA], rcx ;and use it as the current DTA
   149 00001DEC 31C9                <1>     xor ecx, ecx
   150 00001DEE FFC1                <1>     inc ecx ;IO 1 byte only
   151                              <1> .cleanDNIOReturn:
   152 00001DF0 FF25(DE040000)      <1>     jmp qword [altRet]
   153                              <1> .cleanDiskNetIO:
   154 00001DF6 8F05(DE040000)      <1>     pop qword [altRet]
   155 00001DFC 8F05(0B040000)      <1>     pop qword [currentDTA]
   156 00001E02 E8CD4C0000          <1>     call dosPopRegs
   157 00001E07 EBE7                <1>     jmp short .cleanDNIOReturn
   158                              <1> 
   159                              <1> openSFT:
   160                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   161                              <1> ;Input: rdi = SFT pointer
   162 00001E09 E8DD4C0000          <1>     call dosPushRegs
   163 00001E0E B00D                <1>     mov al, drvOPEN
   164 00001E10 EB07                <1>     jmp short openCloseCommon
   165                              <1> closeSFT:
   166                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   167 00001E12 E8D44C0000          <1>     call dosPushRegs
   168 00001E17 B00E                <1>     mov al, drvCLOSE
   169                              <1> openCloseCommon:
   170                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   171 00001E19 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   172 00001E1F 7469                <1>     jz .exit    ;Exit if so
   173 00001E21 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   174 00001E25 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   175 00001E29 7512                <1>     jnz .charDev
   176                              <1>     ;Here a disk drive, rdi is a DPB ptr
   177 00001E2B 803D(C8030000)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   178 00001E32 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   179 00001E34 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   180 00001E37 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   181 00001E39 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   182                              <1> .charDev:
   183 00001E3D 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   184 00001E43 7445                <1>     jz .exit    ;No, exit!
   185 00001E45 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   186 00001E48 488D1D(B4040000)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   187 00001E4F 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   188                              <1> .retryEP:
   189 00001E52 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   190 00001E55 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   191 00001E58 50                  <1>     push rax    ;Save the dword
   192 00001E59 E812440000          <1>     call goDriver
   193 00001E5E 0FB73D(B7040000)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   194 00001E65 F7C700800000        <1>     test edi, drvErrStatus
   195 00001E6B 741C                <1>     jz .exitPop
   196                              <1>     ;Error here, check if char or block drive
   197 00001E6D 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   198 00001E73 7404                <1>     jz .blockError
   199                              <1>     ;Char error here
   200 00001E75 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   201 00001E77 EB04                <1>     jmp short .errorCmn
   202                              <1> .blockError:
   203 00001E79 88C8                <1>     mov al, cl  ;Move drive number into al
   204 00001E7B B406                <1>     mov ah, critData    ;Data on block dev error
   205                              <1> .errorCmn:
   206                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   207 00001E7D E8863E0000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   208 00001E82 B001                <1>     mov al, critRetry   ;al returns user response
   209 00001E84 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   210 00001E86 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   211 00001E87 EBC9                <1>     jmp short .retryEP  ;Reset
   212                              <1> .exitPop:
   213 00001E89 58                  <1>     pop rax    
   214                              <1> .exit:
   215 00001E8A E8454C0000          <1>     call dosPopRegs
   216                              <1>     return
    13                              <2> %%_ret:
    14 00001E8F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                                  %include "./Source/Kernel/FileIO/charFunc.asm"
     1                              <1> ;-----------------------------------------------------------------------:
     2                              <1> ;                  DOS default char functions live here                 :
     3                              <1> ;                                                                       :
     4                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
     5                              <1> ;                                                                       :
     6                              <1> ;Rules for the naming of the DOS functions                              :
     7                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
     8                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
     9                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    10                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    11                              <1> ;                                                                       :
    12                              <1> ;-----------------------------------------------------------------------:
    13                              <1> 
    14                              <1> charIn_BE:     ;ah = 01h
    15                              <1> ;Return char that has been read and echoed in al
    16 00001E90 E87D010000          <1>     call charIn_B
    17 00001E95 50                  <1>     push rax
    18 00001E96 E804000000          <1>     call charOut_B.in    ;Output it to screen
    19 00001E9B 58                  <1>     pop rax
    20                              <1>     return
    13                              <2> %%_ret:
    14 00001E9C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> charOut_B:       ;ah = 02h
    23                              <1> ;Bspace is regular cursor left, does not insert a blank
    24 00001E9D 88D0                <1>     mov al, dl
    25                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 4Fh, AX=1205h
    26 00001E9F 3C20                <1>     cmp al, asciiCaret
    27 00001EA1 0F8286000000        <1>     jb .control
    28 00001EA7 3C7F                <1>     cmp al, DEL ;DEL char?
    29 00001EA9 7406                <1>     je .skipCurs
    30 00001EAB FE05(C0020000)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    31                              <1> .skipCurs:
    32 00001EB1 FE05(C6030000)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    33 00001EB7 8025(C6030000)03    <1>     and byte [vConErr], 3
    34 00001EBE 56                  <1>     push rsi
    35 00001EBF 7507                <1>     jnz .skipErrorCheck
    36 00001EC1 50                  <1>     push rax
    37 00001EC2 E897020000          <1>     call vConCtrlCheck
    38 00001EC7 58                  <1>     pop rax
    39                              <1> .skipErrorCheck:
    40 00001EC8 E81F020000          <1>     call outputOnStdout
    41 00001ECD 5E                  <1>     pop rsi
    42 00001ECE F605(C3030000)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    43                              <1>     retz    ;If zero, no echo
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001ED5 74C5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    44 00001ED7 53                  <1>     push rbx
    45 00001ED8 56                  <1>     push rsi
    46 00001ED9 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    47 00001EDE E842030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    48 00001EE3 0F82CE000000        <1>     jc auxOutCmn.exit
    49                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    50 00001EE9 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    51 00001EED F7C300800000        <1>     test ebx, devRedirDev
    52 00001EF3 0F85BE000000        <1>     jnz auxOutCmn.exit  ;Exit if STDOUT is redir
    53 00001EF9 F7C380000000        <1>     test ebx, devCharDev
    54 00001EFF 0F84B2000000        <1>     jz auxOutCmn.exit
    55 00001F05 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    56 00001F0A E816030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    57 00001F0F 0F82A2000000        <1>     jc auxOutCmn.exit   ;Exit if handle closed
    58 00001F15 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    59 00001F1B 0F8491000000        <1>     jz auxOutCmn.diskFileEP
    60 00001F21 C605(C3030000)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    61 00001F28 E98A000000          <1>     jmp auxOutCmn.netFileEP
    62                              <1> .control:
    63 00001F2D 3C0D                <1>     cmp al, CR
    64 00001F2F 7429                <1>     je .newline
    65 00001F31 3C08                <1>     cmp al, BSP
    66 00001F33 7431                <1>     je .back
    67 00001F35 3C09                <1>     cmp al, TAB
    68 00001F37 0F8574FFFFFF        <1>     jne .skipCurs   ;Treat as normal
    69                              <1>     ;TAB key here
    70                              <1> .tab:
    71 00001F3D 51                  <1>     push rcx
    72 00001F3E 0FB60D(C0020000)    <1>     movzx ecx, byte [vConCursPos]
    73 00001F45 80C9F8              <1>     or cl, ~7
    74 00001F48 F6D9                <1>     neg cl
    75 00001F4A 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
    76                              <1> .tabloop:
    77 00001F4D B020                <1>     mov al, SPC
    78 00001F4F E84BFFFFFF          <1>     call charOut_B.in   ;Output the char
    79 00001F54 FEC9                <1>     dec cl
    80 00001F56 75F5                <1>     jnz .tabloop
    81                              <1> .stopTab:
    82 00001F58 59                  <1>     pop rcx
    83                              <1>     return ;Exit
    13                              <2> %%_ret:
    14 00001F59 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    84                              <1> .newline:
    85 00001F5A C605(C0020000)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
    86 00001F61 E94BFFFFFF          <1>     jmp .skipCurs   ;And echo 
    87                              <1> .back:
    88 00001F66 FE0D(C0020000)      <1>     dec byte [vConCursPos]
    89 00001F6C E940FFFFFF          <1>     jmp .skipCurs   ;And echo
    90                              <1> 
    91                              <1> auxIn_B:        ;ah = 03h
    92 00001F71 E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
    93 00001F76 BB03000000          <1>     mov ebx, 3
    94 00001F7B E8A5020000          <1>     call getCharDevSFT
    95                              <1>     retc    ;Return if CF set (handle 3 is closed)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001F80 72D7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    96                              <1> .auxloop:
    97 00001F82 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
    98 00001F84 E831FDFFFF          <1>     call mainCharIO
    99 00001F89 7408                <1>     jz .signalLoop
   100 00001F8B 30E4                <1>     xor ah, ah  ;Read the char in
   101 00001F8D E828FDFFFF          <1>     call mainCharIO
   102                              <1>     return
    13                              <2> %%_ret:
    14 00001F92 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .signalLoop:
   104 00001F93 E8A3010000          <1>     call callInt48h
   105 00001F98 EBE8                <1>     jmp short .auxloop
   106                              <1> 
   107                              <1> auxOut_B:       ;ah = 04h
   108 00001F9A 53                  <1>     push rbx
   109 00001F9B BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   110 00001FA0 EB06                <1>     jmp short auxOutCmn
   111                              <1> prnOut_B:       ;ah = 05h
   112 00001FA2 53                  <1>     push rbx
   113 00001FA3 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   114                              <1> auxOutCmn: ;Auxilliary output device common 
   115 00001FA8 88D0                <1>     mov al, dl  ;Get the char into al
   116 00001FAA 50                  <1>     push rax
   117 00001FAB E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   118 00001FB0 58                  <1>     pop rax
   119 00001FB1 56                  <1>     push rsi
   120                              <1> .diskFileEP:
   121 00001FB2 E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   122                              <1> .netFileEP:
   123                              <1> .exit:
   124 00001FB7 5E                  <1>     pop rsi
   125 00001FB8 5B                  <1>     pop rbx
   126                              <1>     return
    13                              <2> %%_ret:
    14 00001FB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> directConIO:    ;ah = 06h
   129 00001FBA 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   130 00001FBC 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   131 00001FBE 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   132                              <1> ;Here is the read char direct function
   133 00001FC4 31DB                <1>     xor ebx, ebx    
   134 00001FC6 E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   135                              <1>     retc    ;Return error if ebx closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001FCB 72EC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   136 00001FCD 488B2D(6E040000)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   137 00001FD4 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   138 00001FD6 E8DFFCFFFF          <1>     call mainCharIO
   139 00001FDB E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   140 00001FE0 7507                <1>     jnz .readChar
   141 00001FE2 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   142 00001FE6 30C0                <1>     xor al, al  ;Set caller return code to 0
   143                              <1>     return
    13                              <2> %%_ret:
    14 00001FE8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   144                              <1> .readChar:
   145 00001FE9 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   146                              <1>     ;Fallthrough here to get the char at STDIN
   147                              <1> charIn:         ;ah = 07h
   148                              <1> ;Return char in al from STDIN without waiting
   149 00001FED 31DB                <1>     xor ebx, ebx
   150 00001FEF E831020000          <1>     call getCharDevSFT
   151                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001FF4 72F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   152 00001FF6 B401                <1>     mov ah, 01  ;ND read for char
   153 00001FF8 E8BDFCFFFF          <1>     call mainCharIO
   154 00001FFD 750B                <1>     jnz .getChar
   155 00001FFF B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   156 00002001 CD4A                <1>     int 4Ah
   157 00002003 E833010000          <1>     call callInt48h
   158 00002008 EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   159                              <1> .getChar:
   160                              <1>     ;Get the char in al and exit
   161 0000200A 30E4                <1>     xor ah, ah
   162 0000200C E8A9FCFFFF          <1>     call mainCharIO
   163                              <1>     return
    13                              <2> %%_ret:
    14 00002011 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   164                              <1> charIn_B:       ;ah = 08h
   165                              <1> ;Return char in al from STDIN
   166 00002012 56                  <1>     push rsi
   167                              <1> .readAgain:
   168 00002013 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   169                              <1>     ;Also sets rsi to point to the device SFT for 
   170 00002018 7543                <1>     jnz .pullChar
   171 0000201A 803D(D9190000)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   172 00002021 7507                <1>     jne .skiplookahead
   173 00002023 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   174 00002025 E890FCFFFF          <1>     call mainCharIO
   175                              <1> .skiplookahead:
   176 0000202A B484                <1>     mov ah, 84h
   177 0000202C CD4A                <1>     int 4ah ;Multitasking keyboard loop
   178 0000202E 66813D(BA1A0000)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   178 00002036 FF                  <1>
   179 00002037 751B                <1>     jne .skipClockRead
   180 00002039 E8AD4A0000          <1>     call dosPushRegs
   181 0000203E F8                  <1>     clc ;Clear CF, write primary header to backup
   182 0000203F E882000000          <1>     call swapPrimaryHeader
   183 00002044 E8D2060000          <1>     call readDateTimeRecord
   184 00002049 F9                  <1>     stc ;Set CF, write backup to primary header
   185 0000204A E877000000          <1>     call swapPrimaryHeader
   186 0000204F E8804A0000          <1>     call dosPopRegs
   187                              <1> .skipClockRead:
   188 00002054 66FF05(BA1A0000)    <1>     inc word [keybTicks]
   189 0000205B EBB6                <1>     jmp short .readAgain
   190                              <1> .pullChar:
   191 0000205D 30E4                <1>     xor ah, ah
   192 0000205F E856FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   193 00002064 5E                  <1>     pop rsi
   194 00002065 3C00                <1>     cmp al, NUL ;Is this the null char?
   195 00002067 7507                <1>     jne .exit
   196                              <1>     ;We are mid extended ascii, prevent printer toggling
   197 00002069 C605(B91A0000)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   198                              <1> .exit:
   199                              <1>     return
    13                              <2> %%_ret:
    14 00002070 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printString_B:      ;ah = 09h
   202 00002071 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   203                              <1> .ps0:
   204 00002074 AC                  <1>     lodsb   ;Get char in al and inc rsi
   205 00002075 3C24                <1>     cmp al, "$" ;End of string char?
   206                              <1>     rete    ;Return if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002077 74F7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   207 00002079 E821FEFFFF          <1>     call charOut_B.in
   208 0000207E EBF4                <1>     jmp short .ps0
   209                              <1> 
   210                              <1> checkStdinStatus:  ;ah = 0Bh
   211                              <1> ;Returns the status of the driver controlling vCon
   212 00002080 E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   213 00002085 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   214                              <1>     retz    ;If BSY set (no chars available), return with al=00
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002087 74E7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   215 00002089 FEC8                <1>     dec al  ;Set al to -1 if char available
   216                              <1>     return  ;Exit
    13                              <2> %%_ret:
    14 0000208B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> clearbuffDoFunc:   ;ah = 0Ch
   218                              <1> ;Clears any buffers and issues a console read command (the command in al)
   219                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   220 0000208C 50                  <1>     push rax
   221 0000208D 52                  <1>     push rdx
   222 0000208E 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   223 00002090 E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   224 00002095 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   225 00002097 B404                <1>     mov ah, 04h ;Flush input buffers
   226 00002099 E81CFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   227                              <1> .skipFlush:
   228 0000209E 5A                  <1>     pop rdx
   229 0000209F 58                  <1>     pop rax
   230 000020A0 88C4                <1>     mov ah, al  ;Move function number into ah
   231 000020A2 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   232 000020A4 7507                <1>     jne .others
   233 000020A6 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   234 000020A9 7412                <1>     jz .bad ;Yes, exit
   235 000020AB EB13                <1>     jmp short .callFunction ;Else, call function in ah
   236                              <1> .others:
   237 000020AD 3C01                <1>     cmp al, 01h
   238 000020AF 740F                <1>     je .callFunction
   239 000020B1 3C07                <1>     cmp al, 07h
   240 000020B3 740B                <1>     je .callFunction
   241 000020B5 3C08                <1>     cmp al, 08h
   242 000020B7 7407                <1>     je .callFunction
   243 000020B9 3C0A                <1>     cmp al, 0Ah
   244 000020BB 7403                <1>     je .callFunction
   245                              <1> .bad:
   246 000020BD 30C0                <1>     xor al, al
   247                              <1>     return
    13                              <2> %%_ret:
    14 000020BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   248                              <1> .callFunction:
   249 000020C0 FA                  <1>     cli ;Prepare to swap stack pointer
   250                              <1>     ;The below address avoids "properly" reentering DOS
   251                              <1>     ;We simply reuse the function dispatch aspect. 
   252                              <1>     ;this means we dont trash the caller's register frame 
   253 000020C1 E93D490000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   254                              <1> ;------------------------
   255                              <1> ;  Primitive functions  :
   256                              <1> ;------------------------
   257                              <1> swapPrimaryHeader:
   258                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   259                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   260 000020C6 56                  <1>     push rsi
   261 000020C7 57                  <1>     push rdi
   262 000020C8 51                  <1>     push rcx
   263 000020C9 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   263 000020D2 00                  <1>
   264 000020D3 488D35(B4040000)    <1>     lea rsi, primReqHdr
   265 000020DA 488D3D(8C1A0000)    <1>     lea rdi, bkupReqHdr
   266 000020E1 7303                <1>     jnc .read
   267 000020E3 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   268                              <1> .read:
   269 000020E6 F3A4                <1>     rep movsb   ;Swap
   270 000020E8 59                  <1>     pop rcx
   271 000020E9 5F                  <1>     pop rdi
   272 000020EA 5E                  <1>     pop rsi
   273                              <1>     return
    13                              <2> %%_ret:
    14 000020EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   274                              <1> outputOnStdout:
   275                              <1> ;Input: al = Char to output
   276                              <1> ;Output: CF=CY, all good
   277 000020EC 53                  <1>     push rbx
   278 000020ED BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   279 000020F2 E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   280 000020F7 7217                <1>     jc .exit
   281 000020F9 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   282 000020FF 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   283 00002101 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   284 00002105 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   285 0000210B 7405                <1>     jz .notCharDevOrFast
   286 0000210D CD49                <1>     int 49h ;Fast output
   287                              <1> .exitOk:
   288 0000210F F8                  <1>     clc
   289                              <1> .exit:
   290 00002110 5B                  <1>     pop rbx
   291                              <1>     return
    13                              <2> %%_ret:
    14 00002111 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   292                              <1> .notCharDevOrFast:
   293 00002112 E809000000          <1>     call outputOnSFT
   294 00002117 5B                  <1>     pop rbx
   295                              <1>     return
    13                              <2> %%_ret:
    14 00002118 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> 
   297                              <1> outputToHandle:
   298                              <1> ;Char to output must be in al
   299 00002119 E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   300                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000211E 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   301                              <1> outputOnSFT:
   302                              <1> ;Output char in al to SFT in rsi
   303                              <1> ;Waits until device is not busy to send char.
   304                              <1> ;Calls int 48h if device busy
   305 00002120 50                  <1>     push rax
   306 00002121 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   307 00002123 E892FBFFFF          <1>     call mainCharIO
   308 00002128 58                  <1>     pop rax
   309 00002129 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   310 0000212B B402                <1>     mov ah, 02h ;Output char in al
   311 0000212D E888FBFFFF          <1>     call mainCharIO
   312 00002132 F8                  <1>     clc
   313                              <1>     return
    13                              <2> %%_ret:
    14 00002133 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   314                              <1> .signalLoop:
   315 00002134 E802000000          <1>     call callInt48h
   316 00002139 EBE5                <1>     jmp short outputOnSFT
   317                              <1> 
   318                              <1> callInt48h:
   319                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   320 0000213B 9C                  <1>     pushfq
   321 0000213C F605(88040000)FF    <1>     test byte [int48Flag], -1
   322 00002143 7417                <1>     jz .exit    ;If zero, not safe
   323 00002145 F605(FB030000)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   324 0000214C 750E                <1>     jnz .exit
   325                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   326 0000214E FF35(88040000)      <1>     push qword [int48Flag] 
   327 00002154 CD48                <1>     int 48h
   328 00002156 8F05(88040000)      <1>     pop qword [int48Flag]    ;Return original value
   329                              <1> .exit:
   330 0000215C 9D                  <1>     popfq
   331                              <1>     return
    13                              <2> %%_ret:
    14 0000215D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   332                              <1> 
   333                              <1> 
   334                              <1> vConCtrlCheck:
   335                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   336                              <1> ; the processing. 
   337                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   338                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   339                              <1> ;
   340                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   341                              <1> ;^S will pause screen processing until another key is processed by vCon input
   342                              <1> ;^P will toggle the printer echo feature of the vConsole
   343                              <1> ;
   344                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   345                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   346                              <1> ;
   347                              <1> ;Output: 
   348                              <1> ;   CF=CY : Error
   349                              <1> ;   CF=NC : ...
   350                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   351                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   352 0000215E E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   353 00002163 53                  <1>     push rbx
   354 00002164 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   355 00002166 E8BA000000          <1>     call getCharDevSFT
   356 0000216B 5B                  <1>     pop rbx
   357                              <1>     retc    ;Return if CF=CY
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000216C 72EF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   358 0000216E B401                <1>     mov ah, 01  ;Non destructively read CON
   359 00002170 E845FBFFFF          <1>     call mainCharIO
   360 00002175 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   361                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   362 00002177 3C13                <1>     cmp al, DC3 ;^S ?
   363 00002179 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   364 0000217B 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   365 0000217D E838FBFFFF          <1>     call mainCharIO
   366 00002182 E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   367                              <1> .checkPrintOrExit:
   368 00002187 3C10                <1>     cmp al, DLE ;Do we have ^P?
   369 00002189 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   370 0000218B 3C03                <1>     cmp al, ETX ;Do we have ^C?
   371 0000218D 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   372                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   373                              <1>     return 
    13                              <2> %%_ret:
    14 0000218F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   374                              <1> .printToggle:
   375 00002190 F615(C3030000)      <1>     not byte [printEcho]    ;Compliment the flag.
   376 00002196 53                  <1>     push rbx
   377 00002197 BB04000000          <1>     mov ebx, 4  ;PRN handle
   378 0000219C E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   379 000021A1 5B                  <1>     pop rbx
   380                              <1>     retc    ;If CF=CY, exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000021A2 72EB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   381 000021A4 57                  <1>     push rdi
   382 000021A5 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   383 000021A8 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   384 000021AE 741D                <1>     jz .notNet
   385 000021B0 50                  <1>     push rax
   386 000021B1 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   387 000021B6 CD4F                <1>     int 4Fh
   388 000021B8 58                  <1>     pop rax
   389 000021B9 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   390                              <1>     ;If something went wrong, turn off echo
   391 000021BB C605(C3030000)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   392 000021C2 50                  <1>     push rax
   393 000021C3 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   394 000021C8 CD4F                <1>     int 4Fh
   395 000021CA 58                  <1>     pop rax
   396 000021CB EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   397                              <1> .notNet:
   398                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   399                              <1> ; 0Dh or 0Eh
   400 000021CD 803D(C3030000)00    <1>     cmp byte [printEcho], 00
   401 000021D4 7507                <1>     jnz .echoOn
   402 000021D6 E837FCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   403 000021DB EB05                <1>     jmp short .printExit
   404                              <1> .echoOn:
   405 000021DD E827FCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   406                              <1> .printExit:
   407 000021E2 5F                  <1>     pop rdi
   408                              <1>     return
    13                              <2> %%_ret:
    14 000021E3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   410 000021E4 E852FFFFFF          <1>     call callInt48h
   411                              <1> .waitNextChar:   ;Here get next char
   412 000021E9 B401                <1>     mov ah, 01h ;ND read
   413 000021EB E8CAFAFFFF          <1>     call mainCharIO
   414 000021F0 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   415                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   416 000021F2 53                  <1>     push rbx
   417 000021F3 31DB                <1>     xor ebx, ebx
   418 000021F5 E82B000000          <1>     call getCharDevSFT
   419 000021FA 5B                  <1>     pop rbx
   420                              <1>     retc    ;Return if STDIN closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000021FB 72E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   421 000021FD 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   422 000021FF E8B6FAFFFF          <1>     call mainCharIO
   423 00002204 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   424 00002206 7514                <1>     jnz .checkBreak2
   425 00002208 803D(B91A0000)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   426 0000220F 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   427 00002215 C605(B91A0000)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   428                              <1> .checkBreak2:
   429 0000221C 3C03                <1>     cmp al, ETX
   430                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000221E 75C3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   431 00002220 E99C3B0000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   432                              <1> 
   433                              <1> 
   434                              <1> getCharDevSFT:
   435                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   436                              <1> ;Input: bx = zero extended handle number
   437                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   438                              <1> ;        CF=CY => al = Error code, abort operation
   439 00002225 F605(87040000)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   440 0000222C 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   441                              <1> .getSFT:
   442 0000222E 57                  <1>     push rdi
   443 0000222F E814250000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   444 00002234 4889FE              <1>     mov rsi, rdi
   445 00002237 5F                  <1>     pop rdi
   446                              <1>     return  ;Return with CF set
    13                              <2> %%_ret:
    14 00002238 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   447                              <1> .swap:
   448                              <1> ;workingSFT is only set for CON calls
   449 00002239 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   450 0000223F 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   451 00002241 488B35(11070000)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   452 00002248 F8                  <1>     clc
   453                              <1>     return
    13                              <2> %%_ret:
    14 00002249 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   454                              <1> 
   455                              <1> ;------------------------
   456                              <1> ;   Utility functions   :
   457                              <1> ;------------------------
   458                              <1> printCaretASCII:
   459                              <1> ;Input: al = Char to print with a caret
   460                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   461                              <1> ;First check if the char should be careted, and then print normally if so
   462 0000224A 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   463 0000224C 0F834DFCFFFF        <1>     jae charOut_B.in
   464 00002252 3C09                <1>     cmp al, TAB
   465 00002254 0F8445FCFFFF        <1>     je charOut_B.in
   466 0000225A 3C15                <1>     cmp al, NAK
   467 0000225C 0F843DFCFFFF        <1>     je charOut_B.in
   468 00002262 3C14                <1>     cmp al, DC4
   469 00002264 0F8435FCFFFF        <1>     je charOut_B.in
   470 0000226A 50                  <1>     push rax
   471 0000226B B05E                <1>     mov al, "^" ;Get caret in place
   472 0000226D E82DFCFFFF          <1>     call charOut_B.in
   473 00002272 58                  <1>     pop rax
   474 00002273 0440                <1>     add al, "@" ;Turn into an ASCII Char
   475 00002275 E925FCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   476                              <1> printCRLF:
   477 0000227A B00D                <1>     mov al, CR
   478 0000227C E81EFCFFFF          <1>     call charOut_B.in
   479 00002281 B00A                <1>     mov al, LF
   480 00002283 E917FCFFFF          <1>     jmp charOut_B.in
   481                              <1> 
   482                              <1> checkBreak:
   483                              <1> ;Reads bytes from CON if there are any bytes to read and 
   484                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   485 00002288 803D(FC030000)01    <1>     cmp byte [inDOS], 1
   486                              <1>     retne    ;Return if not inDOS only once
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000228F 75B8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   487                              <1> ;Returns in al the keystroke that is available IF one is available
   488                              <1> ; or al=0 if no keystroke available
   489 00002291 53                  <1>     push rbx
   490 00002292 56                  <1>     push rsi
   491 00002293 488B35(47000000)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   492                              <1>     ;Place command code and a zero status word at the same time
   493 0000229A C705(E0040000)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   493 000022A2 0000                <1>
   494                              <1>     ;Place the packet size in the hdrlen field
   495 000022A4 C605(DE040000)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   496 000022AB 488D1D(DE040000)    <1>     lea rbx, critReqHdr
   497 000022B2 E8B93F0000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   498                              <1>     ;Check if the busy bit is set (No keystroke available)
   499 000022B7 66F705(E1040000)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   499 000022BF 02                  <1>
   500 000022C0 7405                <1>     jz .charFound
   501                              <1> .exit:
   502 000022C2 30C0                <1>     xor al, al
   503 000022C4 5E                  <1>     pop rsi
   504 000022C5 5B                  <1>     pop rbx
   505                              <1>     return
    13                              <2> %%_ret:
    14 000022C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   506                              <1> .charFound:
   507                              <1> ;Keystroke available, proceed
   508 000022C7 8A05(EB040000)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   509 000022CD 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   510 000022CF 75F1                <1>     jne .exit   ;If not equal exit
   511                              <1> ;Now we pull the char out of the buffer
   512 000022D1 C705(E0040000)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   512 000022D9 0000                <1>
   513 000022DB C605(DE040000)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   514                              <1>     ;Place pointers and number of chars
   515 000022E2 C705(F4040000)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   515 000022EA 0000                <1>
   516                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   517 000022EC 488D05(EB040000)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   518 000022F3 488905(EC040000)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   519 000022FA E8713F0000          <1>     call goDriver   ;RSI and RBX as before
   520 000022FF E9BD3A0000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   521                              <1> 
   522                              <1> vConSwapDriver:
   523                              <1> ;Sets up the vCon to use the alternative SFT pointer
   524 00002304 57                  <1>     push rdi
   525 00002305 C605(87040000)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   526 0000230C 488B3D(21070000)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   527 00002313 48893D(11070000)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   528 0000231A 5F                  <1>     pop rdi
   529                              <1>     return
    13                              <2> %%_ret:
    14 0000231B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> vConRetDriver:
   532                              <1> ;Returns the original driver (sets flag down)
   533 0000231C C605(87040000)00    <1>     mov byte [vConDrvSwp], 0
   534                              <1>     return
    13                              <2> %%_ret:
    14 00002323 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   535                              <1> 
   536                              <1> ;--------------------------------------------------
   537                              <1> ;      Main Keyboard Buffered Input Function      :
   538                              <1> ;--------------------------------------------------
   539                              <1> buffCharInput_BE:  ;ah = 0Ah
   540                              <1> ;Buffer pointer in rdx
   541                              <1> ; byte [rdx + 0], buffer length
   542                              <1> ; byte [rdx + 1], number of chars in buffer
   543                              <1> ; byte [rdx + 2], buffer start
   544                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   545                              <1> ;Register use
   546                              <1> ; dh = Char offset in internal buffer
   547                              <1> ; dl = Buffer length
   548                              <1> ; bh = Char offset in user buffer
   549                              <1> ; bl = Number of chars already in the buffer
   550                              <1> ; rdi = Internal buffer
   551                              <1> ; rsi = User buffer
   552 00002324 4889D6              <1>     mov rsi, rdx
   553 00002327 66AD                <1>     lodsw   ;Get buffer metadata in ax
   554 00002329 84C0                <1>     test al, al
   555                              <1>     retz    ;If buffer length zero, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000232B 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   556 0000232D 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   557 00002330 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   558 00002332 7606                <1>     jbe .avoidcheck
   559 00002334 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   560 00002338 7402                <1>     je .functionKeyOk
   561                              <1> .avoidcheck:
   562 0000233A 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   563                              <1> .functionKeyOk:
   564 0000233C 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   565 0000233F FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   566                              <1> .breakEP:
   567 00002341 8A05(C0020000)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   568 00002347 8805(C1020000)      <1>     mov byte [vConCurCnt], al
   569 0000234D 56                  <1>     push rsi    ;Push user buffer address
   570 0000234E 488D3D(C2020000)    <1>     lea rdi, vConBuffer
   571 00002355 C605(F2060000)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   572                              <1> .mainLoop:
   573 0000235C E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   574 00002361 3C0A                <1>     cmp al, LF
   575 00002363 7505                <1>     jne .checkControlChars
   576                              <1> .mainLoop2:
   577 00002365 E8A8FCFFFF          <1>     call charIn_B
   578                              <1> .checkControlChars:
   579 0000236A 3C06                <1>     cmp al, ACK
   580 0000236C 74F7                <1>     je .mainLoop2   ;Get another char
   581 0000236E 3A05ECDCFFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   582 00002374 0F8426010000        <1>     je .escape
   583 0000237A 3C7F                <1>     cmp al, DEL
   584 0000237C 0F8489000000        <1>     je .delete
   585 00002382 3C08                <1>     cmp al, BSP
   586 00002384 0F8481000000        <1>     je .delete
   587 0000238A 3C17                <1>     cmp al, ETB
   588                              <1>     ;Add space for patched jump instructions
   589 0000238C 9090909090          <1>     db 5 dup (90h)  ;NOP
   590 00002391 3C15                <1>     cmp al, NAK
   591 00002393 9090909090          <1>     db 5 dup (90h)
   592 00002398 3C0D                <1>     cmp al, CR
   593 0000239A 744C                <1>     je .carriageReturn
   594 0000239C 3C0A                <1>     cmp al, LF
   595 0000239E 7461                <1>     je .lineFeed
   596 000023A0 3A05BBDCFFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   597 000023A6 7429                <1>     je .break
   598                              <1> .checkIfCanInsert:
   599 000023A8 38D6                <1>     cmp dh, dl
   600 000023AA 731C                <1>     jae .bufOflw
   601 000023AC AA                  <1>     stosb   ;Store the byte and increment rdi!
   602 000023AD FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   603 000023AF E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   604 000023B4 803D(F2060000)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   605 000023BB 75A8                <1>     jne .mainLoop2
   606                              <1>     ;IF not in insert mode, we fall here
   607                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   608                              <1>     ; or insert chars if needed.
   609 000023BD 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   610 000023BF 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   611 000023C1 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   612 000023C4 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   613 000023C6 EB9D                <1>     jmp short .mainLoop2
   614                              <1> .bufOflw:
   615                              <1> ;Buffer overflow
   616 000023C8 B007                <1>     mov al, BEL ;Sound the bell
   617 000023CA E8D0FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   618 000023CF EB94                <1>     jmp short .mainLoop2
   619                              <1> .break:
   620                              <1> ;Break, Place a "\", and do a CRLF
   621 000023D1 B05C                <1>     mov al, "\"
   622 000023D3 E8C7FAFFFF          <1>     call charOut_B.in
   623 000023D8 5E                  <1>     pop rsi ;Realign stack
   624                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   625 000023D9 E89CFEFFFF          <1>     call printCRLF
   626                              <1>     ;Align to next tabstop
   627 000023DE E85AFBFFFF          <1>     call charOut_B.tab
   628 000023E3 E959FFFFFF          <1>     jmp .breakEP
   629                              <1> .carriageReturn:
   630 000023E8 AA                  <1>     stosb
   631 000023E9 E8B1FAFFFF          <1>     call charOut_B.in
   632 000023EE 5F                  <1>     pop rdi ;User buffer address was pushed 
   633 000023EF 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   634 000023F2 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   635                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   636 000023F4 488D35(C2020000)    <1>     lea rsi, vConBuffer
   637 000023FB 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   638 000023FE F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   639                              <1>     return
    13                              <2> %%_ret:
    14 00002400 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   640                              <1> .lineFeed:
   641 00002401 E874FEFFFF          <1>     call printCRLF
   642 00002406 E95AFFFFFF          <1>     jmp .mainLoop2
   643                              <1> .delete:
   644 0000240B E805000000          <1>     call .removeChar
   645 00002410 E950FFFFFF          <1>     jmp .mainLoop2
   646                              <1> .removeChar:
   647 00002415 84F6                <1>     test dh, dh ;Is char count 0?
   648 00002417 741C                <1>     jz .normalChar   ;If so, skip going back!
   649 00002419 E868000000          <1>     call .vConErase
   650 0000241E 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   651 00002420 3C20                <1>     cmp al, SPC
   652 00002422 7311                <1>     jae .normalChar
   653 00002424 3C09                <1>     cmp al, TAB
   654 00002426 7420                <1>     je .eraTab
   655 00002428 3C15                <1>     cmp al, NAK
   656 0000242A 7409                <1>     je .normalChar
   657 0000242C 3C14                <1>     cmp al, DC4
   658 0000242E 7405                <1>     je .normalChar
   659 00002430 E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   660                              <1> .normalChar:
   661 00002435 803D(F2060000)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   662                              <1>     retne ;Yes, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000243C 75C2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   663 0000243E 84FF                <1>     test bh, bh ;Beginning of user buffer?
   664                              <1>     retz    ;Yes, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002440 74BE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   665 00002442 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   666 00002445 FECF                <1>     dec bh
   667                              <1>     return
    13                              <2> %%_ret:
    14 00002447 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   668                              <1> .eraTab:
   669                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   670                              <1> ; up to a tab stop worth of space chars printed
   671 00002448 57                  <1>     push rdi
   672 00002449 48FFCF              <1>     dec rdi
   673 0000244C FD                  <1>     std ;Go backwards
   674 0000244D 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   675 00002450 B020                <1>     mov al, SPC
   676 00002452 53                  <1>     push rbx
   677 00002453 BB07000000          <1>     mov ebx, 7
   678 00002458 67E30D              <1>     jecxz .onTabstop
   679                              <1> .scanString:
   680 0000245B AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   681 0000245C 7608                <1>     jbe .notChar    ;No, skip handling
   682 0000245E 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   683 00002462 740A                <1>     je .tabChar
   684 00002464 FECB                <1>     dec bl
   685                              <1> .notChar:
   686 00002466 E2F3                <1>     loop .scanString
   687                              <1> .onTabstop:
   688 00002468 2A1D(C1020000)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   689                              <1> .tabChar:
   690 0000246E 28F3                <1>     sub bl, dh  ;Same on tabstop
   691 00002470 00D9                <1>     add cl, bl
   692 00002472 80E107              <1>     and cl, 7
   693 00002475 5B                  <1>     pop rbx
   694 00002476 5F                  <1>     pop rdi
   695 00002477 FC                  <1>     cld
   696 00002478 74BB                <1>     jz .normalChar
   697                              <1>     ;Now erase all the spaces placed on the vCon
   698                              <1> .vConDelTab:
   699 0000247A E80C000000          <1>     call .vConEraseNoDec
   700 0000247F E2F9                <1>     loop .vConDelTab
   701 00002481 E9AFFFFFFF          <1>     jmp .normalChar
   702                              <1> .vConErase:
   703                              <1> ;Erase the char on the vCon
   704                              <1> ;Return through the output function
   705 00002486 48FFCF              <1>     dec rdi ;Go back a space in the 
   706 00002489 FECE                <1>     dec dh  ;Decrement char count in the buffer
   707                              <1> .vConEraseNoDec:
   708 0000248B B008                <1>     mov al, BSP ;Move cursor back
   709 0000248D E80DFAFFFF          <1>     call charOut_B.in
   710 00002492 B020                <1>     mov al, SPC ;Replace with a space
   711 00002494 E806FAFFFF          <1>     call charOut_B.in
   712 00002499 B008                <1>     mov al, BSP ;Move cursor back again
   713 0000249B E9FFF9FFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   714                              <1> .escape:
   715                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   716                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   717                              <1> ; including the function keys.
   718 000024A0 FF25B2DBFFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   719                              <1> .f2:
   720 000024A6 E846000000          <1>     call .fCommon2
   721 000024AB EB0C                <1>     jmp short .fCommon
   722                              <1> .f3:
   723 000024AD 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   724 000024B0 28F9                <1>     sub cl, bh  ;Sub our current position
   725 000024B2 EB05                <1>     jmp short .fCommon
   726                              <1> .f1:
   727 000024B4 B901000000          <1>     mov ecx, 1  ;Get one char
   728                              <1> .fCommon:
   729 000024B9 C605(F2060000)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   730 000024C0 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   731 000024C2 0F849DFEFFFF        <1>     je .mainLoop2
   732 000024C8 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   733 000024CA 0F8495FEFFFF        <1>     je .mainLoop2
   734                              <1>     ;Else, copy byte by byte, and retain char in al
   735 000024D0 AC                  <1>     lodsb
   736 000024D1 AA                  <1>     stosb
   737 000024D2 E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   738 000024D7 FEC7                <1>     inc bh
   739 000024D9 FEC6                <1>     inc dh
   740 000024DB E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   741 000024DD E983FEFFFF          <1>     jmp .mainLoop2
   742                              <1> .f4:
   743 000024E2 E80A000000          <1>     call .fCommon2
   744 000024E7 4801CE              <1>     add rsi, rcx
   745 000024EA 00CF                <1>     add bh, cl
   746 000024EC E974FEFFFF          <1>     jmp .mainLoop2
   747                              <1> .fCommon2:
   748 000024F1 E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   749 000024F6 3A0564DBFFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   750 000024FC 750B                <1>     jne .fnotEscape
   751                              <1>     ;Get another char if they typed escape and force it in the buffer
   752                              <1>     ; Do not return to caller
   753 000024FE E80FFBFFFF          <1>     call charIn_B
   754                              <1> .fforceExit:
   755 00002503 59                  <1>     pop rcx ;Get original return address from stack
   756 00002504 E95CFEFFFF          <1>     jmp .mainLoop2
   757                              <1> .fnotEscape:
   758 00002509 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   759 0000250C 28F9                <1>     sub cl, bh
   760 0000250E 74F3                <1>     jz .fforceExit
   761 00002510 FFC9                <1>     dec ecx
   762 00002512 74EF                <1>     jz .fforceExit
   763 00002514 57                  <1>     push rdi
   764 00002515 4889F7              <1>     mov rdi, rsi
   765 00002518 48FFC7              <1>     inc rdi
   766 0000251B F2AE                <1>     repne scasb ;Search for the char to start printing from
   767 0000251D 5F                  <1>     pop rdi
   768 0000251E 75E3                <1>     jne .fforceExit ;If char not found, return
   769 00002520 F6D1                <1>     not cl
   770 00002522 00D9                <1>     add cl, bl
   771 00002524 28F9                <1>     sub cl, bh
   772                              <1>     return
    13                              <2> %%_ret:
    14 00002526 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   773                              <1> .f5:
   774 00002527 B040                <1>     mov al, "@"
   775 00002529 E871F9FFFF          <1>     call charOut_B.in   ;Print the char
   776 0000252E 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   777 0000252F 57                  <1>     push rdi
   778 00002530 E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   779 00002535 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   780 00002536 88F3                <1>     mov bl, dh
   781 00002538 E99CFEFFFF          <1>     jmp .breakAlt
   782                              <1> .f6:
   783                              <1> ;If the user wants to insert a EOF, they can use F6
   784 0000253D B01A                <1>     mov al, EOF
   785 0000253F E964FEFFFF          <1>     jmp .checkIfCanInsert
   786                              <1> .f7:
   787                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   788 00002544 8A0516DBFFFF        <1>     mov al, byte [extESC]
   789 0000254A E959FEFFFF          <1>     jmp .checkIfCanInsert
   790                              <1> .toggleIns:
   791 0000254F F615(F2060000)      <1>     not byte [vConInsert]   ;Toggle
   792                              <1>     return
    13                              <2> %%_ret:
    14 00002555 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   793                              <1> .eDel:
   794 00002556 38DF                <1>     cmp bh, bl
   795 00002558 0F8407FEFFFF        <1>     je .mainLoop2
   796 0000255E FEC7                <1>     inc bh
   797 00002560 48FFC6              <1>     inc rsi
   798 00002563 E9FDFDFFFF          <1>     jmp .mainLoop2
   799                              <1> 
   800                              <1> editKeys:
   801                              <1> ;Our Default Extended keys handler
   802 00002568 E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   803 0000256D B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   804 00002572 57                  <1>     push rdi    ;Preserve rdi
   805 00002573 488D3DE8DAFFFF      <1>     lea rdi, extKeyTbl
   806 0000257A 57                  <1>     push rdi
   807                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   808                              <1>     ; offset of function from extKeyTbl
   809                              <1> .lp:
   810 0000257B AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   811 0000257C 740D                <1>     je .charFound
   812 0000257E FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   813 00002580 7414                <1>     jz .notInTable
   814 00002582 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   815 00002589 EBF0                <1>     jmp short .lp
   816                              <1> .charFound:
   817 0000258B 59                  <1>     pop rcx ;Pop back the effective address of the table
   818 0000258C 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   819 00002590 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   820 00002593 5F                  <1>     pop rdi
   821 00002594 FFE1                <1>     jmp rcx
   822                              <1> .notInTable:
   823 00002596 59                  <1>     pop rcx ;Realign stack
   824 00002597 59                  <1>     pop rcx
   825 00002598 E9C8FDFFFF          <1>     jmp buffCharInput_BE.mainLoop2
    33                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
     1                              <1> ;Major kernel date time functions and subroutines
     2                              <1> 
     3                              <1> getDate:           ;ah = 2Ah
     4 0000259D E879010000          <1>     call readDateTimeRecord ;Update date if necessary
     5 000025A2 E8FE400000          <1>     call getUserRegs
     6 000025A7 668B15(81040000)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
     7                              <1> ;    mov dh, byte [monthOfYear]
     8 000025AE 0FB60D(83040000)    <1>     movzx ecx, byte [years]
     9 000025B5 8A05(86040000)      <1>     mov al, byte [dayOfWeek]
    10 000025BB 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    11 000025BF 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    12                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 000025C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> setDate:           ;ah = 2Bh
    14                              <1> ;	CX = year (1980-2099)
    15                              <1> ;   DH = month (1-12)
    16                              <1> ;	DL = day (1-31)
    17 000025C4 E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    18                              <1>     return
    13                              <2> %%_ret:
    14 000025C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> getTime:           ;ah = 2Ch
    20 000025CA E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    21 000025CF E8D1400000          <1>     call getUserRegs
    22 000025D4 668B0D(0B050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    23 000025DB 668B15(0D050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    24 000025E2 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    25 000025E6 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    26                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 000025EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    27                              <1> setTime:           ;ah = 2Dh
    28                              <1> ;   CH = hour (0-23)
    29                              <1> ;	CL = minutes (0-59)
    30                              <1> ;	DH = seconds (0-59)
    31                              <1> ;	DL = hundredths (0-99)
    32 000025EB 80FD17              <1>     cmp ch, 23
    33 000025EE 7749                <1>     ja .exitBad
    34 000025F0 80F93B              <1>     cmp cl, 59
    35 000025F3 7744                <1>     ja .exitBad
    36 000025F5 80FE3B              <1>     cmp dh, 59
    37 000025F8 773F                <1>     ja .exitBad
    38 000025FA 80FA63              <1>     cmp dl, 99
    39 000025FD 773A                <1>     ja .exitBad
    40                              <1> ;Now we read date (updating internal count if necessary)
    41 000025FF E817010000          <1>     call readDateTimeRecord
    42 00002604 488D1D(09050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    43 0000260B 0FB705(84040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    44 00002612 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    45 00002615 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    46 00002619 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    47 0000261D B906000000          <1>     mov ecx, 6
    48 00002622 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    49 00002625 E8F93E0000          <1>     call primReqWriteSetup   ;rbx now points to request header
    50 0000262A 488B35(3F000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    51 00002631 E83A3C0000          <1>     call goDriver
    52 00002636 30C0                <1>     xor al, al
    53                              <1>     return
    13                              <2> %%_ret:
    14 00002638 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> .exitBad:
    55 00002639 B0FF                <1>     mov al, -1
    56                              <1>     return
    13                              <2> %%_ret:
    14 0000263B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    57                              <1> ;------------------------
    58                              <1> ;   Utility functions   :
    59                              <1> ;------------------------
    60                              <1> writeDate:
    61 0000263C 6681F97800          <1>     cmp cx, 120
    62 00002641 0F83D1000000        <1>     jae .exitBad
    63 00002647 80FE0C              <1>     cmp dh, 12
    64 0000264A 0F87C8000000        <1>     ja .exitBad
    65 00002650 80FA1F              <1>     cmp dl, 31
    66 00002653 0F87BF000000        <1>     ja .exitBad
    67 00002659 668915(81040000)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    68                              <1>     ;mov byte [monthOfYear], dh
    69 00002660 880D(83040000)      <1>     mov byte [years], cl    ;Save the years count
    70 00002666 E878010000          <1>     call setDaysInFeb   ;Set days in february this year
    71 0000266B 88CD                <1>     mov ch, cl ;Get years count in ch
    72 0000266D C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
    73 00002670 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
    74 00002673 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
    75 00002676 BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
    76 0000267B F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
    77                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
    78 0000267D 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
    79 00002680 67E316              <1>     jecxz .addDay    ;Skip adding years
    80 00002683 056E010000          <1>     add eax, 366    ;First add for a leap year
    81                              <1> .addYears:
    82 00002688 FFC9                <1>     dec ecx
    83 0000268A 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
    84 0000268D 056D010000          <1>     add eax, 365    ;Add the days in the normal years
    85 00002692 EBF4                <1>     jmp short .addYears
    86                              <1> .addLeap:
    87 00002694 056E010000          <1>     add eax, 366    ;Add the days in the leap year
    88                              <1> .addDay:
    89 00002699 89C2                <1>     mov edx, eax    ;Save this number in edx
    90                              <1>     ;Now to add day offset
    91 0000269B 0FB60D(82040000)    <1>     movzx ecx, byte [monthOfYear]
    92 000026A2 488D35DAD9FFFF      <1>     lea rsi, monthsTbl
    93                              <1> .addDaysInMonth:
    94 000026A9 FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
    95 000026AB 67E308              <1>     jecxz .addMonthOffset
    96 000026AE AC                  <1>     lodsb   ;Get the number of days in the month in al
    97 000026AF 0FB6C0              <1>     movzx eax, al
    98 000026B2 01C2                <1>     add edx, eax
    99 000026B4 EBF3                <1>     jmp short .addDaysInMonth
   100                              <1> .addMonthOffset:
   101 000026B6 0FB60D(81040000)    <1>     movzx ecx, byte [dayOfMonth]
   102 000026BD FFC9                <1>     dec ecx
   103 000026BF 01CA                <1>     add edx, ecx    ;Add month offset
   104                              <1>     ;edx has the number of days since 01/01/1980
   105 000026C1 668915(84040000)    <1>     mov word [daysOffset], dx   ;Store!
   106                              <1> ;Now read and then write CLOCKrecrd
   107 000026C8 488D1D(09050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   108 000026CF B906000000          <1>     mov ecx, 6
   109 000026D4 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   110 000026D7 E8523E0000          <1>     call primReqReadSetup   ;rbx now points to request header
   111 000026DC 488B35(3F000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   112 000026E3 E8883B0000          <1>     call goDriver
   113                              <1> ;Now we change daycount and write it back
   114 000026E8 0FB705(84040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   115 000026EF 488D1D(09050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   116 000026F6 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   117 000026F9 B906000000          <1>     mov ecx, 6
   118 000026FE 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   119 00002701 E81D3E0000          <1>     call primReqWriteSetup   ;rbx now points to request header
   120 00002706 488B35(3F000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   121 0000270D E85E3B0000          <1>     call goDriver
   122 00002712 E8AE000000          <1>     call setDayofWeek
   123                              <1>     return
    13                              <2> %%_ret:
    14 00002717 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   124                              <1> .exitBad:
   125 00002718 B0FF                <1>     mov al, -1
   126                              <1>     return
    13                              <2> %%_ret:
    14 0000271A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> readDateTimeRecord:
   129                              <1> ;Will read the clock using the primary request header
   130                              <1> ;Preserves all regs except eax and flags
   131 0000271B 53                  <1>     push rbx
   132 0000271C 51                  <1>     push rcx
   133 0000271D 52                  <1>     push rdx
   134 0000271E 56                  <1>     push rsi
   135 0000271F 55                  <1>     push rbp
   136                              <1> 
   137 00002720 66C705(BA1A0000)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   137 00002728 00                  <1>
   138 00002729 488D1D(09050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   139 00002730 B906000000          <1>     mov ecx, 6      ;Number of bytes to xfr
   140 00002735 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   141                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   142                              <1> ; rbx = Data storage buffer ptr
   143                              <1> ; ecx = Number of sectors to transfer | Number of bytes to xfr, if char dev
   144                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   145 00002738 E8F13D0000          <1>     call primReqReadSetup   ;rbx now points to request header
   146 0000273D 488B35(3F000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   147 00002744 E8273B0000          <1>     call goDriver
   148 00002749 0FB705(09050000)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   149                              <1> ;Here we have:  ax = Days since 1/1/1980
   150                              <1> ;Updates the internal date fields
   151                              <1> ;Internal time fields are in the clock record
   152                              <1> ;So now we check if the number of days since 1980 are the same.
   153                              <1> ;If so, we can skip updating.
   154 00002750 663B05(84040000)    <1>     cmp ax, word [daysOffset]
   155 00002757 7466                <1>     je .exit    ;Return if equal
   156 00002759 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   157 0000275E 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   158 00002760 668905(84040000)    <1>     mov word [daysOffset], ax   ;Save this new offset
   159                              <1>     ;Now want to update years, month and day fields
   160                              <1>     ;ax has the number of days since 01/01/1980
   161                              <1>     ;Get days in a 4 year period
   162 00002767 BBB5050000          <1>     mov ebx, 365*4 + 1
   163 0000276C 31D2                <1>     xor edx, edx
   164 0000276E 89D1                <1>     mov ecx, edx  ;Zero ecx
   165 00002770 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   166                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   167                              <1>     ;edx has offset into current 4 year bunch
   168 00002772 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   169 00002777 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   170 00002779 7210                <1>     jb .foundBunch
   171 0000277B 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   172 0000277D FFC1                <1>     inc ecx
   173 0000277F FFCB                <1>     dec ebx ;Number of days in a normal year
   174                              <1> .findBunch:
   175 00002781 39DA                <1>     cmp edx, ebx
   176 00002783 7206                <1>     jb .foundBunch
   177 00002785 29DA                <1>     sub edx, ebx
   178 00002787 FFC1                <1>     inc ecx
   179 00002789 EBF6                <1>     jmp short .findBunch
   180                              <1> .foundBunch:
   181                              <1>     ;If ecx = 0, february has 29 days!
   182                              <1>     ;eax has number of four year bunches elapsed since 1980
   183 0000278B C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   184 0000278E 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   185                              <1>     ;ecx now has the number of years since 1980
   186 00002790 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   187                              <1> ;edx has number of days into the year we are in
   188                              <1> ;eax has number of days in Feb for this year
   189 00002795 488D35E7D8FFFF      <1>     lea rsi, monthsTbl
   190 0000279C 31C9                <1>     xor ecx, ecx    ;Use as month counter
   191                              <1> .monthSearch:
   192 0000279E FFC1                <1>     inc ecx ;Start from 1
   193 000027A0 AC                  <1>     lodsb   ;Get value in al and inc rsi
   194 000027A1 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   195 000027A4 39C2                <1>     cmp edx, eax
   196 000027A6 7204                <1>     jb .monthFound
   197 000027A8 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   198 000027AA EBF2                <1>     jmp short .monthSearch
   199                              <1> .monthFound:
   200                              <1>     ;cl has the month (01h-0Ch)
   201                              <1>     ;dl has the day of the month - 1
   202 000027AC FFC2                <1>     inc edx
   203 000027AE 880D(82040000)      <1>     mov byte [monthOfYear], cl
   204 000027B4 8815(81040000)      <1>     mov byte [dayOfMonth], dl
   205 000027BA E806000000          <1>     call setDayofWeek
   206                              <1> .exit:
   207 000027BF 5D                  <1>     pop rbp
   208 000027C0 5E                  <1>     pop rsi
   209 000027C1 5A                  <1>     pop rdx
   210 000027C2 59                  <1>     pop rcx
   211 000027C3 5B                  <1>     pop rbx
   212                              <1>     return  ;Return with ZF is date set, or same day
    13                              <2> %%_ret:
    14 000027C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   213                              <1> 
   214                              <1> setDayofWeek:
   215                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   216 000027C5 0FB705(84040000)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   217 000027CC 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   218                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   219 000027D1 31D2                <1>     xor edx, edx
   220 000027D3 B907000000          <1>     mov ecx, 7   
   221 000027D8 F7F1                <1>     div ecx  ;Get remainder in dl
   222 000027DA 8815(86040000)      <1>     mov byte [dayOfWeek], dl
   223                              <1> ;Set ZF to indicate all ok
   224 000027E0 31C0                <1>     xor eax, eax
   225                              <1>     return
    13                              <2> %%_ret:
    14 000027E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> 
   227                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   228                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   229                              <1> ;Input: cl = Year - 1980
   230                              <1> ;Output: al = Number of days in February
   231 000027E3 880D(83040000)      <1>     mov byte [years], cl    ;Save this figure
   232 000027E9 F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   233 000027EC 51                  <1>     push rcx
   234 000027ED 57                  <1>     push rdi
   235 000027EE B81C000000          <1>     mov eax, 28  ;Usual days in february
   236 000027F3 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   237 000027F8 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   238 000027FB 488D3D82D8FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   239 00002802 AA                  <1>     stosb   ;Store the word in rdi
   240 00002803 5F                  <1>     pop rdi
   241 00002804 59                  <1>     pop rcx
   242                              <1>     return
    13                              <2> %%_ret:
    14 00002805 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> getDirDTwords:
   245                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   246                              <1> ; High word of eax = Date
   247                              <1> ; Low word of eax = Time
   248                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   249                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   250                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   251                              <1> 
   252                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   253                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   254                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   255                              <1> ;Preserves all registers except eax
   256 00002806 53                  <1>     push rbx
   257 00002807 0FB61D(0E050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   258 0000280E D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   259 00002810 89D8                <1>     mov eax, ebx
   260 00002812 0FB61D(0B050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   261 00002819 C1E305              <1>     shl ebx, 5
   262 0000281C 09D8                <1>     or eax, ebx
   263 0000281E 0FB61D(0C050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   264 00002825 C1E30B              <1>     shl ebx, 11
   265 00002828 09D8                <1>     or eax, ebx
   266 0000282A 0FB61D(81040000)    <1>     movzx ebx, byte [dayOfMonth]
   267 00002831 C1E310              <1>     shl ebx, 16
   268 00002834 09D8                <1>     or eax, ebx
   269 00002836 0FB61D(82040000)    <1>     movzx ebx, byte [monthOfYear]
   270 0000283D C1E315              <1>     shl ebx, 21
   271 00002840 09D8                <1>     or eax, ebx
   272 00002842 0FB61D(83040000)    <1>     movzx ebx, byte [years]
   273 00002849 C1E319              <1>     shl ebx, 25
   274 0000284C 09D8                <1>     or eax, ebx
   275 0000284E 5B                  <1>     pop rbx
   276                              <1>     return
    13                              <2> %%_ret:
    14 0000284F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   277                              <1> getDateAndTimeOld:  ;INT 4Fh AX=12
   278                              <1> ;Returns edx = time
   279                              <1> ;        eax = date
   280                              <1> ; Formally ax and dx but we clear the upper words
   281 00002850 E8C6FEFFFF          <1>     call readDateTimeRecord
   282 00002855 E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   283 0000285A 31D2                <1>     xor edx, edx
   284 0000285C 6689C2              <1>     mov dx, ax  ;Save time
   285 0000285F C1E810              <1>     shr eax, 10h    ;Get date into rax
   286                              <1>     return
    13                              <2> %%_ret:
    14 00002862 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    34                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
     1                              <1> ;FCB functions.
     2                              <1> ;FCBs may only be generally used for file access FAT 12/16 volumes. 
     3                              <1> ;On FAT 32 volumes things are a bit more restricted.
     4                              <1> 
     5                              <1> ;The following functions ARE currently supported for general FAT 32 files:
     6                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
     7                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
     8                              <1> ;   parseFilename       (I mean, this function is useful anyway)
     9                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    10                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    11                              <1> ;   findNextFileFCB     (ditto the above)
    12                              <1> 
    13                              <1> ;The following functions are NOT currently supported for general FAT 32 files:
    14                              <1> ;   openFCB
    15                              <1> ;   closeFCB
    16                              <1> ;   createFCB
    17                              <1> ;   randomReadFCB
    18                              <1> ;   randomWriteFCB
    19                              <1> ;   randBlockReadFCB
    20                              <1> ;   randBlockWriteFCB
    21                              <1> ;   sequentialReadFCB
    22                              <1> ;   sequentialWriteFCB
    23                              <1> ;An attempt to run these functions on a FAT 32 volume will result in returning 
    24                              <1> ; al = -1 and an extended error code of 05 - Access Denied unless a device
    25                              <1> 
    26                              <1> ;FAT 32 volumes will support all functions for Volume Labels using xFCBs.
    27                              <1> ;Reading and Writing to the Volume label will silently return ok.
    28                              <1> ;Volume labels will be editable by being created/opened/closed.
    29                              <1> ;If the current directory is not the root, Volume Label work will assume the 
    30                              <1> ; root directory always.
    31                              <1> 
    32                              <1> findFirstFileFCB:  ;ah = 11h
    33                              <1> ;Input: rdx -> FCB
    34 00002863 488915(09070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    35 0000286A 4889D6              <1>     mov rsi, rdx
    36 0000286D 803EFF              <1>     cmp byte [rsi], -1
    37 00002870 7407                <1>     je .notExt1
    38 00002872 4881C607000000      <1>     add rsi, exFcb.driveNum
    39                              <1> .notExt1:
    40 00002879 0FB606              <1>     movzx eax, byte [rsi]
    41 0000287C 50                  <1>     push rax    ;Push on stack the drive number
    42 0000287D 488D3D(11050000)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    43 00002884 E8BF020000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    44 00002889 7306                <1>     jnc .fcbOk
    45 0000288B 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    46 0000288C E99C420000          <1>     jmp fcbErrExit
    47                              <1> .fcbOk:
    48 00002891 488D3D(11050000)    <1>     lea rdi, buffer1
    49 00002898 E85EE7FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    50 0000289D 7306                <1>     jnc .fileFound
    51 0000289F 5B                  <1>     pop rbx
    52 000028A0 E988420000          <1>     jmp fcbErrExit
    53                              <1> .fileFound:
    54                              <1> ;Now we build an FFBlock internally
    55 000028A5 488D3D(22060000)    <1>     lea rdi, dosffblock
    56 000028AC 57                  <1>     push rdi
    57 000028AD E873E6FFFF          <1>     call setupFFBlock
    58 000028B2 5E                  <1>     pop rsi
    59                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    60 000028B3 488B3D(09070000)    <1>     mov rdi, qword [workingFCB]
    61 000028BA F605(EA060000)FF    <1>     test byte [extFCBFlag], -1
    62 000028C1 7407                <1>     jz .notExt2
    63 000028C3 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    64                              <1> .notExt2:
    65 000028CA 5B                  <1>     pop rbx ;Get back the drive number in bl
    66 000028CB 85DB                <1>     test ebx, ebx
    67 000028CD 7509                <1>     jnz .notCurrentDrive
    68 000028CF 0FB61D(25040000)    <1>     movzx ebx, byte [currentDrv]
    69 000028D6 FFC3                <1>     inc ebx ;Turn into a 1 based drive number
    70                              <1> .notCurrentDrive:
    71 000028D8 AC                  <1>     lodsb   ;Get search drive from FFBlock in al
    72 000028D9 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
    73 000028DC B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
    74 000028E1 A5                  <1>     movsd
    75 000028E2 AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
    76 000028E3 488B3D(0B040000)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
    77 000028EA 488D35(4D060000)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
    78 000028F1 F605(EA060000)FF    <1>     test byte [extFCBFlag], -1
    79 000028F8 7412                <1>     jz .notExt3
    80 000028FA B8FFFFFFFF          <1>     mov eax, -1
    81 000028FF AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
    82 00002900 FFC0                <1>     inc eax ;Make it zero
    83 00002902 AB                  <1>     stosd
    84 00002903 AA                  <1>     stosb   ;Store 5 bytes of zero
    85 00002904 0FB605(EB060000)    <1>     movzx eax, byte [searchAttr]
    86 0000290B AA                  <1>     stosb   ;Store the search attributes
    87                              <1> .notExt3:
    88 0000290C 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
    89 0000290E AA                  <1>     stosb
    90 0000290F B904000000          <1>     mov ecx, fatDirEntry_size/8
    91 00002914 F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
    92 00002917 E90E420000          <1>     jmp fcbGoodExit
    93                              <1>     
    94                              <1> findNextFileFCB:   ;ah = 12h
    95 0000291C 488915(09070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    96 00002923 C605(EA060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
    97 0000292A C605(EB060000)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
    98 00002931 4889D6              <1>     mov rsi, rdx
    99                              <1> 
   100 00002934 803EFF              <1>     cmp byte [rsi], -1
   101 00002937 7514                <1>     jne .notExt
   102 00002939 FE0D(EA060000)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
   103 0000293F 4881C606000000      <1>     add rsi, exFcb.attribute
   104 00002946 AC                  <1>     lodsb   ;Get search attr in al
   105 00002947 8805(EB060000)      <1>     mov byte [searchAttr], al
   106                              <1> .notExt:
   107                              <1>     ;rsi points to drive letter
   108 0000294D 488D3D(22060000)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   109 00002954 31C0                <1>     xor eax, eax
   110 00002956 AC                  <1>     lodsb   ;Get the FCB drive letter
   111 00002957 50                  <1>     push rax    ;Push drive letter on the stack
   112 00002958 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   113 0000295B AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   114 0000295C B905000000          <1>     mov ecx, 5
   115 00002961 F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   116 00002963 FF35(0B040000)      <1>     push qword [currentDTA] ;Save original currentDTA
   117 00002969 488D3D(22060000)    <1>     lea rdi, dosffblock
   118 00002970 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   119 00002971 8F05(0B040000)      <1>     pop qword [currentDTA]
   120 00002977 E827E2FFFF          <1>     call findNextMain
   121 0000297C 8F05(0B040000)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   122 00002982 0F831DFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   123 00002988 488B3D(09070000)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   124 0000298F F607FF              <1>     test byte [rdi], -1
   125 00002992 7407                <1>     jz .notExt2
   126 00002994 4881C707000000      <1>     add rdi, exFcb.driveNum
   127                              <1> .notExt2:
   128 0000299B 5B                  <1>     pop rbx ;Get the drive letter back into bl
   129 0000299C 881F                <1>     mov byte [rdi], bl
   130 0000299E E98A410000          <1>     jmp fcbErrExit  ;And exit bad
   131                              <1> 
   132                              <1> deleteFileFCB:     ;ah = 13h
   133 000029A3 488D3D(11050000)    <1>     lea rdi, buffer1
   134 000029AA 57                  <1>     push rdi
   135 000029AB E898010000          <1>     call fcbInitRoutine ;Build path and find file to delete
   136 000029B0 5F                  <1>     pop rdi ;Point rdi to the canonised path
   137 000029B1 0F8276410000        <1>     jc fcbErrExit
   138 000029B7 E83FE6FFFF          <1>     call getFilePathNoCanon ;Get the file
   139 000029BC 0F826B410000        <1>     jc fcbErrExit
   140 000029C2 E85B0F0000          <1>     call outerDeleteMain
   141 000029C7 0F8260410000        <1>     jc fcbErrExit
   142 000029CD E958410000          <1>     jmp fcbGoodExit
   143                              <1> 
   144                              <1> renameFileFCB:     ;ah = 17h
   145                              <1> ;Input: rdx -> User FCB
   146 000029D2 488915(09070000)    <1>     mov qword [workingFCB], rdx
   147                              <1>     ;First we get the drive letter 
   148 000029D9 4889D6              <1>     mov rsi, rdx
   149 000029DC 803EFF              <1>     cmp byte [rsi], -1
   150 000029DF 7507                <1>     jne .notExt
   151 000029E1 4881C607000000      <1>     add rsi, exFcb.driveNum
   152                              <1> .notExt:
   153 000029E8 31C0                <1>     xor eax, eax
   154 000029EA AC                  <1>     lodsb
   155 000029EB 50                  <1>     push rax    ;Push the drive letter on the stack for now
   156 000029EC 488D3D(11050000)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   157 000029F3 E850010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   158 000029F8 723D                <1>     jc .badPop
   159 000029FA FF35(11060000)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   160 00002A00 8F05(19060000)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   161 00002A06 58                  <1>     pop rax ;Get drive letter back
   162 00002A07 488D3D(91050000)    <1>     lea rdi, buffer2
   163 00002A0E E809010000          <1>     call fcbInitName2
   164 00002A13 7223                <1>     jc short .bad
   165 00002A15 488B05(19060000)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   166 00002A1C 488705(11060000)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   167 00002A23 488905(19060000)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   168 00002A2A E8F50A0000          <1>     call renameMain
   169 00002A2F 0F83F5400000        <1>     jnc fcbGoodExit
   170 00002A35 EB01                <1>     jmp short .bad
   171                              <1> .badPop:
   172 00002A37 5B                  <1>     pop rbx ;Pop drive number off stack
   173                              <1> .bad:
   174 00002A38 E9F0400000          <1>     jmp fcbErrExit
   175                              <1> 
   176                              <1> getFileSizeFCB:    ;ah = 23h
   177                              <1> ;This function which can be used to test existance of file without opening it 
   178                              <1> ;Input: rdx -> FCB
   179 00002A3D 488915(09070000)    <1>     mov qword [workingFCB], rdx
   180 00002A44 488D3D(11050000)    <1>     lea rdi, buffer1
   181 00002A4B 57                  <1>     push rdi
   182 00002A4C E8F7000000          <1>     call fcbInitRoutine
   183 00002A51 5F                  <1>     pop rdi
   184 00002A52 0F82D5400000        <1>     jc fcbErrExit
   185 00002A58 E89EE5FFFF          <1>     call getFilePathNoCanon
   186 00002A5D 0F82CA400000        <1>     jc fcbErrExit
   187 00002A63 8B05(69060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   188                              <1>     ;Now we gotta set up FCB randRecrd Field
   189 00002A69 488B35(09070000)    <1>     mov rsi, qword [workingFCB]
   190 00002A70 803EFF              <1>     cmp byte [rsi], -1
   191 00002A73 7507                <1>     jne .notExtended
   192 00002A75 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   193                              <1> .notExtended:
   194                              <1> ;rsi points to the drive number now
   195 00002A7C 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   196 00002A80 F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   197 00002A82 85D2                <1>     test edx, edx
   198 00002A84 7402                <1>     jz .noRemainder
   199 00002A86 FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   200                              <1> .noRemainder:
   201 00002A88 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   202 00002A8B E99A400000          <1>     jmp fcbGoodExit
   203                              <1> 
   204                              <1> setDTA:            ;ah = 1Ah, Always can be used
   205                              <1> ;Called with:
   206                              <1> ;   rdx = Pointer to the new default DTA
   207 00002A90 488B1D(6E040000)    <1>     mov rbx, qword [oldRSP]
   208 00002A97 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   209 00002A9B 488915(0B040000)    <1>     mov qword [currentDTA], rdx
   210 00002AA2 C3                  <1>     ret
   211                              <1> 
   212                              <1> getDTA:            ;ah = 2Fh, Always can be used
   213 00002AA3 488B15(6E040000)    <1>     mov rdx, qword [oldRSP]
   214 00002AAA 488B1D(0B040000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   215 00002AB1 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   216                              <1>     return
    13                              <2> %%_ret:
    14 00002AB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1>     
   218                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   219                              <1> ;Input:
   220                              <1> ;rsi points to a command line to parse
   221                              <1> ;rdi points to a future unopened FCB
   222                              <1> ;al = parsing control bits. 
   223                              <1> ; al[0] = If set, leading filename separators are scanned off
   224                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   225                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   226                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   227                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   228                              <1> ;        al = 1 => Wildcards found
   229                              <1> ;        al = -1 => Drive specifier invalid
   230                              <1> ;rsi -> to the first char past the parsed filename
   231                              <1> ;rdi -> First byte of the FCB 
   232                              <1> 
   233 00002AB6 E82D010000          <1>     call parseNameToFCB
   234 00002ABB 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   235 00002ABC E8E43B0000          <1>     call getUserRegs
   236 00002AC1 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   237                              <1>     return  ;al now contains dl, the signature, special unique return type
    13                              <2> %%_ret:
    14 00002AC4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   238                              <1> 
   239                              <1> createFileFCB:     ;ah = 16h
   240                              <1> ;rdx -> Extended FCB
   241                              <1> ;       MUST BE EXTENDED. 
   242                              <1> ;       MUST HAVE ATTRIBUTE OF 08h, VOLID, else will fail
   243 00002AC5 803AFF              <1>     cmp byte [rdx + exFcb.extSig], -1
   244 00002AC8 7506                <1>     jne .exit
   245 00002ACA 807A0608            <1>     cmp byte [rdx + exFcb.attribute], dirVolumeID
   246 00002ACE 7500                <1>     jne .exit
   247                              <1>     ;Here we search for a volume ID in the root directory.
   248                              <1>     ; If one exists, we replace the dir entry name field,
   249                              <1>     ; sync the BPB field and invalidate the DPB (to rebuid the BPB).
   250                              <1>     ; Else, we build a dir entry for it, sync the BPB and invalidate the DPB.
   251                              <1>     ;If ANY bits other than ValidCDS are set in the CDS, fail the operation.
   252                              <1> .exit:
   253 00002AD0 B805000000          <1>     mov eax, errAccDen
   254 00002AD5 E953400000          <1>     jmp fcbErrExit
   255                              <1> 
   256                              <1> ;=================================================================
   257                              <1> ;=================================================================
   258                              <1> ;These functions will be marked as reserved for future expansion.
   259                              <1> ; One idea will be to create a handle based record IO interface.
   260                              <1> ; We will be able to do IO on records of predefined length 
   261                              <1> ; on a file handle, thus removing the need for an FCB but still
   262                              <1> ; maintaining the usefulness of record based IO.
   263                              <1> ;=================================================================
   264                              <1> ;=================================================================
   265                              <1> openFileFCB:       ;ah = 0Fh
   266                              <1> closeFileFCB:      ;ah = 10h
   267                              <1> sequentialReadFCB: ;ah = 14h
   268                              <1> sequentialWriteFCB:;ah = 15h
   269                              <1> randomReadFCB:     ;ah = 21h
   270                              <1> randomWriteFCB:    ;ah = 22h
   271                              <1> setRelRecordFCB:   ;ah = 24h
   272                              <1> randBlockReadFCB:  ;ah = 27h
   273                              <1> randBlockWriteFCB: ;ah = 28h
   274 00002ADA B805000000          <1>     mov eax, errAccDen
   275 00002ADF E949400000          <1>     jmp fcbErrExit
   276                              <1> 
   277                              <1> 
   278                              <1> ;--------------------------------
   279                              <1> ;  Common FCB related Routines  :
   280                              <1> ;--------------------------------
   281                              <1> fcbCheckDriveType:
   282                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   283                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   284                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   285                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   286                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   287                              <1> ;If a net CDS, automatic fail (for now).
   288 00002AE4 C605(E8060000)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   289 00002AEB 51                  <1>     push rcx
   290 00002AEC 57                  <1>     push rdi
   291 00002AED 55                  <1>     push rbp
   292 00002AEE 9C                  <1>     pushfq
   293 00002AEF F605(58060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   294 00002AF6 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   295 00002AF8 E81B3B0000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   296 00002AFD 7218                <1>     jc .exit
   297                              <1>     ;rdi has cds ptr now
   298 00002AFF 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   299 00002B03 E8C8DCFFFF          <1>     call getFATtype
   300 00002B08 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   301 00002B0E 7707                <1>     ja .exit
   302                              <1> .okToGo:
   303 00002B10 C605(E8060000)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   304                              <1> .exit:
   305 00002B17 9D                  <1>     popfq
   306 00002B18 5D                  <1>     pop rbp
   307 00002B19 5F                  <1>     pop rdi
   308 00002B1A 59                  <1>     pop rcx
   309                              <1>     return
    13                              <2> %%_ret:
    14 00002B1B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   310                              <1> fcbInitName2:
   311                              <1> ;Must be called after fcbInitRoutine has been run once
   312                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   313                              <1> ;       rdx -> UserFCB
   314                              <1> ;       eax[0] = Drive number (0 based)
   315 00002B1C 55                  <1>     push rbp
   316 00002B1D 4889E5              <1>     mov rbp, rsp
   317 00002B20 4881EC0F000000      <1>     sub rsp, 15
   318 00002B27 57                  <1>     push rdi
   319 00002B28 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   320 00002B2C 4889D6              <1>     mov rsi, rdx
   321 00002B2F F605(EA060000)FF    <1>     test byte [extFCBFlag], -1
   322 00002B36 7407                <1>     jz .notExtended
   323 00002B38 4881C607000000      <1>     add rsi, exFcb.driveNum
   324                              <1> .notExtended:
   325                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   326 00002B3F 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   327 00002B46 EB36                <1>     jmp short fcbInitRoutine.rename2EP
   328                              <1> fcbInitRoutine:
   329                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   330                              <1> ;Input: rdx -> User FCB
   331                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   332 00002B48 55                  <1>     push rbp
   333 00002B49 4889E5              <1>     mov rbp, rsp
   334 00002B4C 4881EC0F000000      <1>     sub rsp, 15    ;Make 15 char space on stack
   335                              <1>     ;This space is used to store X:FILENAME.EXT,0
   336 00002B53 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   337 00002B54 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   338 00002B58 C605(EA060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   339 00002B5F C605(EB060000)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   340 00002B66 E86A000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   341 00002B6B 7410                <1>     jz .notExtended
   342 00002B6D C605(EA060000)FF    <1>     mov byte [extFCBFlag], -1
   343 00002B74 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   344 00002B77 8805(EB060000)      <1>     mov byte [searchAttr], al
   345                              <1> .notExtended:
   346 00002B7D AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   347                              <1> .rename2EP:
   348 00002B7E E8AF3B0000          <1>     call getCDS ;Get the CDS (preserves rdi)
   349 00002B83 723F                <1>     jc .badDisk
   350 00002B85 E842000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   351 00002B8A 488D1DBED6FFFF      <1>     lea rbx, asciiCharProperties
   352 00002B91 B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   353 00002B96 56                  <1>     push rsi    ;rsi -> fcb.filename
   354                              <1> .nameCharCheck:
   355 00002B97 AC                  <1>     lodsb   ;Get the char in al
   356 00002B98 D7                  <1>     xlatb   ;Get the char signature in al
   357 00002B99 A808                <1>     test al, 8
   358 00002B9B 7427                <1>     jz .badDisk
   359 00002B9D FFC9                <1>     dec ecx
   360 00002B9F 75F6                <1>     jnz .nameCharCheck
   361 00002BA1 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   362 00002BA2 4889FB              <1>     mov rbx, rdi    ;Save ptr to stackbuffer + 2 (past X:)
   363 00002BA5 E83BE3FFFF          <1>     call FCBToAsciiz
   364 00002BAA 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   365 00002BAB 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0?
   366 00002BAE 7414                <1>     je .badDisk
   367 00002BB0 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   368 00002BB4 55                  <1>     push rbp
   369 00002BB5 E801E4FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename
   370 00002BBA 5D                  <1>     pop rbp
   371 00002BBB 7207                <1>     jc .badDisk
   372 00002BBD E822FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   373 00002BC2 EB03                <1>     jmp short .jiggleStack  ;Skip the error
   374                              <1> .badDisk:
   375 00002BC4 B003                <1>     mov al, errPnf  ;DOS does this... so will I
   376 00002BC6 F9                  <1>     stc
   377                              <1> .jiggleStack:
   378 00002BC7 4889EC              <1>     mov rsp, rbp
   379 00002BCA 5D                  <1>     pop rbp
   380                              <1> .exit:
   381                              <1>     return
    13                              <2> %%_ret:
    14 00002BCB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   382                              <1> 
   383                              <1> storeZeroBasedDriveNumber:
   384                              <1> ;Input: al => 0 based drive letter
   385                              <1> ;       rdi -> Points to buffer to store the X: in
   386 00002BCC FEC0                <1>     inc al
   387                              <1> storeOneBasedDriveNumber:
   388                              <1> ;Input: al => 1 based drive letter
   389                              <1> ;       rdi -> Points to buffer to store the X: in
   390 00002BCE 0440                <1>     add al, "@"
   391 00002BD0 B43A                <1>     mov ah, ":"
   392 00002BD2 66AB                <1>     stosw
   393                              <1>     return
    13                              <2> %%_ret:
    14 00002BD4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   394                              <1> 
   395                              <1> isFCBExtended:
   396                              <1> ;Input: rdx = FCB ptr
   397                              <1> ;Output: rsi -> Drive letter of FCB
   398                              <1> ;        rdx -> FCB first byte
   399                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   400 00002BD5 4889D6              <1>     mov rsi, rdx
   401 00002BD8 803EFF              <1>     cmp byte [rsi], -1
   402 00002BDB 7507                <1>     jne .notExtended
   403 00002BDD 4881C607000000      <1>     add rsi, exFcb.driveNum
   404                              <1> .notExtended:
   405 00002BE4 4839F2              <1>     cmp rdx, rsi
   406                              <1>     return
    13                              <2> %%_ret:
    14 00002BE7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   407                              <1> 
   408                              <1> parseNameToFCB:
   409                              <1> ;rsi points to a command line to parse
   410                              <1> ;rdi points to a future unopened FCB
   411                              <1> ;al = parsing control bits. 
   412                              <1> ; al[0] = If set, leading filename separators are scanned off
   413                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   414                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   415                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   416                              <1> ;
   417                              <1> ;Separators include : . ; , = + TAB SPACE
   418                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   419                              <1> 
   420 00002BE8 C605(80040000)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   421 00002BEF 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   422 00002BF1 A802                <1>     test al, 2  ;Set drive letter>
   423 00002BF3 7402                <1>     jz .skipDriveLetter
   424 00002BF5 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   425                              <1> .skipDriveLetter:
   426 00002BF7 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   427 00002BFA B908000000          <1>     mov ecx, 8  ;Copy Filename
   428 00002BFF A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   429 00002C01 93                  <1>     xchg eax, ebx
   430 00002C02 B020                <1>     mov al, " " ;Clear the field
   431 00002C04 7405                <1>     jz .clearFilenameField
   432 00002C06 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   433 00002C09 31C9                <1>     xor ecx, ecx
   434                              <1> .clearFilenameField:
   435 00002C0B F3AA                <1>     rep stosb
   436 00002C0D B903000000          <1>     mov ecx, 3
   437 00002C12 F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   438 00002C15 7405                <1>     jz .clearExtensionField
   439 00002C17 4801CF              <1>     add rdi, rcx
   440 00002C1A 31C9                <1>     xor ecx, ecx
   441                              <1> .clearExtensionField:
   442 00002C1C F3AA                <1>     rep stosb
   443 00002C1E 91                  <1>     xchg eax, ecx
   444 00002C1F AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   445 00002C20 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   446 00002C27 F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   447 00002C2A 740F                <1>     jz .dontScanOff
   448 00002C2C E8EE3C0000          <1>     call skipSpacesAndTabs
   449 00002C31 E8F53C0000          <1>     call isCharDelimType
   450 00002C36 7508                <1>     jnz .skipIfDelim
   451 00002C38 48FFC6              <1>     inc rsi
   452                              <1> .dontScanOff:
   453 00002C3B E8DF3C0000          <1>     call skipSpacesAndTabs  ;Skip a char
   454                              <1> .skipIfDelim:
   455 00002C40 E8853B0000          <1>     call uppercaseCharAtPtr 
   456 00002C45 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   457 00002C47 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   458 00002C4A 7519                <1>     jne .skipSettingDriveLetter
   459 00002C4C 48FFC6              <1>     inc rsi ;Goto next char
   460 00002C4F 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   461 00002C51 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   462 00002C53 50                  <1>     push rax    ;Save the 1 based drive letter
   463 00002C54 E8703A0000          <1>     call setDrive   ;Verifies if this drive letter is valid
   464 00002C59 58                  <1>     pop rax
   465 00002C5A 7302                <1>     jnc .validDriveLetter
   466                              <1> .invalidDriveLetter:
   467 00002C5C B2FF                <1>     mov dl, -1
   468                              <1> .validDriveLetter:
   469 00002C5E AA                  <1>     stosb
   470 00002C5F 48FFC6              <1>     inc rsi ;Align pointers...
   471 00002C62 48FFCF              <1>     dec rdi 
   472                              <1> .skipSettingDriveLetter:
   473 00002C65 48FFCE              <1>     dec rsi
   474 00002C68 48FFC7              <1>     inc rdi
   475                              <1>     
   476                              <1> getFCBFilename:
   477                              <1> ;Input: rsi points to first char of filename
   478                              <1> ;       rdi points to storage buffer for filename
   479                              <1> ;       dl contains the signature if drive invalid
   480                              <1> ;Output:
   481                              <1> ;       Fields filled
   482                              <1> ;       al = Return signature
   483 00002C6B B908000000          <1>     mov ecx, 8
   484 00002C70 E815000000          <1>     call getFCBNameField
   485 00002C75 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   486 00002C78 750D                <1>     jne .noExt
   487 00002C7A B903000000          <1>     mov ecx, 3
   488 00002C7F 48FFC6              <1>     inc rsi ;Skip this char
   489 00002C82 E814000000          <1>     call forceFCBNameField
   490                              <1> .noExt:
   491 00002C87 88D0                <1>     mov al, dl  ;Store the return signature
   492                              <1>     return
    13                              <2> %%_ret:
    14 00002C89 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   493                              <1> 
   494                              <1> getFCBNameField:
   495                              <1> ;Checks if the field is appropriate before copying it
   496 00002C8A E83B3B0000          <1>     call uppercaseCharAtPtr
   497 00002C8F 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   498 00002C91 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   499 00002C94 48FFCE              <1>     dec rsi ;Point to previous char
   500                              <1>     return
    13                              <2> %%_ret:
    14 00002C97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   501                              <1> .okName:
   502 00002C98 48FFCE              <1>     dec rsi ;Go back now a char
   503                              <1> forceFCBNameField:
   504                              <1> ;Forcefully copies the name from rsi to rdi
   505 00002C9B E82A3B0000          <1>     call uppercaseCharAtPtr
   506 00002CA0 7226                <1>     jc .terminatingSpace
   507 00002CA2 750D                <1>     jnz .notSep
   508 00002CA4 F605(80040000)FF    <1>     test byte [fcbSpaceOk], -1
   509 00002CAB 741B                <1>     jz .terminatingSpace
   510 00002CAD 3C20                <1>     cmp al, " "
   511 00002CAF 7517                <1>     jne .terminatingSpace
   512                              <1> .notSep:
   513 00002CB1 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   514 00002CB4 FFC9                <1>     dec ecx
   515 00002CB6 3C2A                <1>     cmp al, "*" ;Big wildcard?
   516 00002CB8 7504                <1>     jne .notBigWildcard
   517 00002CBA B03F                <1>     mov al, "?"
   518 00002CBC F3AA                <1>     rep stosb
   519                              <1> .notBigWildcard:
   520 00002CBE AA                  <1>     stosb   ;Stores the uppercased char
   521 00002CBF 3C3F                <1>     cmp al, "?"
   522 00002CC1 75D8                <1>     jne forceFCBNameField
   523 00002CC3 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   524 00002CC6 EBD3                <1>     jmp short forceFCBNameField
   525                              <1> .terminatingSpace:
   526 00002CC8 B020                <1>     mov al, " "
   527 00002CCA AA                  <1>     stosb
   528 00002CCB 48FFCE              <1>     dec rsi ;Point to this trailing space
   529                              <1>     return
    13                              <2> %%_ret:
    14 00002CCE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    35                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;    File Handle Kernel routines    :
     3                              <1> ;-----------------------------------:
     4                              <1> 
     5                              <1> createFileHdl:     ;ah = 3Ch, handle function
     6                              <1> ;Input: cx = File attributes (same as search attributes for find first)
     7                              <1> ;       rdx = Ptr to ASCIZ filename to create
     8                              <1> ;Output: CF=CY => ax = File handle
     9                              <1> ;        CF=NC => al = Error code
    10 00002CCF 51                  <1>     push rcx    ;Save file attributes on stack
    11 00002CD0 488D0D0C0E0000      <1>     lea rcx, createMain
    12 00002CD7 C605(EB060000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive w/ directory
    13 00002CDE EB1D                <1>     jmp short openFileHdl.openCommon
    14                              <1> openFileHdl:       ;ah = 3Dh, handle function
    15                              <1> ;Input: al = Open mode, to open file with
    16                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    17                              <1> ;If called from 5D00h, cl = File attributes too
    18                              <1> ;Output: CF=CY => ax = File handle
    19                              <1> ;        CF=NC => al = Error code
    20 00002CE0 BB16000000          <1>     mov ebx, dirInclusive
    21 00002CE5 F605(F1060000)FF    <1>     test byte [dosInvoke], -1
    22 00002CEC 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    23 00002CEF 880D(EB060000)      <1>     mov byte [searchAttr], cl
    24 00002CF5 488D0DEB0C0000      <1>     lea rcx, openMain  
    25 00002CFC 50                  <1>     push rax    ;Save open mode on stack
    26                              <1> .openCommon:
    27 00002CFD 4889D6              <1>     mov rsi, rdx
    28 00002D00 E8623B0000          <1>     call checkPathspecOK
    29 00002D05 730B                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    30                              <1> .badPath: ;We cant have wildcards when creating or opening a file!
    31 00002D07 58                  <1>     pop rax
    32 00002D08 B803000000          <1>     mov eax, errPnf
    33 00002D0D E93B3E0000          <1>     jmp extErrExit
    34                              <1> .pathOk:
    35 00002D12 E8EB3D0000          <1>     call dosCrit1Enter
    36 00002D17 E833190000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    37 00002D1C E8EB3D0000          <1>     call dosCrit1Exit
    38 00002D21 0F82AF000000        <1>     jc .exitBad
    39                              <1>     ;Now save variables
    40 00002D27 E85B180000          <1>     call setCurrentSFT
    41 00002D2C 66891D(29070000)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    42 00002D33 E8E0190000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    43 00002D38 0F8298000000        <1>     jc .exitBad
    44 00002D3E 66891D(2B070000)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    45 00002D45 48893D(19070000)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    46 00002D4C 0FB71D(29070000)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    47 00002D53 881F                <1>     mov byte [rdi], bl  ;And open the file
    48                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    49 00002D55 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    50 00002D58 488D3D(11050000)    <1>     lea rdi, buffer1    ;Build the full path here
    51 00002D5F 51                  <1>     push rcx    ;Save the procedure to call on stack
    52 00002D60 E8A1E2FFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    53 00002D65 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    54 00002D66 488D057A0C0000      <1>     lea rax, openMain   ;Get EA for open procedure
    55 00002D6D 488B35(21070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    56 00002D74 7319                <1>     jnc .proceedCall
    57                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    58                              <1> ;                              For Create New, Bad but handled later.
    59                              <1> ;If CF=CY => Path doesnt all exist:
    60                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    61                              <1> ;Now we check if we are creating or opening.
    62 00002D76 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    63 00002D79 7409                <1>     je .badPathspec ;Jmp to error if opening file that doesnt exist
    64 00002D7B F605(F4060000)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    65 00002D82 750B                <1>     jnz .proceedCall    ;If so, proceed.
    66                              <1> .badPathspec:
    67 00002D84 58                  <1>     pop rax
    68 00002D85 B802000000          <1>     mov eax, errFnf
    69 00002D8A E957000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    70                              <1> .proceedCall:
    71                              <1> ;If the pathspec exists, recall that for create, we truncate.
    72 00002D8F 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
    73 00002D91 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    74 00002D94 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    75 00002D95 750B                <1>     jne .callProc   ;Jump if we are creating
    76                              <1>     ;al means openmode here
    77 00002D97 A880                <1>     test al, 80h    ;No Inherit bit set?
    78 00002D99 7407                <1>     jz .callProc
    79 00002D9B 247F                <1>     and al, 7Fh     ;Clear this bit
    80 00002D9D B900100000          <1>     mov ecx, devNoInherit
    81                              <1> .callProc:
    82 00002DA2 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
    83 00002DA8 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
    84 00002DAE 51                  <1>     push rcx    ;Save the device word 
    85 00002DAF FFD3                <1>     call rbx    ;Enter with open mode in 
    86 00002DB1 59                  <1>     pop rcx
    87 00002DB2 488B35(21070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    88 00002DB9 722B                <1>     jc .exitBad2
    89 00002DBB 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
    90 00002DC0 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
    91 00002DC4 0FB705(2B070000)    <1>     movzx eax, word [currentHdl]
    92 00002DCB FF15(13010000)      <1>     call qword [closeDupFileShare]  ;Close Duplicate Handles if opened file! 
    93 00002DD1 E9693D0000          <1>     jmp extGoodExit ;Save ax and return OK
    94                              <1> .exitBad:
    95 00002DD6 FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
    96 00002DD7 5B                  <1>     pop rbx ;Pop the word from the stack
    97 00002DD8 66C705(29070000)FF- <1>     mov word [currentNdx], -1
    97 00002DE0 FF                  <1>
    98 00002DE1 E9673D0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
    99                              <1> .exitBad2:
   100                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   101 00002DE6 488B35(19070000)    <1>     mov rsi, qword [curHdlPtr]
   102 00002DED C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   103 00002DF0 488B35(21070000)    <1>     mov rsi, qword [currentSFT]
   104 00002DF7 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   105 00002DFC 66C705(29070000)FF- <1>     mov word [currentNdx], -1
   105 00002E04 FF                  <1>
   106 00002E05 E9433D0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   107                              <1> 
   108                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   109                              <1> ;Input: bx = file handle to close
   110 00002E0A E81F190000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   111 00002E0F 0F82383D0000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   112 00002E15 E86D170000          <1>     call setCurrentSFT  ;Set this as the current SFT
   113                              <1>     ;Check count to see if we need to check share mode
   114 00002E1A 31C0                <1>     xor eax, eax    ;Preset ax to 0
   115 00002E1C 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared, no need for share check
   116 00002E21 7406                <1>     je .skipShareCheck
   117                              <1>     ;Now check sharing mode
   118 00002E23 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   119 00002E27 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   120                              <1> .skipShareCheck:
   121 00002E29 50                  <1>     push rax    ;Save the share mode on stack
   122 00002E2A E87F0F0000          <1>     call closeMain  ;Call close main!
   123 00002E2F 58                  <1>     pop rax 
   124 00002E30 0F82173D0000        <1>     jc extErrExit   ;If an error, exit through error exit
   125 00002E36 3C70                <1>     cmp al, netFCBShare ;Do NetFCB check (only if file opened more than once)
   126 00002E38 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
   127 00002E3A E8A4180000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
   128 00002E3F C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
   129                              <1> .exitOk:
   130 00002E42 31C0                <1>     xor eax, eax    ;Return value
   131 00002E44 E9F63C0000          <1>     jmp extGoodExit
   132                              <1> 
   133                              <1> readFileHdl:       ;ah = 3Fh, handle function
   134 00002E49 488D35DB0F0000      <1>     lea rsi, readBytes
   135                              <1> .common:
   136 00002E50 E8D9180000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   137 00002E55 0F82F23C0000        <1>     jc extErrExit   ;Error code in al and exit
   138 00002E5B E827170000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   139 00002E60 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   140 00002E62 FF35(0B040000)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   141 00002E68 488915(0B040000)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   142 00002E6F FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   143 00002E71 8F05(0B040000)      <1>     pop qword [currentDTA]
   144 00002E77 0F82D03C0000        <1>     jc extErrExit   ;Error code in al and exit
   145 00002E7D 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   146 00002E7F E9B23C0000          <1>     jmp extGoodExit2    ;and exit!
   147                              <1> 
   148                              <1> writeFileHdl:      ;ah = 40h, handle function
   149 00002E84 488D35DF120000      <1>     lea rsi, writeBytes
   150 00002E8B E9C0FFFFFF          <1>     jmp readFileHdl.common
   151                              <1> 
   152                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   153                              <1> ;Here don't allow malformed chars unless it is a network CDS
   154 00002E90 BB06000000          <1>     mov ebx, dirIncFiles    ;Inclusive w/o dirs
   155 00002E95 F605(F1060000)FF    <1>     test byte [dosInvoke], -1
   156 00002E9C 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   157 00002E9F 880D(EB060000)      <1>     mov byte [searchAttr], cl
   158 00002EA5 4889D6              <1>     mov rsi, rdx
   159 00002EA8 E8BA390000          <1>     call checkPathspecOK
   160 00002EAD 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   161 00002EAF 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   162                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   163 00002EB1 F605(F1060000)FF    <1>     test byte [dosInvoke], -1
   164 00002EB8 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   165                              <1> .badPath:
   166 00002EBA B803000000          <1>     mov eax, errPnf
   167 00002EBF E9893C0000          <1>     jmp extErrExit
   168                              <1> .pathOk:
   169 00002EC4 488D3D(11050000)    <1>     lea rdi, buffer1
   170 00002ECB 52                  <1>     push rdx
   171 00002ECC E835E1FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   172 00002ED1 5A                  <1>     pop rdx
   173 00002ED2 0F82753C0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   174                              <1>     ;In the case of a wildcard, recall this will return the first file
   175 00002ED8 803D(F3060000)FF    <1>     cmp byte [fileExist], -1
   176 00002EDF 0F85683C0000        <1>     jnz extErrExit
   177 00002EE5 E8380A0000          <1>     call outerDeleteMain
   178 00002EEA 0F825D3C0000        <1>     jc extErrExit
   179 00002EF0 E94A3C0000          <1>     jmp extGoodExit
   180                              <1> 
   181                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   182                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   183 00002EF5 E834180000          <1>     call getSFTPtr
   184 00002EFA 0F824D3C0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   185 00002F00 3C03                <1>     cmp al, 3
   186 00002F02 720A                <1>     jb .validFunction
   187 00002F04 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   188 00002F09 E93F3C0000          <1>     jmp extErrExit
   189                              <1> .validFunction:
   190 00002F0E 3C01                <1>     cmp al, 1
   191 00002F10 7718                <1>     ja .seekend
   192 00002F12 7203                <1>     jb .seekset
   193                              <1> ;Here we are at seekcur, seek from current (signed)
   194 00002F14 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   195                              <1> .seekset:
   196                              <1> ;Seek from the start (unsigned)
   197 00002F17 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   198 00002F1A E886370000          <1>     call getUserRegs    ;Get user regs in rsi
   199 00002F1F 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   200                              <1> .seekExit:
   201 00002F22 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   202 00002F25 E90C3C0000          <1>     jmp extGoodExit2    ;Return OK in eax 
   203                              <1> .seekend:
   204                              <1> ;Here we are at seekend, seek from end (signed)
   205 00002F2A 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   206 00002F30 7505                <1>     jnz .netCheck
   207                              <1> .proceedDisk:
   208 00002F32 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   209 00002F35 EBE0                <1>     jmp short .seekset
   210                              <1> .netCheck:
   211 00002F37 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   212 00002F3D 75F3                <1>     jnz .proceedDisk
   213 00002F3F 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   214                              <1>     ;Check it's share mode
   215 00002F43 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   216 00002F48 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   217 00002F4D 7407                <1>     je .netSeek
   218 00002F4F 3D30000000          <1>     cmp eax, denyReadShare
   219 00002F54 75DC                <1>     jne .proceedDisk
   220                              <1> .netSeek:
   221 00002F56 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   222 00002F5B CD4F                <1>     int 4Fh
   223 00002F5D 73C3                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   224 00002F5F E9E93B0000          <1>     jmp extErrExit
   225                              <1> 
   226                              <1> 
   227                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   228 00002F64 3C01                <1>     cmp al, 1
   229 00002F66 761F                <1>     jbe .subFuncOk
   230 00002F68 B801000000          <1>     mov eax, errInvFnc
   231                              <1> .chmodError:
   232                              <1> ;Call with ax = errorcode
   233 00002F6D C605(FE030000)01    <1>     mov byte [errorLocus], eLocUnk
   234 00002F74 C605(02040000)07    <1>     mov byte [errorClass], eClsAppFlt
   235 00002F7B C605(01040000)07    <1>     mov byte [errorAction], eActRetUsr
   236 00002F82 E9C63B0000          <1>     jmp extErrExit
   237                              <1> .subFuncOk:
   238 00002F87 4889D6              <1>     mov rsi, rdx
   239 00002F8A 89C3                <1>     mov ebx, eax    ;Store function code in bl
   240 00002F8C 53                  <1>     push rbx
   241 00002F8D 51                  <1>     push rcx
   242 00002F8E E8D4380000          <1>     call checkPathspecOK
   243 00002F93 7309                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   244                              <1> .badPath:
   245 00002F95 59                  <1>     pop rcx
   246 00002F96 5B                  <1>     pop rbx
   247 00002F97 B803000000          <1>     mov eax, errPnf
   248 00002F9C EBCF                <1>     jmp short .chmodError
   249                              <1> .pathOk:
   250 00002F9E E8AA390000          <1>     call checkPathNet 
   251 00002FA3 74F0                <1>     jz .badPath ;Or Net paths
   252 00002FA5 E84F390000          <1>     call scanPathWC
   253 00002FAA 72E9                <1>     jc .badPath ;Dont allow wildcards
   254 00002FAC 488D3D(11050000)    <1>     lea rdi, buffer1
   255 00002FB3 52                  <1>     push rdx
   256 00002FB4 C605(EB060000)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   257 00002FBB E846E0FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   258 00002FC0 5A                  <1>     pop rdx
   259 00002FC1 59                  <1>     pop rcx
   260 00002FC2 5B                  <1>     pop rbx
   261 00002FC3 0F82843B0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   262                              <1>     ;In the case of a wildcard, recall this will return the first file
   263 00002FC9 803D(F3060000)FF    <1>     cmp byte [fileExist], -1
   264 00002FD0 759B                <1>     jnz .chmodError
   265                              <1> 
   266 00002FD2 E841360000          <1>     call testCDSNet
   267 00002FD7 730C                <1>     jnc .notNet
   268 00002FD9 750A                <1>     jnz .notNet ;This type of net ok
   269 00002FDB B805000000          <1>     mov eax, errAccDen
   270 00002FE0 E9683B0000          <1>     jmp extErrExit
   271                              <1> .notNet:
   272 00002FE5 84DB                <1>     test bl, bl
   273 00002FE7 7526                <1>     jnz .setAttribs
   274                              <1>     ;Get attribs here
   275 00002FE9 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   276 00002FEF 7412                <1>     jz .getDiskAttribs
   277 00002FF1 B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   278 00002FF6 CD4F                <1>     int 4Fh
   279 00002FF8 0F824F3B0000        <1>     jc extErrExit
   280 00002FFE E93C3B0000          <1>     jmp extGoodExit
   281                              <1> .getDiskAttribs:
   282 00003003 0FB605(58060000)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   283 0000300A E9303B0000          <1>     jmp extGoodExit
   284                              <1> 
   285                              <1> .setAttribs:
   286                              <1>     ;Set attribs here
   287 0000300F 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   288 00003015 7417                <1>     jz .setDiskAttribs
   289 00003017 0FB7C9              <1>     movzx ecx, cx
   290 0000301A 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   291 0000301B B80E110000          <1>     mov eax, 110Eh
   292 00003020 CD4F                <1>     int 4Fh
   293 00003022 59                  <1>     pop rcx
   294 00003023 0F82243B0000        <1>     jc extErrExit
   295 00003029 E9113B0000          <1>     jmp extGoodExit
   296                              <1> .setDiskAttribs:
   297 0000302E E87B080000          <1>     call checkNoOpenHandlesForShareAction
   298 00003033 730A                <1>     jnc .okToSet
   299 00003035 B820000000          <1>     mov eax, errShrVio
   300 0000303A E90E3B0000          <1>     jmp extErrExit
   301                              <1> .okToSet:
   302 0000303F E8C7EAFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   303 00003044 0F82033B0000        <1>     jc extErrExit
   304 0000304A F6C118              <1>     test cl, dirVolumeID | dirDirectory
   305 0000304D 740A                <1>     jz .set
   306 0000304F B805000000          <1>     mov eax, errAccDen
   307 00003054 E9F43A0000          <1>     jmp extErrExit
   308                              <1> .set:
   309 00003059 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   310 0000305C 80E518              <1>     and ch, (dirVolumeID | dirDirectory)    ;Keep these two bits
   311 0000305F 08E9                <1>     or cl, ch
   312 00003061 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   313 00003064 E8FAD4FFFF          <1>     call writeThroughBuffers
   314 00003069 7207                <1>     jc .setError
   315 0000306B 31C0                <1>     xor eax, eax
   316 0000306D E9CD3A0000          <1>     jmp extGoodExit
   317                              <1> .setError:
   318 00003072 E8B5D4FFFF          <1>     call cancelWriteThroughBuffers
   319 00003077 E9D13A0000          <1>     jmp extErrExit
   320                              <1> 
   321                              <1> duplicateHandle:   ;ah = 45h, handle function
   322                              <1> ;Input: bx = Handle to duplicate
   323                              <1> ;Output: If ok then ax = New handle
   324 0000307C 0FB7C3              <1>     movzx eax, bx    ;Move handle to ax
   325 0000307F E894160000          <1>     call findFreeJFTEntry    ;First find a free space in the JFT in rdi
   326                              <1> .duplicateCommon:
   327 00003084 0F82C33A0000        <1>     jc extErrExit   ;Exit if no space
   328 0000308A 4889FE              <1>     mov rsi, rdi    ;Save the free space in rsi
   329 0000308D 93                  <1>     xchg eax, ebx
   330 0000308E E89B160000          <1>     call getSFTPtr    ;Get the pointer to the SFT in rdi
   331 00003093 0F82B43A0000        <1>     jc extErrExit
   332 00003099 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   333 0000309C 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   334 000030A2 7505                <1>     jnz .netFile
   335 000030A4 E8D0090000          <1>     call openDriverMux
   336                              <1> .netFile:
   337 000030A9 E835160000          <1>     call getJFTPtr
   338 000030AE 8A1F                <1>     mov bl, byte [rdi]
   339 000030B0 881E                <1>     mov byte [rsi], bl
   340 000030B2 E9883A0000          <1>     jmp extGoodExit     ;Return handle in ax the entry in the JFT 
   341                              <1> 
   342                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   343                              <1> ;Input: bx = Handle to duplicate
   344                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   345                              <1>     ;First we close cx if it exists
   346 000030B7 0FB7C9              <1>     movzx ecx, cx
   347 000030BA 53                  <1>     push rbx
   348 000030BB 51                  <1>     push rcx
   349 000030BC 89CB                <1>     mov ebx, ecx
   350 000030BE E847FDFFFF          <1>     call closeFileHdl   ;Close handle 
   351 000030C3 5B                  <1>     pop rbx
   352 000030C4 58                  <1>     pop rax
   353 000030C5 E819160000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   354 000030CA EBB8                <1>     jmp short duplicateHandle.duplicateCommon
   355                              <1> 
   356                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   357                              <1> ;Input: cx = Search Attributes, cl only used
   358                              <1> ;       rdx = Ptr to path to file to look for
   359                              <1> ;       al = Document as needing to be 0 for now
   360                              <1> ;Return:
   361                              <1> ;Data in the DTA or error through AX with CF=CY
   362                              <1> ;CAVEATS!
   363                              <1> ;DTA:attribFnd = 40h => Char dev
   364                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   365 000030CC 880D(EB060000)      <1>     mov byte [searchAttr], cl
   366 000030D2 4889D6              <1>     mov rsi, rdx
   367 000030D5 E88D370000          <1>     call checkPathspecOK
   368 000030DA 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   369 000030DC 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   370                              <1> .badPath:
   371 000030DE B803000000          <1>     mov eax, errPnf
   372 000030E3 E9653A0000          <1>     jmp extErrExit
   373                              <1> .pathspecOk:
   374 000030E8 FF35(0B040000)      <1>     push qword [currentDTA]
   375 000030EE 488D3D(22060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   376 000030F5 48893D(0B040000)    <1>     mov qword [currentDTA], rdi
   377 000030FC 488D3D(11050000)    <1>     lea rdi, buffer1    ;Build the full path here
   378 00003103 E8FEDEFFFF          <1>     call getFilePath
   379                              <1> .findfileExit:
   380 00003108 8F05(0B040000)      <1>     pop qword [currentDTA]
   381 0000310E 0F82393A0000        <1>     jc extErrExit
   382 00003114 488D3D(22060000)    <1>     lea rdi, dosffblock
   383 0000311B 57                  <1>     push rdi
   384 0000311C E804DEFFFF          <1>     call setupFFBlock
   385 00003121 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   386 00003122 488B3D(0B040000)    <1>     mov rdi, qword [currentDTA]
   387 00003129 B92B000000          <1>     mov ecx, ffBlock_size
   388 0000312E F3A4                <1>     rep movsb   ;Copy the whole block. 
   389                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   390 00003130 31C0                <1>     xor eax, eax    ;Return value
   391 00003132 E9083A0000          <1>     jmp extGoodExit ;Exit well
   392                              <1> 
   393                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   394                              <1> ;Input: DTA has the find first block from the previous search
   395 00003137 488B35(0B040000)    <1>     mov rsi, qword [currentDTA]
   396 0000313E 488D3D(22060000)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   397 00003145 B92B000000          <1>     mov ecx, ffBlock_size
   398 0000314A F3A4                <1>     rep movsb
   399 0000314C FF35(0B040000)      <1>     push qword [currentDTA] ;Save the current DTA address
   400 00003152 488D3D(22060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   401 00003159 48893D(0B040000)    <1>     mov qword [currentDTA], rdi
   402 00003160 E83EDAFFFF          <1>     call findNextMain
   403 00003165 EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   404                              <1> 
   405                              <1> renameFile:        ;ah = 56h
   406                              <1> ;Input: rdx -> Filespec to rename
   407                              <1> ;       rdi -> New filespec
   408                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   409 00003167 4889D6              <1>     mov rsi, rdx
   410 0000316A BB16000000          <1>     mov ebx, dirInclusive
   411 0000316F F605(F1060000)FF    <1>     test byte [dosInvoke], -1
   412 00003176 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   413 00003179 880D(EB060000)      <1>     mov byte [searchAttr], cl
   414                              <1>     ;Step 0, verify both paths provided are valid
   415 0000317F E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   416 00003184 7249                <1>     jc .pnfError
   417 00003186 56                  <1>     push rsi
   418 00003187 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   419 0000318A E84A000000          <1>     call .renamePathCheck
   420 0000318F 5E                  <1>     pop rsi
   421 00003190 723D                <1>     jc .pnfError
   422                              <1>     ;Now we canonicalise the filenames to make life easy
   423 00003192 56                  <1>     push rsi
   424 00003193 4889FE              <1>     mov rsi, rdi
   425 00003196 488D3D(91050000)    <1>     lea rdi, buffer2
   426 0000319D E819DEFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   427 000031A2 5E                  <1>     pop rsi
   428 000031A3 722A                <1>     jc .pnfError
   429                              <1>     ;Now test if first file exists.
   430 000031A5 FF35(11060000)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   431 000031AB 8F05(19060000)      <1>     pop qword [fname2Ptr]
   432 000031B1 488D3D(11050000)    <1>     lea rdi, buffer1
   433 000031B8 E8FEDDFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   434 000031BD 7210                <1>     jc .pnfError  
   435 000031BF E860030000          <1>     call renameMain ;Both pathnames made good and copied internally, lets go!!
   436 000031C4 0F8283390000        <1>     jc extErrExit
   437 000031CA E970390000          <1>     jmp extGoodExit
   438                              <1> .pnfError:
   439 000031CF B803000000          <1>     mov eax, errPnf
   440 000031D4 E974390000          <1>     jmp extErrExit
   441                              <1> .renamePathCheck:
   442                              <1> ;Checks if the pathspec in rsi is OK
   443 000031D9 56                  <1>     push rsi
   444 000031DA 57                  <1>     push rdi
   445 000031DB E887360000          <1>     call checkPathspecOK
   446 000031E0 5F                  <1>     pop rdi
   447 000031E1 5E                  <1>     pop rsi
   448 000031E2 730D                <1>     jnc .pathOk     ;Path ok 
   449 000031E4 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   450                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   451 000031E6 F605(F1060000)FF    <1>     test byte [dosInvoke], -1
   452 000031ED 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   453                              <1> .badPath:
   454 000031EF F9                  <1>     stc
   455                              <1>     return
    13                              <2> %%_ret:
    14 000031F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   456                              <1> .pathOk:
   457 000031F1 F8                  <1>     clc
   458                              <1>     return
    13                              <2> %%_ret:
    14 000031F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   459                              <1> 
   460                              <1> getSetFileDateTime:;ah = 57h
   461 000031F3 3C01                <1>     cmp al, 1
   462 000031F5 760A                <1>     jbe .oksubfun
   463 000031F7 B801000000          <1>     mov eax, errInvFnc
   464 000031FC E94C390000          <1>     jmp extErrExit
   465                              <1> .oksubfun:
   466 00003201 E828150000          <1>     call getSFTPtr  ;Preserves al unless error returned
   467 00003206 0F8241390000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   468 0000320C 3C01                <1>     cmp al, 1
   469 0000320E 741C                <1>     je .setTimeDate
   470                              <1>     ;Here we get the Time/Date
   471 00003210 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   472 00003214 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   473 00003218 E888340000          <1>     call getUserRegs
   474 0000321D 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   475 00003221 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   476 00003225 31C0                <1>     xor eax, eax
   477 00003227 E913390000          <1>     jmp extGoodExit
   478                              <1> .setTimeDate:
   479                              <1>     ;Here we set the Time/Date
   480 0000322C 66894F13            <1>     mov word [rdi + sft.wTime], cx
   481 00003230 66895715            <1>     mov word [rdi + sft.wDate], dx
   482 00003234 31C0                <1>     xor eax, eax
   483 00003236 E904390000          <1>     jmp extGoodExit
   484                              <1> 
   485                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   486                              <1> ;Uses the clock to do it's bidding
   487                              <1> ;cx = file attribute 
   488                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   489                              <1> ;       filename
   490 0000323B 66F7C1D8FF          <1>     test cx, ~(archiveFile | systemFile | hiddenFile | readOnlyFile)
   491 00003240 740A                <1>     jz .validAttribs
   492 00003242 B805000000          <1>     mov eax, errAccDen
   493 00003247 E901390000          <1>     jmp extErrExit
   494                              <1> .validAttribs:
   495 0000324C 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   496 00003250 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   497 00003253 B933000000          <1>     mov ecx, 64-13  ;First null must be at furthest, this many chars from rdx
   498 00003258 31C0                <1>     xor eax, eax
   499 0000325A 4889D7              <1>     mov rdi, rdx
   500 0000325D F2AE                <1>     repne scasb
   501 0000325F 85C9                <1>     test ecx, ecx
   502 00003261 750A                <1>     jnz .nullFnd
   503                              <1>     ;Bad path
   504 00003263 B803000000          <1>     mov eax, errPnf
   505 00003268 E9E0380000          <1>     jmp extErrExit
   506                              <1> .nullFnd:
   507 0000326D 48FFCF              <1>     dec rdi
   508 00003270 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   509 00003274 E846350000          <1>     call swapPathSeparator
   510 00003279 7403                <1>     jz .pathsepFnd
   511                              <1>     ;If no pathsep found, force one at rdi
   512 0000327B B05C                <1>     mov al, "\"
   513 0000327D AA                  <1>     stosb
   514                              <1> .pathsepFnd:
   515 0000327E 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   516                              <1> .fileCreateLoop:
   517 00003281 55                  <1>     push rbp
   518 00003282 E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   519 00003287 5D                  <1>     pop rbp
   520 00003288 0FB7C1              <1>     movzx eax, cx
   521 0000328B 0FB7D2              <1>     movzx edx, dx
   522 0000328E C1E010              <1>     shl eax, 10h
   523 00003291 09D0                <1>     or eax, edx  ;Add the bits of dx too
   524 00003293 E831000000          <1>     call .writeNybbles
   525 00003298 31C0                <1>     xor eax, eax
   526 0000329A AA                  <1>     stosb   ;Store terminating null
   527 0000329B 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   528 0000329E 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   529 000032A1 55                  <1>     push rbp
   530 000032A2 E85C000000          <1>     call createNewFile
   531 000032A7 5D                  <1>     pop rbp
   532 000032A8 0F8391380000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   533 000032AE 0FB705(FF030000)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   534 000032B5 3D05000000          <1>     cmp eax, errAccDen
   535 000032BA 74C5                <1>     je .fileCreateLoop
   536 000032BC 3D50000000          <1>     cmp eax, errFilExist
   537 000032C1 74BE                <1>     je .fileCreateLoop
   538 000032C3 F9                  <1>     stc
   539 000032C4 E984380000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   540                              <1> .writeNybbles:
   541                              <1> ;Write the nybbles of eax at rdi
   542 000032C9 B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   543                              <1> .wnLp:
   544 000032CE C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   545 000032D1 50                  <1>     push rax
   546 000032D2 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   547 000032D7 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   548 000032DC 3D39000000          <1>     cmp eax, '9'
   549 000032E1 7605                <1>     jbe .notExtDigit
   550 000032E3 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   551                              <1> .notExtDigit:
   552 000032E8 AA                  <1>     stosb   ;Store the digit
   553 000032E9 58                  <1>     pop rax
   554 000032EA FFC9                <1>     dec ecx
   555 000032EC 75E0                <1>     jnz .wnLp
   556                              <1>     return
    13                              <2> %%_ret:
    14 000032EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   557                              <1> 
   558                              <1> .uniqueTimeGet:
   559 000032EF E827F4FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   560 000032F4 668B0D(0B050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   561 000032FB 668B15(0D050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   562                              <1>     return
    13                              <2> %%_ret:
    14 00003302 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> createNewFile:     ;ah = 5Bh
   565 00003303 51                  <1>     push rcx    ;Save file attributes on stack
   566 00003304 488D0DC3070000      <1>     lea rcx, createNewMain
   567 0000330B C605(EB060000)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
   568 00003312 E9E6F9FFFF          <1>     jmp openFileHdl.openCommon
   569                              <1> 
   570                              <1> lockUnlockFile:    ;ah = 5Ch
   571                              <1> ;ah = 5Ch
   572                              <1> ;al = subfunction
   573                              <1> ;       00h lock region of file
   574                              <1> ;       01h unlock region of file
   575                              <1> ;ebx = file handle
   576                              <1> ;ecx = start offset of region within file
   577                              <1> ;edi = length of region in bytes
   578 00003317 3C01                <1>     cmp al, 1
   579 00003319 7757                <1>     ja .badFunction
   580 0000331B 57                  <1>     push rdi
   581 0000331C E827140000          <1>     call derefSFTPtr
   582 00003321 730B                <1>     jnc .validHdl
   583 00003323 58                  <1>     pop rax ;Discard the qword on the stack
   584 00003324 B806000000          <1>     mov eax, errBadHdl
   585 00003329 E91F380000          <1>     jmp extErrExit
   586                              <1> .validHdl:
   587 0000332E 84C0                <1>     test al, al ;Check if al = 0
   588 00003330 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   589 00003331 7424                <1>     jz .lockFileRegion
   590 00003333 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   591 00003339 740B                <1>     jz .unlockShare ;Jump if a local file only
   592 0000333B 50                  <1>     push rax
   593 0000333C B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   594 00003341 CD4F                <1>     int 4Fh
   595 00003343 5B                  <1>     pop rbx
   596 00003344 EB06                <1>     jmp short .exitSelect
   597                              <1> .unlockShare:
   598 00003346 FF15(EB000000)      <1>     call qword [unlockFileShare]    ;Call share hook
   599                              <1> .exitSelect:
   600 0000334C 0F82FB370000        <1>     jc extErrExit
   601 00003352 E9E8370000          <1>     jmp extGoodExit
   602                              <1> .lockFileRegion:
   603 00003357 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   604 0000335D 740B                <1>     jz .lockShare   ;Jump if a local file only
   605 0000335F 50                  <1>     push rax
   606 00003360 B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   607 00003365 CD4F                <1>     int 4Fh
   608 00003367 5B                  <1>     pop rbx
   609 00003368 EBE2                <1>     jmp short .exitSelect
   610                              <1> .lockShare:
   611 0000336A FF15(E3000000)      <1>     call qword [lockFileShare]  ;Call share hook
   612 00003370 EBDA                <1>     jmp short .exitSelect
   613                              <1> .badFunction:
   614 00003372 B801000000          <1>     mov eax, errInvFnc
   615 00003377 668905(FF030000)    <1>     mov word [errorExCde], ax
   616 0000337E E9CA370000          <1>     jmp extErrExit
   617                              <1> 
   618                              <1> setHandleCount:    ;ah = 67h
   619                              <1> ;Input: bx = Size of new file handle table for process
   620                              <1> ;Output: CF=NC -> Ok to make more handles
   621                              <1> ;        CF=CY -> ax = Error code
   622                              <1> ;Five cases to consider:
   623                              <1> ;       1) Allocating a new block of memory, copying PSP JFT to it, inc hdl cnt
   624                              <1> ;       2) Freeing a block and returning to the PSP JFT, dec hdl cnt x
   625                              <1> ;       3) Extending an external block, inc hdl cnt. If realloc fails, goto 5)
   626                              <1> ;       4) Reducing an external block, dec hdl cnt, no realloc.
   627                              <1> ;   Special case below, cannot be enacted directly by caller.
   628                              <1> ;       5) Freeing an external block for a bigger external block, inc hdl cnt
   629 00003383 0FB7DB              <1>     movzx ebx, bx   ;Zero extend to use ebx/rbx
   630 00003386 488B2D(13040000)    <1>     mov rbp, qword [currentPSP] ;Get a ptr to the currentPSP
   631 0000338D 663B5D4E            <1>     cmp bx, word [rbp + psp.jftSize]    ;Requesting more handles than we have?
   632 00003391 7765                <1>     ja short .moreHdlsReq
   633 00003393 6681FB1400          <1>     cmp bx, dfltJFTsize ;Requesting more than the default JFT amount?
   634 00003398 771A                <1>     ja short .reduceExternal
   635                              <1>     ;Here if 20 handles or less requested
   636 0000339A 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;If this is 20 or less, exit
   637 000033A0 7728                <1>     ja short .reduceFree  ;Copying back to the JFT
   638 000033A2 7406                <1>     je short .exitGood    ;Else we are already in the PSP
   639 000033A4 66C7454E1400        <1>     mov word [rbp + psp.jftSize], dfltJFTsize   ;Else, replace with dflt
   640                              <1> .exitGood:
   641 000033AA E990370000          <1>     jmp extGoodExit
   642                              <1> .exitBad:
   643 000033AF E999370000          <1>     jmp extErrExit
   644                              <1> .reduceExternal:
   645                              <1> ;We try to reallocate the block to be more appropriate for the new maxhdls.
   646                              <1> ;If it fails, no big deal since we manually prevent the user from using more
   647                              <1> ; files. If we then grow this block again, realloc will try to grow it again
   648                              <1> ; and failing that, it will free it and then allocate a new block.
   649 000033B4 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   650 000033B8 E8E8000000          <1>     call .checkOpenHandles
   651 000033BD 72F0                <1>     jc short .exitBad
   652                              <1>     ;Recall ebx has the numebr of handles here
   653 000033BF E890000000          <1>     call .reallocBlock  ;Try realloc size to be more ok. If it fails, no biggie
   654 000033C4 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Store new handle cnt
   655 000033C8 EBE0                <1>     jmp short .exitGood
   656                              <1> .reduceFree:
   657                              <1> ;Entered once we know that we have an external block
   658                              <1> ;Now we close all handles above JFT size
   659 000033CA 488D7D2A            <1>     lea rdi, qword [rbp + psp.externalJFTPtr]   ;Get destination
   660 000033CE 488B37              <1>     mov rsi, qword [rdi]    ;Get source 
   661 000033D1 E8CF000000          <1>     call .checkOpenHandles
   662 000033D6 72D7                <1>     jc short .exitBad
   663 000033D8 BB14000000          <1>     mov ebx, dfltJFTsize
   664 000033DD 89D9                <1>     mov ecx, ebx    ;Move count of handles into ecx
   665                              <1> ;No open handles in range to be freed, now we copy the first 20 handles over
   666 000033DF E8B8000000          <1>     call .copyBlock
   667                              <1>     ;Now we can free the old block
   668 000033E4 4989F0              <1>     mov r8, rsi
   669 000033E7 53                  <1>     push rbx
   670 000033E8 E8621B0000          <1>     call freeMemory
   671 000033ED 5B                  <1>     pop rbx
   672 000033EE 72BF                <1>     jc short .exitBad
   673 000033F0 66895D4E            <1>     mov word [rbp + psp.jftSize], bx   ;Now we have dflt number of hdls
   674 000033F4 31C0                <1>     xor eax, eax
   675                              <1> .exitGood2:
   676 000033F6 EBB2                <1>     jmp short .exitGood
   677                              <1> .moreHdlsReq:
   678 000033F8 81FBFFFF0000        <1>     cmp ebx, 0FFFFh ;HARD LIMIT ON NUMBER OF HANDLES IS (WORD)-1
   679 000033FE 7507                <1>     jne short .okToExpand
   680 00003400 B801000000          <1>     mov eax, errInvFnc
   681                              <1> .exitBad2:
   682 00003405 EBA8                <1>     jmp short .exitBad
   683                              <1> .okToExpand:
   684                              <1> ;Need to check if we are external and reallocating. 
   685                              <1> ;   If we are, can we realloc or do we need to free and save?
   686 00003407 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;Are we in JFT?
   687 0000340D 762E                <1>     jbe short .moreFromJFT
   688 0000340F 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   689 00003413 E83C000000          <1>     call .reallocBlock
   690 00003418 7390                <1>     jnc short .exitGood
   691 0000341A E84D000000          <1>     call .getBlock  ;rsi is preserved across the call
   692 0000341F 728E                <1>     jc short .exitBad
   693 00003421 4989F0              <1>     mov r8, rsi ;Free the source block
   694 00003424 53                  <1>     push rbx
   695 00003425 57                  <1>     push rdi    ;Save the new pointer here
   696 00003426 55                  <1>     push rbp
   697 00003427 E8231B0000          <1>     call freeMemory
   698 0000342C 5D                  <1>     pop rbp
   699 0000342D 5F                  <1>     pop rdi
   700 0000342E 5B                  <1>     pop rbx
   701 0000342F 7317                <1>     jnc short .freeOk ;Free'd the original block
   702 00003431 50                  <1>     push rax    ;Save error code on stack
   703 00003432 4989F8              <1>     mov r8, rdi ;Free the new block
   704 00003435 E8151B0000          <1>     call freeMemory
   705 0000343A 58                  <1>     pop rax
   706 0000343B EBC8                <1>     jmp short .exitBad2
   707                              <1> .moreFromJFT:
   708 0000343D 488D752A            <1>     lea rsi, qword [rbp + psp.jobFileTbl]   ;Get the ptr to the current JFT
   709 00003441 E826000000          <1>     call .getBlock
   710 00003446 72BD                <1>     jc short .exitBad2
   711                              <1> .freeOk:
   712 00003448 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Set the new count
   713 0000344C 48897D2A            <1>     mov qword [rbp + psp.externalJFTPtr], rdi
   714 00003450 31C0                <1>     xor eax, eax
   715 00003452 EBA2                <1>     jmp short .exitGood2
   716                              <1> .reallocBlock:
   717                              <1> ;Input:
   718                              <1> ;   rsi -> Source block to reallocate
   719                              <1> ;   ebx = Number of handles
   720                              <1> ;   rbp -> Current PSP
   721                              <1> ;Output: CF=NC => rsi -> Source block reallocated in size
   722                              <1> ;                 ebx = Number of handles
   723                              <1> ;        CF=CY => Error, EAX has error code
   724 00003454 56                  <1>     push rsi ;Save external pointer on stack
   725 00003455 53                  <1>     push rbx    ;Save number of handles on stack
   726 00003456 55                  <1>     push rbp
   727 00003457 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   728 0000345D C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   729 00003460 4989F0              <1>     mov r8, rsi
   730 00003463 E8EF1B0000          <1>     call reallocMemory
   731 00003468 5D                  <1>     pop rbp
   732 00003469 5B                  <1>     pop rbx
   733 0000346A 5E                  <1>     pop rsi ;Get external pointer back in rsi
   734                              <1>     return
    13                              <2> %%_ret:
    14 0000346B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   735                              <1> .getBlock:
   736                              <1> ;rsi -> Source block for copy 
   737                              <1> ;ebx = Number of new handles
   738                              <1> ;Output: rsi and ebx as before
   739                              <1> ;        rdi -> New block
   740                              <1> ;IF CF=CY, bad exit
   741 0000346C 53                  <1>     push rbx    ;bx has the number of handles we want
   742 0000346D 56                  <1>     push rsi
   743 0000346E 55                  <1>     push rbp
   744 0000346F 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   745 00003475 C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   746 00003478 89D9                <1>     mov ecx, ebx
   747 0000347A C1E104              <1>     shl ecx, 4  ;Get bytes being allocated
   748 0000347D 51                  <1>     push rcx    ;Save the actual number of bytes in the alloc
   749 0000347E E8C8180000          <1>     call allocateMemory ;Allocate memory 
   750 00003483 59                  <1>     pop rcx ;Get back actual number of bytes allocated
   751 00003484 5D                  <1>     pop rbp ;Get the PSP pointer back
   752 00003485 5E                  <1>     pop rsi ;Get the source pointer back
   753 00003486 5B                  <1>     pop rbx ;Get the number of handles to allocate back
   754                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003487 72E2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   755 00003489 4889C7              <1>     mov rdi, rax    ;Move the ptr of the new block to rdi
   756 0000348C 57                  <1>     push rdi
   757 0000348D 31C0                <1>     xor eax, eax
   758 0000348F FFC8                <1>     dec eax
   759 00003491 F3AA                <1>     rep stosb   ;Setup the new memory block with all -1's
   760 00003493 5F                  <1>     pop rdi
   761 00003494 89D9                <1>     mov ecx, ebx    ;Get the new number of handles to copy over
   762 00003496 E801000000          <1>     call .copyBlock ;Copy all the handles over
   763                              <1>     return
    13                              <2> %%_ret:
    14 0000349B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   764                              <1> .copyBlock:
   765                              <1> ;Input: rsi -> Source block
   766                              <1> ;       rdi -> Destination block
   767                              <1> ;       ecx = Number of handles to copy
   768 0000349C 56                  <1>     push rsi
   769 0000349D 57                  <1>     push rdi
   770 0000349E 51                  <1>     push rcx
   771 0000349F F3A4                <1>     rep movsb
   772 000034A1 59                  <1>     pop rcx
   773 000034A2 5F                  <1>     pop rdi
   774 000034A3 5E                  <1>     pop rsi
   775                              <1>     return
    13                              <2> %%_ret:
    14 000034A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   776                              <1> .checkOpenHandles:
   777                              <1> ;Checks for open handles in the range that is to be freed.
   778                              <1> ;If any found, error exit
   779                              <1> ;Input: rsi -> Where to start searching
   780 000034A5 56                  <1>     push rsi
   781 000034A6 0FB74D4E            <1>     movzx ecx, word [rbp + psp.jftSize] 
   782                              <1> .cohLoop:
   783 000034AA 803EFF              <1>     cmp byte [rsi], -1
   784 000034AD 7509                <1>     jne .checkOpenHandlesBadExit
   785 000034AF 48FFC6              <1>     inc rsi
   786 000034B2 FFC9                <1>     dec ecx
   787 000034B4 75F4                <1>     jnz .cohLoop
   788 000034B6 5E                  <1>     pop rsi
   789                              <1>     return
    13                              <2> %%_ret:
    14 000034B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   790                              <1> .checkOpenHandlesBadExit:
   791 000034B8 B804000000          <1>     mov eax, errNhl
   792 000034BD F9                  <1>     stc
   793 000034BE 5E                  <1>     pop rsi
   794                              <1>     return
    13                              <2> %%_ret:
    14 000034BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   795                              <1> 
   796                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   797                              <1>     ;Input: bx = File to flush
   798 000034C0 E869120000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   799 000034C5 0F8282360000        <1>     jc extErrExit
   800 000034CB E8B7100000          <1>     call setCurrentSFT  ;Set as current SFT to ensure it is committed
   801                              <1>     ;Now we check if the device is a char, disk or net file and commit
   802 000034D0 E811000000          <1>     call commitMain
   803 000034D5 0F8272360000        <1>     jc extErrExit   ;If an error occured, exit with error code in al
   804                              <1> .exitOk:
   805 000034DB 30C0                <1>     xor al, al
   806 000034DD E8C3310000          <1>     call getUserRegs
   807 000034E2 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   808                              <1>     return
    13                              <2> %%_ret:
    14 000034E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   809                              <1> 
   810                              <1> ;-----------------------------------:
   811                              <1> ;       Main File IO Routines       :
   812                              <1> ;-----------------------------------:
   813                              <1> commitMain:
   814                              <1> ;Commits the current SFT 
   815 000034E6 E8A4100000          <1>     call getCurrentSFT  ;Gets currentSFT into rdi
   816 000034EB 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   817 000034EF A9C0000000          <1>     test eax, devCharDev | blokFileNoFlush
   818                              <1>     retnz   ;Return if nothing has been written or a char dev
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000034F4 75EF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   819 000034F6 66A90080            <1>     test ax, devRedirDev
   820 000034FA 7508                <1>     jnz .notNet
   821                              <1>     ;Commit file net redir call and exit
   822 000034FC B807110000          <1>     mov eax, 1107h
   823 00003501 CD4F                <1>     int 4Fh
   824                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 00003503 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   825                              <1> .notNet:
   826 00003504 E8F9350000          <1>     call dosCrit1Enter
   827 00003509 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   828 0000350D E8FE300000          <1>     call setWorkingDPB
   829 00003512 E86EE6FFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   830 00003517 7205                <1>     jc short .exit    ;Return in error if this fails, exit critical
   831 00003519 E85BD2FFFF          <1>     call flushFile  ;Now the file gets flushed
   832                              <1> .exit:
   833                              <1> ;Propagate CF and AL if needed due to error
   834 0000351E E8E9350000          <1>     call dosCrit1Exit
   835                              <1>     return
    13                              <2> %%_ret:
    14 00003523 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   836                              <1> renameMain:
   837                              <1> ;Now, creates a special find first block for the source file
   838                              <1> ; that is in curDirCopy. Then we build a search pattern for the new name, 
   839                              <1> ; following wildcard rules sourcing from the filespec in the special find first 
   840                              <1> ; block. 
   841                              <1> ;Then we search for that file name specifically (again), replacing 
   842                              <1> ; the filename portion of the destination buffer. If it exists or the 
   843                              <1> ; filename is a char device, we crap out. If it doesnt exist, we create
   844                              <1> ; the new directory entry and delete the original file. 
   845                              <1> ;Input:
   846                              <1> ; filenamePtr1 -> Source path + filename pattern
   847                              <1> ; filenamePtr2 -> New path + filename pattern
   848                              <1> ; workingCDS -> CDS for drive we are considering (set by )
   849 00003524 488B3D(01070000)    <1>     mov rdi, qword [workingCDS]
   850 0000352B E8E8300000          <1>     call testCDSNet ;CF=NC => Not net
   851 00003530 7308                <1>     jnc .notNet
   852 00003532 B811110000          <1>     mov eax, 1111h
   853 00003537 CD4F                <1>     int 4Fh
   854                              <1>     return
    13                              <2> %%_ret:
    14 00003539 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   855                              <1> .notNet:
   856                              <1> ;First check if both drives are on the same disk
   857 0000353A 8A05(11050000)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
   858 00003540 8A25(91050000)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
   859 00003546 38E0                <1>     cmp al, ah
   860 00003548 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
   861 0000354A B811000000          <1>     mov eax, errDevUnk
   862 0000354F F9                  <1>     stc
   863                              <1>     return
    13                              <2> %%_ret:
    14 00003550 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   864                              <1> .sameDrive:
   865                              <1> ;Now we check if either pathsepc is simply X:\,0
   866                              <1> ; If they are, return fail as we cannot rename the root dir
   867 00003551 E8AC350000          <1>     call dosCrit1Enter
   868 00003556 8B05(11050000)      <1>     mov eax, dword [buffer1]
   869 0000355C 30C0                <1>     xor al, al
   870 0000355E 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
   871 00003563 750B                <1>     jne .checkpath2
   872                              <1> .accDen:
   873 00003565 B805000000          <1>     mov eax, errAccDen
   874                              <1> .errorExit:
   875 0000356A F9                  <1>     stc
   876 0000356B E9EE020000          <1>     jmp .exit2
   877                              <1> .checkpath2:
   878 00003570 8B05(91050000)      <1>     mov eax, dword [buffer2]
   879 00003576 30C0                <1>     xor al, al
   880 00003578 3D003A5C00          <1>     cmp eax, 005C3A00h
   881 0000357D 74E6                <1>     je .accDen  ;If this is the root, exit access denied
   882                              <1> ;Now we find first the source file
   883 0000357F 488B35(11060000)    <1>     mov rsi, qword [fname1Ptr]
   884 00003586 4889F7              <1>     mov rdi, rsi
   885 00003589 C605(EB060000)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   886 00003590 E866DAFFFF          <1>     call getFilePathNoCanon    ;Get the path for the file to delete
   887 00003595 0F82C3020000        <1>     jc .exit2    ;Return with CF=CY if file doesn't exist
   888 0000359B 488D35(4D060000)    <1>     lea rsi, curDirCopy
   889 000035A2 488D3D(B1070000)    <1>     lea rdi, renameDir
   890 000035A9 B904000000          <1>     mov ecx, fatDirEntry_size/8
   891 000035AE F348A5              <1>     rep movsq   ;Copy directory over
   892 000035B1 488D3D(86070000)    <1>     lea rdi, renameFFBlk
   893 000035B8 E868D9FFFF          <1>     call setupFFBlock   ;Need this to save the dir entry cluster/sector/offset 
   894                              <1>     ;Now we check this path, if it is a DIR, ensure it is not the current
   895                              <1>     ; dir for any CDS.
   896 000035BD F605(58060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
   897 000035C4 7543                <1>     jnz .notDirCheck
   898 000035C6 488B3D(11060000)    <1>     mov rdi, qword [fname1Ptr]
   899 000035CD 57                  <1>     push rdi
   900 000035CE E82A320000          <1>     call strlen ;Get asciiz length in ecx
   901 000035D3 5B                  <1>     pop rbx
   902 000035D4 FFC9                <1>     dec ecx ;Get one less char to check, we check the last one manually
   903 000035D6 488B35(59000000)    <1>     mov rsi, qword [cdsHeadPtr]
   904 000035DD 0FB615(6C000000)    <1>     movzx edx, byte [lastdrvNum]
   905                              <1> .dirCheck:
   906 000035E4 4889DF              <1>     mov rdi, rbx
   907 000035E7 56                  <1>     push rsi    ;Save rsi pointing to the start of the CDS
   908 000035E8 F3A6                <1>     repe cmpsb  ;Compare while they are equal
   909 000035EA AC                  <1>     lodsb   ;Get the last char to check in al
   910 000035EB 5E                  <1>     pop rsi ;Put rsi back to the start of the string
   911 000035EC 7510                <1>     jne .neqDir
   912 000035EE 3C5C                <1>     cmp al, "\" ;Check the last char manually for pathend
   913 000035F0 0F846FFFFFFF        <1>     je .accDen
   914 000035F6 84C0                <1>     test al, al
   915 000035F8 0F8467FFFFFF        <1>     je .accDen
   916                              <1> .neqDir:
   917 000035FE 4881C65B000000      <1>     add rsi, cds_size   ;Goto next CDS
   918 00003605 FFCA                <1>     dec edx
   919 00003607 75DB                <1>     jnz .dirCheck
   920                              <1> .notDirCheck:
   921                              <1>     ;Now use FFBlock to temp swap out the filename with the source pattern
   922 00003609 B9FFFFFFFF          <1>     mov ecx, -1    ;Just a large number to search
   923 0000360E 31C0                <1>     xor eax, eax
   924 00003610 488B3D(11060000)    <1>     mov rdi, qword [fname1Ptr]
   925 00003617 F2AE                <1>     repne scasb   ;Search for terminating null
   926 00003619 FD                  <1>     std ;Go backwards now, to find the path sep
   927 0000361A B05C                <1>     mov al, "\"
   928 0000361C F2AE                <1>     repne scasb   ;Now rsi points one before
   929 0000361E FC                  <1>     cld ;Go normal ways now
   930 0000361F 4881C702000000      <1>     add rdi, 2  ;Goto first char of pathname
   931 00003626 57                  <1>     push rdi
   932 00003627 4889FE              <1>     mov rsi, rdi
   933 0000362A 488D3D(D4060000)    <1>     lea rdi, wcdFcbName
   934 00003631 E867D8FFFF          <1>     call asciiToFCB ;Copy the search pattern to wcdFcbName
   935 00003636 5F                  <1>     pop rdi
   936 00003637 57                  <1>     push rdi    ;Save rdi on stack again
   937 00003638 488D35(A4070000)    <1>     lea rsi, qword [renameFFBlk + ffBlock.asciizName]
   938                              <1>     ;Copy the asciiz name (including terminating null) to pathspec
   939 0000363F 48A5                <1>     movsq
   940 00003641 A5                  <1>     movsd
   941 00003642 A4                  <1>     movsb   ;This is a terminating null if a full 8.3 filename
   942 00003643 5F                  <1>     pop rdi ;rdi points to first char position
   943 00003644 E865020000          <1>     call checkNoOpenHandlesForShareAction   ;Now do this, all regs saved!
   944 00003649 0F821BFFFFFF        <1>     jc .errorExit   ;Propagate the share error code
   945                              <1>     ;Else return the pattern back to its original position
   946 0000364F 488D35(D4060000)    <1>     lea rsi, wcdFcbName ;rsi -> FCBified pattern, rdi -> First char for name
   947 00003656 E88AD8FFFF          <1>     call FCBToAsciiz
   948                              <1>     ;Delete the original directory entry
   949 0000365B 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift] 
   950 0000365F FFC1                <1>     inc ecx ;Get sectors/cluster in ecx
   951 00003661 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   952 00003665 F7E1                <1>     mul ecx ;Get bytes per cluster in eax
   953 00003667 8B0D(93070000)      <1>     mov ecx, dword [renameFFBlk + ffBlock.dirOffset] ;32 byte offset in cluster
   954 0000366D C1E105              <1>     shl ecx, 5  ;Get byte offset in cluster
   955 00003670 91                  <1>     xchg ecx, eax
   956 00003671 F7F1                <1>     div ecx ;Get Sector in cluster in eax and sector offset in edx
   957 00003673 89C3                <1>     mov ebx, eax
   958 00003675 8B05(73070000)      <1>     mov eax, dword [dirClustA]  ;Get the current dir cluster, not start cluster
   959 0000367B E8BBD1FFFF          <1>     call getStartSectorOfCluster    ;Cluster number in eax, sector in rax
   960 00003680 4801D8              <1>     add rax, rbx    ;Goto the sector for the cluster
   961 00003683 E898D0FFFF          <1>     call getBufForDirNoFile ;Get buffer pointer in rbx
   962 00003688 0F82DB010000        <1>     jc .badExit
   963 0000368E 488D741330          <1>     lea rsi, qword [rbx + bufferHdr.dataarea + rdx] ;Goto byte offset in sector
   964                              <1>     ;rsi points to the file entry
   965 00003693 8A05(F7060000)      <1>     mov al, byte [delChar]
   966 00003699 8806                <1>     mov byte [rsi], al
   967 0000369B E8F5CEFFFF          <1>     call markBufferDirty    ;Set this buffer as having been written to now
   968                              <1> 
   969                              <1>     ;Now we use the destination filename pattern to build the new filename
   970 000036A0 488B3D(19060000)    <1>     mov rdi, qword [fname2Ptr]  ;Get the destination path ptr in rdi
   971 000036A7 31C0                <1>     xor eax, eax
   972 000036A9 B943000000          <1>     mov ecx, 67
   973 000036AE F2AE                <1>     repne scasb   ;Find the null terminator of the destination path
   974                              <1> .findPattern:
   975 000036B0 48FFCF              <1>     dec rdi
   976 000036B3 803F5C              <1>     cmp byte [rdi], "\" ;Is this a pathsep?
   977 000036B6 75F8                <1>     jne .findPattern
   978                              <1> ;rdi points to the pathseparator, unless it is the root pathsep
   979 000036B8 C605(ED060000)00    <1>     mov byte [fileFDflg], 0 ;Clear this byte
   980 000036BF 807FFF3A            <1>     cmp byte [rdi - 1], ":"
   981 000036C3 750D                <1>     jne .notRoot
   982                              <1>     ;The root dir always exists on a volume so can skip the check.
   983 000036C5 48FFC7              <1>     inc rdi ;Goto the first char of the filename
   984 000036C8 57                  <1>     push rdi
   985 000036C9 800D(ED060000)02    <1>     or byte [fileFDflg], 2  ;Bit 2 means ROOT DIR FILE
   986 000036D0 EB29                <1>     jmp short .skipCheck
   987                              <1> .notRoot:
   988 000036D2 AA                  <1>     stosb   ;Store a null over the "\" and inc rdi to char one of pattern
   989 000036D3 57                  <1>     push rdi    ;Push the new name pattern portion ptr in var
   990                              <1>     ;Now check if the parent directory exists for the destination
   991 000036D4 57                  <1>     push rdi    ;Save the ptr to the first char of the pathsep
   992 000036D5 FF35(11060000)      <1>     push qword [fname1Ptr]  ;Preserve original source buffer
   993 000036DB 488D35(91050000)    <1>     lea rsi, buffer2
   994 000036E2 4889F7              <1>     mov rdi, rsi
   995 000036E5 E80AD9FFFF          <1>     call getDirPathNoCanon ;We are searching for a directory ONLY
   996 000036EA 8F05(11060000)      <1>     pop qword [fname1Ptr]
   997 000036F0 5F                  <1>     pop rdi
   998 000036F1 0F8272010000        <1>     jc .badExit    ;Error if the parent dir doesnt exist
   999 000036F7 C647FF5C            <1>     mov byte [rdi - 1], "\" ;Replace the pathseparator
  1000                              <1> .skipCheck:
  1001                              <1>     ;rdi now points to the first char of the pattern
  1002 000036FB 4889FE              <1>     mov rsi, rdi
  1003 000036FE 488D3D(D4060000)    <1>     lea rdi, wcdFcbName
  1004 00003705 E893D7FFFF          <1>     call asciiToFCB ;Convert the asciiz name to FCB format
  1005                              <1>     ;Ensure the destination pattern is not all question marks
  1006 0000370A 813D(D4060000)3F3F- <1>     cmp dword [wcdFcbName], "????"
  1006 00003712 3F3F                <1>
  1007 00003714 7524                <1>     jne .validRenPattern
  1008 00003716 813D(D8060000)3F3F- <1>     cmp dword [wcdFcbName + 4], "????"
  1008 0000371E 3F3F                <1>
  1009 00003720 7518                <1>     jne .validRenPattern
  1010 00003722 66813D(DC060000)3F- <1>     cmp word [wcdFcbName + 8], "??"
  1010 0000372A 3F                  <1>
  1011 0000372B 750D                <1>     jne .validRenPattern
  1012 0000372D 803D(DE060000)3F    <1>     cmp byte [wcdFcbName + 10], "?"
  1013 00003734 0F842A010000        <1>     je .bad ;Access denied buddy ol' pal
  1014                              <1> .validRenPattern:
  1015                              <1>     ;curDirCopy has information for the destination directory file we will 
  1016                              <1>     ; write to. The cluster points to the directory file itself to search in
  1017                              <1>     ;Each filename we create must be searched for to ensure it doesnt exist
  1018                              <1>     ;Make new fname in fcbName from asciizname in renameDir
  1019 0000373A 488D35(B1070000)    <1>     lea rsi, renameDir  ;Copy the source filename over
  1020 00003741 488D3D(C8060000)    <1>     lea rdi, fcbName
  1021 00003748 57                  <1>     push rdi    ;Preserve this as the destination for copy
  1022 00003749 B90B000000          <1>     mov ecx, 11
  1023 0000374E F3A4                <1>     rep movsb
  1024 00003750 5F                  <1>     pop rdi
  1025 00003751 488D35(D4060000)    <1>     lea rsi, wcdFcbName ;Now source the chars from here
  1026                              <1> .mnnLp:
  1027 00003758 AC                  <1>     lodsb
  1028 00003759 3C3F                <1>     cmp al, "?" ;Is it a wc?
  1029 0000375B 7404                <1>     je .mnnWC   ;Skip overriding this char
  1030 0000375D AA                  <1>     stosb   ;Store new char and go forwards by one
  1031 0000375E 48FFCF              <1>     dec rdi ;Now go back by one
  1032                              <1> .mnnWC:
  1033 00003761 48FFC7              <1>     inc rdi ;Goto next letter
  1034 00003764 FFC1                <1>     inc ecx
  1035 00003766 81F90B000000        <1>     cmp ecx, 11
  1036 0000376C 75EA                <1>     jne .mnnLp
  1037 0000376E 488D35(C8060000)    <1>     lea rsi, fcbName
  1038 00003775 488D3D(B1070000)    <1>     lea rdi, renameDir
  1039 0000377C B90B000000          <1>     mov ecx, 11
  1040 00003781 F3A4                <1>     rep movsb   ;Move the name over from fcbName to new dir entry name field
  1041 00003783 5F                  <1>     pop rdi ;Get the first char of the filename place in destination pathspec
  1042 00003784 57                  <1>     push rdi    ;Push it on stack again to be reused later if a WC spec
  1043 00003785 488D35(C8060000)    <1>     lea rsi, fcbName
  1044 0000378C E854D7FFFF          <1>     call FCBToAsciiz    ;Copy the name over to asciiz 
  1045 00003791 488B35(19060000)    <1>     mov rsi, qword [fname2Ptr]
  1046 00003798 4889F7              <1>     mov rdi, rsi
  1047 0000379B E85BD8FFFF          <1>     call getFilePathNoCanon    ;This must be a non-existant file
  1048 000037A0 0F83C3000000        <1>     jnc .badExit   ;If the file exists, then error
  1049 000037A6 3D02000000          <1>     cmp eax, errFnf ;If Fnf error then we may proceed
  1050 000037AB 0F85B8000000        <1>     jne .badExit
  1051                              <1>     ;Now we search the parent dir (the curDirCopy dir) for free space
  1052                              <1>     ;If the parent is root, deal with special case
  1053 000037B1 488D1D(4D060000)    <1>     lea rbx, curDirCopy
  1054 000037B8 F605(ED060000)02    <1>     test byte [fileFDflg], 2
  1055 000037BF C605(ED060000)00    <1>     mov byte [fileFDflg], 0 ;Clear the flag again
  1056 000037C6 7416                <1>     jz .notRoot2
  1057 000037C8 488D35(C8060000)    <1>     lea rsi, fcbName
  1058 000037CF 488D3D(4D060000)    <1>     lea rdi, curDirCopy
  1059 000037D6 48A5                <1>     movsq
  1060 000037D8 A5                  <1>     movsd
  1061 000037D9 A4                  <1>     movsb
  1062 000037DA 31C0                <1>     xor eax, eax    ;Dir to search
  1063 000037DC EB13                <1>     jmp short .getSpace
  1064                              <1> .notRoot2:
  1065 000037DE 0FB715(61060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
  1066 000037E5 0FB705(67060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
  1067 000037EC C1E210              <1>     shl edx, 10h
  1068 000037EF 09D0                <1>     or eax, edx ;Get first cluster of dir file in eax
  1069                              <1> .getSpace:
  1070 000037F1 E87C000000          <1>     call .searchForDirSpace
  1071 000037F6 726C                <1>     jc .bad
  1072                              <1> ;dir Entry found, rsi points to space in buffer
  1073 000037F8 4889F7              <1>     mov rdi, rsi
  1074 000037FB 488D35(B1070000)    <1>     lea rsi, renameDir
  1075 00003802 B904000000          <1>     mov ecx, fatDirEntry_size/8
  1076 00003807 F348A5              <1>     rep movsq   ;Copy dir over
  1077 0000380A E886CDFFFF          <1>     call markBufferDirty ;Mark buffer as written to now
  1078                              <1>     ;Now we check if source filename or wcdFcbname has a wildcard
  1079                              <1>     ;If it does, we find next. If not, we exit
  1080 0000380F B03F                <1>     mov al, "?"
  1081 00003811 488B3D(11060000)    <1>     mov rdi, qword [fname1Ptr]  ;Check filename
  1082 00003818 E8E02F0000          <1>     call strlen ;Get in rcx to get the length of the string
  1083 0000381D F2AE                <1>     repne scasb
  1084 0000381F 7535                <1>     jne .exit  ;If source name has no wildcards, exit
  1085 00003821 B90B000000          <1>     mov ecx, 11
  1086 00003826 488D3D(D4060000)    <1>     lea rdi, wcdFcbName
  1087 0000382D F2AE                <1>     repne scasb
  1088 0000382F 7525                <1>     jne .exit
  1089                              <1>     ;Here we gotta do a find next now!
  1090 00003831 FF35(0B040000)      <1>     push qword [currentDTA]
  1091 00003837 488D3D(86070000)    <1>     lea rdi, renameFFBlk
  1092 0000383E 48893D(0B040000)    <1>     mov qword [currentDTA], rdi ;Set renameFFBlk as currentDTA for operation
  1093 00003845 E859D3FFFF          <1>     call findNextMain
  1094 0000384A 8F05(0B040000)      <1>     pop qword [currentDTA]
  1095 00003850 0F83E4FEFFFF        <1>     jnc .validRenPattern    ;If this is ok, now find next file
  1096                              <1>     ;Else propagate the CF if this ends with an error (inc no more files)
  1097                              <1> .exit:
  1098 00003856 5F                  <1>     pop rdi ;Pop the ptr to the dest pathspec ptr off stack
  1099 00003857 E807CDFFFF          <1>     call writeThroughBuffers
  1100 0000385C 720B                <1>     jc .badExit
  1101                              <1> .exit2: ;Bad exit before we push qword on stack 
  1102 0000385E E8A9320000          <1>     call dosCrit1Exit
  1103                              <1>     return
    13                              <2> %%_ret:
    14 00003863 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1104                              <1> .bad:
  1105 00003864 B805000000          <1>     mov eax, errAccDen  ;Temp return code
  1106                              <1> .badExit:
  1107 00003869 E8BECCFFFF          <1>     call cancelWriteThroughBuffers
  1108 0000386E F9                  <1>     stc
  1109 0000386F 5F                  <1>     pop rdi
  1110 00003870 EBEC                <1>     jmp short .exit2
  1111                              <1> 
  1112                              <1> .searchForDirSpace:
  1113                              <1> ;Input: eax = First directory to search 
  1114 00003872 8905(73070000)      <1>     mov dword [dirClustA], eax
  1115 00003878 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1116 0000387A 668905(77070000)    <1>     mov word [dirSect], ax
  1117 00003881 8905(79070000)      <1>     mov dword [dirEntry], eax
  1118 00003887 E86CE2FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1119 0000388C 731C                <1>     jnc .dirEntryFnd
  1120 0000388E 813D(6F070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1120 00003896 0000                <1>
  1121 00003898 7412                <1>     je .searchBad ;Set CF and exit
  1122 0000389A E8A3E3FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1123 0000389F 720B                <1>     jc .searchBad
  1124 000038A1 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1125 000038A6 7404                <1>     je .searchBad
  1126                              <1>     ;Else eax = Newly allocated cluster
  1127 000038A8 EBC8                <1>     jmp short .searchForDirSpace
  1128                              <1> .dirEntryFnd:
  1129 000038AA F8                  <1>     clc
  1130                              <1>     return
    13                              <2> %%_ret:
    14 000038AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1131                              <1> .searchBad:
  1132 000038AC F9                  <1>     stc
  1133                              <1>     return
    13                              <2> %%_ret:
    14 000038AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1134                              <1> 
  1135                              <1> 
  1136                              <1> checkNoOpenHandlesForShareAction:
  1137                              <1> ;We check that we can proceed. This function will fail IF there are handles
  1138                              <1> ; open, and thus makes it an ideal candidate for checking in RENAME, for 
  1139                              <1> ; both filenames, DELETE and SETFILEATTRIBS if we have any open files. If we
  1140                              <1> ; do, then we should get a Share error and thus it would prevent us from 
  1141                              <1> ; proceeding.
  1142                              <1> ;
  1143                              <1> ;If SHARE not loaded, ALL handles must be closed before Rename or Delete.
  1144                              <1> ;Input: SDA fname1Ptr -> Filename we want to consider
  1145                              <1> ;       currDirCopy = Directory entry for the file
  1146 000038AE E838320000          <1>     call dosPushRegs    ;Save the context completely
  1147 000038B3 803D(B3000000)00    <1>     cmp byte [openFileCheck], 0 ;Some 16-bit SHAREs set the marker to 0.
  1148 000038BA 740C                <1>     jz .noOpenFileCheckHandler
  1149 000038BC FF15(B3000000)      <1>     call qword [openFileCheck]
  1150 000038C2 7204                <1>     jc .noOpenFileCheckHandler  ;If CF=CY, this function not defined
  1151 000038C4 7449                <1>     jz .exit    ;If CF=NC && ZF=ZE, Function defined and No open files, proceed.
  1152 000038C6 EB4E                <1>     jmp short .errorMain    ;If ZF=NZ -> Have some open files, error out!
  1153                              <1> .noOpenFileCheckHandler:
  1154                              <1>     ;The following closes most recent shared handles referencing it
  1155                              <1>     ;Only if sharePSP, shareMachineNumber are equal and openMode not Compat
  1156                              <1>     ; mode and if there is precisely 1  
  1157 000038C8 FF15(1B010000)      <1>     call qword [closeNewHdlShare]    
  1158                              <1>     ;The close of the handle will only happen if there is 1 file referring to it
  1159 000038CE 488D3D(080D0000)    <1>     lea rdi, scratchSFT
  1160 000038D5 48893D(21070000)    <1>     mov qword [currentSFT], rdi
  1161 000038DC B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1162 000038E1 C605(F6060000)00    <1>     mov byte [openCreate], 0    ;Make sure we are just opening the file
  1163                              <1>     ;This is to avoid needing to put the file attributes on the stack
  1164 000038E8 57                  <1>     push rdi
  1165 000038E9 E884020000          <1>     call buildSFTEntry
  1166 000038EE 5F                  <1>     pop rdi
  1167 000038EF 7225                <1>     jc .errorMain
  1168 000038F1 66C7070100          <1>     mov word [rdi + sft.wNumHandles], 1   ;One "reference"
  1169 000038F6 66C747021000        <1>     mov word [rdi + sft.wOpenMode], denyRWShare ;Prevent everything temporarily
  1170 000038FC 57                  <1>     push rdi
  1171 000038FD E8D2390000          <1>     call shareFile
  1172 00003902 5F                  <1>     pop rdi
  1173 00003903 7211                <1>     jc .errorMain
  1174 00003905 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0
  1175 0000390A E85C390000          <1>     call closeShareCallWrapper
  1176                              <1> .exit:
  1177 0000390F E8C0310000          <1>     call dosPopRegs
  1178 00003914 F8                  <1>     clc
  1179                              <1>     return
    13                              <2> %%_ret:
    14 00003915 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1180                              <1> .errorMain:
  1181 00003916 E8B9310000          <1>     call dosPopRegs
  1182 0000391B B820000000          <1>     mov eax, errShrVio  ;Share issue so return failed with share
  1183 00003920 F9                  <1>     stc
  1184                              <1>     return
    13                              <2> %%_ret:
    14 00003921 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1185                              <1> 
  1186                              <1> outerDeleteMain:
  1187                              <1> ;Internal current dir must be populated with dir entry
  1188                              <1> ; and internal DOS directory variables now point to this entry.
  1189                              <1> ;Checks if the file is a char device or read only.
  1190                              <1> ;Input: curDirCopy must has dir for the file to be deleted
  1191                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
  1192                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
  1193                              <1> ;         CF=NC => File deleted
  1194 00003922 488B3D(01070000)    <1>     mov rdi, qword [workingCDS]
  1195 00003929 E8EA2C0000          <1>     call testCDSNet ;CF=NC => Not net
  1196 0000392E 7308                <1>     jnc .notNet
  1197 00003930 B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
  1198 00003935 CD4F                <1>     int 4Fh
  1199                              <1>     return
    13                              <2> %%_ret:
    14 00003937 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1200                              <1> .notNet:
  1201 00003938 B805000000          <1>     mov eax, errAccDen  
  1202 0000393D F605(58060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
  1203 00003944 754F                <1>     jnz .exitBad  ;Can't delete a char dev
  1204 00003946 F605(58060000)01    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirReadOnly
  1205 0000394D 7546                <1>     jnz .exitBad  ;Can't delete a read only file
  1206 0000394F E843000000          <1>     call deleteMain
  1207 00003954 723F                <1>     jc .exitBad
  1208                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
  1209 00003956 B03F                <1>     mov al, "?"
  1210 00003958 488D3D(C8060000)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
  1211 0000395F B90B000000          <1>     mov ecx, 11
  1212 00003964 F2AE                <1>     repne scasb   ;Scan for the wildcard char
  1213 00003966 7402                <1>     je .serverWCloop   ;This is not possible if entered via 21/41h
  1214 00003968 F8                  <1>     clc
  1215                              <1>     return  ;Return ok!
    13                              <2> %%_ret:
    14 00003969 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1216                              <1> .serverWCloop:
  1217 0000396A FF35(0B040000)      <1>     push qword [currentDTA] ;Save the current DTA address
  1218 00003970 488D3D(22060000)    <1>     lea rdi, dosffblock
  1219 00003977 57                  <1>     push rdi    ;Push this address onto the stack
  1220 00003978 E8A8D5FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
  1221 0000397D 8F05(0B040000)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
  1222 00003983 E81BD2FFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
  1223 00003988 8F05(0B040000)      <1>     pop qword [currentDTA]
  1224 0000398E E804000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
  1225 00003993 73D5                <1>     jnc .serverWCloop     
  1226                              <1> ;Stop as soon as an error occurs
  1227                              <1> .exitBad:
  1228 00003995 F9                  <1>     stc
  1229                              <1>     return
    13                              <2> %%_ret:
    14 00003996 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1230                              <1> 
  1231                              <1> deleteMain:
  1232                              <1> ;Now unlink FAT chain and then clear directory entry
  1233                              <1> ;Get the start cluster of this file
  1234                              <1> ;Input:
  1235                              <1> ; The file must have NOT be read-only.
  1236                              <1> ; If the CDS is NOT a net cds then the following must hold:
  1237                              <1> ;     - curDirCopy must be filled with the file directory information
  1238                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
  1239                              <1> ;Output: CF=NC => Success, 
  1240                              <1> ; If not net CDS:
  1241                              <1> ;   rsi keeps pointing to directory entry.
  1242                              <1> ;   al = First char of the file that was deleted.
  1243                              <1> ;        CF=CY => Error
  1244                              <1> ;The dir buffer must be marked as referenced once we are done with it
  1245 00003997 E812FFFFFF          <1>     call checkNoOpenHandlesForShareAction   ;Also cannot delete if open handle
  1246                              <1>     retc    ;Return immediately if CF=CY and propagate error code
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000399C 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1247 0000399E 52                  <1>     push rdx
  1248 0000399F 0FB715(67060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
  1249 000039A6 0FB705(61060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
  1250 000039AD C1E010              <1>     shl eax, 10h
  1251 000039B0 09D0                <1>     or eax, edx ;Add low bits to eax
  1252 000039B2 5A                  <1>     pop rdx
  1253 000039B3 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
  1254 000039B5 740E                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
  1255 000039B7 488B2D(F9060000)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
  1256 000039BE E831D0FFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
  1257 000039C3 721B                <1>     jc .exitBad
  1258                              <1> .skipUnlink:
  1259                              <1>     ;Now replace the first char of the directory to 0E5h
  1260                              <1>     ;Get the disk directory in a buffer to manipulate the entry
  1261 000039C5 E841E1FFFF          <1>     call getDiskDirectoryEntry
  1262 000039CA 7214                <1>     jc .exitBad
  1263 000039CC 8A05(F7060000)      <1>     mov al, byte [delChar]
  1264 000039D2 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
  1265 000039D4 E8BCCBFFFF          <1>     call markBufferDirty
  1266                              <1>     ;CF must be clear
  1267 000039D9 E885CBFFFF          <1>     call writeThroughBuffers
  1268                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000039DE 73B6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1269                              <1> .exitBad:
  1270 000039E0 E847CBFFFF          <1>     call cancelWriteThroughBuffers
  1271 000039E5 F9                  <1>     stc
  1272                              <1>     return
    13                              <2> %%_ret:
    14 000039E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1273                              <1> 
  1274                              <1> openMain:
  1275                              <1> ;Input: ax (formally al) = Open mode
  1276                              <1> ;       [currentSFT] = SFT we are building
  1277                              <1> ;       [workingCDS] = CDS of drive to access
  1278                              <1> ;       [workingDPB] = DPB of drive to access
  1279                              <1> ;Ouput: CF=CY => Error, eax has error code
  1280 000039E7 E8AE000000          <1>     call setOpenMode
  1281                              <1>     retc    ;Error Exit 
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000039EC 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1282 000039EE 488B3D(21070000)    <1>     mov rdi, qword [currentSFT]
  1283 000039F5 488B35(01070000)    <1>     mov rsi, qword [workingCDS]
  1284 000039FC 30E4                <1>     xor ah, ah  ;al has the access mode
  1285 000039FE 66894702            <1>     mov word [rdi + sft.wOpenMode], ax  ;Set the SFT access mode
  1286 00003A02 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1287 00003A09 750A                <1>     jne .notNet
  1288                              <1> .redirOpen:
  1289 00003A0B 50                  <1>     push rax    ;Push open mode onto stack
  1290 00003A0C B816110000          <1>     mov eax, 1116h  ;Open remote file on \\ pathspec drives
  1291 00003A11 CD4F                <1>     int 4Fh
  1292 00003A13 58                  <1>     pop rax
  1293                              <1>     return
    13                              <2> %%_ret:
    14 00003A14 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1294                              <1> .notNet:
  1295 00003A15 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1296 00003A1B 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1297 00003A1D E8E0300000          <1>     call dosCrit1Enter
  1298 00003A22 C605(F6060000)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1299 00003A29 C605(F7060000)E5    <1>     mov byte [delChar], 0E5h
  1300 00003A30 E83D010000          <1>     call buildSFTEntry  ;ax must have the open mode
  1301 00003A35 7227                <1>     jc .errorExit
  1302                              <1> .openShareLoop:
  1303                              <1> ;Now we attempt to register the file with SHARE
  1304 00003A37 0FB70D(13000000)    <1>     movzx ecx, word [shareCount]    
  1305                              <1> .openShareTryAgain: 
  1306 00003A3E 51                  <1>     push rcx
  1307 00003A3F E820380000          <1>     call openShareCallWrapper
  1308 00003A44 59                  <1>     pop rcx
  1309 00003A45 731D                <1>     jnc .fileSharedOk
  1310 00003A47 E842380000          <1>     call shareRetryCountdown
  1311 00003A4C FFC9                <1>     dec ecx
  1312 00003A4E 75EE                <1>     jnz .openShareTryAgain
  1313 00003A50 488B3D(21070000)    <1>     mov rdi, qword [currentSFT]
  1314 00003A57 E855380000          <1>     call shareCheckOpenViolation
  1315 00003A5C 73D9                <1>     jnc .openShareLoop  ;If user selects retry, we retry!
  1316                              <1> .errorExit:
  1317 00003A5E E8A9300000          <1>     call dosCrit1Exit   ;Else we error out
  1318                              <1>     return
    13                              <2> %%_ret:
    14 00003A63 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1319                              <1> .fileSharedOk:
  1320 00003A64 B803000000          <1>     mov eax, 3  ;Update date/time and everything in the share dir sync call
  1321 00003A69 E8210B0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1322 00003A6E FF15(23010000)      <1>     call qword [updateDirShare] ;Now call the dir sync, this default sets CF 
  1323 00003A74 E893300000          <1>     call dosCrit1Exit
  1324                              <1> openDriverMux:  ;Int 4Fh, AX=120Ch, jumped to by Create
  1325 00003A79 488B3D(21070000)    <1>     mov rdi, qword [currentSFT]
  1326 00003A80 E884E3FFFF          <1>     call openSFT
  1327 00003A85 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1328 00003A8B 7501                <1>     jnz .netOpen
  1329                              <1>     return
    13                              <2> %%_ret:
    14 00003A8D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1330                              <1> .netOpen:
  1331 00003A8E 488B05(13040000)    <1>     mov rax, qword [currentPSP]
  1332 00003A95 48894745            <1>     mov qword [rdi + sft.qPSPOwner], rax
  1333                              <1>     return
    13                              <2> %%_ret:
    14 00003A99 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1334                              <1> 
  1335                              <1> setOpenMode:
  1336                              <1> ;Input: al = Open mode for the file open
  1337 00003A9A 8805(EC060000)      <1>     mov byte [fileOpenMd], al
  1338 00003AA0 53                  <1>     push rbx
  1339 00003AA1 88C3                <1>     mov bl, al
  1340 00003AA3 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1341 00003AA6 803D(F1060000)FF    <1>     cmp byte [dosInvoke], -1    
  1342 00003AAD 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1343 00003AAF 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
  1344 00003AB2 7405                <1>     je .s2
  1345                              <1> .s1:
  1346 00003AB4 80FB40              <1>     cmp bl, denyNoneShare
  1347 00003AB7 770D                <1>     ja .somBad
  1348                              <1> .s2:
  1349 00003AB9 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1350 00003ABB 80E30F              <1>     and bl, 0Fh
  1351 00003ABE 80FB02              <1>     cmp bl, RWAccess
  1352 00003AC1 7703                <1>     ja .somBad
  1353 00003AC3 5B                  <1>     pop rbx
  1354 00003AC4 F8                  <1>     clc
  1355                              <1>     return
    13                              <2> %%_ret:
    14 00003AC5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1356                              <1> .somBad:
  1357 00003AC6 5B                  <1>     pop rbx
  1358 00003AC7 B80C000000          <1>     mov eax, errAccCde
  1359 00003ACC F9                  <1>     stc
  1360                              <1>     return
    13                              <2> %%_ret:
    14 00003ACD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1361                              <1> 
  1362                              <1> createNewMain:
  1363                              <1> ;Input: ax (formally al) = File attributes
  1364                              <1> ;       [currentSFT] = SFT we are building
  1365                              <1> ;       [workingCDS] = CDS of drive to access
  1366                              <1> ;       [workingDPB] = DPB of drive to access
  1367 00003ACE 0FB6C0              <1>     movzx eax, al
  1368 00003AD1 B401                <1>     mov ah, 1    ;Tell redir to create new file
  1369 00003AD3 F605(F3060000)FF    <1>     test byte [fileExist], -1
  1370 00003ADA 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1371 00003ADC B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1372 00003AE1 F9                  <1>     stc
  1373                              <1>     return
    13                              <2> %%_ret:
    14 00003AE2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1374                              <1> createMain:
  1375                              <1> ;Input: ax (formally al) = File attributes
  1376                              <1> ;       [currentSFT] = SFT we are building
  1377                              <1> ;       [workingCDS] = CDS of drive to access
  1378                              <1> ;       [workingDPB] = DPB of drive to access
  1379 00003AE3 0FB6C0              <1>     movzx eax, al
  1380                              <1> .createNewEP:
  1381 00003AE6 A8C0                <1>     test al, 80h | 40h   ;Invalid bits?
  1382 00003AE8 750A                <1>     jnz .invalidAttrib
  1383 00003AEA A808                <1>     test al, dirVolumeID
  1384 00003AEC 7506                <1>     jnz .invalidAttrib  ;Creating volume label with this function is forbidden
  1385 00003AEE 0C20                <1>     or al, dirArchive   ;Set archive bit
  1386 00003AF0 A810                <1>     test al, dirDirectory   
  1387 00003AF2 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1388                              <1> .invalidAttrib:
  1389 00003AF4 B805000000          <1>     mov eax, errAccDen
  1390 00003AF9 F9                  <1>     stc
  1391                              <1>     return
    13                              <2> %%_ret:
    14 00003AFA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1392                              <1> .validAttr:
  1393 00003AFB 488B3D(21070000)    <1>     mov rdi, qword [currentSFT]
  1394 00003B02 488B35(01070000)    <1>     mov rsi, qword [workingCDS]
  1395 00003B09 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1396 00003B10 750A                <1>     jne .diskFile
  1397 00003B12 50                  <1>     push rax    ;Save the new attributes
  1398 00003B13 B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1399 00003B18 CD4F                <1>     int 4Fh
  1400 00003B1A 5B                  <1>     pop rbx
  1401                              <1>     return
    13                              <2> %%_ret:
    14 00003B1B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1402                              <1> .diskFile:
  1403 00003B1C 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1404 00003B22 740A                <1>     jz .hardFile
  1405 00003B24 50                  <1>     push rax    ;Save the new attributes
  1406 00003B25 B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1407 00003B2A CD4F                <1>     int 4Fh
  1408 00003B2C 5B                  <1>     pop rbx
  1409                              <1>     return
    13                              <2> %%_ret:
    14 00003B2D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1410                              <1> .hardFile:
  1411 00003B2E 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
  1412 00003B34 C605(F6060000)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1413 00003B3B C605(F7060000)E5    <1>     mov byte [delChar], 0E5h
  1414 00003B42 E8BB2F0000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1415 00003B47 57                  <1>     push rdi
  1416 00003B48 50                  <1>     push rax    ;Save the file attributes on stack
  1417 00003B49 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1418 00003B4E E81F000000          <1>     call buildSFTEntry
  1419 00003B53 5B                  <1>     pop rbx ;Pop the word off (though it has been used already!)
  1420 00003B54 5F                  <1>     pop rdi
  1421 00003B55 7215                <1>     jc .errorExit
  1422 00003B57 B802000000          <1>     mov eax, 2
  1423 00003B5C FF15(23010000)      <1>     call qword [updateDirShare]
  1424 00003B62 E8A52F0000          <1>     call dosCrit1Exit
  1425 00003B67 E90DFFFFFF          <1>     jmp openDriverMux
  1426                              <1> .errorExit:
  1427 00003B6C E89B2F0000          <1>     call dosCrit1Exit
  1428                              <1>     return
    13                              <2> %%_ret:
    14 00003B71 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1429                              <1> buildSFTEntry:
  1430                              <1> ;Called in a critical section.
  1431                              <1> ;Input: al = Open mode
  1432                              <1> ;       STACK: File attributes if creating a file
  1433                              <1> ;       [currentSFT] = SFT we are building
  1434                              <1> ;       [workingCDS] = CDS of drive to access
  1435                              <1> ;       [workingDPB] = DPB of drive to access
  1436                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1437                              <1> ;
  1438                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1439                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1440                              <1> ;        If CF=CY: - Return fail
  1441                              <1> ;
  1442                              <1> ;
  1443                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1444                              <1> ;   If not, create disk entry.
  1445                              <1> ;Check if the device was a char device by checking curDirCopy.
  1446                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1447                              <1> 
  1448                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1449                              <1> ; to start of file fields of the SFT
  1450 00003B72 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1451 00003B73 4889E5              <1>     mov rbp, rsp
  1452 00003B76 488B35(21070000)    <1>     mov rsi, qword [currentSFT]
  1453                              <1> ;Set the open mode
  1454 00003B7D 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
  1455                              <1> ;Get current time
  1456 00003B81 E895EBFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1457 00003B86 E87BECFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1458 00003B8B 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1459                              <1> ;Set current Owner
  1460 00003B8E 488B05(13040000)    <1>     mov rax, qword [currentPSP]
  1461 00003B95 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
  1462                              <1> ;Set file pointer to first byte
  1463 00003B99 C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1464                              <1> ;Common fields set
  1465 00003BA0 F605(F6060000)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1466 00003BA7 0F849D010000        <1>     jz .openProc
  1467                              <1>     ;Here if Creating a file.
  1468 00003BAD F605(F3060000)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1469 00003BB4 0F84D9000000        <1>     jz .createFile
  1470 00003BBA F605(58060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev ;Char dev?
  1471 00003BC1 0F858C010000        <1>     jnz .charDev
  1472                              <1>     ;Here disk file exists, so recreating the file.
  1473                              <1>     ;If recreating, check we are not overwriting a Dir
  1474 00003BC7 F605(58060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
  1475 00003BCE 0F85CD010000        <1>     jnz .bad    ;Directories are not allowed to be created
  1476 00003BD4 55                  <1>     push rbp
  1477 00003BD5 FF35(21070000)      <1>     push qword [currentSFT]
  1478 00003BDB E8B7FDFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1479 00003BE0 8F05(21070000)      <1>     pop qword [currentSFT]
  1480 00003BE6 5D                  <1>     pop rbp
  1481 00003BE7 0F82B4010000        <1>     jc .bad
  1482                              <1>     ;al has the char for the filename
  1483                              <1>     ;Sets vars for the sector/offset into the sector
  1484 00003BED 488B3D(21070000)    <1>     mov rdi, qword [currentSFT]
  1485 00003BF4 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1486 00003BF6 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1487                              <1>     ;al has file attributes.
  1488 00003BFA 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1489 00003BFC 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1490 00003BFF 31C0                <1>     xor eax, eax
  1491                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1492 00003C01 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1493 00003C05 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1494 00003C09 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1495 00003C0C 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1496 00003C0F 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1497 00003C12 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1498 00003C15 57                  <1>     push rdi    ;Save SFT pointer
  1499 00003C16 488D3D(4D060000)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1500 00003C1D B920000000          <1>     mov ecx, fatDirEntry_size
  1501 00003C22 F3A4                <1>     rep movsb
  1502 00003C24 E86CC9FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1503 00003C29 5F                  <1>     pop rdi
  1504                              <1> .createCommon:  ;rdi must point to the current SFT 
  1505                              <1>     ;Now populate the remaining SFT fields 
  1506 00003C2A 488D35(4D060000)    <1>     lea rsi, curDirCopy
  1507 00003C31 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1508 00003C34 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1509 00003C37 488B05(35070000)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1510 00003C3E 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1511 00003C42 0FB705(3D070000)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1512 00003C49 C1E805              <1>     shr eax, 5   ;Divide by 32 to get directory entry number
  1513 00003C4C 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1514 00003C4F 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1515 00003C52 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1516 00003C55 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1517 00003C59 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1518 00003C5D C1E210              <1>     shl edx, 10h
  1519 00003C60 09D0                <1>     or eax, edx
  1520 00003C62 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1521                              <1> 
  1522 00003C65 31C0                <1>     xor eax, eax
  1523                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1524 00003C67 8A05(F8060000)      <1>     mov al, byte [workingDrv]
  1525 00003C6D 0C40                <1>     or al, blokFileNoFlush  ;Dont flush until it is accessed
  1526 00003C6F 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1527 00003C73 488B05(F9060000)    <1>     mov rax, qword [workingDPB]
  1528 00003C7A 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1529                              <1>     ;Last thing, copy the filename over
  1530                              <1>     ;Now save the name
  1531                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1532 00003C7E 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1533 00003C82 488D35(4D060000)    <1>     lea rsi, curDirCopy
  1534 00003C89 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1535 00003C8B 66A5                <1>     movsw
  1536 00003C8D A4                  <1>     movsb
  1537                              <1>     ;SFT filled
  1538 00003C8E E905010000          <1>     jmp .exit
  1539                              <1> .createFile:
  1540                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1541                              <1>     ;rsi points to current sda entry
  1542 00003C93 488D3D(4D060000)    <1>     lea rdi, curDirCopy
  1543                              <1>     ;Clear out the dir entry
  1544 00003C9A 57                  <1>     push rdi
  1545 00003C9B B904000000          <1>     mov ecx, 4
  1546 00003CA0 31C0                <1>     xor eax, eax
  1547 00003CA2 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1548 00003CA5 5F                  <1>     pop rdi
  1549                              <1>     ;Copy the FCB name over    
  1550 00003CA6 56                  <1>     push rsi
  1551 00003CA7 57                  <1>     push rdi
  1552 00003CA8 B90B000000          <1>     mov ecx, 11
  1553 00003CAD 488D35(C8060000)    <1>     lea rsi, fcbName
  1554 00003CB4 F3A4                <1>     rep movsb   ;Move over the FCB name
  1555 00003CB6 5F                  <1>     pop rdi
  1556 00003CB7 5E                  <1>     pop rsi
  1557                              <1> 
  1558 00003CB8 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1559                              <1>     ;al has file attributes.
  1560 00003CBC 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1561 00003CBE 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1562 00003CC1 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1563 00003CC4 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1564 00003CC7 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1565 00003CCA 8B05(6F070000)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1566                              <1> .searchForDirSpace:
  1567 00003CD0 8905(73070000)      <1>     mov dword [dirClustA], eax
  1568 00003CD6 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1569 00003CD8 668905(77070000)    <1>     mov word [dirSect], ax
  1570 00003CDF 8905(79070000)      <1>     mov dword [dirEntry], eax
  1571 00003CE5 57                  <1>     push rdi
  1572 00003CE6 E80DDEFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1573 00003CEB 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1574 00003CEC 7328                <1>     jnc .dirEntryFnd
  1575 00003CEE 813D(6F070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1575 00003CF6 0000                <1>
  1576 00003CF8 0F84A3000000        <1>     je .bad ;Set CF and exit
  1577 00003CFE E83FDFFFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1578 00003D03 0F828F000000        <1>     jc .exit
  1579 00003D09 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1580 00003D0E 0F848D000000        <1>     je .bad
  1581                              <1>     ;Else eax = Newly allocated cluster
  1582 00003D14 EBBA                <1>     jmp short .searchForDirSpace
  1583                              <1> .dirEntryFnd:
  1584 00003D16 4887FE              <1>     xchg rdi, rsi
  1585 00003D19 B904000000          <1>     mov ecx, 4
  1586 00003D1E F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1587 00003D21 E86FC8FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1588 00003D26 488B3D(21070000)    <1>     mov rdi, qword [currentSFT]
  1589 00003D2D E9F8FEFFFF          <1>     jmp .createCommon
  1590                              <1> .open:
  1591                              <1> ;curdircopy has a copy of the disk file directory
  1592                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1593 00003D32 488B3D(21070000)    <1>     mov rdi, qword [currentSFT]
  1594 00003D39 488B2D(F9060000)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1595                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  1596 00003D40 E8C6DDFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  1597 00003D45 E9E0FEFFFF          <1>     jmp .createCommon
  1598                              <1> .openProc:
  1599                              <1>     ;Here if Opening a file.
  1600 00003D4A F605(58060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
  1601 00003D51 74DF                <1>     jz .open
  1602                              <1> .charDev:
  1603 00003D53 488B05(4D060000)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  1604 00003D5A E8002C0000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  1605 00003D5F 7307                <1>     jnc .notBadCharDevName
  1606 00003D61 B805000000          <1>     mov eax, errAccDen
  1607 00003D66 EB30                <1>     jmp short .exit ;CF already set
  1608                              <1> .notBadCharDevName:
  1609 00003D68 488B35(21070000)    <1>     mov rsi, qword [currentSFT]
  1610 00003D6F 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  1611 00003D73 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  1612 00003D77 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1613 00003D7A 80CBC0              <1>     or bl, devCharDev | charDevNoEOF ;Set charDev & noEOF on read
  1614 00003D7D 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1615 00003D81 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1616 00003D88 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1617 00003D8C B820202020          <1>     mov eax, "    "
  1618 00003D91 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1619 00003D95 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1620                              <1> .exit:
  1621 00003D98 E8080A0000          <1>     call writeThroughBuffersForHandle
  1622 00003D9D 7207                <1>     jc .bad2
  1623 00003D9F 5D                  <1>     pop rbp
  1624                              <1>     return
    13                              <2> %%_ret:
    14 00003DA0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1625                              <1> .bad:   ;Set Access Denied
  1626 00003DA1 B805000000          <1>     mov eax, errAccDen
  1627                              <1> .bad2:  ;Error propagating error code
  1628 00003DA6 E82A0A0000          <1>     call cancelWriteThroughBuffersForHandle
  1629 00003DAB F9                  <1>     stc
  1630 00003DAC 5D                  <1>     pop rbp
  1631                              <1>     return
    13                              <2> %%_ret:
    14 00003DAD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1632                              <1> 
  1633                              <1> closeMain: ;Int 4Fh AX=1201h
  1634                              <1> ;Gets the directory entry for a file
  1635                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1636                              <1> ;If CF=CY on return: Error, return error with al = error code
  1637                              <1> ;Preserve all regs except eax and rdi
  1638                              <1> ; If CF=NC on return: eax = Unknown
  1639                              <1> ;                     rdi = current SFT ptr
  1640 00003DAE 488B3D(21070000)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
  1641 00003DB5 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
  1642 00003DBB 7408                <1>     jz .physical
  1643                              <1>     ;Here we beep out the request to the network redirector (Int 4Fh AX=1106h)
  1644 00003DBD B806110000          <1>     mov eax, 1106h  ;Make request
  1645 00003DC2 CD4F                <1>     int 4Fh ;Beep!
  1646                              <1>     return  ;Returns with CF set or clear as appropriate
    13                              <2> %%_ret:
    14 00003DC4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1647                              <1> .physical:  
  1648                              <1> ; We make a request to the dev dir to close the device
  1649                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1650 00003DC5 E8382D0000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1651 00003DCA 53                  <1>     push rbx
  1652 00003DCB 56                  <1>     push rsi
  1653 00003DCC 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
  1654 00003DD0 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1655 00003DD6 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
  1656                              <1>     ;rsi has DPB pointer here
  1657                              <1>     ;rdi has the SFT pointer
  1658 00003DD8 55                  <1>     push rbp
  1659 00003DD9 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
  1660 00003DDC E82F280000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
  1661 00003DE1 E89FDDFFFF          <1>     call updateDirectoryEntryForFile
  1662 00003DE6 5D                  <1>     pop rbp
  1663                              <1>     ;If CF is set, Fail was requested and ax has an error code
  1664 00003DE7 7234                <1>     jc .exit
  1665 00003DE9 E88BC9FFFF          <1>     call flushFile
  1666 00003DEE 722D                <1>     jc .exit    ;If something went wrong, exit
  1667 00003DF0 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
  1668 00003DF4 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
  1669                              <1> .charClose:
  1670                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
  1671                              <1>     ;We now decrement handle count in SFT structure
  1672 00003DF8 E899090000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
  1673 00003DFD 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
  1674 00003E00 7503                <1>     jnz .driverClose
  1675 00003E02 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
  1676                              <1> .driverClose:
  1677 00003E05 50                  <1>     push rax
  1678 00003E06 51                  <1>     push rcx
  1679 00003E07 E85F340000          <1>     call closeShareCallWrapper  ;The SFT count has been decremented
  1680 00003E0C 59                  <1>     pop rcx
  1681 00003E0D 58                  <1>     pop rax
  1682 00003E0E 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
  1683                              <1>     ;and if the device is a disk device, cl will have the unit number
  1684 00003E0F 9C                  <1>     pushfq
  1685 00003E10 E8FDDFFFFF          <1>     call closeSFT   ;Called with rdi -> Current SFT
  1686 00003E15 9D                  <1>     popfq
  1687 00003E16 E88A090000          <1>     call writeThroughBuffersForHandle
  1688 00003E1B 7306                <1>     jnc short .exitOk
  1689                              <1> .exit:
  1690 00003E1D E8B3090000          <1>     call cancelWriteThroughBuffersForHandle
  1691 00003E22 F9                  <1>     stc
  1692                              <1> .exitOk:
  1693 00003E23 5E                  <1>     pop rsi
  1694 00003E24 5B                  <1>     pop rbx
  1695 00003E25 E8E22C0000          <1>     call dosCrit1Exit
  1696                              <1>     return
    13                              <2> %%_ret:
    14 00003E2A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1697                              <1> 
  1698                              <1> readBytes:
  1699                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1700                              <1> ;Input: ecx = Number of bytes to read
  1701                              <1> ;Output: ecx = Number of bytes read
  1702                              <1> ;Number of bytes read 
  1703                              <1> ;If CF=CY, return with error code in ax
  1704 00003E2B E85F070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1705 00003E30 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1706 00003E34 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1707 00003E36 3C01                <1>     cmp al, WriteAccess
  1708 00003E38 7509                <1>     jne .readable
  1709 00003E3A B805000000          <1>     mov eax, errAccDen
  1710 00003E3F 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1711 00003E41 F9                  <1>     stc
  1712                              <1>     return
    13                              <2> %%_ret:
    14 00003E42 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1713                              <1> .readable:
  1714 00003E43 E889070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1715 00003E48 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1716 00003E4B 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1717 00003E51 740A                <1>     jz .notRedir
  1718 00003E53 B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1719 00003E58 CD4F                <1>     int 4Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1720                              <1>     return 
    13                              <2> %%_ret:
    14 00003E5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1721                              <1> .exitOk:
  1722 00003E5B F8                  <1>     clc
  1723                              <1>     return 
    13                              <2> %%_ret:
    14 00003E5C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1724                              <1> .notRedir:
  1725 00003E5D 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1726 00003E63 7510                <1>     jnz readCharDev
  1727 00003E65 E8982C0000          <1>     call dosCrit1Enter
  1728 00003E6A E89C010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1729 00003E6F E8982C0000          <1>     call dosCrit1Exit
  1730                              <1>     return 
    13                              <2> %%_ret:
    14 00003E74 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1731                              <1> readCharDev:
  1732                              <1> ;rdi points to sft for char dev to read
  1733                              <1> ;ecx has the number of bytes to transfer
  1734                              <1> ;Vars have been set up and DTA has the transfer address
  1735                              <1> ;Returns in ecx, the actual bytes transferred
  1736                              <1> ;If CF=CY, return with error code in ax
  1737 00003E75 C605(FE030000)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1738 00003E7C 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1739 00003E80 488B3D(0B040000)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1740 00003E87 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
  1741 00003E8A 0F84CE020000        <1>     jz readExitOk    ;If it does, jump to exit as if EOF has been hit
  1742 00003E90 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
  1743 00003E93 7407                <1>     jz .notNul
  1744                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
  1745                              <1>     ;NUL never transfers bytes 
  1746 00003E95 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1747 00003E97 E9C2020000          <1>     jmp readExitOk    ;Goto exit
  1748                              <1> .notNul:
  1749 00003E9C F6C320              <1>     test bl, charDevBinary
  1750 00003E9F 0F857F000000        <1>     jnz .binary
  1751                              <1>     ;Here if the device is in ASCII mode
  1752 00003EA5 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
  1753 00003EA8 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1754                              <1> .consoleInput:
  1755                              <1>     ;Console input here
  1756 00003EAE E851E4FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1757                              <1>     ;Get current offset into buffer (if one exists)
  1758 00003EB3 488B35(1F000000)    <1>     mov rsi, qword [vConHdlOff]
  1759 00003EBA 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1760 00003EBD 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1761 00003EBF 803D(42030000)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1762 00003EC6 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1763                              <1>     ;Else, reset the buffer
  1764 00003EC8 66C705(42030000)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1764 00003ED0 FF                  <1>
  1765                              <1> .oldBuf:
  1766                              <1> ;Preserve the dta and number of chars to tfr
  1767 00003ED1 51                  <1>     push rcx
  1768 00003ED2 57                  <1>     push rdi
  1769 00003ED3 488D15(42030000)    <1>     lea rdx, vConInBuf
  1770 00003EDA E845E4FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1771 00003EDF 5F                  <1>     pop rdi
  1772 00003EE0 59                  <1>     pop rcx
  1773 00003EE1 488D35(44030000)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1774 00003EE8 803E1A              <1>     cmp byte [rsi], EOF
  1775 00003EEB 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1776 00003EED C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1777 00003EF0 B00A                <1>     mov al, LF
  1778 00003EF2 E8A8DFFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1779 00003EF7 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1780 00003EF9 EB18                <1>     jmp short .exit
  1781                              <1> .tfrBuf:
  1782 00003EFB AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1783 00003EFC AA                  <1>     stosb
  1784 00003EFD 3C0D                <1>     cmp al, CR 
  1785 00003EFF 7503                <1>     jne .noCRLF
  1786 00003F01 C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1787                              <1> .noCRLF:
  1788 00003F04 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1789 00003F06 E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1790 00003F08 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1791                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1792 00003F0A E890DFFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1793 00003F0F 31F6                <1>     xor esi, esi
  1794 00003F11 0C01                <1>     or al, 1    ;Set ZF = NZ
  1795                              <1> .exit:
  1796 00003F13 E804E4FFFF          <1>     call vConRetDriver
  1797 00003F18 488935(1F000000)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1798 00003F1F E93A020000          <1>     jmp readExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
  1799                              <1> 
  1800                              <1> .binary:
  1801                              <1>     ;Setup registers for transfer
  1802 00003F24 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1803 00003F27 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1804                              <1>     ;ecx has the number of bytes to transfer directly
  1805 00003F2A E8FF250000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1806 00003F2F 488B35(F9060000)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1807 00003F36 E835230000          <1>     call goDriver   ;Make the request
  1808 00003F3B 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1809 00003F3E 0FB73D(B7040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1810 00003F45 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1811 00003F4B 7422                <1>     jz .binNoError
  1812                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
  1813 00003F4D B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1814 00003F4F E8B41D0000          <1>     call charDevErr   ;ah = has part of the error 
  1815                              <1>     ;al now has the response
  1816 00003F54 3C00                <1>     cmp al, critIgnore
  1817 00003F56 7417                <1>     je .binNoError ;Simply proceed as normal
  1818 00003F58 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1819 00003F5B 3C03                <1>     cmp al, critFail
  1820 00003F5D 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1821                              <1>     ;Fallthrough here for fail!
  1822                              <1> .failExit:
  1823 00003F5F 488B3D(21070000)    <1>     mov rdi, qword [currentSFT]
  1824 00003F66 31C9                <1>     xor ecx, ecx
  1825 00003F68 B805000000          <1>     mov eax, errAccDen
  1826 00003F6D F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1827                              <1>     return
    13                              <2> %%_ret:
    14 00003F6E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1828                              <1> .binNoError:
  1829                              <1>     ;Get number of bytes transferred into 
  1830 00003F6F 8B05(CA040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1831 00003F75 F7D8                <1>     neg eax ;make it into -eax
  1832 00003F77 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1833                              <1>     ;ecx now has bytes left to transfer
  1834 00003F7B 50                  <1>     push rax    ;Save value on stack
  1835 00003F7C 31C0                <1>     xor eax, eax ;Set ZF
  1836 00003F7E FFC0                <1>     inc eax ;Clear ZF
  1837 00003F80 58                  <1>     pop rax ;Get back the original value
  1838 00003F81 E9D8010000          <1>     jmp readExitOk    ;GoExit with ecx=Bytes left to read
  1839                              <1> .generalASCII:
  1840                              <1>     ;ecx has bytes to transfer here
  1841                              <1>     ;Setup registers for transfer
  1842 00003F86 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1843 00003F89 51                  <1>     push rcx
  1844 00003F8A B901000000          <1>     mov ecx, 1  ;Get one char
  1845 00003F8F 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1846 00003F92 E897250000          <1>     call primReqReadSetup   ;Setup request
  1847 00003F97 59                  <1>     pop rcx
  1848                              <1>     ;rbx now has request header ptr
  1849 00003F98 488B35(F9060000)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1850                              <1> .asciiReadChar:
  1851 00003F9F 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1852 00003FA2 E8E1E2FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1853 00003FA7 E8C4220000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1854 00003FAC 0FB73D(B7040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1855 00003FB3 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1856 00003FB9 741E                <1>     jz .asciiNoError
  1857 00003FBB E8481D0000          <1>     call charDevErr    ;Call Int 44h
  1858                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1859 00003FC0 C705(CA040000)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1859 00003FC8 0000                <1>
  1860 00003FCA 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1861 00003FCD 3C03                <1>     cmp al, critFail
  1862 00003FCF 748E                <1>     je .failExit
  1863 00003FD1 3C01                <1>     cmp al, critRetry
  1864 00003FD3 74CA                <1>     je .asciiReadChar
  1865                              <1>     ;Ignore here, pretend NULL CHAR was read
  1866 00003FD5 30C0                <1>     xor al, al
  1867 00003FD7 EB15                <1>     jmp short .asciiIgnoreEP
  1868                              <1> .asciiNoError:
  1869                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1870                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1871                              <1> ;Preserve RBX, RSI
  1872                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1873 00003FD9 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1874 00003FDC 813D(CA040000)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1874 00003FE4 0000                <1>
  1875 00003FE6 0F8572010000        <1>     jne readExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1876 00003FEC 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1877                              <1> .asciiIgnoreEP:
  1878 00003FEE 48FF05(C2040000)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1879 00003FF5 48FFC7              <1>     inc rdi ;Also advance register pointer
  1880 00003FF8 3C1A                <1>     cmp al, EOF ;Was this char EOF?
  1881 00003FFA 0F845E010000        <1>     je readExitOk
  1882 00004000 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1883 00004002 E09B                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1884                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1885 00004004 FEC0                <1>     inc al  ;make ZF=NZ
  1886 00004006 E953010000          <1>     jmp readExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1887                              <1> 
  1888                              <1> readDiskFile:
  1889                              <1> ;rdi = Current SFT
  1890                              <1> ;rbp = WorkingDPB
  1891                              <1> ;ecx = Bytes to transfer
  1892 0000400B C605(FE030000)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  1893 00004012 C605(EF060000)00    <1>     mov byte [rwFlag], 0    ;Read operation
  1894                              <1>     ;We have the following vars setup:
  1895                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  1896                              <1>     ;currClustF
  1897                              <1>     ;Now convert currSectC to disk sector by using currClustF
  1898                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  1899 00004019 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1900 0000401C 85D2                <1>     test edx, edx
  1901 0000401E 0F843A010000        <1>     jz readExitOk  ;Return with zero bytes transferred
  1902 00004024 8B15(3F070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  1903 0000402A 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  1904 0000402D 8905(43070000)      <1>     mov dword [currClustD], eax
  1905 00004033 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  1906 00004035 0F8423010000        <1>     jz readExitOk
  1907 0000403B 3DFFFFFFFF          <1>     cmp eax, -1 ;If left in an indeterminate state somehow, exit no bytes
  1908 00004040 0F8418010000        <1>     jz readExitOk   
  1909 00004046 8B0D(67070000)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  1910                              <1>     ;Check if we have opened a volume label (should never happen)
  1911 0000404C 66F747020800        <1>     test word [rdi + sft.wOpenMode], volumeLabel    ;If we try read from vollbl
  1912 00004052 7407                <1>     jz .shareCheck
  1913 00004054 B805000000          <1>     mov eax, errAccDen
  1914 00004059 F9                  <1>     stc
  1915                              <1>     return
    13                              <2> %%_ret:
    14 0000405A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1916                              <1> .shareCheck:
  1917                              <1> ;Entered with rdi -> SFT and ecx=number of bytes to read (to check if possible)
  1918 0000405B E812320000          <1>     call retryShareIODelay
  1919 00004060 7308                <1>     jnc .shareOk
  1920 00004062 E80C330000          <1>     call shareCheckReadLockViolation
  1921 00004067 73F2                <1>     jnc .shareCheck ;IF the user selected retry, lets try again
  1922                              <1>     return  ;Otherwise, return with the share error code in eax and CF=CY
    13                              <2> %%_ret:
    14 00004069 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1923                              <1> .shareOk:
  1924 0000406A 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  1925 0000406C 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  1926 0000406E 7426                <1>     jz .skipWalk
  1927                              <1> .goToCurrentCluster:
  1928 00004070 E8C8C9FFFF          <1>     call readFAT    ;Get in eax the next cluster
  1929 00004075 0F82D4000000        <1>     jc .badExit   ;This can only return Fail
  1930 0000407B 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  1931 00004080 0F84D8000000        <1>     je readExitOk ;Exit with no bytes transferred
  1932 00004086 8905(43070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  1933 0000408C FFCA                <1>     dec edx ;Decrement counter
  1934 0000408E 75E0                <1>     jnz .goToCurrentCluster
  1935                              <1> ;Now we fall out with ebx = Current cluster
  1936 00004090 8B05(43070000)      <1>     mov eax, dword [currClustD]    ;Get the current cluster in eax
  1937                              <1>     ;mov eax, ebx
  1938                              <1> .skipWalk:
  1939 00004096 E8A0C7FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  1940                              <1>     ;Now we add the offset to this
  1941 0000409B 0FB61D(4B070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  1942 000040A2 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  1943 000040A5 488905(4C070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  1944                              <1> ;Main
  1945                              <1> .mainRead:
  1946 000040AC F605(26040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  1947 000040B3 7407                <1>     jz .mainReadNoBreak
  1948 000040B5 50                  <1>     push rax
  1949 000040B6 E8CDE1FFFF          <1>     call checkBreak
  1950 000040BB 58                  <1>     pop rax
  1951                              <1> .mainReadNoBreak:
  1952 000040BC E894C6FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuff var for sector in rax
  1953 000040C1 0F8288000000        <1>     jc .badExit
  1954 000040C7 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  1955 000040CB 0FB71D(54070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  1956 000040D2 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  1957                              <1>     ;Now we read the smallest of the following from the sector buffer:
  1958                              <1>     ; 1) Sector size, 2) Bytes left in File, 
  1959                              <1>     ; 3) Bytes left to read from Request, 4) Bytes left in sector
  1960                              <1> 
  1961 000040D5 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  1962 000040D8 2B0D(56070000)      <1>     sub ecx, dword [currByteF]  ;Get bytes left to read in file in ecx
  1963 000040DE 8B1D(6B070000)      <1>     mov ebx, dword [tfrCntr]
  1964 000040E4 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  1965 000040E6 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  1966 000040E9 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  1967 000040ED 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  1968 000040EF 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  1969                              <1>     
  1970 000040F2 57                  <1>     push rdi
  1971 000040F3 488B3D(0B040000)    <1>     mov rdi, qword [currentDTA]
  1972 000040FA 51                  <1>     push rcx
  1973 000040FB F3A4                <1>     rep movsb
  1974 000040FD 59                  <1>     pop rcx
  1975 000040FE 010D(56070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  1976 00004104 290D(6B070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  1977 0000410A 48893D(0B040000)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  1978 00004111 8B05(56070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  1979 00004117 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  1980 0000411B 31D2                <1>     xor edx, edx    ;Zero rdx
  1981 0000411D F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  1982 0000411F 668915(54070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  1983 00004126 5F                  <1>     pop rdi
  1984 00004127 8B0D(6B070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  1985 0000412D 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  1986 0000412F 742D                <1>     jz readExitOk ;Exit if so!
  1987 00004131 E868C8FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  1988 00004136 7217                <1>     jc .badExit
  1989                              <1>     ;If ZF=ZE then currClustF has last cluster
  1990 00004138 7424                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  1991                              <1>     ;Else repeat
  1992                              <1>     ;currSectD has been updated, we now set currByteS = 0
  1993 0000413A 66C705(54070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  1993 00004142 00                  <1>
  1994 00004143 488B05(4C070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  1995 0000414A E95DFFFFFF          <1>     jmp .mainRead
  1996                              <1> .badExit:
  1997                              <1>     ;When a disk error occurs within the bit where vars have changed,
  1998                              <1>     ; we need to update the SFT before returning
  1999 0000414F 8B0D(6B070000)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  2000 00004155 30C0                <1>     xor al, al  ;Set ZF flag
  2001 00004157 E802000000          <1>     call readExitOk   ;We call this
  2002 0000415C F9                  <1>     stc ;All calls which end up here return Fail!
  2003 0000415D C3                  <1>     ret
  2004                              <1> 
  2005                              <1> readExitOk:
  2006                              <1> ;Input: ecx = Number of bytes left to transfer!
  2007                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
  2008 0000415E 890D(6B070000)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  2009                              <1>     ;I argue as this is a simply read-only exit vector, this is unnecessary
  2010                              <1>     ;jnz .skipbitClear
  2011                              <1>     ;call getCurrentSFT  ;Get currentSFT in rdi
  2012                              <1>     ;The disk transfer must've flushed by now. 
  2013                              <1>     ;and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2014                              <1> .skipbitClear:  ;Or skip that entirely
  2015 00004164 E82E040000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  2016                              <1>     return 
    13                              <2> %%_ret:
    14 00004169 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2017                              <1> 
  2018                              <1> writeBytes:
  2019                              <1> ;Writes the bytes from the user buffer
  2020                              <1> ;Input: ecx = Bytes to xfr
  2021                              <1> ;Returns number of bytes written in ecx
  2022 0000416A E820040000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  2023 0000416F 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  2024 00004173 240F                <1>     and al, 0Fh ;Eliminate except access mode
  2025 00004175 3C00                <1>     cmp al, ReadAccess
  2026 00004177 7509                <1>     jne .writeable
  2027                              <1> .noWrite:
  2028 00004179 B805000000          <1>     mov eax, errAccDen
  2029 0000417E 31C9                <1>     xor ecx, ecx
  2030 00004180 F9                  <1>     stc
  2031 00004181 C3                  <1>     ret
  2032                              <1> .writeable:
  2033 00004182 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  2034 00004188 7406                <1>     jz .skipAttribCheck ;FCB files don't check file attributes
  2035 0000418A 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  2036 0000418E 74E9                <1>     je .noWrite ;If the file is read only, RIP
  2037                              <1> .skipAttribCheck:
  2038 00004190 E83C040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  2039 00004195 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  2040 0000419B 7408                <1>     jz .notRedir
  2041 0000419D B809110000          <1>     mov eax, 1109h  ;Write to redir
  2042 000041A2 CD4F                <1>     int 4Fh
  2043                              <1>     return
    13                              <2> %%_ret:
    14 000041A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2044                              <1> .notRedir:
  2045 000041A5 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2046 000041AB 7510                <1>     jnz writeCharDev
  2047 000041AD E850290000          <1>     call dosCrit1Enter
  2048 000041B2 E84C010000          <1>     call writeDiskFile
  2049 000041B7 E850290000          <1>     call dosCrit1Exit
  2050                              <1>     return
    13                              <2> %%_ret:
    14 000041BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2051                              <1> writeCharDev:
  2052 000041BD C605(FE030000)04    <1>     mov byte [errorLocus], eLocChr
  2053                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  2054 000041C4 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  2055 000041CA 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  2056                              <1>     ;If ecx = 0, we exit
  2057 000041CE 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  2058 000041D0 85C9                <1>     test ecx, ecx
  2059 000041D2 0F849F030000        <1>     jz writeExitChar
  2060 000041D8 488B1D(0B040000)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  2061 000041DF 4889DF              <1>     mov rdi, rbx
  2062 000041E2 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  2063 000041E4 A820                <1>     test al, charDevBinary
  2064 000041E6 744A                <1>     jz .asciiDev
  2065                              <1> ;Write binary transfer here
  2066                              <1> .binaryLp:
  2067 000041E8 31C0                <1>     xor eax, eax
  2068 000041EA 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2069 000041ED E831230000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2070 000041F2 488B35(21070000)    <1>     mov rsi, qword [currentSFT]
  2071 000041F9 E86E200000          <1>     call goDriverChar
  2072 000041FE 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  2073 00004201 B487                <1>     mov ah, critCharDev | critData | critWrite
  2074 00004203 0FB73D(B7040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  2075 0000420A F7C700800000        <1>     test edi, drvErrStatus
  2076 00004210 7415                <1>     jz .binXfrOk
  2077 00004212 E8F11A0000          <1>     call charDevErr ;Invoke Int 44h
  2078 00004217 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  2079 0000421A 3C00                <1>     cmp al, critIgnore
  2080 0000421C 7409                <1>     je .binXfrOk
  2081 0000421E 3C01                <1>     cmp al, critRetry
  2082 00004220 74C6                <1>     je .binaryLp
  2083 00004222 E9D5000000          <1>     jmp .exitFail
  2084                              <1> .binXfrOk:
  2085 00004227 8B05(CA040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  2086 0000422D E945030000          <1>     jmp writeExitChar   ;Exit oki with # bytes xfrd in eax
  2087                              <1> .asciiDev:
  2088 00004232 A802                <1>     test al, charDevConOut
  2089 00004234 0F859E000000        <1>     jnz .conDev
  2090 0000423A A804                <1>     test al, charDevNulDev
  2091 0000423C 0F858F000000        <1>     jnz .nulDev
  2092                              <1>     ;Here we transfer for a generic character device in ascii mode
  2093 00004242 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  2094 00004244 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  2095 00004247 0F842A030000        <1>     je writeExitChar
  2096 0000424D 51                  <1>     push rcx
  2097 0000424E B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  2098 00004253 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2099 00004256 E8C8220000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2100 0000425B 59                  <1>     pop rcx
  2101 0000425C 488B35(21070000)    <1>     mov rsi, qword [currentSFT]
  2102 00004263 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  2103                              <1> .asciiLp:
  2104 00004267 E81CE0FFFF          <1>     call checkBreak
  2105 0000426C E8FF1F0000          <1>     call goDriver
  2106 00004271 57                  <1>     push rdi
  2107 00004272 B487                <1>     mov ah, critCharDev | critData | critWrite
  2108 00004274 0FB73D(B7040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  2109 0000427B F7C700800000        <1>     test edi, drvErrStatus
  2110 00004281 741D                <1>     jz .asciiNoError
  2111 00004283 E8801A0000          <1>     call charDevErr ;Invoke Int 44h
  2112 00004288 5F                  <1>     pop rdi
  2113 00004289 C705(CA040000)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  2113 00004291 0000                <1>
  2114 00004293 3C01                <1>     cmp al, critRetry
  2115 00004295 74D0                <1>     je .asciiLp
  2116 00004297 3C00                <1>     cmp al, critIgnore
  2117 00004299 7412                <1>     je .ignoreEp
  2118 0000429B E95C000000          <1>     jmp .exitFail
  2119                              <1> .asciiNoError:
  2120 000042A0 5F                  <1>     pop rdi
  2121 000042A1 813D(CA040000)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  2121 000042A9 0000                <1>
  2122 000042AB 741D                <1>     je .bytesXfrdOk
  2123                              <1> .ignoreEp:
  2124 000042AD FFC2                <1>     inc edx ;One more char has been xfrd
  2125 000042AF FF05(C2040000)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  2126 000042B5 48FFC7              <1>     inc rdi ;And our copy... 
  2127 000042B8 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  2128 000042BB 740D                <1>     je .bytesXfrdOk
  2129 000042BD 66C705(B7040000)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  2129 000042C5 00                  <1>
  2130 000042C6 FFC9                <1>     dec ecx
  2131 000042C8 759D                <1>     jnz .asciiLp
  2132                              <1> .bytesXfrdOk:
  2133 000042CA 89D0                <1>     mov eax, edx
  2134 000042CC E9A6020000          <1>     jmp writeExitChar
  2135                              <1> .nulDev:
  2136 000042D1 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  2137 000042D3 E99F020000          <1>     jmp writeExitChar
  2138                              <1> .conDev:
  2139 000042D8 E827E0FFFF          <1>     call vConSwapDriver
  2140 000042DD 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  2141 000042E0 51                  <1>     push rcx
  2142                              <1> .conDevLp:
  2143 000042E1 AC                  <1>     lodsb
  2144 000042E2 3C1A                <1>     cmp al, EOF
  2145 000042E4 7409                <1>     je .conDevExit
  2146 000042E6 E8B4DBFFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  2147 000042EB FFC9                <1>     dec ecx
  2148 000042ED 75F2                <1>     jnz .conDevLp
  2149                              <1> .conDevExit:
  2150 000042EF 58                  <1>     pop rax ;Get initial ecx back into eax
  2151 000042F0 29C8                <1>     sub eax, ecx
  2152 000042F2 E825E0FFFF          <1>     call vConRetDriver
  2153 000042F7 E97B020000          <1>     jmp writeExitChar   ;Input: eax = bytes xfrd
  2154                              <1> .exitFail:
  2155 000042FC B805000000          <1>     mov eax, errAccDen
  2156 00004301 F9                  <1>     stc
  2157                              <1>     return
    13                              <2> %%_ret:
    14 00004302 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2158                              <1> writeDiskFile:
  2159                              <1>     ;rdi has SFT ptr
  2160 00004303 8B0D(67070000)      <1>     mov ecx, dword [tfrLen] ;Get the transfer length 
  2161 00004309 C605(FE030000)02    <1>     mov byte [errorLocus], eLocDsk 
  2162 00004310 C605(EF060000)FF    <1>     mov byte [rwFlag], -1    ;Write operation
  2163 00004317 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  2164 0000431D 0F850B020000        <1>     jnz .badExit
  2165 00004323 85C9                <1>     test ecx, ecx
  2166 00004325 7505                <1>     jnz .nonZeroWrite
  2167 00004327 B9FFFFFFFF          <1>     mov ecx, -1 ;If write cnt is 0 (i.e. truncating file), check for NO locks
  2168                              <1> .nonZeroWrite:
  2169                              <1>     ;Now do share check here
  2170 0000432C E8412F0000          <1>     call retryShareIODelay
  2171 00004331 7308                <1>     jnc .proceedWithWrite   ;No lock for rdi and ecx, all good!
  2172 00004333 E832300000          <1>     call shareCheckWriteLockViolation
  2173 00004338 73F2                <1>     jnc .nonZeroWrite   ;If returned retry, retry the request
  2174                              <1>     return  ;Else return with CF=CY
    13                              <2> %%_ret:
    14 0000433A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2175                              <1> .proceedWithWrite:
  2176 0000433B 31DB                <1>     xor ebx, ebx
  2177 0000433D 891D(63070000)      <1>     mov dword [bytesAppend], ebx    ;Used for file extends (not writes!)
  2178 00004343 881D(62070000)      <1>     mov byte [fileGrowing], bl   ;Reset the file growth flag!
  2179 00004349 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  2180                              <1>     ;If the start cluster is 0, we create a new cluster chain
  2181 0000434C 85C0                <1>     test eax, eax
  2182 0000434E 7520                <1>     jnz .notStart
  2183 00004350 E860C5FFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  2184 00004355 0F82BA010000        <1>     jc .exitPrepHardErr
  2185 0000435B 3DFFFFFFFF          <1>     cmp eax, -1
  2186 00004360 0F84DA010000        <1>     je writeExit
  2187                              <1>     ;Now eax has the first cluster of chain
  2188 00004366 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  2189 00004369 C605(62070000)FF    <1>     mov byte [fileGrowing], -1  ;Set to true as this only occurs for new files!
  2190                              <1> .notStart:
  2191                              <1> ;eax has the start cluster of the file
  2192                              <1> ;Now we go to CurntOff
  2193 00004370 8905(43070000)      <1>     mov dword [currClustD], eax ;Store in var
  2194 00004376 31DB                <1>     xor ebx, ebx
  2195 00004378 8B15(3F070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2196 0000437E 85D2                <1>     test edx, edx
  2197 00004380 7458                <1>     jz .skipWalk
  2198                              <1> .goToCurrentCluster:
  2199 00004382 E8B6C6FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2200 00004387 0F8288010000        <1>     jc .exitPrepHardErr   ;This can only return Fail
  2201 0000438D 3DFFFFFFFF          <1>     cmp eax, -1 ;Is this cluster the last cluster?
  2202 00004392 7536                <1>     jne .stillInFile
  2203                              <1> .addCluster:
  2204                              <1>     ;Here we extend by one cluster
  2205 00004394 8B05(43070000)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2206 0000439A 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2207 0000439C B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2208 000043A1 E835C5FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2209 000043A6 0F8269010000        <1>     jc .exitPrepHardErr
  2210 000043AC 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2211 000043AE 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
  2212 000043B2 010D(63070000)      <1>     add dword [bytesAppend], ecx    ;Add a bytes per sector to filesize
  2213 000043B8 C605(62070000)FF    <1>     mov byte [fileGrowing], -1
  2214 000043BF E879C6FFFF          <1>     call readFAT    ;Get in eax the new cluster
  2215 000043C4 0F824B010000        <1>     jc .exitPrepHardErr
  2216                              <1> .stillInFile:
  2217 000043CA 8905(43070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2218 000043D0 FFCA                <1>     dec edx ;Decrement counter
  2219 000043D2 75AE                <1>     jnz .goToCurrentCluster
  2220                              <1> ;Now we fall out
  2221 000043D4 8B05(43070000)      <1>     mov eax, dword [currClustD]
  2222                              <1> .skipWalk:
  2223 000043DA E85CC4FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2224                              <1>     ;Now we add the offset to this
  2225 000043DF 0FB61D(4B070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2226 000043E6 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2227 000043E9 488905(4C070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2228 000043F0 8B0D(67070000)      <1>     mov ecx, dword [tfrLen]
  2229 000043F6 85C9                <1>     test ecx, ecx   ;If this is not zero, goto write
  2230 000043F8 751F                <1>     jnz .mainWrite  
  2231                              <1> ;Here we have a zero byte write, so either truncate or have an extend
  2232 000043FA F605(62070000)FF    <1>     test byte [fileGrowing], -1
  2233 00004401 750B                <1>     jnz .extend
  2234                              <1> ;Here we truncate where needed
  2235 00004403 8B05(43070000)      <1>     mov eax, dword [currClustD] ;We must free the chain from currClustD
  2236 00004409 E800C6FFFF          <1>     call truncateFAT    ;Truncate from the current cluster 
  2237                              <1> .extend:
  2238 0000440E 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2239 00004411 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  2240 00004414 E91C010000          <1>     jmp .noByteExit ;Exit ok!
  2241                              <1> .mainWrite:
  2242 00004419 F605(26040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  2243 00004420 7407                <1>     jz .mainWriteNoBreak
  2244 00004422 50                  <1>     push rax
  2245 00004423 E860DEFFFF          <1>     call checkBreak
  2246 00004428 58                  <1>     pop rax
  2247                              <1> .mainWriteNoBreak:
  2248 00004429 E827C3FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuff var for sector in rax
  2249 0000442E 0F82FA000000        <1>     jc .badExit
  2250 00004434 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rdi
  2251 00004438 0FB71D(54070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2252 0000443F 4801DF              <1>     add rdi, rbx    ;Shift rdi by that amount into the sector
  2253                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2254                              <1>     ; 1) Sector size, 2) Bytes left to read from Request, 
  2255                              <1>     ; 3) Number of bytes left free in the sector
  2256 00004442 31C0                <1>     xor eax, eax
  2257 00004444 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2258 00004448 89D8                <1>     mov eax, ebx
  2259 0000444A 662B05(54070000)    <1>     sub ax, word [currByteS]   ;Get # of bytes in sector we are in
  2260 00004451 8B0D(6B070000)      <1>     mov ecx, dword [tfrCntr]
  2261                              <1> 
  2262 00004457 39D9                <1>     cmp ecx, ebx    ;If tfrCntr - wBytesPerSector < 0
  2263 00004459 0F47CB              <1>     cmova ecx, ebx
  2264 0000445C 39C1                <1>     cmp ecx, eax    ;If small - #bytesleft < 0 
  2265 0000445E 0F47C8              <1>     cmova ecx, eax
  2266                              <1> 
  2267 00004461 56                  <1>     push rsi
  2268 00004462 488B35(0B040000)    <1>     mov rsi, qword [currentDTA]
  2269 00004469 51                  <1>     push rcx
  2270 0000446A F3A4                <1>     rep movsb
  2271 0000446C 59                  <1>     pop rcx
  2272 0000446D E823C1FFFF          <1>     call markBufferDirty   ;Preserves all CPU state 
  2273                              <1> 
  2274 00004472 010D(56070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2275 00004478 290D(6B070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2276 0000447E 488935(0B040000)    <1>     mov qword [currentDTA], rsi ;rsi has been shifted by ecx on entry amount
  2277                              <1> 
  2278 00004485 488B35(2D070000)    <1>     mov rsi, qword [currBuff]    ;Get current disk buffer
  2279 0000448C 488D7630            <1>     lea rsi, qword [rsi + bufferHdr.dataarea]   ;Shift the ptr to the first data byte
  2280 00004490 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] 
  2281 00004494 4801DE              <1>     add rsi, rbx    ;Point rsi to the end of the disk buffer
  2282 00004497 4839F7              <1>     cmp rdi, rsi    ;If current pos - end < 0, jump
  2283 0000449A 5E                  <1>     pop rsi
  2284 0000449B 7207                <1>     jb short .skipWritethrough
  2285 0000449D E8ACC0FFFF          <1>     call writeThroughBuffer ;Write thru this disk buffer now it is full
  2286 000044A2 7271                <1>     jc .exitPrepHardErr
  2287                              <1> .skipWritethrough:
  2288 000044A4 8B05(67070000)      <1>     mov eax, dword [tfrLen] ;Get total length
  2289 000044AA 8B0D(6B070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2290 000044B0 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2291 000044B2 0F8488000000        <1>     jz writeExit
  2292 000044B8 E8E1C4FFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
  2293 000044BD 7256                <1>     jc .exitPrepHardErr
  2294 000044BF 3DFFFFFFFF          <1>     cmp eax, -1
  2295 000044C4 753A                <1>     jne .noExtend
  2296                              <1>     ;Here we need to extend by a cluster
  2297 000044C6 8B05(43070000)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2298 000044CC 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2299 000044CE B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2300 000044D3 E803C4FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2301 000044D8 723B                <1>     jc .exitPrepHardErr
  2302 000044DA 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2303 000044DC 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2304 000044E0 011D(63070000)      <1>     add dword [bytesAppend], ebx    ;Add a bytes per sector to filesize
  2305 000044E6 C605(62070000)FF    <1>     mov byte [fileGrowing], -1
  2306 000044ED E8ACC4FFFF          <1>     call getNextSectorOfFile    ;Now we walk to chain to the new cluster
  2307 000044F2 7221                <1>     jc .exitPrepHardErr
  2308 000044F4 3DFFFFFFFF          <1>     cmp eax, -1
  2309 000044F9 B805000000          <1>     mov eax, errAccDen
  2310 000044FE 7415                <1>     je .exitPrepHardErr
  2311                              <1> .noExtend:
  2312 00004500 66C705(54070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2312 00004508 00                  <1>
  2313 00004509 488B05(4C070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2314 00004510 E904FFFFFF          <1>     jmp .mainWrite
  2315                              <1> .exitPrepHardErr:
  2316 00004515 50                  <1>     push rax    ;Save error code
  2317 00004516 E825000000          <1>     call writeExit
  2318 0000451B 58                  <1>     pop rax
  2319                              <1> .badExitHard:    ;AL has error code already
  2320 0000451C E80BC0FFFF          <1>     call cancelWriteThroughBuffers
  2321 00004521 B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2322 00004526 FF15(23010000)      <1>     call qword [updateDirShare]
  2323 0000452C F9                  <1>     stc
  2324                              <1>     return
    13                              <2> %%_ret:
    14 0000452D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2325                              <1> .badExit:
  2326                              <1> ;Might need to do some weird stuff later. Leave for now
  2327 0000452E B805000000          <1>     mov eax, errAccDen
  2328 00004533 EBE7                <1>     jmp short .badExitHard
  2329                              <1> 
  2330                              <1> .noByteExit:
  2331 00004535 B802000000          <1>     mov eax, 2  ;Update last accessed fields of SFT
  2332 0000453A FF15(23010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default so keep xor after
  2333                              <1> writeExit:
  2334                              <1> ;Advances the bytes on the file pointer
  2335                              <1> ;Return: ecx = Number of bytes transferred
  2336 00004540 488B3D(21070000)    <1>     mov rdi, qword [currentSFT]
  2337 00004547 E84B000000          <1>     call updateCurrentSFT
  2338 0000454C 85C9                <1>     test ecx, ecx   ;If no bytes transferred, dont flush
  2339 0000454E 7404                <1>     jz .noFlush
  2340 00004550 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2341                              <1> .noFlush:
  2342 00004554 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2343 0000455A 750E                <1>     jnz .exit
  2344 0000455C 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]
  2345 0000455F 39471B              <1>     cmp dword [rdi + sft.dCurntOff], eax
  2346 00004562 7606                <1>     jbe .exit   ;Don't change filesize unless offset is past the Filesize
  2347 00004564 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2348 00004567 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  2349                              <1> .exit:
  2350 0000456A B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2351 0000456F FF15(23010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2352 00004575 F8                  <1>     clc
  2353                              <1>     return
    13                              <2> %%_ret:
    14 00004576 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2354                              <1> writeExitChar:
  2355                              <1> ;Input: eax = Number of chars transferred
  2356 00004577 8B0D(67070000)      <1>     mov ecx, dword [tfrLen]
  2357 0000457D 29C1                <1>     sub ecx, eax    ;Get chars left to xfr
  2358 0000457F 890D(6B070000)      <1>     mov dword [tfrCntr], ecx
  2359 00004585 EBB9                <1>     jmp short writeExit
  2360                              <1> ;-----------------------------------:
  2361                              <1> ;        File Handle routines       :
  2362                              <1> ;-----------------------------------:
  2363                              <1> 
  2364                              <1> setCurrentSFT:
  2365                              <1> ;Set the pointer in rdi as current SFT 
  2366 00004587 48893D(21070000)    <1>     mov qword [currentSFT], rdi
  2367                              <1>     return 
    13                              <2> %%_ret:
    14 0000458E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2368                              <1> getCurrentSFT:
  2369                              <1> ;Get the current SFT pointer in rdi
  2370 0000458F 488B3D(21070000)    <1>     mov rdi, qword [currentSFT]
  2371                              <1>     return 
    13                              <2> %%_ret:
    14 00004596 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2372                              <1> updateCurrentSFT:
  2373                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2374                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2375 00004597 57                  <1>     push rdi
  2376 00004598 488B3D(21070000)    <1>     mov rdi, qword [currentSFT]
  2377 0000459F E8BF010000          <1>     call getBytesTransferred
  2378 000045A4 67E327              <1>     jecxz .exit ;Skip this if ecx = 0
  2379                              <1>     ;ecx has bytes transferred
  2380 000045A7 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2381 000045AD 751F                <1>     jnz .exit
  2382 000045AF 50                  <1>     push rax
  2383 000045B0 8B05(43070000)      <1>     mov eax, dword [currClustD]
  2384 000045B6 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2385 000045B9 8B05(3F070000)      <1>     mov eax, dword [currClustF]
  2386 000045BF 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2387 000045C2 58                  <1>     pop rax
  2388 000045C3 51                  <1>     push rcx
  2389 000045C4 8B0D(56070000)      <1>     mov ecx, dword [currByteF]
  2390 000045CA 894F1B              <1>     mov dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  2391 000045CD 59                  <1>     pop rcx
  2392                              <1> .exit:
  2393 000045CE 5F                  <1>     pop rdi
  2394 000045CF F8                  <1>     clc
  2395                              <1>     return 
    13                              <2> %%_ret:
    14 000045D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2396                              <1> 
  2397                              <1> setupVarsForTransfer:
  2398                              <1> ;Computes the actual bytes to be transferred and 
  2399                              <1> ; sets up internal variables for the transfer. 
  2400                              <1> ;Works for both reading and writing
  2401                              <1> ;Input: ecx = User desired Bytes to transfer
  2402                              <1> ;       rdi = SFT pointer for the file
  2403                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2404                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2405                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2406                              <1> ;
  2407                              <1> ;Note: Does not account for a FULL disk. When writing,
  2408                              <1> ; if the disk will get full as a result of the write,
  2409                              <1> ; stop at the last byte before the transfer. If the 
  2410                              <1> ; file pointer is past the last free byte, write 0
  2411 000045D1 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2412 000045D5 488935(F9060000)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2413 000045DC 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2414 000045DF 8905(56070000)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2415 000045E5 890D(67070000)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2416 000045EB 890D(6B070000)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2417 000045F1 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2418 000045F7 7402                <1>     jz setupVarsForDiskTransfer
  2419 000045F9 F8                  <1>     clc
  2420                              <1>     return
    13                              <2> %%_ret:
    14 000045FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2421                              <1> setupVarsForDiskTransfer:
  2422                              <1> ;Extension of the above, but for Disk files only
  2423                              <1> ;Input: ecx = User desired Bytes to transfer
  2424                              <1> ;       rdi = SFT pointer for the file
  2425                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred, if it is possible
  2426                              <1> ;        CF=CY: Error exit
  2427 000045FB 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2428 000045FE 8905(56070000)      <1>     mov dword [currByteF], eax
  2429 00004604 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2430                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2431 00004608 48892D(F9060000)    <1>     mov qword [workingDPB], rbp
  2432 0000460F 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2433 00004612 881D(F8060000)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2434 00004618 8B05(56070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2435 0000461E 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2436 00004622 31D2                <1>     xor edx, edx    ;Zero rdx
  2437 00004624 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2438                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2439                              <1>     ;edx has the offset into that sector
  2440 00004626 8905(47070000)      <1>     mov dword [currSectF], eax
  2441 0000462C 668915(54070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2442 00004633 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2443 00004635 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2444 00004638 8805(4B070000)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2445 0000463E 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2446 00004640 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  2447 00004643 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2448 00004645 8915(3F070000)      <1>     mov dword [currClustF], edx ;Save in var
  2449 0000464B 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2450                              <1> .exit:
  2451 0000464D F8                  <1>     clc
  2452                              <1>     return 
    13                              <2> %%_ret:
    14 0000464E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2453                              <1> findFreeSFT:
  2454                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2455                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2456                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2457                              <1> ;        CF=CY => eax = errNhl, error exit
  2458 0000464F 31DB                <1>     xor ebx, ebx
  2459                              <1> .mainLp:
  2460 00004651 53                  <1>     push rbx    ;Save the sft ndx
  2461 00004652 E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2462 00004657 5B                  <1>     pop rbx
  2463 00004658 7307                <1>     jnc .sftExists
  2464 0000465A B804000000          <1>     mov eax, errNhl
  2465 0000465F F9                  <1>     stc
  2466                              <1>     return
    13                              <2> %%_ret:
    14 00004660 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2467                              <1> .sftExists:
  2468 00004661 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2469 00004666 7427                <1>     je .sftFound
  2470 00004668 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2471 0000466D 751C                <1>     jne .gotoNextNdx
  2472                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2473 0000466F 53                  <1>     push rbx
  2474 00004670 488B1D(2F040000)    <1>     mov rbx, qword [serverPSP]
  2475 00004677 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  2476 0000467B 750B                <1>     jne .netGoToNextNdx
  2477 0000467D 0FB71D(37040000)    <1>     movzx ebx, word [machineNum]
  2478 00004684 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  2479                              <1> .netGoToNextNdx:
  2480 00004688 5B                  <1>     pop rbx
  2481 00004689 7404                <1>     je .sftFound
  2482                              <1> .gotoNextNdx:
  2483 0000468B FFC3                <1>     inc ebx
  2484 0000468D EBC2                <1>     jmp short .mainLp
  2485                              <1> .sftFound:
  2486 0000468F 53                  <1>     push rbx
  2487 00004690 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2488 00004695 488B1D(2F040000)    <1>     mov rbx, qword [serverPSP]
  2489 0000469C 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  2490 000046A0 0FB71D(37040000)    <1>     movzx ebx, word [machineNum]
  2491 000046A7 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  2492 000046AB 5B                  <1>     pop rbx
  2493 000046AC F8                  <1>     clc
  2494                              <1>     return
    13                              <2> %%_ret:
    14 000046AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2495                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216h
  2496                              <1> ;Return a pointer to the SFT entry in rdi
  2497                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2498                              <1> ;Output: rdi = SFT pointer
  2499 000046AE 488B3D(37000000)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2500                              <1> .walk:
  2501 000046B5 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2502 000046B9 7212                <1>     jb .thisTable
  2503 000046BB 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2504 000046BF 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2505 000046C2 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2506 000046C9 75EA                <1>     jne .walk
  2507 000046CB F9                  <1>     stc
  2508                              <1>     return
    13                              <2> %%_ret:
    14 000046CC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2509                              <1> .thisTable:
  2510 000046CD 50                  <1>     push rax
  2511 000046CE 52                  <1>     push rdx
  2512 000046CF B84F000000          <1>     mov eax, sft_size
  2513 000046D4 F7E3                <1>     mul ebx
  2514 000046D6 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2515 000046D9 5A                  <1>     pop rdx
  2516 000046DA 58                  <1>     pop rax
  2517 000046DB 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2518                              <1>     return
    13                              <2> %%_ret:
    14 000046E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2519                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
  2520                              <1> ;Return a zero extended value in rdi for the SFT entry
  2521                              <1> ;Input: bx = JFT handle (we zero extend)
  2522                              <1> ;Output: CF=NC => rdi = Points to first SFT ndx or -1 => free space
  2523                              <1> ;        CF=CY => al = Error code, Fail
  2524 000046E3 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  2525 000046E6 488B3D(13040000)    <1>     mov rdi, qword [currentPSP]
  2526 000046ED 663B5F4E            <1>     cmp bx, word [rdi + psp.jftSize] ;jftSize is the size of the JFT array
  2527 000046F1 7204                <1>     jb .ok
  2528 000046F3 B006                <1>     mov al, errBadHdl
  2529 000046F5 F9                  <1>     stc
  2530                              <1>     return
    13                              <2> %%_ret:
    14 000046F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2531                              <1> .ok:
  2532 000046F7 66817F4E1400        <1>     cmp word [rdi + psp.jftSize], dfltJFTsize   ;Are we in PSP JFT or external?
  2533 000046FD 7412                <1>     je .pspJftOk    ;If dfltJFTsize, its a good PSP JFT.
  2534 000046FF 720A                <1>     jb .pspJftBelow ;If < dfltJFTsize, in PSP and needs to be corrected
  2535 00004701 488B7F2A            <1>     mov rdi, qword [rdi + psp.externalJFTPtr]   ;Get the ptr to the external JFT
  2536 00004705 488D3C1F            <1>     lea rdi, qword [rdi + rbx]  ;Get pointer into JFT
  2537 00004709 EB0B                <1>     jmp short .pspOkExit
  2538                              <1> .pspJftBelow:
  2539 0000470B 66C7474E1400        <1>     mov word [rdi + psp.jftSize], dfltJFTsize  ;Reset to dfltJFTsize if needed!
  2540                              <1> .pspJftOk:
  2541 00004711 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  2542                              <1> .pspOkExit:
  2543 00004716 F8                  <1>     clc
  2544                              <1>     return
    13                              <2> %%_ret:
    14 00004717 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2545                              <1> findFreeJFTEntry:
  2546                              <1> ;Finds a free JFT entry in the currentPSP.
  2547                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  2548                              <1> ;        CF=CY => al=errNhl
  2549 00004718 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  2550                              <1> .searchLp:
  2551 0000471A E8C4FFFFFF          <1>     call getJFTPtr
  2552 0000471F 7209                <1>     jc .badExit
  2553 00004721 803FFF              <1>     cmp byte [rdi], -1
  2554                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004724 74F1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2555 00004726 FFC3                <1>     inc ebx
  2556 00004728 EBF0                <1>     jmp short .searchLp
  2557                              <1> .badExit:
  2558 0000472A B004                <1>     mov al, errNhl
  2559 0000472C F9                  <1>     stc
  2560                              <1>     return
    13                              <2> %%_ret:
    14 0000472D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2561                              <1> getSFTPtr:
  2562                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  2563                              <1> ;Input: bx = JFT handle
  2564                              <1> ;Output: CF=NC: rdi = SFT pointer
  2565                              <1> ;        CF=CY: Error, ax=Error code
  2566 0000472E E815000000          <1>     call derefSFTPtr
  2567                              <1>     retc    ;Return if carry
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004733 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2568 00004735 50                  <1>     push rax
  2569 00004736 0FB705(37040000)    <1>     movzx eax, word [machineNum]
  2570 0000473D 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  2571 00004741 58                  <1>     pop rax
  2572                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004742 74E9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2573 00004744 B006                <1>     mov al, errBadHdl   ;Error code
  2574 00004746 F9                  <1>     stc         ;Reset CF
  2575                              <1>     return
    13                              <2> %%_ret:
    14 00004747 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2576                              <1> 
  2577                              <1> derefSFTPtr:
  2578                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  2579                              <1> ;Input: bx = File handle (gets zero extended)
  2580                              <1> ;Output: CF=NC: rdi = SFT pointer
  2581                              <1> ;        CF=CY: Error, ax=Error code
  2582 00004748 E896FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  2583 0000474D 7205                <1>     jb .fail
  2584 0000474F 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  2585 00004752 7504                <1>     jne .ok
  2586                              <1> .fail:
  2587 00004754 B006                <1>     mov al, errBadHdl
  2588 00004756 F9                  <1>     stc
  2589                              <1>     return
    13                              <2> %%_ret:
    14 00004757 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2590                              <1> .ok:
  2591 00004758 53                  <1>     push rbx    ;Preserve the JFT handle
  2592 00004759 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  2593 0000475C E84DFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  2594 00004761 5B                  <1>     pop rbx 
  2595                              <1>     return
    13                              <2> %%_ret:
    14 00004762 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2596                              <1> 
  2597                              <1> getBytesTransferred:
  2598 00004763 8B0D(6B070000)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2599 00004769 F7D9                <1>     neg ecx ;Multiply by -1
  2600 0000476B 030D(67070000)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2601                              <1>     return ;Return bytes transferred in ecx
    13                              <2> %%_ret:
    14 00004771 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2602                              <1> 
  2603                              <1> getSFTndxInheritable:
  2604                              <1> ;Given a SFTndx this function will verify if it is inheritable
  2605                              <1> ;Input: ebx = SFTndx (word)
  2606                              <1> ;Output: 
  2607                              <1> ;   ZF=ZE => Inheritable
  2608                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  2609 00004772 57                  <1>     push rdi
  2610 00004773 E836FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  2611 00004778 7208                <1>     jc .badNdx
  2612 0000477A 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  2613 00004780 5F                  <1>     pop rdi
  2614                              <1>     return
    13                              <2> %%_ret:
    14 00004781 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2615                              <1> .badNdx:
  2616 00004782 31FF                <1>     xor edi, edi
  2617 00004784 FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  2618 00004786 F8                  <1>     clc
  2619 00004787 5F                  <1>     pop rdi
  2620                              <1>     return
    13                              <2> %%_ret:
    14 00004788 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2621                              <1> 
  2622                              <1> incrementOpenCount:
  2623                              <1> ;Given a SFTndx, this function will increment it's open count
  2624                              <1> ;Output:
  2625                              <1> ;   CF=NC => sftndx ok, count incremented
  2626                              <1> ;   CF=CY => Bad ndx
  2627 00004789 57                  <1>     push rdi
  2628 0000478A E81FFFFFFF          <1>     call getSFTPtrfromSFTNdx
  2629 0000478F 7203                <1>     jc .exit
  2630 00004791 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  2631                              <1> .exit:
  2632 00004794 5F                  <1>     pop rdi
  2633                              <1>     return
    13                              <2> %%_ret:
    14 00004795 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2634                              <1> 
  2635                              <1> decrementOpenCount: ;Int 4Fh AX = 1208h
  2636                              <1> ;Input: rdi = SFT pointer
  2637                              <1> ;Output: ax = Original wNumHandles count
  2638 00004796 9C                  <1>     pushfq
  2639 00004797 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2640 0000479A FFC8                <1>     dec eax     ;Decrement count
  2641 0000479C 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2642 0000479E FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2643                              <1> .exit:
  2644 000047A0 9D                  <1>     popfq
  2645 000047A1 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2646                              <1>     return
    13                              <2> %%_ret:
    14 000047A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2647                              <1> 
  2648                              <1> ;Buffer Wrappers
  2649                              <1> writeThroughBuffersForHandle:
  2650                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2651 000047A5 57                  <1>     push rdi
  2652 000047A6 55                  <1>     push rbp
  2653 000047A7 488B3D(21070000)    <1>     mov rdi, qword [currentSFT]
  2654 000047AE 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2655 000047B4 751C                <1>     jnz .exit
  2656 000047B6 FF35(F9060000)      <1>     push qword [workingDPB]
  2657 000047BC 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2658 000047C0 48892D(F9060000)    <1>     mov qword [workingDPB], rbp
  2659 000047C7 E897BDFFFF          <1>     call writeThroughBuffers
  2660 000047CC 8F05(F9060000)      <1>     pop qword [workingDPB]
  2661                              <1> .exit:
  2662 000047D2 5D                  <1>     pop rbp
  2663 000047D3 5F                  <1>     pop rdi
  2664                              <1>     return
    13                              <2> %%_ret:
    14 000047D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2665                              <1> 
  2666                              <1> cancelWriteThroughBuffersForHandle:
  2667                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2668 000047D5 57                  <1>     push rdi
  2669 000047D6 55                  <1>     push rbp
  2670 000047D7 488B3D(21070000)    <1>     mov rdi, qword [currentSFT]
  2671 000047DE 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2672 000047E4 751C                <1>     jnz .exit
  2673 000047E6 FF35(F9060000)      <1>     push qword [workingDPB]
  2674 000047EC 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2675 000047F0 48892D(F9060000)    <1>     mov qword [workingDPB], rbp
  2676 000047F7 E830BDFFFF          <1>     call cancelWriteThroughBuffers
  2677 000047FC 8F05(F9060000)      <1>     pop qword [workingDPB]
  2678                              <1> .exit:
  2679 00004802 5D                  <1>     pop rbp
  2680 00004803 5F                  <1>     pop rdi
  2681                              <1>     return
    13                              <2> %%_ret:
    14 00004804 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    36                                  %include "./Source/Kernel/FileIO/ioctl.asm"
     1                              <1> ioctrl:            ;ah = 44h, handle function
     2                              <1> ;Possible subfunctions
     3                              <1> ;======================================================
     4                              <1> ;Handle Information Functions                         |
     5                              <1> ;al = 00h => Get Handle Information word in dx        x
     6                              <1> ;al = 01h => Set Handle Information word              x
     7                              <1> ;======================================================
     8                              <1> ;IO Control String Functions (optionally implemented) |
     9                              <1> ;al = 02h => Read from Char device                    x
    10                              <1> ;al = 03h => Write to Char device                     x
    11                              <1> ;al = 04h => Read from Block device                   x
    12                              <1> ;al = 05h => Write to Block device                    x
    13                              <1> ;======================================================
    14                              <1> ;IO Status Functions (optionally implemented)         |
    15                              <1> ;al = 06h => Get input status                         x
    16                              <1> ;al = 07h => Get output status                        x
    17                              <1> ;======================================================
    18                              <1> ;Device information (optionally implemented)          |  
    19                              <1> ;al = 08h => Is a block device removable?       
    20                              <1> ;al = 09h => Is a logical device local or remote?   
    21                              <1> ;al = 0Ah => Is a handle to a local or remote file?
    22                              <1> ;======================================================
    23                              <1> ;SHARE.EXE control                                    |
    24                              <1> ;al = 0Bh => Change sharing retry count               x  
    25                              <1> ;======================================================
    26                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    27                              <1> ;======================================================
    28                              <1> ;Generic IOCTL string (optionally implemented)
    29                              <1> ;al = 0Dh => Block device Generic IOCTL request    
    30                              <1> ;======================================================
    31                              <1> ;Disk Drive change drive (optionally implemented)
    32                              <1> ;al = 0Eh => Get logical device                 
    33                              <1> ;al = 0Fh => Set logical device  
    34                              <1> ;======================================================
    35 00004805 3C0F                <1>     cmp al, 15
    36 00004807 7747                <1>     ja .invalidFunction
    37 00004809 84C0                <1>     test al, al
    38 0000480B 745B                <1>     jz .getDevWord
    39 0000480D 3C01                <1>     cmp al, 1
    40 0000480F 746E                <1>     je .setDevWord
    41 00004811 2C02                <1>     sub al, 2
    42 00004813 3C03                <1>     cmp al, 3
    43 00004815 7673                <1>     jbe .ioctlStringFunctions
    44 00004817 2C04                <1>     sub al, 4
    45 00004819 3C01                <1>     cmp al, 1
    46 0000481B 0F8681010000        <1>     jbe .ioStatusFunctions
    47 00004821 2C02                <1>     sub al, 2
    48 00004823 3C02                <1>     cmp al, 2
    49 00004825 0F8644020000        <1>     jbe .devControl
    50 0000482B 2C03                <1>     sub al, 3
    51 0000482D 0F840F030000        <1>     jz .setSharingCount
    52 00004833 FEC8                <1>     dec al
    53 00004835 0F8425030000        <1>     jz .genericCharDevIOCTL
    54 0000483B FEC8                <1>     dec al
    55 0000483D 0F844B030000        <1>     jz .genericBlokDevIOCTL
    56 00004843 FEC8                <1>     dec al
    57 00004845 0F840A040000        <1>     jz .getDrvLogicalDevice
    58 0000484B E981040000          <1>     jmp .setDrvLogicalDevice
    59                              <1> .invalidFunction:
    60 00004850 B801000000          <1>     mov eax, errInvFnc
    61                              <1> .ifExit:
    62 00004855 E9F3220000          <1>     jmp extErrExit
    63                              <1> .accessDeniedError:
    64 0000485A B805000000          <1>     mov eax, errAccDen
    65 0000485F EBF4                <1>     jmp short .ifExit
    66                              <1> .badHandle:
    67 00004861 B806000000          <1>     mov eax, errBadHdl
    68 00004866 EBED                <1>     jmp short .ifExit
    69                              <1> 
    70                              <1> ;...Functions...
    71                              <1> .getDevWord:
    72                              <1> ;Input: bx = File Handle
    73 00004868 E8DBFEFFFF          <1>     call derefSFTPtr
    74 0000486D 72F2                <1>     jc .badHandle
    75 0000486F 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    76 00004873 30C0                <1>     xor al, al
    77 00004875 E82B1E0000          <1>     call getUserRegs
    78 0000487A 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    79                              <1>     return
    13                              <2> %%_ret:
    14 0000487E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .setDevWord:
    81                              <1> ;Input: bx = File Handle
    82                              <1> ;       dl = Low byte of Device information word
    83 0000487F E8C4FEFFFF          <1>     call derefSFTPtr
    84 00004884 72DB                <1>     jc .badHandle 
    85 00004886 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    86                              <1>     return
    13                              <2> %%_ret:
    14 00004889 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    87                              <1> .ioctlStringFunctions:
    88                              <1> ;al = 0 -> ReadCharDev
    89                              <1> ;al = 1 -> WriteCharDev
    90                              <1> ;al = 2 -> ReadDiskDev
    91                              <1> ;al = 3 -> WriteDiskDev
    92                              <1> ;Input: bx = File handle/drive number
    93                              <1> ;       ecx = Bytes to transfer
    94                              <1> ;       rdx = Ptr to string to transfer
    95 0000488A 0FB6F3              <1>     movzx esi, bl
    96 0000488D 488D1D(B4040000)    <1>     lea rbx, primReqHdr
    97 00004894 C605(FE030000)01    <1>     mov byte [errorLocus], eLocUnk
    98 0000489B C605(5B040000)00    <1>     mov byte [Int44bitfld], 0
    99                              <1> ;Get in rdi the ptr to the SFT for the handle we are looking at
   100                              <1> ;Setup the common ioReqPkt fields and the read/write 
   101 000048A2 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   102 000048A5 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   103 000048A8 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   104 000048AC 51                  <1>     push rcx
   105 000048AD 52                  <1>     push rdx
   106 000048AE B903000000          <1>     mov ecx, drvIOCTLREAD
   107 000048B3 BA0C000000          <1>     mov edx, drvIOCTLWRITE
   108 000048B8 A801                <1>     test al, 1  ;If set, this is a write operation
   109 000048BA 0F45CA              <1>     cmovnz ecx, edx ;Move write command into ecx
   110 000048BD 7507                <1>     jnz .notWrite
   111 000048BF 800D(5B040000)01    <1>     or byte [Int44bitfld], critWrite
   112                              <1> .notWrite:
   113 000048C6 5A                  <1>     pop rdx
   114 000048C7 59                  <1>     pop rcx
   115 000048C8 884B02              <1>     mov byte [rbx + ioReqPkt.cmdcde], cl
   116 000048CB 3C01                <1>     cmp al, 1
   117 000048CD 772F                <1>     ja .ioctlStringBlockDevice
   118                              <1>     ;Here we are for char devices only
   119 000048CF 4887DE              <1>     xchg rbx, rsi    ;Save the driver ptr to rsi and the handle to ebx 
   120 000048D2 E871FEFFFF          <1>     call derefSFTPtr    ;Get the sft ptr in rdi
   121 000048D7 7288                <1>     jc .badHandle 
   122 000048D9 C605(FE030000)04    <1>     mov byte [errorLocus], eLocChr
   123 000048E0 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Bit must be set
   124 000048E6 0F8464FFFFFF        <1>     jz .invalidFunction
   125                              <1> 
   126 000048EC 488B5F07            <1>     mov rbx, qword [rdi + sft.qPtr] ;Get ptr to device driver
   127 000048F0 800D(5B040000)80    <1>     or byte [Int44bitfld], critCharDev
   128 000048F7 4887DE              <1>     xchg rbx, rsi   ;Swap back
   129 000048FA 31C0                <1>     xor eax, eax
   130 000048FC EB38                <1>     jmp short .ioctlStringCommon
   131                              <1> .ioctlStringBlockDevice:
   132                              <1>     ;Here we are for block devices only
   133                              <1>     ;esi has the drive number
   134 000048FE C605(FE030000)02    <1>     mov byte [errorLocus], eLocDsk
   135 00004905 89F0                <1>     mov eax, esi
   136 00004907 53                  <1>     push rbx
   137 00004908 E8251E0000          <1>     call getCDS ;Returns in al the unit number of the drive
   138 0000490D 5B                  <1>     pop rbx
   139 0000490E 730A                <1>     jnc .okDrive
   140 00004910 B80F000000          <1>     mov eax, errBadDrv
   141 00004915 E933220000          <1>     jmp extErrExit
   142                              <1> .okDrive:
   143 0000491A 488B35(01070000)    <1>     mov rsi, qword [workingCDS]
   144 00004921 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]
   145 00004925 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   146 00004928 884301              <1>     mov byte [rbx + ioReqPkt.unitnm], al
   147 0000492B 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   148 0000492F 8A4623              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   149 00004932 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] 
   150                              <1> .ioctlStringCommon:
   151                              <1>     ;rsi -> Device Driver header
   152                              <1>     ;rbx -> Request Header
   153                              <1>     ;al = Media descriptor
   154 00004936 88430D              <1>     mov byte [rbx + ioReqPkt.medesc], al
   155 00004939 66F746080040        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLRW
   156 0000493F 0F840BFFFFFF        <1>     jz .invalidFunction ;If not supported, invalid function error 
   157                              <1>     ;Make request now
   158                              <1> .ioctlStringCommonRetry:
   159 00004945 51                  <1>     push rcx    ;Push xfrctr
   160 00004946 52                  <1>     push rdx    ;Buffer Ptr
   161 00004947 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   162 0000494D E81E190000          <1>     call goDriver
   163 00004952 5A                  <1>     pop rdx
   164 00004953 59                  <1>     pop rcx
   165                              <1> ;Check status, if bad, reuse ecx and rdx for tfrlen and bufptr and go again
   166 00004954 66F743030080        <1>     test word [rbx + ioReqPkt.status], drvErrStatus
   167 0000495A 0F84DF210000        <1>     jz extGoodExit
   168 00004960 800D(5B040000)18    <1>     or byte [Int44bitfld], critFailOK | critRetryOK | critFailOK
   169 00004967 8A4301              <1>     mov al, byte [rbx + ioReqPkt.unitnm]
   170 0000496A 8A25(5B040000)      <1>     mov ah, byte [Int44bitfld]
   171 00004970 48893D(03040000)    <1>     mov qword [xInt44RDI], rdi
   172 00004977 480FB67B03          <1>     movzx rdi, byte [rbx + ioReqPkt.status] ;Get low word of status (errorcde)
   173 0000497C E89D130000          <1>     call criticalDOSError
   174 00004981 488B3D(03040000)    <1>     mov rdi, qword [xInt44RDI]
   175 00004988 3C00                <1>     cmp al, critIgnore
   176 0000498A 0F84AF210000        <1>     je extGoodExit 
   177 00004990 3C01                <1>     cmp al, critRetry
   178 00004992 74B1                <1>     je .ioctlStringCommonRetry
   179 00004994 0FB64303            <1>     movzx eax, byte [rbx + ioReqPkt.status]    ;Get the error code into al
   180 00004998 0513000000          <1>     add eax, drvErrShft ;Convert to general error code
   181 0000499D E9AB210000          <1>     jmp extErrExit
   182                              <1> 
   183                              <1> 
   184                              <1> .ioStatusFunctions:
   185                              <1> ;al = 0 -> Get input status 
   186                              <1> ;al = 1 -> Get output status
   187 000049A2 E8A1FDFFFF          <1>     call derefSFTPtr
   188 000049A7 0F82B4FEFFFF        <1>     jc .badHandle 
   189 000049AD 488D1D(B4040000)    <1>     lea rbx, primReqHdr
   190 000049B4 C6030D              <1>     mov byte [rbx + statusReqPkt.hdrlen], statusReqPkt_size
   191 000049B7 C605(FE030000)01    <1>     mov byte [errorLocus], eLocUnk
   192 000049BE 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;File cannot be redir!
   193 000049C4 0F8586FEFFFF        <1>     jnz .invalidFunction
   194 000049CA C605(5B040000)00    <1>     mov byte [Int44bitfld], 0
   195 000049D1 B906000000          <1>     mov ecx, drvINSTATUS
   196 000049D6 BA0A000000          <1>     mov edx, drvOUTSTATUS
   197 000049DB 84C0                <1>     test al, al
   198 000049DD 0F45CA              <1>     cmovnz ecx, edx
   199 000049E0 884B02              <1>     mov byte [rbx + statusReqPkt.cmdcde], cl
   200 000049E3 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   201 000049E9 7416                <1>     jz .ioStatDisk
   202 000049EB C605(FE030000)04    <1>     mov byte [errorLocus], eLocChr
   203 000049F2 800D(5B040000)80    <1>     or byte [Int44bitfld], critCharDev
   204 000049F9 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr]
   205 000049FD 30C0                <1>     xor al, al
   206 000049FF EB15                <1>     jmp short .ioStatCommon
   207                              <1> .ioStatDisk:
   208 00004A01 C605(FE030000)02    <1>     mov byte [errorLocus], eLocDsk
   209 00004A08 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB ptr
   210 00004A0C 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   211 00004A0F 884301              <1>     mov byte [rbx + statusReqPkt.unitnm], al
   212 00004A12 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   213                              <1> .ioStatCommon:
   214 00004A16 E855180000          <1>     call goDriver
   215 00004A1B 66F743030080        <1>     test word [rbx + statusReqPkt.status], drvErrStatus
   216 00004A21 743E                <1>     jz .ioStatOk
   217                              <1>     ;Error handling here
   218                              <1> 
   219 00004A23 800D(5B040000)18    <1>     or byte [Int44bitfld], critFailOK | critRetryOK | critFailOK
   220 00004A2A 8A4301              <1>     mov al, byte [rbx + statusReqPkt.unitnm]
   221 00004A2D 8A25(5B040000)      <1>     mov ah, byte [Int44bitfld]
   222 00004A33 48893D(03040000)    <1>     mov qword [xInt44RDI], rdi
   223 00004A3A 480FB67B03          <1>     movzx rdi, byte [rbx + statusReqPkt.status]
   224 00004A3F E8DA120000          <1>     call criticalDOSError
   225 00004A44 488B3D(03040000)    <1>     mov rdi, qword [xInt44RDI]
   226 00004A4B 3C00                <1>     cmp al, critIgnore
   227 00004A4D 7412                <1>     je .ioStatOk 
   228 00004A4F 3C01                <1>     cmp al, critRetry
   229 00004A51 74C3                <1>     je .ioStatCommon
   230 00004A53 0FB64303            <1>     movzx eax, byte [rbx + statusReqPkt.status]    ;Get the error code into al
   231 00004A57 0513000000          <1>     add eax, drvErrShft ;Convert to general error code
   232 00004A5C E9EC200000          <1>     jmp extErrExit
   233                              <1> 
   234                              <1> .ioStatOk:
   235 00004A61 66F743030002        <1>     test word [rbx + statusReqPkt.status], drvBsyStatus
   236 00004A67 7403                <1>     jz .notBusyExit
   237 00004A69 B0FF                <1>     mov al, -1  ;Device Busy/EOF
   238                              <1>     return 
    13                              <2> %%_ret:
    14 00004A6B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> .notBusyExit:
   240                              <1> ;Device ready/NotEOF
   241 00004A6C 31C0                <1>     xor eax, eax
   242                              <1>     return
    13                              <2> %%_ret:
    14 00004A6E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> .devControl:
   245                              <1> ;al = 0 -> Is media removable?
   246                              <1> ;al = 1 -> Is device local or remote?
   247                              <1> ;al = 2 -> Is handle local or remote?
   248 00004A6F 84C0                <1>     test al, al
   249 00004A71 746D                <1>     jz .remTest
   250 00004A73 A801                <1>     test al, 1
   251 00004A75 751B                <1>     jnz .deviceTest
   252                              <1> ;Handle Local or Remote
   253 00004A77 E8CCFCFFFF          <1>     call derefSFTPtr    ;Get ptr in rdi
   254 00004A7C 0F82DFFDFFFF        <1>     jc .badHandle 
   255 00004A82 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo]
   256                              <1> .devControlExit:
   257 00004A86 E81A1C0000          <1>     call getUserRegs
   258 00004A8B 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   259 00004A8F 31C0                <1>     xor eax, eax
   260                              <1>     return 
    13                              <2> %%_ret:
    14 00004A91 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   261                              <1> .deviceTest:
   262                              <1> ;Drive Local or Remote
   263                              <1> ;For more compat, get the driver attrib word if local with bit 12 clear
   264                              <1> ;Else, just get the CDS word and swap subst and net
   265 00004A92 88D8                <1>     mov al, bl
   266 00004A94 E8991C0000          <1>     call getCDS
   267 00004A99 730A                <1>     jnc .devTestOkDrive
   268 00004A9B B80F000000          <1>     mov eax, errBadDrv
   269 00004AA0 E9A8200000          <1>     jmp extErrExit
   270                              <1> .devTestOkDrive:
   271 00004AA5 488B3D(01070000)    <1>     mov rdi, qword [workingCDS]
   272 00004AAC 668B5743            <1>     mov dx, word [rdi + cds.wFlags]
   273 00004AB0 66F7C20080          <1>     test dx, cdsRedirDrive   ;Check the remote bit
   274 00004AB5 7513                <1>     jnz .remoteDrive
   275 00004AB7 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   276 00004ABB 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   277 00004ABF 668B5708            <1>     mov dx, word [rdi + drvHdr.attrib]
   278 00004AC3 6681E2FFCF          <1>     and dx, ~3000h  ;Clear bits 12 and 13
   279 00004AC8 EBBC                <1>     jmp short .devControlExit
   280                              <1> .remoteDrive:
   281 00004ACA 6689D3              <1>     mov bx, dx
   282 00004ACD 6681CA0010          <1>     or dx, 1000h    ;Set bit 12 for remote (its at subst)
   283 00004AD2 6681E30010          <1>     and bx, cdsSubstDrive   ;Isolate the subst bit
   284 00004AD7 74AD                <1>     jz short .devControlExit    ;Jump to exit if no subst bit
   285 00004AD9 6681CA0080          <1>     or dx, 8000h    ;Else, set bit 15 for subst in returning word!
   286 00004ADE EBA6                <1>     jmp short .devControlExit   ;Store it
   287                              <1> 
   288                              <1> .remTest:
   289                              <1> ;Drive letter in bl
   290 00004AE0 88D8                <1>     mov al, bl
   291 00004AE2 E84B1C0000          <1>     call getCDS
   292 00004AE7 730A                <1>     jnc .remTestOkDrive
   293                              <1> .remTestBadDrv:
   294 00004AE9 B80F000000          <1>     mov eax, errBadDrv
   295 00004AEE E95A200000          <1>     jmp extErrExit
   296                              <1> .remTestOkDrive:
   297 00004AF3 488B3D(01070000)    <1>     mov rdi, qword [workingCDS] ;Get the CDS
   298 00004AFA 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   299 00004B00 75E7                <1>     jnz .remTestBadDrv
   300 00004B02 488D1D(B4040000)    <1>     lea rbx, primReqHdr
   301 00004B09 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]
   302 00004B0D 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]    ;Get the unit number
   303 00004B10 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr in rsi
   304 00004B14 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL
   305 00004B1A 0F8430FDFFFF        <1>     jz .invalidFunction
   306 00004B20 C6030D              <1>     mov byte [rbx + remMediaReqPkt.hdrlen], remMediaReqPkt_size
   307 00004B23 C643020F            <1>     mov byte [rbx + remMediaReqPkt.cmdcde], drvREMMEDCHECK
   308 00004B27 66C743030000        <1>     mov word [rbx + remMediaReqPkt.status], 0
   309 00004B2D 884301              <1>     mov byte [rbx + remMediaReqPkt.unitnm], al
   310 00004B30 E83B170000          <1>     call goDriver
   311 00004B35 0FB74303            <1>     movzx eax, word [rbx + remMediaReqPkt.status]   ;Get the status
   312 00004B39 2500020000          <1>     and eax, drvBsyStatus   ;Clear all but bit 9
   313 00004B3E C1E809              <1>     shr eax, 9  ;Move the busy bit to al[0]
   314                              <1>     return
    13                              <2> %%_ret:
    14 00004B41 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   315                              <1> 
   316                              <1> .setSharingCount:
   317                              <1> ;Input: cx = Share Count
   318                              <1> ;       dx = Share Retry
   319 00004B42 66890D(13000000)    <1>     mov word [shareCount], cx
   320 00004B49 6685D2              <1>     test dx, dx
   321 00004B4C 0F84FEFCFFFF        <1>     jz .invalidFunction
   322 00004B52 668915(15000000)    <1>     mov word [shareDelay], dx
   323 00004B59 31C0                <1>     xor eax, eax
   324 00004B5B E9DF1F0000          <1>     jmp extGoodExit
   325                              <1> 
   326                              <1> .genericCharDevIOCTL:
   327 00004B60 E8C9FBFFFF          <1>     call getSFTPtr  ;Get in rdi the SFT ptr
   328 00004B65 7311                <1>     jnc .okHandle
   329                              <1> .ioctrlBadHandle:
   330 00004B67 C605(FE030000)04    <1>     mov byte [errorLocus], eLocChr
   331 00004B6E B806000000          <1>     mov eax, errBadHdl
   332 00004B73 E9D51F0000          <1>     jmp extErrExit
   333                              <1> .okHandle:
   334 00004B78 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   335 00004B7E 75E7                <1>     jnz .ioctrlBadHandle
   336 00004B80 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   337 00004B86 74DF                <1>     jz .ioctrlBadHandle
   338 00004B88 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the driver ptr in rsi
   339 00004B8C EB49                <1>     jmp short .ioctlReqMake
   340                              <1> .genericBlokDevIOCTL:
   341 00004B8E 88D8                <1>     mov al, bl  ;Move the drive number from bl to al
   342 00004B90 51                  <1>     push rcx
   343 00004B91 52                  <1>     push rdx
   344 00004B92 E89B1B0000          <1>     call getCDS ;Sets the current CDS
   345 00004B97 5A                  <1>     pop rdx
   346 00004B98 59                  <1>     pop rcx
   347 00004B99 7217                <1>     jc .badDrv
   348                              <1>     ;Check the CDS not net, subst or join
   349 00004B9B 488B35(01070000)    <1>     mov rsi, qword [workingCDS]
   350 00004BA2 0FB74643            <1>     movzx eax, word [rsi + cds.wFlags]
   351 00004BA6 66A90040            <1>     test ax, cdsValidDrive  ;If not valid, fail
   352 00004BAA 7406                <1>     jz .badDrv
   353 00004BAC 66A980B0            <1>     test ax, cdsRedirDrive|cdsJoinDrive|cdsSubstDrive|cdsRdirLocDrive
   354 00004BB0 7411                <1>     jz .goodDrive
   355                              <1> .badDrv:
   356 00004BB2 C605(FE030000)02    <1>     mov byte [errorLocus], eLocDsk
   357 00004BB9 B80F000000          <1>     mov eax, errBadDrv  ;Error code if error
   358 00004BBE E98A1F0000          <1>     jmp extErrExit
   359                              <1> .goodDrive:
   360                              <1>     ;CDS is good,now get the DPB
   361 00004BC3 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]  ;DPB ptr in rsi
   362 00004BC7 488B7E1B            <1>     mov rdi, qword [rsi + dpb.qDriverHeaderPtr] ;Driver ptr in rdi
   363 00004BCB 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   364 00004BCE 8805(B5040000)      <1>     mov byte [primReqHdr + ioctlReqPkt.unitnm], al
   365 00004BD4 4889FE              <1>     mov rsi, rdi   ;Get the driver ptr in rsi 
   366                              <1> .ioctlReqMake:
   367                              <1> ;rsi must point to the driver header here
   368 00004BD7 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   369 00004BDD 7511                <1>     jnz .supportsIOCTL
   370                              <1> .badFunction:
   371 00004BDF C605(FE030000)01    <1>     mov byte [errorLocus], eLocUnk
   372 00004BE6 B801000000          <1>     mov eax, errInvFnc
   373 00004BEB E95D1F0000          <1>     jmp extErrExit
   374                              <1> .supportsIOCTL:
   375                              <1>     ;Setup the request header
   376 00004BF0 488D1D(B4040000)    <1>     lea rbx, primReqHdr
   377 00004BF7 C60327              <1>     mov byte [rbx + ioctlReqPkt.hdrlen], ioctlReqPkt_size
   378 00004BFA C6430213            <1>     mov byte [rbx + ioctlReqPkt.cmdcde], drvIOCTL
   379 00004BFE 66C743030000        <1>     mov word [rbx + ioctlReqPkt.status], 0
   380 00004C04 66894B0D            <1>     mov word [rbx + ioctlReqPkt.majfun], cx ;Store maj and min together
   381 00004C08 4889531F            <1>     mov qword [rbx + ioctlReqPkt.ctlptr], rdx
   382 00004C0C 4889F7              <1>     mov rdi, rsi    ;Save the driver header ptr in rdi
   383 00004C0F E8911A0000          <1>     call getUserRegs
   384 00004C14 488B4620            <1>     mov rax, qword [rsi + callerFrame.rsi]
   385 00004C18 4889430F            <1>     mov qword [rbx + ioctlReqPkt.rsival], rax
   386 00004C1C 488B4628            <1>     mov rax, qword [rsi + callerFrame.rdi]
   387 00004C20 48894317            <1>     mov qword [rbx + ioctlReqPkt.rdival], rax
   388 00004C24 4889FE              <1>     mov rsi, rdi
   389 00004C27 E844160000          <1>     call goDriver
   390 00004C2C 66F743030080        <1>     test word [rbx + ioctlReqPkt.status], drvErrStatus
   391 00004C32 0F84071F0000        <1>     jz extGoodExit
   392 00004C38 0FB77B03            <1>     movzx edi, word [rbx + ioctlReqPkt.status]
   393 00004C3C 81E7FF000000        <1>     and edi, 0FFh   ;Save the low byte only
   394 00004C42 89F8                <1>     mov eax, edi
   395 00004C44 E849100000          <1>     call xlatHardError
   396 00004C49 0FB705(FF030000)    <1>     movzx eax, word [errorExCde] 
   397 00004C50 E9F81E0000          <1>     jmp extErrExit
   398                              <1> 
   399                              <1> .getDrvLogicalDevice:
   400 00004C55 88D8                <1>     mov al, bl
   401 00004C57 488D1D(B4040000)    <1>     lea rbx, primReqHdr
   402 00004C5E C6430217            <1>     mov byte [rbx + getDevReqPkt.cmdcde], drvGETDRVMAP
   403 00004C62 C6030D              <1>     mov byte [rbx + getDevReqPkt.hdrlen], getDevReqPkt_size
   404 00004C65 66C743030000        <1>     mov word [rbx + getDevReqPkt.status], 0
   405 00004C6B 53                  <1>     push rbx
   406 00004C6C E8C11A0000          <1>     call getCDS
   407 00004C71 8805(F8060000)      <1>     mov byte [workingDrv], al
   408 00004C77 5B                  <1>     pop rbx
   409 00004C78 0F826BFEFFFF        <1>     jc .remTestBadDrv
   410 00004C7E 488B3D(01070000)    <1>     mov rdi, qword [workingCDS]
   411 00004C85 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   412 00004C89 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   413 00004C8D 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   414 00004C90 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   415                              <1> 
   416 00004C93 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   417 00004C99 0F84B1FBFFFF        <1>     jz .invalidFunction
   418 00004C9F E8CC150000          <1>     call goDriver
   419 00004CA4 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   420 00004CAA 7421                <1>     jz .getDrvOk
   421                              <1>     ;Can only Fail, Ignore and Abort.
   422 00004CAC 0FB605(F8060000)    <1>     movzx eax, byte [workingDrv]  
   423 00004CB3 80CC28              <1>     or ah, critRead | critIgnorOK | critFailOK
   424 00004CB6 0FB77B03            <1>     movzx edi, word [rbx + getDevReqPkt.status]
   425 00004CBA E85F100000          <1>     call criticalDOSError
   426 00004CBF 3C00                <1>     cmp al, critIgnore
   427 00004CC1 740A                <1>     je .getDrvOk
   428 00004CC3 B801000000          <1>     mov eax, errInvFnc
   429 00004CC8 E9801E0000          <1>     jmp extErrExit
   430                              <1> .getDrvOk:
   431 00004CCD 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]    ;Get the byte
   432                              <1>     return
    13                              <2> %%_ret:
    14 00004CD0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   433                              <1> .setDrvLogicalDevice:
   434 00004CD1 88D8                <1>     mov al, bl
   435 00004CD3 488D1D(B4040000)    <1>     lea rbx, primReqHdr
   436 00004CDA C6430218            <1>     mov byte [rbx + setDevReqPkt.cmdcde], drvSETDRVMAP
   437 00004CDE C6030D              <1>     mov byte [rbx + setDevReqPkt.hdrlen], setDevReqPkt_size
   438 00004CE1 66C743030000        <1>     mov word [rbx + setDevReqPkt.status], 0
   439 00004CE7 53                  <1>     push rbx
   440 00004CE8 E8451A0000          <1>     call getCDS
   441 00004CED 8805(F8060000)      <1>     mov byte [workingDrv], al
   442 00004CF3 5B                  <1>     pop rbx
   443 00004CF4 0F82EFFDFFFF        <1>     jc .remTestBadDrv
   444 00004CFA 488B3D(01070000)    <1>     mov rdi, qword [workingCDS]
   445 00004D01 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   446 00004D05 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   447 00004D09 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   448 00004D0C 884301              <1>     mov byte [rbx + setDevReqPkt.unitnm], al
   449 00004D0F 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   450 00004D15 0F8435FBFFFF        <1>     jz .invalidFunction
   451 00004D1B E850150000          <1>     call goDriver
   452 00004D20 30C0                <1>     xor al, al
   453 00004D22 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   454                              <1>     retz    ;Return if OK
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004D28 74A6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   455                              <1>     ;Can only Fail, Ignore and Abort.
   456 00004D2A 0FB605(F8060000)    <1>     movzx eax, byte [workingDrv]  
   457 00004D31 80CC28              <1>     or ah, critRead | critIgnorOK | critFailOK
   458 00004D34 0FB77B03            <1>     movzx edi, word [rbx + getDevReqPkt.status]
   459 00004D38 E8E10F0000          <1>     call criticalDOSError
   460 00004D3D 3C00                <1>     cmp al, critIgnore
   461                              <1>     rete    ;Return if Ignore
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004D3F 748F                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   462 00004D41 B801000000          <1>     mov eax, errInvFnc
   463 00004D46 E9021E0000          <1>     jmp extErrExit
   464                              <1> 
    37                                  %include "./Source/Kernel/MemExec/memFunc.asm"
     1                              <1> ;Memory related functions
     2                              <1> 
     3                              <1> ;-----------------------------------:
     4                              <1> ;  Memory related Kernel routines   :
     5                              <1> ;-----------------------------------:
     6                              <1> ;NOTE: 
     7                              <1> ;   If less than 6 paragraphs requested for alloc, allocate 6 paragraphs.
     8                              <1> ;   If between 0 and 6 paras requested for realloc, realloc to 6.
     9                              <1> ;       If 0 requested for realloc, free.
    10                              <1> allocateMemory:    ;ah = 48h
    11                              <1> ;Input: ebx = Number of paragraphs requested
    12                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    13                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    14 00004D4B E8B21D0000          <1>     call dosCrit1Enter
    15 00004D50 B806000000          <1>     mov eax, 6
    16 00004D55 39C3                <1>     cmp ebx, eax
    17 00004D57 0F42D8              <1>     cmovb ebx, eax
    18 00004D5A 31D2                <1>     xor edx, edx
    19                              <1>     ;Clear the pointers
    20 00004D5C 488915(39040000)    <1>     mov qword [firstMCB], rdx
    21 00004D63 488915(41040000)    <1>     mov qword [bestMCB], rdx
    22 00004D6A 488915(49040000)    <1>     mov qword [lastMCB], rdx
    23 00004D71 31ED                <1>     xor ebp, ebp    
    24 00004D73 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    25 00004D75 488B35(27000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    26                              <1> .walk:
    27 00004D7C 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    28 00004D7F 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    29 00004D82 7409                <1>     je .walk1
    30 00004D84 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    31 00004D87 0F85E5040000        <1>     jne badMCBChain
    32                              <1> .walk1:
    33                              <1>     ;Here if valid but not the last block
    34 00004D8D 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    35 00004D95 0F8582000000        <1>     jne .walk2
    36                              <1>     ;Here we consolidate adjacent free blocks if there are any
    37                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    38                              <1>     ;End consolidation at first non free block or at last block in chain
    39 00004D9B 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    40 00004D9E 744A                <1>     je .det0    ;Determine if this block is useful
    41 00004DA0 31C9                <1>     xor ecx, ecx
    42 00004DA2 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    43 00004DA5 4881C610000000      <1>     add rsi, mcb.program
    44                              <1> .cons0:
    45 00004DAC 48C1E104            <1>     shl rcx, 4
    46 00004DB0 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    47 00004DB3 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    48 00004DB6 7409                <1>     je .cons1
    49 00004DB8 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    50 00004DBB 0F85B1040000        <1>     jne badMCBChain 
    51                              <1> .cons1:
    52 00004DC1 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    53 00004DC9 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    54                              <1>     ;Here rsi, points to a free block, add it to rdi
    55 00004DCB 31C9                <1>     xor ecx, ecx
    56 00004DCD 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    57 00004DD0 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    58 00004DD6 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    59 00004DD9 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    60 00004DDB 31D2                <1>     xor edx, edx
    61 00004DDD 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    62 00004DE0 48895608            <1>     mov qword [rsi + 8], rdx
    63 00004DE4 3C5A                <1>     cmp al, mcbMarkEnd
    64 00004DE6 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    65                              <1>     ;Here we deal with if the block was the last one 
    66 00004DE8 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    67                              <1> .det0:  ;Now determine if pointer in rdi is useful
    68 00004DEA 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    69                              <1> ;ebx must be less than the arena size for the arena to be useful!
    70 00004DED 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    71 00004DF0 39D9                <1>     cmp ecx, ebx
    72 00004DF2 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    73 00004DF4 488935(49040000)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    74 00004DFB 488B05(39040000)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    75 00004E02 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    76 00004E05 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    77 00004E07 488935(39040000)    <1>     mov qword [firstMCB], rsi
    78                              <1> .det1:
    79                              <1>     ;Now test for best fit.
    80 00004E0E 29D9                <1>     sub ecx, ebx    ;Block - ebx
    81 00004E10 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    82 00004E12 7209                <1>     jb .walk2
    83 00004E14 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
    84 00004E16 488935(41040000)    <1>     mov qword [bestMCB], rsi
    85                              <1> .walk2:
    86 00004E1D 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    87 00004E20 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
    88 00004E22 31C9                <1>     xor ecx, ecx
    89 00004E24 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    90 00004E27 48C1E104            <1>     shl rcx, 4
    91 00004E2B 4881C610000000      <1>     add rsi, mcb.program
    92 00004E32 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    93 00004E35 E942FFFFFF          <1>     jmp .walk
    94                              <1> .allocate:
    95                              <1>     ;Allocation fails IF the pointer is the null pointer
    96 00004E3A 803D(C7030000)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
    97 00004E41 723A                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
    98                              <1>     ;Fall thru if last fit
    99 00004E43 488B35(49040000)    <1>     mov rsi, qword [lastMCB]
   100 00004E4A 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   101 00004E4D 0F84A8000000        <1>     jz .allocFail
   102 00004E53 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   103 00004E55 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   104 00004E58 31C9                <1>     xor ecx, ecx
   105 00004E5A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   106 00004E5D 29D9                <1>     sub ecx, ebx
   107 00004E5F 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   108 00004E65 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   109 00004E68 48C1E104            <1>     shl rcx, 4
   110 00004E6C 4881C610000000      <1>     add rsi, mcb.program
   111 00004E73 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   112 00004E76 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   113 00004E78 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   114 00004E7B EB56                <1>     jmp short .bfPerfectFit
   115                              <1> .bfCommon:
   116 00004E7D 488B35(39040000)    <1>     mov rsi, qword [firstMCB]
   117 00004E84 803D(C7030000)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   118 00004E8B 480F4435(41040000)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   119 00004E93 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   120 00004E96 7463                <1>     jz .allocFail
   121                              <1>     ;Now check if we need to make a "spill over" free MCB
   122 00004E98 31C9                <1>     xor ecx, ecx
   123 00004E9A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]  ;Get current whole block size
   124 00004E9D 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   125 00004E9F 7432                <1>     jz short .bfPerfectFit
   126                              <1>     ;Make the spill over MCB 
   127 00004EA1 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   128 00004EA7 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   129 00004EAA 8A06                <1>     mov al, byte [rsi + mcb.marker]
   130 00004EAC C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   131 00004EAF 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   132 00004EB2 4881C710000000      <1>     add rdi, mcb.program
   133 00004EB9 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   134 00004EBF 48C1E304            <1>     shl rbx, 4
   135 00004EC3 4801DF              <1>     add rdi, rbx
   136 00004EC6 8807                <1>     mov byte [rdi + mcb.marker], al ;Store old marker in new block
   137 00004EC8 48C7470100000000    <1>     mov qword [rdi + mcb.owner], mcbOwnerFree
   138 00004ED0 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx
   139                              <1> .bfPerfectFit:
   140                              <1>     ;Now set the current PSP as the owner of this new MCB
   141 00004ED3 488B15(13040000)    <1>     mov rdx, qword [currentPSP]
   142 00004EDA 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   143 00004EDE 488B15(6E040000)    <1>     mov rdx, qword [oldRSP]
   144 00004EE5 488D4610            <1>     lea rax, qword [rsi + mcb.program]  ;Point return ptr to program area
   145 00004EE9 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   146 00004EEC 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   147 00004EF0 E850030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   148 00004EF5 E8121C0000          <1>     call dosCrit1Exit
   149                              <1>     return
    13                              <2> %%_ret:
    14 00004EFA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   150                              <1> .allocFail:
   151                              <1>     ;Walk the MCB chain to determine the biggest block size
   152 00004EFB 488B35(27000000)    <1>     mov rsi, [mcbChainPtr]
   153 00004F02 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   154                              <1> .af0:
   155 00004F04 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   156 00004F07 7409                <1>     je .af1
   157 00004F09 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   158 00004F0C 0F8560030000        <1>     jne badMCBChain
   159                              <1> .af1:
   160 00004F12 31C9                <1>     xor ecx, ecx
   161 00004F14 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   162 00004F17 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   163 00004F1F 7505                <1>     jne .af2
   164 00004F21 39D9                <1>     cmp ecx, ebx
   165 00004F23 0F47D9              <1>     cmova ebx, ecx
   166                              <1> .af2:
   167 00004F26 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   168 00004F29 7410                <1>     je .afExit
   169 00004F2B 48C1E104            <1>     shl rcx, 4
   170 00004F2F 4881C610000000      <1>     add rsi, mcb.program
   171 00004F36 4801CE              <1>     add rsi, rcx
   172 00004F39 EBD7                <1>     jmp short .af1
   173                              <1> .afExit:
   174 00004F3B B808000000          <1>     mov eax, errNoMem
   175 00004F40 488B15(6E040000)    <1>     mov rdx, qword [oldRSP]
   176 00004F47 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   177 00004F4A E925030000          <1>     jmp mcbErrHdlr
   178                              <1> freeMemory:        ;ah = 49h
   179                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   180                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   181                              <1> ;Always skip the first block as this is the anchor for DOS
   182 00004F4F E8AE1B0000          <1>     call dosCrit1Enter
   183 00004F54 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   184 00004F5B 31C9                <1>     xor ecx, ecx
   185 00004F5D 488B35(27000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   186 00004F64 4889F7              <1>     mov rdi, rsi
   187 00004F67 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   188 00004F6A 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   189 00004F6E 4881C610000000      <1>     add rsi, mcb.program
   190 00004F75 4801CE              <1>     add rsi, rcx    ;Go to next block
   191                              <1> .mainLoop:
   192 00004F78 31C9                <1>     xor ecx, ecx
   193 00004F7A 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   194 00004F7D 7409                <1>     je .valid
   195 00004F7F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   196 00004F82 0F85EA020000        <1>     jne badMCBChain
   197                              <1> .valid:
   198 00004F88 4939F0              <1>     cmp r8, rsi
   199 00004F8B 741C                <1>     je .blockFound
   200                              <1>     ;Not valid, check if last block in chain
   201 00004F8D 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   202 00004F90 0F84A5000000        <1>     je .blockError
   203 00004F96 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   204 00004F99 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   205 00004F9D 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   206 00004FA4 4801CE              <1>     add rsi, rcx    ;Go to next block
   207 00004FA7 EBCF                <1>     jmp short .mainLoop
   208                              <1> .blockFound:
   209                              <1>     ;If hole, error.
   210                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   211 00004FA9 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   212 00004FB1 0F8484000000        <1>     je .blockError
   213 00004FB7 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   214 00004FBF 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   215 00004FC7 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   216                              <1>     ;It is, let it absorb this space
   217 00004FC9 31C9                <1>     xor ecx, ecx
   218 00004FCB 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   219 00004FCE 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   220 00004FD4 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   221                              <1>     ;Replace block marker
   222 00004FD7 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   223 00004FD9 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   224 00004FDB 31C9                <1>     xor ecx, ecx
   225 00004FDD 48890E              <1>     mov qword [rsi], rcx
   226 00004FE0 48894E08            <1>     mov qword [rsi + 8], rcx
   227 00004FE4 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   228                              <1> .blockFoundCheckFollowing:
   229                              <1>     ;First check if we are the last block in chain
   230 00004FE7 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   231 00004FEA 7439                <1>     je .blockFoundExit  ;If yes, exit!
   232 00004FEC 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   233 00004FEF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   234 00004FF2 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   235 00004FF6 4881C110000000      <1>     add rcx, mcb.program
   236 00004FFD 4801CE              <1>     add rsi, rcx    ;Go to next block
   237 00005000 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   238 00005008 751B                <1>     jne .blockFoundExit ;If not free, exit
   239                              <1>     ;If free, absorb into block pointed to by rdi
   240 0000500A 31C9                <1>     xor ecx, ecx
   241 0000500C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   242 0000500F 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   243 00005015 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   244                              <1>     ;Replace block marker
   245 00005018 8A06                <1>     mov al, byte [rsi + mcb.marker]
   246 0000501A 8807                <1>     mov byte [rdi + mcb.marker], al
   247 0000501C 31C9                <1>     xor ecx, ecx
   248 0000501E 48890E              <1>     mov qword [rsi], rcx
   249 00005021 48894E08            <1>     mov qword [rsi + 8], rcx
   250                              <1> .blockFoundExit:
   251 00005025 E81B020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   252 0000502A E8DD1A0000          <1>     call dosCrit1Exit
   253 0000502F 488B1D(6E040000)    <1>     mov rbx, qword [oldRSP]
   254 00005036 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   255                              <1>     return
    13                              <2> %%_ret:
    14 0000503A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   256                              <1> .blockError:
   257 0000503B C605(FD030000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   258 00005042 B809000000          <1>     mov eax, errMemAddr
   259 00005047 E8011B0000          <1>     call extErrExit ;Error thru the unified error handler
   260 0000504C E8F4010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   261 00005051 E8B61A0000          <1>     call dosCrit1Exit
   262                              <1>     return
    13                              <2> %%_ret:
    14 00005056 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   263                              <1> reallocMemory:     ;ah = 4Ah
   264                              <1> ;Input: r8 = address of the block to be realloc'ed
   265                              <1> ;       ebx = How many paras this block should contain after realloc. 
   266                              <1> ;               If ebx = 0, jump to free memory
   267 00005057 E8A61A0000          <1>     call dosCrit1Enter
   268 0000505C 85DB                <1>     test ebx, ebx
   269 0000505E 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   270 00005064 B806000000          <1>     mov eax, 6
   271 00005069 39C3                <1>     cmp ebx, eax    ;Are we trying to resize to less than 6?
   272 0000506B 0F42D8              <1>     cmovb ebx, eax
   273 0000506E 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   274 00005075 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   275 00005078 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   276 0000507B 7409                <1>     je .ctn
   277 0000507D 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   278 00005080 0F856F010000        <1>     jne .badAddrGiven
   279                              <1> .ctn:
   280                              <1>     ;Provided block is valid and not a hole
   281                              <1>     ;Check if Growth or Shrink
   282 00005086 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   283 0000508E 74AB                <1>     je freeMemory.blockError
   284 00005090 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   285 00005093 31C9                <1>     xor ecx, ecx
   286 00005095 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   287 00005098 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   288 0000509A 0F8791000000        <1>     ja .growth
   289 000050A0 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   290                              <1> ;We can always shrink
   291 000050A6 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   292 000050A8 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   293 000050AE 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   294 000050B1 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   295 000050B7 48C1E304            <1>     shl rbx, 4
   296 000050BB 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   297 000050C2 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   298 000050C5 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   299 000050C7 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   300 000050CA 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   301 000050CC 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   302 000050D4 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   303 000050D7 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   304 000050D9 0F84E6000000        <1>     je .exit
   305                              <1> ;Else, now see if the block following is also free and absorb it
   306 000050DF 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   307 000050E2 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   308 000050E6 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   309 000050ED 4801CE              <1>     add rsi, rcx    ;Goto next arena
   310 000050F0 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   311 000050F3 7409                <1>     je .shrinkAbsorb
   312 000050F5 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   313 000050F8 0F8574010000        <1>     jne badMCBChain
   314                              <1> .shrinkAbsorb:
   315 000050FE 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   316 00005106 0F85B9000000        <1>     jne .exit
   317                              <1>     ;It is free, absorb it
   318 0000510C 8A06                <1>     mov al, byte [rsi + mcb.marker]
   319 0000510E 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   320 00005110 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   321 00005113 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   322 00005116 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   323 00005119 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   324 0000511C 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   325 00005120 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   326 00005123 31C9                <1>     xor ecx, ecx
   327                              <1>     ;Clear absorbed MCB
   328 00005125 48890E              <1>     mov qword [rsi], rcx
   329 00005128 48894E08            <1>     mov qword [rsi + 8], rcx
   330 0000512C E994000000          <1>     jmp .exit
   331                              <1> .growth:
   332                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   333 00005131 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   334 00005134 0F84A5000000        <1>     je .notEnuffMem
   335                              <1> ;Now check the following space is free. If not, not enuff mem err
   336 0000513A 31C9                <1>     xor ecx, ecx
   337 0000513C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   338 0000513F 48C1E104            <1>     shl rcx, 4
   339 00005143 4889F7              <1>     mov rdi, rsi    
   340 00005146 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   341 0000514D 4801CE              <1>     add rsi, rcx
   342 00005150 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   343 00005153 7409                <1>     je .growthOK
   344 00005155 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   345 00005158 0F8514010000        <1>     jne badMCBChain
   346                              <1> .growthOK:
   347                              <1>     ;rdi points to block we are growing
   348 0000515E 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   349 00005166 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   350                              <1>     ;rsi must own all memory up to the next owned arena
   351 00005168 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   352 0000516A 31C9                <1>     xor ecx, ecx
   353 0000516C 31D2                <1>     xor edx, edx
   354 0000516E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   355 00005171 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   356 00005177 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   357 0000517A 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   358 0000517C 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   359 0000517E 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   360 00005181 775E                <1>     ja .notEnuffMem1
   361 00005183 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   362 00005185 81FA01000000        <1>     cmp edx, 1
   363 0000518B 744E                <1>     je .notEnuffMem2
   364 0000518D 31C9                <1>     xor ecx, ecx
   365 0000518F 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   366 00005192 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   367 00005196 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   368 00005199 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   369 0000519C 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   370 000051A3 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   371 000051A7 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   372 000051AA 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   373 000051AE 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   374                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   375                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   376 000051B0 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   377 000051B2 7411                <1>     jz .exit
   378 000051B4 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   379 000051BA 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   380 000051BD 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   381                              <1> .exit:
   382 000051C5 E87B000000          <1>     call verifyIntegrityOfMCBChain
   383 000051CA E83D190000          <1>     call dosCrit1Exit
   384 000051CF 488B1D(6E040000)    <1>     mov rbx, qword [oldRSP]
   385 000051D6 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   386                              <1>     return
    13                              <2> %%_ret:
    14 000051DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .notEnuffMem2:
   388 000051DB FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   389 000051DD EB02                <1>     jmp short .notEnuffMem1
   390                              <1> .notEnuffMem:
   391 000051DF 31DB                <1>     xor ebx, ebx    ;No space to grow
   392                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   393 000051E1 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   394 000051E6 488B15(6E040000)    <1>     mov rdx, qword [oldRSP]
   395 000051ED 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   396 000051F0 E97F000000          <1>     jmp mcbErrHdlr
   397                              <1> .badAddrGiven:
   398 000051F5 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   399 000051FA E975000000          <1>     jmp mcbErrHdlr
   400                              <1> getsetMallocStrat: ;ah = 58h
   401 000051FF 84C0                <1>     test al, al
   402 00005201 741F                <1>     jz .get
   403 00005203 3C02                <1>     cmp al, 2
   404 00005205 7337                <1>     jae .bad
   405                              <1> ;Set here
   406 00005207 488B1D(6E040000)    <1>     mov rbx, qword [oldRSP]
   407 0000520E 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   408 00005212 8805(C7030000)      <1>     mov byte [allocStrat], al   ;Only save low word
   409 00005218 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   410 0000521C E824000000          <1>     call verifyIntegrityOfMCBChain
   411                              <1>     return
    13                              <2> %%_ret:
    14 00005221 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> .get:
   413 00005222 488B1D(6E040000)    <1>     mov rbx, qword [oldRSP]
   414 00005229 31C0                <1>     xor eax, eax
   415 0000522B 8A05(C7030000)      <1>     mov al, byte [allocStrat]
   416 00005231 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   417 00005234 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   418 00005238 E808000000          <1>     call verifyIntegrityOfMCBChain
   419                              <1>     return
    13                              <2> %%_ret:
    14 0000523D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   420                              <1> .bad:
   421 0000523E B801000000          <1>     mov eax, errInvFnc
   422 00005243 EB2F                <1>     jmp short mcbErrHdlr
   423                              <1> ;-----------------------------------:
   424                              <1> ;      Memory related routines      :
   425                              <1> ;-----------------------------------:
   426                              <1> verifyIntegrityOfMCBChain:
   427 00005245 50                  <1>     push rax
   428 00005246 53                  <1>     push rbx
   429 00005247 488B1D(27000000)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   430                              <1> .ok:
   431 0000524E 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   432 00005251 7408                <1>     je .ok1
   433 00005253 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   434 00005256 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   435                              <1> .exit:
   436 00005258 5B                  <1>     pop rbx
   437 00005259 58                  <1>     pop rax
   438                              <1>     return ;We have reached the end of the chain, return all good!
    13                              <2> %%_ret:
    14 0000525A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> .ok1:
   440 0000525B 31C0                <1>     xor eax, eax
   441 0000525D 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   442 00005260 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   443 00005264 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   444 0000526B 4801C3              <1>     add rbx, rax
   445 0000526E EBDE                <1>     jmp short .ok
   446                              <1> .bmcbPrep:
   447 00005270 5B                  <1>     pop rbx ;Pop off the stack first!
   448 00005271 58                  <1>     pop rax
   449                              <1> badMCBChain:
   450 00005272 B007                <1>     mov al, errMCBbad   ;Yikes!
   451                              <1> mcbErrHdlr:
   452                              <1>     ;Jumped to with eax = error code
   453 00005274 C605(FD030000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   454 0000527B E8CD180000          <1>     call extErrExit ;Error thru the unified error handler
   455 00005280 3C07                <1>     cmp al, errMCBbad
   456                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00005282 74D6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   457 00005284 EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    38                                  %include "./Source/Kernel/MemExec/progMgmt.asm"
     1                              <1> ;EXEC and all default terminates are here
     2                              <1> 
     3                              <1> ;========================
     4                              <1> ;   Interrupt handlers
     5                              <1> ;========================
     6                              <1> terminateProcess:   ;Int 40h
     7 00005286 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
     8 00005288 E9ED160000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
     9                              <1> terminateRes:       ;Int 47h
    10                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    11 0000528D 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    12 00005293 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    13 00005296 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    14 0000529B E9DA160000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    15                              <1> ;========================
    16                              <1> ;    Int 21h functions
    17                              <1> ;========================
    18                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    19                              <1> ;Input:
    20                              <1> ;rdx = Pointer to new PSP in memory.
    21                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    22                              <1> ;   Officially document that this MUST be paragraph aligned.
    23                              <1> ;rsi = alloc size for new psp block
    24                              <1> ;
    25                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    26                              <1> ; Note, only the first 20 handles will be copied 
    27                              <1> ; from wherever the JFT is into the PSP JFT of the new task. 
    28                              <1> ; If any of these handles are non-inheritable or closed, then 
    29                              <1> ; they will be copied as -1 (if closed) or set to -1 during 
    30                              <1> ; the inheritence check.
    31                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    32 000052A0 C605(08050000)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    33 000052A7 4C8B05(13040000)    <1>     mov r8, qword [currentPSP]
    34 000052AE 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    35 000052B0 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    36 000052B1 EB0C                <1>     jmp short copyPSP.pspCommon
    37                              <1> copyPSP:      ;ah = 26h
    38                              <1> ;Input:
    39                              <1> ;rdx = Pointer to new PSP in memory.
    40                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    41                              <1> ;   Officially document that this MUST be paragraph aligned.
    42 000052B3 4C8B05(13040000)    <1>     mov r8, qword [currentPSP]
    43 000052BA 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    44 000052BE 53                  <1>     push rbx    ;Save this value for PSP allocsize
    45                              <1> .pspCommon:
    46 000052BF 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    47 000052C6 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    48 000052CA 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    49                              <1> ;r8 is current PSP, now copy psp to rdx
    50                              <1> ;Preserve rdx and r8 until the end
    51 000052CE 4C89C6              <1>     mov rsi, r8
    52 000052D1 4889D7              <1>     mov rdi, rdx
    53 000052D4 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    54 000052D9 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    55 000052DC 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    56 000052E4 F605(08050000)FF    <1>     test byte [pspCopyFlg], -1
    57 000052EB 7450                <1>     jz .copy
    58                              <1>     ;Now reset the parent psp data
    59 000052ED 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    60 000052F5 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    61                              <1>     ;Now reset the copied jobFileTable
    62 000052F9 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    63 000052FD 31C9                <1>     xor ecx, ecx
    64 000052FF B914000000          <1>     mov ecx, dfltJFTsize  ;Store dfltJFTsize free handles in new child PSP
    65 00005304 66894A4E            <1>     mov word [rdx + psp.jftSize], cx ;Set the size of JFT in new PSP to dflt 20
    66 00005308 B0FF                <1>     mov al, -1
    67 0000530A F3AA                <1>     rep stosb   ;Store 20 many -1's indicating 20 free handles
    68                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    69                              <1>     ;lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    70 0000530C 31DB                <1>     xor ebx, ebx    ;Get the pointer to jft[0] of source JFT
    71 0000530E E8D0F3FFFF          <1>     call getJFTPtr  ;Get JFT pointer to parent process JFT in rdi
    72 00005313 4889FE              <1>     mov rsi, rdi    ;Store it in rsi
    73 00005316 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]   ;Get the new processes' JFT ptr
    74 0000531A 0FB74A4E            <1>     movzx ecx, word [rdx + psp.jftSize]   ;Copy over first dfltJFTsize handles only
    75                              <1> .xfrJFT:
    76 0000531E 67E31C              <1>     jecxz .copy
    77 00005321 FFC9                <1>     dec ecx
    78 00005323 AC                  <1>     lodsb   ;Get the SFTndx in al
    79 00005324 0FB6D8              <1>     movzx ebx, al
    80 00005327 53                  <1>     push rbx
    81 00005328 E845F4FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
    82 0000532D 58                  <1>     pop rax
    83 0000532E 7508                <1>     jnz .badJFT
    84 00005330 AA                  <1>     stosb   ;Else store the SFTndx at that position... 
    85 00005331 E853F4FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
    86 00005336 EBE6                <1>     jmp short .xfrJFT
    87                              <1> .badJFT:
    88 00005338 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
    89 0000533B EBE1                <1>     jmp short .xfrJFT 
    90                              <1> .copy:
    91 0000533D C605(08050000)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
    92 00005344 58                  <1>     pop rax ;Pop the allocsize back into rax
    93 00005345 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
    94                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
    95 00005348 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
    96 0000534C B042                <1>     mov al, 42h
    97 0000534E E824130000          <1>     call muxGetIntVector    ;Get vector in rbx
    98 00005353 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    99 00005356 48AB                <1>     stosq   ;Move rdi to next entry and store
   100 00005358 B043                <1>     mov al, 43h
   101 0000535A E818130000          <1>     call muxGetIntVector    ;Get vector in rbx
   102 0000535F 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   103 00005362 48AB                <1>     stosq   ;Move rdi to next entry and store
   104 00005364 B044                <1>     mov al, 44h
   105 00005366 E80C130000          <1>     call muxGetIntVector    ;Get vector in rbx
   106 0000536B 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   107 0000536E 48AB                <1>     stosq   ;Move rdi to next entry and store
   108                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   109 00005370 66C702CD40          <1>     mov word [rdx + psp.return], 040CDh  ;Int 40h
   110 00005375 66C74250CD41        <1>     mov word [rdx + psp.unixEntry], 041CDh  
   111 0000537B C64252CB            <1>     mov byte [rdx + psp.unixEntry + 2], 0CBh ;Return
   112                              <1>     return
    13                              <2> %%_ret:
    14 0000537F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> terminateStayRes:  ;ah = 31h
   115                              <1> ;Input: al  = Error code
   116                              <1> ;       edx = Number of paragraphs to keep resident
   117 00005380 C605(F5060000)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   118                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   119 00005387 81FA06000000        <1>     cmp edx, 6
   120 0000538D 7305                <1>     jae .aboveMinimum
   121 0000538F BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   122                              <1> .aboveMinimum:
   123                              <1> ;Now we setup a call to Realloc 
   124                              <1> ;Setup regs with: 
   125                              <1> ;   r8 = address of the block to be realloc'ed
   126                              <1> ;   ebx = How many paras this block should contain after realloc.
   127 00005394 4C8B05(13040000)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   128 0000539B 89D3                <1>     mov ebx, edx
   129 0000539D 50                  <1>     push rax    ;Preserve errorlevel across call
   130 0000539E 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   131 0000539F E8B3FCFFFF          <1>     call reallocMemory
   132 000053A4 5B                  <1>     pop rbx
   133 000053A5 58                  <1>     pop rax
   134 000053A6 7226                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   135 000053A8 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   136                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   137 000053AC EB20                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   138                              <1> 
   139                              <1> simpleTerminate:   ;ah = 00h
   140 000053AE 31C0                <1>     xor eax, eax    ;Just fall through as normal
   141                              <1> terminateClean:    ;ah = 4Ch, EXIT
   142                              <1> ;Here we must:
   143                              <1> ;0) Build errorlevel and adjust variables accordingly
   144                              <1> ;1) Call Network Termination hook.
   145                              <1> ;2) Check if the program is it's own parent. If so, return.
   146                              <1> ;3) Swap the console back to the original driver if it is swapped.
   147                              <1> ;3.5) If we are exiting due to TSR, jump to 5
   148                              <1> ;4) Free all file handles associated to the current process.
   149                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   150                              <1> ;5) Free all memory blocks that have the signature of current PSP
   151                              <1> ;6) Set current PSP to parent PSP
   152                              <1> ;7) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   153                              <1> ;8) Set rsp of parent proc upon entry to DOS to our rsp
   154                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   155                              <1> ;10) Exit all critical sections.
   156                              <1> ;
   157                              <1> ; Step 0
   158                              <1> ;For now, just adjust error level in var
   159 000053B0 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   160 000053B2 8625(F5060000)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   161 000053B8 F605(7F040000)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   162 000053BF 7413                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   163 000053C1 8625(7F040000)      <1>     xchg ah, byte [ctrlCExit]   ;Zero the flag
   164 000053C7 C605(F5060000)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   165                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   166 000053CE 8A25(F5060000)      <1>     mov ah, byte [exitType] ;Get the exitType
   167                              <1> .storeELvl:
   168 000053D4 668905(23040000)    <1>     mov word [errorLevel], ax   ;Store word
   169                              <1>     
   170                              <1> ; Step 1 Tell network a process is terminating
   171 000053DB B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   172 000053E0 4C8B05(13040000)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   173 000053E7 CD4F                <1>     int 4Fh
   174                              <1> ; Step 2
   175                              <1> .step1:
   176 000053E9 488B3D(13040000)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   177 000053F0 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   178 000053F3 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   179 000053F7 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   180 000053FA 0F84BC000000        <1>     je .exit
   181                              <1> ; Step 3
   182 00005400 E817CFFFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   183                              <1> ; Step 3.5
   184 00005405 803D(F5060000)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   185 0000540C 747A                <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   186                              <1> ; Step 4
   187 0000540E 803D(F5060000)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   188 00005415 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   189 00005417 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   190 0000541C CD4F                <1>     int 4Fh
   191                              <1> .skipAbortNetClose:
   192 0000541E FF15(D3000000)      <1>     call qword [closeTaskShare] ;Close all shared files for this task
   193 00005424 FF15(AB000000)      <1>     call qword [unloadDLLHook]  ;Now free exported function for this task
   194                              <1> 
   195 0000542A 488B3D(13040000)    <1>     mov rdi, qword [currentPSP]
   196 00005431 0FB74F4E            <1>     movzx ecx, word [rdi + psp.jftSize] ;Number of entries in current JFT
   197 00005435 31DB                <1>     xor ebx, ebx    ;Start from handle 0
   198                              <1> .s4lp:
   199 00005437 53                  <1>     push rbx
   200 00005438 51                  <1>     push rcx
   201 00005439 E8CCD9FFFF          <1>     call closeFileHdl
   202 0000543E 59                  <1>     pop rcx
   203 0000543F 5B                  <1>     pop rbx
   204 00005440 FFC3                <1>     inc ebx ;Goto next handle to close
   205 00005442 39CB                <1>     cmp ebx, ecx
   206 00005444 75F1                <1>     jne .s4lp   ;Keep looping for all entries in the JFT 
   207                              <1> ;Step 5
   208                              <1> .step5:
   209 00005446 488B1D(13040000)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   210                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   211                              <1>     ; with the currentPSP signature and free them.
   212 0000544D 488B35(27000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   213                              <1> .s5lp:  ;And walk the chain
   214                              <1> ;First verify the address in rsi is a valid mcb
   215 00005454 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   216 00005456 80F94D              <1>     cmp cl, mcbMarkCtn
   217 00005459 7405                <1>     je .checkToFree
   218 0000545B 80F95A              <1>     cmp cl, mcbMarkEnd
   219 0000545E 7528                <1>     jne .step6  ;Something wrong so stop freeing
   220                              <1> .checkToFree:
   221 00005460 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   222 00005464 750F                <1>     jne .noFree
   223 00005466 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   224 0000546A 53                  <1>     push rbx
   225 0000546B 51                  <1>     push rcx
   226 0000546C 56                  <1>     push rsi
   227 0000546D E8DDFAFFFF          <1>     call freeMemory ;Free this memory block
   228 00005472 5E                  <1>     pop rsi
   229 00005473 59                  <1>     pop rcx
   230 00005474 5B                  <1>     pop rbx
   231                              <1>     ;If an error occured, the internal vars will be set.
   232                              <1> .noFree:
   233 00005475 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   234 00005478 740E                <1>     je .step6   ;Skip if we are
   235 0000547A 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   236 0000547D 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   237 00005481 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   238 00005486 EBCC                <1>     jmp short .s5lp
   239                              <1> ;Step 6
   240                              <1> .step6:
   241                              <1> 
   242 00005488 FF15(9B000000)      <1>     call qword [terminateTask]  ;Registers task terminating, no retval
   243                              <1> 
   244 0000548E 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   245 00005492 488905(13040000)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   246                              <1> ;Step 7
   247                              <1>     ;rbx points to current PSP, the old parent task
   248                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   249 00005499 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   250 0000549D B044                <1>     mov al, 44h
   251 0000549F E8BF180000          <1>     call setIntVector
   252 000054A4 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   253 000054A8 B043                <1>     mov al, 43h
   254 000054AA E8B4180000          <1>     call setIntVector
   255 000054AF 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   256 000054B3 B042                <1>     mov al, 42h
   257 000054B5 52                  <1>     push rdx
   258 000054B6 E8A8180000          <1>     call setIntVector
   259 000054BB 5A                  <1>     pop rdx
   260                              <1> ;Step 8
   261                              <1> .exit:
   262 000054BC B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   263 000054BE CD4A                <1>     int 4ah
   264                              <1> 
   265 000054C0 FA                  <1>     cli
   266 000054C1 488B1D(13040000)    <1>     mov rbx, qword [currentPSP]
   267 000054C8 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   268                              <1>     ;Make the parent register frame the current one
   269                              <1>     ;Make RSP point to user stack from parent entry to exec
   270 000054CC 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   271                              <1> 
   272 000054D0 4889542448          <1>     mov qword [rsp + callerFrame.rip], rdx  ;Store return address vector here
   273 000054D5 48C744245802F20000  <1>     mov qword [rsp + callerFrame.flags], 0F202h ;Mimic DOS's return flags
   274                              <1> 
   275 000054DE C605(89040000)00    <1>     mov byte [Int44Trans], 0    ;Clear this flag
   276 000054E5 C605(FC030000)00    <1>     mov byte [inDOS], 0 ;Exiting DOS now
   277 000054EC C605(FD030000)FF    <1>     mov byte [errorDrv], -1 ;Reset
   278 000054F3 E8DC150000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   279 000054F8 48CF                <1>     iretq   ;and return to address that was in rdx
    39                                  %include "./Source/Kernel/MemExec/exec.asm"
     1                              <1> 
     2                              <1> 
     3                              <1> loadExecChild:     ;ah = 4Bh, EXEC
     4                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
     5                              <1> ;       rbx = Ptr to the parameter block used for loading
     6                              <1> ;       al = Subfunction:
     7                              <1> ;            00h = Load Program and transfer control to it
     8                              <1> ;            01h = Load Program but do not transfer ctrl to it
     9                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    10                              <1> ;      Reserved for future expansion:
    11                              <1> ;            04h = Load in background execution mode (PE only)
    12                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    13                              <1> ;               function but in 16-bit mode. 
    14                              <1> ;
    15                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    16                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    17                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    18                              <1> 
    19                              <1> ;If AL = 0 and 4 (if DOSMGR present):
    20                              <1> ;            Load Child Program and Xfr control to it
    21                              <1> ; rbx ------>   |-------------------------------|
    22                              <1> ;               |   Ptr to Environment Block    |
    23                              <1> ;               |                               |
    24                              <1> ;               | Can be 0 => Get pointer to    |
    25                              <1> ;               | parent Environment Block      |
    26                              <1> ;               |-------------------------------|
    27                              <1> ;               |   Ptr to Command Line to be   |
    28                              <1> ;               |   placed at PSP + 80h         |
    29                              <1> ;               |-------------------------------|
    30                              <1> ;               |   Ptr to first default FCB    |
    31                              <1> ;               |      to copy to PSP.fcb1      |
    32                              <1> ;               |                               |
    33                              <1> ;               | Should be used to parse the   |
    34                              <1> ;               |  first two command line args  |
    35                              <1> ;               |-------------------------------|
    36                              <1> ;               |   Ptr to second default FCB   |
    37                              <1> ;               |      to copy to PSP.fcb2      |
    38                              <1> ;               |-------------------------------|
    39                              <1> ;
    40                              <1> ;If AL = 1 :
    41                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    42                              <1> ; rbx ------>   |-------------------------------|
    43                              <1> ;               |         AS IN AL=00H          |
    44                              <1> ;               |-------------------------------|
    45                              <1> ;               |     Initial Value of RSP      |
    46                              <1> ;               |       on program launch       |
    47                              <1> ;               |                               |
    48                              <1> ;               |     This is returned to the   |
    49                              <1> ;               |         caller by DOS         |
    50                              <1> ;               |-------------------------------|
    51                              <1> ;               |     Initial Value of RIP      |
    52                              <1> ;               |       on program launch       |
    53                              <1> ;               |                               |
    54                              <1> ;               |     This is returned to the   |
    55                              <1> ;               |         caller by DOS         |
    56                              <1> ;               |-------------------------------|
    57                              <1> ;
    58                              <1> ;                      !!Important Note!!
    59                              <1> ;   The block pointed to by rbx must reserve the space for 
    60                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    61                              <1> ;
    62                              <1> ;If AL = 3 :
    63                              <1> ;                      Load program overlay
    64                              <1> ; rbx ------>   |-------------------------------|
    65                              <1> ;               |  Pointer to the byte in the   |
    66                              <1> ;               |  prog space to start writing  |
    67                              <1> ;               |        the overlay at.        |
    68                              <1> ;               |-------------------------------|
    69                              <1> ;               | QWORD value used as the base  |
    70                              <1> ;               |   address for relocation      |
    71                              <1> ;               |   computations. In most cases |
    72                              <1> ;               |   should be the same as the   |
    73                              <1> ;               |   load pointer. The desired   |
    74                              <1> ;               |   load address is subtracted  |
    75                              <1> ;               |   from this value to generate |
    76                              <1> ;               |   a valid relocation factor,  |
    77                              <1> ;               |   much like for normal load   |
    78                              <1> ;               |   but here we are controlling |
    79                              <1> ;               |    precisely the factor by    |
    80                              <1> ;               |     which we relocate the     |
    81                              <1> ;               |           symbols.            |
    82                              <1> ;               |  (Called a Relocation Factor) |
    83                              <1> ;               |     Only FOR EXE Overlays.    |
    84                              <1> ;               |    For COM, 0 is sufficient.  |
    85                              <1> ;               |-------------------------------|
    86                              <1> ; For AL = 3: Both pointers must be aligned to section alignment.
    87                              <1> ;   If this is not the case, DOS will round UP both pointers to the 
    88                              <1> ;   section alignment for the file being loaded. 
    89                              <1> ; The overlay will be loaded so that the first byte at the start of the memory
    90                              <1> ; block is the first byte of the first section of the executable. No header
    91                              <1> ; information will be retained. Thus, (for now) overlays cannot be used to export 
    92                              <1> ; functions or import functions from DLLs. Furthermore, it is HIGHLY recommended
    93                              <1> ; that you compile any .EXE overlays to have a section alignment of 1 byte.
    94                              <1> ;
    95                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
    96                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
    97                              <1> ;
    98                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
    99 000054FA 55                  <1>     push rbp
   100 000054FB 4889E5              <1>     mov rbp, rsp
   101 000054FE 4881EC80000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   102                              <1>     ;Clear up the pointers on the stack frame
   103 00005505 31C9                <1>     xor ecx, ecx
   104 00005507 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   105                              <1>     ;These two are cleared
   106                              <1>     ;mov qword [rbp - execFrame.pEnvBase], rcx
   107                              <1>     ;mov qword [rbp - execFrame.pProgBase], rcx
   108 0000550B 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   109 0000550F 48894D98            <1>     mov qword [rbp - execFrame.pProgEP], rcx
   110                              <1> 
   111 00005513 B403                <1>     mov ah, execOverlay
   112 00005515 F605(92000000)FF    <1>     test byte [dosMgrPresent], -1 ;If bits set, change max to execBkgrnd
   113 0000551C 7402                <1>     jz short .noMulti
   114 0000551E B404                <1>     mov ah, execBkgrnd
   115                              <1> .noMulti:
   116 00005520 38E0                <1>     cmp al, ah
   117 00005522 7615                <1>     jbe .validSubfunction
   118                              <1> .badSubFunction:
   119 00005524 B801000000          <1>     mov eax, errInvFnc
   120 00005529 C605(FE030000)01    <1>     mov byte [errorLocus], eLocUnk
   121                              <1> .badExit:
   122 00005530 4889EC              <1>     mov rsp, rbp
   123 00005533 5D                  <1>     pop rbp
   124 00005534 E914160000          <1>     jmp extErrExit
   125                              <1> 
   126                              <1> .validSubfunction:
   127 00005539 3C02                <1>     cmp al, execInvld
   128 0000553B 74E7                <1>     je .badSubFunction
   129                              <1>     ;Save registers for each function call
   130 0000553D 48895DE0            <1>     mov qword [rbp - execFrame.pParam], rbx
   131 00005541 488955D8            <1>     mov qword [rbp - execFrame.pProgname], rdx
   132 00005545 0FB6C0              <1>     movzx eax, al
   133 00005548 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   134 0000554C 4889D7              <1>     mov rdi, rdx
   135 0000554F E8A9120000          <1>     call strlen ;Get string length in cx
   136 00005554 66894DE8            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   137                              <1>     ;Now open the file we wanna yeet to
   138 00005558 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   139 0000555A 55                  <1>     push rbp    ;Preserve local frame ptr
   140 0000555B E880D7FFFF          <1>     call openFileHdl
   141 00005560 5D                  <1>     pop rbp
   142 00005561 72CD                <1>     jc .badExit ;Exit preserving error code in al
   143                              <1>     ;Now ax has the file handle
   144 00005563 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   145 00005567 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   146 0000556A E8D9F1FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   147 0000556F 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   148 00005573 F7C280000000        <1>     test edx, devCharDev
   149 00005579 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   150 0000557B B002                <1>     mov al, errFnf
   151 0000557D E932060000          <1>     jmp .cleanAndFail
   152                              <1> .validDiskFile:
   153 00005582 31C0                <1>     xor eax, eax
   154 00005584 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Clear pEnv and pProg Bases
   155 00005588 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   156 0000558C 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   157 00005594 0F848D000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   158 0000559A 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   159 0000559E 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   160 000055A1 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   161 000055A4 7514                <1>     jnz short .copyEnvironmentBlock
   162 000055A6 488B35(13040000)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   163 000055AD 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   164 000055B1 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   165 000055B5 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, skip
   166 000055B8 746D                <1>     jz short .loadProgram
   167                              <1> .copyEnvironmentBlock:
   168 000055BA 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   169                              <1>     ;Get the length of the environment
   170 000055BD B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   171 000055C2 31C0                <1>     xor eax, eax
   172 000055C4 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   173                              <1> .envVerifyLp:
   174 000055C7 F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   175 000055C9 7531                <1>     jnz short .invalidEnvironmentError
   176 000055CB 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   177 000055CE FFC9                <1>     dec ecx
   178 000055D0 AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   179 000055D1 75F4                <1>     jnz short .envVerifyLp
   180                              <1> 
   181 000055D3 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   182 000055D6 57                  <1>     push rdi     ;Save the length of the environment block
   183 000055D7 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   184 000055DD 0FB75DE8            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   185 000055E1 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   186 000055E3 89FB                <1>     mov ebx, edi
   187 000055E5 C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   188 000055E8 55                  <1>     push rbp
   189 000055E9 E85DF7FFFF          <1>     call allocateMemory
   190 000055EE 5D                  <1>     pop rbp
   191 000055EF 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   192 000055F0 7314                <1>     jnc short .copyEnvironment
   193                              <1>     ;Fall thru if not enuff memory
   194                              <1> .insufficientMemory:
   195 000055F2 B808000000          <1>     mov eax, errNoMem
   196 000055F7 E9B8050000          <1>     jmp .cleanAndFail
   197                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   198 000055FC B80A000000          <1>     mov eax, errBadEnv
   199 00005601 E9AE050000          <1>     jmp .cleanAndFail
   200                              <1> 
   201                              <1> .copyEnvironment:
   202                              <1>     ;rax has the ptr to allocated memory block
   203                              <1>     ;rcx has the number of chars to copy from the source env block
   204 00005606 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   205 00005609 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   206 0000560D 488B75E0            <1>     mov rsi, qword [rbp - execFrame.pParam]
   207 00005611 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   208 00005614 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   209 00005616 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   210 0000561B 66AB                <1>     stosw       ;Away you go!
   211 0000561D 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   212 00005621 0FB74DE8            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   213 00005625 F3A4                <1>     rep movsb   ;Move the bytes to rdi
   214                              <1> ;Done with the environment... more or less
   215                              <1> .loadProgram:
   216 00005627 B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   217 0000562C 488D15(DA190000)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   218 00005633 E898050000          <1>     call .readDataFromHdl
   219 00005638 0F8271050000        <1>     jc .badFmtErr
   220 0000563E 85C0                <1>     test eax, eax   ;Were zero bytes read?
   221 00005640 0F8469050000        <1>     jz .badFmtErr
   222 00005646 3D40000000          <1>     cmp eax, imageDosHdr_size
   223 0000564B 0F826F030000        <1>     jb .loadCom
   224                              <1> 
   225 00005651 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   226 00005656 740B                <1>     je .proceedEXE
   227 00005658 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   228 0000565D 0F855D030000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   229                              <1> .proceedEXE:
   230                              <1>     ;Now we need to read e_lfanew
   231 00005663 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   232 00005664 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   233 00005667 8955B0              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   234 0000566A 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   235 0000566C 30C0                <1>     xor al, al  ;Set file pointer from start of file
   236 0000566E 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   237 00005672 E87ED8FFFF          <1>     call lseekHdl   ;Move to that position in the file
   238 00005677 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   239 00005678 B918000000          <1>     mov ecx, imageFileHeader_size
   240 0000567D E84E050000          <1>     call .readDataFromHdl       ;Now read the COFF header
   241 00005682 85C0                <1>     test eax, eax   ;Were zero bytes read?
   242 00005684 0F8425050000        <1>     jz .badFmtErr
   243 0000568A 3D18000000          <1>     cmp eax, imageFileHeader_size
   244 0000568F 0F821A050000        <1>     jb .badFmtErr
   245                              <1>     ;So now rdx points to the imageFileHeader
   246 00005695 813A50450000        <1>     cmp dword [rdx + imageFileHeader.dPESignature], imagePESignature
   247 0000569B 0F850E050000        <1>     jne .badFmtErr
   248 000056A1 66817A046486        <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   249 000056A7 0F8502050000        <1>     jne .badFmtErr
   250                              <1>     ;Check the binary is executable
   251 000056AD 0FB74216            <1>     movzx eax, word [rdx + imageFileHeader.wCharacteristics]
   252 000056B1 66A90200            <1>     test ax, imageFileExecutable
   253 000056B5 0F84F4040000        <1>     jz .badFmtErr
   254 000056BB 668945A0            <1>     mov word [rbp - execFrame.wCOFFChars], ax   ;Save this for later!
   255                              <1> 
   256 000056BF 66817A147000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   257 000056C5 0F82E4040000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   258                              <1>     ;Now save the number of sections in the the file
   259 000056CB 0FB74206            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   260 000056CF 85C0                <1>     test eax, eax   ;If this is 0, what?
   261 000056D1 0F84D8040000        <1>     jz .badFmtErr
   262 000056D7 66894598            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   263                              <1>     ;Now load Optional header, file ptr points to it so all good!
   264 000056DB B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   265                              <1>     ;rdx points to exeHdrSpace
   266 000056E0 E8EB040000          <1>     call .readDataFromHdl
   267 000056E5 85C0                <1>     test eax, eax   ;Were zero bytes read?
   268 000056E7 0F84C2040000        <1>     jz .badFmtErr
   269 000056ED 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   270 000056F2 0F82B7040000        <1>     jb .badFmtErr
   271                              <1>     ;Now File Ptr points to data dirs, not an issue
   272 000056F8 81459070000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   273                              <1>     ;We load the program in, one section at a time, reading section headers in
   274                              <1>     ; one at a time to the section header internal buffer.
   275 000056FF 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   276 00005707 7463                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   277 00005709 8B1D(121A0000)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   278 0000570F 488B05(221A0000)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   279 00005716 4885C0              <1>     test rax, rax
   280 00005719 750A                <1>     jnz .notDefaultStackAlloc
   281 0000571B 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   281 00005724 00                  <1>
   282                              <1> .notDefaultStackAlloc:
   283 00005725 01C3                <1>     add ebx, eax    ;Add stack allocation
   284 00005727 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   285                              <1>     ;Add also one section alignment as it is likely that our arena won't be 
   286                              <1>     ; section aligned and so we will need to align before reading, to 
   287                              <1>     ; guaranee that we will have space for the EXE header to be read in later.
   288 0000572D 031D(FA190000)      <1>     add ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   289 00005733 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   290 00005736 81C311000000        <1>     add ebx, 11h
   291 0000573C C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   292 0000573F 55                  <1>     push rbp
   293 00005740 E806F6FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   294 00005745 5D                  <1>     pop rbp
   295 00005746 0F82A6FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   296 0000574C 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   297 00005750 480500010000        <1>     add rax, psp_size
   298 00005756 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of exe hdr goes here
   299                              <1>     ;Finally, just check that we have some code to execute. 
   300                              <1>     ;Empty code sections are NOT allowed if executing. Only for overlays
   301 0000575A 813D(DE190000)0000- <1>     cmp dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfCode], 0
   301 00005762 0000                <1>
   302 00005764 0F8445040000        <1>     je .badFmtErr   ;If no bytes, exit error
   303 0000576A EB0B                <1>     jmp short .exeProceed1
   304                              <1> .exeOvlySkipAlloc:
   305 0000576C 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   306 00005770 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   307 00005773 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   308                              <1> .exeProceed1:
   309                              <1> ;===========================================================================
   310                              <1>     ;The below blocks are being kept because they can be turned on later
   311                              <1>     ; to change this exe loader to force section alignment of the 
   312                              <1>     ; base load address. It appears there is no need to enforce that the 
   313                              <1>     ; base load address be section aligned, but individual sections need
   314                              <1>     ; to adhere to the section alignment requirements thereafter. 
   315                              <1>     ;Finally, the pProgBase gets rescaled so that the first byte of the 
   316                              <1>     ; first section gets places at the load address and not at some
   317                              <1>     ; offset from it (as is usually the case, offset 1000h).
   318                              <1> ;===========================================================================
   319                              <1>     ;=======================================================================
   320                              <1>     ;Now we align the progBase to full header size aligned to the next page
   321                              <1>     ;mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   322                              <1>     ;add rax, rbx    ;Add this offset where the header should go in future
   323                              <1>     ;=======================================================================
   324                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   325                              <1>     ;It appears that the load address does NOT need to be aligned at all xD
   326                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   327                              <1>     ;Now we section pad. Once aligned, that is the program base address!
   328                              <1>     ;push rax
   329                              <1>     ;mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   330                              <1>     ;dec ecx ;Turn into a mask
   331                              <1>     ;and rax, rcx    ;Compute ptr modulo mask
   332                              <1>     ;inc ecx
   333                              <1>     ;sub rcx, rax
   334                              <1>     ;pop rdi
   335                              <1>     ;xor eax, eax
   336                              <1>     ;rep stosb
   337                              <1>     ;mov qword [rbp - execFrame.pProgBase], rdi
   338                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   339                              <1> 
   340                              <1>     ;So now copy one section at a time, read section header in
   341                              <1>     ;File pointer points to the directory table, so skip that
   342 00005777 8B15(461A0000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   343                              <1>     ;Load however many directories we have into place
   344                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   345 0000577D C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   346 00005780 31C9                <1>     xor ecx, ecx
   347 00005782 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   348 00005786 B001                <1>     mov al, 1   ;Move handle forwards from current position
   349 00005788 E868D7FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   350                              <1>     ;eax has pointer location after adjustment
   351 0000578D 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   352                              <1>     ;File now points to start of Section headers. Read first header in.
   353                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   354 00005790 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   355 00005794 0FB74D98            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   356 00005798 31F6                <1>     xor esi, esi    ;Use as an indicator for the first data segment. 
   357 0000579A 488975A8            <1>     mov qword [rbp - execFrame.bSegCount], rsi  ;Clear the segment counter
   358                              <1> .loadLp:
   359 0000579E 51                  <1>     push rcx    ;Save # of segments left on stack
   360 0000579F 57                  <1>     push rdi    ;Save the current buffer ptr here
   361 000057A0 B928000000          <1>     mov ecx, imageSectionHdr_size
   362 000057A5 488D15(4A1A0000)    <1>     lea rdx, sectHdr    ;Read section headers here
   363 000057AC E81F040000          <1>     call .readDataFromHdl
   364 000057B1 5F                  <1>     pop rdi
   365 000057B2 59                  <1>     pop rcx
   366 000057B3 85C0                <1>     test eax, eax
   367 000057B5 0F84F4030000        <1>     jz .badFmtErr
   368 000057BB 3D28000000          <1>     cmp eax, imageSectionHdr_size
   369 000057C0 0F85E9030000        <1>     jne .badFmtErr
   370                              <1>     ;File ptr moved forwards to next section header
   371 000057C6 81459028000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   372                              <1>     ;Section header read, now we load section into memory
   373                              <1>     ;Move file ptr to data location
   374 000057CD 8B15(5E1A0000)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   375 000057D3 85D2                <1>     test edx, edx
   376 000057D5 744B                <1>     jz short .skipRawPtrMove
   377 000057D7 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   378 000057DB 31C0                <1>     xor eax, eax    ;Seek from start of file
   379 000057DD 51                  <1>     push rcx
   380 000057DE 57                  <1>     push rdi
   381 000057DF E811D7FFFF          <1>     call lseekHdl
   382 000057E4 5F                  <1>     pop rdi
   383 000057E5 59                  <1>     pop rcx
   384                              <1>     ;Is this a overlay load?
   385 000057E6 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   386 000057EE 7532                <1>     jne short .skipRawPtrMove
   387                              <1>     ;Here we rescale to put the first byte at pLoadLoc and use the 
   388                              <1>     ; rescale value against RelocFct to compute the qRelocVal for later
   389                              <1>     ;Is this is the first segment with data being read into memory?
   390 000057F0 48FF45A8            <1>     inc qword [rbp - execFrame.bSegCount]
   391 000057F4 48817DA801000000    <1>     cmp qword [rbp - execFrame.bSegCount], 1 
   392 000057FC 7524                <1>     jne short .skipRawPtrMove   ;If not, skip
   393                              <1>     ;Now rebase the program to point the first byte of the first
   394                              <1>     ; section at the ProgBase.
   395 000057FE 51                  <1>     push rcx
   396 000057FF 57                  <1>     push rdi
   397 00005800 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Get the load address
   398 00005804 8B0D(561A0000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualAddress]
   399 0000580A 4829CF              <1>     sub rdi, rcx    ;Rebase by offset of the first section
   400 0000580D 48897DC0            <1>     mov qword [rbp - execFrame.pProgBase], rdi 
   401 00005811 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam]
   402 00005815 488B7F08            <1>     mov rdi, qword [rdi + loadOvly.qRelocFct]   ;Get the reload factor
   403 00005819 4829CF              <1>     sub rdi, rcx    ;Now rescale the relocation factor by the same amount
   404 0000581C 48897D88            <1>     mov qword [rbp - execFrame.qRelocVal], rdi  ;Now store this value for later
   405 00005820 5F                  <1>     pop rdi
   406 00005821 59                  <1>     pop rcx
   407                              <1> .skipRawPtrMove:
   408 00005822 51                  <1>     push rcx
   409 00005823 31FF                <1>     xor edi, edi
   410 00005825 8B3D(561A0000)      <1>     mov edi, dword [sectHdr + imageSectionHdr.dVirtualAddress]  ;Get where it should go in memory, offset from image base
   411 0000582B 48037DC0            <1>     add rdi, qword [rbp - execFrame.pProgBase]  ;Turn into offset from progbase
   412                              <1>     ;If a section has a virtual address outside of the allocation arena
   413                              <1>     ; refuse to load it IF it contains no BSS, Data or Code and skip to the 
   414                              <1>     ; next section.
   415 0000582F 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   416 00005833 4885D2              <1>     test rdx, rdx   ;If this is 0 (as in the case of overlay)...
   417 00005836 7432                <1>     jz short .okToLoad  ;skip this as it is assumed there is enough space!
   418 00005838 4881EA10000000      <1>     sub rdx, mcb_size   ;Go back a unit of mcb
   419 0000583F 31C9                <1>     xor ecx, ecx
   420 00005841 8B4A09              <1>     mov ecx, dword [rdx + mcb.blockSize]
   421 00005844 48C1E104            <1>     shl rcx, 4  ;Convert to bytes (multiply by 16)
   422 00005848 4881C210000000      <1>     add rdx, mcb_size   ;Go to the first byte of the mcb
   423 0000584F 4801CA              <1>     add rdx, rcx    ;Now rdx points to the first byte outside the arena
   424 00005852 4839FA              <1>     cmp rdx, rdi    ;If rdx > rdi, we are ok
   425 00005855 7713                <1>     ja short .okToLoad
   426                              <1>     ;Now check if this is a useless section. If so, we don't load it at all
   427                              <1> 
   428                              <1>     ;V-0000000000-EARMARK FOR REMOVAL-0000000000-V
   429 00005857 F705(6E1A0000)E000- <1>     test dword [sectHdr + imageSectionHdr.dCharacteristics], imgScnCntBSS | imgScnCntCode | imgScnCntData
   429 0000585F 0000                <1>
   430 00005861 0F8548030000        <1>     jnz .badFmtErr  ;If any of these bits set, error out
   431                              <1>     ;^-0000000000-EARMARK FOR REMOVAL-0000000000-^
   432                              <1> 
   433                              <1>     ;Else, just skip this section, goto next section
   434 00005867 59                  <1>     pop rcx
   435 00005868 EB3F                <1>     jmp short .gotoNextSection
   436                              <1> .okToLoad:
   437 0000586A 8B0D(521A0000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]   ;Get # of bytes to read
   438 00005870 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   439 00005873 57                  <1>     push rdi    ;Save section in memory locally
   440 00005874 E857030000          <1>     call .readDataFromHdl
   441 00005879 5F                  <1>     pop rdi
   442 0000587A 59                  <1>     pop rcx
   443 0000587B 0F822E030000        <1>     jc .badFmtErr
   444                              <1>     ;Don't check for a zero section read as empty sections may be present!
   445 00005881 3B05(521A0000)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   446 00005887 0F8522030000        <1>     jne .badFmtErr
   447                              <1>     ;Data read ok, now fill in any zeros needed
   448 0000588D 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   449                              <1> 
   450 00005890 51                  <1>     push rcx
   451                              <1>     ;Here do section padding
   452 00005891 4889F8              <1>     mov rax, rdi    ;Get the current address
   453 00005894 8B0D(FA190000)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   454 0000589A FFC9                <1>     dec ecx ;Turn into a mask
   455 0000589C 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   456 0000589F FFC1                <1>     inc ecx
   457 000058A1 4829C1              <1>     sub rcx, rax
   458 000058A4 31C0                <1>     xor eax, eax
   459 000058A6 F3AA                <1>     rep stosb
   460 000058A8 59                  <1>     pop rcx
   461                              <1> .gotoNextSection:
   462 000058A9 FFC9                <1>     dec ecx ;Decrement our section counter
   463 000058AB 7419                <1>     jz short .doExeFixups
   464                              <1>     ;Read next section header in here
   465 000058AD 51                  <1>     push rcx
   466 000058AE 57                  <1>     push rdi
   467 000058AF 30C0                <1>     xor al, al  ;Move rel start of file
   468 000058B1 8B5590              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   469 000058B4 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   470 000058B8 31C9                <1>     xor ecx, ecx
   471 000058BA E836D6FFFF          <1>     call lseekHdl
   472 000058BF 5F                  <1>     pop rdi
   473 000058C0 59                  <1>     pop rcx
   474 000058C1 E9D8FEFFFF          <1>     jmp .loadLp
   475                              <1> .doExeFixups:
   476                              <1> ;Here we fixup addresses if needed
   477                              <1> ;If the program is loaded at its desired location never need to relocate.
   478                              <1> ;Else we need to have a .reloc section to see if we need to do relocations. 
   479                              <1> ;   If the program has had it's .reloc section stripped by the linker
   480                              <1> ;       or has no .reloc directory, we fail
   481                              <1> ;   Else, we read the .reloc directory in. It most likely will have no 
   482                              <1> ;       relocations anyway.
   483                              <1> 
   484                              <1> ;If program base = desired load, skip relocs
   485 000058C6 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]
   486 000058CA 483B15(F2190000)    <1>     cmp rdx, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   487 000058D1 0F84CA000000        <1>     je .exeComplete
   488                              <1> ;If program has had relocs stripped, fail
   489 000058D7 0FB745A0            <1>     movzx eax, word [rbp - execFrame.wCOFFChars]
   490 000058DB 66A90100            <1>     test ax, imageFileRelocsStripped
   491 000058DF 0F85CA020000        <1>     jnz .badFmtErr
   492                              <1> ;If program has no .reloc section, fail
   493 000058E5 8B15(461A0000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   494 000058EB 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   495 000058F1 0F82B8020000        <1>     jb .badFmtErr ;Need relocs but no .reloc directory exists
   496                              <1> ;Now we get the reloc section
   497 000058F7 8B55B0              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   498 000058FA 81C2B0000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   499                              <1>     ;eax now points to position in file of directory entry for reloc
   500 00005900 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   501 00005904 31C0                <1>     xor eax, eax
   502 00005906 E8EAD5FFFF          <1>     call lseekHdl   ;Move handle there in file
   503 0000590B 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   504 0000590E B908000000          <1>     mov ecx, imageDataDirectory_size
   505                              <1>     ;Read 8 bytes into sectHdr space
   506 00005913 488D15(4A1A0000)    <1>     lea rdx, sectHdr
   507 0000591A E8B1020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   508 0000591F 85C0                <1>     test eax, eax
   509 00005921 0F8488020000        <1>     jz .badFmtErr
   510 00005927 39C8                <1>     cmp eax, ecx
   511 00005929 0F8580020000        <1>     jne .badFmtErr
   512                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   513 0000592F 8B35(4A1A0000)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   514 00005935 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   515 00005937 7468                <1>     jz .exeComplete   ;... including if overlay
   516 00005939 480375C0            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   517                              <1>     ;Now rsi points to where in memory the relocation data table is
   518                              <1>     ;Now compute the relocation factor =
   519                              <1>     ;   Difference from the load address and prefered
   520 0000593D 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   521 00005941 482B05(F2190000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase] 
   522 00005948 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   523 00005950 750F                <1>     jne short .notOverlayReloc
   524                              <1>     ;For overlays, we use the relocation factor as the base of computation.
   525                              <1>     ;Thus now the relocation factor becomes the ProgBase.
   526                              <1>     ;This should be the same as ProgBase anyway for overlays.
   527 00005952 488B4588            <1>     mov rax, qword [rbp - execFrame.qRelocVal]   ;Get the overlay reloc factor
   528 00005956 482B05(F2190000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   529                              <1>     ;Store this as the overlay program base
   530 0000595D 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   531                              <1> .notOverlayReloc:
   532 00005961 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   533                              <1>     ;rsi points to relocation data table in memory
   534 00005964 8B0D(4E1A0000)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   535 0000596A 85C9                <1>     test ecx, ecx    ;If no relocations, skip
   536 0000596C 7433                <1>     jz .exeComplete
   537                              <1>     ;rsi points to the first base relocation block. The relocations begin
   538                              <1>     ; after the first block
   539                              <1>     ;ecx has the number of base relocation blocks to process.
   540                              <1> .nextBlock:
   541 0000596E 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   542 0000596F 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   543 00005971 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   544 00005975 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   545 00005978 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes in block
   546 0000597B 67E31E              <1>     jecxz .blockDone    
   547 0000597E 81E908000000        <1>     sub ecx, 8
   548 00005984 4881C608000000      <1>     add rsi, 8  ;Go to the start of the directory data
   549 0000598B D1E9                <1>     shr ecx, 1  ;Get number of directories = # of relocs to do
   550                              <1> .blockNotDone:
   551 0000598D 66AD                <1>     lodsw   ;Get the next page offset word
   552 0000598F 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   553                              <1>     ;rdi points to base, rax give offset into 4Kb page
   554 00005994 48011C07            <1>     add qword [rdi + rax], rbx    ;Relocation factor was saved in rbx
   555 00005998 FFC9                <1>     dec ecx
   556 0000599A 75F1                <1>     jnz .blockNotDone
   557                              <1> .blockDone:
   558 0000599C 59                  <1>     pop rcx
   559 0000599D FFC9                <1>     dec ecx
   560 0000599F 75CD                <1>     jnz .nextBlock
   561                              <1> .exeComplete:
   562 000059A1 8B05(EA190000)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   563                              <1>     ;Now get EP relative to the (rescaled) load address.
   564 000059A7 480345C0            <1>     add rax, qword [rbp - execFrame.pProgBase]
   565 000059AB 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   566 000059AF FF15(A3000000)      <1>     call qword [registerDLL]    ;Now we register the DLL and any import/exports
   567 000059B5 0F82F4010000        <1>     jc .badFmtErr   ;If this errors out for some reason, quit loading EXE
   568 000059BB E9A5000000          <1>     jmp .buildChildPSP
   569                              <1> .loadCom:
   570                              <1>     ;File is open here, so just read the file into memory. 
   571                              <1>     ;The file cannot exceed 64Kb in size. COM ONLY for small files!!!!
   572                              <1>     ;Allocate 64Kb of memory, or as much as we can
   573 000059C0 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   574 000059C8 7450                <1>     je .comOverlay
   575 000059CA BBFFFF0000          <1>     mov ebx, 0FFFFh ;64Kb pls
   576 000059CF 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   577 000059D2 55                  <1>     push rbp
   578 000059D3 E873F3FFFF          <1>     call allocateMemory
   579 000059D8 5D                  <1>     pop rbp
   580 000059D9 734C                <1>     jnc .comallocOk
   581 000059DB 3C08                <1>     cmp al, errNoMem
   582 000059DD 0F85D1010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   583                              <1>     ;rbx should have the amount available
   584                              <1>     ;We check if this value is psp_size more than filesize
   585 000059E3 53                  <1>     push rbx    ;Save new minimum size
   586 000059E4 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   587 000059E9 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   588 000059ED 31D2                <1>     xor edx, edx    ;Go to end of file
   589 000059EF E801D5FFFF          <1>     call lseekHdl
   590                              <1>     ;eax has file size
   591 000059F4 5B                  <1>     pop rbx ;Get back max alloc size
   592 000059F5 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   593 000059F7 29C2                <1>     sub edx, eax
   594 000059F9 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   595 000059FF 0F82EDFBFFFF        <1>     jb .insufficientMemory   ;Fail
   596 00005A05 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   597 00005A08 55                  <1>     push rbp
   598 00005A09 E83DF3FFFF          <1>     call allocateMemory
   599 00005A0E 5D                  <1>     pop rbp
   600 00005A0F 0F829F010000        <1>     jc .cleanAndFail
   601 00005A15 E90D000000          <1>     jmp .comallocOk
   602                              <1> .comOverlay:
   603                              <1>     ;Here we simply read the file into the buffer provided
   604 00005A1A 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   605 00005A1E 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   606 00005A21 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   607 00005A25 EB0A                <1>     jmp short .comRead
   608                              <1> .comallocOk:
   609                              <1>     ;rax should point to the first byte
   610 00005A27 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   611 00005A2B 480500010000        <1>     add rax, psp_size
   612                              <1> .comRead:
   613 00005A31 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   614                              <1> 
   615 00005A35 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   616 00005A3A 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   617 00005A3E 31D2                <1>     xor edx, edx    ;Go to end of file
   618 00005A40 E8B0D4FFFF          <1>     call lseekHdl
   619                              <1>     ;eax has filesize now
   620 00005A45 50                  <1>     push rax    ;Save filesize
   621 00005A46 31C0                <1>     xor eax, eax    ;Reposition to start of file
   622 00005A48 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   623 00005A4C 31D2                <1>     xor edx, edx    ;Go to start of file
   624 00005A4E E8A2D4FFFF          <1>     call lseekHdl
   625 00005A53 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   626 00005A54 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   627 00005A58 E873010000          <1>     call .readDataFromHdl   ;Read from the file handle
   628 00005A5D 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   629 00005A61 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   630                              <1> .buildChildPSP:
   631                              <1>     ;We can close handle now
   632 00005A65 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   633 00005A69 55                  <1>     push rbp
   634 00005A6A E89BD3FFFF          <1>     call closeFileHdl   ;Close the file
   635 00005A6F 5D                  <1>     pop rbp
   636                              <1> 
   637                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   638 00005A70 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   639 00005A78 0F840E010000        <1>     je .overlayExit
   640                              <1>     ;Now build the PSP
   641 00005A7E 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   642 00005A81 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   643 00005A85 52                  <1>     push rdx
   644 00005A86 55                  <1>     push rbp
   645 00005A87 E814F8FFFF          <1>     call createPSP
   646 00005A8C 5D                  <1>     pop rbp
   647 00005A8D 5A                  <1>     pop rdx
   648                              <1> 
   649                              <1>     ;Now copy the environment block over if rax != 0
   650 00005A8E 488B5DD0            <1>     mov rbx, qword [rbp - execFrame.pEnvBase]
   651 00005A92 4885DB              <1>     test rbx, rbx
   652 00005A95 7404                <1>     jz short .skipEnvCopy
   653 00005A97 48895A3E            <1>     mov qword [rdx + psp.envPtr], rbx
   654                              <1> .skipEnvCopy:
   655                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   656 00005A9B 488915(13040000)    <1>     mov qword [currentPSP], rdx
   657 00005AA2 E85B100000          <1>     call dosCrit1Enter
   658 00005AA7 E84B010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   659                              <1> 
   660 00005AAC 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   661 00005AB3 48893D(0B040000)    <1>     mov qword [currentDTA], rdi ;and set it!
   662                              <1> 
   663                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   664                              <1>     ; and set FS to point to the PSP
   665 00005ABA 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   666                              <1> 
   667 00005ABE 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   668 00005AC2 B925000000          <1>     mov ecx, fcb_size
   669 00005AC7 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   670 00005ACB 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   671 00005ACD F3A4                <1>     rep movsb   ;Copy fcb 1 over
   672 00005ACF 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   673 00005AD3 B925000000          <1>     mov ecx, fcb_size
   674 00005AD8 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   675 00005ADC 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   676 00005ADE F3A4                <1>     rep movsb   ;Copy fcb 2 over
   677 00005AE0 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   678 00005AE4 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   679 00005AEB B980000000          <1>     mov ecx, 80h
   680 00005AF0 F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   681                              <1> 
   682 00005AF2 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   683 00005AF4 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   684                              <1> 
   685                              <1>     ;Put PSP base value in edx:eax to place in FS, dont rely on this in future!
   686 00005AF7 B9000100C0          <1>     mov ecx, 0C0000100h ;R/W FS MSR
   687 00005AFC 89D0                <1>     mov eax, edx    ;Move low dword address into rax
   688 00005AFE 48C1EA20            <1>     shr rdx, 20h    ;Shift high dword in low dword
   689 00005B02 0F30                <1>     wrmsr   ;Write the new value to FS MSR
   690                              <1> 
   691 00005B04 E89C0B0000          <1>     call getUserRegs    ;Need to get Int 42h address from stack
   692 00005B09 488B4648            <1>     mov rax, qword [rsi + callerFrame.rip]  ;Get parent return address
   693 00005B0D 4889470A            <1>     mov qword [rdi + psp.oldInt42h], rax    ;and save it in PSP
   694 00005B11 4889C2              <1>     mov rdx, rax    ;Move return address to rdx to set up the Interrupt Vector
   695 00005B14 B042                <1>     mov al, 42h
   696 00005B16 E848120000          <1>     call setIntVector   ;bx preserved by this call
   697                              <1> 
   698                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   699 00005B1B 88D8                <1>     mov al, bl
   700 00005B1D 30DB                <1>     xor bl, bl
   701 00005B1F E8A50B0000          <1>     call setDrive
   702 00005B24 7302                <1>     jnc .drive1Ok
   703 00005B26 B3FF                <1>     mov bl, -1
   704                              <1> .drive1Ok:
   705 00005B28 88F8                <1>     mov al, bh
   706 00005B2A 30FF                <1>     xor bh, bh
   707 00005B2C E8980B0000          <1>     call setDrive
   708 00005B31 7302                <1>     jnc .drive2Ok
   709 00005B33 B7FF                <1>     mov bh, -1
   710                              <1> .drive2Ok:
   711                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   712                              <1>     ;rdi has pointer to psp
   713 00005B35 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   714                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   715 00005B38 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   716 00005B3D 48B8F8FFFFFFFFFFFF- <1>     mov rax, ~7     ;Clear the bottom 3 bits
   716 00005B46 FF                  <1>
   717 00005B47 4821C6              <1>     and rsi, rax    ;To align downwards
   718                              <1>     ;We align stack to qword. x64 ABI requires paragraph alignment.
   719                              <1>     ;That is the job of the runtime to handle.
   720                              <1> ;Registers carrying data at this point:
   721                              <1> ;bx = FCB drive statuses
   722                              <1> ;rsi = Stack Base
   723                              <1> ;rbp = execFrame
   724 00005B4A 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   725 00005B4E 750B                <1>     jne short .noBg
   726                              <1>     ;Get termination mode in ecx before xfring control to dosmgr
   727 00005B50 56                  <1>     push rsi
   728 00005B51 E84F0B0000          <1>     call getUserRegs
   729 00005B56 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]  ;Get termination mode
   730 00005B5A 5E                  <1>     pop rsi
   731                              <1> .noBg:
   732 00005B5B FF15(93000000)      <1>     call qword [launchTask]
   733 00005B61 7251                <1>     jc short .cleanAndFail
   734                              <1> ;Final step: Transfer control
   735 00005B63 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   736 00005B67 742C                <1>     je .xfrProgram
   737 00005B69 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   738 00005B6D 741D                <1>     je .overlayExit ;Skip the below for background tasks
   739 00005B6F 488B4598            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   740 00005B73 488B55E0            <1>     mov rdx, qword [rbp - execFrame.pParam]
   741 00005B77 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   742 00005B7B 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   743 00005B7E 488906              <1>     mov qword [rsi], rax    ;Store the FCB status on the top of stack for AH=01h
   744 00005B81 4881EE08000000      <1>     sub rsi, 8  ;Now go down one so that we can pop the AX value from the stack
   745 00005B88 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   746                              <1> .overlayExit:
   747 00005B8C 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   748 00005B8F 5D                  <1>     pop rbp ;Point rsp to the return address
   749 00005B90 E9AA0F0000          <1>     jmp extGoodExit ;And return!
   750                              <1> .xfrProgram:
   751 00005B95 FA                  <1>     cli
   752 00005B96 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   753 00005B99 C605(FC030000)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   754 00005BA0 FB                  <1>     sti
   755                              <1> 
   756 00005BA1 57                  <1>     push rdi    ;Push &psp[0] onto the stack to allow for ret exit
   757 00005BA2 FF7598              <1>     push qword [rbp - execFrame.pProgEP]
   758 00005BA5 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   759 00005BA8 4989F9              <1>     mov r9, rdi
   760 00005BAB 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   761                              <1>     return  ;Return to child task
    13                              <2> %%_ret:
    14 00005BAE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   762                              <1> ;r8 is guaranteed to have a copy of the PSP.
   763                              <1> ;ax is guaranteed to have the validity signatures in AH and AL.
   764                              <1> ;Everything else is optional and potentially changable at a later stage
   765                              <1> 
   766                              <1> .badFmtErr:
   767 00005BAF B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   768                              <1> .cleanAndFail:
   769                              <1> ;Close the open file and any open resources and fail
   770 00005BB4 E82F000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   771 00005BB9 E84E0F0000          <1>     call dosCrit1Exit
   772 00005BBE 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   773 00005BC2 50                  <1>     push rax    ;Save error code
   774 00005BC3 55                  <1>     push rbp
   775 00005BC4 E841D2FFFF          <1>     call closeFileHdl
   776 00005BC9 5D                  <1>     pop rbp
   777 00005BCA 58                  <1>     pop rax
   778 00005BCB E960F9FFFF          <1>     jmp .badExit
   779                              <1> 
   780                              <1> .readDataFromHdl:
   781                              <1> ;Input: ecx = Number of bytes to transfer
   782                              <1> ;       rdx = Ptr to the buffer to use
   783 00005BD0 52                  <1>     push rdx
   784 00005BD1 E812000000          <1>     call .clearArenaOwner   ;Entering critical section!
   785 00005BD6 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   786 00005BDA 55                  <1>     push rbp
   787 00005BDB E869D2FFFF          <1>     call readFileHdl
   788 00005BE0 5D                  <1>     pop rbp
   789 00005BE1 E811000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   790 00005BE6 5A                  <1>     pop rdx
   791                              <1>     return
    13                              <2> %%_ret:
    14 00005BE7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   792                              <1> .clearArenaOwner:
   793 00005BE8 53                  <1>     push rbx
   794 00005BE9 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   795 00005BEB E8120F0000          <1>     call dosCrit1Enter
   796 00005BF0 E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   797 00005BF5 5B                  <1>     pop rbx
   798                              <1>     return
    13                              <2> %%_ret:
    14 00005BF6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   799                              <1> .setPSPArenaOwner:
   800                              <1> ;Sets the current PSP as the arena owner
   801 00005BF7 53                  <1>     push rbx
   802 00005BF8 488B1D(13040000)    <1>     mov rbx, qword [currentPSP]
   803 00005BFF E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   804 00005C04 E8030F0000          <1>     call dosCrit1Exit
   805 00005C09 5B                  <1>     pop rbx
   806                              <1>     return
    13                              <2> %%_ret:
    14 00005C0A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   807                              <1> .setProgOrEnvArenaOwnerToRBX:
   808                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   809 00005C0B 9C                  <1>     pushfq
   810 00005C0C 50                  <1>     push rax
   811                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   812                              <1>     ;This is because they are set up at separate points in the routine!
   813 00005C0D 488B45C8            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   814 00005C11 E80C000000          <1>     call .writeArenaHeaderOwner
   815 00005C16 488B45D0            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   816 00005C1A E803000000          <1>     call .writeArenaHeaderOwner
   817 00005C1F 58                  <1>     pop rax
   818 00005C20 9D                  <1>     popfq
   819                              <1>     return
    13                              <2> %%_ret:
    14 00005C21 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   820                              <1> .writeArenaHeaderOwner:
   821                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   822                              <1> ;       rbx = Owner ID
   823 00005C22 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   824                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00005C25 74FA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   825 00005C27 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   826 00005C2D 48895801            <1>     mov qword [rax + 1], rbx
   827                              <1>     return
    13                              <2> %%_ret:
    14 00005C31 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    40                                  %include "./Source/Kernel/Local/local.asm"
     1                              <1> ;Localisation based functions live here
     2                              <1> 
     3                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
     4                              <1> ;al = 0 => Get the switch char
     5                              <1> ;al = 1 => Set the switch char to whats in DL
     6                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
     7                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
     8                              <1> ;       Always returns -1 => /DEV/ optional
     9                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    10                              <1> ;       Input value is ignored
    11 00005C32 3C01                <1>     cmp al, 01
    12 00005C34 740B                <1>     je .setSC
    13 00005C36 7210                <1>     jb .getSC
    14 00005C38 3C03                <1>     cmp al, 03
    15 00005C3A 7214                <1>     jb .getDev
    16 00005C3C 741C                <1>     je .setDev
    17 00005C3E B0FF                <1>     mov al, -1
    18                              <1>     return
    13                              <2> %%_ret:
    14 00005C40 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> .setSC:
    20 00005C41 8815(C5030000)      <1>     mov byte [switchChar], dl
    21                              <1>     return
    13                              <2> %%_ret:
    14 00005C47 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> .getSC:
    23 00005C48 8A15(C5030000)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    24 00005C4E EB02                <1>     jmp short .getRet
    25                              <1> .getDev:
    26 00005C50 B2FF                <1>     mov dl, -1
    27                              <1> .getRet:
    28 00005C52 E84E0A0000          <1>     call getUserRegs
    29 00005C57 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    30                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    31                              <1>     return
    13                              <2> %%_ret:
    14 00005C5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> 
    34                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    35                              <1> ;Currently only accept subfunction al = 0, current country
    36                              <1> ;AL > 0 => errInvFnc, Subfunction error
    37                              <1> ;rdx = Ptr to buffer. If -1 => Set Country information. Also error for now.
    38 00005C5B 84C0                <1>     test al, al
    39 00005C5D 740A                <1>     jz .currentCountry
    40                              <1> .invalidFunction:
    41 00005C5F B801000000          <1>     mov eax, errInvFnc
    42 00005C64 E9E40E0000          <1>     jmp extErrExit
    43                              <1> .currentCountry:
    44 00005C69 4881FAFFFFFFFF      <1>     cmp rdx, -1
    45 00005C70 74ED                <1>     je .invalidFunction
    46 00005C72 488D35A1A3FFFF      <1>     lea rsi, ctryTbl
    47 00005C79 4889D7              <1>     mov rdi, rdx
    48 00005C7C B926000000          <1>     mov ecx, countryStruc_size
    49 00005C81 F3A4                <1>     rep movsb
    50 00005C83 31C0                <1>     xor eax, eax
    51 00005C85 E9B50E0000          <1>     jmp extGoodExit
    52                              <1> 
    53                              <1> 
    54                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    55                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    56 00005C8A C3                  <1>     ret
    41                                  %include "./Source/Kernel/ctrlc.asm"
     1                              <1> 
     2                              <1> fullcriticalErrorInvoke:
     3 00005C8B B803000000          <1>     mov eax, 03 ;Always fail for now
     4 00005C90 F9                  <1>     stc
     5                              <1>     return
    13                              <2> %%_ret:
    14 00005C91 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     6                              <1> xlatHardError:
     7                              <1> ;Translates a hard error code to a generic DOS error
     8                              <1> ;Input: edi = eax = Hard Error Code
     9 00005C92 50                  <1>     push rax
    10 00005C93 3D13000000          <1>     cmp eax, drvErrShft
    11 00005C98 7205                <1>     jb .skipXlat
    12 00005C9A 0513000000          <1>     add eax, drvErrShft
    13                              <1> .skipXlat:
    14 00005C9F 88052AA6FFFF        <1>     mov byte [hardErrorStack], al   ;Store this error code here
    15 00005CA5 58                  <1>     pop rax
    16 00005CA6 56                  <1>     push rsi
    17 00005CA7 488D357DA4FFFF      <1>     lea rsi, extErrTbl
    18 00005CAE E8F30E0000          <1>     call setErrorVars
    19 00005CB3 5E                  <1>     pop rsi
    20                              <1>     return
    13                              <2> %%_ret:
    14 00005CB4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> diskDevErr:
    23                              <1> ;Called, NOT Jumped to. 
    24                              <1> ;Input: rdi = Disk Buffer pointer
    25                              <1> ;       eax = Status word (Zero Extended)
    26                              <1> ;       rbp = Disk DPB pointer
    27                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    28                              <1> ;Output: al = Int 44h response (0-3)
    29                              <1> ; All other registers preserved
    30 00005CB5 48893D(03040000)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    31 00005CBC 89C7                <1>     mov edi, eax    ;Store status word in rdi
    32 00005CBE 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    33 00005CC1 8A25(5B040000)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    34 00005CC7 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    35                              <1>     ;Test for correct buffer data type
    36 00005CCA 53                  <1>     push rbx    ;Save rbx temporarily
    37 00005CCB 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    38 00005CCE F6C301              <1>     test bl, dosBuffer
    39 00005CD1 7505                <1>     jnz .df0
    40 00005CD3 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    41 00005CD6 EB17                <1>     jmp short .df3
    42                              <1> .df0:
    43 00005CD8 F6C302              <1>     test bl, fatBuffer
    44 00005CDB 7505                <1>     jnz .df1
    45 00005CDD 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    46 00005CE0 EB0D                <1>     jmp short .df3
    47                              <1> .df1:
    48 00005CE2 F6C304              <1>     test bl, dirBuffer
    49 00005CE5 7505                <1>     jnz .df2
    50 00005CE7 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    51 00005CEA EB03                <1>     jmp short .df3
    52                              <1> .df2:
    53 00005CEC 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    54                              <1> .df3:
    55 00005CEF 5B                  <1>     pop rbx
    56 00005CF0 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    57 00005CF4 E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    58 00005CF9 488B2D(7D070000)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    59 00005D00 488B3D(03040000)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    60                              <1>     return
    13                              <2> %%_ret:
    14 00005D07 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> 
    62                              <1> charDevErr:
    63                              <1> ;Called with ah with additional bits
    64 00005D08 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
    65                              <1> criticalErrorSetup:
    66 00005D0B 8825(5B040000)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    67 00005D11 48892D(7D070000)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
    68 00005D18 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    69                              <1>     ;For now, fall through, but need much work to change it later! 
    70                              <1> 
    71                              <1> 
    72                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    73                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    74                              <1> ; to the critical error handler.
    75                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    76                              <1> ; and with Int44Bitfield set
    77                              <1> ;               AH = Critical Error Bitfield
    78                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    79                              <1> ;               Bit 6 - Reserved
    80                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    81                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    82                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    83                              <1> ;               Bits [2-1] = Affected Disk Error
    84                              <1> ;                     0 0   DOS area
    85                              <1> ;                     0 1   FAT area
    86                              <1> ;                     1 0   Directory area
    87                              <1> ;                     1 1   Data area
    88                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    89                              <1> ;               AL  = Failing drive number if AH[7] = 0
    90                              <1> ;               DIL = Error code for errorMsg
    91                              <1> ;               RSI = EA of Device Header for which device the error occured
    92                              <1> ;Return:
    93                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    94                              <1> ;                  = 1 - Retry the Operation    (Retry)
    95                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
    96                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    97                              <1> ; Return response from int 44h in al
    98                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
    99                              <1> ; This function will terminate the program if an abort was requested!
   100                              <1> ; This function also destroys RBP
   101 00005D1E 803D(FB030000)01    <1>     cmp byte [critErrFlag], 1
   102 00005D25 7204                <1>     jb .noIntError  ;If not 0, enter
   103 00005D27 B003                <1>     mov al, critFail    ;Else, return Fail always
   104 00005D29 EB51                <1>     jmp short .exit     ;Don't translate fail to abort
   105                              <1> .noIntError:
   106 00005D2B FA                  <1>     cli ;Disable Interrupts
   107 00005D2C FE05(FB030000)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   108 00005D32 FE0D(FC030000)      <1>     dec byte [inDOS]    ;Exiting DOS
   109 00005D38 488925(53040000)    <1>     mov qword [xInt44hRSP], rsp
   110 00005D3F 488B25(6E040000)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   111 00005D46 31ED                <1>     xor ebp, ebp    ;Always zeroed
   112 00005D48 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   113 00005D4A 488B25(53040000)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   114 00005D51 C605(FB030000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   115 00005D58 FE05(FC030000)      <1>     inc byte [inDOS]    ;Reenter DOS
   116 00005D5E FB                  <1>     sti ;Reenable Interrupts
   117                              <1>     ;Now we check that the response given was allowed, and translate if needed
   118                              <1> .checkResponse:
   119 00005D5F 3C00                <1>     cmp al, critIgnore
   120 00005D61 7421                <1>     je .checkIgnore
   121 00005D63 3C01                <1>     cmp al, critRetry
   122 00005D65 7428                <1>     je .checkRetry
   123 00005D67 3C03                <1>     cmp al, critFail
   124 00005D69 752F                <1>     jne .abort   ;Must be abort
   125                              <1> .setFail:   ;Here is for fail
   126 00005D6B B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   127 00005D6D FE05(5D040000)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   128 00005D73 F605(5B040000)08    <1>     test byte [Int44bitfld], critFailOK
   129 00005D7A 741E                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   130                              <1> .exit:
   131 00005D7C C605(FD030000)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   132                              <1>     return
    13                              <2> %%_ret:
    14 00005D83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   133                              <1> .checkIgnore:
   134 00005D84 F605(5B040000)20    <1>     test byte [Int44bitfld], critIgnorOK
   135 00005D8B 75EF                <1>     jnz .exit
   136 00005D8D EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   137                              <1> .checkRetry:
   138 00005D8F F605(5B040000)10    <1>     test byte [Int44bitfld], critRetryOK
   139 00005D96 75E4                <1>     jnz .exit   
   140 00005D98 EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   141                              <1> .abort:
   142                              <1> ;Prepare to abort. We abort from within!
   143                              <1> ;If a network request requests abort, translate to fail
   144 00005D9A 803D(F1060000)FF    <1>     cmp byte [dosInvoke], -1
   145 00005DA1 7509                <1>     jne .kill   ;If this is zero, local invokation
   146 00005DA3 C605(89040000)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   147 00005DAA EBD0                <1>     jmp short .exit
   148                              <1> .kill:
   149 00005DAC 66893D(FF030000)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   150 00005DB3 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   151 00005DB5 C605(F5060000)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   152 00005DBC E90DF6FFFF          <1>     jmp terminateClean.altEP
   153                              <1> 
   154                              <1> ctrlBreakHdlr:
   155 00005DC1 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   156 00005DC3 E882C4FFFF          <1>     call printCaretASCII
   157 00005DC8 E8ADC4FFFF          <1>     call printCRLF
   158                              <1>     ;Reset the console back to 0
   159 00005DCD C605(87040000)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   160                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   161                              <1> .exceptEP:
   162                              <1> ;If return via RET/RET 8 with CF set, DOS will abort program with errorlevel 0
   163                              <1> ;Else (RET/RET 8 with CF clear or IRET with CF ignored)
   164                              <1> ;   interrupted DOS call is restarted
   165 00005DD4 FA                  <1> 	cli
   166 00005DD5 488B25(6E040000)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   167 00005DDC E8F30C0000          <1> 	call dosPopRegs ;Get user state back
   168 00005DE1 C605(FC030000)00    <1>     mov byte [inDOS], 0 ;Make sure we "exit" DOS 
   169 00005DE8 C605(FB030000)00    <1>     mov byte [critErrFlag], 0
   170 00005DEF 488925(1B040000)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   171 00005DF6 F8                  <1>     clc
   172 00005DF7 CD43                <1>     int 43h ;Call critical error handler
   173 00005DF9 FA                  <1>     cli ;Clear interrupts again
   174 00005DFA 488905(27040000)    <1>     mov qword [oldRAX], rax ;Save rax
   175 00005E01 9C                  <1>     pushfq  ;Get flags in rax
   176 00005E02 58                  <1>     pop rax 
   177 00005E03 483B25(1B040000)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   178 00005E0A 750C                <1>     jne .checkCF
   179                              <1> .returnToDOS:
   180 00005E0C 488B05(27040000)    <1>     mov rax, qword [oldRAX]
   181 00005E13 E9620B0000          <1>     jmp functionDispatch    ;Goto int 41h
   182                              <1> .checkCF:
   183 00005E18 488B25(1B040000)    <1>     mov rsp, qword [xInt43hRSP]  ;Account for the flags and SS:RSP left on stack
   184 00005E1F A801                <1>     test al, 1  ;CF set?
   185 00005E21 74E9                <1>     jz .returnToDOS ;If yes, subfunction number must be in al
   186 00005E23 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   187 00005E28 C605(7F040000)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   188 00005E2F E9460B0000          <1>     jmp functionDispatch
   189                              <1> 
   190                              <1> ;CPU Exception handlers
   191                              <1> ;If a CPU exception occurs, and inDOS = 0, the default behaviour will be to 
   192                              <1> ; CTRL+C exit.
   193                              <1> ; If inDOS > 0, then we assume the error is within DOS and thus we halt the
   194                              <1> ; system.
   195                              <1> ; Also halt if the application is it's own parent.
   196                              <1> ;An application should hook these interupts if they wish to not 
   197                              <1> ; CTRL+C exit, and instead return to DOS.
   198                              <1> i0:
   199 00005E34 31C0                <1>     xor eax, eax
   200 00005E36 E9AB000000          <1>     jmp cpu_2args
   201                              <1> i1:
   202 00005E3B B801000000          <1>     mov eax, 1
   203 00005E40 E9A1000000          <1>     jmp cpu_2args
   204                              <1> i2:
   205 00005E45 B802000000          <1>     mov eax, 2
   206 00005E4A E997000000          <1>     jmp cpu_2args
   207                              <1> i3:
   208 00005E4F B803000000          <1>     mov eax, 3
   209 00005E54 E98D000000          <1>     jmp cpu_2args
   210                              <1> i4:
   211 00005E59 B804000000          <1>     mov eax, 4
   212 00005E5E E983000000          <1>     jmp cpu_2args
   213                              <1> i5:
   214 00005E63 B805000000          <1>     mov eax, 5
   215 00005E68 EB7C                <1>     jmp short cpu_2args
   216                              <1> i6:
   217 00005E6A B806000000          <1>     mov eax, 6
   218 00005E6F EB75                <1>     jmp short cpu_2args
   219                              <1> i7:
   220 00005E71 B807000000          <1>     mov eax, 7
   221 00005E76 EB6E                <1>     jmp short cpu_2args
   222                              <1> i8:
   223 00005E78 B808000000          <1>     mov eax, 8
   224 00005E7D EB60                <1>     jmp short cpu_3args
   225                              <1> i9:
   226 00005E7F B809000000          <1>     mov eax, 9
   227 00005E84 EB60                <1>     jmp short cpu_2args
   228                              <1> i10:
   229 00005E86 B80A000000          <1>     mov eax, 0Ah
   230 00005E8B EB52                <1>     jmp short cpu_3args
   231                              <1> i11:
   232 00005E8D B80B000000          <1>     mov eax, 0Bh
   233 00005E92 EB4B                <1>     jmp short cpu_3args
   234                              <1> i12:
   235 00005E94 B80C000000          <1>     mov eax, 0Ch
   236 00005E99 EB44                <1>     jmp short cpu_3args
   237                              <1> i13:
   238 00005E9B B80D000000          <1>     mov eax, 0Dh
   239 00005EA0 EB3D                <1>     jmp short cpu_3args
   240                              <1> i14:
   241 00005EA2 B80E000000          <1>     mov eax, 0Eh
   242 00005EA7 EB2F                <1>     jmp short cpu_4args
   243                              <1> i15:
   244 00005EA9 B80F000000          <1>     mov eax, 0Fh
   245 00005EAE EB36                <1>     jmp short cpu_2args
   246                              <1> i16:
   247 00005EB0 B810000000          <1>     mov eax, 10h
   248 00005EB5 EB2F                <1>     jmp short cpu_2args
   249                              <1> i17:
   250 00005EB7 B811000000          <1>     mov eax, 11h
   251 00005EBC EB21                <1>     jmp short cpu_3args
   252                              <1> i18:
   253 00005EBE B812000000          <1>     mov eax, 12h
   254 00005EC3 EB21                <1>     jmp short cpu_2args
   255                              <1> i19:
   256 00005EC5 B813000000          <1>     mov eax, 13h
   257 00005ECA EB1A                <1>     jmp short cpu_2args
   258                              <1> i20:
   259 00005ECC B814000000          <1>     mov eax, 14h
   260 00005ED1 EB13                <1>     jmp short cpu_2args
   261                              <1> i21:
   262 00005ED3 B815000000          <1>     mov eax, 15h
   263                              <1> cpu_4args:
   264 00005ED8 B903000000          <1>     mov ecx, 3
   265 00005EDD EB0C                <1>     jmp short cpu_exception
   266                              <1> cpu_3args:
   267 00005EDF B902000000          <1>     mov ecx, 2
   268 00005EE4 EB05                <1>     jmp short cpu_exception
   269                              <1> cpu_2args:
   270 00005EE6 B901000000          <1>     mov ecx, 1
   271                              <1> cpu_exception:
   272                              <1> ;Enter with:
   273                              <1> ; eax = Exception number in binary
   274                              <1> ; ecx = Number of arguments to print and pop from stack - 1 
   275 00005EEB 488D356D020000      <1>     lea rsi, .fatalt0   ;Get the ptr
   276 00005EF2 BB29000000          <1>     mov ebx, fatalt0L  ;Get the length
   277 00005EF7 E81B020000          <1>     call .writeExceptionMessage
   278                              <1> 
   279 00005EFC 803D(FC030000)01    <1>     cmp byte [inDOS], 1
   280 00005F03 7327                <1>     jae .introStop
   281 00005F05 3D02000000          <1>     cmp eax, 2
   282 00005F0A 7420                <1>     je .introStop
   283                              <1> 
   284 00005F0C 488B1D(13040000)    <1>     mov rbx, qword [currentPSP] ;If a command shell craps out, Halt
   285 00005F13 483B5B22            <1>     cmp rbx, qword [rbx + psp.parentPtr]
   286 00005F17 7413                <1>     je .introStop
   287                              <1> 
   288 00005F19 488D3568020000      <1>     lea rsi, .fatal1
   289 00005F20 BBC1000000          <1>     mov ebx, fatal1L
   290 00005F25 E8ED010000          <1>     call .writeExceptionMessage
   291 00005F2A EB18                <1>     jmp short .introEnd
   292                              <1> .introStop:
   293 00005F2C C605(821A0000)FF    <1>     mov byte [haltDOS], -1
   294 00005F33 488D3512030000      <1>     lea rsi, .fatalHalt   ;Get the ptr
   295 00005F3A BB19000000          <1>     mov ebx, fatalHaltL  ;Get the length
   296 00005F3F E8D3010000          <1>     call .writeExceptionMessage
   297                              <1> .introEnd:
   298 00005F44 488D3D(721A0000)    <1>     lea rdi, byteBuffer
   299 00005F4B E895010000          <1>     call .printbyte ;Store the error code in the byte buffer
   300 00005F50 488D35(721A0000)    <1>     lea rsi, byteBuffer
   301 00005F57 BB02000000          <1>     mov ebx, 2  ;Print the two nybbles
   302 00005F5C E8B6010000          <1>     call .writeExceptionMessage
   303                              <1> 
   304 00005F61 488D35E1020000      <1>     lea rsi, .fatal2
   305 00005F68 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   306 00005F6D E8A5010000          <1>     call .writeExceptionMessage
   307                              <1> 
   308 00005F72 80F901              <1>     cmp cl, 1
   309 00005F75 0F87D0000000        <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   310                              <1> .cpurollprint:
   311 00005F7B 488D3D(721A0000)    <1>     lea rdi, byteBuffer
   312 00005F82 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   313                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   314 00005F86 B108                <1>     mov cl, 8    ;8 bytes
   315                              <1> .cpurollprint1:
   316 00005F88 48C1C208            <1>     rol rdx, 8
   317 00005F8C 88D0                <1>     mov al, dl
   318 00005F8E 52                  <1>     push rdx
   319 00005F8F E851010000          <1>     call .printbyte
   320 00005F94 5A                  <1>     pop rdx
   321 00005F95 FEC9                <1>     dec cl
   322 00005F97 75EF                <1>     jnz .cpurollprint1
   323                              <1> 
   324 00005F99 BB10000000          <1>     mov ebx, 16 ;Print the 16 nybbles
   325 00005F9E 488D35(721A0000)    <1>     lea rsi, byteBuffer
   326 00005FA5 E86D010000          <1>     call .writeExceptionMessage
   327                              <1> 
   328 00005FAA BB03000000          <1>     mov ebx, crlfL
   329 00005FAF 488D35AF020000      <1>     lea rsi, .crlf
   330 00005FB6 E85C010000          <1>     call .writeExceptionMessage    
   331                              <1> 
   332 00005FBB F605(821A0000)FF    <1>     test byte [haltDOS], -1
   333 00005FC2 7534                <1>     jnz .fatalStop
   334 00005FC4 E839010000          <1>     call .readInputChar
   335                              <1>     ;Set error code to General Failure
   336 00005FC9 66C705(FF030000)1F- <1>     mov word [errorExCde], errGF
   336 00005FD1 00                  <1>
   337 00005FD2 C605(01040000)04    <1>     mov byte [errorAction], eActAbt
   338 00005FD9 C605(02040000)07    <1>     mov byte [errorClass], eClsAppFlt
   339 00005FE0 C605(FE030000)01    <1>     mov byte [errorLocus], eLocUnk
   340 00005FE7 B8FF4C0000          <1>     mov eax, 4cFFh
   341 00005FEC C605(7F040000)FF    <1>     mov byte [ctrlCExit], -1
   342                              <1>     ;If a -1 error code and ctrlC exit and the extended error
   343                              <1>     ; setup as above, chances are it was a CPU error
   344 00005FF3 E982090000          <1>     jmp functionDispatch    ;Call Int 41h politely, clean up resources
   345                              <1> .fatalStop:
   346                              <1> ;This is called if inDOS > 1 or NMI occured
   347                              <1> ;Waits 1 minute then reboots
   348 00005FF8 B800820000          <1>     mov eax, 8200h  ;Exit all critical sections
   349 00005FFD CD4A                <1>     int 4Ah
   350 00005FFF E8FE0A0000          <1>     call dosCrit1Enter  ;Get the lock to internal DOS structures
   351 00006004 E80D0B0000          <1>     call dosCrit2Enter  ;Get the lock to end all multitasking
   352 00006009 E842C8FFFF          <1>     call getDateAndTimeOld  ;Get time packed in edx (edx[0:4] = Seconds/2)
   353 0000600E 89D3                <1>     mov ebx, edx
   354 00006010 81E31F000000        <1>     and ebx, 1Fh    ;Save the relevent bits
   355                              <1> .loopForNextSecond:
   356 00006016 E820000000          <1>     call .getTimeDateCompare
   357 0000601B 74F9                <1>     je .loopForNextSecond
   358                              <1> .loopTillTimeElapsed:
   359 0000601D E819000000          <1>     call .getTimeDateCompare
   360 00006022 75F9                <1>     jne .loopTillTimeElapsed
   361                              <1>     ;Now we triple fault
   362 00006024 0F011D06000000      <1>     lidt [.resetIDT] ;Triple fault the machine
   363 0000602B EB00                <1>     jmp short .toHell
   364                              <1> .toHell:
   365 0000602D CD00                <1>     int 00h ;Call div by 0 to trigger reboot if not somehow failed yet
   366 0000602F EBFC                <1>     jmp short .toHell
   367                              <1> .resetIDT:
   368 00006031 0000                <1>     dw 0
   369 00006033 0000000000000000    <1>     dq 0
   370                              <1> .getTimeDateCompare:
   371 0000603B 53                  <1>     push rbx
   372 0000603C E80FC8FFFF          <1>     call getDateAndTimeOld
   373 00006041 5B                  <1>     pop rbx
   374 00006042 81E21F000000        <1>     and edx, 1Fh
   375 00006048 39DA                <1>     cmp edx, ebx
   376                              <1>     return
    13                              <2> %%_ret:
    14 0000604A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   377                              <1> 
   378                              <1> .cpuextendederror:
   379 0000604B 5A                  <1>     pop rdx
   380 0000604C 48FFC9              <1>     dec rcx
   381 0000604F 51                  <1>     push rcx
   382 00006050 488D3D(721A0000)    <1>     lea rdi, byteBuffer
   383 00006057 B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   384 00006059 86D6                <1>     xchg dl, dh   
   385                              <1> .pr1:
   386 0000605B 88D0                <1>     mov al, dl
   387 0000605D 52                  <1>     push rdx
   388 0000605E E882000000          <1>     call .printbyte
   389 00006063 5A                  <1>     pop rdx
   390 00006064 C1CA08              <1>     ror edx, 8    ;Print just dx for now
   391 00006067 FEC9                <1>     dec cl
   392 00006069 75F0                <1>     jnz .pr1
   393                              <1> 
   394 0000606B 488D35(721A0000)    <1>     lea rsi, byteBuffer
   395 00006072 BB04000000          <1>     mov ebx, 4  ;Print four nybbles
   396 00006077 E89B000000          <1>     call .writeExceptionMessage
   397                              <1> 
   398 0000607C 488D35C6010000      <1>     lea rsi, .fatal2
   399 00006083 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   400 00006088 E88A000000          <1>     call .writeExceptionMessage
   401                              <1> 
   402 0000608D 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   403 0000608E 48FFC9              <1>     dec rcx
   404 00006091 0F84E4FEFFFF        <1>     jz .cpurollprint
   405                              <1> 
   406 00006097 B108                <1>     mov cl, 8   ;16 nybbles
   407 00006099 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   408 0000609C 488D3D(721A0000)    <1>     lea rdi, byteBuffer
   409                              <1> .pr2:
   410 000060A3 48C1C208            <1>     rol rdx, 8    ;Print rdx
   411 000060A7 88D0                <1>     mov al, dl
   412 000060A9 52                  <1>     push rdx
   413 000060AA E836000000          <1>     call .printbyte
   414 000060AF 5A                  <1>     pop rdx
   415 000060B0 FEC9                <1>     dec cl
   416 000060B2 75EF                <1>     jnz .pr2
   417                              <1> 
   418 000060B4 488D35(721A0000)    <1>     lea rsi, byteBuffer
   419 000060BB BB10000000          <1>     mov ebx, 16
   420 000060C0 E852000000          <1>     call .writeExceptionMessage
   421                              <1> 
   422 000060C5 488D357D010000      <1>     lea rsi, .fatal2
   423 000060CC BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   424 000060D1 E841000000          <1>     call .writeExceptionMessage
   425                              <1> 
   426 000060D6 E9A0FEFFFF          <1>     jmp .cpurollprint
   427                              <1> 
   428                              <1> 
   429                              <1> .char:    ;Print a single character
   430 000060DB 488D1D6D000000      <1>     lea rbx, .ascii
   431 000060E2 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   432 000060E3 AA                  <1>     stosb   ;Store the byte in the buffer and inc rdi
   433 000060E4 C3                  <1>     ret
   434                              <1> .printbyte:
   435 000060E5 88C2                <1>     mov dl, al            ;save byte in dl
   436 000060E7 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   437 000060EB 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   438 000060F0 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   439 000060F4 E8E2FFFFFF          <1>     call .char
   440 000060F9 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   441 000060FC E8DAFFFFFF          <1>     call .char
   442 00006101 C3                  <1>     ret        
   443                              <1> 
   444                              <1> 
   445                              <1> .readInputChar:
   446 00006102 C605(E0040000)04    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvREAD    ;Wait for a char!
   447 00006109 488D35(0F050000)    <1>     lea rsi, singleIObyt
   448 00006110 BB01000000          <1>     mov ebx, 1  ;Read one char
   449 00006115 EB07                <1>     jmp short .ioException
   450                              <1> .writeExceptionMessage:
   451                              <1> ;Called with ebx=Number of chars to print, rsi -> String to print
   452 00006117 C605(E0040000)08    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvWRITE
   453                              <1> .ioException:
   454 0000611E C605(DE040000)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   455 00006125 66C705(E1040000)00- <1>     mov word [critReqHdr + ioReqPkt.status], 0
   455 0000612D 00                  <1>
   456 0000612E 891D(F4040000)      <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], ebx
   457 00006134 488D1D(DE040000)    <1>     lea rbx, critReqHdr
   458 0000613B 488935(EC040000)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rsi
   459 00006142 488B35(47000000)    <1>     mov rsi, qword [vConPtr]
   460 00006149 E822010000          <1>     call goDriver
   461                              <1>     return
    13                              <2> %%_ret:
    14 0000614E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   462                              <1> 
   463                              <1> 
   464                              <1> ;Error messages
   465 0000614F 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   465 00006158 39414243444546      <1>
   466 0000615F 0D0A0A202020202020- <1> .fatalt0:  db CR,LF,LF,"        SCP/DOS EXCEPTION DETECTED!",CR,LF,LF
   466 00006168 20205343502F444F53- <1>
   466 00006171 20455843455054494F- <1>
   466 0000617A 4E2044455445435445- <1>
   466 00006183 44210D0A0A          <1>
   467                              <1> fatalt0L   equ $ - .fatalt0
   468                              <1> 
   469                              <1> .fatal1:   
   470 00006188 202020204120706F74- <1>     db "    A potentially fatal error has been detected",CR,LF
   470 00006191 656E7469616C6C7920- <1>
   470 0000619A 666174616C20657272- <1>
   470 000061A3 6F7220686173206265- <1>
   470 000061AC 656E20646574656374- <1>
   470 000061B5 65640D0A            <1>
   471 000061B9 20202020616E642074- <1>     db "    and the current application must be terminated.",CR,LF,LF
   471 000061C2 68652063757272656E- <1>
   471 000061CB 74206170706C696361- <1>
   471 000061D4 74696F6E206D757374- <1>
   471 000061DD 206265207465726D69- <1>
   471 000061E6 6E617465642E0D0A0A  <1>
   472 000061EF 202020205072657373- <1>     db "    Press any key to continue or CTRL+ALT+DEL to restart the machine."
   472 000061F8 20616E79206B657920- <1>
   472 00006201 746F20636F6E74696E- <1>
   472 0000620A 7565206F7220435452- <1>
   472 00006213 4C2B414C542B44454C- <1>
   472 0000621C 20746F207265737461- <1>
   472 00006225 727420746865206D61- <1>
   472 0000622E 6368696E652E        <1>
   473 00006234 0D0A0A202020205359- <1>     db CR,LF, LF,"    SYSTEM ERROR: "   ;Print standard Error message here
   473 0000623D 5354454D204552524F- <1>
   473 00006246 523A20              <1>
   474                              <1> fatal1L equ $ - .fatal1
   475                              <1> 
   476 00006249 203A20              <1> .fatal2:   db " : "
   477                              <1> fatal2L    equ $ - .fatal2
   478                              <1> 
   479                              <1> ;The below error is displayed is inDOS > 1 or NMI occured
   480 0000624C 202020205343502F44- <1> .fatalHalt: db "    SCP/DOS SYSTEM STOP: "
   480 00006255 4F532053595354454D- <1>
   480 0000625E 2053544F503A20      <1>
   481                              <1> fatalHaltL equ $ - .fatalHalt
   482 00006265 0D0A0A              <1> .crlf:  db CR,LF,LF
   483                              <1> crlfL  equ $ - .crlf
    42                                  %include "./Source/Kernel/dosPrim.asm"
     1                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
     2                              <1> ; are placed here (Int 45h Int 46h and goDriver)
     3                              <1> 
     4                              <1> dosDefCritErrHdlr:
     5                              <1> ;The DOS default critical error handler always returns FAIL
     6 00006268 B003                <1>     mov al, critFail
     7 0000626A 48CF                <1>     iretq
     8                              <1> goDriverChar:
     9                              <1> ;Shortcut for Char requests, make a driver request
    10                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    11 0000626C 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    12                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    13                              <1> ;Input: rsi = Ptr to the driver to handle the call!
    14                              <1> ;       rbx = Ptr to the request header for the driver call!
    15 00006270 E8A1080000          <1>     call dosCrit2Enter
    16 00006275 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    17 00006278 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    18 0000627B E8A0080000          <1>     call dosCrit2Exit
    19                              <1>     return
    13                              <2> %%_ret:
    14 00006280 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> ;The NUL driver lives here as it is implemented by the Kernel by default!
    22                              <1> nulStrat:
    23 00006281 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    24                              <1> nulIntr:
    25                              <1>     return
    13                              <2> %%_ret:
    14 00006287 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> 
    27                              <1> setupPhysicalDiskRequest:
    28                              <1> ;Ensure that al has valid disk number
    29                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    30                              <1> ;If CF=NC, rbp = DPB ptr.
    31                              <1> ;If CF=CY, exit error
    32 00006288 84C0                <1>     test al, al
    33 0000628A 723F                <1>     jc .diskError
    34 0000628C 3A05(6C000000)      <1>     cmp al, byte [lastdrvNum]
    35 00006292 7337                <1>     jae .diskError
    36 00006294 50                  <1>     push rax
    37 00006295 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    38 00006297 E896040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    39 0000629C 58                  <1>     pop rax
    40 0000629D 7235                <1>     jc .error
    41 0000629F 8805(F8060000)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    42 000062A5 488B2D(01070000)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    43 000062AC 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    44 000062B4 750A                <1>     jnz .netError
    45 000062B6 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    46 000062BA E851030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    47                              <1>     return
    13                              <2> %%_ret:
    14 000062BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                              <1> .netError:
    49 000062C0 66C705(FF030000)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    49 000062C8 00                  <1>
    50 000062C9 EB09                <1>     jmp short .error
    51                              <1> .diskError:
    52 000062CB 66C705(FF030000)0F- <1>     mov word [errorExCde], errBadDrv
    52 000062D3 00                  <1>
    53                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    54 000062D4 C605(FE030000)02    <1>     mov byte [errorLocus], eLocDsk
    55 000062DB C605(01040000)07    <1>     mov byte [errorAction], eActRetUsr
    56 000062E2 C605(02040000)09    <1>     mov byte [errorClass], eClsBadFmt
    57 000062E9 F9                  <1>     stc
    58                              <1>     return
    13                              <2> %%_ret:
    14 000062EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    59                              <1> 
    60                              <1> setupAbsDiskEntry:
    61                              <1> ;Prepares to sets up the CDS and DPB for the request
    62 000062EB FE05(FC030000)      <1>     inc byte [inDOS]
    63 000062F1 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    64 000062F2 FC                  <1>     cld ;Set string ops in the right direction
    65 000062F3 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    66 000062F8 7223                <1>     jc .exit    ;Error exit
    67 000062FA C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    68 00006301 56                  <1>     push rsi
    69 00006302 50                  <1>     push rax
    70 00006303 488D35(11050000)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    71 0000630A 8806                <1>     mov byte [rsi], al  ;Construct a path
    72 0000630C 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    73 0000630F C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
    74 00006313 F8                  <1>     clc
    75                              <1> ;++++++++++++++++++++++++++++
    76                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    77                              <1> ;Entered with path in rsi (ah=03h)
    78 00006314 B800030000          <1>     mov eax, 0300h  
    79 00006319 CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
    80                              <1> ;++++++++++++++++++++++++++++
    81 0000631B 58                  <1>     pop rax
    82 0000631C 5E                  <1>     pop rsi
    83                              <1> .exit:
    84 0000631D 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
    85                              <1>     return
    13                              <2> %%_ret:
    14 0000631F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> absDiskWrite:       ;Int 46h
    88                              <1> ;al = Drive number
    89                              <1> ;rbx = Memory Buffer address to read from
    90                              <1> ;ecx = Number of sectors to write
    91                              <1> ;rdx = Start LBA to write to
    92 00006320 FA                  <1>     cli
    93 00006321 488925(6E040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
    94 00006328 488D25(D0190000)    <1>     lea rsp, DiskStakTop
    95 0000632F 55                  <1>     push rbp
    96 00006330 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
    97 00006331 E8B5FFFFFF          <1>     call setupAbsDiskEntry
    98 00006336 7252                <1>     jc absDiskExit
    99 00006338 E8E6010000          <1>     call primReqWriteSetup
   100 0000633D EB1D                <1>     jmp short absDiskReadWriteCommon
   101                              <1> absDiskRead:        ;Int 45h
   102                              <1> ;al = Drive number
   103                              <1> ;rbx = Memory Buffer address to write to
   104                              <1> ;ecx = Number of sectors to read
   105                              <1> ;rdx = Start LBA to read from
   106 0000633F FA                  <1>     cli 
   107 00006340 488925(6E040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   108 00006347 488D25(D0190000)    <1>     lea rsp, DiskStakTop
   109 0000634E 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   110 0000634F 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   111 00006350 E896FFFFFF          <1>     call setupAbsDiskEntry
   112 00006355 7233                <1>     jc absDiskExit
   113 00006357 E8D2010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   114                              <1> absDiskReadWriteCommon:
   115                              <1> ;Entered with the appropriate function number in ah
   116                              <1> ; and primary request header in rbx
   117 0000635C E859000000          <1>     call absDiskDriverCall
   118 00006361 7427                <1>     jz absDiskExit  ;Skip error code checking
   119 00006363 8A05(B7040000)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   120                              <1>     ;DOS uses the following pairs in a table
   121                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   122 00006369 B480                <1>     mov ah, 80h ;Attachment failure
   123 0000636B 3C0C                <1>     cmp al, 0Ch ;Gen error
   124 0000636D 741A                <1>     je .absExit
   125 0000636F B440                <1>     mov ah, 40h ;Seek error
   126 00006371 3C06                <1>     cmp al, 06h
   127 00006373 7414                <1>     je .absExit
   128 00006375 B408                <1>     mov ah, 08h ;Bad CRC
   129 00006377 3C04                <1>     cmp al, 04h
   130 00006379 740E                <1>     je .absExit
   131 0000637B B404                <1>     mov ah, 04h ;Sector not found
   132 0000637D 3C08                <1>     cmp al, 08h
   133 0000637F 7408                <1>     je .absExit
   134 00006381 30E4                <1>     xor ah, ah  ;Write Protect Violation
   135 00006383 84C0                <1>     test al, al
   136 00006385 7402                <1>     je .absExit
   137 00006387 B402                <1>     mov ah, 02h ;Other Error
   138                              <1> .absExit:
   139 00006389 F9                  <1>     stc
   140                              <1> absDiskExit:
   141 0000638A 5B                  <1>     pop rbx
   142 0000638B 5D                  <1>     pop rbp
   143 0000638C FA                  <1>     cli
   144 0000638D 488B25(6E040000)    <1>     mov rsp, qword [oldRSP]
   145 00006394 FB                  <1>     sti ;Reenable interrupts
   146 00006395 488D0D0D000000      <1>     lea rcx, absStackJuggle
   147 0000639C 9C                  <1>     pushfq
   148 0000639D 5A                  <1>     pop rdx ;Get the current flags
   149 0000639E 48870C24            <1>     xchg qword [rsp], rcx   ;Get the old return address in rcx
   150 000063A2 4887542410          <1>     xchg rdx, qword [rsp + 2*8]  ;Swap old flags with current flags
   151 000063A7 48CF                <1>     iretq ;Return from interrupt (to align the stack as needed)
   152                              <1> absStackJuggle:
   153 000063A9 FA                  <1>     cli
   154 000063AA 52                  <1>     push rdx    ;Push the flags on the stack
   155 000063AB 51                  <1>     push rcx    ;Push the return address on the stack
   156 000063AC 9C                  <1>     pushfq
   157 000063AD 31C9                <1>     xor ecx, ecx  ;Zero the registers without affecting the flags
   158 000063AF 89CA                <1>     mov edx, ecx
   159 000063B1 FE0D(FC030000)      <1>     dec byte [inDOS]    ;Only now do we leave DOS
   160 000063B7 9D                  <1>     popfq
   161 000063B8 FB                  <1>     sti
   162                              <1>     return
    13                              <2> %%_ret:
    14 000063B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> absDiskDriverCall:
   165                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   166                              <1> ;       rbx = Request header address
   167                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   168                              <1> ;       eax = Status word from request
   169                              <1> ;       ecx = Number of sectors transferred
   170 000063BA 56                  <1>     push rsi
   171                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   172 000063BB 8B0D(CA040000)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   173                              <1>     ;Prepare for goDriver now
   174 000063C1 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   175 000063C5 E8A6FEFFFF          <1>     call goDriver   ;Make request
   176 000063CA 5E                  <1>     pop rsi
   177 000063CB 8B05(CA040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   178 000063D1 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   179 000063D3 0FB705(B7040000)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   180 000063DA 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   181                              <1>     return
    13                              <2> %%_ret:
    14 000063DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   182                              <1> 
   183                              <1> getDiskDPB:
   184                              <1> ;Gets the disk DPB if the Disk is valid
   185                              <1> ;Otherwise will return a pointer to the drive DPB
   186                              <1> ;Called with rdi pointing to the CDS
   187                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   188 000063DF 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   189 000063E3 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   190 000063E6 8805(F8060000)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   191 000063EC E81F020000          <1>     call setWorkingDPB
   192 000063F1 57                  <1>     push rdi    ;Save the CDS ptr
   193 000063F2 E83A000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   194 000063F7 5F                  <1>     pop rdi
   195 000063F8 7236                <1>     jc .exitBad ;Preserve CF
   196 000063FA 7533                <1>     jnz .exit
   197                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   198 000063FC 0FB60D(6C000000)    <1>     movzx ecx, byte [lastdrvNum]
   199 00006403 31C0                <1>     xor eax, eax
   200 00006405 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   201 00006408 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   202 0000640C 488B3D(59000000)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   203                              <1> .checkCDS:
   204                              <1> ;Subst, Redir and Join are skipped as the
   205 00006413 66F7474300B0        <1>     test word [rdi + cds.wFlags], cdsRedirDrive | cdsSubstDrive | cdsJoinDrive
   206 00006419 7509                <1>     jnz .next
   207 0000641B 48397745            <1>     cmp qword [rdi + cds.qDPBPtr], rsi  ;If the dpb ptr matches, reset
   208 0000641F 7503                <1>     jne .next   ;Else, goto next
   209 00006421 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax  ;Reset start cluster!
   210                              <1> .next:
   211 00006424 4881C75B000000      <1>     add rdi, cds_size
   212 0000642B FFC9                <1>     dec ecx
   213 0000642D 75E4                <1>     jnz .checkCDS
   214                              <1> .exit:
   215 0000642F F8                  <1>     clc
   216                              <1> .exitBad:
   217                              <1>     return
    13                              <2> %%_ret:
    14 00006430 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> 
   219                              <1> ensureDiskValid:
   220                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   221                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   222                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   223                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   224                              <1> .medChk:
   225 00006431 E841010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   226                              <1> ;Return in rbx the req hdr address
   227 00006436 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   228 0000643A E831FEFFFF          <1>     call goDriver   ;Request!
   229 0000643F 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   230 00006443 F7C700800000        <1>     test edi, drvErrStatus
   231 00006449 7575                <1>     jnz .diskDrvCritErrMedChk
   232                              <1> .medChkIgnore:
   233 0000644B 8A05(F8060000)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   234 00006451 30E4                <1>     xor ah, ah
   235 00006453 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old flag
   236 00006456 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   237 00006459 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   238 0000645B 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   239 0000645D E8A6A0FFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   240 00006462 F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   241 00006463 7206                <1>     jc .resetDPB   ;Exit ONLY if a dirty buffer found!
   242                              <1>     ;ZF=NZ from test for dirty buffers
   243                              <1> .exit:
   244                              <1>     return
    13                              <2> %%_ret:
    14 00006465 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   245                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   246 00006466 E8C1A0FFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   247                              <1> .resetDPB:    ;If no buffers found, skip freeing them as theres nothing to free!
   248 0000646B C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1 ;Mark DPB as inaccurate now
   249 0000646F C605(D8190000)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   250                              <1>     ;Get a buffer to read BPB into in rdi
   251 00006476 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   252 00006478 E8C5A2FFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   253 0000647D 7239                <1>     jc .exitBad    ;Immediately exit with the carry flag set
   254 0000647F 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   255                              <1> .repeatEP:
   256 00006483 E81B010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   257 00006488 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   258 0000648C E8DFFDFFFF          <1>     call goDriver   ;Request!
   259 00006491 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   260 00006495 A900800000          <1>     test eax, drvErrStatus
   261 0000649A 7562                <1>     jnz .diskDrvCritErrBPB
   262                              <1>     ;Now rebuild the dpb fields for this drive
   263 0000649C 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   264 000064A0 53                  <1>     push rbx
   265 000064A1 E8C7090000          <1>     call createDPB  ;Modifies rbx and clears the free cluster count
   266 000064A6 5B                  <1>     pop rbx
   267                              <1>     ;Adjust the buffer header information
   268 000064A7 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   269 000064AA 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   270 000064AD 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   271 000064B0 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   272 000064B3 30E4                <1>     xor ah, ah    ;Set ZF and clear CF
   273 000064B5 886524              <1>     mov byte [rbp + dpb.bAccessFlag], ah ;DPB now ready to be used
   274                              <1> .exitBad:
   275 000064B8 C605(D8190000)00    <1>     mov byte [diskChange], 0   ;Clear Disk Change flag
   276                              <1>     return
    13                              <2> %%_ret:
    14 000064BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   277                              <1> .diskDrvCritErrMedChk:
   278                              <1> ;Critical Errors fall through here
   279                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   280 000064C0 48893D(03040000)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   281 000064C7 48892D(7D070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   282 000064CE 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   283 000064D1 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   284 000064D3 8825(5B040000)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   285 000064D9 E840F8FFFF          <1>     call criticalDOSError
   286 000064DE 488B3D(03040000)    <1>     mov rdi, qword [xInt44RDI]
   287 000064E5 488B2D(7D070000)    <1>     mov rbp, qword [tmpDPBPtr]
   288 000064EC 3C01                <1>     cmp al, critRetry
   289 000064EE 0F843DFFFFFF        <1>     je .medChk
   290 000064F4 3C00                <1>     cmp al, critIgnore
   291 000064F6 0F844FFFFFFF        <1>     je .medChkIgnore
   292 000064FC F9                  <1>     stc ;Set error flag to indicate fail
   293                              <1>     return ;And exit from function with CF set
    13                              <2> %%_ret:
    14 000064FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> .diskDrvCritErrBPB:
   296                              <1>     ;eax has status word, rbp has dpb ptr
   297                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   298 000064FE C605(D8190000)00    <1>     mov byte [diskChange], 0   ;Clear Disk Change flag (to prevent abort issues)
   299 00006505 C605(5B040000)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   300 0000650C C605(D8190000)FF    <1>     mov byte [diskChange], -1  ;Set Disk Change flag again as we are back in
   301 00006513 E89DF7FFFF          <1>     call diskDevErr
   302 00006518 3C01                <1>     cmp al, critRetry
   303 0000651A 0F8463FFFFFF        <1>     je .repeatEP
   304                              <1>     ;Else we fail (Ignore=Fail here)
   305 00006520 F9                  <1>     stc ;Set error flag to indicate fail
   306 00006521 EB95                <1>     jmp short .exitBad ;And exit from function with CF set
   307                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   308                              <1> ;           Primitive Driver Requests
   309                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   310                              <1> ;First are Disk requests, then Char device requests
   311                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   312                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   313                              <1> 
   314                              <1> primReqWriteSetup:
   315 00006523 50                  <1>     push rax
   316 00006524 B408                <1>     mov ah, drvWRITE    ;Command code
   317 00006526 0225(C4030000)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   318 0000652C EB03                <1>     jmp short primReqRWCommon
   319                              <1> primReqReadSetup:
   320 0000652E 50                  <1>     push rax
   321 0000652F B404                <1>     mov ah, drvREAD
   322                              <1> primReqRWCommon:
   323                              <1> ;Sets up the IO request packet with:
   324                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   325                              <1> ; rbx = Data storage buffer ptr
   326                              <1> ; ecx = Number of sectors to transfer
   327                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   328                              <1> ; ~~~~ Set by entry function ~~~~ 
   329                              <1> ; ah = Command code
   330                              <1> ; All regs preserved EXCEPT rbx.
   331                              <1> ; Return: rbx = Transfer Address
   332 00006531 48891D(C2040000)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   333 00006538 890D(CA040000)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   334 0000653E C605(B4040000)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   335 00006545 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   336 0000654A 8905(B5040000)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   337 00006550 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   338 00006553 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   339                              <1>     ;Disk operations only here!
   340 00006555 488915(CE040000)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   341 0000655C 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   342 0000655F 8805(C1040000)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   343 00006565 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   344 00006568 8805(B5040000)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   345                              <1> primReqCommonExit:
   346                              <1> ;Returns in rbx the primary request header as these functions
   347                              <1> ; setup the request in the primary request header space
   348 0000656E 58                  <1>     pop rax
   349 0000656F 488D1D(B4040000)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   350                              <1>     return
    13                              <2> %%_ret:
    14 00006576 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   351                              <1> 
   352                              <1> primReqMedCheckSetup:
   353                              <1> ;Prepare the diskIO packet for mediacheck
   354                              <1> ;rbp has DPB pointer for device to check media on
   355 00006577 50                  <1>     push rax
   356 00006578 C605(B4040000)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   357 0000657F 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   358 00006582 8805(C1040000)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   359 00006588 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   360 0000658B 8805(B5040000)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   361 00006591 C605(B6040000)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   362 00006598 66C705(B7040000)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   362 000065A0 00                  <1>
   363 000065A1 EBCB                <1>     jmp short primReqCommonExit
   364                              <1> 
   365                              <1> primReqGetBPBSetup:
   366                              <1> ;rbp has DPB pointer for device
   367                              <1> ;rdi has sector buffer header pointer for transfer
   368 000065A3 50                  <1>     push rax
   369 000065A4 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   370 000065A8 48893D(C2040000)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   371 000065AF C605(B4040000)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   372 000065B6 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   373 000065B9 8805(C1040000)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   374 000065BF 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   375 000065C2 8805(B5040000)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   376 000065C8 C605(B6040000)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   377 000065CF 66C705(B7040000)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   377 000065D7 00                  <1>
   378 000065D8 EB94                <1>     jmp short primReqCommonExit
   379                              <1> 
   380                              <1> primReqOpenSetup:
   381                              <1> ;al = unit number if a disk device. Undefined otherwise
   382 000065DA 50                  <1>     push rax
   383 000065DB B40D                <1>     mov ah, drvOPEN
   384 000065DD EB03                <1>     jmp short primReqOCcommon
   385                              <1> primReqCloseSetup:
   386                              <1> ;al = unit number if a disk device. Undefined otherwise
   387 000065DF 50                  <1>     push rax
   388 000065E0 B40E                <1>     mov ah, drvCLOSE
   389                              <1> primReqOCcommon:
   390 000065E2 C605(B4040000)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   391 000065E9 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   392 000065EA 8905(B5040000)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   393                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   394 000065F0 E979FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   395                              <1> 
   396                              <1> secdReqCharIOReq:
   397                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   398                              <1> ;Input:
   399                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   400                              <1> ; ecx = Length of buffer
   401                              <1> ; rdi = Buffer pointer
   402                              <1> ;Output: 
   403                              <1> ; rbx = Transfer Address 
   404 000065F5 488D1D(8A040000)    <1>     lea rbx, secdReqHdr
   405 000065FC C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   406 000065FF 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   407 00006602 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   408 00006608 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   409 0000660C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   410                              <1>     return
    13                              <2> %%_ret:
    14 0000660F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> ;If the device which will process this request is a disk device
   412                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   413                              <1> ;Then we will read the appropriate byte from that buffer to the 
   414                              <1> ; singleIOByt buffer.
   415                              <1> ;Such a request will require additional setup with the following fields:
   416                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    43                                  %include "./Source/Kernel/dosUtils.asm"
     1                              <1> ;DOS utility functions 
     2                              <1> 
     3                              <1> ;Basic Drive related Utilities
     4                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
     5                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
     6                              <1> ; that gets set up)
     7                              <1> 
     8                              <1> setWorkingDPB:
     9                              <1> ;Gets dpb in rbp and saves to workingDPB
    10 00006610 48892D(F9060000)    <1>     mov qword [workingDPB], rbp
    11                              <1>     return
    13                              <2> %%_ret:
    14 00006617 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    12                              <1> 
    13                              <1> testCDSNet:
    14                              <1> ;Checks if the workingCDS is a redirector drive
    15                              <1> ;Returns: CF=NC => Not net
    16                              <1> ;         CF=CY => Network redirector
    17                              <1> ;         ZF=ZE => Net without CDS (\\ paths only)
    18                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    19                              <1> ;         rdi = workingCDS ptr
    20 00006618 488B3D(01070000)    <1>     mov rdi, qword [workingCDS]
    21 0000661F 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    22 00006626 7409                <1>     je .net
    23 00006628 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    24 0000662E 7501                <1>     jnz .net ;Net with CDS
    25                              <1>     return  ;CF=NC => Not net
    13                              <2> %%_ret:
    14 00006630 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> .net:
    27 00006631 F9                  <1>     stc ;Set Net bit
    28                              <1>     return
    13                              <2> %%_ret:
    14 00006632 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                              <1> 
    30                              <1> getDiskData:
    31                              <1> ;This function returns:
    32                              <1> ;al = sectors per cluster
    33                              <1> ;ah = media ID byte
    34                              <1> ;ebx = total clusters
    35                              <1> ;cx = bytes per sector
    36                              <1> ;edx = number of available clusters
    37                              <1> ;
    38                              <1> ;If CF=CY on exit, al contains the error code
    39 00006633 E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    40 00006638 7308                <1>     jnc .physical
    41                              <1>     ;Beep a redir request out
    42 0000663A B80C110000          <1>     mov eax, 110Ch 
    43 0000663F CD4F                <1>     int 4Fh
    44                              <1>     return
    13                              <2> %%_ret:
    14 00006641 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                              <1> .physical:
    46                              <1> ;Now we must lock the structures
    47 00006642 C605(FE030000)02    <1>     mov byte [errorLocus], eLocDsk
    48 00006649 E8B4040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    49 0000664E E88CFDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    50 00006653 721C                <1>     jc .exit
    51 00006655 E8F0A2FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    52 0000665A 7215                <1>     jc .exit
    53 0000665C 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    54 0000665F FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    55 00006661 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    56 00006664 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    57 00006667 FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
    58 00006669 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    59 0000666D 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
    60 00006670 F8                  <1>     clc
    61                              <1> .exit:
    62 00006671 E896040000          <1>     call dosCrit1Exit
    63                              <1>     return
    13                              <2> %%_ret:
    14 00006676 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    64                              <1> 
    65                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
    66                              <1> ;Input: al = Interrupt number
    67                              <1> ;Output: rbx = Interrupt Vector
    68 00006677 50                  <1>     push rax    ;Preserve rax
    69 00006678 FA                  <1>     cli ;Halt interrupts
    70 00006679 0F010D(BC1A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
    71 00006680 0FB6C0              <1>     movzx eax, al
    72 00006683 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
    73 00006687 480305(BE1A0000)    <1>     add rax, qword [dosIdtPtr.base]    
    74 0000668E 31DB                <1>     xor ebx, ebx
    75 00006690 8B5808              <1>     mov ebx, dword [rax + 8]    ;Get bits 63...32
    76 00006693 48C1E310            <1>     shl rbx, 10h    ;Push the high dword high
    77 00006697 668B5806            <1>     mov bx, word [rax + 6]      ;Get bits 31...16
    78 0000669B 48C1E310            <1>     shl rbx, 10h    ;Push word 2 into posiiton
    79 0000669F 668B18              <1>     mov bx, word [rax]          ;Get bits 15...0
    80 000066A2 FB                  <1>     sti
    81 000066A3 58                  <1>     pop rax
    82                              <1>     return
    13                              <2> %%_ret:
    14 000066A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    83                              <1> 
    84                              <1> getUserRegs:   ;Int 4Fh AX=1218h
    85                              <1> ;Returns ptr to user regs in rsi
    86 000066A5 488B35(6E040000)    <1>     mov rsi, qword [oldRSP]
    87                              <1>     return
    13                              <2> %%_ret:
    14 000066AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> walkDPBchain:
    90                              <1> ;Called with al = 0 based drive number
    91                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    92 000066AD 488B35(37000000)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
    93                              <1> .walk:
    94 000066B4 4881FEFFFFFFFF      <1>     cmp rsi, -1
    95 000066BB 740A                <1>     je .exitBad
    96 000066BD 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    97 000066BF 7407                <1>     je .exit    ;Drive found
    98 000066C1 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    99 000066C5 EBED                <1>     jmp short .walk
   100                              <1> .exitBad:
   101 000066C7 F9                  <1>     stc
   102                              <1> .exit:
   103                              <1>     return
    13                              <2> %%_ret:
    14 000066C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   104                              <1> setDrive:   
   105                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
   106                              <1> ;Input: al = 1-based drive number
   107                              <1> ;Output: al = 0-based drive number
   108                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
   109                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
   110                              <1> ;            set.
   111 000066C9 E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   112 000066CE 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   113 000066D0 56                  <1>     push rsi
   114 000066D1 488B35(01070000)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   115 000066D8 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   116 000066DE 5E                  <1>     pop rsi
   117 000066DF 7401                <1>     jz .exit
   118 000066E1 F9                  <1>     stc
   119                              <1> .exit:
   120                              <1>     return
    13                              <2> %%_ret:
    14 000066E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> 
   122                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   123                              <1> ;Allows a redirector or subst/join to build a CDS
   124                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   125                              <1> ; volumes, that are made at system boot.
   126                              <1> ;Input: al = Drive Letter for drive
   127                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   128                              <1> ;Output: rdi = newly filled in workingCDS
   129                              <1> ;CF=NC => CDS valid and has a DPB
   130                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   131 000066E3 50                  <1>     push rax
   132 000066E4 2C40                <1>     sub al, "A"-1
   133 000066E6 3A05(6B000000)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   134 000066EC 488B3D(01070000)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   135 000066F3 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   136 000066F9 58                  <1>     pop rax
   137 000066FA 7235                <1>     jb .exit    ;Exit with CF=CY
   138 000066FC 50                  <1>     push rax
   139 000066FD 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   140 00006702 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   141 00006704 58                  <1>     pop rax
   142 00006705 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   143 0000670B C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   144 00006712 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   145 0000671A 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   146                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   147 00006720 50                  <1>     push rax
   148 00006721 56                  <1>     push rsi
   149 00006722 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   150 00006724 E884FFFFFF          <1>     call walkDPBchain
   151 00006729 7204                <1>     jb .skipSettingDPB
   152 0000672B 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   153                              <1> .skipSettingDPB:
   154 0000672F 5E                  <1>     pop rsi
   155 00006730 58                  <1>     pop rax
   156                              <1> .exit:
   157                              <1>     return
    13                              <2> %%_ret:
    14 00006731 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   158                              <1> 
   159                              <1> getCDS:     ;Int 4Fh AX=1219h
   160                              <1> ;Gets the device DPB and saves it in the DOS variable
   161                              <1> ;This can be called to get CDS for network drives too!
   162                              <1> ;Input: al = 1 based drive number
   163                              <1> ;Sets workingCDS var with the CDS for the device. 
   164                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   165 00006732 84C0                <1>     test al, al
   166 00006734 7508                <1>     jnz .skip
   167 00006736 8A05(25040000)      <1>     mov al, byte [currentDrv]   ;Get current drive
   168 0000673C FEC0                <1>     inc al
   169                              <1> .skip:
   170 0000673E FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   171 00006740 56                  <1>     push rsi
   172 00006741 C605(FE030000)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   173 00006748 F605(F1060000)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   174 0000674F 7423                <1>     jz .physDrive
   175                              <1>     ;Invokation via 21/5D00
   176 00006751 50                  <1>     push rax
   177 00006752 57                  <1>     push rdi
   178 00006753 488D3D(6D060000)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   179 0000675A 48893D(01070000)    <1>     mov qword [workingCDS], rdi ;Make it current
   180 00006761 0441                <1>     add al, "A" ;Convert to a drive letter
   181 00006763 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   182 00006768 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   183 0000676E 5F                  <1>     pop rdi
   184 0000676F 58                  <1>     pop rax
   185 00006770 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   186 00006772 EB17                <1>     jmp short .exitOk   ;All oki
   187                              <1> .physDrive:
   188 00006774 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   189 00006779 7208                <1>     jc .exitBad
   190 0000677B 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   191 00006781 7508                <1>     jnz .exitOk ;Exit with flag cleared
   192                              <1>     ;Else Return to unknown error locus
   193                              <1> .exitBad:
   194 00006783 C605(FE030000)01    <1>     mov byte [errorLocus], eLocUnk
   195                              <1> .exitBad1:
   196 0000678A F9                  <1>     stc
   197                              <1> .exitOk:
   198 0000678B 5E                  <1>     pop rsi
   199                              <1>     return
    13                              <2> %%_ret:
    14 0000678C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   202                              <1>     ;Gets the CDS for the current drive in al
   203                              <1>     ;Input: al = Drive number, 0 = A ...
   204                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   205                              <1>     ;        CF=CY => al not valid
   206 0000678D 3A05(6C000000)      <1>     cmp al, byte [lastdrvNum]
   207 00006793 7202                <1>     jb .ctn
   208 00006795 F9                  <1>     stc 
   209                              <1>     return
    13                              <2> %%_ret:
    14 00006796 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> .ctn:
   211 00006797 50                  <1>     push rax
   212 00006798 52                  <1>     push rdx
   213 00006799 0FB6C0              <1>     movzx eax, al
   214 0000679C 48BE5B000000000000- <1>     mov rsi, cds_size
   214 000067A5 00                  <1>
   215 000067A6 31D2                <1>     xor edx, edx
   216 000067A8 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   217 000067AA 488B35(59000000)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   218 000067B1 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   219 000067B4 488935(01070000)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   220 000067BB 5A                  <1>     pop rdx
   221 000067BC 58                  <1>     pop rax
   222 000067BD F8                  <1>     clc
   223                              <1>     return
    13                              <2> %%_ret:
    14 000067BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   224                              <1> 
   225                              <1> 
   226                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   227                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   228                              <1> ;Input: AL = Char to normalise.
   229                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   230                              <1> ;If path separator, set ZF=ZE
   231 000067BF 3C5C                <1>     cmp al, "\"
   232 000067C1 7406                <1>     je .exit
   233 000067C3 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   234 000067C5 7502                <1>     jne .exit
   235 000067C7 B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   236                              <1> .exit:
   237                              <1>     return
    13                              <2> %%_ret:
    14 000067C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   238                              <1> 
   239                              <1> uppercaseCharAtPtr:
   240                              <1> ;Get the char pointed to by rsi and then fall
   241 000067CA AC                  <1>     lodsb
   242                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   243                              <1> ;Convert a lowercase char to uppercase
   244                              <1> ; Leave alone uppercase chars and invalid chars
   245                              <1> ;Input: al = Char to convert to uppercase
   246                              <1> ;Output: al = Processed char
   247 000067CB 53                  <1>     push rbx
   248 000067CC 3C61                <1>     cmp al, "a"
   249 000067CE 7214                <1>     jb .exit
   250 000067D0 3C7A                <1>     cmp al, "z"
   251 000067D2 7702                <1>     ja .checkExt
   252 000067D4 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   253                              <1> .checkExt:
   254 000067D6 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   255 000067D8 720A                <1>     jb .exit
   256 000067DA 2C80                <1>     sub al, 80h ;Turn into table offset
   257 000067DC 488B1D4998FFFF      <1>     mov rbx, qword [ctryTbl + countryStruc.mapaddr]    ;Get ptr to extAsciiTable
   258 000067E3 D7                  <1>     xlatb   ;Get converted extended byte into al
   259                              <1> .exit:
   260 000067E4 50                  <1>     push rax    ;Save al temporarily
   261 000067E5 488D1D639AFFFF      <1>     lea rbx, asciiCharProperties
   262 000067EC D7                  <1>     xlatb   ;Get the signature in al
   263 000067ED A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   264 000067EF 58                  <1>     pop rax
   265 000067F0 5B                  <1>     pop rbx
   266                              <1>     return
    13                              <2> %%_ret:
    14 000067F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   267                              <1> 
   268                              <1> strlen2:    ;Int 4Fh, AX=1212h
   269                              <1> ;Entry point for Multiplex
   270 000067F2 57                  <1>     push rdi
   271 000067F3 4889F7              <1>     mov rdi, rsi
   272 000067F6 E802000000          <1>     call strlen
   273 000067FB 5F                  <1>     pop rdi
   274                              <1>     return
    13                              <2> %%_ret:
    14 000067FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   275                              <1> strlen: 
   276                              <1> ;Gets the length of a ASCIIZ string
   277                              <1> ;Input: rdi = Source buffer
   278                              <1> ;Output: ecx = Length of string
   279 000067FD 50                  <1>     push rax
   280 000067FE 57                  <1>     push rdi
   281 000067FF 30C0                <1>     xor al, al
   282 00006801 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   283 00006803 FFC9                <1>     dec ecx ;rcx = -1
   284 00006805 F2AE                <1>     repne scasb
   285 00006807 F7D1                <1>     not ecx
   286 00006809 5F                  <1>     pop rdi
   287 0000680A 58                  <1>     pop rax
   288                              <1>     return
    13                              <2> %%_ret:
    14 0000680B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   289                              <1> 
   290                              <1> strcpy:
   291                              <1> ;Copies a null terminated string from rsi to rdi
   292 0000680C AC                  <1>     lodsb
   293 0000680D AA                  <1>     stosb
   294 0000680E 84C0                <1>     test al, al
   295                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006810 74F9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   296 00006812 EBF8                <1>     jmp short strcpy
   297                              <1> 
   298                              <1> strcmp:
   299                              <1> ;Compares two ASCIIZ strings for equality.
   300                              <1> ;Input: rsi = First string
   301                              <1> ;       rdi = Second string
   302                              <1> ;       ecx = Number of bytes to compare
   303                              <1> ;Output: ZF=ZE => Equal
   304                              <1> ;        ZF=NZ => Not equal
   305 00006814 56                  <1>     push rsi
   306 00006815 57                  <1>     push rdi
   307 00006816 F3A6                <1>     repe cmpsb
   308 00006818 5F                  <1>     pop rdi
   309 00006819 5E                  <1>     pop rsi
   310                              <1>     return
    13                              <2> %%_ret:
    14 0000681A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   311                              <1> 
   312                              <1> 
   313                              <1> normaliseFileName:  ;Int 4Fh, AX=1211h
   314                              <1> ;Converts lowercase to uppercase and / to "\"
   315                              <1> ;Input: rsi = Source buffer
   316                              <1> ;       rdi = Buffer to place normalised path
   317 0000681B 50                  <1>     push rax
   318 0000681C 56                  <1>     push rsi
   319 0000681D 57                  <1>     push rdi
   320                              <1> .scan:
   321 0000681E AC                  <1>     lodsb
   322 0000681F 84C0                <1>     test al, al
   323 00006821 740D                <1>     jz .exit
   324 00006823 E897FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   325 00006828 E89EFFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   326 0000682D AA                  <1>     stosb
   327 0000682E EBEE                <1>     jmp short .scan
   328                              <1> .exit:
   329 00006830 5F                  <1>     pop rdi
   330 00006831 5E                  <1>     pop rsi
   331 00006832 58                  <1>     pop rax
   332                              <1>     return
    13                              <2> %%_ret:
    14 00006833 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   333                              <1> 
   334                              <1> compareFileNames:   ;Int 4Fh, AX=121Eh
   335                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   336                              <1> ;Input: rsi = One ASCIIZ pathname
   337                              <1> ;       rdi = Second ASCIIZ pathname
   338                              <1> ;Return:
   339                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   340 00006834 50                  <1>     push rax
   341 00006835 56                  <1>     push rsi
   342 00006836 57                  <1>     push rdi
   343                              <1> .scan:
   344 00006837 8A06                <1>     mov al, byte [rsi]
   345 00006839 84C0                <1>     test al, al
   346 0000683B 7424                <1>     jz .endOfString
   347 0000683D 8A27                <1>     mov ah, byte [rdi]
   348 0000683F E87BFFFFFF          <1>     call swapPathSeparator  ;Convert al to \ if pathsep
   349 00006844 7410                <1>     jz .pathseps
   350 00006846 660D2020            <1>     or ax, 2020h    ;Convert both chars to lower case
   351 0000684A 38E0                <1>     cmp al, ah
   352 0000684C 7515                <1>     jnz .exit
   353                              <1> .nextChar:
   354 0000684E 48FFC6              <1>     inc rsi
   355 00006851 48FFC7              <1>     inc rdi
   356 00006854 EBE1                <1>     jmp short .scan
   357                              <1> .pathseps:
   358 00006856 86E0                <1>     xchg ah, al
   359 00006858 E862FFFFFF          <1>     call swapPathSeparator  ;If ah is not a pathsep, then exit ZF=NZ
   360 0000685D 7504                <1>     jnz .exit
   361 0000685F EBED                <1>     jmp short .nextChar ;Else get the next chars
   362                              <1> .endOfString:
   363 00006861 84E4                <1>     test ah, ah ;If ah is also the end of the path, then ZF=ZE else ZF=NZ
   364                              <1> .exit:
   365 00006863 5F                  <1>     pop rdi
   366 00006864 5E                  <1>     pop rsi
   367 00006865 58                  <1>     pop rax
   368                              <1>     return
    13                              <2> %%_ret:
    14 00006866 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   369                              <1> checkPathspecOK:
   370                              <1> ;Input:
   371                              <1> ;rsi -> points to a path to verify if it is ok.
   372                              <1> ;Output:
   373                              <1> ;CF=NC => The path is totally clean and ok to use.
   374                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   375                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   376                              <1> ; and depending on method of invokation and caller, may be permissable.
   377                              <1> ;We accept lc and uc characters in this check function.
   378 00006867 50                  <1>     push rax
   379 00006868 53                  <1>     push rbx    ;Use rbx as the return flag status
   380 00006869 56                  <1>     push rsi
   381 0000686A 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   382                              <1> 
   383                              <1>     ;Start by getting the length of the ASCIIZ string.
   384 0000686C 51                  <1>     push rcx
   385 0000686D 57                  <1>     push rdi
   386 0000686E 4889F7              <1>     mov rdi, rsi
   387 00006871 E887FFFFFF          <1>     call strlen
   388 00006876 81F940000000        <1>     cmp ecx, 64    ;Check
   389 0000687C 5F                  <1>     pop rdi
   390 0000687D 59                  <1>     pop rcx
   391 0000687E 776E                <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   392                              <1>     ;First we verify if our path is relative or canonical (absolute)
   393 00006880 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   394 00006883 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   395 00006887 7416                <1>     je .netName
   396 00006889 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   397 0000688D 7410                <1>     je .netName
   398 0000688F 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   399 00006892 7412                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   400                              <1>     ;Here if relative
   401 00006894 F605(F1060000)FF    <1>     test byte [dosInvoke], -1
   402 0000689B 7551                <1>     jnz .badExit    ;If this is -1, server invoke.
   403 0000689D EB1F                <1>     jmp short .okToScan
   404                              <1> .netName:
   405 0000689F 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the \    jmp short .okToScan
   407                              <1> .diskPath:
   408 000068A6 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   409 000068AD F605(F1060000)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   410 000068B4 7408                <1>     jz .okToScan
   411 000068B6 AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   412 000068B7 E803FFFFFF          <1>     call swapPathSeparator
   413 000068BC 7530                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   414                              <1> .okToScan:
   415 000068BE AC                  <1>     lodsb   
   416 000068BF 84C0                <1>     test al, al ;End of path char?
   417 000068C1 7430                <1>     jz .exit
   418 000068C3 E8F7FEFFFF          <1>     call swapPathSeparator
   419 000068C8 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   420 000068CA 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   421 000068CC 7411                <1>     je .wcFound
   422 000068CE 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   423 000068D0 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   424                              <1>     ;Else we check that the char in al is an acceptable char
   425 000068D2 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   426 000068D4 74E8                <1>     je .okToScan
   427 000068D6 E831000000          <1>     call checkCharValid
   428 000068DB 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   429 000068DD EBDF                <1>     jmp short .okToScan
   430                              <1> .wcFound:
   431 000068DF BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   432 000068E4 EBD8                <1>     jmp short .okToScan
   433                              <1> .wcCheck:
   434                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   435 000068E6 F7C340000000        <1>     test ebx, 40h
   436 000068EC 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   437                              <1>     ;Else fall through in error
   438                              <1> .badExit:
   439 000068EE BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   440                              <1> .exit:
   441 000068F3 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   442 000068F4 9D                  <1>     popfq
   443 000068F5 5E                  <1>     pop rsi
   444 000068F6 5B                  <1>     pop rbx
   445 000068F7 58                  <1>     pop rax
   446                              <1>     return
    13                              <2> %%_ret:
    14 000068F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   447                              <1> 
   448                              <1> scanPathWC:
   449                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   450                              <1> ; even in the final path componant.
   451                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   452                              <1> ;Output: CF=NC => No wildcards present
   453                              <1> ;        CF=CY => Wildcards found
   454 000068F9 50                  <1>     push rax
   455 000068FA 56                  <1>     push rsi
   456                              <1> .scan:
   457 000068FB AC                  <1>     lodsb
   458 000068FC 84C0                <1>     test al, al
   459 000068FE 7409                <1>     jz .exit
   460 00006900 3C3F                <1>     cmp al, "?"
   461 00006902 7404                <1>     je .wcFnd
   462 00006904 3C2A                <1>     cmp al, "*"
   463 00006906 75F3                <1>     jne .scan
   464                              <1> .wcFnd:
   465 00006908 F9                  <1>     stc
   466                              <1> .exit:
   467 00006909 5E                  <1>     pop rsi
   468 0000690A 58                  <1>     pop rax
   469                              <1>     return
    13                              <2> %%_ret:
    14 0000690B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   470                              <1> 
   471                              <1> checkCharValid:
   472                              <1> ;If ZF=ZE => Invalid Char
   473                              <1> ;If ZF=NZ => Valid Char
   474 0000690C 51                  <1>     push rcx
   475 0000690D 57                  <1>     push rdi
   476 0000690E B930000000          <1>     mov ecx, badDirNameCharL    ;Get table length
   477 00006913 488D3D8598FFFF      <1>     lea rdi, badDirNameChar ;Point to bad char table
   478 0000691A F2AE                <1>     repne scasb ;Scan. Stop when equal
   479 0000691C 5F                  <1>     pop rdi
   480 0000691D 59                  <1>     pop rcx
   481                              <1>     return
    13                              <2> %%_ret:
    14 0000691E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   482                              <1> 
   483                              <1> 
   484                              <1> skipSpacesAndTabs:
   485                              <1> ;Input: rsi -> String 
   486                              <1> ;Output: rsi -> First non Space or Tab type char
   487 0000691F AC                  <1>     lodsb
   488 00006920 E815000000          <1>     call isCharSpaceType
   489 00006925 74F8                <1>     jz skipSpacesAndTabs
   490 00006927 48FFCE              <1>     dec rsi
   491                              <1>     return
    13                              <2> %%_ret:
    14 0000692A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   492                              <1> 
   493                              <1> isCharDelimType:
   494                              <1> ;Input: al = Char to check properties of
   495                              <1> ;Output:    ZF=NZ => Char not name delimiter
   496                              <1> ;           ZF=ZE => Char delimiter
   497 0000692B 50                  <1>     push rax
   498 0000692C 53                  <1>     push rbx
   499 0000692D 488D1D1B99FFFF      <1>     lea rbx, asciiCharProperties
   500 00006934 D7                  <1>     xlatb
   501 00006935 A802                <1>     test al, 2
   502 00006937 5B                  <1>     pop rbx
   503 00006938 58                  <1>     pop rax
   504                              <1>     return
    13                              <2> %%_ret:
    14 00006939 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   505                              <1> 
   506                              <1> isCharSpaceType:
   507                              <1> ;Input: al = Char to check properties of
   508                              <1> ;Output:    ZF=NZ => Char not Space or Tab
   509                              <1> ;           ZF=ZE => Char Space or Tab
   510 0000693A 50                  <1>     push rax
   511 0000693B 53                  <1>     push rbx
   512 0000693C 488D1D0C99FFFF      <1>     lea rbx, asciiCharProperties
   513 00006943 D7                  <1>     xlatb
   514 00006944 A804                <1>     test al, 4
   515 00006946 5B                  <1>     pop rbx
   516 00006947 58                  <1>     pop rax
   517                              <1>     return
    13                              <2> %%_ret:
    14 00006948 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   518                              <1> 
   519                              <1> compareFarPointers: ;Int 4Fh, AX = 1214h
   520                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   521                              <1> ;Input: rsi = One pointer
   522                              <1> ;       rdi = Second pointer
   523                              <1> ;Output: ZF=ZE if equal
   524                              <1> ;        ZF=NZ if not
   525 00006949 4839FE              <1>     cmp rsi, rdi
   526                              <1>     return
    13                              <2> %%_ret:
    14 0000694C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   527                              <1> 
   528                              <1> checkPathNet:
   529                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   530                              <1> ;Output: ZF=ZE => Path is a net path
   531                              <1> ;        ZF=NZ => Path is not a net path
   532 0000694D 50                  <1>     push rax
   533 0000694E 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   534 00006951 E869FEFFFF          <1>     call swapPathSeparator
   535 00006956 7505                <1>     jnz .exit
   536 00006958 E862FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   537                              <1> .exit:
   538 0000695D 58                  <1>     pop rax
   539                              <1>     return
    13                              <2> %%_ret:
    14 0000695E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   540                              <1> 
   541                              <1> getCharDevDriverPtr:
   542                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   543                              <1> ;Input: rax = Device Driver name (space padded)
   544                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   545 0000695F 488D3D(6E000000)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   546                              <1> .lp:
   547 00006966 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   548                              <1>     rete    ;Exit if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000696A 74F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   549 0000696C 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   550 0000696F 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   551 00006976 75EE                <1>     jne .lp ;If not loop
   552 00006978 F9                  <1>     stc ;Else bad exit
   553                              <1>     return
    13                              <2> %%_ret:
    14 00006979 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   554                              <1> 
    44                                  %include "./Source/Kernel/dosMain.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;        Main Kernel dispatch       :
     3                              <1> ;            and routines           :
     4                              <1> ;-----------------------------------:
     5                              <1> functionDispatch:   ;Int 41h Main function dispatcher
     6                              <1> ;ah = Function number, all other registers have various meanings
     7                              <1>  %if DEBUG
     8                              <1>     ;Entry function
     9                              <1>     debugEnterM
    10                              <1>     lea rbp, .l0000
    11                              <1>     call debPrintNullString
    12                              <1>     call debPrintFunctionName
    13                              <1>     jmp short .l0001
    14                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    15                              <1> .l0001:    
    16                              <1>     debugExitM
    17                              <1>     %endif
    18 0000697A FA                  <1>     cli ;Halt external interrupts
    19 0000697B FC                  <1>     cld ;Ensure all string ops occur in the right direction
    20 0000697C 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    21 0000697F 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    22                              <1>     ;Cherry pick functions
    23 00006985 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    24 00006988 7235                <1>     jb .fsbegin   ;If below skip these checks
    25 0000698A 0F847C020000        <1>     je ctrlBreakCheck
    26 00006990 80FC64              <1>     cmp ah, 64h
    27 00006993 0F84BC020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    28 00006999 7724                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    29 0000699B 80FC51              <1>     cmp ah, 51h
    30 0000699E 0F849F020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    31 000069A4 80FC62              <1>     cmp ah, 62h
    32 000069A7 0F849F020000        <1>     je getPSPaddr          ;Calls the above function
    33 000069AD 80FC50              <1>     cmp ah, 50h
    34 000069B0 0F8484020000        <1>     je setCurrProcessID
    35 000069B6 80FC61              <1>     cmp ah, 61h           ;New service, Process Services, reentrant
    36 000069B9 0F849E020000        <1>     je systemServices
    37                              <1> .fsbegin:
    38 000069BF E827010000          <1>     call dosPushRegs ;Push the usual prologue registers
    39 000069C4 48891D(76040000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    40 000069CB 66C705(37040000)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    40 000069D3 00                  <1>
    41 000069D4 488B05(6E040000)    <1>     mov rax, qword [oldRSP]
    42 000069DB 488905(5E040000)    <1>     mov qword [oldoldRSP], rax
    43 000069E2 FE05(FC030000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    44 000069E8 488925(6E040000)    <1>     mov qword [oldRSP], rsp
    45                              <1> ;Network related variable resetting
    46 000069EF C605(F1060000)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    47                              <1> ;Here, we want to save oldRSP in the callers PSP
    48 000069F6 488B05(13040000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    49 000069FD 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    50 00006A01 58                  <1>     pop rax     ;Get old rax back
    51 00006A02 50                  <1>     push rax    ;and push it back onto the stack
    52                              <1> .abortEP:
    53                              <1> .charFun0CEP:
    54                              <1> .serverEP:
    55 00006A03 488D25(000D0000)    <1>     lea rsp, critStakTop
    56 00006A0A FB                  <1>     sti         ;Reenable interrupts
    57                              <1> 
    58 00006A0B 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    59 00006A0D 881D(87040000)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    60 00006A13 C605(88040000)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    61 00006A1A 881D(5D040000)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
    62 00006A20 881D(7E040000)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    63                              <1> 
    64 00006A26 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    65 00006A27 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
    66 00006A29 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    67 00006A2B 488D05A198FFFF      <1>     lea rax, kDispTbl
    68 00006A32 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    69 00006A35 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    70 00006A39 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
    71 00006A3C 58                  <1>     pop rax
    72                              <1> 
    73 00006A3D 84E4                <1>     test ah, ah     ;Simple Terminate function?
    74 00006A3F 741C                <1>     jz .fddiskOp
    75 00006A41 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
    76 00006A44 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
    77 00006A46 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
    78 00006A49 7712                <1>     ja .fddiskOp
    79                              <1> ;Char operations here
    80 00006A4B F605(FB030000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
    81 00006A52 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
    82 00006A54 488D25(90130000)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
    83 00006A5B EB40                <1>     jmp short .fdGoToFunction
    84                              <1> .fddiskOp:
    85                              <1>     ;Disk operations go here
    86                              <1>     ;Save rax on entry to a disk funciton
    87 00006A5D 488905(27040000)    <1>     mov qword [oldRAX], rax
    88                              <1>     ;Clear up error info
    89 00006A64 C605(FE030000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
    90 00006A6B C605(FB030000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
    91 00006A72 C605(FD030000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
    92                              <1> 
    93 00006A79 50                  <1>     push rax
    94 00006A7A B482                <1>     mov ah, 82h ;Cancel all critical section!
    95 00006A7C CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
    96 00006A7E 58                  <1>     pop rax
    97                              <1> 
    98 00006A7F C605(88040000)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
    99 00006A86 488D25(D0190000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   100 00006A8D F605(26040000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   101 00006A94 7407                <1>     jz .fdGoToFunction
   102                              <1> ; HANDLE CTRL+BREAK HERE!
   103 00006A96 50                  <1>     push rax
   104 00006A97 E8ECB7FFFF          <1>     call checkBreak   ; Check for a ^C
   105 00006A9C 58                  <1>     pop rax
   106                              <1> .fdGoToFunction:
   107 00006A9D 48871D(76040000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   108                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   109                              <1>     ;
   110                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   111                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   112                              <1>     ;
   113                              <1>     %if DEBUG && REGS
   114                              <1>     ;Print stack if necessary function
   115                              <1>     debugEnterM
   116                              <1>     call debPrintDOSStack
   117                              <1>     debugExitM
   118                              <1>     %endif
   119 00006AA4 FF15(76040000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   120                              <1>     %if DEBUG
   121                              <1>     ;Entry function
   122                              <1>     debugEnterM
   123                              <1>     lea rbp, .l0002
   124                              <1>     call debPrintNullString
   125                              <1>     jmp short .l0003
   126                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   127                              <1> .l0003:    
   128                              <1>     debugExitM
   129                              <1>     %endif
   130                              <1>     %if DEBUG && REGS
   131                              <1>     ;Exit function
   132                              <1>     debugEnterM
   133                              <1>     call debPrintDOSStack
   134                              <1>     debugExitM
   135                              <1>     %endif
   136                              <1> .fdExit:
   137 00006AAA FA                  <1>     cli     ;Redisable interrupts
   138 00006AAB FE0D(FC030000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   139 00006AB1 488B25(6E040000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   140 00006AB8 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   141 00006ABB 488B05(5E040000)    <1>     mov rax, qword [oldoldRSP]
   142 00006AC2 488905(6E040000)    <1>     mov qword [oldRSP], rax
   143 00006AC9 E806000000          <1>     call dosPopRegs  ;Pop the frame
   144 00006ACE 48CF                <1>     iretq
   145                              <1> .fdExitBad:
   146 00006AD0 30C0                <1>     xor al, al
   147                              <1> defaultIretq:
   148 00006AD2 48CF                <1>     iretq
   149                              <1> dosPopRegs:
   150 00006AD4 8F05(66040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   151 00006ADA 58                  <1>     pop rax
   152 00006ADB 5B                  <1>     pop rbx
   153 00006ADC 59                  <1>     pop rcx
   154 00006ADD 5A                  <1>     pop rdx
   155 00006ADE 5E                  <1>     pop rsi
   156 00006ADF 5F                  <1>     pop rdi
   157 00006AE0 5D                  <1>     pop rbp
   158 00006AE1 4158                <1>     pop r8
   159 00006AE3 4159                <1>     pop r9
   160 00006AE5 FF25(66040000)      <1>     jmp qword [dosReturn]
   161                              <1> dosPushRegs:
   162 00006AEB 8F05(66040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   163 00006AF1 4151                <1>     push r9
   164 00006AF3 4150                <1>     push r8
   165 00006AF5 55                  <1>     push rbp
   166 00006AF6 57                  <1>     push rdi
   167 00006AF7 56                  <1>     push rsi
   168 00006AF8 52                  <1>     push rdx
   169 00006AF9 51                  <1>     push rcx
   170 00006AFA 53                  <1>     push rbx
   171 00006AFB 50                  <1>     push rax
   172 00006AFC FF25(66040000)      <1>     jmp qword [dosReturn]
   173                              <1> dosCrit1Enter:
   174                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    13                              <2> %%_ret:
    14 00006B02 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175 00006B03 B801800000          <1>     mov eax, 8001h
   176 00006B08 CD4A                <1>     int 4ah
   177 00006B0A 58                  <1>     pop rax
   178                              <1>     return
    13                              <2> %%_ret:
    14 00006B0B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   179                              <1> dosCrit1Exit:
   180                              <1>     return
    13                              <2> %%_ret:
    14 00006B0C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   181 00006B0D B801810000          <1>     mov eax, 8101h
   182 00006B12 CD4A                <1>     int 4ah
   183 00006B14 58                  <1>     pop rax
   184                              <1>     return
    13                              <2> %%_ret:
    14 00006B15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> dosCrit2Enter:
   186                              <1>     return
    13                              <2> %%_ret:
    14 00006B16 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   187 00006B17 B802800000          <1>     mov eax, 8002h
   188 00006B1C CD4A                <1>     int 4ah
   189 00006B1E 58                  <1>     pop rax
   190                              <1>     return
    13                              <2> %%_ret:
    14 00006B1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   191                              <1> dosCrit2Exit:
   192                              <1>     return
    13                              <2> %%_ret:
    14 00006B20 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   193 00006B21 B802810000          <1>     mov eax, 8102h
   194 00006B26 CD4A                <1>     int 4ah
   195 00006B28 58                  <1>     pop rax
   196                              <1>     return
    13                              <2> %%_ret:
    14 00006B29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> ;FCB specific returns
   199                              <1> fcbGoodExit:
   200                              <1> ;Preserve the carry flag on entry to DOS
   201 00006B2A 30C0                <1>     xor al, al ;Set return code al = 0
   202                              <1>     return
    13                              <2> %%_ret:
    14 00006B2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   203                              <1> fcbErrExit:
   204                              <1> ;Preserve the carry flag on entry to DOS
   205                              <1> ;Input: eax = Extended error code to store in SDA 
   206 00006B2D E836000000          <1>     call xLatError
   207 00006B32 B0FF                <1>     mov al, -1  ;Set return code al = -1
   208 00006B34 F9                  <1>     stc
   209                              <1>     return
    13                              <2> %%_ret:
    14 00006B35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> 
   211                              <1> ;Handle and General DOS Returns
   212                              <1> ;All good exits destroy AT LEAST ax 
   213                              <1> extGoodExit2:
   214                              <1> ;Good exit with an extended return code in eax
   215 00006B36 E86AFBFFFF          <1>     call getUserRegs
   216 00006B3B 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   217 00006B3D EB08                <1>     jmp short extGoodExit.extGoodCommon
   218                              <1> extGoodExit:
   219                              <1> ;Good exit
   220                              <1> ;Return code in ax
   221 00006B3F E861FBFFFF          <1>     call getUserRegs
   222 00006B44 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   223                              <1> .extGoodCommon:
   224 00006B47 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   225 00006B4B F8                  <1>     clc
   226                              <1>     return
    13                              <2> %%_ret:
    14 00006B4C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> extErrExit:
   228                              <1> ;The extended error exit from DOS
   229                              <1> ;Jumped to with AL=Extended error code
   230                              <1> ;Can be called too.
   231                              <1> ;Input: al = Extended error code
   232                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   233                              <1> ;   Returns with: eax = xLat Error
   234                              <1> ;                 rsi = callerFrame
   235 00006B4D 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   236 00006B50 E813000000          <1>     call xLatError
   237 00006B55 E891000000          <1>     call checkFail
   238 00006B5A E846FBFFFF          <1>     call getUserRegs
   239 00006B5F 668906              <1>     mov word [rsi + callerFrame.rax], ax
   240 00006B62 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   241 00006B66 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   242                              <1>     return
    13                              <2> %%_ret:
    14 00006B67 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> xLatError:
   244                              <1> ;Translates the error code given in ax and sets error code in the var
   245                              <1> ; Input: ax = Extended Error Code
   246                              <1> ; Output: ax = Potentially translated Error Code
   247                              <1> ;         [errorExCde] = Original Error Code
   248                              <1> ;Preserves all registers except ax
   249                              <1> ;AH is always returned as 0
   250 00006B68 53                  <1>     push rbx
   251 00006B69 51                  <1>     push rcx
   252 00006B6A 56                  <1>     push rsi
   253 00006B6B 668905(FF030000)    <1>     mov word [errorExCde], ax
   254 00006B72 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   255 00006B74 488D351495FFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   256                              <1> .readEntry:
   257 00006B7B 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   258 00006B7D 3CFF                <1>     cmp al, -1
   259 00006B7F 741F                <1>     je .skipXlat
   260 00006B81 3A05(28040000)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   261 00006B87 7408                <1>     je .found
   262                              <1>     ;Here, entry not found, goto next entry
   263 00006B89 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   264 00006B8C 4801C6              <1>     add rsi, rax    ;Goto next entry
   265 00006B8F EBEA                <1>     jmp short .readEntry
   266                              <1> .found:
   267                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   268 00006B91 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   269                              <1> .mainSearch:
   270 00006B94 AC                  <1>     lodsb   ;Get one byte into al
   271 00006B95 38C3                <1>     cmp bl, al  ;Check against the error code
   272 00006B97 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   273 00006B99 FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   274 00006B9B 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   275                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   276 00006B9D 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   277                              <1> .skipXlat:
   278 00006BA0 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   279 00006BA2 5E                  <1>     pop rsi
   280 00006BA3 59                  <1>     pop rcx
   281 00006BA4 5B                  <1>     pop rbx
   282                              <1>     return
    13                              <2> %%_ret:
    14 00006BA5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   283                              <1> setErrorVars:   ;Int 4Fh, AX=1222h
   284                              <1> ;Looks up the error code in the variable and sets the other error vars
   285                              <1> ;Called with the lookup table in rsi
   286                              <1> ;All regs preserved
   287 00006BA6 50                  <1>     push rax
   288 00006BA7 53                  <1>     push rbx
   289 00006BA8 51                  <1>     push rcx
   290 00006BA9 56                  <1>     push rsi
   291 00006BAA 0FB71D(FF030000)    <1>     movzx ebx, word [errorExCde]
   292 00006BB1 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   293                              <1> .readEntry:
   294 00006BB6 AD                  <1>     lodsd   ;Read the dword table entry into eax
   295 00006BB7 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   296 00006BBC 7428                <1>     je .exit    
   297 00006BBE 38D8                <1>     cmp al, bl  ;Compare the error codes
   298 00006BC0 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   299 00006BC2 D3E8                <1>     shr eax, cl
   300 00006BC4 3CFF                <1>     cmp al, -1
   301 00006BC6 7406                <1>     je .skipClass
   302 00006BC8 8805(02040000)      <1>     mov byte [errorClass], al
   303                              <1> .skipClass:
   304 00006BCE D3E8                <1>     shr eax, cl
   305 00006BD0 3CFF                <1>     cmp al, -1
   306 00006BD2 7406                <1>     je .skipAct
   307 00006BD4 8805(01040000)      <1>     mov byte [errorAction], al
   308                              <1> .skipAct:
   309 00006BDA D3E8                <1>     shr eax, cl
   310 00006BDC 3CFF                <1>     cmp al, -1
   311 00006BDE 7406                <1>     je .exit
   312 00006BE0 8805(FE030000)      <1>     mov byte [errorLocus], al
   313                              <1> .exit:
   314 00006BE6 5E                  <1>     pop rsi
   315 00006BE7 59                  <1>     pop rcx
   316 00006BE8 5B                  <1>     pop rbx
   317 00006BE9 58                  <1>     pop rax
   318                              <1>     return
    13                              <2> %%_ret:
    14 00006BEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   319                              <1> checkFail:
   320                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   321                              <1> ; and swaps the var error code if so
   322 00006BEB 803D(5D040000)00    <1>     cmp byte [Int44Fail], 0
   323 00006BF2 7509                <1>     jnz .skipFail
   324 00006BF4 66C705(FF030000)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   324 00006BFC 00                  <1>
   325                              <1> .skipFail:
   326 00006BFD 56                  <1>     push rsi
   327 00006BFE 488D352695FFFF      <1>     lea rsi, extErrTbl
   328 00006C05 E89CFFFFFF          <1>     call setErrorVars
   329 00006C0A 5E                  <1>     pop rsi
   330                              <1>     return
    13                              <2> %%_ret:
    14 00006C0B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   331                              <1> ;========================================:
   332                              <1> ;      Reentrant Kernel Functions        :
   333                              <1> ;========================================:
   334                              <1> ctrlBreakCheck:    ;ah = 33h
   335 00006C0C 84C0                <1>     test al, al
   336 00006C0E 7508                <1>     jnz .cbcget  ;Get the state or other functions
   337 00006C10 8A15(26040000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   338 00006C16 48CF                <1>     iretq
   339                              <1> .cbcget:
   340 00006C18 3C02                <1>     cmp al, 02h
   341 00006C1A 771A                <1>     ja .cbcBad
   342 00006C1C 740D                <1>     jz .cbcxchg ;Function 2
   343 00006C1E 52                  <1>     push rdx
   344 00006C1F 80E201              <1>     and dl, 1   ;Get only the bottom bit
   345 00006C22 8815(26040000)      <1>     mov byte [breakFlag], dl    ;Set the state
   346 00006C28 5A                  <1>     pop rdx
   347 00006C29 48CF                <1>     iretq
   348                              <1> .cbcxchg:
   349 00006C2B 80E201              <1>     and dl, 1
   350 00006C2E 8615(26040000)      <1>     xchg byte [breakFlag], dl
   351 00006C34 48CF                <1>     iretq
   352                              <1> .cbcBad:
   353 00006C36 B0FF                <1>     mov al, -1
   354 00006C38 48CF                <1>     iretq
   355                              <1> 
   356                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   357 00006C3A 48891D(13040000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   358 00006C41 48CF                <1>     iretq
   359                              <1> 
   360                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   361 00006C43 488B1D(13040000)    <1>     mov rbx, qword [currentPSP]
   362 00006C4A 48CF                <1>     iretq
   363                              <1> 
   364                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   365 00006C4C 488B1D(13040000)    <1>     mov rbx, qword [currentPSP]
   366 00006C53 48CF                <1>     iretq
   367                              <1> 
   368                              <1> setDriverLookahead:;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   369 00006C55 8805(D9190000)      <1>     mov byte [lookahead], al    
   370 00006C5B 48CF                <1>     iretq
   371                              <1> 
   372                              <1> systemServices: ;ah = 61h
   373                              <1> ;All pointers returned in rdx
   374                              <1> ;al = 0 -> Get Environment pointer in rdx
   375                              <1> ;al = 1 -> Get Command Line Arguments Pointer in rdx
   376                              <1> ;al = 2 -> Get ptr to ASCIIZ FQFN for program in rdx
   377                              <1> ;       al = 2 can fail. If CF=CY or rdx = 0, cannot use ptr.
   378                              <1> ;                        Else, rdx -> Filename
   379 00006C5D 3C01                <1>     cmp al, 1
   380 00006C5F 7453                <1>     je short .getCmdLineArgs
   381 00006C61 3C02                <1>     cmp al, 2
   382 00006C63 760C                <1>     jbe .getEnvPtr
   383 00006C65 B801000000          <1>     mov eax, errInvFnc
   384                              <1> .exitBad:
   385 00006C6A 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on
   386 00006C6F 48CF                <1>     iretq
   387                              <1> .getEnvPtr:
   388                              <1>     ;Gets the environment pointer in rdx
   389 00006C71 488B15(13040000)    <1>     mov rdx, qword [currentPSP]
   390 00006C78 488B523E            <1>     mov rdx, qword [rdx + psp.envPtr]   ;Get the environement pointer
   391 00006C7C 7541                <1>     jne short .exitOk   ;If it is not equal to 2, exit (since it was 0)
   392                              <1> ;Here we search for the double 00 and then check if it is 0001 and
   393                              <1> ; pass the ptr to the word after.
   394 00006C7E FA                  <1>     cli
   395 00006C7F 51                  <1>     push rcx
   396 00006C80 31C9                <1>     xor ecx, ecx
   397 00006C82 B9FF7F0000          <1>     mov ecx, 7FFFh  ;Max environment size
   398                              <1> .gep0:
   399 00006C87 66813A0000          <1>     cmp word [rdx], 0   ;Zero word?
   400 00006C8C 740D                <1>     je short .gep1
   401 00006C8E 48FFC2              <1>     inc rdx         ;Go to the next byte
   402 00006C91 FFC9                <1>     dec ecx
   403 00006C93 75F2                <1>     jnz short .gep0
   404                              <1> .gep00:
   405                              <1>     ;Failure here if we haven't hit the double null by the end of 32Kb
   406 00006C95 59                  <1>     pop rcx
   407 00006C96 FB                  <1>     sti
   408 00006C97 31D2                <1>     xor edx, edx    ;Turn it into null pointer
   409 00006C99 EBCF                <1>     jmp short .exitBad
   410                              <1> .gep1:
   411 00006C9B 4881C202000000      <1>     add rdx, 2  ;Skip the double null
   412 00006CA2 66813A0100          <1>     cmp word [rdx], 1   ;Check if one more string in environment
   413 00006CA7 75EC                <1>     jne .gep00
   414 00006CA9 4881C202000000      <1>     add rdx, 2  ;Skip the 0001 word.
   415 00006CB0 59                  <1>     pop rcx
   416 00006CB1 FB                  <1>     sti
   417 00006CB2 EB0B                <1>     jmp short .exitOk
   418                              <1> .getCmdLineArgs:
   419 00006CB4 488B15(13040000)    <1>     mov rdx, qword [currentPSP]
   420 00006CBB 488D525C            <1>     lea rdx, qword [rdx + psp.cmdLineArgPtr]   ;Get the cmdargs pointer
   421                              <1> .exitOk:
   422 00006CBF 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF
   423 00006CC4 48CF                <1>     iretq
   424                              <1> 
   425                              <1> 
   426                              <1> ;========================================:
   427                              <1> ;            Kernel Functions            :
   428                              <1> ;========================================:
   429                              <1> diskReset:         ;ah = 0Dh
   430                              <1> ;Flush all dirty buffers to disk
   431 00006CC6 E837FEFFFF          <1>     call dosCrit1Enter
   432 00006CCB 488B3D(51000000)    <1>     mov rdi, qword [bufHeadPtr]
   433                              <1> .drCheckBuffer:
   434 00006CD2 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   435 00006CD6 7407                <1>     jz .drGotoNextBuffer
   436                              <1> .drFlushBuffer:
   437 00006CD8 E86097FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   438 00006CDD 720C                <1>     jc .drExit
   439                              <1> .drGotoNextBuffer:
   440 00006CDF 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   441 00006CE2 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   442 00006CE9 75E7                <1>     jne .drCheckBuffer
   443                              <1> .drExit:
   444 00006CEB E81CFEFFFF          <1>     call dosCrit1Exit
   445 00006CF0 B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   446 00006CF5 CD4F                <1>     int 4fh
   447                              <1>     return
    13                              <2> %%_ret:
    14 00006CF7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   448                              <1> 
   449                              <1> selectDisk:        ;ah = 0Eh
   450                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   451 00006CF8 88D0                <1>     mov al, dl
   452 00006CFA FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   453 00006CFC E8C8F9FFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   454 00006D01 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   455 00006D03 8805(25040000)      <1>     mov byte [currentDrv], al   ;Set drive as current
   456                              <1> .skipSettingCurrent:
   457 00006D09 0FB605(6C000000)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   458                              <1>     return
    13                              <2> %%_ret:
    14 00006D10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   459                              <1> 
   460                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   461 00006D11 8A05(25040000)      <1>     mov al, byte [currentDrv]
   462                              <1>     return
    13                              <2> %%_ret:
    14 00006D17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   463                              <1> 
   464                              <1> FATinfoDefault:    ;ah = 1Bh
   465 00006D18 30D2                <1>     xor dl, dl
   466                              <1> FATinfoDevice:     ;ah = 1Ch
   467                              <1> ;Input: dl = 1 based drive number
   468                              <1> ;Output:
   469                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   470                              <1> ;cx = bytes per sector
   471                              <1> ;edx = total number of clusters
   472                              <1> ;rbx = Ptr to media ID byte
   473 00006D1A 88D0                <1>     mov al, dl  ;Move drive number into al
   474 00006D1C E811FAFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   475 00006D21 7307                <1>     jnc .fidCDSFound
   476 00006D23 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   477 00006D28 EB2E                <1>     jmp short .error 
   478                              <1> .fidCDSFound:
   479 00006D2A E804F9FFFF          <1>     call getDiskData
   480 00006D2F 7227                <1>     jc .error
   481                              <1> ;Now we have that:
   482                              <1> ;al = sectors per cluster
   483                              <1> ;ah = media ID byte
   484                              <1> ;ebx = total clusters
   485                              <1> ;cx = bytes per sector
   486                              <1> ;edx = number of available clusters
   487 00006D31 E86FF9FFFF          <1>     call getUserRegs
   488 00006D36 8825(85070000)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   489 00006D3C 30E4                <1>     xor ah, ah
   490 00006D3E 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   491 00006D41 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   492 00006D45 488D1D(85070000)    <1>     lea rbx, mediaByte
   493 00006D4C 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   494 00006D50 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   495                              <1> .badExit:
   496 00006D54 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   497                              <1>     return
    13                              <2> %%_ret:
    14 00006D57 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   498                              <1> .error:
   499 00006D58 E8F0FDFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   500 00006D5D 66B8FFFF            <1>     mov ax, -1
   501 00006D61 EBF1                <1>     jmp short .badExit
   502                              <1> 
   503                              <1> setIntVector:      ;ah = 25h
   504                              <1> ;Called with:
   505                              <1> ;   rdx = Pointer to interrupt handler
   506                              <1> ;   al = Interrupt number
   507 00006D63 FA                  <1>     cli ;Halt interrupts
   508 00006D64 0F010D(BC1A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
   509 00006D6B 0FB6C0              <1>     movzx eax, al
   510 00006D6E 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
   511 00006D72 480305(BE1A0000)    <1>     add rax, qword [dosIdtPtr.base]    
   512 00006D79 668910              <1>     mov word [rax], dx  ;Get low word into offset 15...0
   513 00006D7C 48C1EA10            <1>     shr rdx, 10h    ;Bring next word low
   514 00006D80 66895006            <1>     mov word [rax + 6], dx  ;Get low word into offset 31...16
   515 00006D84 48C1EA10            <1>     shr rdx, 10h    ;Bring last dword low
   516 00006D88 895008              <1>     mov dword [rax + 8], edx
   517 00006D8B FB                  <1>     sti
   518                              <1>     return
    13                              <2> %%_ret:
    14 00006D8C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   519                              <1> 
   520                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   521 00006D8D 8805(C4030000)      <1>     mov byte [verifyFlag], al
   522 00006D93 8025(C4030000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   523                              <1>     return
    13                              <2> %%_ret:
    14 00006D9A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> getDOSversion:     ;ah = 30h
   525 00006D9B E805F9FFFF          <1>     call getUserRegs
   526 00006DA0 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   527 00006DA2 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   528 00006DA5 668B055492FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   529 00006DAC 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   530                              <1>     return
    13                              <2> %%_ret:
    14 00006DAF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   533                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   534 00006DB0 30D2                <1>     xor dl, dl
   535                              <1> getDeviceDPBptr:   ;ah = 32h
   536                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   537                              <1> ;On exit: rbx = DPB pointer
   538 00006DB2 88D0                <1>     mov al, dl
   539 00006DB4 E879F9FFFF          <1>     call getCDS
   540 00006DB9 722C                <1>     jc .bad
   541 00006DBB 488B3D(01070000)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   542 00006DC2 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   543 00006DC8 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   544                              <1>     ;Here ONLY if accessing critical Disk data structures
   545 00006DCA E833FDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   546 00006DCF E80BF6FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   547 00006DD4 E833FDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   548 00006DD9 720C                <1>     jc .bad
   549 00006DDB E8C5F8FFFF          <1>     call getUserRegs
   550 00006DE0 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   551 00006DE4 30C0                <1>     xor al, al
   552                              <1>     return
    13                              <2> %%_ret:
    14 00006DE6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   553                              <1> .bad:
   554 00006DE7 B0FF                <1>     mov al, -1
   555                              <1>     return
    13                              <2> %%_ret:
    14 00006DE9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   556                              <1> 
   557                              <1> getInDOSflagPtr:   ;ah = 34h
   558 00006DEA 488D15(FC030000)    <1>     lea rdx, inDOS
   559 00006DF1 E8AFF8FFFF          <1>     call getUserRegs
   560 00006DF6 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   561                              <1>     return
    13                              <2> %%_ret:
    14 00006DFA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   562                              <1> 
   563                              <1> getIntVector:      ;ah = 35h
   564                              <1> ;Called with:
   565                              <1> ;   al = Interrupt Number
   566                              <1> ;Returns:
   567                              <1> ;   rbx = Pointer to interrupt handler
   568 00006DFB E877F8FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   569 00006E00 E8A0F8FFFF          <1>     call getUserRegs
   570 00006E05 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   571                              <1>     return
    13                              <2> %%_ret:
    14 00006E09 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   572                              <1> 
   573                              <1> getDiskFreeSpace:  ;ah = 36h
   574                              <1> ;Input: Drive number in dl (0 = Current)
   575                              <1> ;Output:    ax = sectors per cluster
   576                              <1> ;           ebx = number of free clusters
   577                              <1> ;           cx = bytes per sector
   578                              <1> ;           edx = total clusters on drive
   579 00006E0A 88D0                <1>     mov al, dl
   580 00006E0C E821F9FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   581 00006E11 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   582                              <1> ;Else, we at an error.
   583                              <1> ;Simply return with CY set and error code in al with extended error info
   584 00006E13 B80F000000          <1>     mov eax, errBadDrv
   585 00006E18 E830FDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   586                              <1>     ;extErrExit sets rsi to caller regs
   587 00006E1D 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   588                              <1>     return
    13                              <2> %%_ret:
    14 00006E22 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   589                              <1> .gdfsCDSFound:
   590 00006E23 E80BF8FFFF          <1>     call getDiskData
   591 00006E28 7219                <1>     jc .error
   592                              <1> ;Now we have that:
   593                              <1> ;al = sectors per cluster
   594                              <1> ;ah = media ID byte
   595                              <1> ;ebx = total clusters
   596                              <1> ;cx = bytes per sector
   597                              <1> ;edx = number of available clusters
   598 00006E2A E876F8FFFF          <1>     call getUserRegs
   599 00006E2F 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   600 00006E31 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   601 00006E34 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   602 00006E38 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   603 00006E3B 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   604                              <1> .badExit:
   605 00006E3F 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   606                              <1>     return
    13                              <2> %%_ret:
    14 00006E42 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   607                              <1> .error:
   608 00006E43 E805FDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   609 00006E48 66B8FFFF            <1>     mov ax, -1
   610 00006E4C EBF1                <1>     jmp short .badExit
   611                              <1> 
   612                              <1> 
   613                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   614 00006E4E 31C0                <1>     xor eax, eax
   615 00006E50 668705(23040000)    <1>     xchg ax, word [errorLevel]
   616 00006E57 E9E3FCFFFF          <1>     jmp extGoodExit
   617                              <1> 
   618                              <1> getSysVarsPtr:     ;ah = 52h
   619 00006E5C 488D15(2F000000)    <1>     lea rdx, sysVarsPtr
   620 00006E63 E83DF8FFFF          <1>     call getUserRegs
   621 00006E68 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   622                              <1>     return
    13                              <2> %%_ret:
    14 00006E6C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   623                              <1> 
   624                              <1> 
   625                              <1> ;AH = 53h - CREATE DPB
   626                              <1> createDPB:         ;generates a DPB from a given BPB
   627                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   628                              <1> ;This is done so that the other fields of the DPB can be recycled
   629                              <1> ;Input: rsi = ptr to the BPB
   630                              <1> ;       rbp = ptr to the DPB
   631                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   632                              <1> ;bMediaDescriptor
   633 00006E6D 8A4615              <1>     mov al, byte [rsi + bpb.media]
   634 00006E70 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   635                              <1> ;dFirstFreeCluster
   636 00006E73 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   637                              <1> ;dNumberOfFreeClusters
   638 00006E7A C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   639                              <1> ;wBytesPerSector
   640 00006E81 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   641 00006E85 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   642                              <1> ;bMaxSectorInCluster
   643 00006E89 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   644 00006E8C FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   645 00006E8E 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   646                              <1> ;bSectorsPerClusterShift
   647 00006E91 FEC0                <1>     inc al
   648 00006E93 30C9                <1>     xor cl, cl
   649                              <1> .cd2:
   650 00006E95 D0E8                <1>     shr al, 1
   651 00006E97 7404                <1>     jz .cd3
   652 00006E99 FEC1                <1>     inc cl
   653 00006E9B EBF8                <1>     jmp short .cd2
   654                              <1> .cd3:
   655 00006E9D 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   656                              <1> ;wFAToffset, number of reserved sectors in partition
   657 00006EA0 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   658 00006EA4 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   659                              <1> ;bNumberOfFATs
   660 00006EA8 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   661 00006EAB 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   662                              <1> ;wNumberRootDirEntries
   663                              <1> ;Gets the number of 32 byte entries in the root directory
   664                              <1> ;Only valid for FAT 12/16
   665 00006EAE 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   666 00006EB2 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   667                              <1> ;dFATlength, get the FAT length
   668 00006EB6 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   669 00006EBA 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   670 00006EBD 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   671 00006EBF 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   672 00006EC2 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   673                              <1> ;Complex cases below...
   674                              <1> ;dClusterHeapOffset, start sector of the data area
   675 00006EC5 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   676 00006EC9 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   677 00006ECC 85C0                <1>     test eax, eax
   678 00006ECE 0F44C3              <1>     cmovz eax, ebx
   679                              <1> ;eax = FATsz
   680 00006ED1 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   681 00006ED5 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   682 00006ED8 85DB                <1>     test ebx, ebx
   683 00006EDA 0F44D9              <1>     cmovz ebx, ecx 
   684                              <1> ;ebx = TotSec
   685 00006EDD 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   686 00006EE0 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   687                              <1> .cd4:
   688 00006EE2 01C2                <1>     add edx, eax
   689 00006EE4 FEC9                <1>     dec cl
   690 00006EE6 75FA                <1>     jnz .cd4
   691 00006EE8 89D0                <1>     mov eax, edx    ;Store product in eax
   692 00006EEA 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   693 00006EEE 01D0                <1>     add eax, edx
   694                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   695 00006EF0 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   696 00006EF4 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   697 00006EF7 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   698 00006EFB 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   699 00006EFC 89D0                <1>     mov eax, edx
   700 00006EFE 31D2                <1>     xor edx, edx
   701 00006F00 F7F1                <1>     div ecx
   702 00006F02 89C2                <1>     mov edx, eax
   703 00006F04 58                  <1>     pop rax
   704 00006F05 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   705                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   706                              <1>     ;aka eax = Start sector of the data area in volume
   707 00006F07 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   708                              <1> ;dClusterCount
   709 00006F0A 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   710 00006F0C 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   711 00006F0E 31D2                <1>     xor edx, edx
   712 00006F10 BB01000000          <1>     mov ebx, 1
   713 00006F15 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   714 00006F18 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   715 00006F1A F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   716 00006F1C FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   717 00006F1E 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   718                              <1> ;dFirstUnitOfRootDir
   719 00006F21 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   720 00006F26 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   721 00006F29 770F                <1>     ja .cd5
   722                              <1>     ;Else, we need to find the first sector of the root directory
   723                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   724 00006F2B 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   725 00006F2F 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   726                              <1> .cd51:
   727 00006F33 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   728 00006F36 FFC9                <1>     dec ecx
   729 00006F38 75F9                <1>     jnz .cd51
   730                              <1> .cd5:
   731 00006F3A 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   732 00006F3D C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Denote not yet accessed
   733                              <1> ;Exit epilogue
   734 00006F41 488B1D(6E040000)    <1>     mov rbx, qword [oldRSP]
   735 00006F48 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   736                              <1>     %if DEBUG && DPBINFO
   737                              <1>     ;Print DPB 
   738                              <1>     debugEnterM
   739                              <1>     push rbp
   740                              <1>     lea rbp, .l0000
   741                              <1>     call debPrintNullString
   742                              <1>     pop rbp
   743                              <1>     call debDPBBPBptr
   744                              <1>     call debMakeDebuggerRespond
   745                              <1>     jmp short .l0001
   746                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   747                              <1> .l0001:
   748                              <1>     debugExitM
   749                              <1>     %endif
   750                              <1>     return
    13                              <2> %%_ret:
    14 00006F4A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   751                              <1> 
   752                              <1> getVerifySetting:  ;ah = 54h
   753 00006F4B 8A05(C4030000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   754                              <1>     return
    13                              <2> %%_ret:
    14 00006F51 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   755                              <1> 
   756                              <1> getExtendedError:  ;ah = 59h
   757 00006F52 E84EF7FFFF          <1>     call getUserRegs
   758 00006F57 668B05(FF030000)    <1>     mov ax, word [errorExCde]
   759 00006F5E 8A2D(FE030000)      <1>     mov ch, byte [errorLocus]
   760 00006F64 8A3D(02040000)      <1>     mov bh, byte [errorClass]
   761 00006F6A 8A1D(01040000)      <1>     mov bl, byte [errorAction]
   762 00006F70 668906              <1>     mov word [rsi + callerFrame.rax], ax
   763 00006F73 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   764 00006F77 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   765                              <1>     return
    13                              <2> %%_ret:
    14 00006F7A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   766                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   767                              <1> noOp:
   768                              <1>     return
    13                              <2> %%_ret:
    14 00006F7B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                                  %include "./Source/Kernel/Net/server.asm"
     1                              <1> ;Network functions here
     2                              <1> 
     3                              <1> dosServer:  ;ah = 5Dh
     4                              <1> ;Dispatches the server function in al. Many of these are share hooks.
     5                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
     6                              <1> ;   rdx = Pointer to DPL
     7 00006F7C 3C07                <1>     cmp al, 07h
     8 00006F7E 7204                <1>     jb .skip
     9 00006F80 3C09                <1>     cmp al, 09h
    10 00006F82 7619                <1>     jbe .skip2
    11                              <1> .skip:
    12 00006F84 4889D6              <1>     mov rsi, rdx
    13 00006F87 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    14 00006F8B 66891D(37040000)    <1>     mov word [machineNum], bx
    15 00006F92 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    16 00006F96 48891D(2F040000)    <1>     mov qword [serverPSP], rbx
    17                              <1> .skip2:
    18 00006F9D 488D1DD7FFFFFF      <1>     lea rbx, noOp   ;Push the ok function return address
    19 00006FA4 53                  <1>     push rbx
    20 00006FA5 488B1D(831A0000)    <1>     mov rbx, qword [serverDispTblPtr]   ;Get the qword
    21 00006FAC 53                  <1>     push rbx    ;Push the table ptr on the stack
    22 00006FAD 50                  <1>     push rax    ;Push al onto stack as a qword
    23 00006FAE E856010000          <1>     call serverFunctionSelect
    24 00006FB3 B801000000          <1>     mov eax, eLocUnk
    25 00006FB8 8805(FE030000)      <1>     mov byte [errorLocus], al
    26 00006FBE E98AFBFFFF          <1>     jmp extErrExit
    27                              <1> 
    28                              <1> serverDispatch: ;AX=5D00h
    29                              <1> ;Input: rsi points to the DOS parameter list
    30 00006FC3 58                  <1>     pop rax ;Pop additional return ptr off the stack
    31 00006FC4 56                  <1>     push rsi    ;Put dpl ptr in rdi
    32 00006FC5 5F                  <1>     pop rdi
    33 00006FC6 E8DAF6FFFF          <1>     call getUserRegs
    34 00006FCB 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    35 00006FCE 56                  <1>     push rsi
    36 00006FCF B906000000          <1>     mov ecx, 6
    37 00006FD4 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    38 00006FD7 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    39 00006FDE 48A5                <1>     movsq   ;Transfer r8...
    40 00006FE0 48A5                <1>     movsq   ;... and r9
    41 00006FE2 5E                  <1>     pop rsi
    42 00006FE3 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    43 00006FE6 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    44 00006FEA 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    45 00006FEE 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    46 00006FF2 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    47 00006FF6 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    48 00006FFA 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    49 00006FFE 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    50 00007002 48891D(76040000)    <1>     mov qword [oldRBX], rbx
    51 00007009 C605(F1060000)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    52 00007010 E9EEF9FFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    53                              <1> 
    54                              <1> commitAllFilesForProcess:   ;AX=5D01h
    55                              <1> ;Will commit all the files for the current Process as indicated by the DPL
    56                              <1> ;A bad procID (otherwise known as a PSP) may otherwise crash the call.
    57                              <1> ;Thus we check the first two bytes of the current PSP to be CD 40h
    58                              <1> ;If so, we proceed, otherwise, fail with AccDen
    59 00007015 488B1D(13040000)    <1>     mov rbx, qword [currentPSP] ;Get the current PSP (setup from DPL)
    60 0000701C 66813BCD40          <1>     cmp word [rbx], 40CDh
    61 00007021 740A                <1>     je .validTask
    62 00007023 B805000000          <1>     mov eax, errAccDen
    63 00007028 E920FBFFFF          <1>     jmp extErrExit
    64                              <1> .validTask:
    65 0000702D 31DB                <1>     xor ebx, ebx    ;Start from file 0
    66 0000702F E8CEFAFFFF          <1>     call dosCrit1Enter
    67                              <1> .mainLoop:
    68                              <1>     ;Now loop through the JFT of the current task committing the files
    69 00007034 53                  <1>     push rbx
    70 00007035 E80ED7FFFF          <1>     call derefSFTPtr    ;Get in rdi the pointer for this SFT entry
    71 0000703A 7227                <1>     jc .exit
    72 0000703C 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0   ;Is this an unopened file?
    73 00007041 741B                <1>     je .gotoNextFile
    74 00007043 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1  ;Is this in the process of something?
    75 00007048 7414                <1>     je .gotoNextFile
    76 0000704A 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;Dont commit redirs
    77 00007050 750C                <1>     jnz .gotoNextFile
    78 00007052 48893D(21070000)    <1>     mov qword [currentSFT], rdi ;Set this as the current SFT
    79 00007059 E888C4FFFF          <1>     call commitMain ;Will reenter critical section but thats ok
    80                              <1>     ;If it succeeded, great, cool also if not, keep going!
    81                              <1> .gotoNextFile:
    82 0000705E 5B                  <1>     pop rbx
    83 0000705F FFC3                <1>     inc ebx
    84 00007061 EBD1                <1>     jmp short .mainLoop
    85                              <1> .exit:
    86 00007063 E8A4FAFFFF          <1>     call dosCrit1Exit
    87 00007068 5B                  <1>     pop rbx ;Align stack
    88 00007069 E9D1FAFFFF          <1>     jmp extGoodExit
    89                              <1> 
    90                              <1> closeFilesByName:           ;AX=5D02h
    91 0000706E FF15(DB000000)      <1>     call qword [closeNameShare]
    92                              <1> .shareExit: ;Use this symbol if we need a decision to be made
    93                              <1> .shareExitBad:  ;Use this symbol if we want to exit Error
    94 00007074 0F82D3FAFFFF        <1>     jc extErrExit
    95                              <1> .shareExitGood:
    96 0000707A E9C0FAFFFF          <1>     jmp extGoodExit
    97                              <1> 
    98                              <1> closeFilesByComputer:       ;AX=5D03h
    99 0000707F FF15(CB000000)      <1>     call qword [closeCompShare]
   100 00007085 EBED                <1>     jmp short closeFilesByName.shareExit
   101                              <1> 
   102                              <1> closeFilesByProcess:        ;AX=5D04h
   103 00007087 FF15(D3000000)      <1>     call qword [closeTaskShare]
   104 0000708D EBE5                <1>     jmp short closeFilesByName.shareExit
   105                              <1> 
   106                              <1> getOpenFileListEntry:       ;AX=5D05h
   107 0000708F FF15(FB000000)      <1>     call qword [openFileListShare]  ;Must zero extend all results to 8 bytes
   108 00007095 72DD                <1>     jc closeFilesByName.shareExitBad
   109 00007097 E809F6FFFF          <1>     call getUserRegs
   110 0000709C 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Network machine number (0-ext)
   111 000070A0 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi  ;Ptr to file name
   112                              <1> .shareExit:    ;rcx must be zero extended however to use this
   113 000070A4 48894E10            <1>     mov qword [rsi + callerFrame.rcx], rcx  ;Lock count
   114                              <1> .shareExit2:
   115 000070A8 EBD0                <1>     jmp short closeFilesByName.shareExitGood
   116                              <1> 
   117                              <1> getSDAData:                 ;AX=5D06h
   118                              <1> ;Returns:
   119                              <1> ;   rsi -> nonreentrant data area (includes all three DOS stacks)
   120                              <1> ;   (critical error flag is first byte) (see #01687)
   121                              <1> ;   rcx = size in bytes of area which must be swapped while in DOS
   122                              <1> ;   rdx = size in bytes of area which must always be swapped
   123 000070AA 488D3D(FB030000)    <1>     lea rdi, sda
   124 000070B1 48B988160000000000- <1>     mov rcx, sdaLen
   124 000070BA 00                  <1>
   125 000070BB 48BA2C000000000000- <1>     mov rdx, sdaLen - sdaDOSLen ;Get the difference
   125 000070C4 00                  <1>
   126 000070C5 E8DBF5FFFF          <1>     call getUserRegs
   127 000070CA 48897E20            <1>     mov qword [rsi + callerFrame.rsi], rdi
   128 000070CE 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   129 000070D2 EBD0                <1>     jmp short getOpenFileListEntry.shareExit   ;Stores rcx and returns ok
   130                              <1> 
   131                              <1> printerRedir:               ;AX=5D07/8/9h
   132 000070D4 50                  <1>     push rax
   133 000070D5 B825110000          <1>     mov eax, 1125h  ;Redir Printer Mode setup
   134 000070DA CD4F                <1>     int 4Fh
   135 000070DC 5B                  <1>     pop rbx
   136 000070DD 7295                <1>     jc short closeFilesByName.shareExitBad
   137 000070DF EB99                <1>     jmp short  closeFilesByName.shareExitGood
   138                              <1> 
   139                              <1> setExtendedErrorInfo:       ;AX=5D0Ah
   140                              <1> ;Input:
   141                              <1> ;   rsi -> DPL
   142 000070E1 8B06                <1>     mov eax, dword [rsi + dpl.rax]  ;Get ax (extended error code)
   143 000070E3 668905(FF030000)    <1>     mov word [errorExCde], ax
   144 000070EA 488B4628            <1>     mov rax, qword [rsi + dpl.rdi]  ;Get rdi as a full ptr
   145 000070EE 488905(03040000)    <1>     mov qword [xInt44RDI], rax
   146 000070F5 8B4608              <1>     mov eax, dword [rsi + dpl.rbx]  ;Get bx (error action and class)
   147 000070F8 668905(01040000)    <1>     mov word [errorAction], ax  ;Store action and class together
   148 000070FF 8B4610              <1>     mov eax, dword [rsi + dpl.rcx]  ;Get ch (error locus)
   149 00007102 8825(FE030000)      <1>     mov byte [errorLocus], ah
   150                              <1>     return  ;Return to the function ptr on the stack (the return function)
    13                              <2> %%_ret:
    14 00007108 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> serverFunctionSelect:
   153                              <1> ;First parameter is al ONLY, subfunction number (BP + 2*8)
   154                              <1> ;Second parameter is table address, (BP + 3*8)
   155 00007109 55                  <1>     push rbp
   156 0000710A 4889E5              <1>     mov rbp, rsp
   157 0000710D 53                  <1>     push rbx
   158 0000710E 488B5D18            <1>     mov rbx, qword [rbp + 3*8]  ;Get table ptr
   159 00007112 0FB61B              <1>     movzx ebx, byte [rbx]   ;Get the table length
   160 00007115 3A5D10              <1>     cmp bl, byte [rbp + 2*8]    ;Is subfunction number less than bl?
   161 00007118 7621                <1>     jbe short .argumentTooBig
   162 0000711A 0FB65D10            <1>     movzx ebx, byte [rbp + 2*8] ;Get subfunction into ebx
   163 0000711E D1E3                <1>     shl ebx, 1  ;Convert to word offset
   164 00007120 FFC3                <1>     inc ebx ;Go past the initial byte of the table
   165 00007122 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   166 00007126 0FB71B              <1>     movzx ebx, word [rbx]   ;Get the offset of the function from the tbl head
   167 00007129 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   168 0000712D 48895D20            <1>     mov qword [rbp + 4*8], rbx  ;Store this address as the return address
   169 00007131 5B                  <1>     pop rbx
   170 00007132 5D                  <1>     pop rbp
   171 00007133 4881C418000000      <1>     add rsp, 3*8    ;Go past old return and old subfunction value
   172                              <1>     return
    13                              <2> %%_ret:
    14 0000713A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> .argumentTooBig:
   174 0000713B 5B                  <1>     pop rbx
   175 0000713C 5D                  <1>     pop rbp
   176 0000713D C21800              <1>     ret 3*8 ;Clear stack of all argument bytes
   177                              <1> 
   178                              <1> netServices:   ;ah = 5Eh, do nothing
   179                              <1> ;Only two native functions, AL=0 and AL=1 (get/set machine name)
   180 00007140 3C01                <1>     cmp al, 01
   181 00007142 7214                <1>     jb .getName
   182 00007144 7437                <1>     jz .setName
   183 00007146 3C06                <1>     cmp al, 6
   184 00007148 724C                <1>     jb .netRedir
   185 0000714A C605(FE030000)01    <1>     mov byte [errorLocus], eLocUnk
   186 00007151 B001                <1>     mov al, errInvFnc
   187                              <1> .badExit:
   188 00007153 E9F5F9FFFF          <1>     jmp extErrExit
   189                              <1> .getName:
   190                              <1> ;Input: rdx -> 16 byte buffer to fill with machine name
   191                              <1> ;Output: CF=NC => Success.
   192                              <1> ;        CH = Name Validity (if 0, the name is invalid)
   193                              <1> ;        CL = NetBIOS number for the machine
   194                              <1> ;        rdx -> Blank padded Filled buffer with machine name
   195                              <1> ;        CF=CY => Failure
   196                              <1> ;        AX = Errorcode
   197 00007158 4889D7              <1>     mov rdi, rdx
   198 0000715B 0FB70D(11000000)    <1>     movzx ecx, word [validNetNam]
   199 00007162 E83EF5FFFF          <1>     call getUserRegs
   200 00007167 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   201 0000716B 488D35(CA030000)    <1>     lea rsi, machineName
   202                              <1> .nameCmn:
   203 00007172 31C0                <1>     xor eax, eax
   204 00007174 48A5                <1>     movsq
   205 00007176 A5                  <1>     movsd
   206 00007177 66A5                <1>     movsw
   207 00007179 A4                  <1>     movsb
   208 0000717A AA                  <1>     stosb   ;Store terminating null
   209 0000717B EB24                <1>     jmp short .exitGood
   210                              <1> .setName:
   211                              <1> ;Input: rdx -> 16 byte buffer with new machine name
   212                              <1> ;       CH = 0 => Mark name as invalid
   213                              <1> ;         != 0 => Mark name as valid
   214                              <1> ;       CL = NetBIOS number for the name
   215 0000717D 66890D(11000000)    <1>     mov word [validNetNam], cx
   216 00007184 4889D6              <1>     mov rsi, rdx
   217 00007187 FE05(C9030000)      <1>     inc byte [serverCnt]    ;Increment the name change flag
   218 0000718D 488D3D(CA030000)    <1>     lea rdi, machineName
   219 00007194 EBDC                <1>     jmp short .nameCmn
   220                              <1> 
   221                              <1> .netRedir:
   222 00007196 50                  <1>     push rax
   223 00007197 B81F110000          <1>     mov eax, 111Fh  ;Net Services over the Redirector
   224 0000719C CD4F                <1>     int 4Fh
   225 0000719E 5A                  <1>     pop rdx
   226 0000719F 72B2                <1>     jc .badExit
   227                              <1> .exitGood:
   228 000071A1 E999F9FFFF          <1>     jmp extGoodExit
   229                              <1> 
   230                              <1> netRedir:;ah = 5Fh, redirector needs to be installed
   231                              <1> ;Exception: We pick off ah=07 (ENABLE DRIVE) and ah=08 (DISABLE DRIVE)
   232 000071A6 80FC07              <1>     cmp ah, 07h
   233 000071A9 7419                <1>     je .driveAction
   234 000071AB 80FC08              <1>     cmp ah, 08h
   235 000071AE 7414                <1>     je .driveAction
   236                              <1>     ;Else, use redirector to process request
   237 000071B0 50                  <1>     push rax
   238 000071B1 B81E110000          <1>     mov eax, 111eh  ;Do redirection redirector function
   239 000071B6 CD4F                <1>     int 4Fh
   240 000071B8 5B                  <1>     pop rbx
   241                              <1> .badExit:
   242 000071B9 0F828EF9FFFF        <1>     jc extErrExit
   243                              <1> .goodExit:
   244 000071BF E97BF9FFFF          <1>     jmp extGoodExit
   245                              <1> .driveAction:
   246                              <1> ;dl must have valid 0-based drive number
   247 000071C4 86C2                <1>     xchg al, dl ;Get function number in dl and drive number in al
   248 000071C6 E8C2F5FFFF          <1>     call getCDSforDrive
   249 000071CB 72EC                <1>     jc short .badExit
   250                              <1>     ;rsi points to CDS
   251 000071CD 80EA07              <1>     sub dl, 7
   252 000071D0 7408                <1>     jz .enable
   253 000071D2 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear bit
   254 000071D8 EBE5                <1>     jmp short .goodExit
   255                              <1> .enable:
   256 000071DA 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive   ;Set bit
   257 000071E0 EBDD                <1>     jmp short .goodExit
    46                                  %include "./Source/Kernel/Net/multiplx.asm"
     1                              <1> ;Default multiplexer. Current only installed function is ah=12h
     2                              <1> ;If a ah=11h request is made, we return CF=CY (as intended)
     3                              <1> ;If an argument needs to be in al for any function, it must be pushed on
     4                              <1> ; stack before the interrupt is called. This word is always read from the
     5                              <1> ; stack, but the stack is not rejiggled to remove it.
     6                              <1> 
     7                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
     8 000071E2 80FC12              <1>     cmp ah, 12h
     9 000071E5 7549                <1>     jne .exitBad       ;Exit if not for us
    10 000071E7 3C26                <1>     cmp al, mDispTblL / 2
    11 000071E9 7345                <1>     jae .exitBad   ;If above or equal, exit
    12                              <1>     ;Rejiggle stack! 
    13 000071EB 53                  <1>     push rbx    ;Storage for return from DOS ret addr
    14 000071EC 53                  <1>     push rbx    ;Storage for DOS function
    15 000071ED 53                  <1>     push rbx    ;Stores rbx value
    16 000071EE 488D1D30000000      <1>     lea rbx, .retAddr
    17 000071F5 48895C2410          <1>     mov qword [rsp + 2*8], rbx    ;Store ret addr from DOS routine
    18                              <1> 
    19 000071FA 51                  <1>     push rcx
    20 000071FB 488D1DA591FFFF      <1>     lea rbx, qword mDispTbl   ;Get mplx displacement tbl
    21 00007202 53                  <1>     push rbx
    22 00007203 0FB6C8              <1>     movzx ecx, al   ;Get the subfunction number into ecx
    23 00007206 488B442450          <1>     mov rax, qword [rsp + 10*8]  ;Pick the word pushed on the stack before call 
    24 0000720B D1E1                <1>     shl ecx, 1   ;multiply by 2
    25 0000720D 48FFC3              <1>     inc rbx         ;Go past the first byte (length count)
    26 00007210 0FB71C0B            <1>     movzx ebx, word [rbx + rcx] ;Get the word at this address
    27 00007214 59                  <1>     pop rcx ;Get the EA of the displacement table in rcx
    28 00007215 4801CB              <1>     add rbx, rcx
    29 00007218 59                  <1>     pop rcx
    30 00007219 48895C2408          <1>     mov qword [rsp + 8], rbx
    31 0000721E 5B                  <1>     pop rbx
    32 0000721F 488B442438          <1>     mov rax, qword [rsp + 7*8]  ;Get qword that may be passed on stack
    33                              <1>     return
    13                              <2> %%_ret:
    14 00007224 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    34                              <1> 
    35                              <1> .retAddr:
    36 00007225 53                  <1>     push rbx
    37 00007226 9C                  <1>     pushfq
    38 00007227 5B                  <1>     pop rbx
    39 00007228 48895C2418          <1>     mov qword [rsp + 3*8], rbx
    40 0000722D 5B                  <1>     pop rbx
    41 0000722E 48CF                <1>     iretq
    42                              <1> 
    43                              <1> .exitBad:
    44 00007230 B801000000          <1>     mov eax, errInvFnc
    45 00007235 C605(FE030000)01    <1>     mov byte [errorLocus], eLocUnk
    46 0000723C 804C241001          <1>     or byte [rsp + 8h*2], 1 ;Set CF
    47 00007241 48CF                <1>     iretq
    48                              <1> multiplexTest:
    49 00007243 B0FF                <1>     mov al, -1
    50 00007245 C3                  <1>     ret
    51                              <1> getDosDataSeg:  ;Int 4Fh, AX=1203h
    52                              <1> ;Return: r8 = Dos Data Segment Pointer
    53 00007246 4C8D05(00000000)    <1>     lea r8, dosDataArea
    54                              <1>     return
    13                              <2> %%_ret:
    14 0000724D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    55                              <1> 
    47                                  %include "./Source/Kernel/Net/share.asm"
     1                              <1> ;Kernel functions to be used by SHARE on SHARE'd files.
     2                              <1> 
     3                              <1> ;Generic Share Hooks and Wrappers
     4                              <1> shareBadFunction:
     5 0000724E B801000000          <1>     mov eax, errInvFnc
     6 00007253 668905(FF030000)    <1>     mov word [errorExCde], ax
     7 0000725A F9                  <1>     stc
     8                              <1>     return
    13                              <2> %%_ret:
    14 0000725B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> badDfltShareHook:
    10                              <1> ;Return CF=CY
    11 0000725C E8EDFFFFFF          <1>     call shareBadFunction
    12                              <1>     return
    13                              <2> %%_ret:
    14 00007261 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> goodDfltShareHook:
    14                              <1> ;Return CF=NC
    15 00007262 F8                  <1>     clc
    16                              <1>     return
    13                              <2> %%_ret:
    14 00007263 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                              <1> openShareCallWrapper:
    18 00007264 FF15(BB000000)      <1>     call qword [openShare]
    19                              <1>     return
    13                              <2> %%_ret:
    14 0000726A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> closeShareCallWrapper:
    21 0000726B FF15(C3000000)      <1>     call qword [closeShare]
    22                              <1>     return
    13                              <2> %%_ret:
    14 00007271 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> 
    24                              <1> retryShareIODelay:
    25                              <1> ;Checks to see if the region of the file we are IOing with is locked.
    26                              <1> ;Called only in readDiskFile and writeDiskFile
    27                              <1> ;Input: rdi -> SFT for current file
    28                              <1> ;       ecx = Length of region from current position in file
    29                              <1> ;Output: If CF=NC, not locked
    30                              <1> ;        If CF=CY if ANY portion of the region is locked and EAX=errLokVio
    31 00007272 0FB71D(13000000)    <1>     movzx ebx, word [shareCount]
    32                              <1> .mainLoop:      
    33 00007279 53                  <1>     push rbx
    34 0000727A FF15(F3000000)      <1>     call qword [checkFileLockShare]
    35 00007280 5B                  <1>     pop rbx
    36                              <1>     retnc   ;Return if CF=NC (i.e. region not locked [anymore])
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007281 73EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    37 00007283 E806000000          <1>     call shareRetryCountdown
    38 00007288 FFCB                <1>     dec ebx
    39 0000728A 75ED                <1>     jnz .mainLoop
    40 0000728C F9                  <1>     stc
    41                              <1>     return
    13                              <2> %%_ret:
    14 0000728D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    43                              <1> shareRetryCountdown:
    44                              <1> ;Used in: OpenMain, retryShareIODelay, sharingLoop
    45                              <1> ;Does the retry wait IFF the request was not a server request.
    46 0000728E F605(F1060000)FF    <1>     test byte [dosInvoke], -1   ;Server call?
    47                              <1>     retnz   ;Exit by default if it is a server call
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007295 75F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    48 00007297 51                  <1>     push rcx
    49 00007298 0FB70D(15000000)    <1>     movzx ecx, word [shareDelay]    ;This many multiples of counts to 65536 
    50 0000729F 67E30D              <1>     jecxz .exit
    51                              <1> .loopBody:
    52 000072A2 51                  <1>     push rcx
    53 000072A3 31C9                <1>     xor ecx, ecx
    54                              <1> .mainLoop:
    55 000072A5 66FFC9              <1>     dec cx
    56 000072A8 75FB                <1>     jnz .mainLoop
    57 000072AA 59                  <1>     pop rcx
    58 000072AB FFC9                <1>     dec ecx
    59 000072AD 75F3                <1>     jnz .loopBody
    60                              <1> .exit:
    61 000072AF 59                  <1>     pop rcx
    62                              <1>     return
    13                              <2> %%_ret:
    14 000072B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> shareCheckOpenViolation:
    65                              <1> ;Input: rdi -> Locally complete SFT we are opening
    66 000072B1 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
    67 000072B7 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
    68 000072B9 50                  <1>     push rax
    69 000072BA 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
    70 000072BE 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
    71 000072C3 58                  <1>     pop rax
    72 000072C4 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
    73                              <1> .fcbQuirk:
    74 000072C6 E83B000000          <1>     call shareLockViolationCriticalError
    75                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000072CB 73E3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    76                              <1> .notInCompatMode:
    77 000072CD B820000000          <1>     mov eax, errShrVio
    78 000072D2 F9                  <1>     stc ;Set the flag for error
    79                              <1>     return
    13                              <2> %%_ret:
    14 000072D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> 
    82                              <1> 
    83                              <1> shareFile:
    84                              <1> ;Once the SFT has been made, here we allocate resoureces within share to
    85                              <1> ; share the file, if it is possible to do so!
    86                              <1> ; This is done by calling the open wrapper
    87 000072D4 51                  <1>     push rcx
    88                              <1> .reloadCounter:
    89 000072D5 0FB70D(13000000)    <1>     movzx ecx, word [shareCount] ;Try to allocate resources, this many times
    90                              <1> .keepLooping:
    91 000072DC 488B3D(21070000)    <1>     mov rdi, qword [currentSFT]
    92 000072E3 31C0                <1>     xor eax, eax
    93 000072E5 66C7474D0000        <1>     mov word [rdi + sft.wShareRec], 0   ;Init to no record
    94 000072EB 51                  <1>     push rcx
    95 000072EC E873FFFFFF          <1>     call openShareCallWrapper
    96 000072F1 59                  <1>     pop rcx
    97 000072F2 7310                <1>     jnc .exit   ;If all good, exit! (a record has now been made by SHARE.EXE)
    98 000072F4 E895FFFFFF          <1>     call shareRetryCountdown
    99 000072F9 FFC9                <1>     dec ecx
   100 000072FB 75DF                <1>     jnz .keepLooping
   101 000072FD E827000000          <1>     call shareCriticalError
   102 00007302 73D1                <1>     jnc .reloadCounter  ;If user selected retry, we retry
   103                              <1> .exit:
   104 00007304 59                  <1>     pop rcx
   105                              <1>     return
    13                              <2> %%_ret:
    14 00007305 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   106                              <1> 
   107                              <1> shareLockViolationCriticalError:
   108                              <1> ;This does NOT force rwFlag to 0.
   109 00007306 57                  <1>     push rdi
   110 00007307 C605(5B040000)18    <1>     mov byte [Int44bitfld], critRetryOK | critFailOK
   111 0000730E B821000000          <1>     mov eax, errLokVio
   112 00007313 488B2D(F9060000)    <1>     mov rbp, qword [workingDPB]
   113                              <1>     ;Figure out what goes here once we figure out the full crit error invoke
   114 0000731A E86CE9FFFF          <1>     call fullcriticalErrorInvoke
   115 0000731F 5F                  <1>     pop rdi
   116 00007320 3D01000000          <1>     cmp eax, critRetry
   117                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007325 74DE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   118 00007327 F9                  <1>     stc
   119                              <1>     return
    13                              <2> %%_ret:
    14 00007328 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   120                              <1> 
   121                              <1> shareCriticalError: ;Int 4Fh AX=120Ah
   122                              <1> ;Used for share Read/Write requests
   123 00007329 57                  <1>     push rdi
   124 0000732A C605(EF060000)00    <1>     mov byte [rwFlag], 0    ;Default to read
   125 00007331 C605(5B040000)18    <1>     mov byte [Int44bitfld], critRetryOK | critFailOK
   126 00007338 488B2D(F9060000)    <1>     mov rbp, qword [workingDPB]
   127 0000733F BF01000000          <1>     mov edi, 1
   128                              <1>     ;Figure out what goes here once we figure out the full crit error invoke
   129 00007344 E842E9FFFF          <1>     call fullcriticalErrorInvoke
   130 00007349 5F                  <1>     pop rdi
   131 0000734A 3C01                <1>     cmp al, critRetry   ;If we returned retry, return plainly, else set CF
   132                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000734C 74DA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   133 0000734E F9                  <1>     stc
   134                              <1>     return
    13                              <2> %%_ret:
    14 0000734F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> shareReadWriteViolationError:
   137                              <1> ;Called in Binary Disk Read/Write if getting access to shared resource fails
   138 00007350 3C0F                <1>     cmp al, drvBadDskChnge
   139 00007352 7510                <1>     jne .doReq
   140 00007354 50                  <1>     push rax    ;IF a bad disk change, drop the volume descriptor ptr here
   141 00007355 488B05(D6040000)    <1>     mov rax, qword [primReqHdr + ioReqPkt.desptr]   ;Get volume descriptor ptr
   142 0000735C 488905(03040000)    <1>     mov qword [xInt44RDI], rax
   143 00007363 58                  <1>     pop rax
   144                              <1> .doReq:
   145 00007364 E822E9FFFF          <1>     call fullcriticalErrorInvoke
   146                              <1>     return
    13                              <2> %%_ret:
    14 00007369 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   147                              <1> 
   148                              <1> shareCheckWriteLockViolation:
   149 0000736A C605(EF060000)01    <1>     mov byte [rwFlag], 1    ;Called in write, might not be set so set it
   150 00007371 EB07                <1>     jmp short shareCheckReadLockViolation.common
   151                              <1> shareCheckReadLockViolation:
   152 00007373 C605(EF060000)00    <1>     mov byte [rwFlag], 0    ;Called in read, might not be set so set it
   153                              <1> .common:
   154                              <1> ;Input:
   155                              <1> ;rdi -> SFT for the file we are reading
   156 0000737A 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   157 00007380 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   158 00007382 50                  <1>     push rax
   159 00007383 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   160 00007387 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   161 0000738C 58                  <1>     pop rax
   162 0000738D 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   163                              <1> .fcbQuirk:
   164 0000738F E872FFFFFF          <1>     call shareLockViolationCriticalError
   165                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007394 73D3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   166                              <1> .notInCompatMode:
   167 00007396 31C9                <1>     xor ecx, ecx    ;Number of bytes xferred
   168 00007398 B821000000          <1>     mov eax, errLokVio
   169 0000739D F9                  <1>     stc ;Set the flag for error
   170                              <1>     return
    13                              <2> %%_ret:
    14 0000739E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                                  ;These driver files are to be written by an OEM.
    49                                  %include "./Source/Drivers/drvHdrs.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;          Driver routines          :
     3                              <1> ;-----------------------------------:
     4                              <1> driverChain:
     5                              <1> conHdr:
     6 0000739F [C173000000000000]  <1>     dq auxHdr
     7 000073A7 1380                <1>     dw 08013h
     8 000073A9 [3F75000000000000]  <1>     dq commonStrat
     9 000073B1 [4775000000000000]  <1>     dq conDriver
    10 000073B9 434F4E2020202020    <1>     db "CON     "
    11                              <1> auxHdr:
    12 000073C1 [E373000000000000]  <1>     dq prnHdr
    13 000073C9 0080                <1>     dw 08000h
    14 000073CB [3F75000000000000]  <1>     dq commonStrat
    15 000073D3 [3C78000000000000]  <1>     dq com1Intr
    16 000073DB 4155582020202020    <1>     db "AUX     "
    17                              <1> prnHdr:
    18 000073E3 [0574000000000000]  <1>     dq clkHdr
    19 000073EB 40A0                <1>     dw 0A040h
    20 000073ED [8162000000000000]  <1>     dq nulStrat
    21 000073F5 [8762000000000000]  <1>     dq nulIntr
    22 000073FD 50524E2020202020    <1>     db "PRN     "
    23                              <1> clkHdr:
    24 00007405 [2774000000000000]  <1>     dq msdHdr
    25 0000740D 0880                <1>     dw 08008h
    26 0000740F [3F75000000000000]  <1>     dq commonStrat
    27 00007417 [B276000000000000]  <1>     dq clkDriver
    28 0000741F 434C4F434B242020    <1>     db "CLOCK$  "
    29                              <1> msdHdr:
    30 00007427 [4974000000000000]  <1>     dq com1Hdr
    31 0000742F 4008                <1>     dw 00840h   
    32 00007431 [3F75000000000000]  <1>     dq commonStrat
    33 00007439 [C479000000000000]  <1>     dq msdDriver
    34 00007441 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    35                              <1> com1Hdr:
    36 00007449 [6B74000000000000]  <1>     dq com2Hdr
    37 00007451 0080                <1>     dw 08000h
    38 00007453 [3F75000000000000]  <1>     dq commonStrat
    39 0000745B [3C78000000000000]  <1>     dq com1Intr
    40 00007463 434F4D3120202020    <1>     db "COM1    "
    41                              <1> com2Hdr:
    42 0000746B [8D74000000000000]  <1>     dq com3Hdr
    43 00007473 0080                <1>     dw 08000h
    44 00007475 [3F75000000000000]  <1>     dq commonStrat
    45 0000747D [4578000000000000]  <1>     dq com2Intr
    46 00007485 434F4D3220202020    <1>     db "COM2    "
    47                              <1> com3Hdr:
    48 0000748D [AF74000000000000]  <1>     dq com4Hdr
    49 00007495 0080                <1>     dw 08000h
    50 00007497 [3F75000000000000]  <1>     dq commonStrat
    51 0000749F [4E78000000000000]  <1>     dq com3Intr
    52 000074A7 434F4D3320202020    <1>     db "COM3    "
    53                              <1> com4Hdr:
    54 000074AF [D174000000000000]  <1>     dq lpt1Hdr
    55 000074B7 0080                <1>     dw 08000h
    56 000074B9 [3F75000000000000]  <1>     dq commonStrat
    57 000074C1 [5778000000000000]  <1>     dq com4Intr
    58 000074C9 434F4D3420202020    <1>     db "COM4    "
    59                              <1> lpt1Hdr:
    60 000074D1 [F374000000000000]  <1>     dq lpt2Hdr
    61 000074D9 40A0                <1>     dw 0A040h
    62 000074DB [8162000000000000]  <1>     dq nulStrat
    63 000074E3 [8762000000000000]  <1>     dq nulIntr
    64 000074EB 4C50543120202020    <1>     db "LPT1    "
    65                              <1> lpt2Hdr:
    66 000074F3 [1575000000000000]  <1>     dq lpt3Hdr
    67 000074FB 40A0                <1>     dw 0A040h
    68 000074FD [8162000000000000]  <1>     dq nulStrat
    69 00007505 [8762000000000000]  <1>     dq nulIntr
    70 0000750D 4C50543220202020    <1>     db "LPT2    "
    71                              <1> lpt3Hdr:
    72 00007515 FFFFFFFFFFFFFFFF    <1>     dq -1
    73 0000751D 40A0                <1>     dw 0A040h
    74 0000751F [8162000000000000]  <1>     dq nulStrat
    75 00007527 [8762000000000000]  <1>     dq nulIntr
    76 0000752F 4C50543320202020    <1>     dq "LPT3    "
    77 00007537 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    50                                  %include "./Source/Drivers/charDrv.asm"
     1                              <1> commonStrat:
     2                              <1> ;DOS calls this function with rbx=Ptr to request header
     3 0000753F 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
     4 00007546 C3                  <1>     ret
     5                              <1> conDriver:
     6 00007547 50                  <1>     push rax
     7 00007548 53                  <1>     push rbx
     8 00007549 488B1DE7FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
     9 00007550 B003                <1>     mov al, 03h ;Unknown Command
    10 00007552 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    11 00007556 773D                <1>     ja .conWriteErrorCode ;If yes, error!
    12                              <1> 
    13 00007558 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    14 0000755B 84C0                <1>     test al, al
    15 0000755D 7445                <1>     jz .conInit
    16 0000755F 3C04                <1>     cmp al, 4
    17 00007561 745B                <1>     jz .conRead
    18 00007563 3C05                <1>     cmp al, 5
    19 00007565 0F8499000000        <1>     jz .conNondestructiveRead
    20 0000756B 3C06                <1>     cmp al, 6
    21 0000756D 0F84C2000000        <1>     jz .conInputStatus
    22 00007573 3C07                <1>     cmp al, 7
    23 00007575 0F84CA000000        <1>     jz .conFlushInputBuffers
    24 0000757B 3C08                <1>     cmp al, 8
    25 0000757D 0F84E4000000        <1>     jz .conWrite
    26 00007583 3C09                <1>     cmp al, 9
    27 00007585 0F84DC000000        <1>     jz .conWrite
    28 0000758B 3C0A                <1>     cmp al, 0Ah
    29 0000758D 0F84FD000000        <1>     jz .conOutputStatus
    30 00007593 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    31                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    32 00007595 B480                <1>     mov ah, 80h ;Set error bit
    33 00007597 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    34                              <1> .conExit:
    35 0000759B 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
    36 000075A1 5B                  <1>     pop rbx
    37 000075A2 58                  <1>     pop rax
    38 000075A3 C3                  <1>     ret
    39                              <1> .conInit:    ;Function 0 wrapper
    40 000075A4 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
    41 000075A6 F60510000000FF      <1>     test byte [.conInitDone], -1
    42 000075AD 75EC                <1>     jnz short .conExit
    43 000075AF E8F60B0000          <1>     call conInit
    44 000075B4 C60502000000FF      <1>     mov byte [.conInitDone], -1 ;Set initialised
    45 000075BB EBDE                <1>     jmp short .conExit
    46 000075BD 00                  <1> .conInitDone:   db 0
    47                              <1> 
    48                              <1> .conRead:    ;Function 4
    49 000075BE B005                <1>     mov al, 05h ;Bad request structure length?
    50 000075C0 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    51 000075C3 75D0                <1>     jne .conWriteErrorCode
    52                              <1> 
    53 000075C5 57                  <1>     push rdi
    54 000075C6 51                  <1>     push rcx
    55 000075C7 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    56 000075CB 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    57                              <1> .cre1:
    58 000075CD 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    59 000075D0 741C                <1>     je .cre2
    60 000075D2 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    61 000075D9 751A                <1>     jnz .cre3   ;No, get the buffer value
    62 000075DB 31C0                <1>     xor eax, eax
    63 000075DD CD36                <1>     int 36h
    64                              <1> .cre11:
    65 000075DF AA                  <1>     stosb
    66 000075E0 84C0                <1>     test al, al ;Was the ascii code stored 0?
    67 000075E2 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    68 000075E4 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    69                              <1> .cre12:
    70 000075EA FFC1                <1>     inc ecx ;Inc chars stored in buffer
    71 000075EC EBDF                <1>     jmp short .cre1
    72                              <1> .cre2:
    73 000075EE 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    74 000075F1 59                  <1>     pop rcx
    75 000075F2 5F                  <1>     pop rdi
    76 000075F3 EBA6                <1>     jmp short .conExit
    77                              <1> .cre3:
    78 000075F5 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    79 000075FB C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    80 00007602 EBDB                <1>     jmp short .cre11
    81                              <1> 
    82                              <1> .conNondestructiveRead:  ;Function 5
    83 00007604 B005                <1>     mov al, 05h ;Bad request structure length?
    84 00007606 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
    85 00007609 758A                <1>     jne .conWriteErrorCode
    86 0000760B 803D8E00000000      <1>     cmp byte [.conBuf], 0
    87 00007612 7519                <1>     jnz .cnr2
    88 00007614 B401                <1>     mov ah, 01h     ;Get key if exists
    89 00007616 CD36                <1>     int 36h
    90 00007618 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    91                              <1>     ;Keystroke available
    92                              <1> .cnr0:
    93 0000761A 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
    94 0000761D E979FFFFFF          <1>     jmp .conExit
    95                              <1> .cnr1: ;No keystroke available
    96 00007622 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
    97 00007628 E96EFFFFFF          <1>     jmp .conExit
    98                              <1> .cnr2:
    99 0000762D 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   100 00007633 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   101                              <1> 
   102                              <1> .conInputStatus:         ;Function 6
   103 00007635 B005                <1>     mov al, 05h ;Bad request structure length?
   104 00007637 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   105 0000763A 0F8555FFFFFF        <1>     jne .conWriteErrorCode
   106 00007640 E956FFFFFF          <1>     jmp .conExit ;Exit, device ready
   107                              <1> 
   108                              <1> .conFlushInputBuffers:   ;Function 7
   109 00007645 B005                <1>     mov al, 05h ;Bad request structure length?
   110 00007647 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   111 0000764A 0F8545FFFFFF        <1>     jne .conWriteErrorCode
   112 00007650 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   113                              <1> .cfib0:
   114 00007657 B401                <1>     mov ah, 01      ;Get buffer status
   115 00007659 CD36                <1>     int 36h
   116 0000765B 0F843AFFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   117 00007661 30E4                <1>     xor ah, ah
   118 00007663 CD36                <1>     int 36h ;Read key to flush from buffer
   119 00007665 EBF0                <1>     jmp short .cfib0
   120                              <1> 
   121                              <1> .conWrite:   ;Function 8 and 9
   122 00007667 B005                <1>     mov al, 05h ;Bad request structure length?
   123 00007669 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   124 0000766C 0F8523FFFFFF        <1>     jne .conWriteErrorCode
   125                              <1> 
   126 00007672 56                  <1>     push rsi
   127 00007673 51                  <1>     push rcx
   128 00007674 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   129 00007678 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   130                              <1> .cw1: 
   131 0000767A 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   132 0000767D 7407                <1>     je .cw2
   133 0000767F AC                  <1>     lodsb   ;Get char into al, and inc rsi
   134 00007680 CD49                <1>     int 49h ;Fast print char
   135 00007682 FFC1                <1>     inc ecx
   136 00007684 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   137                              <1> .cw2:
   138 00007686 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   139 00007689 59                  <1>     pop rcx
   140 0000768A 5E                  <1>     pop rsi
   141 0000768B E90BFFFFFF          <1>     jmp .conExit
   142                              <1> .conOutputStatus:   ;Function 0Ah
   143 00007690 B005                <1>     mov al, 05h ;Bad request structure length?
   144 00007692 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   145 00007695 0F85FAFEFFFF        <1>     jne .conWriteErrorCode
   146 0000769B E9FBFEFFFF          <1>     jmp .conExit
   147                              <1> 
   148 000076A0 00                  <1> .conBuf db 0    ;Single byte buffer
   149                              <1> fastOutput:         ;This CON driver supports Int 49h
   150                              <1> ;Called with char to transfer in al
   151 000076A1 50                  <1>     push rax
   152 000076A2 B40E                <1>     mov ah, 0Eh
   153 000076A4 CD30                <1>     int 30h
   154 000076A6 58                  <1>     pop rax
   155 000076A7 48CF                <1>     iretq
   156                              <1> ctrlBreak:
   157                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   158 000076A9 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   159 000076B0 48CF                <1>     iretq
   160                              <1> 
   161                              <1> clkDriver:
   162 000076B2 50                  <1>     push rax
   163 000076B3 53                  <1>     push rbx
   164 000076B4 51                  <1>     push rcx
   165 000076B5 52                  <1>     push rdx
   166 000076B6 56                  <1>     push rsi
   167 000076B7 55                  <1>     push rbp
   168 000076B8 488B1D78FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   169 000076BF B003                <1>     mov al, 03h ;Unknown Command
   170 000076C1 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   171 000076C5 772F                <1>     ja .clkWriteErrorCode ;If yes, error!
   172                              <1> 
   173 000076C7 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   174 000076CA 84C0                <1>     test al, al
   175 000076CC 743B                <1>     jz .clkInit
   176 000076CE 3C04                <1>     cmp al, 04h
   177 000076D0 7451                <1>     jz .clkRead
   178 000076D2 3C06                <1>     cmp al, 06h
   179 000076D4 0F84AE000000        <1>     jz .clkInputStatus
   180 000076DA 3C07                <1>     cmp al, 07h
   181 000076DC 0F84B6000000        <1>     jz .clkFlushInputBuffers
   182 000076E2 3C08                <1>     cmp al, 08h
   183 000076E4 0F84BE000000        <1>     jz .clkWrite
   184 000076EA 3C09                <1>     cmp al, 09h
   185 000076EC 0F84B6000000        <1>     jz .clkWrite
   186 000076F2 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   187                              <1> .clkNotFunctioning:
   188 000076F4 B002                <1>     mov al, 02h ;Device not ready error
   189                              <1> .clkWriteErrorCode:
   190 000076F6 B480                <1>     mov ah, 80h ;Set error bit
   191 000076F8 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   192                              <1> .clkExit:
   193 000076FC 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus ;Merge done bit
   194 00007702 5D                  <1>     pop rbp
   195 00007703 5E                  <1>     pop rsi
   196 00007704 5A                  <1>     pop rdx
   197 00007705 59                  <1>     pop rcx
   198 00007706 5B                  <1>     pop rbx
   199 00007707 58                  <1>     pop rax
   200 00007708 C3                  <1>     ret
   201                              <1> .clkInit:           ;Function 0
   202 00007709 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
   203 0000770B F60510000000FF      <1>     test byte [.clkInitDone], -1
   204 00007712 75E8                <1>     jnz short .clkExit
   205 00007714 E8F20A0000          <1>     call clockInit
   206 00007719 C60502000000FF      <1>     mov byte [.clkInitDone], -1 ;Set initialised
   207 00007720 EBDA                <1>     jmp short .clkExit
   208 00007722 00                  <1> .clkInitDone:   db 0
   209                              <1> 
   210                              <1> .clkRead:           ;Function 4
   211 00007723 B005                <1>     mov al, 05h ;Bad request structure length?
   212 00007725 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   213 00007728 75CC                <1>     jne .clkWriteErrorCode
   214                              <1> 
   215 0000772A 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   216 0000772D 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   217 00007731 668B0502010000      <1>     mov ax, word [.clkDate] ;Get the clock date
   218 00007738 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   219 0000773C 30E4                <1>     xor ah, ah
   220 0000773E CD3A                <1>     int 3Ah         ;Read the system timer
   221 00007740 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   222 00007742 740D                <1>     jz .clkr1       ;Nope, now just time 
   223 00007744 30E4                <1>     xor ah, ah
   224                              <1>     ;This works as al should keep count of the # of days passed since last read
   225 00007746 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   226 0000774A 660105E9000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   227                              <1> .clkr1:
   228 00007751 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   229 00007754 0FB7D2              <1>     movzx edx, dx
   230 00007757 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   231 00007759 89D0                <1>     mov eax, edx
   232 0000775B 31D2                <1>     xor edx, edx
   233 0000775D 89D8                <1>     mov eax, ebx
   234 0000775F B944040000          <1>     mov ecx, 1092   
   235 00007764 F7F1                <1>     div ecx
   236 00007766 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   237 00007769 89D0                <1>     mov eax, edx    ;Get remainder in eax
   238 0000776B 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   239 0000776F 31D2                <1>     xor edx, edx
   240 00007771 B95B000000          <1>     mov ecx, 91 ;5*18.2
   241 00007776 F7F1                <1>     div ecx
   242 00007778 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   243 0000777B 89D0                <1>     mov eax, edx    ;Get remainder in eax
   244                              <1>     ;lea eax, dword [eax + 4*eax]
   245                              <1>     ;add eax, edx    ;Essentially multiply by 6
   246 0000777D 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   247 00007780 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   248 00007783 E974FFFFFF          <1>     jmp .clkExit
   249                              <1> 
   250                              <1> .clkInputStatus:    ;Function 6
   251                              <1> ;Always return ready
   252 00007788 B005                <1>     mov al, 05h ;Bad request structure length?
   253 0000778A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   254 0000778D 0F8563FFFFFF        <1>     jne .clkWriteErrorCode
   255 00007793 E964FFFFFF          <1>     jmp .clkExit
   256                              <1> .clkFlushInputBuffers:  ;Function 7
   257                              <1> ;Always return done immediately
   258 00007798 B005                <1>     mov al, 05h ;Bad request structure length?
   259 0000779A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   260 0000779D 0F8553FFFFFF        <1>     jne .clkWriteErrorCode
   261 000077A3 E954FFFFFF          <1>     jmp .clkExit
   262                              <1> 
   263                              <1> .clkWrite:          ;Functions 8 and 9
   264 000077A8 B005                <1>     mov al, 05h ;Bad request structure length?
   265 000077AA 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   266 000077AD 0F8543FFFFFF        <1>     jne .clkWriteErrorCode
   267                              <1> 
   268 000077B3 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   269 000077B6 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   270 000077BA 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   271 000077BE 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   272                              <1> 
   273 000077C5 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   274 000077C7 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   275 000077CB B105                <1>     mov cl, 5
   276 000077CD F6F1                <1>     div cl          ;Divide al by 5
   277 000077CF 30E4                <1>     xor ah, ah      ;Remove the remainder
   278 000077D1 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   279                              <1> ;Using the decimal part of this formula for the low count
   280                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   281 000077D3 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   282 000077D6 B912000000          <1>     mov ecx, 18
   283 000077DB F7E1                <1>     mul ecx  
   284 000077DD 01C3                <1>     add ebx, eax
   285                              <1> 
   286 000077DF 31D2                <1>     xor edx, edx
   287 000077E1 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   288 000077E5 B944040000          <1>     mov ecx, 1092
   289 000077EA F7E1                <1>     mul ecx
   290 000077EC 01C3                <1>     add ebx, eax
   291 000077EE 89DA                <1>     mov edx, ebx    ;edx now has low count
   292 000077F0 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   293 000077F4 B401                <1>     mov ah, 01h     ;Set the system time
   294 000077F6 CD3A                <1>     int 3Ah
   295                              <1> 
   296 000077F8 4889F3              <1>     mov rbx, rsi
   297 000077FB E9FCFEFFFF          <1>     jmp .clkExit
   298                              <1> 
   299                              <1> .clkBCDtoHex:
   300                              <1> ;Converts a BCD value to a Hex byte
   301                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   302 00007800 51                  <1>     push rcx
   303 00007801 0FB6C0              <1>     movzx eax, al   ;Zero extend
   304 00007804 89C1                <1>     mov ecx, eax    ;Save al in ecx
   305 00007806 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   306 0000780B 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   307 00007811 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   308                              <1> .cbth0:
   309 00007814 050A000000          <1>     add eax, 10
   310 00007819 E2F9                <1>     loop .cbth0
   311 0000781B 59                  <1>     pop rcx
   312 0000781C C3                  <1>     ret
   313                              <1> 
   314                              <1> .clkHexToBCD:
   315                              <1> ;Converts a Hex byte into two BCD digits
   316                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   317 0000781D 51                  <1>     push rcx
   318 0000781E 0FB6C0              <1>     movzx eax, al   ;Zero extend
   319 00007821 31C9                <1>     xor ecx, ecx
   320                              <1> .chtb0:
   321 00007823 3D0A000000          <1>     cmp eax, 10
   322 00007828 7209                <1>     jb .chtb1
   323 0000782A 2D0A000000          <1>     sub eax, 10
   324 0000782F FFC1                <1>     inc ecx
   325 00007831 EBF0                <1>     jmp short .chtb0
   326                              <1> .chtb1:
   327 00007833 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   328 00007836 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   329 00007838 59                  <1>     pop rcx
   330 00007839 C3                  <1>     ret
   331 0000783A 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   332                              <1> 
   333                              <1> ;COM Driver headers and main interrupt strat
   334                              <1> com1Intr:
   335 0000783C C6058001000000      <1>     mov byte [comIntr.comDevice], 0
   336 00007843 EB19                <1>     jmp short comIntr
   337                              <1> com2Intr:
   338 00007845 C6057701000001      <1>     mov byte [comIntr.comDevice], 1
   339 0000784C EB10                <1>     jmp short comIntr
   340                              <1> com3Intr:
   341 0000784E C6056E01000002      <1>     mov byte [comIntr.comDevice], 2
   342 00007855 EB07                <1>     jmp short comIntr
   343                              <1> com4Intr:
   344 00007857 C6056501000003      <1>     mov byte [comIntr.comDevice], 3
   345                              <1> comIntr:
   346 0000785E 50                  <1>     push rax
   347 0000785F 53                  <1>     push rbx
   348 00007860 51                  <1>     push rcx
   349 00007861 52                  <1>     push rdx
   350 00007862 56                  <1>     push rsi
   351 00007863 57                  <1>     push rdi
   352 00007864 488B1DCCFCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   353 0000786B B003                <1>     mov al, 03h ;Unknown Command
   354 0000786D 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   355 00007871 775C                <1>     ja .comWriteErrorCode ;If yes, error!
   356                              <1> 
   357 00007873 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   358 00007876 84C0                <1>     test al, al
   359 00007878 745B                <1>     jz short .comExit
   360 0000787A 3C04                <1>     cmp al, 4   ;Read Character(s)
   361 0000787C 7464                <1>     jz .comRead
   362 0000787E 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   363 00007880 0F849D000000        <1>     jz .comNondestructiveRead   
   364 00007886 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   365 00007888 0F8486000000        <1>     jz .comReadInputStatus
   366 0000788E 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   367 00007890 0F849C000000        <1>     jz .comFlushInputBuffers
   368 00007896 3C08                <1>     cmp al, 8
   369 00007898 0F84BA000000        <1>     jz .comWrite
   370 0000789E 3C09                <1>     cmp al, 9
   371 000078A0 0F84B2000000        <1>     jz .comWrite
   372 000078A6 3C0A                <1>     cmp al, 0Ah
   373 000078A8 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   374 000078AE EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   375                              <1> .comErrorNoCount:
   376 000078B0 B002                <1>     mov al, 02h ;Unknown device
   377 000078B2 EB1B                <1>     jmp short .comWriteErrorCode
   378                              <1> .comReadError:
   379 000078B4 BA0B000000          <1>     mov edx, 0Bh
   380 000078B9 EB05                <1>     jmp short .comError
   381                              <1> .comWriteError:
   382 000078BB BA0A000000          <1>     mov edx, 0Ah
   383                              <1> .comError:
   384 000078C0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   385 000078C3 B902000000          <1>     mov ecx, 02h    ;Unknown device
   386 000078C8 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   387 000078CA 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   388 000078CD 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   389                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   390 000078CF B480                <1>     mov ah, 80h ;Set error bit
   391 000078D1 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   392                              <1> .comExit:
   393 000078D5 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
   394 000078DB 5F                  <1>     pop rdi
   395 000078DC 5E                  <1>     pop rsi
   396 000078DD 5A                  <1>     pop rdx
   397 000078DE 59                  <1>     pop rcx
   398 000078DF 5B                  <1>     pop rbx
   399 000078E0 58                  <1>     pop rax
   400 000078E1 C3                  <1>     ret
   401                              <1> 
   402                              <1> .comRead:
   403 000078E2 B005                <1>     mov al, 05h ;Bad request structure length?
   404 000078E4 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   405 000078E7 75E6                <1>     jne .comWriteErrorCode
   406 000078E9 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   407 000078ED 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   408                              <1> .cr1:
   409 000078EF 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   410 000078F2 741B                <1>     je .cre2
   411                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   412 000078F4 B800020000          <1>     mov eax, 0200h    ;Recieve 
   413 000078F9 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   414 00007900 F8                  <1>     clc
   415 00007901 CD34                <1>     int 34h ;Recieve Char
   416 00007903 72BB                <1>     jc .comError
   417 00007905 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   418 00007908 74EA                <1>     je .cr11
   419 0000790A AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   420 0000790B FFC1                <1>     inc ecx
   421 0000790D EBE0                <1>     jmp short .cr1
   422                              <1> .cre2:
   423 0000790F 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   424 00007912 EBC1                <1>     jmp short .comExit
   425                              <1> 
   426                              <1> .comReadInputStatus:
   427 00007914 B005                <1>     mov al, 05h ;Bad request structure length?
   428 00007916 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   429 00007919 75B4                <1>     jne .comWriteErrorCode
   430 0000791B 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   431 00007921 EBB2                <1>     jmp short .comExit
   432                              <1> 
   433                              <1> .comNondestructiveRead:
   434                              <1> ;The buffer is always empty for now (no keystroke available)
   435 00007923 B005                <1>     mov al, 05h ;Bad request structure length?
   436 00007925 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   437 00007928 75A5                <1>     jne .comWriteErrorCode
   438 0000792A 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   439 00007930 EBA3                <1>     jmp short .comExit
   440                              <1> 
   441                              <1> .comFlushInputBuffers:
   442 00007932 B005                <1>     mov al, 05h ;Bad request structure length?
   443 00007934 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   444 00007937 7596                <1>     jne .comWriteErrorCode
   445                              <1> .cfib0:
   446 00007939 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   447 00007940 B800020000          <1>     mov eax, 0200h    ;Recieve
   448 00007945 F8                  <1>     clc
   449 00007946 CD34                <1>     int 34h
   450 00007948 0F8262FFFFFF        <1>     jc .comErrorNoCount
   451 0000794E 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   452 00007951 75E6                <1>     jne .cfib0
   453 00007953 E97DFFFFFF          <1>     jmp .comExit
   454                              <1> 
   455                              <1> .comWrite:
   456 00007958 B005                <1>     mov al, 05h ;Bad request structure length?
   457 0000795A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   458 0000795D 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   459                              <1> 
   460 00007963 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   461 00007967 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   462                              <1> .cw1: 
   463 00007969 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   464 0000796C 7417                <1>     je .cw2
   465 0000796E AC                  <1>     lodsb   ;Get char into al, and inc rsi
   466 0000796F B401                <1>     mov ah, 01h ;Move function number into ah
   467 00007971 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   468 00007978 F8                  <1>     clc
   469 00007979 CD34                <1>     int 34h ;Transmit char
   470 0000797B 0F823FFFFFFF        <1>     jc .comError
   471 00007981 FFC1                <1>     inc ecx
   472 00007983 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   473                              <1> .cw2:
   474 00007985 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   475 00007988 E948FFFFFF          <1>     jmp .comExit
   476                              <1> 
   477                              <1> .comOutputStatus:
   478                              <1> ;Read MODEM status
   479 0000798D B005                <1>     mov al, 05h ;Bad request structure length?
   480 0000798F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   481 00007992 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   482                              <1> 
   483 00007998 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   484 0000799F B403                <1>     mov ah, 03h     ;Get status
   485 000079A1 F8                  <1>     clc
   486 000079A2 CD34                <1>     int 34h
   487 000079A4 0F8206FFFFFF        <1>     jc .comErrorNoCount
   488 000079AA 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   489 000079AF C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   490 000079B2 F7D0                <1>     not eax      ;Bitwise inversion
   491 000079B4 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   492 000079B9 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   493 000079BE E912FFFFFF          <1>     jmp .comExit
   494 000079C3 00                  <1> .comDevice   db 0
    51                                  %include "./Source/Drivers/diskDrv.asm"
     1                              <1> msdDriver:
     2 000079C4 50                  <1>     push rax
     3 000079C5 53                  <1>     push rbx
     4 000079C6 51                  <1>     push rcx
     5 000079C7 52                  <1>     push rdx
     6 000079C8 56                  <1>     push rsi
     7 000079C9 57                  <1>     push rdi
     8 000079CA 55                  <1>     push rbp
     9 000079CB 4150                <1>     push r8
    10 000079CD 488B1D63FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    11 000079D4 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    12 000079D8 B003                <1>     mov al, drvBadCmd
    13 000079DA 0F87C5000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    14 000079E0 B001                <1>     mov al, drvBadUnit 
    15 000079E2 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    16 000079E6 0F87B9000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    17 000079EC 488D358B040000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    18 000079F3 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    19 000079F7 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    20 000079FA 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    21 000079FE 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    22 00007A02 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    23 00007A04 488D0DA1000000      <1>     lea rcx, .msdTable
    24 00007A0B 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    25 00007A0F 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    26 00007A11 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    27 00007A13 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    28 00007A16 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    29                              <1> .msdDriverExit:
    30 00007A18 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus ;Set done bit
    31 00007A1E 4158                <1>     pop r8
    32 00007A20 5D                  <1>     pop rbp
    33 00007A21 5F                  <1>     pop rdi
    34 00007A22 5E                  <1>     pop rsi
    35 00007A23 5A                  <1>     pop rdx
    36 00007A24 59                  <1>     pop rcx
    37 00007A25 5B                  <1>     pop rbx
    38 00007A26 58                  <1>     pop rax
    39 00007A27 C3                  <1>     ret
    40                              <1> 
    41                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    42 00007A28 4889FB              <1>     mov rbx, rdi
    43 00007A2B 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    44 00007A2E 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    45 00007A30 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    46                              <1> ;Now fall through to general error
    47                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    48 00007A33 488B1DFDFAFFFF      <1>     mov rbx, qword [reqHdrPtr]
    49 00007A3A B401                <1>     mov ah, 01h
    50 00007A3C CD33                <1>     int 33h ;Read status of last operation
    51 00007A3E 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    52 00007A41 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    53 00007A43 7460                <1>     je .msdWriteErrorCode 
    54 00007A45 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    55 00007A47 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    56 00007A4A 7459                <1>     je .msdWriteErrorCode 
    57 00007A4C 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    58 00007A4F 7454                <1>     je .msdWriteErrorCode
    59                              <1> ;Device Not Ready
    60 00007A51 B002                <1>     mov al, 02h  ;Device not ready code
    61 00007A53 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    62 00007A56 744D                <1>     je .msdWriteErrorCode
    63 00007A58 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    64 00007A5C 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    65                              <1> ;Write Protected
    66 00007A60 30C0                <1>     xor al, al
    67 00007A62 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
    68 00007A67 743C                <1>     je .msdWriteErrorCode
    69                              <1> ;CRC Error
    70 00007A69 B004                <1>     mov al, 04h     ;CRC error code
    71 00007A6B 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
    72 00007A70 7433                <1>     je .msdWriteErrorCode
    73 00007A72 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
    74 00007A77 742C                <1>     je .msdWriteErrorCode
    75 00007A79 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
    76 00007A7E 7425                <1>     je .msdWriteErrorCode
    77                              <1> ;Seek Error
    78 00007A80 B006                <1>     mov al, 06h     ;Seek error code
    79 00007A82 80F902              <1>     cmp cl, 02h     ;No Seek Complete
    80 00007A85 741E                <1>     je .msdWriteErrorCode
    81                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
    82                              <1> ;This error should only be called if BPB not recognised for Flash Drives
    83 00007A87 B007                <1>     mov al, 07h
    84 00007A89 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
    85 00007A8C 7417                <1>     je .msdWriteErrorCode
    86                              <1> ;Sector Not Found
    87 00007A8E B008                <1>     mov al, 08h     ;Sector not found code
    88 00007A90 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
    89 00007A93 7410                <1>     je .msdWriteErrorCode
    90                              <1> ;Write faults
    91 00007A95 B00A                <1>     mov al, 0Ah     ;Write fault
    92 00007A97 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
    93 00007A9A 7409                <1>     je .msdWriteErrorCode
    94                              <1> ;Read faults
    95 00007A9C B00B                <1>     mov al, 0Bh     ;Read fault
    96 00007A9E 80F911              <1>     cmp cl, 11h     ;Read error
    97 00007AA1 7402                <1>     je .msdWriteErrorCode
    98                              <1> ;General Errors
    99 00007AA3 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   100                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   101 00007AA5 B480                <1>     mov ah, 80h ;Set error bit
   102 00007AA7 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   103 00007AAB C3                  <1>     ret ;Return to set done bit
   104                              <1> .msdTable:
   105 00007AAC 3200                <1>     dw .msdInitShim - .msdTable     ;Function 0
   106 00007AAE 4700                <1>     dw .msdMedChk - .msdTable       ;Function 1
   107 00007AB0 AD00                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   108 00007AB2 0D01                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   109 00007AB4 1901                <1>     dw .msdRead - .msdTable         ;Function 4
   110 00007AB6 0000                <1>     dw 0                            ;Function 5
   111 00007AB8 0000                <1>     dw 0                            ;Function 6
   112 00007ABA 0000                <1>     dw 0                            ;Function 7
   113 00007ABC 5201                <1>     dw .msdWrite - .msdTable        ;Function 8
   114 00007ABE 8B01                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   115 00007AC0 0000                <1>     dw 0                            ;Function 10
   116 00007AC2 0000                <1>     dw 0                            ;Function 11
   117 00007AC4 D101                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   118 00007AC6 DD01                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   119 00007AC8 F801                <1>     dw .msdDevClose - .msdTable     ;Function 14
   120 00007ACA 1302                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   121 00007ACC 0000                <1>     dw 0                            ;Function 16
   122 00007ACE 0000                <1>     dw 0                            ;Function 17
   123 00007AD0 0000                <1>     dw 0                            ;Function 18
   124 00007AD2 3B02                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   125 00007AD4 0000                <1>     dw 0                            ;Function 20
   126 00007AD6 0000                <1>     dw 0                            ;Function 21
   127 00007AD8 0000                <1>     dw 0                            ;Function 22
   128 00007ADA E202                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   129 00007ADC F702                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   130                              <1> .msdInitShim:
   131 00007ADE 53                  <1>     push rbx
   132 00007ADF 4157                <1>     push r15
   133 00007AE1 E8A3070000          <1>     call msdInit
   134 00007AE6 415F                <1>     pop r15
   135 00007AE8 5B                  <1>     pop rbx
   136 00007AE9 66C705BAFFFFFF0000  <1>     mov word [.msdTable], 0 ;Now prevent init from firing again
   137 00007AF2 C3                  <1>     ret
   138                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   139                              <1> .msdMedChk:          ;Function 1
   140 00007AF3 B005                <1>     mov al, 05h ;Bad request structure length
   141 00007AF5 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   142 00007AF8 75AB                <1>     jne .msdWriteErrorCode
   143                              <1> 
   144 00007AFA E8DC020000          <1>     call .msdCheckDeviceType    ;Check and ensure that media type is "swapped"
   145 00007AFF 753E                <1>     jnz .mmcChange  ;Always change if swapping between same phys volume!
   146 00007B01 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   147 00007B06 488D0D67030000      <1>     lea rcx, .msdBIOSmap
   148 00007B0D 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   149 00007B10 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   150 00007B13 753F                <1>     jnz .mmcNoChange
   151                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   152 00007B15 B416                <1>     mov ah, 16h 
   153 00007B17 CD33                <1>     int 33h
   154 00007B19 0F8214FFFFFF        <1>     jc .msdGenDiskError
   155 00007B1F 80FC80              <1>     cmp ah, 80h
   156 00007B22 740E                <1>     je .mmcNoChangeLine
   157 00007B24 80FC86              <1>     cmp ah, 86h
   158 00007B27 7409                <1>     je .mmcNoChangeLine
   159 00007B29 84E4                <1>     test ah, ah ;No change?
   160 00007B2B 7427                <1>     jz .mmcNoChange
   161 00007B2D F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   162 00007B30 750D                <1>     jnz .mmcChange
   163                              <1> ;If nothing, fall through and test manually, should never happen though
   164                              <1> .mmcNoChangeLine:
   165                              <1> ;Now we test Media Descriptor
   166 00007B32 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   167 00007B37 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   168 00007B3A 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   169 00007B3D 7410                <1>     je .mmcUnsure
   170                              <1> .mmcChange:
   171 00007B3F C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   172 00007B43 488D051E030000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   173 00007B4A 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   174                              <1>     ;Check here if there were any open handles on the device when it was changed
   175 00007B4E C3                  <1>     ret
   176                              <1> .mmcUnsure:
   177 00007B4F C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   178 00007B53 C3                  <1>     ret
   179                              <1> .mmcNoChange:
   180 00007B54 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   181 00007B58 C3                  <1>     ret
   182                              <1> 
   183                              <1> 
   184                              <1> .msdBuildBPB:        ;Function 2
   185 00007B59 B005                <1>     mov al, 05h ;Bad request structure length
   186 00007B5B 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   187 00007B5E 0F8541FFFFFF        <1>     jne .msdWriteErrorCode
   188                              <1> 
   189 00007B64 4889DE              <1>     mov rsi, rbx
   190 00007B67 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   191 00007B6C 488D0D01030000      <1>     lea rcx, .msdBIOSmap
   192 00007B73 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   193 00007B76 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   194 00007B7A 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   195 00007B7C 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   196 00007B7F B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   197 00007B84 CD33                <1>     int 33h
   198 00007B86 0F82A7FEFFFF        <1>     jc .msdGenDiskError
   199                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   200 00007B8C 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   201 00007B90 7418                <1>     je .mbbpb0
   202 00007B92 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   203 00007B96 7412                <1>     je .mbbpb0
   204 00007B98 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   205 00007B9C 740C                <1>     je .mbbpb0
   206 00007B9E 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   207 00007BA2 B007                <1>     mov al, 07h ;Unknown media error code
   208 00007BA4 0F82FBFEFFFF        <1>     jb .msdWriteErrorCode
   209                              <1> .mbbpb0:
   210 00007BAA 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   211 00007BAD 4889EF              <1>     mov rdi, rbp     ;Get pointer to buffer to overwrite
   212 00007BB0 B90F000000          <1>     mov ecx, bpbEx_size/8
   213 00007BB5 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   214 00007BB8 C3                  <1>     ret
   215                              <1> .msdIOCTLRead:       ;Function 3, returns done
   216 00007BB9 B005                <1>     mov al, drvBadDrvReq
   217 00007BBB 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   218 00007BBE 0F85E1FEFFFF        <1>     jne .msdWriteErrorCode
   219 00007BC4 C3                  <1>     ret
   220                              <1> .msdRead:            ;Function 4
   221                              <1> ;Will read one sector at a time.
   222 00007BC5 B005                <1>     mov al, 05h ;Bad request structure length
   223 00007BC7 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   224 00007BCA 0F85D5FEFFFF        <1>     jne .msdWriteErrorCode
   225                              <1> 
   226 00007BD0 E806020000          <1>     call .msdCheckDeviceType
   227                              <1> 
   228 00007BD5 4889DF              <1>     mov rdi, rbx
   229 00007BD8 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   230                              <1> .msdr0:
   231 00007BDA B682                <1>     mov dh, 82h ;LBA Read Sectors
   232 00007BDC E8D7010000          <1>     call .msdBlkIOCommon
   233 00007BE1 0F8241FEFFFF        <1>     jc .msdIOError
   234 00007BE7 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   235 00007BEB 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   236 00007BEF 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   237 00007BF3 FFC6                <1>     inc esi
   238 00007BF5 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   239 00007BF8 75E0                <1>     jne .msdr0
   240 00007BFA 4889FB              <1>     mov rbx, rdi
   241 00007BFD C3                  <1>     ret
   242                              <1> .msdWrite:           ;Function 8
   243                              <1> ;Will write one sector at a time.
   244 00007BFE B005                <1>     mov al, 05h ;Bad request structure length
   245 00007C00 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   246 00007C03 0F859CFEFFFF        <1>     jne .msdWriteErrorCode
   247                              <1> 
   248 00007C09 E8CD010000          <1>     call .msdCheckDeviceType
   249                              <1> 
   250 00007C0E 4889DF              <1>     mov rdi, rbx
   251 00007C11 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   252                              <1> .msdw0:
   253 00007C13 B683                <1>     mov dh, 83h ;LBA Write Sectors
   254 00007C15 E89E010000          <1>     call .msdBlkIOCommon
   255 00007C1A 0F8208FEFFFF        <1>     jc .msdIOError
   256 00007C20 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   257 00007C24 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   258 00007C28 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   259 00007C2C FFC6                <1>     inc esi
   260 00007C2E 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   261 00007C31 75E0                <1>     jne .msdw0
   262 00007C33 4889FB              <1>     mov rbx, rdi
   263 00007C36 C3                  <1>     ret
   264                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   265                              <1> ;Will write one sector at a time and then verify it.
   266 00007C37 B005                <1>     mov al, 05h ;Bad request structure length
   267 00007C39 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   268 00007C3C 0F8563FEFFFF        <1>     jne .msdWriteErrorCode
   269                              <1> 
   270 00007C42 E894010000          <1>     call .msdCheckDeviceType
   271                              <1> 
   272 00007C47 4889DF              <1>     mov rdi, rbx
   273 00007C4A 31F6                <1>     xor esi, esi  ;Set counter to zero
   274                              <1> .msdwv0:
   275 00007C4C B683                <1>     mov dh, 83h ;LBA Write Sectors
   276 00007C4E E865010000          <1>     call .msdBlkIOCommon
   277 00007C53 0F82CFFDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   278 00007C59 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   279 00007C5B E858010000          <1>     call .msdBlkIOCommon
   280 00007C60 0F82C2FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   281 00007C66 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   282 00007C6A 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   283 00007C6E 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   284 00007C72 FFC6                <1>     inc esi
   285 00007C74 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   286 00007C77 75D3                <1>     jne .msdwv0
   287 00007C79 4889FB              <1>     mov rbx, rdi
   288 00007C7C C3                  <1>     ret
   289                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   290 00007C7D B005                <1>     mov al, drvBadDrvReq
   291 00007C7F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   292 00007C82 0F851DFEFFFF        <1>     jne .msdWriteErrorCode
   293                              <1> 
   294 00007C88 C3                  <1>     ret
   295                              <1> .msdDevOpen:         ;Function 13
   296 00007C89 B005                <1>     mov al, drvBadDrvReq
   297 00007C8B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   298 00007C8E 0F8511FEFFFF        <1>     jne .msdWriteErrorCode
   299                              <1> 
   300 00007C94 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   301 00007C99 488D0DD9010000      <1>     lea rcx, .msdHdlCnt
   302 00007CA0 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   303 00007CA3 C3                  <1>     ret
   304                              <1> .msdDevClose:        ;Function 14
   305 00007CA4 B005                <1>     mov al, drvBadDrvReq
   306 00007CA6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   307 00007CA9 0F85F6FDFFFF        <1>     jne .msdWriteErrorCode
   308                              <1> 
   309 00007CAF 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   310 00007CB4 488D0DBE010000      <1>     lea rcx, .msdHdlCnt
   311 00007CBB FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   312 00007CBE C3                  <1>     ret
   313                              <1> .msdRemovableMedia:  ;Function 15
   314 00007CBF B005                <1>     mov al, drvBadDrvReq
   315 00007CC1 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   316 00007CC4 0F85DBFDFFFF        <1>     jne .msdWriteErrorCode
   317                              <1>     
   318 00007CCA 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   319 00007CCF 488D0D9E010000      <1>     lea rcx, .msdBIOSmap
   320 00007CD6 0FB60401            <1>     movzx eax, byte [rcx + rax]    ;Get BIOS number
   321 00007CDA 2580000000          <1>     and eax, 80h ;Isolate bit 7 (the fixed drive bit)
   322 00007CDF C1E002              <1>     shl eax, 2  ;Shift the removable bit (bit 7) to the busy bit (bit 9)
   323 00007CE2 66894303            <1>     mov word [rbx + remMediaReqPkt.status], ax  ;Busy set if fixed!
   324 00007CE6 C3                  <1>     ret
   325                              <1> .msdGenericIOCTL:    ;Function 19
   326 00007CE7 B005                <1>     mov al, drvBadDrvReq
   327 00007CE9 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   328 00007CEC 0F85B3FDFFFF        <1>     jne .msdWriteErrorCode
   329                              <1> ;Need to spend some time to implement proper IOCTL with LBA instead of CHS.
   330                              <1> ;Implement two undoc functions 80h|42h (format) and 80h|60h (get LBA params)
   331 00007CF2 B003                <1>     mov al, drvBadCmd
   332 00007CF4 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]
   333 00007CF8 80FD08              <1>     cmp ch, 08h    ;Disk Drive Major Code?
   334 00007CFB 0F85A4FDFFFF        <1>     jne .msdWriteErrorCode  ;If not, exit bad
   335 00007D01 F6C180              <1>     test cl, 80h    ;Extended function bit set?
   336 00007D04 0F849BFDFFFF        <1>     jz .msdWriteErrorCode
   337 00007D0A 80E17F              <1>     and cl, 7Fh     ;Clear the upper bit
   338 00007D0D 80F941              <1>     cmp cl, 41h     
   339 00007D10 743F                <1>     je .msdGIOCTLWrite
   340 00007D12 80F942              <1>     cmp cl, 42h
   341 00007D15 7451                <1>     je .msdGIOCTLFormat
   342 00007D17 80F960              <1>     cmp cl, 60h
   343 00007D1A 0F8585FDFFFF        <1>     jne .msdWriteErrorCode  ;Error if not this function with bad command
   344                              <1>     ;Get params here
   345 00007D20 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   346 00007D24 488D1549010000      <1>     lea rdx, .msdBIOSmap
   347 00007D2B 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   348 00007D2E B488                <1>     mov ah, 88h ;Read LBA Device Parameters
   349 00007D30 53                  <1>     push rbx
   350 00007D31 CD33                <1>     int 33h
   351                              <1>     ;Returns:
   352                              <1>     ;rbx = Sector size in bytes
   353                              <1>     ;rcx = Last LBA block
   354 00007D33 4889D8              <1>     mov rax, rbx    ;Move sector size into rax
   355 00007D36 5B                  <1>     pop rbx ;Get back the ioctlReqPktPtr
   356 00007D37 0F82F6FCFFFF        <1>     jc .msdGenDiskError
   357                              <1> ;Get LBA Table:
   358                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   359                              <1> ;Offset 1:  Reserved, 7 bytes
   360                              <1> ;Offset 8:  Sector size in bytes (DWORD)
   361                              <1> ;Offset 16: Number Of Sectors on Medium + 1 (QWORD)
   362 00007D3D 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   363 00007D41 48C70218000000      <1>     mov qword [rdx + genioctlGetParamsTable.size], 24
   364 00007D48 48894208            <1>     mov qword [rdx + genioctlGetParamsTable.sectorSize], rax
   365 00007D4C 48894A10            <1>     mov qword [rdx + genioctlGetParamsTable.numSectors], rcx
   366                              <1>     return
    13                              <2> %%_ret:
    14 00007D50 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   367                              <1> 
   368                              <1> .msdGIOCTLWrite:
   369                              <1> ;Write Table:
   370                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   371                              <1> ;Offset 1:  Number of sectors to write (BYTE)
   372                              <1> ;Offset 2:  Reserved, 6 bytes
   373                              <1> ;Offset 8:  Sector to start format at (QWORD)
   374                              <1> ;Offset 16: Pointer to transfer buffer (QWORD)
   375 00007D51 E81B000000          <1>     call .msdGIOCTLFormatWriteSetup
   376 00007D56 488B5F10            <1>     mov rbx, qword [rdi + genioctlLBAwrite.xferBuffer]
   377 00007D5A B483                <1>     mov ah, 83h
   378                              <1> .msdGIOCTLwfCommon:
   379 00007D5C CD33                <1>     int 33h
   380 00007D5E 0F82CFFCFFFF        <1>     jc .msdGenDiskError
   381 00007D64 4889F3              <1>     mov rbx, rsi    ;Geturns rbx to point to the request pointer
   382                              <1>     return 
    13                              <2> %%_ret:
    14 00007D67 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> .msdGIOCTLFormat:
   385                              <1> ;Format Table:
   386                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   387                              <1> ;Offset 1:  Number of sectors to format (BYTE)
   388                              <1> ;Offset 2:  Reserved, 6 bytes
   389                              <1> ;Offset 8:  Sector to start format at (QWORD)
   390 00007D68 E804000000          <1>     call .msdGIOCTLFormatWriteSetup
   391 00007D6D B485                <1>     mov ah, 85h
   392 00007D6F EBEB                <1>     jmp short .msdGIOCTLwfCommon
   393                              <1> 
   394                              <1> .msdGIOCTLFormatWriteSetup:
   395                              <1> ;Sets the following:
   396                              <1> ;al = Number of sectors to write/format
   397                              <1> ;rcx = Sector to begin transfer at
   398                              <1> ;dl = BIOS Drive to do transfer on
   399                              <1> ;rsi = Driver Packet (usually set to rbx)
   400                              <1> ;rdi = Write/Format packet
   401 00007D71 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   402 00007D75 488D15F8000000      <1>     lea rdx, .msdBIOSmap
   403 00007D7C 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   404 00007D7F 4889DE              <1>     mov rsi, rbx
   405 00007D82 488B7E1F            <1>     mov rdi, qword [rsi + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   406 00007D86 8A4701              <1>     mov al, byte [rdi + genioctlLBAformat.numSectors]
   407 00007D89 488B4F08            <1>     mov rcx, qword [rdi + genioctlLBAformat.startSector]
   408                              <1>     return
    13                              <2> %%_ret:
    14 00007D8D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> 
   410                              <1> .msdGetLogicalDev:   ;Function 23
   411 00007D8E B005                <1>     mov al, drvBadDrvReq
   412 00007D90 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   413 00007D93 0F850CFDFFFF        <1>     jne .msdWriteErrorCode
   414                              <1> 
   415 00007D99 8A05D4000000        <1>     mov al, byte [.msdCurDev]
   416 00007D9F 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   417 00007DA2 C3                  <1>     ret
   418                              <1> .msdSetLogicalDev:   ;Function 24
   419 00007DA3 B005                <1>     mov al, drvBadDrvReq
   420 00007DA5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   421 00007DA8 0F85F7FCFFFF        <1>     jne .msdWriteErrorCode
   422                              <1> .msdInternalSetUnitNumber:  ;Called to set the unit number from reqpkt
   423 00007DAE 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   424 00007DB1 8805BC000000        <1>     mov byte [.msdCurDev], al
   425 00007DB7 C3                  <1>     ret
   426                              <1> 
   427                              <1> .msdBlkIOCommon:  ;Does block IO
   428                              <1> ;Called with rdi containing old rbx value and ah with function number
   429                              <1> ;rbp points to bpb
   430                              <1> ;Error handled by caller
   431                              <1> ;Sector count handled by caller
   432                              <1> ;Called with dh = BIOS function number
   433 00007DB8 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   434 00007DBD 488D0DB0000000      <1>     lea rcx, .msdBIOSmap
   435 00007DC4 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req in dl
   436 00007DC7 31C9                <1>     xor ecx, ecx
   437 00007DC9 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   438 00007DCC 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   439 00007DD0 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   440 00007DD4 88F4                <1>     mov ah, dh
   441 00007DD6 B001                <1>     mov al, 01h ;Do one sector at a time 
   442 00007DD8 CD33                <1>     int 33h
   443                              <1>     return
    13                              <2> %%_ret:
    14 00007DDA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> .msdCheckDeviceType:
   446                              <1> ;Checks a new device is being transacted on. Sets the internal var if so.
   447                              <1> ;If additionally in single drive mode, and a different drive (either A or B)
   448                              <1> ; is being transacted on, prompts the user. Else, 
   449                              <1> ;Returns ZF=NZ if media number changed!
   450                              <1> ;!!!WARNING!!! THIS USES THE CONSOLE BIOS!!! VIOLATES HARDWARE ABSTRACTION!!!!
   451 00007DDB 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]    ;Get the now unit number
   452 00007DDF 3A058E000000        <1>     cmp al, byte [.msdCurDev]    ;Compare against the last transacted device
   453                              <1>     rete    ;Exit if equal (ZF=ZE)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007DE5 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   454                              <1> ;If not equal, check new drive is not A or B
   455 00007DE7 3C02                <1>     cmp al, 2
   456 00007DE9 733E                <1>     jae .msdCDTexitOk ;Exit by setting the new unit number, keep ZF=ZE
   457                              <1>     ;Check if we are in single drive mode or not
   458 00007DEB F6057F000000FF      <1>     test byte [.msdSingleFlag], -1
   459 00007DF2 7435                <1>     jz .msdCDTexitOk    ;If not in single drive mode, exit ok
   460 00007DF4 3A0578000000        <1>     cmp al, byte [.msdSingleDrv]    ;Is this single drive the same as the old?
   461 00007DFA 742D                <1>     je .msdCDTexitOk    ;Exit if so
   462 00007DFC 880570000000        <1>     mov byte [.msdSingleDrv], al    ;Else, replace this number
   463 00007E02 0441                <1>     add al, "A" ;Convert to a letter
   464 00007E04 88053A000000        <1>     mov byte [.msdStrikeLetter], al
   465 00007E0A 488D3520000000      <1>     lea rsi, .msdStrike
   466 00007E11 B937000000          <1>     mov ecx, .msdStrikeL
   467                              <1> .msdCDTprintMessage:
   468 00007E16 AC                  <1>     lodsb   ;Get the char in al, inc rsi
   469 00007E17 CD49                <1>     int 49h ;Print char in al
   470 00007E19 FFC9                <1>     dec ecx
   471 00007E1B 75F9                <1>     jnz .msdCDTprintMessage
   472 00007E1D 31C0                <1>     xor eax, eax
   473 00007E1F CD36                <1>     int 36h ;Blocking wait at the keyboard for a keystroke
   474                              <1> .msdCDTexit:
   475 00007E21 E803000000          <1>     call .msdCDTexitOk  ;Set unit number and Set ZF
   476 00007E26 FFC0                <1>     inc eax ;Clear ZF
   477 00007E28 C3                  <1>     ret
   478                              <1> .msdCDTexitOk:
   479 00007E29 E880FFFFFF          <1>     call .msdInternalSetUnitNumber  ;Set unit number internally
   480 00007E2E 31C0                <1>     xor eax, eax
   481 00007E30 C3                  <1>     ret
   482                              <1> 
   483 00007E31 0D0A496E7365727420- <1> .msdStrike db 0Dh,0Ah,"Insert for drive "
   483 00007E3A 666F72206472697665- <1>
   483 00007E43 20                  <1>
   484 00007E44 413A20616E64207374- <1> .msdStrikeLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
   484 00007E4D 72696B650D0A616E79- <1>
   484 00007E56 206B6579207768656E- <1>
   484 00007E5F 2072656164790D0A0A  <1>
   485                              <1> .msdStrikeL equ $ - .msdStrike
   486                              <1> 
   487 00007E68 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   488                              <1> ;LASTDRIVE default is 5
   489                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   490                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   491 00007E71 00                  <1> .msdSingleFlag  db 0    ;Single removable drive only
   492 00007E72 00                  <1> .msdSingleDrv   db 0    ;Keeps track of the last single drive used. 
   493 00007E73 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   494                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   495 00007E74 0001FFFFFF          <1> .msdBIOSmap  db 0, 1, -1, -1, -1 ;Translates DOS drive number to BIOS number
   496 00007E79 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   497 00007E7E 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   497 00007E87 000000000000000000- <1>
   497 00007E90 000000000000000000- <1>
   497 00007E99 000000000000000000- <1>
   497 00007EA2 00000000            <1>
   498 00007EA6 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   498 00007EAF 000000000000000000- <1>
   498 00007EB8 000000000000000000- <1>
   498 00007EC1 000000000000000000- <1>
   498 00007ECA 000000000000000000- <1>
   498 00007ED3 000000000000000000- <1>
   498 00007EDC 000000000000000000- <1>
   498 00007EE5 000000000000000000- <1>
   498 00007EEE 000000000000000000- <1>
   498 00007EF7 000000000000000000- <1>
   498 00007F00 000000000000000000- <1>
   498 00007F09 000000000000000000- <1>
   498 00007F12 000000000000000000- <1>
   498 00007F1B 000000000000000000- <1>
   498 00007F24 000000000000000000- <1>
   498 00007F2D 000000000000000000- <1>
   498 00007F36 000000000000000000- <1>
   498 00007F3F 000000000000000000- <1>
   498 00007F48 000000000000000000- <1>
   498 00007F51 000000000000000000- <1>
   498 00007F5A 000000000000000000- <1>
   498 00007F63 000000000000000000- <1>
   498 00007F6C 000000000000000000- <1>
   498 00007F75 000000000000000000- <1>
   498 00007F7E 000000000000000000- <1>
   498 00007F87 000000000000000000- <1>
   498 00007F90 000000000000000000- <1>
   498 00007F99 000000000000000000- <1>
   498 00007FA2 000000000000000000- <1>
   498 00007FAB 000000000000000000- <1>
   498 00007FB4 000000000000000000- <1>
   498 00007FBD 000000000000000000- <1>
   498 00007FC6 000000000000000000- <1>
   498 00007FCF 000000000000000000- <1>
   498 00007FD8 000000000000000000- <1>
   498 00007FE1 000000000000000000- <1>
   498 00007FEA 000000000000000000- <1>
   498 00007FF3 000000000000000000- <1>
   498 00007FFC 000000000000000000- <1>
   498 00008005 000000000000000000- <1>
   498 0000800E 000000000000000000- <1>
   498 00008017 000000000000000000- <1>
   498 00008020 000000000000000000- <1>
   498 00008029 000000000000000000- <1>
   498 00008032 000000000000000000- <1>
   498 0000803B 000000000000000000- <1>
   498 00008044 000000000000000000- <1>
   498 0000804D 000000000000000000- <1>
   498 00008056 000000000000000000- <1>
   498 0000805F 000000000000000000- <1>
   498 00008068 000000000000000000- <1>
   498 00008071 000000000000000000- <1>
   498 0000807A 000000000000000000- <1>
   498 00008083 000000000000000000- <1>
   498 0000808C 000000000000000000- <1>
   498 00008095 000000000000000000- <1>
   498 0000809E 000000000000000000- <1>
   498 000080A7 000000000000000000- <1>
   498 000080B0 000000000000000000- <1>
   498 000080B9 000000000000000000- <1>
   498 000080C2 000000000000000000- <1>
   498 000080CB 000000000000000000- <1>
   498 000080D4 000000000000000000- <1>
   498 000080DD 000000000000000000- <1>
   498 000080E6 000000000000000000- <1>
   498 000080EF 000000000000000000- <1>
   498 000080F8 000000000000        <1>
   499                              <1> .dfltBPB     defaultBPB ;If no removable devices, A and B point here
   499                              <2> .dfltBPB :
   174 000080FE E9                  <2>  db 0E9h
   175 000080FF 00                  <2>  db 00h
   176 00008100 90                  <2>  db 90h
   177 00008101 534350444F537631    <2>  db 'SCPDOSv1'
   178 00008109 0002                <2>  dw 0200h
   179 0000810B 01                  <2>  db 01h
   180 0000810C 0100                <2>  dw 0001h
   181 0000810E 02                  <2>  db 02h
   182 0000810F E000                <2>  dw 00E0h
   183 00008111 400B                <2>  dw 0B40h
   184 00008113 F0                  <2>  db 0F0h
   185 00008114 0900                <2>  dw 0009h
   186 00008116 1200                <2>  dw 0012h
   187 00008118 0200                <2>  dw 0002h
   188 0000811A 00000000            <2>  dd 0
   189 0000811E 00000000            <2>  dd 0
   190 00008122 00                  <2>  db 00h
   191 00008123 00                  <2>  db 00h
   192 00008124 29                  <2>  db 29h
   193 00008125 00000000            <2>  dd 0
   194 00008129 4E4F204E414D452020- <2>  db 'NO NAME    '
   194 00008132 2020                <2>
   195 00008134 4641543132202020    <2>  db 'FAT12   '
   196 0000813C 000000000000000000- <2>  db 58 dup 0
   196 00008145 000000000000000000- <2>
   196 0000814E 000000000000000000- <2>
   196 00008157 000000000000000000- <2>
   196 00008160 000000000000000000- <2>
   196 00008169 000000000000000000- <2>
   196 00008172 00000000            <2>
   500                              <1> endptr equ $
    52                                  %include "./Source/Drivers/drvInits.asm"
     1                              <1> ejectPoint: ;Address of the ejection code
     2                              <1> 
     3                              <1> installInterrupt:
     4                              <1> ;Writes the interrupt in the right place in the table
     5                              <1>     ;al = Interrupt number
     6                              <1>     ;rdx -> Handler to install
     7 00008176 0F010D23000000      <1>     sidt [myIdt]
     8 0000817D 0FB6C0              <1>     movzx eax, al
     9 00008180 4892                <1>     xchg rdx, rax
    10 00008182 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
    11 00008186 48031515000000      <1>     add rdx, qword [myIdt.base]    
    12 0000818D 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
    13 00008190 48C1E810            <1>     shr rax, 10h    ;Bring next word low
    14 00008194 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
    15 00008198 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
    16 0000819C 894208              <1>     mov dword [rdx + 8], eax
    17 0000819F C3                  <1>     ret
    18                              <1> myIdt:
    19 000081A0 0000                <1> .limit  dw 0
    20 000081A2 0000000000000000    <1> .base   dq 0
    21                              <1> 
    22                              <1> conInit:
    23                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
    24 000081AA 50                  <1>     push rax
    25 000081AB 53                  <1>     push rbx    ;Save the pointer to the request packet on the stack
    26 000081AC 51                  <1>     push rcx
    27 000081AD 52                  <1>     push rdx
    28 000081AE 488D15ECF4FFFF      <1>     lea rdx, qword [fastOutput]
    29 000081B5 B849000000          <1>     mov eax, 49h
    30 000081BA E8B7FFFFFF          <1>     call installInterrupt
    31 000081BF 488D15E3F4FFFF      <1>     lea rdx, qword [ctrlBreak]
    32 000081C6 B83B000000          <1>     mov eax, 3Bh
    33 000081CB E8A6FFFFFF          <1>     call installInterrupt
    34                              <1> .ci0:
    35 000081D0 B401                <1>     mov ah, 01      ;Get buffer status
    36 000081D2 CD36                <1>     int 36h
    37 000081D4 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
    38 000081D6 30E4                <1>     xor ah, ah
    39 000081D8 CD36                <1>     int 36h ;Read key to flush from buffer
    40 000081DA EBF4                <1>     jmp short .ci0
    41                              <1> .ci1:
    42 000081DC B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    43 000081E1 CD30                <1>     int 30h
    44 000081E3 B402                <1>     mov ah, 02h
    45 000081E5 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    46 000081E7 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    47 000081E9 CD30                <1>     int 30h
    48 000081EB B707                <1>     mov bh, 07h     ;Grey/Black attribs
    49 000081ED B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    50 000081F2 CD30                <1>     int 30h
    51 000081F4 5A                  <1>     pop rdx
    52 000081F5 59                  <1>     pop rcx
    53 000081F6 5B                  <1>     pop rbx
    54 000081F7 58                  <1>     pop rax
    55                              <1> devDrvExit:
    56 000081F8 66C7030001          <1>     mov word [rbx], drvDonStatus ;Set the drive done status bit
    57 000081FD 50                  <1>     push rax
    58 000081FE 488D0571FFFFFF      <1>     lea rax, ejectPoint
    59 00008205 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
    60 00008209 58                  <1>     pop rax
    61                              <1>     return
    13                              <2> %%_ret:
    14 0000820A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    62                              <1> 
    63                              <1> clockInit:
    64 0000820B 53                  <1>     push rbx    ;Push the pointer to the request header here
    65                              <1> ;CH - Hours, in BCD
    66                              <1> ;CL - Minutes, in BCD
    67                              <1> ;DH - Seconds, in BCD
    68 0000820C B402                <1>     mov ah, 02  ;Read RTC Time
    69 0000820E CD3A                <1>     int 3Ah
    70 00008210 7271                <1>     jc .clkEnd  ;if error, just exit
    71                              <1>     ;Now set the driver time. Convert From BCD to Decimal
    72 00008212 0FB6C5              <1>     movzx eax, ch   ;Hours
    73 00008215 E84D000000          <1>     call .bcd2Bin
    74 0000821A 88C5                <1>     mov ch, al
    75 0000821C 0FB6C1              <1>     movzx eax, cl     ;Mins
    76 0000821F E843000000          <1>     call .bcd2Bin
    77 00008224 88C1                <1>     mov cl, al
    78 00008226 0FB6C6              <1>     movzx eax, dh   ;Seconds
    79 00008229 E839000000          <1>     call .bcd2Bin
    80 0000822E 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
    81 00008230 89C2                <1>     mov edx, eax
    82 00008232 B42D                <1>     mov ah, 2Dh ;DOS Set Time
    83 00008234 CD41                <1>     int 41h
    84                              <1> ;Now get the date from RTC
    85                              <1> ;CL - Year, in BCD
    86                              <1> ;DH - Month, in BCD
    87                              <1> ;DL - Day, in BCD
    88 00008236 B404                <1>     mov ah, 04  ;Read RTC Date
    89 00008238 CD3A                <1>     int 3Ah
    90 0000823A 7247                <1>     jc .clkEnd
    91                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
    92 0000823C 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
    93 0000823F E823000000          <1>     call .bcd2Bin
    94 00008244 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
    95 00008247 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
    96 0000824D 0FB6C6              <1>     movzx eax, dh   ;Get Months
    97 00008250 E812000000          <1>     call .bcd2Bin
    98 00008255 88C6                <1>     mov dh, al  
    99 00008257 0FB6C2              <1>     movzx eax, dl   ;Get day
   100 0000825A E808000000          <1>     call .bcd2Bin
   101 0000825F 88C2                <1>     mov dl, al
   102 00008261 B42B                <1>     mov ah, 2Bh ;DOS Set Date
   103 00008263 CD41                <1>     int 41h
   104 00008265 EB1C                <1>     jmp short .clkEnd
   105                              <1> .bcd2Bin:
   106                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   107 00008267 51                  <1>     push rcx
   108 00008268 89C1                <1>     mov ecx, eax
   109 0000826A 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   110 0000826F 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   111 00008275 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   112 00008278 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   113                              <1> .b2blp:
   114 0000827B 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   115 0000827D FFC9                <1>     dec ecx
   116 0000827F 75FA                <1>     jnz .b2blp
   117                              <1> .b2bexit:
   118 00008281 59                  <1>     pop rcx
   119 00008282 C3                  <1>     ret
   120                              <1> .clkEnd:
   121 00008283 5B                  <1>     pop rbx ;Get the pointer back
   122 00008284 E96FFFFFFF          <1>     jmp devDrvExit
   123                              <1> 
   124                              <1> msdInit:
   125                              <1>     ;We create a function to deal with BPB parsing etc
   126                              <1>     ;Start with the first primary partition on each hard disk (until max)
   127                              <1>     ;   They dont have to be bootable
   128                              <1>     ;Then go back and look for other partitions partitions. 
   129                              <1>     ;   Add each other primary or logical ptn (until max)
   130                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   131                              <1>     ;Use r8 as device counter
   132                              <1>     ;Use r15 as the pointer to the next free BPB entry
   133                              <1>     ;First set up the two default BPB's if no removable drives
   134 00008289 53                  <1>     push rbx    ;Push the pointer to the driver parameter block
   135                              <1> 
   136 0000828A CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   137 0000828C 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   138 00008290 664489C0            <1>     mov ax, r8w
   139 00008294 8825(02000000)      <1>     mov byte [remDrv], ah    ;Save num of phys int 33h rem drives
   140 0000829A 8805(01000000)      <1>     mov byte [fixDrv], al    ;Save number of physical hard drives
   141 000082A0 C605(00000000)00    <1>     mov byte [physVol], 0    ;Initialise this byte to 0
   142                              <1> 
   143 000082A7 4C8D3DF8FBFFFF      <1>     lea r15, [msdDriver.msdBPBblks]    ;Point to the BPB storage place
   144 000082AE 803D(01000000)00    <1>     cmp byte [fixDrv], 0 ;Do we have any fixed drives?
   145 000082B5 0F847C000000        <1>     jz .remInit ;No? Go to removables
   146 000082BB 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   146 000082C4 00                  <1>
   147 000082C5 B280                <1>     mov dl, 80h ;Start with HDD 0
   148                              <1> .primary:
   149 000082C7 803D(00000000)03    <1>     cmp byte [physVol], 3  ;Are we at maximum devices (A: B: reserved)?
   150 000082CE 7467                <1>     je .remInit
   151 000082D0 31C9                <1>     xor ecx, ecx    ;Sector 0
   152 000082D2 E80B010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   153 000082D7 724F                <1>     jc .primaryEpilog
   154                              <1>     ;Here, check MBR or BPB
   155 000082D9 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   156 000082E2 7544                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   157                              <1>     ;Now check if BPB or MBR
   158 000082E4 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   159 000082E6 8A6302              <1>     mov ah, byte [rbx + 2]
   160 000082E9 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   161 000082ED 7439                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   162                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   163                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   164 000082EF 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   165 000082F6 B104                <1>     mov cl, 4
   166                              <1> .checkPrimary:
   167 000082F8 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   168 000082FB 3C01                <1>     cmp al, 01
   169 000082FD 7421                <1>     je .primaryFound
   170 000082FF 3C04                <1>     cmp al, 04
   171 00008301 741D                <1>     je .primaryFound
   172 00008303 3C06                <1>     cmp al, 06
   173 00008305 7419                <1>     je .primaryFound
   174 00008307 3C0B                <1>     cmp al, 0Bh
   175 00008309 7415                <1>     je .primaryFound
   176 0000830B 3C0C                <1>     cmp al, 0Ch
   177 0000830D 7411                <1>     je .primaryFound
   178 0000830F 3C0E                <1>     cmp al, 0Eh
   179 00008311 740D                <1>     je .primaryFound
   180 00008313 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   181 0000831A FEC9                <1>     dec cl
   182 0000831C 740A                <1>     jz .primaryEpilog
   183 0000831E EBD8                <1>     jmp short .checkPrimary
   184                              <1> .primaryFound:
   185                              <1>     ;Copy the first sector of this partition into memory
   186 00008320 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   187 00008323 E8C8000000          <1>     call .readSectorAndAddDataToTables
   188                              <1> .primaryEpilog:
   189 00008328 FEC2                <1>     inc dl  ;Goto next BIOS drive
   190 0000832A 88D6                <1>     mov dh, dl
   191 0000832C 80E67F              <1>     and dh, 7Fh ;Clear bit 7
   192 0000832F 3A35(01000000)      <1>     cmp dh, byte [fixDrv]    ;Have we gone thru all hard drives?
   193 00008335 7590                <1>     jne .primary    ;Whilst we have fewer, go back
   194                              <1> .extended:
   195                              <1> ;We have gone through all the devices once
   196                              <1>     ;cmp byte [physVol], 3  ;Are we at maximum devices (A: B: reserved)?
   197                              <1>     ;je .remInit ;If yes, get removable devices
   198                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
   199                              <1>     ;xor ecx, ecx    ;Get MBR back
   200                              <1>     ;call .initReadSector
   201                              <1>     ;Now we eventually search MBR for a FAT extended partition
   202                              <1> .remInit:
   203                              <1> ;Start by linking the default BPB's in the pointers table in the event that
   204                              <1> ; for some reason the removable drives stop working or dont exist.
   205 00008337 488D35C0FDFFFF      <1>     lea rsi, qword [msdDriver.dfltBPB]  ;Point to the default BPB
   206 0000833E 488D3D39FBFFFF      <1>     lea rdi, qword [msdDriver.msdBPBTbl]  ;Point to the BPB ptr table
   207 00008345 488937              <1>     mov qword [rdi], rsi    ;Store the pointer in the first two entries
   208 00008348 48897708            <1>     mov qword [rdi + 8], rsi
   209                              <1> ;This forces the hard drives to start at C:
   210 0000834C 4D89C1              <1>     mov r9, r8  ;Save number of next device after fixed drive in r9
   211 0000834F 30D2                <1>     xor dl, dl  ;Start with removable device 0
   212 00008351 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
   213                              <1>     ;rdi points to the space for the subsequent bpb's
   214 00008354 803D(02000000)00    <1>     cmp byte [remDrv], 0  ;Just skip removable init if no rem drives
   215 0000835B 7508                <1>     jnz .removables
   216 0000835D 8005(00000000)02    <1>     add byte [physVol], 2 ;Pretend we have two more drives (A: and B:)
   217 00008364 C3                  <1>     ret ;and return!
   218                              <1> .removables:
   219 00008365 31C9                <1>     xor ecx, ecx    ;Read sector 0
   220 00008367 E884000000          <1>     call .readSectorAndAddDataToTables
   221                              <1> .removableEpilogue:
   222 0000836C FEC2                <1>     inc dl  ;Goto next BIOS device now
   223 0000836E 3A15(02000000)      <1>     cmp dl, byte [remDrv] ;Are we past last rem dev?
   224 00008374 7412                <1>     je .end
   225 00008376 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
   226 0000837D 7503                <1>     jne .re0
   227 0000837F 4588C8              <1>     mov r8b, r9b    ;Return to this drive number
   228                              <1> .re0:
   229 00008382 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
   230 00008386 72DD                <1>     jb .removables
   231                              <1> .end:
   232 00008388 803D(02000000)01    <1>     cmp byte [remDrv], 1  ;Do we have only 1 removable device?
   233 0000838F 741D                <1>     je .singleRemDev
   234                              <1> .msdExit:
   235 00008391 5B                  <1>     pop rbx ;rbx points to the parameter block
   236                              <1>     ;Now we set the .optptr, .endptr and .numunt
   237 00008392 50                  <1>     push rax
   238 00008393 0FB605(00000000)    <1>     movzx eax, byte [physVol]   ;Get the number of detected volumes
   239 0000839A 88430D              <1>     mov byte [rbx + initReqPkt.numunt], al
   240 0000839D 488D05DAFAFFFF      <1>     lea rax, msdDriver.msdBPBTbl    ;Get the BPB table here
   241 000083A4 48894316            <1>     mov qword [rbx + initReqPkt.optptr], rax
   242 000083A8 58                  <1>     pop rax
   243 000083A9 E94AFEFFFF          <1>     jmp devDrvExit  ;Sets .endptr and the status word
   244                              <1> .singleRemDev:
   245                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
   246 000083AE 488D1DBFFAFFFF      <1>     lea rbx, qword [msdDriver.msdBIOSmap]
   247 000083B5 8A15B9FAFFFF        <1>     mov dl, byte [msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
   248 000083BB 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
   249 000083BE 488D1DB9FAFFFF      <1>     lea rbx, qword [msdDriver.msdBPBTbl] 
   250 000083C5 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
   251 000083C8 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
   252 000083CC C6059EFAFFFFFF      <1>     mov byte [msdDriver.msdSingleFlag], -1   ;Set this mode on
   253 000083D3 C60598FAFFFF00      <1>     mov byte [msdDriver.msdSingleDrv], 0 ;Start on drive A
   254 000083DA FE05(00000000)      <1>     inc byte [physVol] ;Gotta register the phantom drive!
   255 000083E0 EBAF                <1>     jmp short .msdExit
   256                              <1> .initReadSector:
   257                              <1> ;Called with sector number in rcx and BIOS device number in dl
   258 000083E2 B482                <1>     mov ah, 82h ;Read
   259 000083E4 B001                <1>     mov al, 1   ;One sector
   260 000083E6 488D1D(03000000)    <1>     lea rbx, qword [msdTempBuffer]  ;Into temporary buffer
   261 000083ED CD33                <1>     int 33h
   262 000083EF C3                  <1>     ret
   263                              <1> 
   264                              <1> .readSectorAndAddDataToTables:
   265                              <1> ;Input:
   266                              <1> ;ecx = Sector number to read
   267                              <1> ;r15 -> bpb array entry for the BPB
   268                              <1> ;r8 = Logical Drive number (offset into arrays)
   269 000083F0 E8EDFFFFFF          <1>     call .initReadSector
   270                              <1>     retc   ;Goto next device
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000083F5 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000083F7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   271                              <1>     ;Now verify this is a BPB
   272 000083F8 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   273 000083FA 8A6302              <1>     mov ah, byte [rbx + 2]
   274 000083FD 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   275                              <1>     retne   ;If not, skip
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00008401 75F4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   276                              <1>     ;Now copy data to internal tables
   277 00008403 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   278 00008406 51                  <1>     push rcx
   279 00008407 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   280 0000840C 4C89FF              <1>     mov rdi, r15
   281 0000840F F348A5              <1>     rep movsq   ;Copy the BPB
   282 00008412 59                  <1>     pop rcx
   283                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   284 00008413 498D98[747E0000]    <1>     lea rbx, qword [msdDriver.msdBIOSmap + r8]
   285                              <1>     ;Add device count to rbx to point to correct entry
   286 0000841A 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   287 0000841C 4A8D1CC5[7E7E0000]  <1>     lea rbx, qword [msdDriver.msdBPBTbl + 8*r8]
   288 00008424 4C893B              <1>     mov qword [rbx], r15
   289 00008427 49FFC0              <1>     inc r8  ;Goto next logical drive
   290 0000842A FE05(00000000)      <1>     inc byte [physVol] ;Increment the number of valid drives we have
   291 00008430 4981C778000000      <1>     add r15, bpbEx_size  ;Goto next table entry
   292                              <1>     return
    13                              <2> %%_ret:
    14 00008437 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    53                                  dosLen  equ ($-$$)  ;Get the length of the Segment
    54                                  Segment drvbss follows=resSeg align=1 nobits
    55                                  %include "./Source/Drivers/drvBuf.asm"
     1                              <1> ;This file is just to denote UNINITIALISED buffers and vars
     2                              <1> ; for the drivers that are to be used during INIT.
     3                              <1> ;They can (and should) be ejected after use
     4                              <1> 
     5 00000000 ??                  <1> physVol db ?
     6 00000001 ??                  <1> fixDrv  db ?
     7 00000002 ??                  <1> remDrv  db ?
     8                              <1> 
     9 00000003 <res 1000h>         <1> msdTempBuffer   db 4096 dup (?) 
    56 00001003 <res Dh>                    alignb 10h  ;Ensure paragraph alignment
    57                                  dosEnd: ;Used to compute the size of resident DOS
    57          ------------------       info: assembly required 1+17+2 passes

