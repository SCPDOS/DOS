     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs and strucs
     5                                  %include "./Source/Include/driverStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     9                              <1> ; device driver related structures.                     ;
    10                              <1> ;-------------------------------------------------------;
    11                              <1> 
    12                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    13                              <1> 
    14 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    15 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    16 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    17 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    18 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    19                              <1> 
    20                              <1> endstruc
    21                              <1> 
    22                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    23                              <1> 
    24                              <1>     .hdrlen resb 1  ;Length of the request header
    25                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    26                              <1>     .cmdcde resb 1  ;Command code
    27                              <1>     .status resw 1  ;Status word
    28                              <1>     .devptr resq 1  ;Device queue pointer field
    29                              <1> 
    30                              <1> %endmacro
    31                              <1> ;Command Code equates
    32                              <1>     drvINIT        equ 0
    33                              <1>     drvMEDCHK      equ 1
    34                              <1>     drvBUILDBPB    equ 2
    35                              <1>     drvIOCTLREAD   equ 3
    36                              <1>     drvREAD        equ 4
    37                              <1>     drvNONDESTREAD equ 5
    38                              <1>     drvINSTATUS    equ 6
    39                              <1>     drvFLUSHINBUF  equ 7
    40                              <1>     drvWRITE       equ 8
    41                              <1>     drvWRITEVERIFY equ 9
    42                              <1>     drvOUTSTATUS   equ 10
    43                              <1>     drvFLUSHOUTBUF equ 11
    44                              <1>     drvIOCTLWRITE  equ 12
    45                              <1>     drvOPEN        equ 13
    46                              <1>     drvCLOSE       equ 14
    47                              <1>     drvREMMEDCHECK equ 15
    48                              <1>     drvOUTTILBUSY  equ 16  ;Not implemented
    49                              <1>     drvIOCTL       equ 19
    50                              <1>     drvGETDRVMAP   equ 23
    51                              <1>     drvSETDRVMAP   equ 24
    52                              <1> 
    53                              <1> ;Drive structures
    54                              <1> struc drvReqHdr
    55                              <1>     drvReqHdrM
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    56                              <1> endstruc
    57                              <1> 
    58                              <1> struc initReqPkt  ;Init Request Packet
    59                              <1> 
    60                              <1>     drvReqHdrM   ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    61 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    62 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    63 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    64 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    65                              <1> 
    66                              <1> endstruc
    67                              <1> 
    68                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    69                              <1> 
    70                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    71 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    72 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    73 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    74                              <1> 
    75                              <1> endstruc
    76                              <1> 
    77                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    78                              <1> 
    79                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    80 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    81 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    82 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    83                              <1> 
    84                              <1> endstruc
    85                              <1> 
    86                              <1> struc ioReqPkt   ;IO Request Packet
    87                              <1> 
    88                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    89 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    90 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    91 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
    92 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
    93 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
    94                              <1> 
    95                              <1> endstruc
    96                              <1> 
    97                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
    98                              <1>     
    99                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   100 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   101                              <1> 
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc statusReqPkt   ;Status Request Packet
   105                              <1> 
   106                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   107                              <1> 
   108                              <1> endstruc
   109                              <1> 
   110                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   111                              <1> 
   112                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   113                              <1>      
   114                              <1> endstruc
   115                              <1> 
   116                              <1> struc openReqPkt ;Open Device Request Packet
   117                              <1> 
   118                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   119                              <1>      
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc closeReqPkt ;Close Device Request Packet
   123                              <1> 
   124                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   125                              <1>      
   126                              <1> endstruc
   127                              <1> 
   128                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   129                              <1> 
   130                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   131                              <1>      
   132                              <1> endstruc
   133                              <1> 
   134                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   135                              <1> 
   136                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   137 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   138 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   139 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   140 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   141 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   142                              <1> 
   143                              <1> endstruc
   144                              <1> 
   145                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   146                              <1>     
   147                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   148                              <1> 
   149                              <1> endstruc
   150                              <1> 
   151                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   152                              <1>     
   153                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   154                              <1> 
   155                              <1> endstruc
     6                                  %include "./Source/Include/fatStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous FAT driver   ;
    10                              <1> ; structures. exFAT will have it's own files at a later ;
    11                              <1> ; stage.                                                ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    17                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    18                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    19                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    20                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    21                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    22                              <1> ;-------------------------------------------------------;
    23                              <1> 
    24                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    25                              <1> 
    26 00000000 ??????              <1>     .jmpBoot    resb 3 
    27 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    28 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    29 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    30 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    31 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    32 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    33 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    34 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    35 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    36 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    37 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    38 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    39 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    40                              <1> 
    41 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    42 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    43 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    44 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    45 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    46 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    47                              <1> 
    48                              <1> endstruc
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    51                              <1> 
    52 00000000 ??????              <1>     .jmpBoot    resb 3
    53 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    54 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    55 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    56 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    57 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    58 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    59 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    60 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    61 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    62 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    63 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    64 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    65 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    66                              <1> 
    67 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    68 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    69 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    70 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    71 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    72 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    73 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    74                              <1> 
    75 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    76 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    77 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    78 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    79 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    80 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mbr
    85 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    86 000001B8 ????????            <1>     .diskID     resb 4
    87 000001BC ????                <1>     .reserved   resb 2
    88 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    89 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    90 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    91 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    92 000001FE ????                <1>     .mbrSig     resb 2
    93                              <1> endstruc
    94                              <1> 
    95                              <1> struc mbrEntry
    96 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    97 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    98 00000004 ??                  <1>     .ptnType    resb 1
    99 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   100 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   101 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc fatDirEntry
   105                              <1> 
   106 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   107 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   108 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   109 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   110 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   111 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   112 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   113 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   114 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   115 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   116 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   117 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   118                              <1> 
   119                              <1> endstruc
   120                              <1> ;Directory attribute equates
   121                              <1>     dirReadOnly     equ 01h
   122                              <1>     dirHidden       equ 02h
   123                              <1>     dirSystem       equ 04h
   124                              <1>     dirVolumeID     equ 08h
   125                              <1>     dirDirectory    equ 10h
   126                              <1>     dirArchive      equ 20h
   127                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   128                              <1> 
   129                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   130                              <1> 
   131 00000000 ??????              <1>     .jmpBoot                resb 3 
   132 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   133 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   134 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   135 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   136 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   137 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   138 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   139 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   140 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   141 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   142 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   143 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   144 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   145 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   146 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   147 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   148 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   149 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc FSInfo
   154                              <1> 
   155 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   156 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   157 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   158 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   159 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   160 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   161 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   162                              <1> 
   163                              <1> endstruc
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)x
    27 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000005 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000007 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000008 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    32 0000000A ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000E ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000012 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000016 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001A ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000022 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000023 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000024 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002C ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000030 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Flags: Bit 15 set = Network drive
    69                              <1> ;        Bit 14 set = Physical drive
    70                              <1> ;        Bit 13 set = JOIN'ed drive
    71                              <1> ;        Bit 12 set = SUBST'ed drive
    72                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    73                              <1> endstruc
    74                              <1> ;CDS equates
    75                              <1>     cdsNetDrive     equ 8000h
    76                              <1>     cdsPhysDrive    equ 4000h
    77                              <1>     cdsJoinDrive    equ 2000h
    78                              <1>     cdsSubstDrive   equ 1000h
    79                              <1>     cdsRedirDrive   equ 0080h
    80                              <1> ;------------------------------------------------------------------------;
    81                              <1> ; The SFT is a way to allow applications to open file handles to files 
    82                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    83                              <1> ; under the first header, and then a second header will be linked to the 
    84                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    85                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    86                              <1> ; using the FCBS= command. Default FCBS=5.
    87                              <1> ;
    88                              <1> ; A file handle describes the file, and the location within the file that
    89                              <1> ; we are reading. The file handle can be manipulated without the file
    90                              <1> ; being in memory, thus allowing the user to access data without needing 
    91                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    92                              <1> ; accessing devices, by treating them as files with their drivers 
    93                              <1> ; responding and translating the manipulations of the file handle itself.
    94                              <1> ; Neither the driver nor the application should see or use the SFT for
    95                              <1> ; the handle, as it is subject to change (and will change when file 
    96                              <1> ; sharing provisions are included). The DOS will make requests to the 
    97                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    98                              <1> ; track of the information in the SFT entry for that handle. 
    99                              <1> ;
   100                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   101                              <1> ; can point to the same file. It all depends on what the applications 
   102                              <1> ; want to do with the File.
   103                              <1> ;
   104                              <1> ; !!!!IMPORTANT!!!!
   105                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   106                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   107                              <1> ;
   108                              <1> ;Each SFT may look like this:
   109                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   110                              <1> ;            |                |
   111                              <1> ;       wNumFiles*sft    wNumFiles*sft
   112                              <1> ;
   113                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   114                              <1> ; System FCBs.
   115                              <1> ;
   116                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   117                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   118                              <1> ;
   119                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   120                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   121                              <1> ;------------------------------------------------------------------------;
   122                              <1> struc sfth   ;System file table header
   123                              <1> ; This is the SFT header.
   124                              <1> ; This structure comes before the start of the first file in the array/table.
   125 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   126 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc sft
   130                              <1> ;This is the file struc itself
   131 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   132 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   133 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   134 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   135 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   136 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   137 00000013 ????                <1>     .wTime       resw 1    ;File Time
   138 00000015 ????                <1>     .wDate       resw 1    ;File Date
   139 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   140 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   141 0000001F ????                <1>     .wRelSect    resw 1    ;Rel sector in the last cluster accessed
   142 00000021 ????????            <1>     .dDirSect    resd 1    ;Rel number of sector containing directory entry 
   143 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   144 00000026 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   145 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   146 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   147                              <1> endstruc
   148                              <1> ;Open Mode equates
   149                              <1> ;Access modes   Bits[2:0]
   150                              <1>     ReadAccess      equ 0h
   151                              <1>     WriteAccess     equ 1h
   152                              <1>     RWAccess        equ 2h
   153                              <1> ;Bit 3 reserved 0
   154                              <1> ;Sharing modes  Bits[6:4]
   155                              <1>     CompatShare     equ 0h
   156                              <1>     denyRWShare     equ 10h
   157                              <1>     denyWriteShare  equ 20h
   158                              <1>     denyReadShare   equ 30h
   159                              <1>     denyNoneShare   equ 40h
   160                              <1> ;Bit 7 reserved 0
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> ;Critical Error handling
   163                              <1>     critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   164                              <1> ;Buffering on writes
   165                              <1>     noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file?
   167                              <1>     FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1>     readOnlyFile    equ 1h
   170                              <1>     hiddenFile      equ 2h
   171                              <1>     systemFile      equ 4h
   172                              <1>     volumeLabel     equ 8h
   173                              <1>     directoryFile   equ 10h ;Directory entry
   174                              <1>     archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1>     charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1>     charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1>     charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1>     charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1>     charDevFastOut  equ 10h ;If set, device supports INT 49h
   182                              <1>     devBinary       equ 20h ;If set, r/w device in Binary mode!!!
   183                              <1>     charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1>     blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   185                              <1>     devCharDev      equ 80h ;If set, it is a char device!
   186                              <1>     charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1>     devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1>     charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1>     blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   190                              <1>     devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   214                              <1>     .dataarea:             ;Points to the start of the data area
   215                              <1> endstruc
   216                              <1> ;Buffer Flag equates
   217                              <1>     dosBuffer   equ 1h  ;DOS data sector in buffer
   218                              <1>     fatBuffer   equ 2h  ;FAT sector in buffer
   219                              <1>     dirBuffer   equ 4h  ;Directory sector in buffer
   220                              <1>     dataBuffer  equ 8h  ;File Data sector in buffer
   221                              <1>     refBuffer   equ 20h ;Data in buffer referenced by an application
   222                              <1>     dirtyBuffer equ 40h ;Data in buffer modified by an application
   223                              <1> ;------------------------------------------------------------------------;
   224                              <1> ; Memory control block for each memory arena
   225                              <1> ;------------------------------------------------------------------------;
   226                              <1> struc mcb
   227 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   228 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP or 0 for free space
   229 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   230 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   231                              <1>     .program:
   232                              <1> endstruc
   233                              <1> ;MCB equates
   234                              <1> mcbOwnerHole    equ -1  ;Owner = -1 => Memory hole
   235                              <1> mcbOwnerFree    equ 0   ;Owner =  0 => Free and available space
   236                              <1> mcbOwnerDOS     equ 8   ;Owner =  8 => Owned by DOS
   237                              <1> ;Owner = Para aligned address => Owning application PSP
   238                              <1> ;...To consider...
   239                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   240                              <1> 
   241                              <1> ;------------------------------------------------------------------------;
   242                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   243                              <1> ; following order, thus allowing for return values to be placed in the 
   244                              <1> ; registers by accessing the caller register stack frame.
   245                              <1> ;------------------------------------------------------------------------;
   246                              <1> struc callerFrame
   247 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   248 00000008 ????????????????    <1>     .rbx    resq 1    
   249 00000010 ????????????????    <1>     .rcx    resq 1
   250 00000018 ????????????????    <1>     .rdx    resq 1
   251 00000020 ????????????????    <1>     .rsi    resq 1
   252 00000028 ????????????????    <1>     .rdi    resq 1
   253 00000030 ????????????????    <1>     .rbp    resq 1
   254 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   255 00000040 ????????????????    <1>     .r9     resq 1
   256                              <1> ;Pushed by Processor when invoked via Interrupt
   257 00000048 ????????????????    <1>     .rip    resq 1
   258 00000050 ????????????????    <1>     .cs     resq 1
   259 00000058 ????????????????    <1>     .flags  resq 1
   260                              <1> endstruc
   261                              <1> 
   262                              <1> %macro pushDOS 0
   263                              <1>     push r9
   264                              <1>     push r8
   265                              <1>     push rbp
   266                              <1>     push rdi
   267                              <1>     push rsi
   268                              <1>     push rdx
   269                              <1>     push rcx
   270                              <1>     push rbx
   271                              <1>     push rax
   272                              <1> %endmacro
   273                              <1> 
   274                              <1> %macro popDOS 0
   275                              <1>     pop rax
   276                              <1>     pop rbx
   277                              <1>     pop rcx
   278                              <1>     pop rdx
   279                              <1>     pop rsi
   280                              <1>     pop rdi
   281                              <1>     pop rbp
   282                              <1>     pop r8
   283                              <1>     pop r9
   284                              <1> %endmacro
   285                              <1> struc fcb
   286                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   287 00000000 ??                  <1>     .driveNum   resb 1
   288 00000001 ????????????????    <1>     .filename   resb 8
   289 00000009 ??????              <1>     .fileext    resb 3
   290 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   291                              <1> ;One block consists of 128 records, of size denoted in the below
   292 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   293 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   294 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   295 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   296 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   297 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   298 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   299 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   300 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   301                              <1>     ;If record size > 64, high byte is ignored.
   302                              <1>     ;Used for random read and write operations to find the right record
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc psp
   306 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   307 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   308 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   309 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   310 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   311 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   312 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   313 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   314 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   315 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   316 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   317 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   318 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   319                              <1> ;Extra handle arrays are grouped into a linked list
   320                              <1> ;The below are in the same place as in DOS
   321 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   322 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   323                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   324 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   325 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   326                              <1> endstruc
   327                              <1> 
   328                              <1> struc clkStruc
   329 00000000 ????                <1>     .dateWord   resw 1
   330 00000002 ??                  <1>     .minutes    resb 1
   331 00000003 ??                  <1>     .hours      resb 1
   332 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   333 00000005 ??                  <1>     .seconds    resb 1
   334                              <1> endstruc
     8                                  Segment .text align=1   ;Init code
     9                                  %include "./Source/Sysinit/sysInit.asm"
    10                              <1> ; We arrive here with the following values in the registers.
    11                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    12                              <1> ; dx  = Int 33h boot device number
    13                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    14                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    15 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    16 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    16 0000000B 909090909090909090- <1>
    16 00000014 909090909090909090- <1>
    16 0000001D 909090909090909090- <1>
    16 00000026 909090909090909090- <1>
    16 0000002F 909090909090909090- <1>
    16 00000038 909090909090909090- <1>
    16 00000041 909090909090909090- <1>
    16 0000004A 909090909090909090- <1>
    16 00000053 909090909090909090- <1>
    16 0000005C 909090909090909090- <1>
    16 00000065 909090909090909090- <1>
    16 0000006E 909090909090909090- <1>
    16 00000077 909090909090909090- <1>
    16 00000080 909090909090909090- <1>
    16 00000089 909090909090909090- <1>
    16 00000092 909090909090909090- <1>
    16 0000009B 909090909090909090- <1>
    16 000000A4 909090909090909090- <1>
    16 000000AD 909090909090909090- <1>
    16 000000B6 909090909090909090- <1>
    16 000000BF 909090909090909090- <1>
    16 000000C8 909090909090909090- <1>
    16 000000D1 909090909090909090- <1>
    16 000000DA 909090909090909090- <1>
    16 000000E3 909090909090909090- <1>
    16 000000EC 909090909090909090- <1>
    16 000000F5 909090909090909090- <1>
    16 000000FE 9090                <1>
    17                              <1> ;First make space for the MCB
    18 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    19 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    20 00000106 0F32                <1>     rdmsr
    21 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    22 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    23 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    24 00000110 4881C710000000      <1>     add rdi, mcb_size   ;Make space for the MCB
    25 00000117 89F8                <1>     mov eax, edi
    26 00000119 4889FA              <1>     mov rdx, rdi
    27 0000011C 48C1EA20            <1>     shr rdx, 20h
    28 00000120 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    29 00000122 5A                  <1>     pop rdx
    30                              <1> ;------------------------------------------------;
    31                              <1> ;              Connect Debugger                  ;
    32                              <1> ;------------------------------------------------;
    33 00000123 B801C50000          <1>     mov eax, 0C501h ;Connect debugger
    34 00000128 CD35                <1>     int 35h
    35                              <1> ;------------------------------------------------;
    36                              <1> ;           Sanitise the data area               ;
    37                              <1> ;------------------------------------------------;
    38 0000012A B9[D3130000]        <1>     mov ecx, dSegLen
    39 0000012F 30C0                <1>     xor al, al
    40 00000131 57                  <1>     push rdi    ;Temp save rdi on the stack
    41 00000132 F3AA                <1>     rep stosb
    42 00000134 5F                  <1>     pop rdi
    43                              <1> 
    44                              <1> ;------------------------------------------------;
    45                              <1> ;          Start saving Basic DOS data           ;
    46                              <1> ;------------------------------------------------;
    47 00000135 64881425[08000000]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    48                              <1> ;Copy DOS to its final resting place
    49 0000013D 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    49 00000142 [00000000]          <1>
    50 00000146 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rdx 
    51 00000149 4881C7[D3130000]    <1>     add rdi, dSegLen ;Move destination past end of data area
    52 00000150 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    53 00000157 B900100000          <1>     mov ecx, 1000h
    54 0000015C F348A5              <1>     rep movsq
    55                              <1> 
    56 0000015F CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    57 00000161 49C1E818            <1>     shr r8, 3*8   ;Isolate byte 3 of r8
    58 00000165 6444880425-         <1>     mov byte fs:[numRemMSD], r8b    ;Save number of physical int 33h devs
    58 0000016A [09000000]          <1>
    59 0000016E 64C60425[99000000]- <1>     mov byte fs:[lastdrvNum], 5     ;Last drive is by default 5
    59 00000176 05                  <1>
    60 00000177 64C60425[0A000000]- <1>     mov byte fs:[numLRemDrives], 0     ;Number of logical drives
    60 0000017F 00                  <1>
    61                              <1> ;------------------------------------------------;
    62                              <1> ;          Kernel inits and adjustments          ;
    63                              <1> ;------------------------------------------------;
    64                              <1> ;Adjust Int 41h address table
    65                              <1> adjInt41h:
    66 00000180 B96A000000          <1>     mov ecx, kernelDispatchTableL/8 ;Number of elements in table
    67 00000185 48BB-               <1>     mov rbx, kernelDispatchTable ;Get EA of table
    67 00000187 [630E000000000000]  <1>
    68 0000018F 488D5C1D00          <1>     lea rbx, qword [rbp+rbx]    ;Point to the start of the relocated table 
    69                              <1> .ai41h:
    70 00000194 48012B              <1>     add qword [rbx], rbp    ;Add base address value to entry in reloc table
    71 00000197 4881C308000000      <1>     add rbx, 8              ;Each entry is size 8
    72 0000019E FFC9                <1>     dec ecx
    73 000001A0 75F2                <1>     jnz .ai41h  ;Keep looping until all entries have been adjusted
    74                              <1> 
    75                              <1> ;Adjust Interrupt Entries Int 40h-49h
    76                              <1> adjInts:
    77 000001A2 B340                <1>     mov bl, 40h
    78 000001A4 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
    79 000001A9 CD35                <1>     int 35h
    80 000001AB B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
    81 000001B0 488D3DB4050000      <1>     lea rdi, intData
    82 000001B7 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
    83                              <1> .ai0:
    84 000001B9 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
    85 000001BE 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
    86 000001C1 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
    87                              <1> .ai1:
    88 000001C4 CD35                <1>     int 35h
    89 000001C6 4881C708000000      <1>     add rdi, 8
    90 000001CD FFC1                <1>     inc ecx
    91 000001CF 81F94A000000        <1>     cmp ecx, 4Ah
    92 000001D5 75E2                <1>     jne .ai0
    93                              <1> 
    94                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
    95                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
    96                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
    97                              <1> 
    98                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
    99 000001D7 488D1528050000      <1>     lea rdx, errorInit ;Get segment start address
   100 000001DE B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   101 000001E3 CD41                <1>     int 41h
   102 000001E5 488D151A050000      <1>     lea rdx, errorInit ;Get segment start address
   103 000001EC B844250000          <1>     mov eax, 2544h
   104 000001F1 CD41                <1>     int 41h
   105                              <1> ;------------------------------------------------;
   106                              <1> ;          Find largest sector size              ;
   107                              <1> ;------------------------------------------------;
   108                              <1> largestSectorSearch:
   109 000001F3 30D2                <1>     xor dl, dl
   110 000001F5 31FF                <1>     xor edi, edi    ;Use this as the counter for the largest sector size
   111                              <1> .lss:
   112 000001F7 B488                <1>     mov ah, 88h
   113 000001F9 CD33                <1>     int 33h
   114 000001FB 39C7                <1>     cmp edi, eax
   115 000001FD 0F42F8              <1>     cmovb edi, eax  ;Only replace ebp if eax is greater
   116 00000200 FEC2                <1>     inc dl
   117 00000202 4438C2              <1>     cmp dl, r8b
   118 00000205 75F0                <1>     jne .lss
   119 00000207 6466893C25-         <1>     mov word fs:[maxBytesSec], di
   119 0000020C [87000000]          <1>
   120                              <1> 
   121                              <1> ;------------------------------------------------;
   122                              <1> ;          Driver Adjustments and inits          ;
   123                              <1> ;------------------------------------------------;
   124                              <1> ;Modify the pointers in nData before putting them in the data area
   125 00000210 48012DA4050000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   126 00000217 48012DA7050000      <1>     add qword [nData + drvHdr.strPtr], rbp
   127 0000021E 48012DA8050000      <1>     add qword [nData + drvHdr.intPtr], rbp
   128                              <1> ;Copy the Null driver to its location in Sysvars
   129 00000225 B922000000          <1>     mov ecx, drvHdr_size
   130 0000022A 488D358A050000      <1>     lea rsi, qword [nData]
   131 00000231 488DBD[A5000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
   132 00000238 F3A4                <1>     rep movsb   
   133                              <1> 
   134                              <1> ;Adjust the addresses in the other driver headers 
   135 0000023A 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   135 0000023C [4614000000000000]  <1>
   136 00000244 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   137 00000249 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   138                              <1> adjDrivers:
   139 0000024D E8A1040000          <1>     call adjustDrvHdr
   140 00000252 E2F9                <1>     loop adjDrivers
   141                              <1> 
   142                              <1> ;Open NUL
   143 00000254 488D9D[0B000000]    <1>     lea rbx, qword [rbp + charReqHdr]
   144 0000025B C6030D              <1>     mov byte [rbx + openReqPkt.hdrlen], openReqPkt_size
   145 0000025E C6430300            <1>     mov byte [rbx + openReqPkt.status], 0
   146 00000262 FF95[AF000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.strPtr]
   147 00000268 FF95[B7000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.intPtr]
   148                              <1> ;Open CON
   149                              <1> conInit:    ;Rather than keeping this resident... do it here
   150                              <1> .ci0:
   151 0000026E B401                <1>     mov ah, 01      ;Get buffer status
   152 00000270 CD36                <1>     int 36h
   153 00000272 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   154 00000274 30E4                <1>     xor ah, ah
   155 00000276 CD36                <1>     int 36h ;Read key to flush from buffer
   156 00000278 EBF4                <1>     jmp short .ci0
   157                              <1> .ci1:
   158 0000027A B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   159 0000027F CD30                <1>     int 30h
   160 00000281 B402                <1>     mov ah, 02h
   161 00000283 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   162 00000285 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   163 00000287 CD30                <1>     int 30h
   164 00000289 B707                <1>     mov bh, 07h     ;Grey/Black attribs
   165 0000028B B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   166 00000290 CD30                <1>     int 30h
   167                              <1> 
   168                              <1>     ;Save ptr to ConHdr in Sysvars
   169 00000292 488D85[46140000]    <1>     lea rax, qword [rbp + conHdr]
   170 00000299 6448890425-         <1>     mov qword fs:[conPtr], rax
   170 0000029E [7F000000]          <1>
   171                              <1> 
   172                              <1>     ;Save ptr to ClkHdr in Sysvars
   173 000002A2 488D85[AC140000]    <1>     lea rax, qword [rbp + clkHdr]
   174 000002A9 6448890425-         <1>     mov qword fs:[clockPtr], rax
   174 000002AE [77000000]          <1>
   175                              <1> 
   176                              <1> ;------------------------------------------------;
   177                              <1> ;         Link DOS to temporary Buffer           ;
   178                              <1> ;------------------------------------------------;
   179                              <1> tempBufferInit:
   180 000002B2 488DBD[9A020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   181 000002B9 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   181 000002BE [89000000]          <1>
   182 000002C2 31C0                <1>     xor eax, eax
   183 000002C4 48FFC8              <1>     dec rax
   184 000002C7 48AB                <1>     stosq   ;.nextBufPTr, end of list
   185 000002C9 AA                  <1>     stosb   ;.driveNumber, Free entry
   186 000002CA 48FFC0              <1>     inc rax
   187 000002CD AA                  <1>     stosb   ;.bufferFlags, No flags
   188                              <1> ;------------------------------------------------;
   189                              <1> ;         Init msd driver, create DPB            ;
   190                              <1> ;------------------------------------------------;
   191                              <1> storageInits:
   192                              <1> ;First save dpb pointer in sysvars
   193 000002CE 488D9D[3B010000]    <1>     lea rbx, qword [rbp + firstDPB]
   194 000002D5 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   194 000002DA [67000000]          <1>
   195                              <1> ;Open Mass Storage
   196 000002DE 488D9D[35000000]    <1>     lea rbx, qword [rbp + diskReqHdr]
   197 000002E5 C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   198 000002E8 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   199 000002EC 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0       ;Zero status word
   200 000002F2 648A0425[0A000000]  <1>     mov al, byte fs:[numLRemDrives]
   201 000002FA 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   202 000002FD FF95[D8140000]      <1>     call qword [rbp + msdHdr + drvHdr.strPtr]
   203 00000303 FF95[E0140000]      <1>     call qword [rbp + msdHdr + drvHdr.intPtr]
   204                              <1>     ;Check if it returned OK first!
   205 00000309 66F743030080        <1>     test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   206 0000030F 0F85F1030000        <1>     jnz errorInit   ;If the bit is set, halt execution
   207 00000315 8A430D              <1>     mov al, byte [rbx + initReqPkt.numunt]
   208 00000318 64880425[0A000000]  <1>     mov byte fs:[numLRemDrives], al
   209 00000320 8885[E8140000]      <1>     mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   210                              <1> 
   211 00000326 488B5316            <1>     mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   212 0000032A 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   213 0000032D 30C9                <1>     xor cl, cl  ;Clear counter
   214 0000032F 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   214 00000334 [67000000]          <1>
   215                              <1> .si0:   
   216 00000338 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   217 0000033B B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   218 0000033D CD41                <1>     int 41h
   219                              <1> ;Add other data to DPB
   220 0000033F 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   221 00000342 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   222 00000345 50                  <1>     push rax
   223 00000346 488D87[CE140000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   224 0000034D 4889451A            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   225 00000351 58                  <1>     pop rax
   226 00000352 FEC1                <1>     inc cl
   227 00000354 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   228 00000356 7416                <1>     je .si1
   229 00000358 50                  <1>     push rax
   230 00000359 488D4534            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   231 0000035D 48894524            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   232 00000361 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   233 00000364 58                  <1>     pop rax
   234 00000365 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   235 0000036C EBCA                <1>     jmp short .si0
   236                              <1> .si1:
   237                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   238 0000036E 48C74524FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   239 00000376 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   240                              <1> ;------------------------------------------------;
   241                              <1> ;                 Temp CDS inits                 ;
   242                              <1> ;------------------------------------------------;
   243                              <1> tempCDS:
   244                              <1> ;Build a temporary CDS for Drive A to use it for booting
   245 00000379 488DBD[3F020000]    <1>     lea rdi, qword [rbp + initCDS]
   246 00000380 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   246 00000385 [91000000]          <1>
   247 00000389 B943000000          <1>     mov ecx, 67 ;Buffer length
   248 0000038E 31C0                <1>     xor eax, eax
   249 00000390 4889FB              <1>     mov rbx, rdi    ;Save CDS pointer in rbx
   250 00000393 F3AA                <1>     rep stosb   ;Zero out the path string
   251 00000395 4889DF              <1>     mov rdi, rbx
   252 00000398 B041                <1>     mov al, "A"
   253 0000039A AA                  <1>     stosb
   254 0000039B B03A                <1>     mov al, ":"
   255 0000039D AA                  <1>     stosb
   256 0000039E B05C                <1>     mov al, "\"
   257 000003A0 AA                  <1>     stosb
   258 000003A1 4889DF              <1>     mov rdi, rbx
   259 000003A4 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   260 000003AA 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   260 000003AF [67000000]          <1>
   261 000003B3 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   262 000003B7 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   263                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   264                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   265                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   266 000003BD 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax    ;eax was zeroed before
   267                              <1> ;------------------------------------------------;
   268                              <1> ;     Set up general PSP areas and DOS vars      ;
   269                              <1> ;------------------------------------------------;
   270                              <1>     ;Additional DOS Vars init
   271 000003C0 31C0                <1>     xor eax, eax
   272 000003C2 64880425[F1000000]  <1>     mov byte fs:[currentDrv], al ;Current Drive = Drive A
   273 000003CA 64880425[F2000000]  <1>     mov byte fs:[breakFlag], al  ;Break off
   274 000003D2 64880425[F3000000]  <1>     mov byte fs:[verifyFlag], al ;Write only
   275 000003DA 64880425[FC000000]  <1>     mov byte fs:[singleDrv], al  ;Only used on single drive systems
   276 000003E2 64880425[C7000000]  <1>     mov byte fs:[critErrFlag], al   ;Not in critical error
   277 000003EA 64880425[C8000000]  <1>     mov byte fs:[inDOS], al      ;Not in DOS
   278 000003F2 64C60425[C9000000]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   278 000003FA FF                  <1>
   279 000003FB 6466890425-         <1>     mov word fs:[lastRetCode], ax   ;Last return code is 0, no error
   279 00000400 [EF000000]          <1>
   280                              <1> 
   281                              <1>     ;SYSVARS PSP Init
   282 00000404 488D1DF5FBFFFF      <1>     lea rbx, qword [tempPSP]
   283 0000040B 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   283 00000410 [D7000000]          <1>
   284 00000414 53                  <1>     push rbx
   285 00000415 4881C380000000      <1>     add rbx, psp.dta
   286 0000041C 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   286 00000421 [CF000000]          <1>
   287 00000425 5B                  <1>     pop rbx
   288 00000426 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   289 0000042B C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   290 00000432 48895B02            <1>     mov qword [rbx + psp.startSeg], rbx ;Save start segment of app
   291 00000436 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   292 0000043A 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   293 0000043E 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   294 00000442 48B800000001020000- <1>     mov rax, 0000000201000000h  ;Store default handles in JFT
   294 0000044B 00                  <1>
   295 0000044C 48AB                <1>     stosq   ;8 bytes
   296 0000044E 31C0                <1>     xor eax, eax
   297 00000450 48AB                <1>     stosq   ;16 bytes
   298 00000452 AB                  <1>     stosd   ;20 bytes
   299 00000453 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   300 0000045B 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   301 0000045F C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   302 00000463 4889DA              <1>     mov rdx, rbx
   303 00000466 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   304 0000046B CD41                <1>     int 41h
   305 0000046D 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   306 00000471 B843350000          <1>     mov eax, 3543h
   307 00000476 CD41                <1>     int 41h
   308 00000478 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   309 0000047C B844350000          <1>     mov eax, 3544h
   310 00000481 CD41                <1>     int 41h
   311 00000483 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   312                              <1> 
   313 00000487 B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   314 0000048C 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   315 00000490 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   316                              <1> ;------------------------------------------------;
   317                              <1> ;          Default File Handle Creation          ;
   318                              <1> ;------------------------------------------------;
   319                              <1> defaultFileHandles:
   320                              <1> ;Fill in the default file table entries
   321 00000492 488D9D[00000000]    <1>     lea rbx, qword [rbp + firstSftHeader]
   322 00000499 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   323 000004A0 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   324 000004A6 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   324 000004AB [6F000000]          <1>
   325                              <1> ;GOTO FIRST FILE 
   326 000004AF 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   327                              <1> ;Write CON
   328 000004B6 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   329 000004BB 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   330 000004C1 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   331 000004C5 C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   332                              <1>     ;No EOF when reading from the device
   333 000004C9 64488B0425-         <1>     mov rax, qword fs:[conPtr]  ;Get pointer to CON device
   333 000004CE [7F000000]          <1>
   334 000004D2 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   335                              <1>     ;Ignore disk related fields and Date/Time of open
   336 000004D6 488B7B26            <1>     mov rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   337 000004DA 488D3598000000      <1>     lea rsi, qword [.dfhCon]
   338                              <1>     ;11 chars in 8.3 name
   339 000004E1 48A5                <1>     movsq   ;8 chars
   340 000004E3 66A5                <1>     movsw   ;10 chars
   341 000004E5 A4                  <1>     movsb   ;11 chars
   342 000004E6 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   342 000004EB [D7000000]          <1>
   343 000004EF 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   344                              <1> ;GOTO NEXT ENTRY
   345 000004F3 4881C33D000000      <1>     add rbx, sft_size   ;Goto next SFT
   346                              <1> ;Write AUX
   347 000004FA 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   348 000004FF 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   349 00000505 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   350 00000509 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   351                              <1>     ;No EOF when reading from the device
   352 0000050D 488B85[68140000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   353 00000514 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   354                              <1>     ;Ignore disk related fields and Date/Time of open
   355 00000518 488B7B26            <1>     mov rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   356 0000051C 488D3561000000      <1>     lea rsi, qword [.dfhAux]
   357                              <1>     ;11 chars in 8.3 name
   358 00000523 48A5                <1>     movsq   ;8 chars
   359 00000525 66A5                <1>     movsw   ;10 chars
   360 00000527 A4                  <1>     movsb   ;11 chars
   361 00000528 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   361 0000052D [D7000000]          <1>
   362 00000531 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   363                              <1> ;GOTO NEXT ENTRY
   364 00000535 4881C33D000000      <1>     add rbx, sft_size   ;Goto next SFT
   365                              <1> ;Write PRN
   366 0000053C 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   367 00000541 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   368 00000547 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   369 0000054B C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   370                              <1>     ;Want EOF when reading from to the device
   371 0000054F 488B85[8A140000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   372 00000556 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   373                              <1>     ;Ignore disk related fields and Date/Time of open
   374 0000055A 488B7B26            <1>     mov rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   375 0000055E 488D352A000000      <1>     lea rsi, qword [.dfhPrn]
   376                              <1>     ;11 chars in 8.3 name
   377 00000565 48A5                <1>     movsq   ;8 chars
   378 00000567 66A5                <1>     movsw   ;10 chars
   379 00000569 A4                  <1>     movsb   ;11 chars
   380 0000056A 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   380 0000056F [D7000000]          <1>
   381 00000573 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   382 00000577 EB21                <1>     jmp short .dfhExit
   383 00000579 434F4E202020202020- <1> .dfhCon db "CON        "
   383 00000582 2020                <1>
   384 00000584 415558202020202020- <1> .dfhAux db "AUX        "
   384 0000058D 2020                <1>
   385 0000058F 50524E202020202020- <1> .dfhPrn db "PRN        "
   385 00000598 2020                <1>
   386                              <1> .dfhExit:
   387                              <1> ;------------------------------------------------;
   388                              <1> ;               Load CONFIG.SYS                  ;
   389                              <1> ;------------------------------------------------;
   390                              <1> ;------------------------------------------------;
   391                              <1> ;              Process CONFIG.SYS                ;
   392                              <1> ;------------------------------------------------;
   393                              <1> ;------------------------------------------------;
   394                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   395                              <1> ;------------------------------------------------;
   396                              <1> ;------------------------------------------------;
   397                              <1> ;                 Create a CDS                   ;
   398                              <1> ;------------------------------------------------;
   399                              <1> ;------------------------------------------------;
   400                              <1> ;                   MCB inits                    ;
   401                              <1> ;------------------------------------------------;
   402                              <1> mcbInit:
   403 0000059A B801E80000          <1>     mov eax, 0E801h ;Get the Extended memory arena sizes
   404 0000059F CD35                <1>     int 35h
   405 000005A1 0FB7C9              <1>     movzx ecx, cx   ;cx = # of bytes between USER_BASE and 16Mb
   406 000005A4 0FB7D2              <1>     movzx edx, dx   ;dx = # 64kb pages between 16Mb and 4Gb
   407 000005A7 C1E10A              <1>     shl ecx, 0Ah   ;Multiply by 1024 to get number of bytes
   408 000005AA C1E210              <1>     shl edx, 10h  ;Multiply by 65536 to get number of bytes
   409                              <1> ;Build the DOS segment's MCB header
   410 000005AD 4889EB              <1>     mov rbx, rbp
   411 000005B0 4881EB10000000      <1>     sub rbx, mcb_size   ;Point rbx to the start of the MCB
   412                              <1> 
   413 000005B7 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save rbx in data area
   413 000005BC [5F000000]          <1>
   414                              <1> 
   415 000005C0 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   416 000005C8 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx ;Use Max lo mem size for now
   417 000005CB C6035A              <1>     mov byte [rbx + mcb.marker], "Z"
   418 000005CE 85D2                <1>     test edx, edx   ;Is edx 0?
   419 000005D0 743C                <1>     jz .mcbExit ;If it is, skip the next bit
   420                              <1> ;We have memory above 16Mb, change alloc to M and decrease size
   421 000005D2 C6034D              <1>     mov byte [rbx + mcb.marker], "M"
   422 000005D5 816B0910000000      <1>     sub dword [rbx + mcb.blockSize], mcb_size   ;Decrease allocation
   423                              <1> 
   424 000005DC 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]    ;Get the decreased size
   425 000005DF 4801CB              <1>     add rbx, rcx    ;Walk chain
   426                              <1> ;Now at the memory hole
   427                              <1>     ;Holes are only declared if hole has usable ram on both sides of it
   428 000005E2 C6034D              <1>     mov byte [rbx + mcb.marker], "M"
   429 000005E5 B800000001          <1>     mov eax, 1000000h   ;16Mb
   430 000005EA 29D8                <1>     sub eax, ebx    ;Sub ptr from 16Mb to get hole size
   431 000005EC 48C74301FFFFFFFF    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole   ;Memory hole
   432 000005F4 894309              <1>     mov dword [rbx + mcb.blockSize], eax
   433                              <1> 
   434 000005F7 4801C3              <1>     add rbx, rax    ;Walk chain
   435 000005FA C6035A              <1>     mov byte [rbx + mcb.marker], "Z"
   436 000005FD 48C7430100000000    <1>     mov qword [rbx + mcb.owner],mcbOwnerFree
   437 00000605 81EA10000000        <1>     sub edx, mcb_size   ;Make space for the mcb
   438 0000060B 895309              <1>     mov dword [rbx + mcb.blockSize], edx
   439                              <1> .mcbExit:
   440                              <1> ;------------------------------------------------;
   441                              <1> ;           Load Command interpreter             ;
   442                              <1> ;------------------------------------------------;
   443                              <1> 
   444 0000060E 488D15FF000000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   445 00000615 B409                <1>     mov ah, 09h
   446 00000617 CD41                <1>     int 41h
   447                              <1> l1:
   448 00000619 B401                <1>     mov ah, 01h  ;Write with echo
   449 0000061B CD41                <1>     int 41h
   450 0000061D 3C00                <1>     cmp al, 0
   451 0000061F 7402                <1>     je l2
   452 00000621 EBF6                <1>     jmp short l1
   453                              <1> l2:
   454 00000623 B407                <1>     mov ah, 07h
   455 00000625 CD41                <1>     int 41h
   456 00000627 3C42                <1>     cmp al, 42h
   457 00000629 75EE                <1>     jne l1
   458                              <1> l3:
   459 0000062B 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   459 00000630 [18010000]0000      <1>
   460 00000636 488D9D[0B000000]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   461 0000063D 488D85[18010000]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   462 00000644 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   463 00000647 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   464 0000064B 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   465 00000651 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   466 00000655 C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   467 0000065C FF95[B6140000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   468 00000662 FF95[BE140000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr]
   469                              <1> 
   470 00000668 B403                <1>     mov ah, 03h
   471 0000066A 30FF                <1>     xor bh, bh
   472 0000066C CD30                <1>     int 30h
   473 0000066E 30D2                <1>     xor dl, dl  ;0 column
   474 00000670 B402                <1>     mov ah, 02h
   475 00000672 CD30                <1>     int 30h
   476                              <1> 
   477 00000674 488D9D[18010000]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   478 0000067B 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   479 0000067F E832000000          <1>     call .clkHexToBCD
   480 00000684 B40E                <1>     mov ah, 0Eh
   481 00000686 B03A                <1>     mov al, ":"
   482 00000688 CD30                <1>     int 30h
   483 0000068A 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   484 0000068E E823000000          <1>     call .clkHexToBCD
   485 00000693 B40E                <1>     mov ah, 0Eh
   486 00000695 B03A                <1>     mov al, ":"
   487 00000697 CD30                <1>     int 30h
   488 00000699 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   489 0000069D E814000000          <1>     call .clkHexToBCD
   490 000006A2 B40E                <1>     mov ah, 0Eh
   491 000006A4 B02E                <1>     mov al, "."
   492 000006A6 CD30                <1>     int 30h
   493 000006A8 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   494 000006AC E805000000          <1>     call .clkHexToBCD
   495 000006B1 E963FFFFFF          <1>     jmp l1
   496                              <1> .clkHexToBCD:
   497                              <1> ;Converts a Hex byte into two BCD digits
   498                              <1> ;Takes input in each nybble of al
   499 000006B6 53                  <1>     push rbx
   500 000006B7 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   500 000006C0 00                  <1>
   501 000006C1 31D2                <1>     xor edx, edx
   502 000006C3 48F7F3              <1>     div rbx
   503 000006C6 80C230              <1>     add dl, '0'
   504 000006C9 80FA39              <1>     cmp dl, '9'
   505 000006CC 7603                <1>     jbe .chtb0
   506 000006CE 80C207              <1>     add dl, 'A'-'0'-10
   507                              <1> .chtb0:
   508 000006D1 88D1                <1>     mov cl, dl    ;Save remainder byte
   509 000006D3 31D2                <1>     xor edx, edx
   510 000006D5 48F7F3              <1>     div rbx
   511 000006D8 80C230              <1>     add dl, '0'
   512 000006DB 80FA39              <1>     cmp dl, '9'
   513 000006DE 7603                <1>     jbe .chtb1
   514 000006E0 80C207              <1>     add dl, 'A'-'0'-10
   515                              <1> .chtb1:
   516 000006E3 88D5                <1>     mov ch, dl    ;Save remainder byte
   517                              <1> 
   518 000006E5 88E8                <1>     mov al, ch    ;Get most sig digit into al
   519 000006E7 B40E                <1>     mov ah, 0Eh
   520 000006E9 CD30                <1>     int 30h
   521 000006EB 88C8                <1>     mov al, cl    ;Get least sig digit into al
   522 000006ED B40E                <1>     mov ah, 0Eh
   523 000006EF CD30                <1>     int 30h
   524 000006F1 5B                  <1>     pop rbx
   525 000006F2 C3                  <1>     ret
   526                              <1> ;--------------------------------
   527                              <1> ;       PROCS FOR SYSINIT       :
   528                              <1> ;--------------------------------
   529                              <1> adjustDrvHdr:
   530                              <1> ;Input: rsi = Effective address of driver in DOS segment
   531                              <1> ;       rbp = Ptr to the start of the DOS segment
   532                              <1> ;Output: rsi = EA of next header in DOS segment
   533 000006F3 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   534 000006F6 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   535 000006FA 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   536 000006FE 4881C622000000      <1>     add rsi, drvHdr_size
   537 00000705 C3                  <1>     ret
   538                              <1> errorInit:
   539                              <1> ;If a critical error occurs during sysinit, fail through here
   540                              <1> ;Int 42h, 43h and 44h point here during sysinit
   541 00000706 488D151F000000      <1>     lea rdx, hltmsg
   542 0000070D B409                <1>     mov ah, 09h
   543 0000070F CD41                <1>     int 41h
   544                              <1>     ;cli ;Clear interrupts
   545                              <1>     ;mov al, -1
   546                              <1>     ;mov dx, 0A1h    ;PIC2 data
   547                              <1>     ;out dx, al      ;Mask all lines
   548                              <1>     ;mov dx, 21h     ;PIC1 data
   549                              <1>     ;out dx, al      ;Mask all lines
   550                              <1> .ei0:
   551 00000711 F4                  <1>     hlt
   552 00000712 EBFD                <1>     jmp short .ei0
   553                              <1> 
   554                              <1> ;--------------------------------
   555                              <1> ;       DATA FOR SYSINIT        :
   556                              <1> ;--------------------------------
   557 00000714 0A0D5374617274696E- <1> strtmsg db 0Ah,0Dh,"Starting SCP/DOS...",0Ah,0Dh,"$"
   557 0000071D 67205343502F444F53- <1>
   557 00000726 2E2E2E0A0D24        <1>
   558 0000072C 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0Ah,0Dh,"$"
   558 00000735 7469616C6973696E67- <1>
   558 0000073E 20534350444F532E53- <1>
   558 00000747 59532E205379737465- <1>
   558 00000750 6D2068616C74696E67- <1>
   558 00000759 2E2E2E0A0D24        <1>
   559 0000075F 434F4E00            <1> conName db "CON",0
   560 00000763 41555800            <1> auxName db "AUX",0
   561 00000767 50524E00            <1> prnName db "PRN",0
   562                              <1> intData:
   563 0000076B [4306000000000000]  <1>     dq terminateProcess ;Int 40h
   564 00000773 [FB06000000000000]  <1>     dq functionDispatch ;Int 41h
   565 0000077B [0607000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   566 00000783 [4506000000000000]  <1>     dq ctrlCHandler     ;Int 43h, ignore any CTRL+C during init
   567 0000078B [0607000000000000]  <1>     dq errorInit        ;Int 44h, If critical error in sysinit, halt system
   568 00000793 [5506000000000000]  <1>     dq absDiskRead      ;Int 45h
   569 0000079B [4706000000000000]  <1>     dq absDiskWrite     ;Int 46h
   570 000007A3 [ED06000000000000]  <1>     dq terminateResident    ;Int 47h
   571 000007AB [ED06000000000000]  <1>     dq inDosHandler     ;Int 48h
   572 000007B3 [EF06000000000000]  <1>     dq fastOutput       ;Int 49h
   573                              <1> nData:
   574 000007BB [4614000000000000]  <1>     dq conHdr
   575 000007C3 0480                <1>     dw 08004h
   576 000007C5 [EE15000000000000]  <1>     dq nulStrat
   577 000007CD [F415000000000000]  <1>     dq nulIntr
   578 000007D5 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
    10                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    11                                  %include "./Source/BSS/dosSeg.asm"
    12                              <1> ;This file contains the main DOS data segment
    13                              <1> 
    14 00000000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    15 00000008 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    16 00000009 ??                  <1>     numRemMSD   resb 1    ;Number of physical removable MSDs in system x
    17 0000000A ??                  <1>     numLRemDrives  resb 1 ;Number of logical removable drives in system x
    18                              <1>     ;if numRemMSD = 1 then numLRemDrives = 2 and we have a single drive system
    19 0000000B <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    20 00000035 <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    21                              <1>     ;The device driver header with space for the largest possible packet
    22 0000005F ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    23                              <1> sysVarsPtr:
    24 00000067 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    25 0000006F ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    26 00000077 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    27                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    28 0000007F ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    29                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    30 00000087 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    31 00000089 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    32 00000091 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    33 00000099 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    34 0000009A ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    35 000000A2 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    36 000000A4 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    37 000000A5 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    38                              <1> 
    39                              <1> ;Start of Swappable Data Area, this bit can remain static
    40 000000C7 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    41 000000C8 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    42 000000C9 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    43 000000CA ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    44 000000CB ????                <1>     errorExt    resw 1  ;Extended Error Code
    45 000000CD ??                  <1>     errorAction resb 1  ;Suggested action for error  
    46 000000CE ??                  <1>     errorClass  resb 1  ;Error Class
    47                              <1> 
    48 000000CF ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    49 000000D7 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
    50 000000DF ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error (could make this di)
    51 000000E7 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    52 000000EF ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch x
    53 000000F1 ??                  <1>     currentDrv  resb 1  ;Default drive x
    54 000000F2 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
    55 000000F3 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    56                              <1> ;SDA, needs to be replaced between processes
    57 000000F4 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    58                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    59 000000FC ??                  <1>     singleDrv   resb 1  ;Set if last drive accessed was drive B x
    60                              <1> ;This is done to allow for DOS to give the user a change to swap devices
    61                              <1> 
    62 000000FD ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    63 000000FE ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    64 000000FF ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    65 00000100 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    66 00000108 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    67 00000110 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    68                              <1> ;Time stuff
    69 00000118 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    70 0000011E ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    71 0000011F ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    72 00000120 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    73 00000121 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    74 00000123 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    75                              <1> ;String Stuff
    76 00000124 <res FFh>           <1>     asciiBuffer resb 255    ;Have a 255 char buffer for the ascii terminal
    77                              <1> ;Stacks
    78 00000223 <res 528h>          <1>     critStack   resq 165
    79 0000074B ????????????????    <1>     critStakTop resq 1
    80 00000753 <res 638h>          <1>     IOStack     resq 199
    81 00000D8B ????????????????    <1>     IOStakTop   resq 1
    82 00000D93 <res 638h>          <1>     DiskStack   resq 199
    83 000013CB ????????????????    <1>     DiskStakTop resq 1
    84                              <1>     dSegLen     equ     $
    12                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    13                                  %include "./Source/Data/staticData.asm"
    14                              <1> 
    15                              <1> ;-----------------------------------:
    16                              <1> ;           Static Data             :
    17                              <1> ;-----------------------------------:
    18 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    19 00000001 01                  <1> dosMinor    db 01h      ;.01
    20 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    20 0000000B 535953              <1>
    21 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    21 00000017 535953              <1>
    14                                  %include "./Source/Kernel/bufferFunctions.asm"
    15                              <1> ;This file contains miscellaneous disk buffer related functions that
    16                              <1> ; dont fit anywhere else
    17                              <1> 
    18                              <1> readBuffer:
    19                              <1> ;
    20                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
    21                              <1> ;TO CALL!
    22                              <1> ;
    23                              <1> ;This function will return a pointer to the desired data sector OR 
    24                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
    25                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
    26                              <1> ;Entry: rax = Sector to read
    27                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data) 
    28                              <1> ;       rsi = DPB of transacting drive
    29                              <1> ;Exit:  CF = NC : All ok!
    30                              <1> ;       rbx = Pointer to buffer header with valid data in buffer.
    31                              <1> ;       All other registers as before
    32                              <1> ;       CF = CY: Something went wrong, return error code or INT 44h
    33                              <1> ;       ch = 0 -> Data Not Flushed To Disk
    34                              <1> ;       ch = 1 -> Data Not Read From Disk
    35                              <1> ;       rbx = Pointer to buffer containing sector without valid data in buffer ;            (either unflushed or unread)
    36 0000001A 52                  <1>     push rdx
    37 0000001B 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
    38 0000001D E848010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
    39 00000022 4881FBFFFFFFFF      <1>     cmp rbx, -1
    40 00000029 7403                <1>     je .rbReadNewSector
    41                              <1> .rbExit:
    42 0000002B F8                  <1>     clc
    43                              <1> .rbExitNoFlag:
    44 0000002C 5A                  <1>     pop rdx
    45 0000002D C3                  <1>     ret
    46                              <1> .rbReadNewSector:
    47 0000002E E8C6000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rbx
    48 00000033 4889DD              <1>     mov rbp, rbx
    49 00000036 30ED                <1>     xor ch, ch
    50 00000038 E869000000          <1>     call flushBuffer
    51 0000003D 72ED                <1>     jc .rbExitNoFlag    ;Exit in error
    52                              <1> ;rbp points to bufferHdr that has been appropriately linked to the head of chain
    53 0000003F 51                  <1>     push rcx
    54 00000040 885508              <1>     mov byte [rbp + bufferHdr.driveNumber], dl
    55 00000043 884D09              <1>     mov byte [rbp + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
    56 00000046 4889450A            <1>     mov qword [rbp + bufferHdr.bufferLBA], rax
    57 0000004A 80F902              <1>     cmp cl, fatBuffer
    58 0000004D B201                <1>     mov dl, 1   ;Default values if not fat buffer
    59 0000004F B900000000          <1>     mov ecx, 0  ;Ditto!
    60 00000054 7506                <1>     jne .rbNonFATbuffer
    61 00000056 8A5607              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
    62 00000059 8B4E12              <1>     mov ecx, dword [rsi + dpb.dFATlength]
    63                              <1> .rbNonFATbuffer:
    64 0000005C 885512              <1>     mov byte [rbp + bufferHdr.bufFATcopy], dl
    65 0000005F 894D13              <1>     mov dword [rbp + bufferHdr.bufFATsize], ecx
    66 00000062 48897517            <1>     mov qword [rbp + bufferHdr.driveDPBPtr], rsi
    67 00000066 C6451F00            <1>     mov byte [rbp + bufferHdr.reserved], 0
    68 0000006A 59                  <1>     pop rcx
    69 0000006B FEC5                <1>     inc ch  ;If an error occurs, have the signature in ch
    70 0000006D E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
    71 00000072 EBB8                <1>     jmp short .rbExitNoFlag
    72                              <1> 
    73                              <1> readSectorBuffer:
    74                              <1> ;Reads a sector into a built sector buffer
    75                              <1> ;Entry: rbp = Pointer to buffer header
    76                              <1> ;Exit:  CF=NC : Success
    77                              <1> ;       CF=CY : Fail, terminate the request
    78                              <1> ;       rbx pointing to buffer header
    79                              <1> ;First make request to device driver
    80 00000074 50                  <1>     push rax
    81 00000075 53                  <1>     push rbx
    82 00000076 51                  <1>     push rcx
    83 00000077 52                  <1>     push rdx
    84 00000078 56                  <1>     push rsi
    85                              <1> .rsRequest0:
    86 00000079 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
    87                              <1> .rsRequest1:
    88 0000007E 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
    89 00000081 B901000000          <1>     mov ecx, 1  ;One sector to copy
    90 00000086 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
    91 0000008A 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
    92 0000008E E8C2050000          <1>     call absDiskRead    ;Call INT 45h
    93 00000093 7207                <1>     jc .rsFail
    94                              <1> .rsExit:
    95 00000095 F8                  <1>     clc
    96                              <1> .rsExitBad:
    97 00000096 5E                  <1>     pop rsi
    98 00000097 5A                  <1>     pop rdx
    99 00000098 59                  <1>     pop rcx
   100 00000099 5B                  <1>     pop rbx
   101 0000009A 58                  <1>     pop rax
   102 0000009B C3                  <1>     ret
   103                              <1> .rsFail:
   104                              <1> ;Enter here only if the request failed
   105 0000009C FFCE                <1>     dec esi
   106 0000009E 75DE                <1>     jnz .rsRequest1 ;Try the request again!
   107                              <1> ;Request failed thrice, critical error call
   108 000000A0 F9                  <1>     stc
   109 000000A1 E9F0FFFFFF          <1>     jmp .rsExitBad  ;Abort
   110                              <1> 
   111                              <1> flushBuffer:
   112                              <1> ;Flushes the data in a sector buffer to disk!
   113                              <1> ;Entry: rbp = Pointer to buffer header for this buffer
   114                              <1> ;Exit:  CF=NC : Success
   115                              <1> ;       CF=CY : Fail, terminate the request
   116                              <1> ;First make request to device driver
   117 000000A6 50                  <1>     push rax
   118 000000A7 53                  <1>     push rbx
   119 000000A8 51                  <1>     push rcx
   120 000000A9 52                  <1>     push rdx
   121 000000AA 56                  <1>     push rsi
   122 000000AB F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   123 000000AF 7433                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   124                              <1> .fbRequest0:
   125 000000B1 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   126                              <1> .fbRequest1:
   127 000000B6 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   128 000000B9 B901000000          <1>     mov ecx, 1  ;One sector to copy
   129 000000BE 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
   130 000000C2 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
   131 000000C6 E87C050000          <1>     call absDiskWrite    ;Call INT 46h
   132 000000CB 7222                <1>     jc .fbFail
   133                              <1> ;Now check if the buffer was a FAT, to write additional copies
   134 000000CD F6450902            <1>     test byte [rbp + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   135 000000D1 7411                <1>     jz .fbFreeExit  ;If not, exit
   136 000000D3 FE4D12              <1>     dec byte [rbp + bufferHdr.bufFATcopy]
   137 000000D6 740C                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   138 000000D8 8B4513              <1>     mov eax, dword [rbp + bufferHdr.bufFATsize]
   139 000000DB 4801450A            <1>     add qword [rbp + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   140 000000DF E9CDFFFFFF          <1>     jmp .fbRequest0 ;Make another request
   141                              <1> .fbFreeExit:
   142                              <1> ;Free the buffer if it was flushed successfully
   143 000000E4 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1
   144 000000E8 F8                  <1>     clc
   145                              <1> .fbExitBad:
   146 000000E9 5E                  <1>     pop rsi
   147 000000EA 5A                  <1>     pop rdx
   148 000000EB 59                  <1>     pop rcx
   149 000000EC 5B                  <1>     pop rbx
   150 000000ED 58                  <1>     pop rax
   151 000000EE C3                  <1>     ret
   152                              <1> .fbFail:
   153                              <1> ;Enter here only if the request failed
   154 000000EF FFCE                <1>     dec esi
   155 000000F1 75C3                <1>     jnz .fbRequest1 ;Try the request again!
   156                              <1> ;Request failed thrice, critical error call
   157 000000F3 F9                  <1>     stc
   158 000000F4 E9F0FFFFFF          <1>     jmp .fbExitBad  ;Abort
   159                              <1>     
   160                              <1> findLRUBuffer: 
   161                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   162                              <1> ; in rbx
   163                              <1> ;Input: Nothing
   164                              <1> ;Output: rbx = Pointer to the buffer hdr to use
   165 000000F9 52                  <1>     push rdx
   166 000000FA 488B1D(89000000)    <1>     mov rbx, qword [bufHeadPtr]
   167 00000101 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   168 00000105 7436                <1>     je .flbExit 
   169 00000107 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   170 0000010E 742D                <1>     je .flbExit
   171                              <1> .flbWalk:
   172 00000110 4889DA              <1>     mov rdx, rbx    ;Save a ptr to the previous buffer header
   173 00000113 488B1A              <1>     mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   174 00000116 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1
   175 0000011A 7423                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   176 0000011C 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   177 00000123 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   178 00000125 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   179                              <1> .flbHeadLink:
   180 0000012C 488B15(89000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   181 00000133 48891D(89000000)    <1>     mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
   182 0000013A 488913              <1>     mov qword [rbx + bufferHdr.nextBufPtr], rdx
   183                              <1> .flbExit:
   184 0000013D 5A                  <1>     pop rdx
   185 0000013E C3                  <1>     ret
   186                              <1> .flbFreeLink:
   187 0000013F 51                  <1>     push rcx
   188 00000140 488B0B              <1>     mov rcx, qword [rbx + bufferHdr.nextBufPtr]
   189 00000143 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rbx
   190 00000146 59                  <1>     pop rcx
   191 00000147 EBE3                <1>     jmp short .flbHeadLink
   192                              <1> 
   193                              <1> findDirtyBufferForDrive:
   194                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   195                              <1> ;Input: dl = Drive number
   196                              <1> ;Output: rbx = Pointer to dirty buffer for drive letter if exists or -1 if not
   197 00000149 488B1D(89000000)    <1>     mov rbx, qword [bufHeadPtr]
   198                              <1> .fdbfdCheckBuffer:
   199 00000150 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   200 00000153 7507                <1>     jne .fdbfdGotoNextBuffer
   201 00000155 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   202 00000159 7401                <1>     jz .fdbfdGotoNextBuffer ;Bit not set, goto next buffer
   203                              <1> .fdbfdExit:
   204 0000015B C3                  <1>     ret
   205                              <1> .fdbfdGotoNextBuffer:
   206 0000015C 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   207 0000015F 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   208 00000166 74F3                <1>     je .fdbfdExit
   209 00000168 EBE6                <1>     jmp short .fdbfdCheckBuffer
   210                              <1> 
   211                              <1> findSectorInBuffer:
   212                              <1> ;Finds the Buffer for a sector
   213                              <1> ;If the sector is not in a buffer, returns with a -1
   214                              <1> ;Input: rax = Sector number
   215                              <1> ;        dl = Drive number
   216                              <1> ;Output: rbx = Buffer hdr pointer or -1
   217 0000016A 488B1D(89000000)    <1>     mov rbx, qword [bufHeadPtr]
   218                              <1> .fsiCheckBuffer:
   219 00000171 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   220 00000174 7507                <1>     jne .fsiGotoNextBuffer
   221 00000176 4839430A            <1>     cmp qword [rbx + bufferHdr.bufferLBA], rax
   222 0000017A 7501                <1>     jne .fsiGotoNextBuffer
   223                              <1> .fsiExit:
   224 0000017C C3                  <1>     ret
   225                              <1> .fsiGotoNextBuffer:
   226 0000017D 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   227 00000180 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   228 00000187 74F3                <1>     je .fsiExit
   229 00000189 EBE6                <1>     jmp short .fsiCheckBuffer
    15                                  %include "./Source/Kernel/fat.asm"
    16                              <1> ;-----------------------------------:
    17                              <1> ;       File System routines        :
    18                              <1> ;-----------------------------------:
    19                              <1> name2Clust:
    20                              <1> ;Converts a file name to a first cluster number
    21                              <1> ;Converts the whole path subdirectory by subdirectory
    22                              <1> ;On entry: rbx = ptr to ASCIIZ string of file path, maxlen = 67 + 1 (for the 0)
    23                              <1> ;On return: ebx = First cluster number for the file
    24                              <1> ;   On error: CF=CY, ax = Error code
    25                              <1> 
    26                              <1> ;First ascertain path is valid path and get drive letter
    27 0000018B 56                  <1>     push rsi
    28 0000018C 57                  <1>     push rdi
    29 0000018D 51                  <1>     push rcx
    30 0000018E 4889DF              <1>     mov rdi, rbx
    31 00000191 4889DE              <1>     mov rsi, rbx
    32 00000194 807F013A            <1>     cmp byte [rdi + 1], ":" ;Check it is a colon for full path
    33 00000198 750B                <1>     jne .cdsPath    ;Use CDS for current dir
    34                              <1> .getSubDir:
    35 0000019A B05C                <1>     mov al, "\"
    36 0000019C AE                  <1>     scasb   ;inc 
    37 0000019D 7400                <1>     je .psfnd   ;Path separator found
    38                              <1> 
    39                              <1> .psfnd:
    40 0000019F 48FFCF              <1>     dec rdi
    41 000001A2 4889FE              <1>     mov rsi, rdi
    42                              <1> 
    43                              <1> .cdsPath:
    44 000001A5 59                  <1>     pop rcx
    45 000001A6 5F                  <1>     pop rdi
    46 000001A7 5E                  <1>     pop rsi
    47 000001A8 C3                  <1>     ret
    48                              <1> 
    49                              <1> clust2FATEntry:
    50                              <1> ;Converts a cluster number to a FAT entry
    51                              <1> ;Entry:  rsi points to the DPB for the transacting device
    52                              <1> ;        eax = Cluster number to look for
    53                              <1> ;Exit:   eax = Sector on disk of FAT 
    54                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    55                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    56 000001A9 53                  <1>     push rbx
    57 000001AA 8B5E0E              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
    58 000001AD 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    59 000001B3 731E                <1>     jae .fat32
    60 000001B5 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    61 000001BB 7209                <1>     jb .fat12
    62                              <1> ;FAT16
    63 000001BD D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    64 000001BF 6801000000          <1>     push qword 1
    65 000001C4 EB15                <1>     jmp short .common
    66                              <1> .fat12:
    67 000001C6 89C1                <1>     mov ecx, eax    ;ecx = eax
    68 000001C8 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    69 000001CA 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    70 000001CC 6800000000          <1>     push qword 0
    71 000001D1 EB08                <1>     jmp short .common
    72                              <1> .fat32:
    73 000001D3 6802000000          <1>     push qword 2
    74 000001D8 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    75                              <1> .common:
    76                              <1> ;eax has the FAToffset
    77 000001DB 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
    78 000001DE BA01000000          <1>     mov edx, 1
    79 000001E3 D3E2                <1>     shl edx, cl    ;Turn edx to number of bytes per sector
    80 000001E5 89D1                <1>     mov ecx, edx
    81 000001E7 31D2                <1>     xor edx, edx    ;edx = 0
    82 000001E9 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    83 000001EB 0FB75E05            <1>     movzx ebx, word [rsi + dpb.wFAToffset]   ;Add the offset to the first FAT
    84 000001EF 01D8                <1>     add eax, ebx
    85 000001F1 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    86 000001F2 5B                  <1>     pop rbx
    87 000001F3 C3                  <1>     ret
    88                              <1> getStartSectorOfCluster:
    89                              <1> ;Input: eax = Cluster Number
    90                              <1> ;       r9 = dpb pointer
    91                              <1> ;Output: eax = Starting Sector number for cluster
    92                              <1> ;Gives the data sector we are at in the current cluster
    93                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    94 000001F4 51                  <1>     push rcx
    95 000001F5 2D02000000          <1>     sub eax, 2
    96 000001FA 418A4904            <1>     mov cl, byte [r9 + dpb.bSectorsPerClusterShift]
    97 000001FE D3E0                <1>     shl eax, cl
    98 00000200 4103410A            <1>     add eax, [r9 + dpb.dClusterHeapOffset]
    99                              <1>     ;eax now has the first sector of the current cluster
   100 00000204 59                  <1>     pop rcx
   101 00000205 C3                  <1>     ret
   102                              <1> getNextSectorOfFile:
   103                              <1> ;This function will read the next sector for a file into a buffer.
   104                              <1> ;If the next sector to be read lives in the next cluster, it will update
   105                              <1> ; the file handle of the file being read/written to the new cluster
   106                              <1> ;
   107                              <1> ;Input: r8 = sft pointer
   108                              <1> ;       r9 = dpb pointer
   109                              <1> ;Output:
   110                              <1> ;       rbx = Pointer to buffer data
   111                              <1> ;       CF = NC, buffer OK to read
   112                              <1> ;       CF = CY, buffer not ok, something went wrong
   113                              <1> ;           ZF = ZE(1), Data not flushed to disk
   114                              <1> ;           ZF = NZ(0), Data no read from disk
   115                              <1>     ;Read next sector. If at last sector in cluster, walk map, get
   116                              <1>     ; next cluster and read first sector 
   117 00000206 50                  <1>     push rax
   118 00000207 51                  <1>     push rcx
   119 00000208 52                  <1>     push rdx
   120 00000209 56                  <1>     push rsi
   121 0000020A 57                  <1>     push rdi
   122                              <1>     ;Check if we need to go to next cluster
   123 0000020B 66418B401F          <1>     mov ax, word [r8 + sft.wRelSect]    ;Upper byte is ALWAYS 0
   124 00000210 413A4103            <1>     cmp al, byte [r9 + dpb.bMaxSectorInCluster]
   125 00000214 745F                <1>     je .gotoNextCluster
   126                              <1>     ;Goto next sector
   127 00000216 6641FF401F          <1>     inc word [r8 + sft.wRelSect]    ;Goto next sector in cluster
   128                              <1> .getSector:
   129 0000021B 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr] ;Get cluster number
   130 0000021F E8D0FFFFFF          <1>     call getStartSectorOfCluster
   131 00000224 410FB7581F          <1>     movzx ebx, word [r8 + sft.wRelSect] ;Get relative sector number
   132                              <1>     ;eax now has the correct sector in the cluster
   133 00000229 01D8                <1>     add eax, ebx    
   134                              <1>     ;Read the sector into a buffer
   135                              <1>     ;The sector read here is either DATA or DOS
   136 0000022B 498D7026            <1>     lea rsi, qword [r8 + sft.sFileName]
   137 0000022F 488D3DCCFDFFFF      <1>     lea rdi, dosBIOSName    ;Check if the file being read is the BIOS
   138 00000236 B90B000000          <1>     mov ecx, 11             ;File name length
   139 0000023B F3A6                <1>     repe cmpsb
   140 0000023D 742D                <1>     je .OSFile
   141 0000023F 498D7026            <1>     lea rsi, qword [r8 + sft.sFileName]
   142 00000243 488D3DC4FDFFFF      <1>     lea rdi, dosKernName
   143 0000024A B90B000000          <1>     mov ecx, 11             ;File name length
   144 0000024F F3A6                <1>     repe cmpsb
   145 00000251 7419                <1>     je .OSFile
   146                              <1>     ;Not an OS file, dataBuffer
   147 00000253 B108                <1>     mov cl, dataBuffer
   148                              <1> .getSectorRead:
   149 00000255 4C89CE              <1>     mov rsi, r9
   150 00000258 E8BDFDFFFF          <1>     call readBuffer
   151 0000025D 7211                <1>     jc .getSectorFailed
   152 0000025F 4881C320000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   153                              <1> .getSectorExit:
   154 00000266 5F                  <1>     pop rdi
   155 00000267 5E                  <1>     pop rsi
   156 00000268 5A                  <1>     pop rdx
   157 00000269 59                  <1>     pop rcx
   158 0000026A 58                  <1>     pop rax
   159 0000026B C3                  <1>     ret
   160                              <1> .OSFile:
   161 0000026C B101                <1>     mov cl, dosBuffer
   162 0000026E EBE5                <1>     jmp short .getSectorRead
   163                              <1> .getSectorFailed:
   164                              <1>     ;CF = CY => Something went wrong!
   165                              <1>     ;   Set the Zero flag for data not flushed to disk
   166                              <1>     ;   Clear Zero flag for data not read from disk
   167 00000270 84ED                <1>     test ch, ch ;This sets the zero flag correctly, but mangles CF
   168 00000272 F9                  <1>     stc ;Set the carry flag!
   169 00000273 EBF1                <1>     jmp short .getSectorExit
   170                              <1> 
   171                              <1> .gotoNextCluster:
   172                              <1>     ;Read FAT, find next cluster in cluster map, update SFT entries
   173 00000275 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr] ;Get the current cluster
   174 00000279 4C89CE              <1>     mov rsi, r9 ;Move dpb pointer into rsi, eax has cluster number
   175 0000027C E828FFFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   176 00000281 410FB75905          <1>     movzx ebx, word [r9 + dpb.wFAToffset]
   177 00000286 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   178 00000288 B102                <1>     mov cl, fatBuffer
   179 0000028A E88BFDFFFF          <1>     call readBuffer ;Buffer Header in ebx
   180 0000028F 72DF                <1>     jc .getSectorFailed
   181                              <1>     ;Check if FAT 12, 16, 32
   182 00000291 4885FF              <1>     test rdi, rdi
   183 00000294 7429                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   184 00000296 48F7C701000000      <1>     test rdi, 1
   185 0000029D 7407                <1>     jz .goToNextClusterCommonFat32
   186                              <1>     ;Here we handle FAT16
   187 0000029F 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   188 000002A4 EB09                <1>     jmp short .goToNextClusterCommon
   189                              <1> .goToNextClusterCommonFat32:
   190 000002A6 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   191 000002AA 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   192                              <1> .goToNextClusterCommon:
   193 000002AF 41894039            <1>     mov dword [r8 + sft.dAbsClusr], eax ;Save new cluster number
   194 000002B3 6641C7401F0000      <1>     mov word [r8 + sft.wRelSect], 0 ;First sector in next cluster
   195 000002BA E95CFFFFFF          <1>     jmp .getSector
   196                              <1> .gotoNextClusterFat12:
   197                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   198                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   199 000002BF 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   200 000002C2 FFC0                <1>     inc eax ;Get next sector
   201 000002C4 E851FDFFFF          <1>     call readBuffer ;Buffer Header in ebx
   202 000002C9 72A5                <1>     jc .getSectorFailed
   203                              <1>     ;rdi has first buffer header, rbx has second buffer header
   204                              <1>     ;rdx has offset into first header for entry
   205 000002CB 41F7403901000000    <1>     test dword [r8 + sft.dAbsClusr], 1  ;Check if cluster is odd
   206 000002D3 7429                <1>     jz .gotoNextClusterFat12Even
   207                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   208 000002D5 B801000000          <1>     mov eax, 1
   209 000002DA 418A4802            <1>     mov cl, byte [r8 + dpb.bBytesPerSectorShift]
   210 000002DE D3E0                <1>     shl eax, cl
   211 000002E0 29D0                <1>     sub eax, edx
   212 000002E2 FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   213 000002E4 750E                <1>     jnz .gotoNextClusterFat12NoCross
   214                              <1>     ;Boundary cross, build entry properly
   215 000002E6 31C0                <1>     xor eax, eax
   216 000002E8 8A441720            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   217 000002EC 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   218 000002EF C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   219 000002F2 EBBB                <1>     jmp short .goToNextClusterCommon
   220                              <1> .gotoNextClusterFat12NoCross:
   221 000002F4 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   222 000002F9 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   223 000002FC EBB1                <1>     jmp short .goToNextClusterCommon
   224                              <1> .gotoNextClusterFat12Even:
   225                              <1>     ;Here the cluster is even and can't cross a sector boundary
   226 000002FE 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   227 00000303 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   228 00000308 EBA5                <1>     jmp short .goToNextClusterCommon
   229                              <1> ;---------------------------------------------------:
   230                              <1> ;                   KERNEL FUNCTIONS                :
   231                              <1> ;---------------------------------------------------:
   232                              <1> makeDIR:           ;ah = 39h
   233                              <1> removeDIR:         ;ah = 3Ah
   234                              <1> changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
   235                              <1> getCurrentDIR:     ;ah = 47h
   236                              <1> getSetFileDateTime:;ah = 57h
   237                              <1> trueName:          ;ah = 60h, get fully qualified name
   238 0000030A C3                  <1>     ret
    16                                  %include "./Source/Kernel/charFunctions.asm"
    17                              <1> ;Dos default char functions live here
    18                              <1> 
    19                              <1> stdinReadEcho:     ;ah = 01h
    20                              <1> ;Return char that has been read and echoed in al
    21 0000030B 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    22 00000312 488D0566000000      <1>     lea rax, .stdinReadEchoBuffer
    23 00000319 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    24 0000031C C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    25 00000320 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    26 00000326 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    27 0000032A C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    28 00000331 FF1519110000        <1>     call qword [conHdr + drvHdr.strPtr]
    29 00000337 FF151B110000        <1>     call qword [conHdr + drvHdr.intPtr]
    30 0000033D 803D3B00000000      <1>     cmp byte [.stdinReadEchoBuffer], 00h
    31 00000344 7432                <1>     jz .stdireexit
    32 00000346 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    33 0000034D 488D052B000000      <1>     lea rax, .stdinReadEchoBuffer
    34 00000354 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    35 00000357 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    36 0000035B 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    37 00000361 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    38 00000365 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    39 0000036C FF15DE100000        <1>     call qword [conHdr + drvHdr.strPtr]
    40 00000372 FF15E0100000        <1>     call qword [conHdr + drvHdr.intPtr]
    41                              <1> .stdireexit:
    42 00000378 8A0501000000        <1>     mov al, byte [.stdinReadEchoBuffer]
    43 0000037E C3                  <1>     ret
    44 0000037F 00                  <1> .stdinReadEchoBuffer    db 0
    45                              <1> stdoutWrite:       ;ah = 02h
    46                              <1> ;Bspace is regular cursor left, does not insert a blank
    47 00000380 881533000000        <1>     mov byte [.stdoutWriteBuffer], dl
    48 00000386 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    49 0000038D 488D1525000000      <1>     lea rdx, .stdoutWriteBuffer
    50 00000394 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    51 00000397 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    52 0000039B 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    53 000003A1 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    54 000003A5 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    55 000003AC FF159E100000        <1>     call qword [conHdr + drvHdr.strPtr]
    56 000003B2 FF15A0100000        <1>     call qword [conHdr + drvHdr.intPtr]
    57 000003B8 C3                  <1>     ret
    58 000003B9 00                  <1> .stdoutWriteBuffer db 0
    59                              <1> stdauxRead:        ;ah = 03h
    60                              <1> stdauxWrite:       ;ah = 04h
    61                              <1> stdprnWrite:       ;ah = 05h
    62                              <1> directCONIO:       ;ah = 06h
    63                              <1> waitDirectInNoEcho:;ah = 07h
    64                              <1> ;Return char in al
    65 000003BA 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    66 000003C1 488D052B000000      <1>     lea rax, .function7buffer
    67 000003C8 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    68 000003CB C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    69 000003CF 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    70 000003D5 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    71 000003D9 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    72 000003E0 FF156A100000        <1>     call qword [conHdr + drvHdr.strPtr]
    73 000003E6 FF156C100000        <1>     call qword [conHdr + drvHdr.intPtr]
    74 000003EC 8A0501000000        <1>     mov al, byte [.function7buffer]
    75 000003F2 C3                  <1>     ret
    76 000003F3 00                  <1> .function7buffer    db 0
    77                              <1> waitStdinNoEcho:   ;ah = 08h
    78 000003F4 C3                  <1>     ret
    79                              <1> printString:       ;ah = 09h
    80 000003F5 31C9                <1>     xor ecx, ecx    ;Clear char counter
    81 000003F7 B824000000          <1>     mov eax, "$"    ;Terminating char
    82 000003FC 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
    83                              <1> .ps0:   ;Search for $ to get count of chars
    84 000003FF AE                  <1>     scasb
    85 00000400 7404                <1>     je .ps1
    86 00000402 FFC1                <1>     inc ecx
    87 00000404 EBF9                <1>     jmp short .ps0
    88                              <1> .ps1:   ;Use handle 
    89 00000406 488D1D(0B000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    90 0000040D C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    91 00000410 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    92 00000414 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    93 0000041A 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    94 0000041E 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
    95 00000421 FF1529100000        <1>     call qword [conHdr + drvHdr.strPtr]
    96 00000427 FF152B100000        <1>     call qword [conHdr + drvHdr.intPtr]
    97                              <1> 
    98 0000042D 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
    99 00000434 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
   100 00000436 C3                  <1>     ret
   101                              <1> buffStdinInput:    ;ah = 0Ah
   102                              <1> checkStdinStatus:  ;ah = 0Bh
   103                              <1> clearbuffDoFunc:   ;ah = 0Ch
    17                                  %include "./Source/Kernel/fcbFunctions.asm"
    18                              <1> openFileFCB:       ;ah = 0Fh
    19                              <1> closeFileFCB:      ;ah = 10h
    20                              <1> findFirstFileFCB:  ;ah = 11h
    21                              <1> findNextFileFCB:   ;ah = 12h
    22                              <1> deleteFileFCB:     ;ah = 13h
    23                              <1> sequentialReadFCB: ;ah = 14h
    24                              <1> sequentialWriteFCB:;ah = 15h
    25                              <1> createFileFCB:     ;ah = 16h
    26                              <1> renameFileFCB:     ;ah = 17h
    27 00000437 C3                  <1>     ret
    28                              <1> setDTA:            ;ah = 1Ah
    29                              <1> ;Called with:
    30                              <1> ;   rdx = Pointer to the new default DTA
    31 00000438 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
    32 0000043F 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    33 00000443 488915(CF000000)    <1>     mov qword [currentDTA], rdx
    34 0000044A C3                  <1>     ret
    35                              <1> randomReadFCB:     ;ah = 21h
    36                              <1> randomWriteFCB:    ;ah = 22h
    37                              <1> getFileSizeFCB:    ;ah = 23h
    38                              <1> setRelRecordFCB:   ;ah = 24h
    39                              <1> randBlockReadFCB:  ;ah = 27h
    40                              <1> randBlockWriteFCB: ;ah = 28h
    41                              <1> parseFilenameFCB:  ;ah = 29h
    42 0000044B C3                  <1>     ret
    43                              <1> getDTA:            ;ah = 2Fh
    44 0000044C 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
    45 00000453 488B1D(CF000000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    46 0000045A 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    47 0000045E C3                  <1>     ret
    18                                  %include "./Source/Kernel/handleFunctions.asm"
    19                              <1> ;-----------------------------------:
    20                              <1> ;    File Handle Kernel routines    :
    21                              <1> ;-----------------------------------:
    22                              <1> 
    23                              <1> createFileHdl:     ;ah = 3Ch, handle function
    24                              <1> openFileHdl:       ;ah = 3Dh, handle function
    25                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    26 0000045F C3                  <1>     ret
    27                              <1> readFileHdl:       ;ah = 3Fh, handle function
    28 00000460 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
    29 00000467 E83F000000          <1>     call getSFTPtr
    30 0000046C 722B                <1>     jc .rfhErrorHandle  ;Function can only fail for bad file handle
    31                              <1> ;Here rdi points to the correct SFT 
    32 0000046E 668B4702            <1>     mov ax, word [rdi + sft.wOpenMode]  ;Get open mode
    33 00000472 A802                <1>     test al, RWAccess  ;Check r/w permission
    34 00000474 7504                <1>     jnz .rfh2   ;Bit set, proceed
    35 00000476 84C0                <1>     test al, al  ;Check read access (it is 0)
    36 00000478 751F                <1>     jnz .rfhNoPermission    ;If not zero then it is write only permission
    37                              <1> .rfh2:
    38                              <1>     ;So now read the number of bytes from the data buffers
    39 0000047A 4889FB              <1>     mov rbx, rdi    ;Move SFT pointer into rbx
    40 0000047D F6430520            <1>     test byte [rbx + sft.wDeviceInfo], devBinary
    41 00000481 7409                <1>     jz .rfhASCII    ;If not set, read in ASCII
    42 00000483 E870000000          <1>     call readBinaryBytesFromFile
    43 00000488 720F                <1>     jc .rfCriticalError
    44 0000048A EB07                <1>     jmp short .rfhExitOK
    45                              <1> .rfhASCII:
    46 0000048C E866000000          <1>     call readASCIIBytesFromFile
    47 00000491 7206                <1>     jc .rfCriticalError
    48                              <1> .rfhExitOK:
    49 00000493 88C8                <1>     mov al, cl  ;Get low byte in cl
    50 00000495 894D00              <1>     mov dword [rbp + callerFrame.rax], ecx  ;Save number of bytes transf.
    51 00000498 C3                  <1>     ret
    52                              <1> .rfCriticalError:
    53                              <1>     ;Fail due to driver error. Invoke Int 44h if set to in SFT
    54                              <1> .rfhErrorHandle:
    55                              <1>     ;Fail due to bad file handle provided
    56                              <1> .rfhNoPermission:
    57                              <1>     ;Fail due to bad permissions
    58                              <1> writeFileHdl:      ;ah = 40h, handle function
    59 00000499 E80D000000          <1>     call getSFTPtr
    60 0000049E 720A                <1>     jc .wfhErrorHandle  ;Function can only fail for bad file handle
    61 000004A0 668B4702            <1>     mov ax, word [rdi + sft.wOpenMode]  ;Get open mode
    62 000004A4 66A90300            <1>     test ax, 3
    63 000004A8 7400                <1>     jz .wfhNoPermission ;Bad permissions! No r/w or w permissions
    64                              <1> .wfCriticalError:
    65                              <1>     ;Fail due to driver error. Invoke Int 44h if set to in SFT
    66                              <1> .wfhErrorHandle:
    67                              <1>     ;Fail due to bad file handle provided
    68                              <1> .wfhNoPermission:
    69                              <1>     ;Fail due to bad permissions
    70                              <1> 
    71                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    72                              <1> movFileReadPtr:    ;ah = 42h, handle function, LSEEK
    73                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
    74                              <1> ioctrl:            ;ah = 44h, handle function
    75                              <1> duplicateHandle:   ;ah = 45h, handle function
    76                              <1> forceDuplicateHdl: ;ah = 46h, handle function
    77                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
    78                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
    79                              <1> renameFile:        ;ah = 56h
    80                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
    81                              <1> createNewFile:     ;ah = 5Bh
    82                              <1> lockUnlockFile:    ;ah = 5Ch
    83                              <1> setHandleCount:    ;ah = 67h
    84                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
    85 000004AA C3                  <1>     ret
    86                              <1> ;-----------------------------------:
    87                              <1> ;        File Handle routines       :
    88                              <1> ;-----------------------------------:
    89                              <1> getSFTPtr:
    90                              <1> ;Gets the SFT pointer for a given file handle from the calling application
    91                              <1> ;On entry:
    92                              <1> ;   bl = File handle
    93                              <1> ;On exit:
    94                              <1> ;   rsi = currentPSP
    95                              <1> ;   rdi = SFT pointer
    96                              <1> ;   rax, rbx trashed
    97 000004AB 488B35(D7000000)    <1>     mov rsi, qword [currentPSP]
    98 000004B2 480FB6DB            <1>     movzx rbx, bl
    99 000004B6 8A5C1E2A            <1>     mov bl, byte [rsi + psp.jobFileTbl + rbx]   ;Use jft entry to get sft num
   100 000004BA 31C0                <1>     xor eax, eax
   101 000004BC 488B3D(6F000000)    <1>     mov rdi, qword [sftHeadPtr]
   102                              <1> .gsp0:
   103 000004C3 66034708            <1>     add ax, word [rdi + sfth.wNumFiles]
   104 000004C7 38D8                <1>     cmp al, bl  ;Check if the file header block contains the entry
   105 000004C9 760E                <1>     jbe .gsp1   ;IF bl is below or equal to al then it does
   106 000004CB 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of list
   107 000004D2 7421                <1>     je .gspFail   ;If we have a number greater than the last entry, fail
   108 000004D4 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Walk the chain
   109 000004D7 EBEA                <1>     jmp short .gsp0 ;Search again
   110                              <1> .gsp1: 
   111                              <1>     ;Now point to the right entry
   112 000004D9 28D8                <1>     sub al, bl  ;Subtract the number from the total so far to get offset
   113 000004DB 0FB6C0              <1>     movzx eax, al
   114 000004DE 4881C70A000000      <1>     add rdi, sfth_size  ;Point to first file in table
   115 000004E5 84C0                <1>     test al, al ;Check if rdi points to the first file in this block
   116 000004E7 740B                <1>     jz .gsp12   ;Skip walking down the sft blocks
   117                              <1> .gsp11:
   118 000004E9 4881C73D000000      <1>     add rdi, sft_size
   119 000004F0 FEC8                <1>     dec al
   120 000004F2 75F5                <1>     jnz .gsp11  ;Keep adding one until al is zero
   121                              <1> .gsp12:
   122 000004F4 C3                  <1>     ret
   123                              <1> .gspFail:
   124 000004F5 F9                  <1>     stc
   125 000004F6 C3                  <1>     ret
   126                              <1> 
   127                              <1> readASCIIBytesFromFile:
   128 000004F7 C3                  <1>     ret
   129                              <1> readBinaryBytesFromFile:
   130                              <1> ;Reads a byte from a SFT entry, does not translate it. 
   131                              <1> ;Read or RW permissions are checked at the INT 41h level
   132                              <1> ;Entry: rbp = Pointer to the caller stack
   133                              <1> ;       rbx = SFT entry pointer
   134                              <1> ;       On stack:
   135                              <1> ;           rdx = Address of the data buffer to read to
   136                              <1> ;           ecx = Number of bytes to read
   137                              <1> ;Exit: If CF = NC : All ok!
   138                              <1> ;       rbx = SFT entry pointer
   139                              <1> ;       ecx = Number of chars read/written
   140                              <1> ;      If CF = CY : Error!
   141                              <1> ;       rbx = SFT entry pointer
   142                              <1> ;       al = Error code to ret if user returns fail from int 44h or no int 44h
   143                              <1> 
   144 000004F8 66F743058000        <1>     test word [rbx + sft.wDeviceInfo], devCharDev
   145 000004FE 755C                <1>     jnz .readBinaryBytesFromCharDevice
   146                              <1> .readBinaryBytesFromHardFile:
   147                              <1> ;Disk files are accessed from here
   148                              <1> ;Use the sector buffers if the data is already buffered,
   149                              <1> ; else use the dpb to fill a sector buffer
   150 00000500 53                  <1>     push rbx
   151 00000501 4989D8              <1>     mov r8, rbx                     ;Use r8 as sft pointer
   152 00000504 4D8B4807            <1>     mov r9, qword [r8 + sft.qPtr]   ;Use r9 as dpb pointer
   153                              <1>     ;First compute the number of bytes to read for the current sector
   154                              <1>     ;Compute how many bytes in a sector
   155 00000508 418A4902            <1>     mov cl, byte [r9 + dpb.bBytesPerSectorShift]
   156 0000050C B801000000          <1>     mov eax, 1
   157 00000511 D3E0                <1>     shl eax, cl
   158 00000513 89C1                <1>     mov ecx, eax    ;ecx has bytes per sector
   159 00000515 488B4510            <1>     mov rax, qword [rbp + callerFrame.rcx]  ;Get total number of bytes
   160 00000519 31D2                <1>     xor edx, edx
   161 0000051B 48895510            <1>     mov qword [rbp + callerFrame.rcx], rdx  ;Zero this field
   162 0000051F F7F1                <1>     div ecx ;Divide by number of bytes per sector
   163 00000521 87CA                <1>     xchg ecx, edx    ;Get "in current sector remainder of bytes" in ecx
   164                              <1>                      ;and bytes per sector in edx
   165 00000523 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr]  ;Get cluster number
   166 00000527 E8C8FCFFFF          <1>     call getStartSectorOfCluster
   167 0000052C 410FB7581F          <1>     movzx ebx, word [r8 + sft.wRelSect] ;Add the offset into the cluster
   168 00000531 01D8                <1>     add eax, ebx    ;eax now has the sector number
   169 00000533 4C89CE              <1>     mov rsi, r9 ;Move dpb pointer into rsi
   170 00000536 4831FF              <1>     xor rdi, rdi
   171 00000539 89CF                <1>     mov edi, ecx    ;Save in current sector remainder of bytes in edi
   172 0000053B B108                <1>     mov cl, dataBuffer
   173 0000053D E8D8FAFFFF          <1>     call readBuffer ;Read the data
   174 00000542 7218                <1>     jc .readBinaryBytesFromHardFileError
   175 00000544 4881C320000000      <1>     add rbx, bufferHdr.dataarea
   176 0000054B 4889DE              <1>     mov rsi, rbx
   177 0000054E 4889F9              <1>     mov rcx, rdi    ;Get the number of bytes to read in this sector to rbx
   178 00000551 488B7D18            <1>     mov rdi, qword [rbp + callerFrame.rdx]  ;Point to destination
   179 00000555 48014D10            <1>     add qword [rbp + callerFrame.rcx], rcx
   180 00000559 F3A4                <1>     rep movsb   ;Move the bytes from this sector
   181                              <1> 
   182 0000055B 5B                  <1>     pop rbx
   183                              <1> .readBinaryBytesFromHardFileError:
   184                              <1> 
   185                              <1> .readBinaryBytesFromCharDevice:
   186                              <1> ;Devices are accessed from here
   187 0000055C 488B6B07            <1>     mov rbp, qword [rbx + sft.qPtr] ;Get device driver header pointer
   188 00000560 53                  <1>     push rbx
   189 00000561 488D1D(0B000000)    <1>     lea rbx, charReqHdr
   190 00000568 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   191 0000056B C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], drvREAD
   192 0000056F 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   193 00000575 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   194 00000579 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   195                              <1> 
   196 0000057C FF550A              <1>     call qword [rbp + drvHdr.strPtr]
   197 0000057F FF5512              <1>     call qword [rbp + drvHdr.intPtr]
   198 00000582 8B4316              <1>     mov eax, dword [rbx + ioReqPkt.tfrlen] ;Get number of bytes read
   199 00000585 66F743030080        <1>     test word [rbx + ioReqPkt.status], 8000h    ;Test the error bit is set
   200 0000058B 5B                  <1>     pop rbx
   201 0000058C 7400                <1>     jz .readBinaryBytesExitGood  ;Error bit not set, all good!
   202                              <1> .readBinaryBytesExitGood:
   203 0000058E C3                  <1>     ret
   204                              <1> 
    19                                  %include "./Source/Kernel/memoryFunctions.asm"
    20                              <1> ;Memory related functions
    21                              <1> 
    22                              <1> ;-----------------------------------:
    23                              <1> ;  Memory related Kernel routines   :
    24                              <1> ;-----------------------------------:
    25                              <1> allocateMemory:    ;ah = 48h
    26                              <1> freeMemory:        ;ah = 49h
    27                              <1> reallocMemory:     ;ah = 4Ah
    28                              <1> getsetMallocStrat: ;ah = 58h
    29 0000058F C3                  <1>     ret
    30                              <1> ;-----------------------------------:
    31                              <1> ;      Memory related routines      :
    32                              <1> ;-----------------------------------:
    33                              <1> verifyIntegrityOfMCBChain:
    34 00000590 488B1D(5F000000)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
    35                              <1> .ok:
    36 00000597 803B4D              <1>     cmp byte [rbx + mcb.marker], 'M'
    37 0000059A 7406                <1>     je .ok1
    38 0000059C 803B5A              <1>     cmp byte [rbx + mcb.marker], "Z"    ;End of the chain?
    39 0000059F 7509                <1>     jne .sysHalt    ;It was not M or Z, fail violently
    40                              <1> .exit:
    41 000005A1 C3                  <1>     ret ;We have reached the end of the chain, return all good!
    42                              <1> .ok1:
    43 000005A2 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
    44 000005A5 4801C3              <1>     add rbx, rax
    45 000005A8 EBED                <1>     jmp short .ok
    46                              <1> .sysHalt:
    47                              <1> ;Only arrive here if the integrity of the system is not verified
    48                              <1> ;Lock the system
    49 000005AA 488D1D0E000000      <1>     lea rbx, .sysHltString
    50 000005B1 B409                <1>     mov ah, 09h
    51 000005B3 CD41                <1>     int 41h
    52 000005B5 FA                  <1>     cli ;Halt interrupts
    53 000005B6 B0FF                <1>     mov al, 0FFh    ;Mask IRQ lines 
    54 000005B8 E6A1                <1>     out 0A1h, al
    55 000005BA E621                <1>     out 021h, al
    56 000005BC F4                  <1>     hlt             ;Halt the system
    57 000005BD EBFB                <1>     jmp short $ - 3 ;Go back far enough to capture the hlt
    58 000005BF 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
    58 000005C8 6C6F636174696F6E20- <1>
    58 000005D1 6572726F720D0A      <1>
    59 000005D8 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
    59 000005E1 616420434F4D4D414E- <1>
    59 000005EA 442C2073797374656D- <1>
    59 000005F3 2068616C74656424    <1>
    20                                  %include "./Source/Kernel/dateTimeFunctions.asm"
    21                              <1> ;Major kernel date time functions and subroutines
    22                              <1> 
    23                              <1> getDate:           ;ah = 2Ah
    24                              <1> setDate:           ;ah = 2Bh
    25                              <1> getTime:           ;ah = 2Ch
    26                              <1> setTime:           ;ah = 2Dh
    27 000005FB C3                  <1>     ret
    21                                  %include "./Source/Kernel/localisation.asm"
    22                              <1> ;Localisation based functions live here
    23                              <1> 
    24                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    25                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    26                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    27                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    28 000005FC C3                  <1>     ret
    22                                  %include "./Source/Kernel/dosKernel.asm"
    23                              <1> ;-----------------------------------:
    24                              <1> ;       Misc System routines        :
    25                              <1> ;-----------------------------------:
    26                              <1> criticalDOSError:
    27                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    28                              <1> ; to the critical error handler.
    29                              <1> ; Called with ax, di and rsi set as required by Int 44h (caller decides)
    30                              <1> ;               AH = Critical Error Bitfield
    31                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    32                              <1> ;               Bit 6 - Reserved
    33                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    34                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    35                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    36                              <1> ;               Bits [2-1] = Affected Disk Error
    37                              <1> ;                     0 0   DOS area
    38                              <1> ;                     0 1   FAT area
    39                              <1> ;                     1 0   Directory area
    40                              <1> ;                     1 1   Data area
    41                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    42                              <1> ;               AL  = Failing drive number if AH[7] = 0
    43                              <1> ;               DIL = Error code for errorMsg
    44                              <1> ;               RSI = EA of Device Header for which device the error occured
    45                              <1> ;Return:
    46                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    47                              <1> ;                  = 1 - Retry the Operation    (Retry)
    48                              <1> ;                  = 2 - Terminate the Program  (Abort)
    49                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    50                              <1> ; Return response from int 44h in al
    51 000005FD FA                  <1>     cli ;Disable Interrupts
    52 000005FE C605(C7000000)01    <1>     mov byte [critErrFlag], 1   ;Set flag for critical error
    53 00000605 488925(F4000000)    <1>     mov qword [xInt44hRSP], rsp
    54 0000060C 488B25(08010000)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    55 00000613 CD44                <1>     int 44h ;Call critical error handler
    56 00000615 488B25(F4000000)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    57 0000061C C605(C7000000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    58 00000623 FB                  <1>     sti ;Reenable Interrupts
    59 00000624 C3                  <1>     ret
    60                              <1> 
    61                              <1> findDPB:
    62                              <1> ;Finds the DPB for a given drive
    63                              <1> ;Input:  dl = Drive number (0=A, 1=B etc...)
    64                              <1> ;Output: al = 00, rbp = Pointer to the DPB
    65                              <1> ;        al = -1, Failed, no DPB for device, rbx destroyed
    66 00000625 488B1D(67000000)    <1>     mov rbx, qword [dpbHeadPtr]
    67                              <1> .fd1:
    68 0000062C 30C0                <1>     xor al, al
    69 0000062E 385500              <1>     cmp byte [rbp + dpb.bDriveNumber], dl
    70 00000631 740F                <1>     je .fd2
    71 00000633 488B6D24            <1>     mov rbp, qword [rbp + dpb.qNextDPBPtr]
    72 00000637 B0FF                <1>     mov al, -1
    73 00000639 4881FDFFFFFFFF      <1>     cmp rbp, -1 ;If rbx followed last item in list, no DPB exists for dl
    74 00000640 75EA                <1>     jne .fd1
    75                              <1> .fd2:
    76 00000642 C3                  <1>     ret
    77                              <1> ;-----------------------------------:
    78                              <1> ;        Interrupt routines         :
    79                              <1> ;-----------------------------------:
    80                              <1> terminateProcess:   ;Int 40h
    81 00000643 48CF                <1>     iretq
    82                              <1> terminateHandler:   ;Int 42h
    83                              <1> ctrlCHandler:       ;Int 43h
    84 00000645 48CF                <1>     iretq
    85                              <1> absDiskWrite:       ;Int 46h
    86                              <1> ;al = Drive number
    87                              <1> ;rbx = Memory Buffer address to read from
    88                              <1> ;ecx = Number of sectors to write
    89                              <1> ;rdx = Start LBA to write to
    90 00000647 50                  <1>     push rax
    91 00000648 53                  <1>     push rbx
    92 00000649 52                  <1>     push rdx
    93 0000064A 55                  <1>     push rbp
    94 0000064B B408                <1>     mov ah, drvWRITE
    95 0000064D 0225(F3000000)      <1>     add ah, byte [verifyFlag]   ;Change to Write/Verify if set
    96 00000653 EB06                <1>     jmp short absDiskReadWriteCommon
    97                              <1> absDiskRead:        ;Int 45h
    98                              <1> ;al = Drive number
    99                              <1> ;rbx = Memory Buffer address to write to
   100                              <1> ;ecx = Number of sectors to read
   101                              <1> ;rdx = Start LBA to read from
   102 00000655 50                  <1>     push rax
   103 00000656 53                  <1>     push rbx
   104 00000657 52                  <1>     push rdx
   105 00000658 55                  <1>     push rbp
   106 00000659 B404                <1>     mov ah, drvREAD
   107                              <1> absDiskReadWriteCommon:
   108                              <1> ;Entered with the appropriate function number in ah
   109 0000065B 50                  <1>     push rax    ;Save drive number, cmdcde and start LBA
   110 0000065C 53                  <1>     push rbx
   111 0000065D 52                  <1>     push rdx
   112 0000065E B432                <1>     mov ah, 32h ;Get DPB
   113 00000660 88C2                <1>     mov dl, al
   114 00000662 CD41                <1>     int 41h
   115 00000664 4889DD              <1>     mov rbp, rbx    ;Get dpb ptr in rbp
   116 00000667 5A                  <1>     pop rdx
   117 00000668 5B                  <1>     pop rbx
   118 00000669 58                  <1>     pop rax
   119                              <1> 
   120 0000066A C605(35000000)2A    <1>     mov byte [diskReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   121 00000671 8805(36000000)      <1>     mov byte [diskReqHdr + ioReqPkt.unitnm], al
   122 00000677 8825(37000000)      <1>     mov byte [diskReqHdr + ioReqPkt.cmdcde], ah
   123 0000067D 66C705(38000000)00- <1>     mov word [diskReqHdr + ioReqPkt.status], 0
   123 00000685 00                  <1>
   124 00000686 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   125 00000689 8805(42000000)      <1>     mov byte [diskReqHdr + ioReqPkt.medesc], al
   126 0000068F 48891D(43000000)    <1>     mov qword [diskReqHdr + ioReqPkt.bufptr], rbx
   127 00000696 488915(4F000000)    <1>     mov qword [diskReqHdr + ioReqPkt.strtsc], rdx
   128 0000069D 890D(4B000000)      <1>     mov dword [diskReqHdr + ioReqPkt.tfrlen], ecx
   129 000006A3 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver pointer
   130                              <1> 
   131 000006A7 488D1D(35000000)    <1>     lea rbx, diskReqHdr
   132 000006AE FF520A              <1>     call qword [rdx + drvHdr.strPtr]  ;Call with ptr to request block in rbx
   133 000006B1 FF5212              <1>     call qword [rdx + drvHdr.intPtr]
   134 000006B4 5D                  <1>     pop rbp
   135 000006B5 5A                  <1>     pop rdx
   136 000006B6 5B                  <1>     pop rbx
   137 000006B7 58                  <1>     pop rax
   138 000006B8 66F705(38000000)00- <1>     test word [diskReqHdr + ioReqPkt.status], 8000h
   138 000006C0 80                  <1>
   139 000006C1 7402                <1>     je .absDiskError
   140 000006C3 F8                  <1>     clc
   141 000006C4 C3                  <1>     ret
   142                              <1> .absDiskError:
   143 000006C5 8A05(38000000)      <1>     mov al, byte [diskReqHdr + ioReqPkt.status] ;Get low byte into al
   144 000006CB B480                <1>     mov ah, 80h ;Attachment failure
   145 000006CD 3C0C                <1>     cmp al, 0Ch ;Gen error
   146 000006CF 741A                <1>     je .absExit
   147 000006D1 B440                <1>     mov ah, 40h ;Seek error
   148 000006D3 3C06                <1>     cmp al, 06h
   149 000006D5 7414                <1>     je .absExit
   150 000006D7 B408                <1>     mov ah, 08h ;Bad CRC
   151 000006D9 3C04                <1>     cmp al, 04h
   152 000006DB 740E                <1>     je .absExit
   153 000006DD B404                <1>     mov ah, 04h ;Sector not found
   154 000006DF 3C08                <1>     cmp al, 08h
   155 000006E1 7408                <1>     je .absExit
   156 000006E3 30E4                <1>     xor ah, ah  ;Write Protect Violation
   157 000006E5 84C0                <1>     test al, al
   158 000006E7 7402                <1>     je .absExit
   159 000006E9 B402                <1>     mov ah, 02h ;Other Error
   160                              <1> .absExit:
   161 000006EB F9                  <1>     stc
   162 000006EC C3                  <1>     ret
   163                              <1> 
   164                              <1> terminateResident:  ;Int 47h
   165                              <1> inDosHandler:       ;Int 48h
   166                              <1> ;Called when DOS idle
   167 000006ED 48CF                <1>     iretq
   168                              <1> fastOutput:         ;Int 49h
   169                              <1> ;Called with char to transfer in al
   170 000006EF 50                  <1>     push rax
   171 000006F0 B40E                <1>     mov ah, 0Eh
   172 000006F2 CD30                <1>     int 30h
   173 000006F4 58                  <1>     pop rax
   174 000006F5 48CF                <1>     iretq
   175                              <1> passCommand:        ;Int 4Eh, hooked by COMMAND.COM
   176 000006F7 48CF                <1>     iretq
   177                              <1> multiplex:          ;Int 4Fh, kept as iretq for now
   178 000006F9 48CF                <1>     iretq
   179                              <1> ;-----------------------------------:
   180                              <1> ;        Main Kernel routines       :
   181                              <1> ;-----------------------------------:
   182                              <1> functionDispatch:   ;Int 41h Main function dispatcher
   183                              <1> ;ah = Function number, all other registers have various meanings
   184 000006FB FA                  <1>     cli ;Halt external interrupts
   185 000006FC FC                  <1>     cld ;Ensure all string ops occur in the right direction
   186 000006FD 80FC6A              <1>     cmp ah, kernelDispatchTableL/8    ;Number of functions
   187 00000700 0F871D010000        <1>     ja .fdExitBad
   188                              <1>     ;Cherry pick functions
   189 00000706 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
   190 00000709 722C                <1>     jb .fsbegin   ;If below skip these checks
   191 0000070B 0F8447050000        <1>     je ctrlBreakCheck
   192 00000711 80FC64              <1>     cmp ah, 64h
   193 00000714 0F8448070000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
   194 0000071A 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
   195 0000071C 80FC51              <1>     cmp ah, 51h
   196 0000071F 0F84ED050000        <1>     je getCurrProcessID    ;This and below are exactly the same
   197 00000725 80FC62              <1>     cmp ah, 62h
   198 00000728 0F8421070000        <1>     je getPSPaddr          ;Calls the above function
   199 0000072E 80FC50              <1>     cmp ah, 50h
   200 00000731 0F84D3050000        <1>     je setCurrProcessID
   201                              <1> .fsbegin:
   202                              <1>     pushDOS ;Push the usual prologue registers
   263 00000737 4151                <2>  push r9
   264 00000739 4150                <2>  push r8
   265 0000073B 55                  <2>  push rbp
   266 0000073C 57                  <2>  push rdi
   267 0000073D 56                  <2>  push rsi
   268 0000073E 52                  <2>  push rdx
   269 0000073F 51                  <2>  push rcx
   270 00000740 53                  <2>  push rbx
   271 00000741 50                  <2>  push rax
   203 00000742 488B05(08010000)    <1>     mov rax, qword [oldRSP]
   204 00000749 488905(00010000)    <1>     mov qword [oldoldRSP], rax
   205 00000750 FE05(C8000000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
   206 00000756 488925(08010000)    <1>     mov qword [oldRSP], rsp
   207                              <1> ;Here, we want to save oldRSP in the callers PSP
   208 0000075D 803D(C8000000)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
   209 00000764 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
   210 00000766 488B05(D7000000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
   211 0000076D 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   212                              <1> .fsb1:
   213 00000771 58                  <1>     pop rax     ;Get old rax back
   214 00000772 50                  <1>     push rax    ;and push it back onto the stack
   215 00000773 488D25(4B070000)    <1>     lea rsp, critStakTop
   216 0000077A FB                  <1>     sti         ;Reenable interrupts
   217                              <1> 
   218 0000077B C605(FF000000)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   219                              <1> 
   220 00000782 48891D(10010000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   221 00000789 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
   222 0000078C C1E303              <1>     shl ebx, 3      ;Multiply the function number by 8 for offset into table
   223 0000078F 50                  <1>     push rax        ;Push rax onto the stack
   224 00000790 488D05CC060000      <1>     lea rax, qword [kernelDispatchTable]
   225 00000797 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   226 0000079A 58                  <1>     pop rax
   227 0000079B 488B1B              <1>     mov rbx, qword [rbx]    ;Get the address from the dispatch table
   228                              <1> 
   229 0000079E 84E4                <1>     test ah, ah     ;Simple Terminate function?
   230 000007A0 741C                <1>     jz .fddiskOp
   231 000007A2 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   232 000007A5 7443                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   233 000007A7 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   234 000007AA 7712                <1>     ja .fddiskOp
   235                              <1> ;Char operations here
   236 000007AC F605(C7000000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   237 000007B3 7535                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   238 000007B5 488D25(8B0D0000)    <1>     lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   239 000007BC EB2C                <1>     jmp short .fdGoToFunction
   240                              <1> .fddiskOp:
   241                              <1>     ;Disk operations go here
   242                              <1>     ;Clear up error info
   243 000007BE C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   244 000007C5 C605(C7000000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   245 000007CC C605(C9000000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   246                              <1> 
   247 000007D3 C605(FF000000)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   248 000007DA 488D25(CB130000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   249 000007E1 F605(F2000000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   250 000007E8 7400                <1>     jz .fdGoToFunction
   251                              <1> ; HANDLE CTRL+BREAK HERE!
   252                              <1> .fdGoToFunction:
   253 000007EA 48871D(10010000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   254                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   255                              <1>     ;
   256                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   257                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   258                              <1>     ;
   259 000007F1 FF15(10010000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   260                              <1> .fdExit:
   261 000007F7 FA                  <1>     cli     ;Redisable interrupts
   262                              <1>     ;???
   263 000007F8 FE0D(C8000000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   264 000007FE 488B25(08010000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   265 00000805 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   266 00000808 488B05(00010000)    <1>     mov rax, qword [oldoldRSP]
   267 0000080F 488905(08010000)    <1>     mov qword [oldRSP], rax
   268                              <1>     popDOS  ;Pop the frame
   275 00000816 58                  <2>  pop rax
   276 00000817 5B                  <2>  pop rbx
   277 00000818 59                  <2>  pop rcx
   278 00000819 5A                  <2>  pop rdx
   279 0000081A 5E                  <2>  pop rsi
   280 0000081B 5F                  <2>  pop rdi
   281 0000081C 5D                  <2>  pop rbp
   282 0000081D 4158                <2>  pop r8
   283 0000081F 4159                <2>  pop r9
   269 00000821 48CF                <1>     iretq
   270                              <1> .fdExitBad:
   271 00000823 B400                <1>     mov ah, 0
   272 00000825 48CF                <1>     iretq
   273                              <1> 
   274                              <1> ;========================================:
   275                              <1> ;            Kernel Functions            :
   276                              <1> ;========================================:
   277                              <1> simpleTerminate:   ;ah = 00h
   278 00000827 C3                  <1>     ret
   279                              <1> diskReset:         ;ah = 0Dh
   280                              <1> ;Flush all dirty buffers to disk
   281 00000828 488B2D(89000000)    <1>     mov rbp, qword [bufHeadPtr]
   282                              <1> .drCheckBuffer:
   283 0000082F F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   284 00000833 7407                <1>     jz .drGotoNextBuffer
   285                              <1> .drFlushBuffer:
   286 00000835 E86CF8FFFF          <1>     call flushBuffer    ;Called with rbp = buffer header
   287 0000083A 720E                <1>     jc .drError
   288                              <1> .drGotoNextBuffer:
   289 0000083C 488B6D00            <1>     mov rbp, qword [rbp + bufferHdr.nextBufPtr]
   290 00000840 4881FDFFFFFFFF      <1>     cmp rbp, -1     ;If rbp points to -1, exit
   291 00000847 75E6                <1>     jne .drCheckBuffer
   292 00000849 C3                  <1>     ret
   293                              <1> .drError:
   294                              <1> ;Abort/Retry/Ignore
   295                              <1> ;Abort returns to DOS, 
   296                              <1> ;Retry retries the write on the buffer, 
   297                              <1> ;Ignore marks the buffer as clean and proceeds as normal
   298 0000084A 8A4509              <1>     mov al, byte [rbp + bufferHdr.bufferFlags]
   299 0000084D 240F                <1>     and al, 0Fh ;Clear the upper nybble
   300 0000084F B431                <1>     mov ah, 31h ;Disk Error, Ignore,Retry and Write operation
   301 00000851 3C01                <1>     cmp al, dosBuffer
   302 00000853 740F                <1>     je .drErrorMain
   303 00000855 80C402              <1>     add ah, 2
   304 00000858 3C02                <1>     cmp al, fatBuffer
   305 0000085A 7408                <1>     je .drErrorMain
   306 0000085C 80C402              <1>     add ah, 2
   307 0000085F 3C04                <1>     cmp al, dirBuffer
   308 00000861 80C402              <1>     add ah, 2
   309                              <1> .drErrorMain:
   310 00000864 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   311 00000867 488B7517            <1>     mov rsi, qword [rbp + bufferHdr.driveDPBPtr]
   312 0000086B 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   313 0000086F 668B3D(38000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]    ;Disk error occured!
   314 00000876 6681E7FF00          <1>     and di, 0FFh    ;Only bottom byte
   315 0000087B 66893D(CB000000)    <1>     mov word [errorExt], di     ;Save driver error code
   316 00000882 668105(CB000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   316 0000088A 00                  <1>
   317 0000088B 8805(C9000000)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   318 00000891 C605(CA000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   319 00000898 C605(CE000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad BPB or other) code
   320 0000089F C605(CD000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   321 000008A6 E852FDFFFF          <1>     call criticalDOSError       ;Critical error handler
   322 000008AB 84C0                <1>     test al, al ;Ignore the troublesome buffer and mark it as free
   323 000008AD 7406                <1>     jz .drIgnore
   324 000008AF 3C01                <1>     cmp al, 1   ;Retry flushing the buffer
   325 000008B1 7482                <1>     je .drFlushBuffer
   326 000008B3 CD43                <1>     int 43h     ;Abort and fail both abort through int 43h
   327                              <1> .drIgnore:
   328 000008B5 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1  ;Mark buffer as free
   329 000008B9 E97EFFFFFF          <1>     jmp .drGotoNextBuffer
   330                              <1> 
   331                              <1> selectDisk:        ;ah = 0Eh
   332                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   333 000008BE 8A05(0A000000)      <1>     mov al, byte [numLRemDrives]    ;Value 1 based
   334 000008C4 8A1D(99000000)      <1>     mov bl, byte [lastdrvNum]       ;Value 1 based
   335 000008CA FEC8                <1>     dec al
   336 000008CC FECB                <1>     dec bl
   337 000008CE 38C3                <1>     cmp bl, al
   338 000008D0 0F47C3              <1>     cmova eax, ebx    ;If bl > al, move bl to al
   339 000008D3 38C2                <1>     cmp dl, al  ;If dl is bigger than al
   340 000008D5 7707                <1>     ja .error
   341 000008D7 8815(F1000000)      <1>     mov byte [currentDrv], dl   ;Only save dl if it is a valid number
   342 000008DD C3                  <1>     ret ;al = lastdrv as retcode
   343                              <1> .error:
   344 000008DE 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   345 000008E5 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   346 000008ED B80F000000          <1>     mov eax, 15                 ;Invalid drive error
   347 000008F2 668905(CB000000)    <1>     mov word [errorExt], ax     
   348 000008F9 C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   349 00000900 C605(CE000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   350 00000907 C605(CD000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   351 0000090E C3                  <1>     ret
   352                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   353 0000090F 8A05(F1000000)      <1>     mov al, byte [currentDrv]
   354 00000915 C3                  <1>     ret
   355                              <1> FATinfoDefault:    ;ah = 1Bh
   356 00000916 30D2                <1>     xor dl, dl
   357                              <1> FATinfoDevice:     ;ah = 1Ch
   358                              <1> ;Return in:
   359                              <1> ;   al = Number of sectors per cluster
   360                              <1> ;   edx = Number of clusters
   361                              <1> ;   cx =  Size of a clsuter
   362 00000918 84D2                <1>     test dl, dl
   363 0000091A 7408                <1>     jz .fidSkipdefault
   364 0000091C 8A15(F1000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   365 00000922 EB02                <1>     jmp short .fidMain
   366                              <1> .fidSkipdefault:
   367 00000924 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   368                              <1> .fidMain:
   369                              <1> ;Walk the dpb chain manually
   370 00000926 E8FAFCFFFF          <1>     call findDPB    ;Get in rbp the dpb pointer for drive dl
   371 0000092B 84C0                <1>     test al, al
   372 0000092D 7431                <1>     jz .fidDPBFound
   373                              <1> ;Else, we at an error.
   374                              <1> ;Simply return with CY set and error code in al with extended error info
   375 0000092F 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   376 00000936 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   377 0000093E B80F000000          <1>     mov eax, 15                 ;Invalid drive error
   378 00000943 668905(CB000000)    <1>     mov word [errorExt], ax     
   379 0000094A C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   380 00000951 C605(CE000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   381 00000958 C605(CD000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   382 0000095F C3                  <1>     ret
   383                              <1> .fidDPBFound:
   384 00000960 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   385 00000963 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   386 00000965 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   387 00000968 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   388 0000096B BB01000000          <1>     mov ebx, 1
   389 00000970 D3E3                <1>     shl ebx, cl
   390 00000972 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   391 00000974 488D5D22            <1>     lea rbx, qword [rbp + dpb.bMediaDescriptor]
   392 00000978 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   393 0000097F 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   394 00000983 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   395 00000987 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   396 0000098B C3                  <1>     ret
   397                              <1> ;===============================
   398                              <1> setIntVector:      ;ah = 25h
   399                              <1> ;Called with:
   400                              <1> ;   rdx = Pointer to interrupt handler
   401                              <1> ;   al = Interrupt number
   402 0000098C 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   403 0000098E 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   404                              <1> ;First call to get default BIOS segement selector and attribute word
   405 00000994 88C3                <1>     mov bl, al  ;Set interrupt number 
   406 00000996 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   407 0000099B CD35                <1>     int 35h
   408 0000099D 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   409 0000099F 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   410                              <1> ;dx preserves the attribute word
   411 000009A1 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   412 000009A8 488B5D18            <1>     mov rbx, qword [rbp + callerFrame.rdx]  ;Pointer passed in rdx
   413 000009AC B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   414 000009B1 CD35                <1>     int 35h
   415                              <1> 
   416 000009B3 8A4500              <1>     mov al, byte [rbp + callerFrame.rax]    ;Preserve low byte of rax
   417 000009B6 C3                  <1>     ret
   418                              <1> createNewPSP:      ;ah = 26h
   419 000009B7 C3                  <1>     ret
   420                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   421 000009B8 8805(F3000000)      <1>     mov byte [verifyFlag], al
   422 000009BE 8025(F3000000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   423 000009C5 C3                  <1>     ret
   424                              <1> getDOSversion:     ;ah = 30h
   425 000009C6 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   426 000009CD 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   427 000009CF 886209              <1>     mov byte [rdx + callerFrame.rbx + 1], ah    ;Clear bh 
   428 000009D2 668B0527F6FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   429 000009D9 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save ax
   430 000009DC C3                  <1>     ret
   431                              <1> terminateStayRes:  ;ah = 31h
   432 000009DD C3                  <1>     ret
   433                              <1> ;-------------------------------------------
   434                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply calls int 41h ah = 32h with dl = 0
   435 000009DE 30D2                <1>     xor dl, dl
   436                              <1> getDeviceDPBptr:   ;ah = 32h
   437                              <1> ;On entry: dl = Drive number
   438                              <1> ;On exit: rbx = DPB pointer
   439 000009E0 84D2                <1>     test dl, dl
   440 000009E2 7508                <1>     jnz .gddpskipdefault
   441 000009E4 8A15(F1000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   442 000009EA EB02                <1>     jmp short .gddpcommon
   443                              <1> .gddpskipdefault:
   444                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   445 000009EC FECA                <1>     dec dl
   446                              <1> .gddpcommon:
   447 000009EE E832FCFFFF          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
   448 000009F3 84C0                <1>     test al, al
   449 000009F5 741F                <1>     jz .gddpMediaCheck
   450                              <1> ;Put in here error info
   451 000009F7 66C705(CB000000)0F- <1>     mov word [errorExt], 15 ;Invalid drive spec
   451 000009FF 00                  <1>
   452 00000A00 C605(CA000000)02    <1>     mov byte [errorLocus], 2    ;Block device driver
   453 00000A07 C605(CE000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   454 00000A0E C605(CD000000)07    <1>     mov byte [errorAction], 7   ;Retry after intervention
   455 00000A15 C3                  <1>     ret ;Return. al = -1
   456                              <1> .gddpMediaCheck:
   457                              <1> ;Media Check Section
   458 00000A16 C605(35000000)17    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   459 00000A1D 8815(36000000)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.unitnm], dl
   460 00000A23 C605(37000000)01    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   461 00000A2A 66C705(38000000)00- <1>     mov word [diskReqHdr + mediaCheckReqPkt.status], 0
   461 00000A32 00                  <1>
   462 00000A33 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   463 00000A36 8805(42000000)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.medesc], al
   464 00000A3C 88D0                <1>     mov al, dl  ;Save device number in al
   465 00000A3E 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr]
   466 00000A42 488D1D(35000000)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   467 00000A49 FF520A              <1>     call [rdx + drvHdr.strPtr]
   468 00000A4C FF5212              <1>     call [rdx + drvHdr.intPtr]
   469 00000A4F 66F705(38000000)00- <1>     test word [diskReqHdr + mediaCheckReqPkt.status], 8000h
   469 00000A57 80                  <1>
   470 00000A58 0F85EA000000        <1>     jnz .gddpError
   471 00000A5E 88C2                <1>     mov dl, al
   472 00000A60 803D(43000000)01    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 1 ;Certified no change
   473 00000A67 0F84B0000000        <1>     je .gddpretdbp
   474 00000A6D 803D(43000000)00    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 0
   475 00000A74 7512                <1>     jne .gddpBuildBPB   ;This means Media changed declared
   476 00000A76 E8CEF6FFFF          <1>     call findDirtyBufferForDrive
   477 00000A7B 48F7C3FFFFFFFF      <1>     test rbx, -1    ;This is the case if no dirty buffers for drive
   478 00000A82 0F8595000000        <1>     jne .gddpretdbp ;If there is a dirty buffer for the drive, dont build bpb
   479                              <1> .gddpBuildBPB:
   480                              <1> ;BPB Build Section, only here if need a new bpb, i.e. sure of a new device
   481 00000A88 E86CF6FFFF          <1>     call findLRUBuffer  ;Get lru buffer pointer in rbx
   482 00000A8D 3A5308              <1>     cmp dl, byte [rbx + bufferHdr.driveNumber]  ;Does buffer belong to old drv?
   483 00000A90 7414                <1>     je .gddpBuildBPBInvalidateBuffer    ;Yes, immediately invalidate data
   484                              <1>     ;If no, flush the data to disk.
   485                              <1> .gddpBuildBPBFlush:
   486 00000A92 4889EE              <1>     mov rsi, rbp    ;Save rbp as pointer to old dl drive dpb
   487 00000A95 4889DD              <1>     mov rbp, rbx    ;Get buffer header pointer in rbp
   488 00000A98 E809F6FFFF          <1>     call flushBuffer    ;Flush the buffer to disk, rbx preserved
   489 00000A9D 4889F5              <1>     mov rbp, rsi    ;Return old drive dpb pointer to rbp
   490 00000AA0 0F820F010000        <1>     jc .gddpErrorType2  ;rbx points to buffer header
   491                              <1> .gddpBuildBPBInvalidateBuffer:
   492                              <1>     ;Write new buffer header
   493 00000AA6 885308              <1>     mov byte [rbx + bufferHdr.driveNumber], dl
   494 00000AA9 C6430908            <1>     mov byte [rbx + bufferHdr.bufferFlags], dataBuffer
   495 00000AAD 48C7430A00000000    <1>     mov qword [rbx + bufferHdr.bufferLBA], 0
   496 00000AB5 C6431201            <1>     mov byte [rbx + bufferHdr.bufFATcopy], 1
   497 00000AB9 C7431300000000      <1>     mov dword [rbx + bufferHdr.bufFATsize], 0
   498 00000AC0 48896B17            <1>     mov qword [rbx + bufferHdr.driveDPBPtr], rbp
   499 00000AC4 488D5B20            <1>     lea rbx, qword [rbx + bufferHdr.dataarea]
   500                              <1>     ;Build BPB request
   501 00000AC8 C605(35000000)1E    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   502 00000ACF 8815(36000000)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.unitnm], dl
   503 00000AD5 C605(37000000)02    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   504 00000ADC 66C705(38000000)00- <1>     mov word [diskReqHdr + bpbBuildReqPkt.status], 0 
   504 00000AE4 00                  <1>
   505 00000AE5 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   506 00000AE8 8805(42000000)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.medesc], al
   507 00000AEE 48891D(43000000)    <1>     mov qword [diskReqHdr + bpbBuildReqPkt.bufptr], rbx ;Put lru pointer in rbx
   508 00000AF5 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   509 00000AF9 488D1D(35000000)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   510 00000B00 FF520A              <1>     call [rdx + drvHdr.strPtr]
   511 00000B03 FF5212              <1>     call [rdx + drvHdr.intPtr]
   512 00000B06 66F705(38000000)00- <1>     test word [diskReqHdr + bpbBuildReqPkt.status], 8000h
   512 00000B0E 80                  <1>
   513 00000B0F 7537                <1>     jnz .gddpError
   514 00000B11 488B35(4B000000)    <1>     mov rsi, qword [diskReqHdr + bpbBuildReqPkt.bpbptr]
   515                              <1>     ;rbp points to dpb so we good to go
   516                              <1>     ;Call int 41h ah=53h Build DPB without reentering Int 41h
   517                              <1>     ;Since this function doesnt modify the caller stack, it is safe to do so
   518 00000B18 E81B020000          <1>     call createDPB 
   519                              <1> .gddpretdbp: 
   520 00000B1D C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Clear access flag
   521 00000B21 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   522 00000B28 48896A08            <1>     mov qword [rdx + callerFrame.rbx], rbp  ;Here, all paths have rbp as dpbptr
   523 00000B2C 30C0                <1>     xor al, al  ;Set al = 0 to indicate rbx=dpb pointer
   524 00000B2E C3                  <1>     ret
   525                              <1> .gddpretdpbFail:
   526 00000B2F 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   527 00000B36 48814A5801000000    <1>     or qword [rdx + callerFrame.flags], 1   ;Set CF=CY
   528 00000B3E 66C705(CB000000)53- <1>     mov word [errorExt], 83 ;Fail on INT 44h error code
   528 00000B46 00                  <1>
   529 00000B47 C3                  <1>     ret
   530                              <1> .gddpError:
   531                              <1> ;Abort, Retry, Ignore are the only acceptible responses
   532                              <1> ;Entered with rbp = dpb for failing drive
   533                              <1> ;             rdx = driver header that caused fault
   534 00000B48 4889D6              <1>     mov rsi, rdx    ;rdx points to driver header in both cases
   535 00000B4B 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   536 00000B52 8A4318              <1>     mov al, byte [rbx + callerFrame.rdx]    ;Get low byte = dl = Drive number
   537 00000B55 88C2                <1>     mov dl, al  ;Save in dl
   538 00000B57 84C0                <1>     test al, al
   539 00000B59 7508                <1>     jnz .gddpE0
   540 00000B5B 8A05(F1000000)      <1>     mov al, byte [currentDrv]
   541 00000B61 EB02                <1>     jmp short .gddpE1
   542                              <1> .gddpE0:
   543 00000B63 FEC8                <1>     dec al
   544                              <1> .gddpE1:
   545 00000B65 B436                <1>     mov ah, 36h ;Read operation, data area, abort/retry/ignore, disk error
   546 00000B67 668B3D(38000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   547 00000B6E 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   548 00000B73 66893D(CB000000)    <1>     mov word [errorExt], di     ;Save driver error code
   549 00000B7A 668105(CB000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   549 00000B82 00                  <1>
   550 00000B83 8805(C9000000)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   551 00000B89 C605(CA000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   552 00000B90 C605(CE000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad BPB or other) code
   553 00000B97 C605(CD000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   554 00000B9E E85AFAFFFF          <1>     call criticalDOSError   ;Critical error handler
   555 00000BA3 84C0                <1>     test al, al
   556 00000BA5 0F8472FFFFFF        <1>     jz .gddpretdbp  ;Ignore error, return, rbp has old dpb pointer
   557 00000BAB 3C01                <1>     cmp al, 1
   558 00000BAD 0F842DFEFFFF        <1>     je getDeviceDPBptr ;Reenter the function, dl has drive code
   559 00000BB3 CD43                <1>     int 43h ;Else, restart DOS
   560                              <1> .gddpErrorType2:
   561                              <1> ;Error flushing the old buffer
   562                              <1> ;   rbx = Buffer header for data transfer
   563 00000BB5 B439                <1>     mov ah, 39h ;Write operation, abort/retry/ignore/fail, disk error
   564 00000BB7 807B0901            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dosBuffer
   565 00000BBB 7414                <1>     je .gddpErrorType2main
   566 00000BBD 80CC02              <1>     or ah, 2h   ;Set bit 1
   567 00000BC0 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   568 00000BC4 740B                <1>     je .gddpErrorType2main
   569 00000BC6 B43D                <1>     mov ah, 3Dh ;Set bit 2, clear bit 1
   570 00000BC8 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   571 00000BCC 7403                <1>     je .gddpErrorType2main
   572 00000BCE 80CC02              <1>     or ah, 2h   ;Set bit 2 and 1
   573                              <1> .gddpErrorType2main:    
   574 00000BD1 668B3D(38000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   575 00000BD8 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   576 00000BDD 66893D(CB000000)    <1>     mov word [errorExt], di     ;Save driver error code
   577 00000BE4 668105(CB000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   577 00000BEC 00                  <1>
   578 00000BED 8A4308              <1>     mov al, byte [rbx + bufferHdr.driveNumber]
   579 00000BF0 8805(C9000000)      <1>     mov byte [errorDrv], al
   580 00000BF6 C605(CA000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   581 00000BFD C605(CE000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad disk write) code
   582 00000C04 C605(CD000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   583 00000C0B 488B7317            <1>     mov rsi, qword [rbx + bufferHdr.driveDPBPtr]
   584 00000C0F 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get device driver header in rsi
   585 00000C13 E8E5F9FFFF          <1>     call criticalDOSError   ;Critical error handler
   586 00000C18 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   587 00000C1C 7420                <1>     je .gddpErrorType2FatDir
   588 00000C1E 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   589 00000C22 741A                <1>     je .gddpErrorType2FatDir
   590 00000C24 84C0                <1>     test al, al
   591 00000C26 0F847AFEFFFF        <1>     jz .gddpBuildBPBInvalidateBuffer ;Ignore error, invalidate data
   592 00000C2C 3C01                <1>     cmp al, 1
   593 00000C2E 0F845EFEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   594 00000C34 3C03                <1>     cmp al, 3
   595 00000C36 0F84F3FEFFFF        <1>     je .gddpretdpbFail
   596 00000C3C CD43                <1>     int 43h ;al = 2, means just abort
   597                              <1> .gddpErrorType2FatDir:
   598 00000C3E 84C0                <1>     test al, al ;Ignore converted to fail
   599 00000C40 0F84E9FEFFFF        <1>     jz .gddpretdpbFail
   600 00000C46 3C01                <1>     cmp al, 1
   601 00000C48 0F8444FEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   602 00000C4E 3C03                <1>     cmp al, 3
   603 00000C50 0F84D9FEFFFF        <1>     je .gddpretdpbFail
   604 00000C56 CD43                <1>     int 43h ;al = 2, means just abort
   605                              <1> ;-------------------------------------------
   606                              <1> 
   607                              <1> ctrlBreakCheck:    ;ah = 33h
   608 00000C58 84C0                <1>     test al, al
   609 00000C5A 7406                <1>     jz .cbcget  ;Get the state
   610 00000C5C 8815(F2000000)      <1>     mov byte [breakFlag], dl    ;Set the state
   611                              <1> .cbcget:
   612 00000C62 8A15(F2000000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   613 00000C68 C3                  <1>     ret
   614                              <1> getInDOSflagPtr:   ;ah = 34h
   615 00000C69 488D15(C8000000)    <1>     lea rdx, inDOS
   616 00000C70 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   617 00000C77 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;save ptr in rbx
   618 00000C7B C3                  <1>     ret
   619                              <1> getIntVector:      ;ah = 35h
   620                              <1> ;Called with:
   621                              <1> ;   al = Interrupt Number
   622                              <1> ;Returns:
   623                              <1> ;   rbx = Pointer to interrupt handler
   624 00000C7C 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   625 00000C7E B807F00000          <1>     mov eax, 0F007h
   626 00000C83 CD35                <1>     int 35h
   627 00000C85 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   628 00000C8C 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx  ;Save pointer in rbx
   629 00000C90 8A02                <1>     mov al, byte [rdx + callerFrame.rax]    ;Get the low byte in al
   630 00000C92 C3                  <1>     ret
   631                              <1> getDiskFreeSpace:  ;ah = 36h
   632 00000C93 84D2                <1>     test dl, dl
   633 00000C95 7408                <1>     jz .gdfsSkipdefault
   634 00000C97 8A15(F1000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   635 00000C9D EB02                <1>     jmp short .gdfsMain
   636                              <1> .gdfsSkipdefault:
   637 00000C9F FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   638                              <1> .gdfsMain:
   639 00000CA1 E87FF9FFFF          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
   640 00000CA6 84C0                <1>     test al, al
   641 00000CA8 7434                <1>     jz .gdfsDPBFound
   642                              <1> ;Else, we at an error.
   643                              <1> ;Simply return with CY set and error code in al with extended error info
   644 00000CAA 66C705(CB000000)0F- <1>     mov word [errorExt], 15     ;Invalid drive error
   644 00000CB2 00                  <1>
   645 00000CB3 C605(CA000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   646 00000CBA C605(CE000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   647 00000CC1 C605(CD000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   648 00000CC8 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   649 00000CCF 66C74500FFFF        <1>     mov word [rbp + callerFrame.rax], -1    ;Set ax=FFFFh
   650 00000CD5 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set CF=CY
   651 00000CDD C3                  <1>     ret
   652                              <1> .gdfsDPBFound:
   653 00000CDE 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   654 00000CE1 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   655 00000CE3 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   656 00000CE6 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   657 00000CE9 BB01000000          <1>     mov ebx, 1
   658 00000CEE D3E3                <1>     shl ebx, cl
   659 00000CF0 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   660 00000CF2 8B5D30              <1>     mov ebx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   661 00000CF5 488B2D(08010000)    <1>     mov rbp, qword [oldRSP]
   662 00000CFC 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   663 00000D00 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   664 00000D04 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   665 00000D08 C3                  <1>     ret
   666                              <1> 
   667                              <1> loadExecChild:     ;ah = 4Bh, EXEC
   668                              <1> terminateClean:    ;ah = 4Ch, EXIT
   669                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   670 00000D09 C3                  <1>     ret
   671                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   672 00000D0A 48891D(D7000000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   673 00000D11 C3                  <1>     ret
   674                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   675 00000D12 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   676 00000D19 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   677 00000D20 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx   ;Set the caller pointer
   678 00000D24 C3                  <1>     ret 
   679                              <1> getSysVarsPtr:     ;ah = 52h
   680 00000D25 488D15(67000000)    <1>     lea rdx, sysVarsPtr
   681 00000D2C 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   682 00000D33 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx
   683 00000D37 C3                  <1>     ret
   684                              <1> createDPB:         ;ah = 53h, generates a DPB from a given BPB
   685                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   686                              <1> ;This is done so that the other fields of the DPB can be recycled
   687                              <1> ;Input: rsi = ptr to the BPB
   688                              <1> ;       rbp = ptr to the DPB
   689                              <1> ;bMediaDescriptor
   690 00000D38 8A4615              <1>     mov al, byte [rsi + bpb.media]
   691 00000D3B 884522              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   692                              <1> ;bAccessFlag
   693 00000D3E C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Not accessed
   694                              <1> ;dFirstFreeCluster
   695 00000D42 C7452C00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   696                              <1> ;dNumberOfFreeClusters
   697 00000D49 C74530FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   698                              <1> ;bBytesPerSectorShift
   699 00000D50 668B460B            <1>     mov ax, word [rsi + bpb.bytsPerSec]
   700 00000D54 B107                <1>     mov cl, 7   ;Start with 128 byte sectors (not supported, min 512)
   701 00000D56 66D3E8              <1>     shr ax, cl  ;Shift down
   702                              <1> .cd0:
   703 00000D59 66D1E8              <1>     shr ax, 1
   704 00000D5C 7404                <1>     jz .cd1
   705 00000D5E FEC1                <1>     inc cl
   706 00000D60 EBF7                <1>     jmp short .cd0
   707                              <1> .cd1:
   708 00000D62 884D02              <1>     mov byte [rbp + dpb.bBytesPerSectorShift], cl
   709                              <1> ;bMaxSectorInCluster
   710 00000D65 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   711 00000D68 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   712 00000D6A 884503              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   713                              <1> ;bSectorsPerClusterShift
   714 00000D6D FEC0                <1>     inc al
   715 00000D6F 30C9                <1>     xor cl, cl
   716                              <1> .cd2:
   717 00000D71 D0E8                <1>     shr al, 1
   718 00000D73 7404                <1>     jz .cd3
   719 00000D75 FEC1                <1>     inc cl
   720 00000D77 EBF8                <1>     jmp short .cd2
   721                              <1> .cd3:
   722 00000D79 884D04              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   723                              <1> ;wFAToffset, number of reserved sectors in partition
   724 00000D7C 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   725 00000D80 66894505            <1>     mov word [rbp + dpb.wFAToffset], ax
   726                              <1> ;bNumberOfFATs
   727 00000D84 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   728 00000D87 884507              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   729                              <1> ;wNumberRootDirSectors
   730 00000D8A 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   731 00000D8E C1E005              <1>     shl eax, 5  ;Multiply by 32
   732 00000D91 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   733 00000D95 FFC9                <1>     dec ecx
   734 00000D97 01C8                <1>     add eax, ecx
   735 00000D99 31D2                <1>     xor edx, edx    ;Clear for divide
   736 00000D9B F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   737 00000D9D 66894508            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   738                              <1> ;dFATlength, get the FAT length
   739 00000DA1 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   740 00000DA5 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   741 00000DA8 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   742 00000DAA 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   743 00000DAD 894512              <1>     mov dword [rbp + dpb.dFATlength], eax
   744                              <1> ;Complex cases below...
   745                              <1> ;dClusterHeapOffset, start sector of the data area
   746 00000DB0 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   747 00000DB4 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   748 00000DB7 85C0                <1>     test eax, eax
   749 00000DB9 0F44C3              <1>     cmovz eax, ebx
   750                              <1> ;eax = FATsz
   751 00000DBC 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   752 00000DC0 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   753 00000DC3 85DB                <1>     test ebx, ebx
   754 00000DC5 0F44D9              <1>     cmovz ebx, ecx 
   755                              <1> ;ebx = TotSec
   756 00000DC8 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   757 00000DCB 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   758                              <1> .cd4:
   759 00000DCD 01C2                <1>     add edx, eax
   760 00000DCF FEC9                <1>     dec cl
   761 00000DD1 75FA                <1>     jnz .cd4
   762 00000DD3 89D0                <1>     mov eax, edx    ;Store product in eax
   763 00000DD5 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   764 00000DD9 01D0                <1>     add eax, edx
   765 00000DDB 0FB75508            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   766 00000DDF 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   767                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   768                              <1>     ;aka eax = Start sector of the data area in volume
   769 00000DE1 89450A              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   770                              <1> ;dClusterCount
   771 00000DE4 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   772 00000DE6 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   773 00000DE8 31D2                <1>     xor edx, edx
   774 00000DEA BB01000000          <1>     mov ebx, 1
   775 00000DEF 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   776 00000DF2 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   777 00000DF4 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   778 00000DF6 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   779 00000DF8 89450E              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   780                              <1> ;dFirstUnitOfRootDir
   781 00000DFB 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   782 00000E00 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   783 00000E03 7709                <1>     ja .cd5
   784                              <1>     ;Else, we need to find the first sector of the root directory
   785                              <1>     ;Get the start sector of data area in volume 
   786                              <1>     ; and sub the number of sectors in the root directory
   787 00000E05 8B450A              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   788 00000E08 0FB75D08            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   789 00000E0C 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   790                              <1> .cd5:
   791 00000E0E 894516              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   792                              <1> ;Exit epilogue
   793 00000E11 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   794 00000E18 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   795 00000E1A C3                  <1>     ret
   796                              <1> getVerifySetting:  ;ah = 54h
   797 00000E1B 8A05(F3000000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   798 00000E21 C3                  <1>     ret
   799                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   800 00000E22 C3                  <1>     ret
   801                              <1> getExtendedError:  ;ah = 59h
   802 00000E23 488B15(08010000)    <1>     mov rdx, qword [oldRSP]
   803 00000E2A 668B05(CB000000)    <1>     mov ax, word [errorExt]
   804 00000E31 8A2D(CA000000)      <1>     mov ch, byte [errorLocus]
   805 00000E37 8A3D(CE000000)      <1>     mov bh, byte [errorClass]
   806 00000E3D 8A1D(CD000000)      <1>     mov bl, byte [errorAction]
   807 00000E43 668902              <1>     mov word [rdx + callerFrame.rax], ax
   808 00000E46 66895A08            <1>     mov word [rdx + callerFrame.rbx], bx
   809 00000E4A 886A11              <1>     mov byte [rdx + callerFrame.rcx + 1], ch
   810 00000E4D C3                  <1>     ret
   811                              <1> getCritErrorInfo:  ;ah = 5Dh
   812                              <1> networkServices:   ;ah = 5Eh, do nothing
   813                              <1> networkRedirection:;ah = 5Fh, do nothing
   814 00000E4E C3                  <1>     ret
   815                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   816 00000E4F 488B1D(08010000)    <1>     mov rbx, qword [oldRSP]
   817 00000E56 488B15(D7000000)    <1>     mov rdx, qword [currentPSP]
   818 00000E5D 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;Save the current psp in rbx
   819 00000E61 C3                  <1>     ret
   820                              <1>                     ;ah = 63h, reserved
   821                              <1> setDriverLookahead:;ah = 64h, reserved
   822                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   823                              <1> return:
   824 00000E62 C3                  <1>     ret
   825                              <1> 
   826                              <1> kernelDispatchTable:
   827 00000E63 [2708000000000000]  <1>     dq simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   828 00000E6B [0B03000000000000]  <1>     dq stdinReadEcho       ;AH = 01H, CHAR IO
   829 00000E73 [8003000000000000]  <1>     dq stdoutWrite         ;AH = 02H, CHAR IO
   830 00000E7B [BA03000000000000]  <1>     dq stdauxRead          ;AH = 03H, CHAR IO
   831 00000E83 [BA03000000000000]  <1>     dq stdauxWrite         ;AH = 04H, CHAR IO
   832 00000E8B [BA03000000000000]  <1>     dq stdprnWrite         ;AH = 05H, CHAR IO
   833 00000E93 [BA03000000000000]  <1>     dq directCONIO         ;AH = 06H, CHAR IO
   834 00000E9B [BA03000000000000]  <1>     dq waitDirectInNoEcho  ;AH = 07H, CHAR IO
   835 00000EA3 [F403000000000000]  <1>     dq waitStdinNoEcho     ;AH = 08H, CHAR IO
   836 00000EAB [F503000000000000]  <1>     dq printString         ;AH = 09H, CHAR IO
   837 00000EB3 [3704000000000000]  <1>     dq buffStdinInput      ;AH = 0AH, CHAR IO
   838 00000EBB [3704000000000000]  <1>     dq checkStdinStatus    ;AH = 0BH, CHAR IO
   839 00000EC3 [3704000000000000]  <1>     dq clearbuffDoFunc     ;AH = 0CH, CHAR IO
   840 00000ECB [2808000000000000]  <1>     dq diskReset           ;AH = 0DH, DISK MANAGEMENT
   841 00000ED3 [BE08000000000000]  <1>     dq selectDisk          ;AH = 0EH, DISK MANAGEMENT
   842 00000EDB [3704000000000000]  <1>     dq openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   843 00000EE3 [3704000000000000]  <1>     dq closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   844 00000EEB [3704000000000000]  <1>     dq findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   845 00000EF3 [3704000000000000]  <1>     dq findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   846 00000EFB [3704000000000000]  <1>     dq deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   847 00000F03 [3704000000000000]  <1>     dq sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   848 00000F0B [3704000000000000]  <1>     dq sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   849 00000F13 [3704000000000000]  <1>     dq createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   850 00000F1B [3704000000000000]  <1>     dq renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   851 00000F23 [620E000000000000]  <1>     dq return              ;AH = 18H, RESERVED
   852 00000F2B [0F09000000000000]  <1>     dq getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   853 00000F33 [3804000000000000]  <1>     dq setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   854 00000F3B [1609000000000000]  <1>     dq FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   855 00000F43 [1809000000000000]  <1>     dq FATinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   856 00000F4B [620E000000000000]  <1>     dq return              ;AH = 1DH, RESERVED
   857 00000F53 [620E000000000000]  <1>     dq return              ;AH = 1EH, RESERVED
   858 00000F5B [DE09000000000000]  <1>     dq getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   859 00000F63 [620E000000000000]  <1>     dq return              ;AH = 20H, RESERVED
   860 00000F6B [4B04000000000000]  <1>     dq randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   861 00000F73 [4B04000000000000]  <1>     dq randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   862 00000F7B [4B04000000000000]  <1>     dq getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   863 00000F83 [4B04000000000000]  <1>     dq setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   864 00000F8B [8C09000000000000]  <1>     dq setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   865 00000F93 [B709000000000000]  <1>     dq createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   866 00000F9B [4B04000000000000]  <1>     dq randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   867 00000FA3 [4B04000000000000]  <1>     dq randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   868 00000FAB [4B04000000000000]  <1>     dq parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   869 00000FB3 [FB05000000000000]  <1>     dq getDate             ;AH = 2AH, TIME AND DATE
   870 00000FBB [FB05000000000000]  <1>     dq setDate             ;AH = 2BH, TIME AND DATE
   871 00000FC3 [FB05000000000000]  <1>     dq getTime             ;AH = 2CH, TIME AND DATE
   872 00000FCB [FB05000000000000]  <1>     dq setTime             ;AH = 2DH, TIME AND DATE
   873 00000FD3 [B809000000000000]  <1>     dq setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   874 00000FDB [4C04000000000000]  <1>     dq getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   875 00000FE3 [C609000000000000]  <1>     dq getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   876 00000FEB [DD09000000000000]  <1>     dq terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   877 00000FF3 [E009000000000000]  <1>     dq getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   878 00000FFB [580C000000000000]  <1>     dq ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   879 00001003 [690C000000000000]  <1>     dq getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   880 0000100B [7C0C000000000000]  <1>     dq getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   881 00001013 [930C000000000000]  <1>     dq getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   882 0000101B [FC05000000000000]  <1>     dq getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   883 00001023 [FC05000000000000]  <1>     dq getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   884 0000102B [0A03000000000000]  <1>     dq makeDIR             ;AH = 39H, DIRECTORY OPERATION
   885 00001033 [0A03000000000000]  <1>     dq removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   886 0000103B [0A03000000000000]  <1>     dq changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   887 00001043 [5F04000000000000]  <1>     dq createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   888 0000104B [5F04000000000000]  <1>     dq openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   889 00001053 [5F04000000000000]  <1>     dq closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   890 0000105B [6004000000000000]  <1>     dq readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   891 00001063 [9904000000000000]  <1>     dq writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   892 0000106B [AA04000000000000]  <1>     dq deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
   893 00001073 [AA04000000000000]  <1>     dq movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
   894 0000107B [AA04000000000000]  <1>     dq changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
   895 00001083 [AA04000000000000]  <1>     dq ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
   896 0000108B [AA04000000000000]  <1>     dq duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
   897 00001093 [AA04000000000000]  <1>     dq forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
   898 0000109B [0A03000000000000]  <1>     dq getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
   899 000010A3 [8F05000000000000]  <1>     dq allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
   900 000010AB [8F05000000000000]  <1>     dq freeMemory          ;AH = 49H, MEMORY MANAGEMENT
   901 000010B3 [8F05000000000000]  <1>     dq reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
   902 000010BB [090D000000000000]  <1>     dq loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
   903 000010C3 [090D000000000000]  <1>     dq terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
   904 000010CB [090D000000000000]  <1>     dq getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
   905 000010D3 [AA04000000000000]  <1>     dq findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
   906 000010DB [AA04000000000000]  <1>     dq findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
   907 000010E3 [0A0D000000000000]  <1>     dq setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   908 000010EB [120D000000000000]  <1>     dq getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   909 000010F3 [250D000000000000]  <1>     dq getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   910 000010FB [380D000000000000]  <1>     dq createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   911 00001103 [1B0E000000000000]  <1>     dq getVerifySetting    ;AH = 54H, DISK MANAGEMENT
   912 0000110B [220E000000000000]  <1>     dq createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   913 00001113 [AA04000000000000]  <1>     dq renameFile          ;AH = 56H, FILE OPERATION       HANDLE
   914 0000111B [0A03000000000000]  <1>     dq getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
   915 00001123 [8F05000000000000]  <1>     dq getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
   916 0000112B [230E000000000000]  <1>     dq getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
   917 00001133 [AA04000000000000]  <1>     dq createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
   918 0000113B [AA04000000000000]  <1>     dq createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
   919 00001143 [AA04000000000000]  <1>     dq lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
   920 0000114B [4E0E000000000000]  <1>     dq getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   921 00001153 [4E0E000000000000]  <1>     dq networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
   922 0000115B [4E0E000000000000]  <1>     dq networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
   923 00001163 [0A03000000000000]  <1>     dq trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   924 0000116B [620E000000000000]  <1>     dq return              ;AH = 61H, RESERVED
   925 00001173 [4F0E000000000000]  <1>     dq getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
   926 0000117B [620E000000000000]  <1>     dq return              ;AH = 63H, RESERVED
   927 00001183 [620E000000000000]  <1>     dq setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   928 0000118B [FC05000000000000]  <1>     dq getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
   929 00001193 [FC05000000000000]  <1>     dq getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
   930 0000119B [AA04000000000000]  <1>     dq setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
   931 000011A3 [AA04000000000000]  <1>     dq commitFile          ;AH = 68H, FILE OPERATION       HANDLE
   932 000011AB [620E000000000000]  <1>     dq getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   933                              <1> kernelDispatchTableL  equ $ - kernelDispatchTable 
    23                                  %include "./Source/Misc/int44h.asm"
    24                              <1> critErrorHandler:   ;Int 44h
    25                              <1> ;User Stack in usage here, must be swapped to before this is called
    26                              <1> ;Entered with:  
    27                              <1> ;               AH = Critical Error Bitfield
    28                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    29                              <1> ;               Bit 6 - Reserved
    30                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    31                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    32                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    33                              <1> ;               Bits [2-1] = Affected Disk Error
    34                              <1> ;                     0 0   DOS area
    35                              <1> ;                     0 1   FAT area
    36                              <1> ;                     1 0   Directory area
    37                              <1> ;                     1 1   Data area
    38                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    39                              <1> ;               AL  = Failing drive number if AH[7] = 0
    40                              <1> ;               DIL = Error code for errorMsg
    41                              <1> ;               RSI = EA of Device Header for which device the error occured
    42                              <1> ;Return:
    43                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    44                              <1> ;                  = 1 - Retry the Operation    (Retry)
    45                              <1> ;                  = 2 - Terminate the Program  (Abort)
    46                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    47 000011B3 53                  <1>     push rbx
    48 000011B4 51                  <1>     push rcx
    49 000011B5 52                  <1>     push rdx
    50 000011B6 57                  <1>     push rdi
    51 000011B7 56                  <1>     push rsi
    52 000011B8 FC                  <1>     cld         ;Make String ops go forward
    53                              <1> 
    54 000011B9 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    55 000011BC 488D155E020000      <1>     lea rdx, qword [.crlf]
    56 000011C3 B409                <1>     mov ah, 09h ;Print String
    57 000011C5 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    58                              <1> 
    59 000011C7 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    60 000011CD B90C000000          <1>     mov ecx, 0Ch
    61 000011D2 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    62 000011D4 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    63 000011D7 480FB7FF            <1>     movzx rdi, di
    64 000011DB 4889FA              <1>     mov rdx, rdi    ;Copy error code
    65 000011DE 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    66 000011E2 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    67 000011E5 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    68 000011E8 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    69 000011EF 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    70 000011F3 B409                <1>     mov ah, 09h ;Print String
    71 000011F5 CD41                <1>     int 41h     ;Call DOS to print first part of message
    72                              <1> 
    73 000011F7 488D1505020000      <1>     lea rdx, qword [.readmsg]
    74 000011FE 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    75 00001205 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    76 00001208 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    77 0000120C B409                <1>     mov ah, 09h ;Print String
    78 0000120E CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    79                              <1> 
    80 00001210 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    81 00001213 0F85DF000000        <1>     jnz .charError
    82                              <1> ;Disk error continues here
    83 00001219 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    84 00001220 B409                <1>     mov ah, 09h
    85 00001222 CD41                <1>     int 41h
    86 00001224 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    87 00001226 80C241              <1>     add dl, "A" ;Add ASCII code
    88 00001229 B402                <1>     mov ah, 02h ;Print char in dl
    89 0000122B CD41                <1>     int 41h
    90                              <1> .userInput:
    91 0000122D 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
    92 00001234 B409                <1>     mov ah, 09h
    93 00001236 CD41                <1>     int 41h
    94                              <1> ;Abort, Retry, Ignore, Fail is word order
    95                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    96                              <1> .userAbort:
    97                              <1> ;Abort is always an option
    98 00001238 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
    99 0000123F B409                <1>     mov ah, 09h
   100 00001241 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   101                              <1> .userRetry:
   102 00001243 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   103 00001246 7416                <1>     jz .userIgnore    ;If clear, dont print message
   104 00001248 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   105 0000124F B409                <1>     mov ah, 09h
   106 00001251 CD41                <1>     int 41h
   107 00001253 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   108 0000125A B409                <1>     mov ah, 09h
   109 0000125C CD41                <1>     int 41h
   110                              <1> .userIgnore:
   111 0000125E F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   112 00001261 7416                <1>     jz .userFail
   113 00001263 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   114 0000126A B409                <1>     mov ah, 09h
   115 0000126C CD41                <1>     int 41h
   116 0000126E 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   117 00001275 B409                <1>     mov ah, 09h
   118 00001277 CD41                <1>     int 41h
   119                              <1> .userFail:
   120 00001279 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   121 0000127C 7416                <1>     jz .userMsgEnd
   122 0000127E 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   123 00001285 B409                <1>     mov ah, 09h
   124 00001287 CD41                <1>     int 41h
   125 00001289 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   126 00001290 B409                <1>     mov ah, 09h
   127 00001292 CD41                <1>     int 41h
   128                              <1> .userMsgEnd:
   129 00001294 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   130 0000129B B409                <1>     mov ah, 09h
   131 0000129D CD41                <1>     int 41h
   132                              <1> ;Get user input now 
   133 0000129F 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   134 000012A1 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   135 000012A8 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   136 000012AA CD41                <1>     int 41h ;Get char in al
   137 000012AC 3C61                <1>     cmp al, "a" ;Chack if lowercase
   138 000012AE 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   139 000012B0 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   140                              <1> .uip1:
   141 000012B2 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   142 000012B3 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   143 000012B5 FFC1                <1>     inc ecx
   144 000012B7 81F904000000        <1>     cmp ecx, 4
   145 000012BD 75F3                <1>     jne .uip1
   146 000012BF E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   147                              <1> .validInput:
   148 000012C4 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   149                              <1> ;Now check if the input is permitted
   150 000012C6 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   151 000012C8 7427                <1>     je .cehExit
   152 000012CA 84C0                <1>     test al, al ;Check if 0 => Ignore
   153 000012CC 740F                <1>     je .viIgnore
   154 000012CE 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   155 000012D0 7416                <1>     je .viRetry
   156                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   157 000012D2 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   158 000012D5 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   159 000012DB EB14                <1>     jmp short .cehExit
   160                              <1> .viIgnore:
   161 000012DD F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   162 000012E0 0F8447FFFFFF        <1>     jz .userInput
   163 000012E6 EB09                <1>     jmp short .cehExit
   164                              <1> .viRetry:
   165 000012E8 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   166 000012EB 0F843CFFFFFF        <1>     jz .userInput
   167                              <1> .cehExit:
   168 000012F1 5E                  <1>     pop rsi
   169 000012F2 5F                  <1>     pop rdi
   170 000012F3 5A                  <1>     pop rdx
   171 000012F4 59                  <1>     pop rcx
   172 000012F5 5B                  <1>     pop rbx
   173 000012F6 48CF                <1>     iretq
   174                              <1> .charError:
   175 000012F8 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   176 000012FD 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   177                              <1> .ce1:
   178 00001304 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   179 00001305 88C2                <1>     mov dl, al  ;Move char into dl
   180 00001307 B402                <1>     mov ah, 02h
   181 00001309 CD41                <1>     int 41h ;Print char
   182 0000130B E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   183 0000130D E91BFFFFFF          <1>     jmp .userInput
   184                              <1> 
   185                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   186 00001312 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   186 0000131B 746563742024202020  <1>
   187 00001324 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   187 0000132D 6E6974202420202020  <1>
   188 00001336 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   188 0000133F 202420202020202020  <1>
   189 00001348 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   189 00001351 6F6D6D616E64202420  <1>
   190 0000135A 446174612024202020- <1>             db "Data $            "       ;Error 4
   190 00001363 202020202020202020  <1>
   191 0000136C 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   191 00001375 737420242020202020  <1>
   192 0000137E 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   192 00001387 202020202020202020  <1>
   193 00001390 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   193 00001399 656469612024202020  <1>
   194 000013A2 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   194 000013AB 7420466F756E642024  <1>
   195 000013B4 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   195 000013BD 706572202420202020  <1>
   196 000013C6 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   196 000013CF 6C7420242020202020  <1>
   197 000013D8 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   197 000013E1 742024202020202020  <1>
   198 000013EA 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   198 000013F3 61696C757265202420  <1>
   199                              <1> 
   200 000013FC 64726976652024      <1> .drive      db "drive $"
   201 00001403 6572726F7220726561- <1> .readmsg    db "error reading $"
   201 0000140C 64696E672024        <1>
   202 00001412 6572726F7220777269- <1> .writemsg   db "error writing $"
   202 0000141B 74696E672024        <1>
   203 00001421 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   204 00001424 41626F727424        <1> .abortmsg   db "Abort$" 
   205 0000142A 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   206 00001431 526574727924        <1> .retrymsg   db "Retry$"
   207 00001437 4661696C24          <1> .failmsg    db "Fail$"
   208 0000143C 2C2024              <1> .betweenMsg db ", $"
   209 0000143F 3F2024              <1> .endMsg     db "? $"
   210 00001442 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    24                                  %include "./Source/Drivers/drvData.asm"
    25                              <1> ;-----------------------------------:
    26                              <1> ;          Driver routines          :
    27                              <1> ;-----------------------------------:
    28                              <1> drivers:
    29                              <1> conHdr:
    30 00001446 [6814000000000000]  <1>     dq auxHdr
    31 0000144E 1308                <1>     dw 0813h
    32 00001450 [E615000000000000]  <1>     dq commonStrat
    33 00001458 [F515000000000000]  <1>     dq conDriver
    34 00001460 434F4E2020202020    <1>     db "CON     "
    35                              <1> auxHdr:
    36 00001468 [8A14000000000000]  <1>     dq prnHdr
    37 00001470 0080                <1>     dw 08000h
    38 00001472 [E615000000000000]  <1>     dq commonStrat
    39 0000147A [BA18000000000000]  <1>     dq com1Intr
    40 00001482 4155582020202020    <1>     db "AUX     "
    41                              <1> prnHdr:
    42 0000148A [AC14000000000000]  <1>     dq clkHdr
    43 00001492 40A0                <1>     dw 0A040h
    44 00001494 [EE15000000000000]  <1>     dq nulStrat
    45 0000149C [F415000000000000]  <1>     dq nulIntr
    46 000014A4 50524E2020202020    <1>     db "PRN     "
    47                              <1> clkHdr:
    48 000014AC [CE14000000000000]  <1>     dq msdHdr
    49 000014B4 0880                <1>     dw 08008h
    50 000014B6 [E615000000000000]  <1>     dq commonStrat
    51 000014BE [2D17000000000000]  <1>     dq clkDriver
    52 000014C6 434C4F434B242020    <1>     db "CLOCK$  "
    53                              <1> msdHdr:
    54 000014CE [F014000000000000]  <1>     dq com1Hdr
    55 000014D6 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    56 000014D8 [E615000000000000]  <1>     dq commonStrat
    57 000014E0 [5F1A000000000000]  <1>     dq msdDriver
    58 000014E8 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    59                              <1> com1Hdr:
    60 000014F0 [1215000000000000]  <1>     dq com2Hdr
    61 000014F8 0080                <1>     dw 08000h
    62 000014FA [E615000000000000]  <1>     dq commonStrat
    63 00001502 [BA18000000000000]  <1>     dq com1Intr
    64 0000150A 434F4D3120202020    <1>     db "COM1    "
    65                              <1> com2Hdr:
    66 00001512 [3415000000000000]  <1>     dq com3Hdr
    67 0000151A 0080                <1>     dw 08000h
    68 0000151C [E615000000000000]  <1>     dq commonStrat
    69 00001524 [C318000000000000]  <1>     dq com2Intr
    70 0000152C 434F4D3220202020    <1>     db "COM2    "
    71                              <1> com3Hdr:
    72 00001534 [5615000000000000]  <1>     dq com4Hdr
    73 0000153C 0080                <1>     dw 08000h
    74 0000153E [E615000000000000]  <1>     dq commonStrat
    75 00001546 [CC18000000000000]  <1>     dq com3Intr
    76 0000154E 434F4D3320202020    <1>     db "COM3    "
    77                              <1> com4Hdr:
    78 00001556 [7815000000000000]  <1>     dq lpt1Hdr
    79 0000155E 0080                <1>     dw 08000h
    80 00001560 [E615000000000000]  <1>     dq commonStrat
    81 00001568 [D518000000000000]  <1>     dq com4Intr
    82 00001570 434F4D3420202020    <1>     db "COM4    "
    83                              <1> lpt1Hdr:
    84 00001578 [9A15000000000000]  <1>     dq lpt2Hdr
    85 00001580 40A0                <1>     dw 0A040h
    86 00001582 [EE15000000000000]  <1>     dq nulStrat
    87 0000158A [F415000000000000]  <1>     dq nulIntr
    88 00001592 4C50543120202020    <1>     db "LPT1    "
    89                              <1> lpt2Hdr:
    90 0000159A [BC15000000000000]  <1>     dq lpt3Hdr
    91 000015A2 40A0                <1>     dw 0A040h
    92 000015A4 [EE15000000000000]  <1>     dq nulStrat
    93 000015AC [F415000000000000]  <1>     dq nulIntr
    94 000015B4 4C50543220202020    <1>     db "LPT2    "
    95                              <1> lpt3Hdr:
    96 000015BC FFFFFFFFFFFFFFFF    <1>     dq -1
    97 000015C4 40A0                <1>     dw 0A040h
    98 000015C6 [EE15000000000000]  <1>     dq nulStrat
    99 000015CE [F415000000000000]  <1>     dq nulIntr
   100 000015D6 4C50543320202020    <1>     dq "LPT3    "
   101 000015DE 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    25                                  %include "./Source/Drivers/charDrv.asm"
    26                              <1> commonStrat:
    27                              <1> ;DOS calls this function with rbx=Ptr to request header
    28 000015E6 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    29 000015ED C3                  <1>     ret
    30                              <1> nulStrat:
    31 000015EE 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    32                              <1> nulIntr:
    33 000015F4 C3                  <1>     ret
    34                              <1> conDriver:
    35 000015F5 50                  <1>     push rax
    36 000015F6 53                  <1>     push rbx
    37 000015F7 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    38 000015FE B003                <1>     mov al, 03h ;Unknown Command
    39 00001600 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    40 00001604 7735                <1>     ja .conWriteErrorCode ;If yes, error!
    41                              <1> 
    42 00001606 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    43 00001609 3C04                <1>     cmp al, 4
    44 0000160B 743D                <1>     jz .conRead
    45 0000160D 3C05                <1>     cmp al, 5
    46 0000160F 747F                <1>     jz .conNondestructiveRead
    47 00001611 3C06                <1>     cmp al, 6
    48 00001613 0F84A8000000        <1>     jz .conInputStatus
    49 00001619 3C07                <1>     cmp al, 7
    50 0000161B 0F84B0000000        <1>     jz .conFlushInputBuffers
    51 00001621 3C08                <1>     cmp al, 8
    52 00001623 0F84CA000000        <1>     jz .conWrite
    53 00001629 3C09                <1>     cmp al, 9
    54 0000162B 0F84C2000000        <1>     jz .conWrite
    55 00001631 3C0A                <1>     cmp al, 0Ah
    56 00001633 0F84E3000000        <1>     jz .conOutputStatus
    57 00001639 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    58                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    59 0000163B B480                <1>     mov ah, 80h ;Set error bit
    60 0000163D 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    61                              <1> .conExit:
    62 00001641 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    63 00001647 5B                  <1>     pop rbx
    64 00001648 58                  <1>     pop rax
    65 00001649 C3                  <1>     ret
    66                              <1> .conRead:    ;Function 4
    67 0000164A B005                <1>     mov al, 05h ;Bad request structure length?
    68 0000164C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    69 0000164F 75EA                <1>     jne .conWriteErrorCode
    70                              <1> 
    71 00001651 57                  <1>     push rdi
    72 00001652 51                  <1>     push rcx
    73 00001653 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    74 00001657 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    75                              <1> .cre1:
    76 00001659 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    77 0000165C 741C                <1>     je .cre2
    78 0000165E 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    79 00001665 751A                <1>     jnz .cre3   ;No, get the buffer value
    80 00001667 31C0                <1>     xor eax, eax
    81 00001669 CD36                <1>     int 36h
    82                              <1> .cre11:
    83 0000166B AA                  <1>     stosb
    84 0000166C 84C0                <1>     test al, al ;Was the ascii code 0?
    85 0000166E 7506                <1>     jnz .cre12  ;No, skip storing scancode
    86 00001670 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    87                              <1> .cre12:
    88 00001676 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    89 00001678 EBDF                <1>     jmp short .cre1
    90                              <1> .cre2:
    91 0000167A 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    92 0000167D 59                  <1>     pop rcx
    93 0000167E 5F                  <1>     pop rdi
    94 0000167F EBC0                <1>     jmp short .conExit
    95                              <1> .cre3:
    96 00001681 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    97 00001687 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    98 0000168E EBDB                <1>     jmp short .cre11
    99                              <1> 
   100                              <1> .conNondestructiveRead:  ;Function 5
   101 00001690 B005                <1>     mov al, 05h ;Bad request structure length?
   102 00001692 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   103 00001695 75A4                <1>     jne .conWriteErrorCode
   104 00001697 803D8E00000000      <1>     cmp byte [.conBuf], 0
   105 0000169E 7519                <1>     jnz .cnr2
   106 000016A0 B401                <1>     mov ah, 01h     ;Get key if exists
   107 000016A2 CD36                <1>     int 36h
   108 000016A4 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   109                              <1>     ;Keystroke available
   110                              <1> .cnr0:
   111 000016A6 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   112 000016A9 E993FFFFFF          <1>     jmp .conExit
   113                              <1> .cnr1: ;No keystroke available
   114 000016AE 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   115 000016B4 E988FFFFFF          <1>     jmp .conExit
   116                              <1> .cnr2:
   117 000016B9 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   118 000016BF EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   119                              <1> 
   120                              <1> .conInputStatus:         ;Function 6
   121 000016C1 B005                <1>     mov al, 05h ;Bad request structure length?
   122 000016C3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   123 000016C6 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   124 000016CC E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   125                              <1> 
   126                              <1> .conFlushInputBuffers:   ;Function 7
   127 000016D1 B005                <1>     mov al, 05h ;Bad request structure length?
   128 000016D3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   129 000016D6 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   130 000016DC C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   131                              <1> .cfib0:
   132 000016E3 B401                <1>     mov ah, 01      ;Get buffer status
   133 000016E5 CD36                <1>     int 36h
   134 000016E7 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   135 000016ED 30E4                <1>     xor ah, ah
   136 000016EF CD36                <1>     int 36h ;Read key to flush from buffer
   137 000016F1 EBF0                <1>     jmp short .cfib0
   138                              <1> 
   139                              <1> .conWrite:   ;Function 8 and 9
   140 000016F3 B005                <1>     mov al, 05h ;Bad request structure length?
   141 000016F5 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   142 000016F8 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   143                              <1> 
   144 000016FE 56                  <1>     push rsi
   145 000016FF 51                  <1>     push rcx
   146 00001700 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   147 00001704 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   148                              <1> .cw1: 
   149 00001706 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   150 00001709 7407                <1>     je .cw2
   151 0000170B AC                  <1>     lodsb   ;Get char into al, and inc rsi
   152 0000170C CD49                <1>     int 49h ;Fast print char
   153 0000170E FFC1                <1>     inc ecx
   154 00001710 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   155                              <1> .cw2:
   156 00001712 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   157 00001715 59                  <1>     pop rcx
   158 00001716 5E                  <1>     pop rsi
   159 00001717 E925FFFFFF          <1>     jmp .conExit
   160                              <1> .conOutputStatus:   ;Function 0Ah
   161 0000171C B005                <1>     mov al, 05h ;Bad request structure length?
   162 0000171E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   163 00001721 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   164 00001727 E915FFFFFF          <1>     jmp .conExit
   165                              <1> 
   166 0000172C 00                  <1> .conBuf db 0    ;Single byte buffer
   167                              <1> clkDriver:
   168 0000172D 50                  <1>     push rax
   169 0000172E 53                  <1>     push rbx
   170 0000172F 51                  <1>     push rcx
   171 00001730 52                  <1>     push rdx
   172 00001731 56                  <1>     push rsi
   173 00001732 55                  <1>     push rbp
   174 00001733 488B1DA4FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   175 0000173A B003                <1>     mov al, 03h ;Unknown Command
   176 0000173C 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   177 00001740 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   178                              <1> 
   179 00001742 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   180 00001745 3C04                <1>     cmp al, 04h
   181 00001747 7437                <1>     jz .clkRead
   182 00001749 3C06                <1>     cmp al, 06h
   183 0000174B 0F8494000000        <1>     jz .clkInputStatus
   184 00001751 3C07                <1>     cmp al, 07h
   185 00001753 0F8498000000        <1>     jz .clkFlushInputBuffers
   186 00001759 3C08                <1>     cmp al, 08h
   187 0000175B 0F84A0000000        <1>     jz .clkWrite
   188 00001761 3C09                <1>     cmp al, 09h
   189 00001763 0F8498000000        <1>     jz .clkWrite
   190 00001769 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   191                              <1> .clkNotFunctioning:
   192 0000176B B002                <1>     mov al, 02h ;Device not ready error
   193                              <1> .clkWriteErrorCode:
   194 0000176D B480                <1>     mov ah, 80h ;Set error bit
   195 0000176F 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   196                              <1> .clkExit:
   197 00001773 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   198 00001779 5D                  <1>     pop rbp
   199 0000177A 5E                  <1>     pop rsi
   200 0000177B 5A                  <1>     pop rdx
   201 0000177C 59                  <1>     pop rcx
   202 0000177D 5B                  <1>     pop rbx
   203 0000177E 58                  <1>     pop rax
   204 0000177F C3                  <1>     ret
   205                              <1> 
   206                              <1> .clkRead:           ;Function 4
   207 00001780 B005                <1>     mov al, 05h ;Bad request structure length?
   208 00001782 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   209 00001785 75E6                <1>     jne .clkWriteErrorCode
   210                              <1> 
   211 00001787 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   212 0000178A 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   213 0000178E 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   214 00001795 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   215 00001799 30E4                <1>     xor ah, ah
   216 0000179B CD3A                <1>     int 3Ah         ;Read the system timer
   217 0000179D 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   218 0000179F 740D                <1>     jz .clkr1       ;Nope, now just time 
   219 000017A1 30E4                <1>     xor ah, ah
   220                              <1>     ;This works as al should keep count of the # of days passed since last read
   221 000017A3 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   222 000017A7 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   223                              <1> .clkr1:
   224 000017AE 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   225 000017B1 0FB7D2              <1>     movzx edx, dx
   226 000017B4 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   227 000017B6 89D0                <1>     mov eax, edx
   228 000017B8 31D2                <1>     xor edx, edx
   229 000017BA 89D8                <1>     mov eax, ebx
   230 000017BC B944040000          <1>     mov ecx, 1092   
   231 000017C1 F7F1                <1>     div ecx
   232 000017C3 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   233 000017C6 89D0                <1>     mov eax, edx    ;Get remainder in eax
   234 000017C8 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   235 000017CC 31D2                <1>     xor edx, edx
   236 000017CE B95B000000          <1>     mov ecx, 91 ;5*18.2
   237 000017D3 F7F1                <1>     div ecx
   238 000017D5 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   239 000017D8 89D0                <1>     mov eax, edx    ;Get remainder in eax
   240                              <1>     ;lea eax, dword [eax + 4*eax]
   241                              <1>     ;add eax, edx    ;Essentially multiply by 6
   242 000017DA 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   243 000017DD 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   244 000017E0 E98EFFFFFF          <1>     jmp .clkExit
   245                              <1> 
   246                              <1> .clkInputStatus:    ;Function 6
   247                              <1> ;Always return ready
   248 000017E5 B005                <1>     mov al, 05h ;Bad request structure length?
   249 000017E7 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   250 000017EA 7581                <1>     jne .clkWriteErrorCode
   251 000017EC E982FFFFFF          <1>     jmp .clkExit
   252                              <1> .clkFlushInputBuffers:  ;Function 7
   253                              <1> ;Always return done immediately
   254 000017F1 B005                <1>     mov al, 05h ;Bad request structure length?
   255 000017F3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   256 000017F6 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   257 000017FC E972FFFFFF          <1>     jmp .clkExit
   258                              <1> 
   259                              <1> .clkWrite:          ;Functions 8 and 9
   260 00001801 B005                <1>     mov al, 05h ;Bad request structure length?
   261 00001803 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   262 00001806 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   263                              <1> 
   264 0000180C 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   265 0000180F 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   266 00001813 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   267 00001817 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   268                              <1> 
   269 0000181E 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   270 00001820 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   271 00001824 B105                <1>     mov cl, 5
   272 00001826 F6F1                <1>     div cl          ;Divide al by 5
   273 00001828 30E4                <1>     xor ah, ah      ;Remove the remainder
   274 0000182A 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   275                              <1> ;Using the decimal part of this formula for the low count
   276                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   277 0000182C 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   278 0000182F B912000000          <1>     mov ecx, 18
   279 00001834 F7E1                <1>     mul ecx  
   280 00001836 01C3                <1>     add ebx, eax
   281                              <1> 
   282 00001838 31D2                <1>     xor edx, edx
   283 0000183A 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   284 0000183E B944040000          <1>     mov ecx, 1092
   285 00001843 F7E1                <1>     mul ecx
   286 00001845 01C3                <1>     add ebx, eax
   287 00001847 89DA                <1>     mov edx, ebx    ;edx now has low count
   288 00001849 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   289 0000184D B401                <1>     mov ah, 01h     ;Set the system time
   290 0000184F CD3A                <1>     int 3Ah
   291                              <1> 
   292 00001851 4889F3              <1>     mov rbx, rsi
   293 00001854 E91AFFFFFF          <1>     jmp .clkExit
   294                              <1> 
   295                              <1> .clkBCDtoHex:
   296                              <1> ;Converts a BCD value to a Hex byte
   297                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   298 00001859 51                  <1>     push rcx
   299 0000185A 0FB6C0              <1>     movzx eax, al   ;Zero extend
   300 0000185D 89C1                <1>     mov ecx, eax    ;Save al in ecx
   301 0000185F 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   302 00001864 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   303 0000186A C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   304                              <1> .cbth0:
   305 0000186D 050A000000          <1>     add eax, 10
   306 00001872 E2F9                <1>     loop .cbth0
   307 00001874 59                  <1>     pop rcx
   308 00001875 C3                  <1>     ret
   309                              <1> 
   310                              <1> .clkHexToBCD:
   311                              <1> ;Converts a Hex byte into two BCD digits
   312                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   313 00001876 51                  <1>     push rcx
   314 00001877 0FB6C0              <1>     movzx eax, al   ;Zero extend
   315 0000187A 31C9                <1>     xor ecx, ecx
   316                              <1> .chtb0:
   317 0000187C 3D0A000000          <1>     cmp eax, 10
   318 00001881 7209                <1>     jb .chtb1
   319 00001883 2D0A000000          <1>     sub eax, 10
   320 00001888 FFC1                <1>     inc ecx
   321 0000188A EBF0                <1>     jmp short .chtb0
   322                              <1> .chtb1:
   323 0000188C C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   324 0000188F 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   325 00001891 59                  <1>     pop rcx
   326 00001892 C3                  <1>     ret
   327 00001893 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   328                              <1> ;When counting the number of days, first compute the number of years since
   329                              <1> ; 1980 and your year. 
   330                              <1> ;Then, using the table below, find the number of leap years between 1980
   331                              <1> ; and (YourYear - 1). 
   332                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   333                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   334                              <1> ;Use the months table to get the number of days in a normal month as leap 
   335                              <1> ; years are added using the previous comment.
   336                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   337                              <1> ; a leap year using the table. If it is, add an extra day.
   338                              <1> .clkLeapYears:
   339 00001895 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   339 0000189E 24282C30            <1>
   340 000018A2 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   340 000018AB 585C60              <1>
   341                              <1> .clkMonths:
   342 000018AE 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   342 000018B7 1F1E1F              <1>
   343                              <1> ;COM Driver headers and main interrupt strat
   344                              <1> com1Intr:
   345 000018BA C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   346 000018C1 EB19                <1>     jmp short comIntr
   347                              <1> com2Intr:
   348 000018C3 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   349 000018CA EB10                <1>     jmp short comIntr
   350                              <1> com3Intr:
   351 000018CC C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   352 000018D3 EB07                <1>     jmp short comIntr
   353                              <1> com4Intr:
   354 000018D5 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   355                              <1> comIntr:
   356 000018DC 50                  <1>     push rax
   357 000018DD 53                  <1>     push rbx
   358 000018DE 51                  <1>     push rcx
   359 000018DF 52                  <1>     push rdx
   360 000018E0 56                  <1>     push rsi
   361 000018E1 57                  <1>     push rdi
   362 000018E2 488B1DF5FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   363 000018E9 B003                <1>     mov al, 03h ;Unknown Command
   364 000018EB 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   365 000018EF 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   366                              <1> 
   367 000018F1 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   368 000018F4 3C04                <1>     cmp al, 4   ;Read Character(s)
   369 000018F6 7462                <1>     jz .comRead
   370 000018F8 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   371 000018FA 0F849B000000        <1>     jz .comNondestructiveRead   
   372 00001900 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   373 00001902 0F8484000000        <1>     jz .comReadInputStatus
   374 00001908 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   375 0000190A 0F84B9000000        <1>     jz .comFlushInputBuffers
   376 00001910 3C08                <1>     cmp al, 8
   377 00001912 0F84DB000000        <1>     jz .comWrite
   378 00001918 3C09                <1>     cmp al, 9
   379 0000191A 0F84D3000000        <1>     jz .comWrite
   380 00001920 3C0A                <1>     cmp al, 0Ah
   381 00001922 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   382 00001928 EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   383                              <1> .comErrorNoCount:
   384 0000192A B002                <1>     mov al, 02h ;Unknown device
   385 0000192C EB19                <1>     jmp short .comWriteErrorCode
   386                              <1> .comReadError:
   387 0000192E BA0B000000          <1>     mov edx, 0Bh
   388                              <1> .comWriteError:
   389 00001933 BA0A000000          <1>     mov edx, 0Ah
   390                              <1> .comError:
   391 00001938 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   392 0000193B B902000000          <1>     mov ecx, 02h    ;Unknown device
   393 00001940 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   394 00001942 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   395 00001945 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   396                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   397 00001947 B480                <1>     mov ah, 80h ;Set error bit
   398 00001949 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   399                              <1> .comExit:
   400 0000194D 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   401 00001953 5F                  <1>     pop rdi
   402 00001954 5E                  <1>     pop rsi
   403 00001955 5A                  <1>     pop rdx
   404 00001956 59                  <1>     pop rcx
   405 00001957 5B                  <1>     pop rbx
   406 00001958 58                  <1>     pop rax
   407 00001959 C3                  <1>     ret
   408                              <1> 
   409                              <1> .comRead:
   410 0000195A B005                <1>     mov al, 05h ;Bad request structure length?
   411 0000195C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   412 0000195F 75E6                <1>     jne .comWriteErrorCode
   413                              <1> 
   414 00001961 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   415 00001965 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   416                              <1> .cr1:
   417 00001967 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   418 0000196A 741B                <1>     je .cre2
   419                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   420 0000196C B802000000          <1>     mov eax, 02h    ;Recieve 
   421 00001971 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   422 00001977 6698                <1>     cbw     ;Zero extend to upper byte
   423 00001979 CD34                <1>     int 34h ;Recieve Char
   424 0000197B 72BB                <1>     jc .comError
   425 0000197D 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   426 00001980 74EA                <1>     je .cr11
   427 00001982 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   428 00001983 FFC1                <1>     inc ecx
   429 00001985 EBE0                <1>     jmp short .cr1
   430                              <1> .cre2:
   431 00001987 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   432 0000198A EBC1                <1>     jmp short .comExit
   433                              <1> 
   434                              <1> .comReadInputStatus:
   435 0000198C B005                <1>     mov al, 05h ;Bad request structure length?
   436 0000198E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   437 00001991 75B4                <1>     jne .comWriteErrorCode
   438 00001993 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   439 00001999 EBB2                <1>     jmp short .comExit
   440                              <1> 
   441                              <1> .comNondestructiveRead:
   442                              <1> ;Acts like a "read one character if there is one" function
   443 0000199B B005                <1>     mov al, 05h ;Bad request structure length?
   444 0000199D 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   445 000019A0 75A5                <1>     jne .comWriteErrorCode
   446                              <1> .cndr1:
   447 000019A2 B802000000          <1>     mov eax, 02h    ;Recieve 
   448 000019A7 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   449 000019AD 6698                <1>     cbw     ;Zero extend to upper byte
   450 000019AF CD34                <1>     int 34h ;Recieve Char
   451 000019B1 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   452 000019B7 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   453 000019BA 7405                <1>     je .cndr2
   454 000019BC 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   455 000019BF EB8C                <1>     jmp short .comExit
   456                              <1> .cndr2:
   457 000019C1 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   458 000019C7 EB84                <1>     jmp short .comExit
   459                              <1> 
   460                              <1> .comFlushInputBuffers:
   461 000019C9 B005                <1>     mov al, 05h ;Bad request structure length?
   462 000019CB 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   463 000019CE 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   464                              <1> .cfib0:
   465 000019D4 8A1584000000        <1>     mov dl, byte [.comDevice]
   466 000019DA 6698                <1>     cbw
   467 000019DC B802000000          <1>     mov eax, 02h    ;Recieve
   468 000019E1 CD34                <1>     int 34h
   469 000019E3 0F8241FFFFFF        <1>     jc .comErrorNoCount
   470 000019E9 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   471 000019EC 75E6                <1>     jne .cfib0
   472 000019EE E95AFFFFFF          <1>     jmp .comExit
   473                              <1> 
   474                              <1> .comWrite:
   475 000019F3 B005                <1>     mov al, 05h ;Bad request structure length?
   476 000019F5 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   477 000019F8 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   478                              <1> 
   479 000019FE 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   480 00001A02 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   481                              <1> .cw1: 
   482 00001A04 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   483 00001A07 7417                <1>     je .cw2
   484 00001A09 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   485 00001A0A B401                <1>     mov ah, 01h ;Move function number into ah
   486 00001A0C 8A154C000000        <1>     mov dl, byte [.comDevice]
   487 00001A12 6698                <1>     cbw     ;Zero extend to upper byte
   488 00001A14 CD34                <1>     int 34h ;Transmit char
   489 00001A16 0F821CFFFFFF        <1>     jc .comError
   490 00001A1C FFC1                <1>     inc ecx
   491 00001A1E EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   492                              <1> .cw2:
   493 00001A20 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   494 00001A23 E925FFFFFF          <1>     jmp .comExit
   495                              <1> 
   496                              <1> .comOutputStatus:
   497                              <1> ;Read MODEM status
   498 00001A28 B005                <1>     mov al, 05h ;Bad request structure length?
   499 00001A2A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   500 00001A2D 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   501                              <1> 
   502 00001A33 8A1525000000        <1>     mov dl, byte [.comDevice]
   503 00001A39 6698                <1>     cbw     ;Zero extend to upper byte
   504 00001A3B B403                <1>     mov ah, 03h     ;Get status
   505 00001A3D CD34                <1>     int 34h
   506 00001A3F 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   507 00001A45 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   508 00001A4A C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   509 00001A4D F7D0                <1>     not eax      ;Bitwise inversion
   510 00001A4F 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   511 00001A54 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   512 00001A59 E9EFFEFFFF          <1>     jmp .comExit
   513 00001A5E 00                  <1> .comDevice   db 0
    26                                  %include "./Source/Drivers/diskDrv.asm"
    27                              <1> msdDriver:
    28 00001A5F 50                  <1>     push rax
    29 00001A60 53                  <1>     push rbx
    30 00001A61 51                  <1>     push rcx
    31 00001A62 52                  <1>     push rdx
    32 00001A63 56                  <1>     push rsi
    33 00001A64 57                  <1>     push rdi
    34 00001A65 55                  <1>     push rbp
    35 00001A66 4150                <1>     push r8
    36 00001A68 488B1D6FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    37 00001A6F 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    38 00001A73 B003                <1>     mov al, 03h
    39 00001A75 0F87A2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    40 00001A7B B001                <1>     mov al, 01h ;Unknown Unit Error
    41 00001A7D 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    42 00001A81 0F8796000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    43 00001A87 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    44 00001A8B D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    45 00001A8D 488D0D9F000000      <1>     lea rcx, .msdTable
    46 00001A94 0FB70401            <1>     movzx eax, word [rcx + rax]
    47 00001A98 85C0                <1>     test eax, eax   ;Is the function number 0?
    48 00001A9A 0F8483000000        <1>     jz .msdDriverExit ;Valid function number nut not for MSD, exits with done!
    49 00001AA0 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    50 00001AA3 FFE0                <1>     jmp rax
    51                              <1> 
    52                              <1> .msdIOError:  ;In Read and Write errors, rbp points to the dev struc
    53 00001AA5 4889EB              <1>     mov rbx, rbp
    54 00001AA8 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    55 00001AAB 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    56 00001AAD 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    57                              <1> ;Now fall through to general error
    58                              <1> .msdGenDiskError:
    59 00001AB0 B401                <1>     mov ah, 01h
    60 00001AB2 30D2                <1>     xor dl, dl  ;Work around bug that fails request if dl > 7Fh
    61 00001AB4 CD33                <1>     int 33h ;Read status of last operation
    62 00001AB6 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    63 00001AB9 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    64 00001ABB 7460                <1>     je .msdWriteErrorCode 
    65 00001ABD B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    66 00001ABF 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    67 00001AC2 7459                <1>     je .msdWriteErrorCode 
    68 00001AC4 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    69 00001AC7 7454                <1>     je .msdWriteErrorCode
    70                              <1> ;Device Not Ready
    71 00001AC9 B002                <1>     mov al, 02h  ;Device not ready code
    72 00001ACB 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    73 00001ACE 744D                <1>     je .msdWriteErrorCode
    74 00001AD0 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    75 00001AD4 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    76                              <1> ;Write Protected
    77 00001AD8 30C0                <1>     xor al, al
    78 00001ADA 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
    79 00001ADF 743C                <1>     je .msdWriteErrorCode
    80                              <1> ;CRC Error
    81 00001AE1 B004                <1>     mov al, 04h     ;CRC error code
    82 00001AE3 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
    83 00001AE8 7433                <1>     je .msdWriteErrorCode
    84 00001AEA 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
    85 00001AEF 742C                <1>     je .msdWriteErrorCode
    86 00001AF1 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
    87 00001AF6 7425                <1>     je .msdWriteErrorCode
    88                              <1> ;Seek Error
    89 00001AF8 B006                <1>     mov al, 06h     ;Seek error code
    90 00001AFA 80F902              <1>     cmp cl, 02h     ;No Seek Complete
    91 00001AFD 741E                <1>     je .msdWriteErrorCode
    92                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
    93                              <1> ;This error should only be called if BPB not recognised for Flash Drives
    94 00001AFF B007                <1>     mov al, 07h
    95 00001B01 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
    96 00001B04 7417                <1>     je .msdWriteErrorCode
    97                              <1> ;Sector Not Found
    98 00001B06 B008                <1>     mov al, 08h     ;Sector not found code
    99 00001B08 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   100 00001B0B 7410                <1>     je .msdWriteErrorCode
   101                              <1> ;Write faults
   102 00001B0D B00A                <1>     mov al, 0Ah     ;Write fault
   103 00001B0F 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   104 00001B12 7409                <1>     je .msdWriteErrorCode
   105                              <1> ;Read faults
   106 00001B14 B00B                <1>     mov al, 0Bh     ;Read fault
   107 00001B16 80F911              <1>     cmp cl, 11h     ;Read error
   108 00001B19 7402                <1>     je .msdWriteErrorCode
   109                              <1> ;General Errors
   110 00001B1B B00C                <1>     mov al, 0Ch     ;Everything else is general error
   111                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   112 00001B1D B480                <1>     mov ah, 80h ;Set error bit
   113 00001B1F 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   114                              <1> .msdDriverExit:
   115 00001B23 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
   116 00001B29 4158                <1>     pop r8
   117 00001B2B 5D                  <1>     pop rbp
   118 00001B2C 5F                  <1>     pop rdi
   119 00001B2D 5E                  <1>     pop rsi
   120 00001B2E 5A                  <1>     pop rdx
   121 00001B2F 59                  <1>     pop rcx
   122 00001B30 5B                  <1>     pop rbx
   123 00001B31 58                  <1>     pop rax
   124 00001B32 C3                  <1>     ret
   125                              <1> .msdTable:
   126 00001B33 3200                <1>     dw .msdInit - .msdTable         ;Function 0
   127 00001B35 0A01                <1>     dw .msdMedChk - .msdTable       ;Function 1
   128 00001B37 8201                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   129 00001B39 F701                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   130 00001B3B 0702                <1>     dw .msdRead - .msdTable         ;Function 4
   131 00001B3D 0000                <1>     dw 0                            ;Function 5
   132 00001B3F 0000                <1>     dw 0                            ;Function 6
   133 00001B41 0000                <1>     dw 0                            ;Function 7
   134 00001B43 4302                <1>     dw .msdWrite - .msdTable        ;Function 8
   135 00001B45 7F02                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   136 00001B47 0000                <1>     dw 0                            ;Function 10
   137 00001B49 0000                <1>     dw 0                            ;Function 11
   138 00001B4B C802                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   139 00001B4D D802                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   140 00001B4F F702                <1>     dw .msdDevClose - .msdTable     ;Function 14
   141 00001B51 1603                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   142 00001B53 0000                <1>     dw 0                            ;Function 16
   143 00001B55 0000                <1>     dw 0                            ;Function 17
   144 00001B57 0000                <1>     dw 0                            ;Function 18
   145 00001B59 4303                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   146 00001B5B 0000                <1>     dw 0                            ;Function 20
   147 00001B5D 0000                <1>     dw 0                            ;Function 21
   148 00001B5F 0000                <1>     dw 0                            ;Function 22
   149 00001B61 5303                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   150 00001B63 6C03                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   151                              <1> 
   152                              <1> 
   153                              <1> .msdInit:            ;Function 0
   154 00001B65 B005                <1>     mov al, 05h ;Bad request structure length
   155 00001B67 803B1F              <1>     cmp byte [rbx + drvReqHdr.hdrlen], initReqPkt_size
   156 00001B6A 75B1                <1>     jne .msdWriteErrorCode
   157                              <1> 
   158 00001B6C 488D2DF3050000      <1>     lea rbp, endptr
   159 00001B73 48896B0E            <1>     mov qword [rbx + initReqPkt.endptr], rbp    ;Where the end is gonna be
   160 00001B77 488D2D68030000      <1>     lea rbp, .msdBPBTbl
   161 00001B7E 48896B16            <1>     mov qword [rbx + initReqPkt.optptr], rbp    ;Where bpb tbl is gonna be
   162                              <1> 
   163 00001B82 4889DD              <1>     mov rbp, rbx ;Save the req block ptr in rbp
   164 00001B85 31D2                <1>     xor edx, edx  ;Start from device zero
   165 00001B87 88550D              <1>     mov byte [rbp + initReqPkt.numunt], dl   ;Zero this field, max 5
   166                              <1> .mi0:   ;Now check each device for partitions
   167 00001B8A 807D0D05            <1>     cmp byte [rbp + initReqPkt.numunt], 5
   168 00001B8E 7469                <1>     je .msdExit ;IF we are at 5 now, we exit
   169 00001B90 B482                <1>     mov ah, 82h ;LBA read
   170 00001B92 B001                <1>     mov al, 1   ;1 sector
   171 00001B94 31C9                <1>     xor ecx, ecx  ;Read sector 0
   172 00001B96 488D1D(BA020000)    <1>     lea rbx, msdTempBuffer  ;Get address of this space
   173 00001B9D CD33                <1>     int 33h
   174 00001B9F 0F8290000000        <1>     jc .msdInitError
   175                              <1> ;Now we verify if this is a BPB. Removable devices can't be partitioned
   176                              <1> ;1) Check byte 0 for EBh (short jmp) and byte 2 for a 90h (nop).
   177 00001BA5 8A03                <1>     mov al, byte [rbx]
   178 00001BA7 8A6302              <1>     mov ah, byte [rbx + 2]
   179 00001BAA 663DEB90            <1>     cmp ax, 090EBh
   180 00001BAE 7573                <1>     jne .mimbr
   181                              <1> ;Valid BPB found! Copy to internal table and inc lastdrive
   182 00001BB0 4889DE              <1>     mov rsi, rbx
   183 00001BB3 B878000000          <1>     mov eax, bpbEx_size
   184 00001BB8 89D1                <1>     mov ecx, edx    ;Temporarily save dl in ecx
   185 00001BBA F7E2                <1>     mul edx
   186 00001BBC 89CA                <1>     mov edx, ecx
   187 00001BBE 488D3D49030000      <1>     lea rdi, .msdBPBblks
   188 00001BC5 4801C7              <1>     add rdi, rax
   189 00001BC8 B978000000          <1>     mov ecx, bpbEx_size
   190 00001BCD 4889F8              <1>     mov rax, rdi    ;Save the entry address in rax
   191 00001BD0 F3A4                <1>     rep movsb   ;Copy the bpb into the bpb table
   192 00001BD2 488D3D0D030000      <1>     lea rdi, .msdBPBTbl
   193 00001BD9 488D3CD7            <1>     lea rdi, qword [rdi + 8*rdx]
   194 00001BDD 488907              <1>     mov qword [rdi], rax
   195 00001BE0 488D3DF5020000      <1>     lea rdi, .msdBIOSmap
   196 00001BE7 4801D7              <1>     add rdi, rdx    ;rdx contains a number, table is a list of bytes
   197 00001BEA 8817                <1>     mov byte [rdi], dl
   198 00001BEC FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   199 00001BEF FEC2                <1>     inc dl
   200 00001BF1 3A15(09000000)      <1>     cmp dl, byte [numRemMSD] ;Once these are equal, we have processed last dev
   201 00001BF7 7591                <1>     jne .mi0
   202                              <1> .msdExit:
   203                              <1> ;If one device only, copy its BPB pointer and drive number
   204                              <1> ;When HDD support implemented, this will check the number of remdevs not lastdrv
   205 00001BF9 807D0D01            <1>     cmp byte [rbp + initReqPkt.numunt], 1
   206 00001BFD 751C                <1>     jne .msdexit1
   207                              <1> ;Here ONLY if one device found
   208 00001BFF 488D35E0020000      <1>     lea rsi, .msdBPBTbl
   209 00001C06 488D7E08            <1>     lea rdi, qword [rsi + 8]    ;Point to next entry
   210 00001C0A 48A5                <1>     movsq   ;Copy pointer
   211 00001C0C 488D35C9020000      <1>     lea rsi, .msdBIOSmap
   212 00001C13 488D7E01            <1>     lea rdi, qword [rsi + 1]
   213 00001C17 A4                  <1>     movsb   ;Copy byte
   214 00001C18 FE450D              <1>     inc byte [rbp + initReqPkt.numunt]
   215                              <1> .msdexit1:
   216 00001C1B 4889EB              <1>     mov rbx, rbp
   217 00001C1E E900FFFFFF          <1>     jmp .msdDriverExit
   218                              <1> .mimbr:
   219                              <1> ;Goto next device without incrementing LASTDRIVE
   220 00001C23 FEC2                <1>     inc dl
   221 00001C25 8A05(09000000)      <1>     mov al, byte [numRemMSD]
   222 00001C2B 38C2                <1>     cmp dl, al ;Once these are equ, we have processed last dev
   223 00001C2D 0F8557FFFFFF        <1>     jne .mi0
   224 00001C33 EBC4                <1>     jmp short .msdExit
   225                              <1> .msdInitError:
   226 00001C35 4889EB              <1>     mov rbx, rbp
   227 00001C38 E973FEFFFF          <1>     jmp .msdGenDiskError
   228                              <1> .msdMedChk:          ;Function 1
   229 00001C3D B005                <1>     mov al, 05h ;Bad request structure length
   230 00001C3F 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   231 00001C42 0F85D5FEFFFF        <1>     jne .msdWriteErrorCode
   232                              <1> 
   233 00001C48 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   234 00001C4D 488D0D88020000      <1>     lea rcx, .msdBIOSmap
   235 00001C54 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   236 00001C57 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   237 00001C5A 7550                <1>     jnz .mmcNoChange
   238                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   239 00001C5C B416                <1>     mov ah, 16h 
   240 00001C5E CD33                <1>     int 33h
   241 00001C60 0F824AFEFFFF        <1>     jc .msdGenDiskError
   242 00001C66 80FC80              <1>     cmp ah, 80h
   243 00001C69 740E                <1>     je .mmcNoChangeLine
   244 00001C6B 80FC86              <1>     cmp ah, 86h
   245 00001C6E 7409                <1>     je .mmcNoChangeLine
   246 00001C70 84E4                <1>     test ah, ah ;No change?
   247 00001C72 7438                <1>     jz .mmcNoChange
   248 00001C74 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   249 00001C77 7516                <1>     jnz .mmcChange
   250                              <1> ;If nothing, fall through and test manually, should never happen though
   251                              <1> .mmcNoChangeLine:
   252                              <1> ;Now we test Media Descriptor
   253 00001C79 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   254 00001C7C 488D3D63020000      <1>     lea rdi, .msdBPBTbl
   255 00001C83 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax]
   256 00001C87 488B3F              <1>     mov rdi, qword [rdi]    ;Dereference rdi
   257 00001C8A 385715              <1>     cmp byte [rdi + bpb32.media], dl    ;Compare media descriptor bytes
   258 00001C8D 7414                <1>     je .mmcUnsure
   259                              <1> .mmcChange:
   260 00001C8F C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   261 00001C93 488D0538020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   262 00001C9A 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   263 00001C9E E980FEFFFF          <1>     jmp .msdDriverExit
   264                              <1> .mmcUnsure:
   265 00001CA3 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   266 00001CA7 E977FEFFFF          <1>     jmp .msdDriverExit
   267                              <1> .mmcNoChange:
   268 00001CAC C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   269 00001CB0 E96EFEFFFF          <1>     jmp .msdDriverExit
   270                              <1> 
   271                              <1> .msdBuildBPB:        ;Function 2
   272 00001CB5 B005                <1>     mov al, 05h ;Bad request structure length
   273 00001CB7 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   274 00001CBA 0F855DFEFFFF        <1>     jne .msdWriteErrorCode
   275                              <1> 
   276 00001CC0 4889DE              <1>     mov rsi, rbx
   277 00001CC3 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   278 00001CC8 488D0D0D020000      <1>     lea rcx, .msdBIOSmap
   279 00001CCF 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   280 00001CD2 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   281 00001CD6 31C9                <1>     xor ecx, ecx    ;Read Sector 0
   282 00001CD8 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   283 00001CDD CD33                <1>     int 33h
   284 00001CDF 0F82CBFDFFFF        <1>     jc .msdGenDiskError
   285                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   286 00001CE5 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   287 00001CE9 7418                <1>     je .mbbpb0
   288 00001CEB 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   289 00001CEF 7412                <1>     je .mbbpb0
   290 00001CF1 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   291 00001CF5 740C                <1>     je .mbbpb0
   292 00001CF7 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   293 00001CFB B007                <1>     mov al, 07h ;Unknown media error code
   294 00001CFD 0F821AFEFFFF        <1>     jb .msdWriteErrorCode
   295                              <1> .mbbpb0:
   296 00001D03 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   297 00001D06 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   298 00001D0B 488D3DD4010000      <1>     lea rdi, .msdBPBTbl
   299 00001D12 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   300 00001D16 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   301 00001D19 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   302 00001D1D B90F000000          <1>     mov ecx, bpbEx_size/8
   303 00001D22 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   304 00001D25 E9F9FDFFFF          <1>     jmp .msdDriverExit
   305                              <1> .msdIOCTLRead:       ;Function 3, returns done
   306 00001D2A B005                <1>     mov al, 05h ;Bad request structure length
   307 00001D2C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   308 00001D2F 0F85E8FDFFFF        <1>     jne .msdWriteErrorCode
   309                              <1> 
   310 00001D35 E9E9FDFFFF          <1>     jmp .msdDriverExit
   311                              <1> .msdRead:            ;Function 4
   312                              <1> ;Will read one sector at a time.
   313 00001D3A B005                <1>     mov al, 05h ;Bad request structure length
   314 00001D3C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   315 00001D3F 0F85D8FDFFFF        <1>     jne .msdWriteErrorCode
   316                              <1> 
   317 00001D45 4889DD              <1>     mov rbp, rbx
   318 00001D48 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   319                              <1> .msdr0:
   320 00001D4A B682                <1>     mov dh, 82h ;LBA Read Sectors
   321 00001D4C E867010000          <1>     call .msdBlkIOCommon
   322 00001D51 0F824EFDFFFF        <1>     jc .msdIOError
   323 00001D57 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   324 00001D5F 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   325 00001D67 FFC6                <1>     inc esi
   326 00001D69 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   327 00001D6C 75DC                <1>     jne .msdr0
   328 00001D6E 4889EB              <1>     mov rbx, rbp
   329 00001D71 E9ADFDFFFF          <1>     jmp .msdDriverExit
   330                              <1> .msdWrite:           ;Function 8
   331                              <1> ;Will write one sector at a time.
   332 00001D76 B005                <1>     mov al, 05h ;Bad request structure length
   333 00001D78 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   334 00001D7B 0F859CFDFFFF        <1>     jne .msdWriteErrorCode
   335                              <1> 
   336 00001D81 4889DD              <1>     mov rbp, rbx
   337 00001D84 31F6                <1>     xor esi, esi  ;Set counter to zero
   338                              <1> .msdw0:
   339 00001D86 B683                <1>     mov dh, 83h ;LBA Write Sectors
   340 00001D88 E82B010000          <1>     call .msdBlkIOCommon
   341 00001D8D 0F8212FDFFFF        <1>     jc .msdIOError
   342 00001D93 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   343 00001D9B 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   344 00001DA3 FFC6                <1>     inc esi
   345 00001DA5 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   346 00001DA8 75DC                <1>     jne .msdw0
   347 00001DAA 4889EB              <1>     mov rbx, rbp
   348 00001DAD E971FDFFFF          <1>     jmp .msdDriverExit
   349                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   350                              <1> ;Will write one sector at a time and then verify it.
   351 00001DB2 B005                <1>     mov al, 05h ;Bad request structure length
   352 00001DB4 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   353 00001DB7 0F8560FDFFFF        <1>     jne .msdWriteErrorCode
   354                              <1> 
   355 00001DBD 4889DD              <1>     mov rbp, rbx
   356 00001DC0 31F6                <1>     xor esi, esi  ;Set counter to zero
   357                              <1> .msdwv0:
   358 00001DC2 B683                <1>     mov dh, 83h ;LBA Write Sectors
   359 00001DC4 E8EF000000          <1>     call .msdBlkIOCommon
   360 00001DC9 0F82D6FCFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   361 00001DCF B684                <1>     mov dh, 84h ;LBA Verify Sectors
   362 00001DD1 E8E2000000          <1>     call .msdBlkIOCommon
   363 00001DD6 0F82C9FCFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   364 00001DDC 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   365 00001DE4 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   366 00001DEC FFC6                <1>     inc esi
   367 00001DEE 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   368 00001DF1 75CF                <1>     jne .msdwv0
   369 00001DF3 4889EB              <1>     mov rbx, rbp
   370 00001DF6 E928FDFFFF          <1>     jmp .msdDriverExit
   371                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   372 00001DFB B005                <1>     mov al, 05h ;Bad request structure length
   373 00001DFD 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   374 00001E00 0F8517FDFFFF        <1>     jne .msdWriteErrorCode
   375                              <1> 
   376 00001E06 E918FDFFFF          <1>     jmp .msdDriverExit
   377                              <1> .msdDevOpen:         ;Function 13
   378 00001E0B B005                <1>     mov al, 05h ;Bad request structure length
   379 00001E0D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   380 00001E10 0F8507FDFFFF        <1>     jne .msdWriteErrorCode
   381                              <1> 
   382 00001E16 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   383 00001E1B 488D0DBF000000      <1>     lea rcx, .msdHdlCnt
   384 00001E22 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   385 00001E25 E9F9FCFFFF          <1>     jmp .msdDriverExit
   386                              <1> .msdDevClose:        ;Function 14
   387 00001E2A B005                <1>     mov al, 05h ;Bad request structure length
   388 00001E2C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   389 00001E2F 0F85E8FCFFFF        <1>     jne .msdWriteErrorCode
   390                              <1> 
   391 00001E35 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   392 00001E3A 488D0DA0000000      <1>     lea rcx, .msdHdlCnt
   393 00001E41 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   394 00001E44 E9DAFCFFFF          <1>     jmp .msdDriverExit
   395                              <1> .msdRemovableMedia:  ;Function 15
   396 00001E49 B005                <1>     mov al, 05h ;Bad request structure length
   397 00001E4B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   398 00001E4E 0F85C9FCFFFF        <1>     jne .msdWriteErrorCode
   399                              <1> 
   400 00001E54 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   401 00001E59 488D0D7C000000      <1>     lea rcx, .msdBIOSmap
   402 00001E60 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   403 00001E63 A880                <1>     test al, 80h
   404 00001E65 0F84B8FCFFFF        <1>     jz .msdDriverExit   ;If removable, busy bit is clear
   405 00001E6B 66C743030002        <1>     mov word [rbx + remMediaReqPkt.status], 0200h ;Set Busy bit
   406 00001E71 E9ADFCFFFF          <1>     jmp .msdDriverExit
   407                              <1> .msdGenericIOCTL:    ;Function 19
   408 00001E76 B005                <1>     mov al, 05h ;Bad request structure length
   409 00001E78 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   410 00001E7B 0F859CFCFFFF        <1>     jne .msdWriteErrorCode
   411                              <1> 
   412 00001E81 E99DFCFFFF          <1>     jmp .msdDriverExit
   413                              <1> .msdGetLogicalDev:   ;Function 23
   414 00001E86 B005                <1>     mov al, 05h ;Bad request structure length
   415 00001E88 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   416 00001E8B 0F858CFCFFFF        <1>     jne .msdWriteErrorCode
   417                              <1> 
   418 00001E91 8A0544000000        <1>     mov al, byte [.msdCurDev]
   419 00001E97 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   420 00001E9A E984FCFFFF          <1>     jmp .msdDriverExit
   421                              <1> .msdSetLogicalDev:   ;Function 24
   422 00001E9F B005                <1>     mov al, 05h ;Bad request structure length
   423 00001EA1 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   424 00001EA4 0F8573FCFFFF        <1>     jne .msdWriteErrorCode
   425                              <1> 
   426 00001EAA 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   427 00001EAD 880528000000        <1>     mov byte [.msdCurDev], al
   428 00001EB3 E96BFCFFFF          <1>     jmp .msdDriverExit
   429                              <1> 
   430                              <1> .msdBlkIOCommon:  ;Does block IO
   431                              <1> ;Called with rbp containing old rbx value and ah with function number
   432                              <1> ;Error handled by caller
   433                              <1> ;Sector count handled by caller
   434                              <1> ;Called with dh = BIOS function number
   435 00001EB8 480FB64501          <1>     movzx rax, byte [rbp + ioReqPkt.unitnm]
   436 00001EBD 8A90[DC1E0000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   437 00001EC3 488B4D1A            <1>     mov rcx, qword [rbp + ioReqPkt.strtsc]  ;Get start sector
   438 00001EC7 488B5D0E            <1>     mov rbx, qword [rbp + ioReqPkt.bufptr]  ;Get Memory Buffer
   439 00001ECB 88F4                <1>     mov ah, dh
   440 00001ECD B001                <1>     mov al, 01h ;Do one sector at a time 
   441 00001ECF CD33                <1>     int 33h
   442 00001ED1 C3                  <1>     ret
   443                              <1> 
   444 00001ED2 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   445                              <1> ;LASTDRIVE default is 5
   446 00001EDB 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   447                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   448 00001EDC FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   449 00001EE1 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   450 00001EE6 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   450 00001EEF 000000000000000000- <1>
   450 00001EF8 000000000000000000- <1>
   450 00001F01 000000000000000000- <1>
   450 00001F0A 00000000            <1>
   451 00001F0E 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   451 00001F17 000000000000000000- <1>
   451 00001F20 000000000000000000- <1>
   451 00001F29 000000000000000000- <1>
   451 00001F32 000000000000000000- <1>
   451 00001F3B 000000000000000000- <1>
   451 00001F44 000000000000000000- <1>
   451 00001F4D 000000000000000000- <1>
   451 00001F56 000000000000000000- <1>
   451 00001F5F 000000000000000000- <1>
   451 00001F68 000000000000000000- <1>
   451 00001F71 000000000000000000- <1>
   451 00001F7A 000000000000000000- <1>
   451 00001F83 000000000000000000- <1>
   451 00001F8C 000000000000000000- <1>
   451 00001F95 000000000000000000- <1>
   451 00001F9E 000000000000000000- <1>
   451 00001FA7 000000000000000000- <1>
   451 00001FB0 000000000000000000- <1>
   451 00001FB9 000000000000000000- <1>
   451 00001FC2 000000000000000000- <1>
   451 00001FCB 000000000000000000- <1>
   451 00001FD4 000000000000000000- <1>
   451 00001FDD 000000000000000000- <1>
   451 00001FE6 000000000000000000- <1>
   451 00001FEF 000000000000000000- <1>
   451 00001FF8 000000000000000000- <1>
   451 00002001 000000000000000000- <1>
   451 0000200A 000000000000000000- <1>
   451 00002013 000000000000000000- <1>
   451 0000201C 000000000000000000- <1>
   451 00002025 000000000000000000- <1>
   451 0000202E 000000000000000000- <1>
   451 00002037 000000000000000000- <1>
   451 00002040 000000000000000000- <1>
   451 00002049 000000000000000000- <1>
   451 00002052 000000000000000000- <1>
   451 0000205B 000000000000000000- <1>
   451 00002064 000000000000000000- <1>
   451 0000206D 000000000000000000- <1>
   451 00002076 000000000000000000- <1>
   451 0000207F 000000000000000000- <1>
   451 00002088 000000000000000000- <1>
   451 00002091 000000000000000000- <1>
   451 0000209A 000000000000000000- <1>
   451 000020A3 000000000000000000- <1>
   451 000020AC 000000000000000000- <1>
   451 000020B5 000000000000000000- <1>
   451 000020BE 000000000000000000- <1>
   451 000020C7 000000000000000000- <1>
   451 000020D0 000000000000000000- <1>
   451 000020D9 000000000000000000- <1>
   451 000020E2 000000000000000000- <1>
   451 000020EB 000000000000000000- <1>
   451 000020F4 000000000000000000- <1>
   451 000020FD 000000000000000000- <1>
   451 00002106 000000000000000000- <1>
   451 0000210F 000000000000000000- <1>
   451 00002118 000000000000000000- <1>
   451 00002121 000000000000000000- <1>
   451 0000212A 000000000000000000- <1>
   451 00002133 000000000000000000- <1>
   451 0000213C 000000000000000000- <1>
   451 00002145 000000000000000000- <1>
   451 0000214E 000000000000000000- <1>
   451 00002157 000000000000000000- <1>
   451 00002160 000000000000        <1>
   452                              <1> 
   453                              <1> endptr equ $
    27                                  Segment dynamicDataArea nobits valign=1 vfollows=resSeg
    28                                  %include "./Source/BSS/dosDynaDataArea.asm"
    29                              <1> ;Create SFT header and corresponding array of five default sft entries
    30 00000000 <res Ah>            <1> firstSftHeader  resb sfth_size
    31 0000000A <res 3Dh>           <1> firstSft        resb sft_size
    32 00000047 <res 3Dh>           <1> secondSft       resb sft_size
    33 00000084 <res 3Dh>           <1> thirdSft        resb sft_size
    34 000000C1 <res 3Dh>           <1> fourthSft       resb sft_size
    35 000000FE <res 3Dh>           <1> fifthSft        resb sft_size
    36                              <1> 
    37                              <1> ;Create DPB chain of first 5 available DPB slots
    38                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    39 0000013B <res 34h>           <1> firstDPB        resb dpb_size
    40 0000016F <res 34h>           <1> secondDPB       resb dpb_size
    41                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    42                              <1> ;Always jettison this space
    43 000001A3 <res 34h>           <1> thirdDPB        resb dpb_size
    44 000001D7 <res 34h>           <1> fourthDPB       resb dpb_size
    45 0000020B <res 34h>           <1> fifthDPB        resb dpb_size 
    46                              <1> 
    47                              <1> ;Create a one drive CDS to keep track of drive A's current dir
    48                              <1> ;Replace once CONFGI.SYS has been read
    49 0000023F <res 5Bh>           <1> initCDS         resb cds_size 
    50                              <1> 
    51                              <1> 
    52 0000029A <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    53 000002BA <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    54                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    55                              <1> dynamicDataAreaLength equ $
